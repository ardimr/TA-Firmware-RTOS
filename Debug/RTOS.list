
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015f14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f58  080160b8  080160b8  000260b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017010  08017010  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08017010  08017010  00027010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017018  08017018  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017018  08017018  00027018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801701c  0801701c  0002701c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08017020  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009250  20000208  08017224  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009458  08017224  00039458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e53e  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059fd  00000000  00000000  0005e772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002078  00000000  00000000  00064170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e78  00000000  00000000  000661e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f15b  00000000  00000000  00068060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000279dc  00000000  00000000  000871bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000adbf0  00000000  00000000  000aeb97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c787  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2dc  00000000  00000000  0015c7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801609c 	.word	0x0801609c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	0801609c 	.word	0x0801609c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <MatrixTransformInit>:
#include "KalmanFilter.h"
#include <math.h>

void MatrixTransformInit(MatrixTransform * Matrix){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	Matrix->x[0] = 1;
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <MatrixTransformInit+0x9c>)
 800100c:	e9c1 2300 	strd	r2, r3, [r1]
	Matrix->x[1] = 0;
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Matrix->x[2] = 0;
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Matrix->y[0] = 0;
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Matrix->y[1] = 1;
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MatrixTransformInit+0x9c>)
 8001042:	e9c1 2308 	strd	r2, r3, [r1, #32]
	Matrix->y[2] = 0;
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Matrix->z[0] = 0;
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	f04f 0300 	mov.w	r3, #0
 800105e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Matrix->z[1] = 0;
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Matrix->z[2] = 1;
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MatrixTransformInit+0x9c>)
 8001078:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	Matrix->acc = 0;
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	f04f 0300 	mov.w	r3, #0
 8001086:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	3ff00000 	.word	0x3ff00000

0800109c <Write_MFRC522>:
 * Return value: None
 */

extern SPI_HandleTypeDef hspi1;

void Write_MFRC522(u_char addr, u_char val) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	460a      	mov	r2, r1
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	4613      	mov	r3, r2
 80010aa:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	u_char addr_bits = (((addr<<1) & 0x7E));
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2110      	movs	r1, #16
 80010be:	480d      	ldr	r0, [pc, #52]	; (80010f4 <Write_MFRC522+0x58>)
 80010c0:	f004 fbf6 	bl	80058b0 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi1, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 80010c4:	f107 010f 	add.w	r1, r7, #15
 80010c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010cc:	2201      	movs	r2, #1
 80010ce:	480a      	ldr	r0, [pc, #40]	; (80010f8 <Write_MFRC522+0x5c>)
 80010d0:	f006 f8f7 	bl	80072c2 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &val, 1, 500);
 80010d4:	1db9      	adds	r1, r7, #6
 80010d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010da:	2201      	movs	r2, #1
 80010dc:	4806      	ldr	r0, [pc, #24]	; (80010f8 <Write_MFRC522+0x5c>)
 80010de:	f006 f8f0 	bl	80072c2 <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2110      	movs	r1, #16
 80010e6:	4803      	ldr	r0, [pc, #12]	; (80010f4 <Write_MFRC522+0x58>)
 80010e8:	f004 fbe2 	bl	80058b0 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40020000 	.word	0x40020000
 80010f8:	20008bf8 	.word	0x20008bf8

080010fc <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	b25b      	sxtb	r3, r3
 800110c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001110:	b25b      	sxtb	r3, r3
 8001112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001116:	b25b      	sxtb	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2110      	movs	r1, #16
 8001120:	480e      	ldr	r0, [pc, #56]	; (800115c <Read_MFRC522+0x60>)
 8001122:	f004 fbc5 	bl	80058b0 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi1, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8001126:	f107 010e 	add.w	r1, r7, #14
 800112a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800112e:	2201      	movs	r2, #1
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <Read_MFRC522+0x64>)
 8001132:	f006 f8c6 	bl	80072c2 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, &rx_bits, 1, 500);
 8001136:	f107 010f 	add.w	r1, r7, #15
 800113a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800113e:	2201      	movs	r2, #1
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <Read_MFRC522+0x64>)
 8001142:	f006 f9fa 	bl	800753a <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	2110      	movs	r1, #16
 800114a:	4804      	ldr	r0, [pc, #16]	; (800115c <Read_MFRC522+0x60>)
 800114c:	f004 fbb0 	bl	80058b0 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001150:	7bfb      	ldrb	r3, [r7, #15]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40020000 	.word	0x40020000
 8001160:	20008bf8 	.word	0x20008bf8

08001164 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	460a      	mov	r2, r1
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	4613      	mov	r3, r2
 8001172:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ffc0 	bl	80010fc <Read_MFRC522>
 800117c:	4603      	mov	r3, r0
 800117e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	4313      	orrs	r3, r2
 8001186:	b2da      	uxtb	r2, r3
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff85 	bl	800109c <Write_MFRC522>
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	460a      	mov	r2, r1
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	4613      	mov	r3, r2
 80011a8:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ffa5 	bl	80010fc <Read_MFRC522>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80011b6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	b25a      	sxtb	r2, r3
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	4013      	ands	r3, r2
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff65 	bl	800109c <Write_MFRC522>
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 80011de:	2103      	movs	r1, #3
 80011e0:	2014      	movs	r0, #20
 80011e2:	f7ff ffbf 	bl	8001164 <SetBitMask>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}

080011ea <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80011ee:	210f      	movs	r1, #15
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff ff53 	bl	800109c <Write_MFRC522>
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2102      	movs	r1, #2
 8001204:	4812      	ldr	r0, [pc, #72]	; (8001250 <MFRC522_Init+0x54>)
 8001206:	f004 fb53 	bl	80058b0 <HAL_GPIO_WritePin>
  MFRC522_Reset();
 800120a:	f7ff ffee 	bl	80011ea <MFRC522_Reset>


  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800120e:	2180      	movs	r1, #128	; 0x80
 8001210:	202a      	movs	r0, #42	; 0x2a
 8001212:	f7ff ff43 	bl	800109c <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); 	// TModeReg[3..0] + TPrescalerReg
 8001216:	21a9      	movs	r1, #169	; 0xa9
 8001218:	202b      	movs	r0, #43	; 0x2b
 800121a:	f7ff ff3f 	bl	800109c <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 800121e:	2103      	movs	r1, #3
 8001220:	202d      	movs	r0, #45	; 0x2d
 8001222:	f7ff ff3b 	bl	800109c <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 8001226:	21e8      	movs	r1, #232	; 0xe8
 8001228:	202c      	movs	r0, #44	; 0x2c
 800122a:	f7ff ff37 	bl	800109c <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     			// force 100% ASK modulation
 800122e:	2140      	movs	r1, #64	; 0x40
 8001230:	2015      	movs	r0, #21
 8001232:	f7ff ff33 	bl	800109c <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       			// CRC Initial value 0x6363
 8001236:	213d      	movs	r1, #61	; 0x3d
 8001238:	2011      	movs	r0, #17
 800123a:	f7ff ff2f 	bl	800109c <Write_MFRC522>
  Write_MFRC522(RFCfgReg, (0x07<<4)); 			// Set RX Gain to Max
 800123e:	2170      	movs	r1, #112	; 0x70
 8001240:	2026      	movs	r0, #38	; 0x26
 8001242:	f7ff ff2b 	bl	800109c <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 8001246:	f7ff ffc8 	bl	80011da <AntennaOn>
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40020000 	.word	0x40020000

08001254 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af02      	add	r7, sp, #8
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 8001260:	2107      	movs	r1, #7
 8001262:	200d      	movs	r0, #13
 8001264:	f7ff ff1a 	bl	800109c <Write_MFRC522>

  TagType[0] = reqMode;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	2201      	movs	r2, #1
 8001278:	6839      	ldr	r1, [r7, #0]
 800127a:	200c      	movs	r0, #12
 800127c:	f000 f80f 	bl	800129e <MFRC522_ToCard>
 8001280:	4603      	mov	r3, r0
 8001282:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d102      	bne.n	8001290 <MFRC522_Request+0x3c>
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	2b10      	cmp	r3, #16
 800128e:	d001      	beq.n	8001294 <MFRC522_Request+0x40>
    status = MI_ERR;
 8001290:	2302      	movs	r3, #2
 8001292:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 800129e:	b590      	push	{r4, r7, lr}
 80012a0:	b089      	sub	sp, #36	; 0x24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	4603      	mov	r3, r0
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	4613      	mov	r3, r2
 80012ae:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 80012b0:	2302      	movs	r3, #2
 80012b2:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 80012b4:	2300      	movs	r3, #0
 80012b6:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 80012b8:	2300      	movs	r3, #0
 80012ba:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b0c      	cmp	r3, #12
 80012c0:	d006      	beq.n	80012d0 <MFRC522_ToCard+0x32>
 80012c2:	2b0e      	cmp	r3, #14
 80012c4:	d109      	bne.n	80012da <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 80012c6:	2312      	movs	r3, #18
 80012c8:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 80012ca:	2310      	movs	r3, #16
 80012cc:	777b      	strb	r3, [r7, #29]
        break;
 80012ce:	e005      	b.n	80012dc <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 80012d0:	2377      	movs	r3, #119	; 0x77
 80012d2:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 80012d4:	2330      	movs	r3, #48	; 0x30
 80012d6:	777b      	strb	r3, [r7, #29]
        break;
 80012d8:	e000      	b.n	80012dc <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 80012da:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 80012dc:	7fbb      	ldrb	r3, [r7, #30]
 80012de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4619      	mov	r1, r3
 80012e6:	2002      	movs	r0, #2
 80012e8:	f7ff fed8 	bl	800109c <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 80012ec:	2180      	movs	r1, #128	; 0x80
 80012ee:	2004      	movs	r0, #4
 80012f0:	f7ff ff53 	bl	800119a <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	200a      	movs	r0, #10
 80012f8:	f7ff ff34 	bl	8001164 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 80012fc:	2100      	movs	r1, #0
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff fecc 	bl	800109c <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	e00a      	b.n	8001320 <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4619      	mov	r1, r3
 8001314:	2009      	movs	r0, #9
 8001316:	f7ff fec1 	bl	800109c <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	3301      	adds	r3, #1
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	429a      	cmp	r2, r3
 8001326:	d3f0      	bcc.n	800130a <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	4619      	mov	r1, r3
 800132c:	2001      	movs	r0, #1
 800132e:	f7ff feb5 	bl	800109c <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b0c      	cmp	r3, #12
 8001336:	d103      	bne.n	8001340 <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	200d      	movs	r0, #13
 800133c:	f7ff ff12 	bl	8001164 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001340:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001344:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 8001346:	2004      	movs	r0, #4
 8001348:	f7ff fed8 	bl	80010fc <Read_MFRC522>
 800134c:	4603      	mov	r3, r0
 800134e:	773b      	strb	r3, [r7, #28]
    i--;
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	3b01      	subs	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00a      	beq.n	8001372 <MFRC522_ToCard+0xd4>
 800135c:	7f3b      	ldrb	r3, [r7, #28]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <MFRC522_ToCard+0xd4>
 8001366:	7f3a      	ldrb	r2, [r7, #28]
 8001368:	7f7b      	ldrb	r3, [r7, #29]
 800136a:	4013      	ands	r3, r2
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0e9      	beq.n	8001346 <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 8001372:	2180      	movs	r1, #128	; 0x80
 8001374:	200d      	movs	r0, #13
 8001376:	f7ff ff10 	bl	800119a <ClearBitMask>

  if (i != 0)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d052      	beq.n	8001426 <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8001380:	2006      	movs	r0, #6
 8001382:	f7ff febb 	bl	80010fc <Read_MFRC522>
 8001386:	4603      	mov	r3, r0
 8001388:	f003 031b 	and.w	r3, r3, #27
 800138c:	2b00      	cmp	r3, #0
 800138e:	d148      	bne.n	8001422 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 8001394:	7f3a      	ldrb	r2, [r7, #28]
 8001396:	7fbb      	ldrb	r3, [r7, #30]
 8001398:	4013      	ands	r3, r2
 800139a:	b2db      	uxtb	r3, r3
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 80013a4:	2301      	movs	r3, #1
 80013a6:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	2b0c      	cmp	r3, #12
 80013ac:	d13b      	bne.n	8001426 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 80013ae:	200a      	movs	r0, #10
 80013b0:	f7ff fea4 	bl	80010fc <Read_MFRC522>
 80013b4:	4603      	mov	r3, r0
 80013b6:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 80013b8:	200c      	movs	r0, #12
 80013ba:	f7ff fe9f 	bl	80010fc <Read_MFRC522>
 80013be:	4603      	mov	r3, r0
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d008      	beq.n	80013de <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 80013cc:	7f3b      	ldrb	r3, [r7, #28]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	00da      	lsls	r2, r3, #3
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	4413      	add	r3, r2
 80013d6:	461a      	mov	r2, r3
 80013d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	e004      	b.n	80013e8 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 80013de:	7f3b      	ldrb	r3, [r7, #28]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	461a      	mov	r2, r3
 80013e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e6:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 80013e8:	7f3b      	ldrb	r3, [r7, #28]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <MFRC522_ToCard+0x154>
        {
          n = 1;
 80013ee:	2301      	movs	r3, #1
 80013f0:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 80013f2:	7f3b      	ldrb	r3, [r7, #28]
 80013f4:	2b10      	cmp	r3, #16
 80013f6:	d901      	bls.n	80013fc <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 80013f8:	2310      	movs	r3, #16
 80013fa:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
 8001400:	e00a      	b.n	8001418 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	18d4      	adds	r4, r2, r3
 8001408:	2009      	movs	r0, #9
 800140a:	f7ff fe77 	bl	80010fc <Read_MFRC522>
 800140e:	4603      	mov	r3, r0
 8001410:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	3301      	adds	r3, #1
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	7f3b      	ldrb	r3, [r7, #28]
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	429a      	cmp	r2, r3
 800141e:	d3f0      	bcc.n	8001402 <MFRC522_ToCard+0x164>
 8001420:	e001      	b.n	8001426 <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 8001422:	2302      	movs	r3, #2
 8001424:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8001426:	7ffb      	ldrb	r3, [r7, #31]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3724      	adds	r7, #36	; 0x24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}

08001430 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af02      	add	r7, sp, #8
 8001436:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 8001438:	2300      	movs	r3, #0
 800143a:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800143c:	2100      	movs	r1, #0
 800143e:	200d      	movs	r0, #13
 8001440:	f7ff fe2c 	bl	800109c <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2293      	movs	r2, #147	; 0x93
 8001448:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3301      	adds	r3, #1
 800144e:	2220      	movs	r2, #32
 8001450:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001452:	f107 0308 	add.w	r3, r7, #8
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2202      	movs	r2, #2
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	200c      	movs	r0, #12
 8001460:	f7ff ff1d 	bl	800129e <MFRC522_ToCard>
 8001464:	4603      	mov	r3, r0
 8001466:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d118      	bne.n	80014a0 <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 800146e:	2300      	movs	r3, #0
 8001470:	73bb      	strb	r3, [r7, #14]
 8001472:	e009      	b.n	8001488 <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 8001474:	7bbb      	ldrb	r3, [r7, #14]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	7b7b      	ldrb	r3, [r7, #13]
 800147e:	4053      	eors	r3, r2
 8001480:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 8001482:	7bbb      	ldrb	r3, [r7, #14]
 8001484:	3301      	adds	r3, #1
 8001486:	73bb      	strb	r3, [r7, #14]
 8001488:	7bbb      	ldrb	r3, [r7, #14]
 800148a:	2b03      	cmp	r3, #3
 800148c:	d9f2      	bls.n	8001474 <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 800148e:	7bbb      	ldrb	r3, [r7, #14]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	7b7a      	ldrb	r2, [r7, #13]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 800149c:	2302      	movs	r3, #2
 800149e:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <Sim800_RxCallBack>:
/**
  * Call back function for release read SIM800 UART buffer.
  * @param NONE
  * @return SIM800 answer for command (char answer[64])
*/
void Sim800_RxCallBack(void) {
 80014ac:	b5b0      	push	{r4, r5, r7, lr}
 80014ae:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <Sim800_RxCallBack+0x80>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	491d      	ldr	r1, [pc, #116]	; (800152c <Sim800_RxCallBack+0x80>)
 80014b8:	600a      	str	r2, [r1, #0]
 80014ba:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <Sim800_RxCallBack+0x84>)
 80014bc:	7811      	ldrb	r1, [r2, #0]
 80014be:	4a1d      	ldr	r2, [pc, #116]	; (8001534 <Sim800_RxCallBack+0x88>)
 80014c0:	54d1      	strb	r1, [r2, r3]

    x = false;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <Sim800_RxCallBack+0x8c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
    if (strstr((char *) rx_buffer, "\r\n") != NULL && rx_index == 2) {
 80014c8:	491c      	ldr	r1, [pc, #112]	; (800153c <Sim800_RxCallBack+0x90>)
 80014ca:	481a      	ldr	r0, [pc, #104]	; (8001534 <Sim800_RxCallBack+0x88>)
 80014cc:	f00f fc39 	bl	8010d42 <strstr>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <Sim800_RxCallBack+0x3a>
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <Sim800_RxCallBack+0x80>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d103      	bne.n	80014e6 <Sim800_RxCallBack+0x3a>
        rx_index = 0;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <Sim800_RxCallBack+0x80>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	e01b      	b.n	800151e <Sim800_RxCallBack+0x72>
//        x = false;
    } else
    	if (strstr((char *) rx_buffer, "\r\n") != NULL) {
 80014e6:	4915      	ldr	r1, [pc, #84]	; (800153c <Sim800_RxCallBack+0x90>)
 80014e8:	4812      	ldr	r0, [pc, #72]	; (8001534 <Sim800_RxCallBack+0x88>)
 80014ea:	f00f fc2a 	bl	8010d42 <strstr>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d014      	beq.n	800151e <Sim800_RxCallBack+0x72>
        memcpy(answer, rx_buffer, sizeof(rx_buffer));
 80014f4:	4a12      	ldr	r2, [pc, #72]	; (8001540 <Sim800_RxCallBack+0x94>)
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <Sim800_RxCallBack+0x88>)
 80014f8:	4614      	mov	r4, r2
 80014fa:	461d      	mov	r5, r3
 80014fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001500:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001504:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        rx_index = 0;
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <Sim800_RxCallBack+0x80>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
        memset(rx_buffer, 0, sizeof(rx_buffer));
 800150e:	2220      	movs	r2, #32
 8001510:	2100      	movs	r1, #0
 8001512:	4808      	ldr	r0, [pc, #32]	; (8001534 <Sim800_RxCallBack+0x88>)
 8001514:	f00e fef6 	bl	8010304 <memset>
        x = true;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <Sim800_RxCallBack+0x8c>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 800151e:	2201      	movs	r2, #1
 8001520:	4903      	ldr	r1, [pc, #12]	; (8001530 <Sim800_RxCallBack+0x84>)
 8001522:	4808      	ldr	r0, [pc, #32]	; (8001544 <Sim800_RxCallBack+0x98>)
 8001524:	f006 ff90 	bl	8008448 <HAL_UART_Receive_IT>
}
 8001528:	bf00      	nop
 800152a:	bdb0      	pop	{r4, r5, r7, pc}
 800152c:	20000248 	.word	0x20000248
 8001530:	20000224 	.word	0x20000224
 8001534:	20000228 	.word	0x20000228
 8001538:	2000026c 	.word	0x2000026c
 800153c:	080160b8 	.word	0x080160b8
 8001540:	2000024c 	.word	0x2000024c
 8001544:	20007ba0 	.word	0x20007ba0

08001548 <SIM800_SendCommand>:
  * @param command the command to be used the send AT command
  * @param reply to be used to set the correct answer to the command
  * @param delay to be used to the set pause to the reply
  * @return error, 0 is OK
  */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	4613      	mov	r3, r2
 8001554:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *) command, (uint16_t) strlen(command));
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f7fe fe42 	bl	80001e0 <strlen>
 800155c:	4603      	mov	r3, r0
 800155e:	b29b      	uxth	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	68f9      	ldr	r1, [r7, #12]
 8001564:	4812      	ldr	r0, [pc, #72]	; (80015b0 <SIM800_SendCommand+0x68>)
 8001566:	f006 ff2a 	bl	80083be <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    osDelay(delay);
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	4618      	mov	r0, r3
 800156e:	f00b f9e5 	bl	800c93c <osDelay>
#else
    HAL_Delay(delay);
#endif

    if (strstr(answer, reply) != NULL) {
 8001572:	68b9      	ldr	r1, [r7, #8]
 8001574:	480f      	ldr	r0, [pc, #60]	; (80015b4 <SIM800_SendCommand+0x6c>)
 8001576:	f00f fbe4 	bl	8010d42 <strstr>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d009      	beq.n	8001594 <SIM800_SendCommand+0x4c>
        rx_index = 0;
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <SIM800_SendCommand+0x70>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
        memset(rx_buffer, 0, sizeof(rx_buffer));
 8001586:	2220      	movs	r2, #32
 8001588:	2100      	movs	r1, #0
 800158a:	480c      	ldr	r0, [pc, #48]	; (80015bc <SIM800_SendCommand+0x74>)
 800158c:	f00e feba 	bl	8010304 <memset>
        return 0;
 8001590:	2300      	movs	r3, #0
 8001592:	e008      	b.n	80015a6 <SIM800_SendCommand+0x5e>
    }
    rx_index = 0;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <SIM800_SendCommand+0x70>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 800159a:	2220      	movs	r2, #32
 800159c:	2100      	movs	r1, #0
 800159e:	4807      	ldr	r0, [pc, #28]	; (80015bc <SIM800_SendCommand+0x74>)
 80015a0:	f00e feb0 	bl	8010304 <memset>
    return 1;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20007ba0 	.word	0x20007ba0
 80015b4:	2000024c 	.word	0x2000024c
 80015b8:	20000248 	.word	0x20000248
 80015bc:	20000228 	.word	0x20000228

080015c0 <SIM800_Init>:
/**
  * initialization SIM800.
  * @param NONE
  * @return error the number of mistakes, 0 is OK
  */
int SIM800_Init(void) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
    int error = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 80015ca:	2201      	movs	r2, #1
 80015cc:	490e      	ldr	r1, [pc, #56]	; (8001608 <SIM800_Init+0x48>)
 80015ce:	480f      	ldr	r0, [pc, #60]	; (800160c <SIM800_Init+0x4c>)
 80015d0:	f006 ff3a 	bl	8008448 <HAL_UART_Receive_IT>
    error += SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 80015d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015d8:	490d      	ldr	r1, [pc, #52]	; (8001610 <SIM800_Init+0x50>)
 80015da:	480e      	ldr	r0, [pc, #56]	; (8001614 <SIM800_Init+0x54>)
 80015dc:	f7ff ffb4 	bl	8001548 <SIM800_SendCommand>
 80015e0:	4602      	mov	r2, r0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	607b      	str	r3, [r7, #4]
    error += SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 80015e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015ec:	4908      	ldr	r1, [pc, #32]	; (8001610 <SIM800_Init+0x50>)
 80015ee:	480a      	ldr	r0, [pc, #40]	; (8001618 <SIM800_Init+0x58>)
 80015f0:	f7ff ffaa 	bl	8001548 <SIM800_SendCommand>
 80015f4:	4602      	mov	r2, r0
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	607b      	str	r3, [r7, #4]
    return error;
 80015fc:	687b      	ldr	r3, [r7, #4]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000224 	.word	0x20000224
 800160c:	20007ba0 	.word	0x20007ba0
 8001610:	080160d8 	.word	0x080160d8
 8001614:	080160e0 	.word	0x080160e0
 8001618:	080160e8 	.word	0x080160e8

0800161c <MQTT_Connect>:
  * @param clietID to be used to the set client identifier for MQTT broker
  * @param keepAliveInterval to be used to the set keepalive interval for MQTT broker
  * @return error the number of mistakes, 0 is OK
  */
int MQTT_Connect(char *apn, char *apn_user, char *apn_pass, char *host, uint16_t port, char *username, char *pass,
                 char *clientID, unsigned short keepAliveInterval) {
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b0cb      	sub	sp, #300	; 0x12c
 8001620:	af04      	add	r7, sp, #16
 8001622:	f107 040c 	add.w	r4, r7, #12
 8001626:	6020      	str	r0, [r4, #0]
 8001628:	f107 0008 	add.w	r0, r7, #8
 800162c:	6001      	str	r1, [r0, #0]
 800162e:	1d39      	adds	r1, r7, #4
 8001630:	600a      	str	r2, [r1, #0]
 8001632:	463a      	mov	r2, r7
 8001634:	6013      	str	r3, [r2, #0]
    int error = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    char str[256] = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	3304      	adds	r3, #4
 8001646:	22fc      	movs	r2, #252	; 0xfc
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f00e fe5a 	bl	8010304 <memset>
//    datas.password.cstring = pass;
//    datas.clientID.cstring = clientID;
//    datas.keepAliveInterval = keepAliveInterval;
//    datas.cleansession = 1;

    error += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 8001650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001654:	4939      	ldr	r1, [pc, #228]	; (800173c <MQTT_Connect+0x120>)
 8001656:	483a      	ldr	r0, [pc, #232]	; (8001740 <MQTT_Connect+0x124>)
 8001658:	f7ff ff76 	bl	8001548 <SIM800_SendCommand>
 800165c:	4602      	mov	r2, r0
 800165e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001662:	4413      	add	r3, r2
 8001664:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    snprintf(str, sizeof(str), "AT+CGDCONT=1,\"IP\",\"%s\"\r\n", apn);
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	f107 0014 	add.w	r0, r7, #20
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a34      	ldr	r2, [pc, #208]	; (8001744 <MQTT_Connect+0x128>)
 8001674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001678:	f00f fab6 	bl	8010be8 <sniprintf>

    error += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001684:	492d      	ldr	r1, [pc, #180]	; (800173c <MQTT_Connect+0x120>)
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff5e 	bl	8001548 <SIM800_SendCommand>
 800168c:	4602      	mov	r2, r0
 800168e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001692:	4413      	add	r3, r2
 8001694:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    error += SIM800_SendCommand("AT+CREG?\r\n", "OK\r\n", CMD_DELAY);
 8001698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800169c:	4927      	ldr	r1, [pc, #156]	; (800173c <MQTT_Connect+0x120>)
 800169e:	482a      	ldr	r0, [pc, #168]	; (8001748 <MQTT_Connect+0x12c>)
 80016a0:	f7ff ff52 	bl	8001548 <SIM800_SendCommand>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016aa:	4413      	add	r3, r2
 80016ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    error += SIM800_SendCommand("AT+CGACT=1,1\r\n", "OK\r\n", CMD_DELAY);
 80016b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016b4:	4921      	ldr	r1, [pc, #132]	; (800173c <MQTT_Connect+0x120>)
 80016b6:	4825      	ldr	r0, [pc, #148]	; (800174c <MQTT_Connect+0x130>)
 80016b8:	f7ff ff46 	bl	8001548 <SIM800_SendCommand>
 80016bc:	4602      	mov	r2, r0
 80016be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016c2:	4413      	add	r3, r2
 80016c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
//    HAL_UART_Transmit(&huart2, (uint8_t*) answer, sizeof(answer), 100);
    memset(str, 0, sizeof(str));
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f00e fe16 	bl	8010304 <memset>

    sprintf(str, "AT+MQTTCONN=\"%s\",%d,\"%s\",%d,0,\"%s\",\"%s\"\r\n", host, port, clientID, keepAliveInterval,username,pass);
 80016d8:	f8b7 4128 	ldrh.w	r4, [r7, #296]	; 0x128
 80016dc:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 80016e0:	463a      	mov	r2, r7
 80016e2:	f107 0014 	add.w	r0, r7, #20
 80016e6:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80016ea:	9103      	str	r1, [sp, #12]
 80016ec:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80016f0:	9102      	str	r1, [sp, #8]
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	4623      	mov	r3, r4
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	4914      	ldr	r1, [pc, #80]	; (8001750 <MQTT_Connect+0x134>)
 8001700:	f00f faa6 	bl	8010c50 <siprintf>
    error += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800170c:	490b      	ldr	r1, [pc, #44]	; (800173c <MQTT_Connect+0x120>)
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff1a 	bl	8001548 <SIM800_SendCommand>
 8001714:	4602      	mov	r2, r0
 8001716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800171a:	4413      	add	r3, r2
 800171c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_UART_Transmit(&huart2, (uint8_t*) answer, sizeof(answer), 100);
 8001720:	2364      	movs	r3, #100	; 0x64
 8001722:	2220      	movs	r2, #32
 8001724:	490b      	ldr	r1, [pc, #44]	; (8001754 <MQTT_Connect+0x138>)
 8001726:	480c      	ldr	r0, [pc, #48]	; (8001758 <MQTT_Connect+0x13c>)
 8001728:	f006 fdb7 	bl	800829a <HAL_UART_Transmit>
    return error;
 800172c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
}
 8001730:	4618      	mov	r0, r3
 8001732:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001736:	46bd      	mov	sp, r7
 8001738:	bd90      	pop	{r4, r7, pc}
 800173a:	bf00      	nop
 800173c:	080160d8 	.word	0x080160d8
 8001740:	080160f0 	.word	0x080160f0
 8001744:	08016100 	.word	0x08016100
 8001748:	0801611c 	.word	0x0801611c
 800174c:	08016128 	.word	0x08016128
 8001750:	08016138 	.word	0x08016138
 8001754:	2000024c 	.word	0x2000024c
 8001758:	20008c50 	.word	0x20008c50

0800175c <MQTT_Pub>:
  * Public on the MQTT broker of the message in a topic
  * @param topic to be used to the set topic
  * @param payload to be used to the set message for topic
  * @return error the number of mistakes, 0 is OK
  */
int MQTT_Pub(char *topic, char *payload) {
 800175c:	b580      	push	{r7, lr}
 800175e:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	3b0c      	subs	r3, #12
 800176c:	6018      	str	r0, [r3, #0]
 800176e:	f107 0310 	add.w	r3, r7, #16
 8001772:	3b10      	subs	r3, #16
 8001774:	6019      	str	r1, [r3, #0]
    int error = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800177c:	f102 020c 	add.w	r2, r2, #12
 8001780:	6013      	str	r3, [r2, #0]
//    unsigned char buf[1024] = {0};
    char str[4096] = {0};
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	3b04      	subs	r3, #4
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	3304      	adds	r3, #4
 800178e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f00e fdb5 	bl	8010304 <memset>
//
//    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0, topicString, (unsigned char*) payload, (int) strlen(payload));
//
//    error += SIM800_SendData(buf, mqtt_len);

    sprintf(str, "AT+MQTTPUB=\"%s\",\"%s\",0,0,0\r\n", topic, payload);
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	3b10      	subs	r3, #16
 80017a0:	f107 0210 	add.w	r2, r7, #16
 80017a4:	3a0c      	subs	r2, #12
 80017a6:	f107 0010 	add.w	r0, r7, #16
 80017aa:	3804      	subs	r0, #4
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	4914      	ldr	r1, [pc, #80]	; (8001804 <MQTT_Pub+0xa8>)
 80017b2:	f00f fa4d 	bl	8010c50 <siprintf>
    error += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 80017b6:	f107 0310 	add.w	r3, r7, #16
 80017ba:	3b04      	subs	r3, #4
 80017bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c0:	4911      	ldr	r1, [pc, #68]	; (8001808 <MQTT_Pub+0xac>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fec0 	bl	8001548 <SIM800_SendCommand>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80017ce:	f103 030c 	add.w	r3, r3, #12
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80017da:	f102 020c 	add.w	r2, r2, #12
 80017de:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*) answer, sizeof(answer), 100);
 80017e0:	2364      	movs	r3, #100	; 0x64
 80017e2:	2220      	movs	r2, #32
 80017e4:	4909      	ldr	r1, [pc, #36]	; (800180c <MQTT_Pub+0xb0>)
 80017e6:	480a      	ldr	r0, [pc, #40]	; (8001810 <MQTT_Pub+0xb4>)
 80017e8:	f006 fd57 	bl	800829a <HAL_UART_Transmit>
    return error;
 80017ec:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80017f0:	f103 030c 	add.w	r3, r3, #12
 80017f4:	681b      	ldr	r3, [r3, #0]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	08016164 	.word	0x08016164
 8001808:	080160d8 	.word	0x080160d8
 800180c:	2000024c 	.word	0x2000024c
 8001810:	20008c50 	.word	0x20008c50
 8001814:	00000000 	.word	0x00000000

08001818 <RCFilter_Init>:
#include "RCFilter.h"
#include <math.h>

void RCFilter_Init(RCFilter * filter, float cutoffFreqHz, float sampleFreq_Hz){
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	ed87 0a02 	vstr	s0, [r7, #8]
 8001824:	edc7 0a01 	vstr	s1, [r7, #4]
	/*Clear output buffer*/
	filter->out[0] = 0.0f;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
	filter->out[1] = 0.0f;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
	float sampleTime_s = 1.0f/ sampleFreq_Hz;
 8001838:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800183c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001844:	edc7 7a05 	vstr	s15, [r7, #20]
	/*Compute equivalent RC Constant from cutoff Frequency*/
	float RC = 1.0f/(2* M_PI * cutoffFreqHz);
 8001848:	68b8      	ldr	r0, [r7, #8]
 800184a:	f7fe fe85 	bl	8000558 <__aeabi_f2d>
 800184e:	a31b      	add	r3, pc, #108	; (adr r3, 80018bc <RCFilter_Init+0xa4>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fed8 	bl	8000608 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	f04f 0000 	mov.w	r0, #0
 8001860:	4915      	ldr	r1, [pc, #84]	; (80018b8 <RCFilter_Init+0xa0>)
 8001862:	f7fe fffb 	bl	800085c <__aeabi_ddiv>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f9c3 	bl	8000bf8 <__aeabi_d2f>
 8001872:	4603      	mov	r3, r0
 8001874:	613b      	str	r3, [r7, #16]
	/*Pre-compute filter coefficient for first order low-pass filter*/
	filter->coeff[0] = sampleTime_s/(sampleTime_s+ RC);
 8001876:	ed97 7a05 	vldr	s14, [r7, #20]
 800187a:	edd7 7a04 	vldr	s15, [r7, #16]
 800187e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001882:	edd7 6a05 	vldr	s13, [r7, #20]
 8001886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	edc3 7a00 	vstr	s15, [r3]
	filter->coeff[1] = RC/(sampleTime_s+RC);
 8001890:	ed97 7a05 	vldr	s14, [r7, #20]
 8001894:	edd7 7a04 	vldr	s15, [r7, #16]
 8001898:	ee37 7a27 	vadd.f32	s14, s14, s15
 800189c:	edd7 6a04 	vldr	s13, [r7, #16]
 80018a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	edc3 7a01 	vstr	s15, [r3, #4]

}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	f3af 8000 	nop.w
 80018b8:	3ff00000 	.word	0x3ff00000
 80018bc:	54442d18 	.word	0x54442d18
 80018c0:	401921fb 	.word	0x401921fb

080018c4 <RCFilter_Update>:

float RCFilter_Update(RCFilter *filter, float input){
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	ed87 0a00 	vstr	s0, [r7]
	/* Shift output samples */
	filter->out[1] = filter->out[0];
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	60da      	str	r2, [r3, #12]

	/* Compute new ouput sample */
	filter->out[0] = filter->coeff[0] * input+filter->coeff[1] * filter->out[1];
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	ed93 7a00 	vldr	s14, [r3]
 80018de:	edd7 7a00 	vldr	s15, [r7]
 80018e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80018f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Return Filtered sample */
	return filter->out[0];
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	ee07 3a90 	vmov	s15, r3
}
 8001908:	eeb0 0a67 	vmov.f32	s0, s15
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <MovAvgFilter_init>:

void MovAvgFilter_init(MovAvgFilter * filter){
 8001916:	b480      	push	{r7}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
	/*Clear output buffer*/
	filter->out = 0.0f;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	/*clear value*/
	for (int i = 0; i<BUFF_LENGTH; i++){
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	e009      	b.n	8001942 <MovAvgFilter_init+0x2c>
		filter -> val[i]= 0;
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<BUFF_LENGTH; i++){
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3301      	adds	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2b31      	cmp	r3, #49	; 0x31
 8001946:	ddf2      	ble.n	800192e <MovAvgFilter_init+0x18>
	}
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <MovAvgFilter_Update>:

float MovAvgFilter_Update(MovAvgFilter *filter, float input){
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	ed87 0a00 	vstr	s0, [r7]
	/*Shifting Value and calculate the cumulative sum*/
	float sum = 0;
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < BUFF_LENGTH; i++){
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	e019      	b.n	80019a4 <MovAvgFilter_Update+0x4c>
		filter->val[i] = filter-> val[i+1];
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	3301      	adds	r3, #1
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	601a      	str	r2, [r3, #0]
		sum += filter -> val[i];
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	ed97 7a05 	vldr	s14, [r7, #20]
 8001996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199a:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < BUFF_LENGTH; i++){
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	3301      	adds	r3, #1
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	2b31      	cmp	r3, #49	; 0x31
 80019a8:	dde2      	ble.n	8001970 <MovAvgFilter_Update+0x18>
	}
	(filter -> val[BUFF_LENGTH-1]) = input;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	sum += input;
 80019b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80019b6:	edd7 7a00 	vldr	s15, [r7]
 80019ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019be:	edc7 7a05 	vstr	s15, [r7, #20]

	/*Calculating the average*/
	float avg = sum/BUFF_LENGTH;
 80019c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80019c6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80019f4 <MovAvgFilter_Update+0x9c>
 80019ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ce:	edc7 7a03 	vstr	s15, [r7, #12]
	filter -> out = avg;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	return filter -> out;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80019e0:	ee07 3a90 	vmov	s15, r3
}
 80019e4:	eeb0 0a67 	vmov.f32	s0, s15
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	42480000 	.word	0x42480000

080019f8 <nmea0183_checksum>:
void SendData(void *argument);

/* USER CODE BEGIN PFP */
// function to calculate checksum of the NMEA sentence
// -4, but not -3 because the NMEA sentences are delimited with \r\n, and there also is the invisible \r in the end
int nmea0183_checksum(char *msg) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	int checksum = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
	// the first $ sign and the last two bytes of original CRC + the * sign
	for (j = 1; j < strlen(msg) - 4; j++) {
 8001a08:	2301      	movs	r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	e00a      	b.n	8001a24 <nmea0183_checksum+0x2c>
		checksum = checksum ^ (unsigned) msg[j];
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4053      	eors	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
	for (j = 1; j < strlen(msg) - 4; j++) {
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3301      	adds	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7fe fbdb 	bl	80001e0 <strlen>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	1f1a      	subs	r2, r3, #4
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d8ec      	bhi.n	8001a0e <nmea0183_checksum+0x16>
	}
	return checksum;
 8001a34:	68fb      	ldr	r3, [r7, #12]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	if (huart == UART_SIM800) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <HAL_UART_RxCpltCallback+0x24>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d102      	bne.n	8001a56 <HAL_UART_RxCpltCallback+0x16>
		Sim800_RxCallBack();
 8001a50:	f7ff fd2c 	bl	80014ac <Sim800_RxCallBack>
	} else {
		flag = 1; //GPS Flag
	}
}
 8001a54:	e002      	b.n	8001a5c <HAL_UART_RxCpltCallback+0x1c>
		flag = 1; //GPS Flag
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <HAL_UART_RxCpltCallback+0x28>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20007ba0 	.word	0x20007ba0
 8001a68:	20000290 	.word	0x20000290

08001a6c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  for(int i = 0; i<3; i++){
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	e010      	b.n	8001a9c <HAL_ADC_ConvCpltCallback+0x30>
	  value[i] = buffer[i];
 8001a7a:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <HAL_ADC_ConvCpltCallback+0x44>)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <HAL_ADC_ConvCpltCallback+0x48>)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i<3; i++){
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	ddeb      	ble.n	8001a7a <HAL_ADC_ConvCpltCallback+0xe>
  }
  //Filtering Analog reading
}
 8001aa2:	bf00      	nop
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	20007a44 	.word	0x20007a44
 8001ab4:	20008f3c 	.word	0x20008f3c

08001ab8 <myprintf>:

void myprintf(const char *fmt, ...) {
 8001ab8:	b40f      	push	{r0, r1, r2, r3}
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ace:	480b      	ldr	r0, [pc, #44]	; (8001afc <myprintf+0x44>)
 8001ad0:	f010 f808 	bl	8011ae4 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8001ad4:	4809      	ldr	r0, [pc, #36]	; (8001afc <myprintf+0x44>)
 8001ad6:	f7fe fb83 	bl	80001e0 <strlen>
 8001ada:	4603      	mov	r3, r0
 8001adc:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	4905      	ldr	r1, [pc, #20]	; (8001afc <myprintf+0x44>)
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <myprintf+0x48>)
 8001aea:	f006 fbd6 	bl	800829a <HAL_UART_Transmit>

}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001af8:	b004      	add	sp, #16
 8001afa:	4770      	bx	lr
 8001afc:	200002f4 	.word	0x200002f4
 8001b00:	20008c50 	.word	0x20008c50
 8001b04:	00000000 	.word	0x00000000

08001b08 <distance_on_geoid>:

double distance_on_geoid(double lat1, double lon1, double lat2, double lon2) {
 8001b08:	b5b0      	push	{r4, r5, r7, lr}
 8001b0a:	b0a0      	sub	sp, #128	; 0x80
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	ed87 0b06 	vstr	d0, [r7, #24]
 8001b12:	ed87 1b04 	vstr	d1, [r7, #16]
 8001b16:	ed87 2b02 	vstr	d2, [r7, #8]
 8001b1a:	ed87 3b00 	vstr	d3, [r7]

	// Convert degrees to radians
	lat1 = lat1 * M_PI / 180.0;
 8001b1e:	a38c      	add	r3, pc, #560	; (adr r3, 8001d50 <distance_on_geoid+0x248>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b28:	f7fe fd6e 	bl	8000608 <__aeabi_dmul>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <distance_on_geoid+0x258>)
 8001b3a:	f7fe fe8f 	bl	800085c <__aeabi_ddiv>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	e9c7 2306 	strd	r2, r3, [r7, #24]
	lon1 = lon1 * M_PI / 180.0;
 8001b46:	a382      	add	r3, pc, #520	; (adr r3, 8001d50 <distance_on_geoid+0x248>)
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b50:	f7fe fd5a 	bl	8000608 <__aeabi_dmul>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4b7f      	ldr	r3, [pc, #508]	; (8001d60 <distance_on_geoid+0x258>)
 8001b62:	f7fe fe7b 	bl	800085c <__aeabi_ddiv>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	lat2 = lat2 * M_PI / 180.0;
 8001b6e:	a378      	add	r3, pc, #480	; (adr r3, 8001d50 <distance_on_geoid+0x248>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b78:	f7fe fd46 	bl	8000608 <__aeabi_dmul>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4b75      	ldr	r3, [pc, #468]	; (8001d60 <distance_on_geoid+0x258>)
 8001b8a:	f7fe fe67 	bl	800085c <__aeabi_ddiv>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	e9c7 2302 	strd	r2, r3, [r7, #8]
	lon2 = lon2 * M_PI / 180.0;
 8001b96:	a36e      	add	r3, pc, #440	; (adr r3, 8001d50 <distance_on_geoid+0x248>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ba0:	f7fe fd32 	bl	8000608 <__aeabi_dmul>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <distance_on_geoid+0x258>)
 8001bb2:	f7fe fe53 	bl	800085c <__aeabi_ddiv>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	e9c7 2300 	strd	r2, r3, [r7]

	// radius of earth in metres
	double r = 6378100;
 8001bbe:	a366      	add	r3, pc, #408	; (adr r3, 8001d58 <distance_on_geoid+0x250>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

	// P
	double rho1 = r * cos(lat1);
 8001bc8:	ed97 0b06 	vldr	d0, [r7, #24]
 8001bcc:	f012 fe60 	bl	8014890 <cos>
 8001bd0:	ec53 2b10 	vmov	r2, r3, d0
 8001bd4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001bd8:	f7fe fd16 	bl	8000608 <__aeabi_dmul>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double z1 = r * sin(lat1);
 8001be4:	ed97 0b06 	vldr	d0, [r7, #24]
 8001be8:	f012 fea2 	bl	8014930 <sin>
 8001bec:	ec53 2b10 	vmov	r2, r3, d0
 8001bf0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001bf4:	f7fe fd08 	bl	8000608 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double x1 = rho1 * cos(lon1);
 8001c00:	ed97 0b04 	vldr	d0, [r7, #16]
 8001c04:	f012 fe44 	bl	8014890 <cos>
 8001c08:	ec53 2b10 	vmov	r2, r3, d0
 8001c0c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001c10:	f7fe fcfa 	bl	8000608 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double y1 = rho1 * sin(lon1);
 8001c1c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001c20:	f012 fe86 	bl	8014930 <sin>
 8001c24:	ec53 2b10 	vmov	r2, r3, d0
 8001c28:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001c2c:	f7fe fcec 	bl	8000608 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	// Q
	double rho2 = r * cos(lat2);
 8001c38:	ed97 0b02 	vldr	d0, [r7, #8]
 8001c3c:	f012 fe28 	bl	8014890 <cos>
 8001c40:	ec53 2b10 	vmov	r2, r3, d0
 8001c44:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001c48:	f7fe fcde 	bl	8000608 <__aeabi_dmul>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double z2 = r * sin(lat2);
 8001c54:	ed97 0b02 	vldr	d0, [r7, #8]
 8001c58:	f012 fe6a 	bl	8014930 <sin>
 8001c5c:	ec53 2b10 	vmov	r2, r3, d0
 8001c60:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001c64:	f7fe fcd0 	bl	8000608 <__aeabi_dmul>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double x2 = rho2 * cos(lon2);
 8001c70:	ed97 0b00 	vldr	d0, [r7]
 8001c74:	f012 fe0c 	bl	8014890 <cos>
 8001c78:	ec53 2b10 	vmov	r2, r3, d0
 8001c7c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c80:	f7fe fcc2 	bl	8000608 <__aeabi_dmul>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double y2 = rho2 * sin(lon2);
 8001c8c:	ed97 0b00 	vldr	d0, [r7]
 8001c90:	f012 fe4e 	bl	8014930 <sin>
 8001c94:	ec53 2b10 	vmov	r2, r3, d0
 8001c98:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c9c:	f7fe fcb4 	bl	8000608 <__aeabi_dmul>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// Dot product
	double dot = (x1 * x2 + y1 * y2 + z1 * z2);
 8001ca8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001cac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001cb0:	f7fe fcaa 	bl	8000608 <__aeabi_dmul>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4614      	mov	r4, r2
 8001cba:	461d      	mov	r5, r3
 8001cbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001cc0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001cc4:	f7fe fca0 	bl	8000608 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4620      	mov	r0, r4
 8001cce:	4629      	mov	r1, r5
 8001cd0:	f7fe fae4 	bl	800029c <__adddf3>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4614      	mov	r4, r2
 8001cda:	461d      	mov	r5, r3
 8001cdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ce0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ce4:	f7fe fc90 	bl	8000608 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4620      	mov	r0, r4
 8001cee:	4629      	mov	r1, r5
 8001cf0:	f7fe fad4 	bl	800029c <__adddf3>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double cos_theta = dot / (r * r);
 8001cfc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001d00:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001d04:	f7fe fc80 	bl	8000608 <__aeabi_dmul>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d10:	f7fe fda4 	bl	800085c <__aeabi_ddiv>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	double theta = acos(cos_theta);
 8001d1c:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001d20:	f012 fe8c 	bl	8014a3c <acos>
 8001d24:	ed87 0b08 	vstr	d0, [r7, #32]

	// Distance in Metres
	return r * theta;
 8001d28:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d2c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001d30:	f7fe fc6a 	bl	8000608 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d3c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d40:	eef0 0a67 	vmov.f32	s1, s15
 8001d44:	3780      	adds	r7, #128	; 0x80
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bdb0      	pop	{r4, r5, r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	f3af 8000 	nop.w
 8001d50:	54442d18 	.word	0x54442d18
 8001d54:	400921fb 	.word	0x400921fb
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	4158549d 	.word	0x4158549d
 8001d60:	40668000 	.word	0x40668000

08001d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b09a      	sub	sp, #104	; 0x68
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d6a:	f002 fad3 	bl	8004314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d6e:	f000 f8b5 	bl	8001edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d72:	f000 fa97 	bl	80022a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d76:	f000 fa6d 	bl	8002254 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001d7a:	f000 fa17 	bl	80021ac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d7e:	f000 f987 	bl	8002090 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d82:	f000 f9b3 	bl	80020ec <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001d86:	f000 f9e7 	bl	8002158 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001d8a:	f000 f913 	bl	8001fb4 <MX_ADC1_Init>
  MX_FATFS_Init();
 8001d8e:	f007 fa47 	bl	8009220 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 8001d92:	f000 fa35 	bl	8002200 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  char txBuffer [100] = {};
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	f107 0308 	add.w	r3, r7, #8
 8001d9e:	2260      	movs	r2, #96	; 0x60
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f00e faae 	bl	8010304 <memset>
  sprintf(txBuffer, "Bismillah..\n");
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	492e      	ldr	r1, [pc, #184]	; (8001e64 <main+0x100>)
 8001dac:	4618      	mov	r0, r3
 8001dae:	f00e ff4f 	bl	8010c50 <siprintf>
  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 8001db2:	1d39      	adds	r1, r7, #4
 8001db4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001db8:	2264      	movs	r2, #100	; 0x64
 8001dba:	482b      	ldr	r0, [pc, #172]	; (8001e68 <main+0x104>)
 8001dbc:	f006 fa6d 	bl	800829a <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001dc0:	f00a fce0 	bl	800c784 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MutexSPI1 */
  MutexSPI1Handle = osMutexNew(&MutexSPI1_attributes);
 8001dc4:	4829      	ldr	r0, [pc, #164]	; (8001e6c <main+0x108>)
 8001dc6:	f00a fdd4 	bl	800c972 <osMutexNew>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4a28      	ldr	r2, [pc, #160]	; (8001e70 <main+0x10c>)
 8001dce:	6013      	str	r3, [r2, #0]

  /* creation of mutexIMU */
  mutexIMUHandle = osMutexNew(&mutexIMU_attributes);
 8001dd0:	4828      	ldr	r0, [pc, #160]	; (8001e74 <main+0x110>)
 8001dd2:	f00a fdce 	bl	800c972 <osMutexNew>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4a27      	ldr	r2, [pc, #156]	; (8001e78 <main+0x114>)
 8001dda:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainProcessTask */
  MainProcessTaskHandle = osThreadNew(MainProcess, NULL, &MainProcessTask_attributes);
 8001ddc:	4a27      	ldr	r2, [pc, #156]	; (8001e7c <main+0x118>)
 8001dde:	2100      	movs	r1, #0
 8001de0:	4827      	ldr	r0, [pc, #156]	; (8001e80 <main+0x11c>)
 8001de2:	f00a fd19 	bl	800c818 <osThreadNew>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a26      	ldr	r2, [pc, #152]	; (8001e84 <main+0x120>)
 8001dea:	6013      	str	r3, [r2, #0]

  /* creation of IMUTask */
  IMUTaskHandle = osThreadNew(IMU, NULL, &IMUTask_attributes);
 8001dec:	4a26      	ldr	r2, [pc, #152]	; (8001e88 <main+0x124>)
 8001dee:	2100      	movs	r1, #0
 8001df0:	4826      	ldr	r0, [pc, #152]	; (8001e8c <main+0x128>)
 8001df2:	f00a fd11 	bl	800c818 <osThreadNew>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4a25      	ldr	r2, [pc, #148]	; (8001e90 <main+0x12c>)
 8001dfa:	6013      	str	r3, [r2, #0]

  /* creation of GPSTask */
  GPSTaskHandle = osThreadNew(GPS, NULL, &GPSTask_attributes);
 8001dfc:	4a25      	ldr	r2, [pc, #148]	; (8001e94 <main+0x130>)
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4825      	ldr	r0, [pc, #148]	; (8001e98 <main+0x134>)
 8001e02:	f00a fd09 	bl	800c818 <osThreadNew>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4a24      	ldr	r2, [pc, #144]	; (8001e9c <main+0x138>)
 8001e0a:	6013      	str	r3, [r2, #0]

  /* creation of RFIDTask */
  RFIDTaskHandle = osThreadNew(RFID, NULL, &RFIDTask_attributes);
 8001e0c:	4a24      	ldr	r2, [pc, #144]	; (8001ea0 <main+0x13c>)
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4824      	ldr	r0, [pc, #144]	; (8001ea4 <main+0x140>)
 8001e12:	f00a fd01 	bl	800c818 <osThreadNew>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <main+0x144>)
 8001e1a:	6013      	str	r3, [r2, #0]

  /* creation of SDCardTask */
  SDCardTaskHandle = osThreadNew(SDCard, NULL, &SDCardTask_attributes);
 8001e1c:	4a23      	ldr	r2, [pc, #140]	; (8001eac <main+0x148>)
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4823      	ldr	r0, [pc, #140]	; (8001eb0 <main+0x14c>)
 8001e22:	f00a fcf9 	bl	800c818 <osThreadNew>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4a22      	ldr	r2, [pc, #136]	; (8001eb4 <main+0x150>)
 8001e2a:	6013      	str	r3, [r2, #0]

  /* creation of ADCProcessingTa */
  ADCProcessingTaHandle = osThreadNew(ADCProcesing, NULL, &ADCProcessingTa_attributes);
 8001e2c:	4a22      	ldr	r2, [pc, #136]	; (8001eb8 <main+0x154>)
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4822      	ldr	r0, [pc, #136]	; (8001ebc <main+0x158>)
 8001e32:	f00a fcf1 	bl	800c818 <osThreadNew>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4a21      	ldr	r2, [pc, #132]	; (8001ec0 <main+0x15c>)
 8001e3a:	6013      	str	r3, [r2, #0]

  /* creation of LoggingDataTask */
  LoggingDataTaskHandle = osThreadNew(LoggingData, NULL, &LoggingDataTask_attributes);
 8001e3c:	4a21      	ldr	r2, [pc, #132]	; (8001ec4 <main+0x160>)
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4821      	ldr	r0, [pc, #132]	; (8001ec8 <main+0x164>)
 8001e42:	f00a fce9 	bl	800c818 <osThreadNew>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4a20      	ldr	r2, [pc, #128]	; (8001ecc <main+0x168>)
 8001e4a:	6013      	str	r3, [r2, #0]

  /* creation of SendDataTask */
  SendDataTaskHandle = osThreadNew(SendData, NULL, &SendDataTask_attributes);
 8001e4c:	4a20      	ldr	r2, [pc, #128]	; (8001ed0 <main+0x16c>)
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4820      	ldr	r0, [pc, #128]	; (8001ed4 <main+0x170>)
 8001e52:	f00a fce1 	bl	800c818 <osThreadNew>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <main+0x174>)
 8001e5a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001e5c:	f00a fcb6 	bl	800c7cc <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    /* Infinite loop */

  while (1)
 8001e60:	e7fe      	b.n	8001e60 <main+0xfc>
 8001e62:	bf00      	nop
 8001e64:	08016204 	.word	0x08016204
 8001e68:	20008c50 	.word	0x20008c50
 8001e6c:	0801686c 	.word	0x0801686c
 8001e70:	200077a0 	.word	0x200077a0
 8001e74:	0801687c 	.word	0x0801687c
 8001e78:	20007730 	.word	0x20007730
 8001e7c:	0801674c 	.word	0x0801674c
 8001e80:	080023e9 	.word	0x080023e9
 8001e84:	20007bf0 	.word	0x20007bf0
 8001e88:	08016770 	.word	0x08016770
 8001e8c:	08002589 	.word	0x08002589
 8001e90:	20007738 	.word	0x20007738
 8001e94:	08016794 	.word	0x08016794
 8001e98:	0800282d 	.word	0x0800282d
 8001e9c:	20008c94 	.word	0x20008c94
 8001ea0:	080167b8 	.word	0x080167b8
 8001ea4:	08002e61 	.word	0x08002e61
 8001ea8:	20007ac0 	.word	0x20007ac0
 8001eac:	080167dc 	.word	0x080167dc
 8001eb0:	08003009 	.word	0x08003009
 8001eb4:	2000748c 	.word	0x2000748c
 8001eb8:	08016800 	.word	0x08016800
 8001ebc:	08003229 	.word	0x08003229
 8001ec0:	20007a40 	.word	0x20007a40
 8001ec4:	08016824 	.word	0x08016824
 8001ec8:	080033a9 	.word	0x080033a9
 8001ecc:	20007884 	.word	0x20007884
 8001ed0:	08016848 	.word	0x08016848
 8001ed4:	0800371d 	.word	0x0800371d
 8001ed8:	20007ab0 	.word	0x20007ab0

08001edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b094      	sub	sp, #80	; 0x50
 8001ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ee2:	f107 0320 	add.w	r3, r7, #32
 8001ee6:	2230      	movs	r2, #48	; 0x30
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f00e fa0a 	bl	8010304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef0:	f107 030c 	add.w	r3, r7, #12
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <SystemClock_Config+0xd0>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	4a28      	ldr	r2, [pc, #160]	; (8001fac <SystemClock_Config+0xd0>)
 8001f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <SystemClock_Config+0xd0>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <SystemClock_Config+0xd4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f28:	4a21      	ldr	r2, [pc, #132]	; (8001fb0 <SystemClock_Config+0xd4>)
 8001f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <SystemClock_Config+0xd4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f40:	2301      	movs	r3, #1
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f44:	2310      	movs	r3, #16
 8001f46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f50:	2310      	movs	r3, #16
 8001f52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f5e:	2307      	movs	r3, #7
 8001f60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f62:	f107 0320 	add.w	r3, r7, #32
 8001f66:	4618      	mov	r0, r3
 8001f68:	f004 fc7c 	bl	8006864 <HAL_RCC_OscConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f72:	f001 fce1 	bl	8003938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f76:	230f      	movs	r3, #15
 8001f78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	2102      	movs	r1, #2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f004 fede 	bl	8006d54 <HAL_RCC_ClockConfig>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001f9e:	f001 fccb 	bl	8003938 <Error_Handler>
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	3750      	adds	r7, #80	; 0x50
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000

08001fb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fba:	463b      	mov	r3, r7
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001fc8:	4a2f      	ldr	r2, [pc, #188]	; (8002088 <MX_ADC1_Init+0xd4>)
 8001fca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001fce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001fda:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fe0:	4b28      	ldr	r3, [pc, #160]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fe6:	4b27      	ldr	r3, [pc, #156]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fee:	4b25      	ldr	r3, [pc, #148]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ff4:	4b23      	ldr	r3, [pc, #140]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001ff6:	4a25      	ldr	r2, [pc, #148]	; (800208c <MX_ADC1_Init+0xd8>)
 8001ff8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ffa:	4b22      	ldr	r3, [pc, #136]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002000:	4b20      	ldr	r3, [pc, #128]	; (8002084 <MX_ADC1_Init+0xd0>)
 8002002:	2203      	movs	r2, #3
 8002004:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002006:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <MX_ADC1_Init+0xd0>)
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800200e:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <MX_ADC1_Init+0xd0>)
 8002010:	2201      	movs	r2, #1
 8002012:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002014:	481b      	ldr	r0, [pc, #108]	; (8002084 <MX_ADC1_Init+0xd0>)
 8002016:	f002 f9e3 	bl	80043e0 <HAL_ADC_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002020:	f001 fc8a 	bl	8003938 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002024:	230f      	movs	r3, #15
 8002026:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002028:	2301      	movs	r3, #1
 800202a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800202c:	2307      	movs	r3, #7
 800202e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002030:	463b      	mov	r3, r7
 8002032:	4619      	mov	r1, r3
 8002034:	4813      	ldr	r0, [pc, #76]	; (8002084 <MX_ADC1_Init+0xd0>)
 8002036:	f002 fb1b 	bl	8004670 <HAL_ADC_ConfigChannel>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002040:	f001 fc7a 	bl	8003938 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002044:	2308      	movs	r3, #8
 8002046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002048:	2302      	movs	r3, #2
 800204a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800204c:	463b      	mov	r3, r7
 800204e:	4619      	mov	r1, r3
 8002050:	480c      	ldr	r0, [pc, #48]	; (8002084 <MX_ADC1_Init+0xd0>)
 8002052:	f002 fb0d 	bl	8004670 <HAL_ADC_ConfigChannel>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800205c:	f001 fc6c 	bl	8003938 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002060:	2309      	movs	r3, #9
 8002062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002064:	2303      	movs	r3, #3
 8002066:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002068:	463b      	mov	r3, r7
 800206a:	4619      	mov	r1, r3
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <MX_ADC1_Init+0xd0>)
 800206e:	f002 faff 	bl	8004670 <HAL_ADC_ConfigChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002078:	f001 fc5e 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20007954 	.word	0x20007954
 8002088:	40012000 	.word	0x40012000
 800208c:	0f000001 	.word	0x0f000001

08002090 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <MX_I2C1_Init+0x50>)
 8002096:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <MX_I2C1_Init+0x54>)
 8002098:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800209a:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <MX_I2C1_Init+0x50>)
 800209c:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <MX_I2C1_Init+0x58>)
 800209e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <MX_I2C1_Init+0x50>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <MX_I2C1_Init+0x50>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <MX_I2C1_Init+0x50>)
 80020ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <MX_I2C1_Init+0x50>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <MX_I2C1_Init+0x50>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020c0:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <MX_I2C1_Init+0x50>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <MX_I2C1_Init+0x50>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020cc:	4804      	ldr	r0, [pc, #16]	; (80020e0 <MX_I2C1_Init+0x50>)
 80020ce:	f003 fc09 	bl	80058e4 <HAL_I2C_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020d8:	f001 fc2e 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200076dc 	.word	0x200076dc
 80020e4:	40005400 	.word	0x40005400
 80020e8:	000186a0 	.word	0x000186a0

080020ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <MX_SPI1_Init+0x64>)
 80020f2:	4a18      	ldr	r2, [pc, #96]	; (8002154 <MX_SPI1_Init+0x68>)
 80020f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <MX_SPI1_Init+0x64>)
 80020f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <MX_SPI1_Init+0x64>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <MX_SPI1_Init+0x64>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <MX_SPI1_Init+0x64>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <MX_SPI1_Init+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <MX_SPI1_Init+0x64>)
 8002118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800211c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <MX_SPI1_Init+0x64>)
 8002120:	2230      	movs	r2, #48	; 0x30
 8002122:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <MX_SPI1_Init+0x64>)
 8002126:	2200      	movs	r2, #0
 8002128:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <MX_SPI1_Init+0x64>)
 800212c:	2200      	movs	r2, #0
 800212e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <MX_SPI1_Init+0x64>)
 8002132:	2200      	movs	r2, #0
 8002134:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <MX_SPI1_Init+0x64>)
 8002138:	220a      	movs	r2, #10
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800213c:	4804      	ldr	r0, [pc, #16]	; (8002150 <MX_SPI1_Init+0x64>)
 800213e:	f005 f837 	bl	80071b0 <HAL_SPI_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002148:	f001 fbf6 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20008bf8 	.word	0x20008bf8
 8002154:	40013000 	.word	0x40013000

08002158 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 800215e:	4a12      	ldr	r2, [pc, #72]	; (80021a8 <MX_USART1_UART_Init+0x50>)
 8002160:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 8002164:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002168:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 8002172:	2200      	movs	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 800217e:	220c      	movs	r2, #12
 8002180:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800218e:	4805      	ldr	r0, [pc, #20]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 8002190:	f006 f836 	bl	8008200 <HAL_UART_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800219a:	f001 fbcd 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200079fc 	.word	0x200079fc
 80021a8:	40011000 	.word	0x40011000

080021ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <MX_USART2_UART_Init+0x50>)
 80021b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021d2:	220c      	movs	r2, #12
 80021d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021e4:	f006 f80c 	bl	8008200 <HAL_UART_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021ee:	f001 fba3 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20008c50 	.word	0x20008c50
 80021fc:	40004400 	.word	0x40004400

08002200 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002206:	4a12      	ldr	r2, [pc, #72]	; (8002250 <MX_USART6_UART_Init+0x50>)
 8002208:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <MX_USART6_UART_Init+0x4c>)
 800220c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002210:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <MX_USART6_UART_Init+0x4c>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002226:	220c      	movs	r2, #12
 8002228:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <MX_USART6_UART_Init+0x4c>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002232:	2200      	movs	r2, #0
 8002234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002238:	f005 ffe2 	bl	8008200 <HAL_UART_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002242:	f001 fb79 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20007ba0 	.word	0x20007ba0
 8002250:	40011400 	.word	0x40011400

08002254 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <MX_DMA_Init+0x4c>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <MX_DMA_Init+0x4c>)
 8002264:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <MX_DMA_Init+0x4c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2105      	movs	r1, #5
 800227a:	2038      	movs	r0, #56	; 0x38
 800227c:	f002 fd50 	bl	8004d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002280:	2038      	movs	r0, #56	; 0x38
 8002282:	f002 fd69 	bl	8004d58 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2105      	movs	r1, #5
 800228a:	203a      	movs	r0, #58	; 0x3a
 800228c:	f002 fd48 	bl	8004d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002290:	203a      	movs	r0, #58	; 0x3a
 8002292:	f002 fd61 	bl	8004d58 <HAL_NVIC_EnableIRQ>

}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800

080022a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b44      	ldr	r3, [pc, #272]	; (80023d0 <MX_GPIO_Init+0x12c>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a43      	ldr	r2, [pc, #268]	; (80023d0 <MX_GPIO_Init+0x12c>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b41      	ldr	r3, [pc, #260]	; (80023d0 <MX_GPIO_Init+0x12c>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b3d      	ldr	r3, [pc, #244]	; (80023d0 <MX_GPIO_Init+0x12c>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a3c      	ldr	r2, [pc, #240]	; (80023d0 <MX_GPIO_Init+0x12c>)
 80022e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b3a      	ldr	r3, [pc, #232]	; (80023d0 <MX_GPIO_Init+0x12c>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <MX_GPIO_Init+0x12c>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a35      	ldr	r2, [pc, #212]	; (80023d0 <MX_GPIO_Init+0x12c>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <MX_GPIO_Init+0x12c>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <MX_GPIO_Init+0x12c>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a2e      	ldr	r2, [pc, #184]	; (80023d0 <MX_GPIO_Init+0x12c>)
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b2c      	ldr	r3, [pc, #176]	; (80023d0 <MX_GPIO_Init+0x12c>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFID_RST_Pin|RFID_CS_Pin, GPIO_PIN_SET);
 800232a:	2201      	movs	r2, #1
 800232c:	2112      	movs	r1, #18
 800232e:	4829      	ldr	r0, [pc, #164]	; (80023d4 <MX_GPIO_Init+0x130>)
 8002330:	f003 fabe 	bl	80058b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|POWER_SEL_Pin|IGNITION_LOGIC_Pin, GPIO_PIN_RESET);
 8002334:	2200      	movs	r2, #0
 8002336:	f44f 7144 	mov.w	r1, #784	; 0x310
 800233a:	4827      	ldr	r0, [pc, #156]	; (80023d8 <MX_GPIO_Init+0x134>)
 800233c:	f003 fab8 	bl	80058b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002346:	4b25      	ldr	r3, [pc, #148]	; (80023dc <MX_GPIO_Init+0x138>)
 8002348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	4820      	ldr	r0, [pc, #128]	; (80023d8 <MX_GPIO_Init+0x134>)
 8002356:	f003 f90f 	bl	8005578 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_RST_Pin RFID_CS_Pin */
  GPIO_InitStruct.Pin = RFID_RST_Pin|RFID_CS_Pin;
 800235a:	2312      	movs	r3, #18
 800235c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235e:	2301      	movs	r3, #1
 8002360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002362:	2301      	movs	r3, #1
 8002364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	4818      	ldr	r0, [pc, #96]	; (80023d4 <MX_GPIO_Init+0x130>)
 8002372:	f003 f901 	bl	8005578 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin POWER_SEL_Pin IGNITION_LOGIC_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|POWER_SEL_Pin|IGNITION_LOGIC_Pin;
 8002376:	f44f 7344 	mov.w	r3, #784	; 0x310
 800237a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237c:	2301      	movs	r3, #1
 800237e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002384:	2300      	movs	r3, #0
 8002386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	4812      	ldr	r0, [pc, #72]	; (80023d8 <MX_GPIO_Init+0x134>)
 8002390:	f003 f8f2 	bl	8005578 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHARGING_SIGNAL_Pin */
  GPIO_InitStruct.Pin = CHARGING_SIGNAL_Pin;
 8002394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800239a:	2303      	movs	r3, #3
 800239c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHARGING_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	480d      	ldr	r0, [pc, #52]	; (80023e0 <MX_GPIO_Init+0x13c>)
 80023aa:	f003 f8e5 	bl	8005578 <HAL_GPIO_Init>

  /*Configure GPIO pin : IGNITION_SIGNAL_Pin */
  GPIO_InitStruct.Pin = IGNITION_SIGNAL_Pin;
 80023ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b8:	2301      	movs	r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IGNITION_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	4619      	mov	r1, r3
 80023c2:	4804      	ldr	r0, [pc, #16]	; (80023d4 <MX_GPIO_Init+0x130>)
 80023c4:	f003 f8d8 	bl	8005578 <HAL_GPIO_Init>

}
 80023c8:	bf00      	nop
 80023ca:	3728      	adds	r7, #40	; 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020000 	.word	0x40020000
 80023d8:	40020800 	.word	0x40020800
 80023dc:	10210000 	.word	0x10210000
 80023e0:	40020400 	.word	0x40020400
 80023e4:	00000000 	.word	0x00000000

080023e8 <MainProcess>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MainProcess */
void MainProcess(void *argument)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b0b4      	sub	sp, #208	; 0xd0
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char txBuffer [200] = {};
 80023f0:	2300      	movs	r3, #0
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	22c4      	movs	r2, #196	; 0xc4
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f00d ff81 	bl	8010304 <memset>
	sprintf(txBuffer, "Running Main Process..\n");
 8002402:	f107 0308 	add.w	r3, r7, #8
 8002406:	4952      	ldr	r1, [pc, #328]	; (8002550 <MainProcess+0x168>)
 8002408:	4618      	mov	r0, r3
 800240a:	f00e fc21 	bl	8010c50 <siprintf>

	//Initialize Power Control
	HAL_GPIO_WritePin(POWER_SEL_GPIO_Port, POWER_SEL_Pin, GPIO_PIN_RESET);
 800240e:	2200      	movs	r2, #0
 8002410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002414:	484f      	ldr	r0, [pc, #316]	; (8002554 <MainProcess+0x16c>)
 8002416:	f003 fa4b 	bl	80058b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CHARGING_SIGNAL_GPIO_Port, CHARGING_SIGNAL_Pin, GPIO_PIN_RESET);
 800241a:	2200      	movs	r2, #0
 800241c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002420:	484d      	ldr	r0, [pc, #308]	; (8002558 <MainProcess+0x170>)
 8002422:	f003 fa45 	bl	80058b0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  for(;;)
  {
	  //Identification Check
	  if ((identification == 1)&&(ignition_status == 1)){
 8002426:	4b4d      	ldr	r3, [pc, #308]	; (800255c <MainProcess+0x174>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d10b      	bne.n	8002446 <MainProcess+0x5e>
 800242e:	4b4c      	ldr	r3, [pc, #304]	; (8002560 <MainProcess+0x178>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d107      	bne.n	8002446 <MainProcess+0x5e>
		  xTaskNotifyGive(IMUTaskHandle);
 8002436:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <MainProcess+0x17c>)
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	2300      	movs	r3, #0
 800243c:	2202      	movs	r2, #2
 800243e:	2100      	movs	r1, #0
 8002440:	f00c fe94 	bl	800f16c <xTaskGenericNotify>
 8002444:	e014      	b.n	8002470 <MainProcess+0x88>
	  } else {
		  //Reset IMU Reading
		  MPU6050.Ax = 0;
 8002446:	4948      	ldr	r1, [pc, #288]	; (8002568 <MainProcess+0x180>)
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  MPU6050.Ay = 0;
 8002454:	4944      	ldr	r1, [pc, #272]	; (8002568 <MainProcess+0x180>)
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  MPU6050.Az = 0;
 8002462:	4941      	ldr	r1, [pc, #260]	; (8002568 <MainProcess+0x180>)
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  }
	  if(UID[0]== 0x29){ // Need to add driver database
 8002470:	4b3e      	ldr	r3, [pc, #248]	; (800256c <MainProcess+0x184>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b29      	cmp	r3, #41	; 0x29
 8002476:	d103      	bne.n	8002480 <MainProcess+0x98>
		  identification = 1;
 8002478:	4b38      	ldr	r3, [pc, #224]	; (800255c <MainProcess+0x174>)
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	e002      	b.n	8002486 <MainProcess+0x9e>
	  } else {
		  identification = 0;
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <MainProcess+0x174>)
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
	  }
	  //End of Identification Check

	  /* Setting Ignition Switch Logic*/
	  if(identification == 1){
 8002486:	4b35      	ldr	r3, [pc, #212]	; (800255c <MainProcess+0x174>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d106      	bne.n	800249c <MainProcess+0xb4>
		  //Set Ignition Logic
		  HAL_GPIO_WritePin(IGNITION_LOGIC_GPIO_Port, IGNITION_LOGIC_Pin, GPIO_PIN_SET);
 800248e:	2201      	movs	r2, #1
 8002490:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002494:	482f      	ldr	r0, [pc, #188]	; (8002554 <MainProcess+0x16c>)
 8002496:	f003 fa0b 	bl	80058b0 <HAL_GPIO_WritePin>
 800249a:	e005      	b.n	80024a8 <MainProcess+0xc0>
	  }
	  else {
		  HAL_GPIO_WritePin(IGNITION_LOGIC_GPIO_Port, IGNITION_LOGIC_Pin, GPIO_PIN_RESET);
 800249c:	2200      	movs	r2, #0
 800249e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024a2:	482c      	ldr	r0, [pc, #176]	; (8002554 <MainProcess+0x16c>)
 80024a4:	f003 fa04 	bl	80058b0 <HAL_GPIO_WritePin>
	  }

	  /* Reading Ignition Switch Signal */
	  ignition_status = HAL_GPIO_ReadPin(IGNITION_SIGNAL_GPIO_Port, IGNITION_SIGNAL_Pin);
 80024a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ac:	4830      	ldr	r0, [pc, #192]	; (8002570 <MainProcess+0x188>)
 80024ae:	f003 f9e7 	bl	8005880 <HAL_GPIO_ReadPin>
 80024b2:	4603      	mov	r3, r0
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <MainProcess+0x178>)
 80024b8:	701a      	strb	r2, [r3, #0]

	  /* Power Management */
	  if(ignition_status == 0){
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <MainProcess+0x178>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <MainProcess+0xee>
	  		  //Use Battery
	  		  power_sel = 1;
 80024c2:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <MainProcess+0x18c>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(POWER_SEL_GPIO_Port, POWER_SEL_Pin, GPIO_PIN_SET);
 80024c8:	2201      	movs	r2, #1
 80024ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ce:	4821      	ldr	r0, [pc, #132]	; (8002554 <MainProcess+0x16c>)
 80024d0:	f003 f9ee 	bl	80058b0 <HAL_GPIO_WritePin>
 80024d4:	e033      	b.n	800253e <MainProcess+0x156>
	  	  }
	  	  else{ //Ignition On
	  		  //Always use Accu
	  		  power_sel = 0;
 80024d6:	4b27      	ldr	r3, [pc, #156]	; (8002574 <MainProcess+0x18c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(POWER_SEL_GPIO_Port, POWER_SEL_Pin, GPIO_PIN_RESET);
 80024dc:	2200      	movs	r2, #0
 80024de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024e2:	481c      	ldr	r0, [pc, #112]	; (8002554 <MainProcess+0x16c>)
 80024e4:	f003 f9e4 	bl	80058b0 <HAL_GPIO_WritePin>
	  		  /* Check Accu Level */
	  		  	  if((MAFiltAccu.out > ACCU_THRESHOLD)&&(MAFiltBatt.out < BATT_THRESHOLD)) {
 80024e8:	4b23      	ldr	r3, [pc, #140]	; (8002578 <MainProcess+0x190>)
 80024ea:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80024ee:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80024f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fa:	dd17      	ble.n	800252c <MainProcess+0x144>
 80024fc:	4b1f      	ldr	r3, [pc, #124]	; (800257c <MainProcess+0x194>)
 80024fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f828 	bl	8000558 <__aeabi_f2d>
 8002508:	a30f      	add	r3, pc, #60	; (adr r3, 8002548 <MainProcess+0x160>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fe faed 	bl	8000aec <__aeabi_dcmplt>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <MainProcess+0x144>
	  		  		  //Start Charging
	  		  		  //Set Charging Signal High
	  		  		  charging = 1;
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <MainProcess+0x198>)
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
	  		  		  HAL_GPIO_WritePin(CHARGING_SIGNAL_GPIO_Port, CHARGING_SIGNAL_Pin, GPIO_PIN_RESET);
 800251e:	2200      	movs	r2, #0
 8002520:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002524:	480c      	ldr	r0, [pc, #48]	; (8002558 <MainProcess+0x170>)
 8002526:	f003 f9c3 	bl	80058b0 <HAL_GPIO_WritePin>
 800252a:	e008      	b.n	800253e <MainProcess+0x156>
	  		  	  }
	  		  	  else { // No charging
	  		  		  charging = 0;
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <MainProcess+0x198>)
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
	  		  		  HAL_GPIO_WritePin(CHARGING_SIGNAL_GPIO_Port, CHARGING_SIGNAL_Pin, GPIO_PIN_RESET);
 8002532:	2200      	movs	r2, #0
 8002534:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002538:	4807      	ldr	r0, [pc, #28]	; (8002558 <MainProcess+0x170>)
 800253a:	f003 f9b9 	bl	80058b0 <HAL_GPIO_WritePin>
//			  UID[0],UID[1],UID[2],UID[3], ignition_status, power_sel, charging);
//
//
//	  HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(100);
 800253e:	2064      	movs	r0, #100	; 0x64
 8002540:	f00a f9fc 	bl	800c93c <osDelay>
	  if ((identification == 1)&&(ignition_status == 1)){
 8002544:	e76f      	b.n	8002426 <MainProcess+0x3e>
 8002546:	bf00      	nop
 8002548:	9999999a 	.word	0x9999999a
 800254c:	400d9999 	.word	0x400d9999
 8002550:	08016214 	.word	0x08016214
 8002554:	40020800 	.word	0x40020800
 8002558:	40020400 	.word	0x40020400
 800255c:	20000274 	.word	0x20000274
 8002560:	20000291 	.word	0x20000291
 8002564:	20007738 	.word	0x20007738
 8002568:	20007748 	.word	0x20007748
 800256c:	20000270 	.word	0x20000270
 8002570:	40020000 	.word	0x40020000
 8002574:	20000292 	.word	0x20000292
 8002578:	20007ad4 	.word	0x20007ad4
 800257c:	200077a4 	.word	0x200077a4
 8002580:	20000293 	.word	0x20000293
 8002584:	00000000 	.word	0x00000000

08002588 <IMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IMU */
void IMU(void *argument)
{
 8002588:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800258c:	b09c      	sub	sp, #112	; 0x70
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IMU */
	char txBuffer[100]= {};
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	2260      	movs	r2, #96	; 0x60
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f00d feb0 	bl	8010304 <memset>
	sprintf(txBuffer, "Running IMU Task..\n");
 80025a4:	f107 0308 	add.w	r3, r7, #8
 80025a8:	4991      	ldr	r1, [pc, #580]	; (80027f0 <IMU+0x268>)
 80025aa:	4618      	mov	r0, r3
 80025ac:	f00e fb50 	bl	8010c50 <siprintf>
//	float vel[3] = {0,0,0};
	uint8_t ID = MPU6050_Init(&hi2c1);
 80025b0:	4890      	ldr	r0, [pc, #576]	; (80027f4 <IMU+0x26c>)
 80025b2:	f001 f9c6 	bl	8003942 <MPU6050_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(txBuffer,"Id : %d Initialization Success .. \n", ID);
 80025bc:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80025c0:	f107 0308 	add.w	r3, r7, #8
 80025c4:	498c      	ldr	r1, [pc, #560]	; (80027f8 <IMU+0x270>)
 80025c6:	4618      	mov	r0, r3
 80025c8:	f00e fb42 	bl	8010c50 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, sizeof(txBuffer), 100);
 80025cc:	f107 0108 	add.w	r1, r7, #8
 80025d0:	2364      	movs	r3, #100	; 0x64
 80025d2:	2264      	movs	r2, #100	; 0x64
 80025d4:	4889      	ldr	r0, [pc, #548]	; (80027fc <IMU+0x274>)
 80025d6:	f005 fe60 	bl	800829a <HAL_UART_Transmit>

	//Init Matrix Transformation
	MatrixTransformInit(&MatrixTranform);
 80025da:	4889      	ldr	r0, [pc, #548]	; (8002800 <IMU+0x278>)
 80025dc:	f7fe fd0e 	bl	8000ffc <MatrixTransformInit>
	//Clearing Buffer
	memset(txBuffer,0,sizeof(txBuffer));
 80025e0:	f107 0308 	add.w	r3, r7, #8
 80025e4:	2264      	movs	r2, #100	; 0x64
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f00d fe8b 	bl	8010304 <memset>
	osDelay(200);
 80025ee:	20c8      	movs	r0, #200	; 0xc8
 80025f0:	f00a f9a4 	bl	800c93c <osDelay>
  /* Infinite loop */
  for(;;)
  {

	//Blocking Until Notified
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 80025f4:	f04f 31ff 	mov.w	r1, #4294967295
 80025f8:	2001      	movs	r0, #1
 80025fa:	f00c fd6f 	bl	800f0dc <ulTaskNotifyTake>
	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 80025fe:	4981      	ldr	r1, [pc, #516]	; (8002804 <IMU+0x27c>)
 8002600:	487c      	ldr	r0, [pc, #496]	; (80027f4 <IMU+0x26c>)
 8002602:	f001 fa19 	bl	8003a38 <MPU6050_Read_Accel>
	//Frame Transformation
	acc = MPU6050.Ax * MatrixTranform.x[0] + MPU6050.Ay * MatrixTranform.x[1]+MPU6050.Az*MatrixTranform.x[2];
 8002606:	4b7f      	ldr	r3, [pc, #508]	; (8002804 <IMU+0x27c>)
 8002608:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800260c:	4b7c      	ldr	r3, [pc, #496]	; (8002800 <IMU+0x278>)
 800260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002612:	f7fd fff9 	bl	8000608 <__aeabi_dmul>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4614      	mov	r4, r2
 800261c:	461d      	mov	r5, r3
 800261e:	4b79      	ldr	r3, [pc, #484]	; (8002804 <IMU+0x27c>)
 8002620:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002624:	4b76      	ldr	r3, [pc, #472]	; (8002800 <IMU+0x278>)
 8002626:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800262a:	f7fd ffed 	bl	8000608 <__aeabi_dmul>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4620      	mov	r0, r4
 8002634:	4629      	mov	r1, r5
 8002636:	f7fd fe31 	bl	800029c <__adddf3>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4614      	mov	r4, r2
 8002640:	461d      	mov	r5, r3
 8002642:	4b70      	ldr	r3, [pc, #448]	; (8002804 <IMU+0x27c>)
 8002644:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002648:	4b6d      	ldr	r3, [pc, #436]	; (8002800 <IMU+0x278>)
 800264a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800264e:	f7fd ffdb 	bl	8000608 <__aeabi_dmul>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4620      	mov	r0, r4
 8002658:	4629      	mov	r1, r5
 800265a:	f7fd fe1f 	bl	800029c <__adddf3>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4969      	ldr	r1, [pc, #420]	; (8002808 <IMU+0x280>)
 8002664:	e9c1 2300 	strd	r2, r3, [r1]
	vel[0] += MPU6050.Ax * IMU_TS * 0.001; //Vx TS in MS
	vel[1] += MPU6050.Ay * IMU_TS * 0.001; //Vy
	vel[2] += (MPU6050.Az - 5.52) * IMU_TS * 0.001; //Vz
	speed = sqrt(pow(vel[0],2) + pow(vel[1],2) + pow(vel[2],2));
	*/
	speed += acc * IMU_TS *0.001;
 8002668:	4b68      	ldr	r3, [pc, #416]	; (800280c <IMU+0x284>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7fd ff73 	bl	8000558 <__aeabi_f2d>
 8002672:	4604      	mov	r4, r0
 8002674:	460d      	mov	r5, r1
 8002676:	4b64      	ldr	r3, [pc, #400]	; (8002808 <IMU+0x280>)
 8002678:	e9d3 0100 	ldrd	r0, r1, [r3]
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	4b63      	ldr	r3, [pc, #396]	; (8002810 <IMU+0x288>)
 8002682:	f7fd ffc1 	bl	8000608 <__aeabi_dmul>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	a356      	add	r3, pc, #344	; (adr r3, 80027e8 <IMU+0x260>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f7fd ffb8 	bl	8000608 <__aeabi_dmul>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4620      	mov	r0, r4
 800269e:	4629      	mov	r1, r5
 80026a0:	f7fd fdfc 	bl	800029c <__adddf3>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	f7fe faa4 	bl	8000bf8 <__aeabi_d2f>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4a56      	ldr	r2, [pc, #344]	; (800280c <IMU+0x284>)
 80026b4:	6013      	str	r3, [r2, #0]
	osMutexAcquire(mutexIMUHandle, portMAX_DELAY);
 80026b6:	4b57      	ldr	r3, [pc, #348]	; (8002814 <IMU+0x28c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f04f 31ff 	mov.w	r1, #4294967295
 80026be:	4618      	mov	r0, r3
 80026c0:	f00a f9dd 	bl	800ca7e <osMutexAcquire>

	imu_index++;
 80026c4:	4b54      	ldr	r3, [pc, #336]	; (8002818 <IMU+0x290>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	3301      	adds	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	4b52      	ldr	r3, [pc, #328]	; (8002818 <IMU+0x290>)
 80026ce:	801a      	strh	r2, [r3, #0]
	//Calculate maximum speed
	if(speed > speed_max){
 80026d0:	4b4e      	ldr	r3, [pc, #312]	; (800280c <IMU+0x284>)
 80026d2:	ed93 7a00 	vldr	s14, [r3]
 80026d6:	4b51      	ldr	r3, [pc, #324]	; (800281c <IMU+0x294>)
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e4:	dd03      	ble.n	80026ee <IMU+0x166>
		speed_max = speed;
 80026e6:	4b49      	ldr	r3, [pc, #292]	; (800280c <IMU+0x284>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a4c      	ldr	r2, [pc, #304]	; (800281c <IMU+0x294>)
 80026ec:	6013      	str	r3, [r2, #0]
	}

	//calculate maximum acceleration
	if(acc > acc_max){
 80026ee:	4b4c      	ldr	r3, [pc, #304]	; (8002820 <IMU+0x298>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fd ff30 	bl	8000558 <__aeabi_f2d>
 80026f8:	4b43      	ldr	r3, [pc, #268]	; (8002808 <IMU+0x280>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fe f9f5 	bl	8000aec <__aeabi_dcmplt>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d009      	beq.n	800271c <IMU+0x194>
		acc_max = acc;
 8002708:	4b3f      	ldr	r3, [pc, #252]	; (8002808 <IMU+0x280>)
 800270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	f7fe fa71 	bl	8000bf8 <__aeabi_d2f>
 8002716:	4603      	mov	r3, r0
 8002718:	4a41      	ldr	r2, [pc, #260]	; (8002820 <IMU+0x298>)
 800271a:	6013      	str	r3, [r2, #0]
	}
	//calculate average
	acc_avg = (acc_avg*(imu_index-1)/imu_index) + (acc/imu_index);
 800271c:	4b3e      	ldr	r3, [pc, #248]	; (8002818 <IMU+0x290>)
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	3b01      	subs	r3, #1
 8002722:	ee07 3a90 	vmov	s15, r3
 8002726:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800272a:	4b3e      	ldr	r3, [pc, #248]	; (8002824 <IMU+0x29c>)
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002734:	4b38      	ldr	r3, [pc, #224]	; (8002818 <IMU+0x290>)
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	ee07 3a90 	vmov	s15, r3
 800273c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002740:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002744:	ee16 0a90 	vmov	r0, s13
 8002748:	f7fd ff06 	bl	8000558 <__aeabi_f2d>
 800274c:	4680      	mov	r8, r0
 800274e:	4689      	mov	r9, r1
 8002750:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <IMU+0x280>)
 8002752:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002756:	4b30      	ldr	r3, [pc, #192]	; (8002818 <IMU+0x290>)
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fd feea 	bl	8000534 <__aeabi_i2d>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4620      	mov	r0, r4
 8002766:	4629      	mov	r1, r5
 8002768:	f7fe f878 	bl	800085c <__aeabi_ddiv>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4640      	mov	r0, r8
 8002772:	4649      	mov	r1, r9
 8002774:	f7fd fd92 	bl	800029c <__adddf3>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	f7fe fa3a 	bl	8000bf8 <__aeabi_d2f>
 8002784:	4603      	mov	r3, r0
 8002786:	4a27      	ldr	r2, [pc, #156]	; (8002824 <IMU+0x29c>)
 8002788:	6013      	str	r3, [r2, #0]
	speed_avg = (speed_avg*(imu_index-1)/imu_index) + (speed/imu_index);
 800278a:	4b23      	ldr	r3, [pc, #140]	; (8002818 <IMU+0x290>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	3b01      	subs	r3, #1
 8002790:	ee07 3a90 	vmov	s15, r3
 8002794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002798:	4b23      	ldr	r3, [pc, #140]	; (8002828 <IMU+0x2a0>)
 800279a:	edd3 7a00 	vldr	s15, [r3]
 800279e:	ee67 6a27 	vmul.f32	s13, s14, s15
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <IMU+0x290>)
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027b2:	4b16      	ldr	r3, [pc, #88]	; (800280c <IMU+0x284>)
 80027b4:	ed93 6a00 	vldr	s12, [r3]
 80027b8:	4b17      	ldr	r3, [pc, #92]	; (8002818 <IMU+0x290>)
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	ee07 3a90 	vmov	s15, r3
 80027c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80027c4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80027c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027cc:	4b16      	ldr	r3, [pc, #88]	; (8002828 <IMU+0x2a0>)
 80027ce:	edc3 7a00 	vstr	s15, [r3]

	osMutexRelease(mutexIMUHandle);
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <IMU+0x28c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f00a f99c 	bl	800cb14 <osMutexRelease>

//	speed = CalSpeed(MPU6050, IMU_TS);
//	sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\n", MPU6050.Ax, MPU6050.Ay, MPU6050.Az );
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(IMU_TS);
 80027dc:	2032      	movs	r0, #50	; 0x32
 80027de:	f00a f8ad 	bl	800c93c <osDelay>
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 80027e2:	e707      	b.n	80025f4 <IMU+0x6c>
 80027e4:	f3af 8000 	nop.w
 80027e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80027ec:	3f50624d 	.word	0x3f50624d
 80027f0:	0801622c 	.word	0x0801622c
 80027f4:	200076dc 	.word	0x200076dc
 80027f8:	08016240 	.word	0x08016240
 80027fc:	20008c50 	.word	0x20008c50
 8002800:	20008ed0 	.word	0x20008ed0
 8002804:	20007748 	.word	0x20007748
 8002808:	200072f0 	.word	0x200072f0
 800280c:	20007bf4 	.word	0x20007bf4
 8002810:	40490000 	.word	0x40490000
 8002814:	20007730 	.word	0x20007730
 8002818:	20008f38 	.word	0x20008f38
 800281c:	20007490 	.word	0x20007490
 8002820:	20007488 	.word	0x20007488
 8002824:	200076c8 	.word	0x200076c8
 8002828:	20007734 	.word	0x20007734

0800282c <GPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPS */
void GPS(void *argument)
{
 800282c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002830:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
 8002834:	af00      	add	r7, sp, #0
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	6018      	str	r0, [r3, #0]

	  char hH[2]; // hours
	  char mM[2]; // minutes
	  char sS[2]; // seconds

	  uint8_t cnt = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	f887 32cb 	strb.w	r3, [r7, #715]	; 0x2cb

	  HAL_UART_Receive_DMA(&huart1, buff, 255);
 8002840:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8002844:	22ff      	movs	r2, #255	; 0xff
 8002846:	4619      	mov	r1, r3
 8002848:	4865      	ldr	r0, [pc, #404]	; (80029e0 <GPS+0x1b4>)
 800284a:	f005 fe2d 	bl	80084a8 <HAL_UART_Receive_DMA>

	  HAL_UART_Transmit(&huart2, (unsigned char *) "Start\n", 6, 500);
 800284e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002852:	2206      	movs	r2, #6
 8002854:	4963      	ldr	r1, [pc, #396]	; (80029e4 <GPS+0x1b8>)
 8002856:	4864      	ldr	r0, [pc, #400]	; (80029e8 <GPS+0x1bc>)
 8002858:	f005 fd1f 	bl	800829a <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
//	  char txBuffer[200] = {};
	  if (flag) {
 800285c:	4b63      	ldr	r3, [pc, #396]	; (80029ec <GPS+0x1c0>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 82cb 	beq.w	8002dfc <GPS+0x5d0>
	  	memset(buffStr, 0, 255);
 8002866:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800286a:	22ff      	movs	r2, #255	; 0xff
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f00d fd48 	bl	8010304 <memset>
	  	sprintf(buffStr, "%s", buff);
 8002874:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8002878:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800287c:	495c      	ldr	r1, [pc, #368]	; (80029f0 <GPS+0x1c4>)
 800287e:	4618      	mov	r0, r3
 8002880:	f00e f9e6 	bl	8010c50 <siprintf>
	   /*splitting the buffStr by the "\n" delimiter with the strsep() C function
	   	 see http://www.manpagez.com/man/3/strsep/
	    */
	  	char *token, *string;
	  	// actually splitting the string by "\n" delimiter
	  	string = strdup(buffStr);
 8002884:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002888:	4618      	mov	r0, r3
 800288a:	f00e fa25 	bl	8010cd8 <strdup>
 800288e:	4603      	mov	r3, r0
 8002890:	461a      	mov	r2, r3
 8002892:	f107 0310 	add.w	r3, r7, #16
 8002896:	601a      	str	r2, [r3, #0]
	  	while ((token = strsep(&string, "\n")) != NULL) {
 8002898:	e23b      	b.n	8002d12 <GPS+0x4e6>
	  		memset(nmeaSnt, 0, 80);
 800289a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800289e:	2250      	movs	r2, #80	; 0x50
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f00d fd2e 	bl	8010304 <memset>
	  		sprintf(nmeaSnt, "%s", token);
 80028a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028ac:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80028b0:	494f      	ldr	r1, [pc, #316]	; (80029f0 <GPS+0x1c4>)
 80028b2:	4618      	mov	r0, r3
 80028b4:	f00e f9cc 	bl	8010c50 <siprintf>
	  	  	  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 100);
	  	  	*/

	  		// selecting only $GNGLL sentences, combined GPS and GLONAS
	  		// on my GPS sensor this good NMEA sentence is always 50 characters
	  		if ((strstr(nmeaSnt, "$GPGGA") != 0) && (strlen(nmeaSnt) > 49) &&(strlen(nmeaSnt) <90) && strstr(nmeaSnt, "*") != 0) {
 80028b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028bc:	494d      	ldr	r1, [pc, #308]	; (80029f4 <GPS+0x1c8>)
 80028be:	4618      	mov	r0, r3
 80028c0:	f00e fa3f 	bl	8010d42 <strstr>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8223 	beq.w	8002d12 <GPS+0x4e6>
 80028cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fc85 	bl	80001e0 <strlen>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b31      	cmp	r3, #49	; 0x31
 80028da:	f240 821a 	bls.w	8002d12 <GPS+0x4e6>
 80028de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd fc7c 	bl	80001e0 <strlen>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b59      	cmp	r3, #89	; 0x59
 80028ec:	f200 8211 	bhi.w	8002d12 <GPS+0x4e6>
 80028f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028f4:	212a      	movs	r1, #42	; 0x2a
 80028f6:	4618      	mov	r0, r3
 80028f8:	f00e f9d9 	bl	8010cae <strchr>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 8207 	beq.w	8002d12 <GPS+0x4e6>
	  			rawSum = strstr(nmeaSnt, "*");
 8002904:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002908:	212a      	movs	r1, #42	; 0x2a
 800290a:	4618      	mov	r0, r3
 800290c:	f00e f9cf 	bl	8010cae <strchr>
 8002910:	f8c7 02bc 	str.w	r0, [r7, #700]	; 0x2bc
	  			memcpy(smNmbr, &rawSum[1], 2);
 8002914:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8002918:	3301      	adds	r3, #1
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	b29a      	uxth	r2, r3
 800291e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002922:	801a      	strh	r2, [r3, #0]
	  			smNmbr[2] = '\0';
 8002924:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002928:	2200      	movs	r2, #0
 800292a:	709a      	strb	r2, [r3, #2]

	  			uint8_t intSum = nmea0183_checksum(nmeaSnt);
 800292c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff f861 	bl	80019f8 <nmea0183_checksum>
 8002936:	4603      	mov	r3, r0
 8002938:	f887 32bb 	strb.w	r3, [r7, #699]	; 0x2bb
	  			char hex[2];
	  			// "%X" unsigned hexadecimal integer (capital letters)
	  			sprintf(hex, "%X", intSum);
 800293c:	f897 22bb 	ldrb.w	r2, [r7, #699]	; 0x2bb
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	492c      	ldr	r1, [pc, #176]	; (80029f8 <GPS+0x1cc>)
 8002946:	4618      	mov	r0, r3
 8002948:	f00e f982 	bl	8010c50 <siprintf>

	  			// checksum data verification, if OK, then we can really trust
	  			// the data in the the NMEA sentence
	  			if (strstr(smNmbr, hex) != NULL) {
 800294c:	f107 020c 	add.w	r2, r7, #12
 8002950:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f00e f9f3 	bl	8010d42 <strstr>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 81d7 	beq.w	8002d12 <GPS+0x4e6>
	  				cnt = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	f887 32cb 	strb.w	r3, [r7, #715]	; 0x2cb
	  				// splitting the good NMEA sentence into the tokens by the comma delimiter
	  				for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 800296a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800296e:	4923      	ldr	r1, [pc, #140]	; (80029fc <GPS+0x1d0>)
 8002970:	4618      	mov	r0, r3
 8002972:	f00f f82f 	bl	80119d4 <strtok>
 8002976:	f8c7 02c4 	str.w	r0, [r7, #708]	; 0x2c4
 800297a:	e054      	b.n	8002a26 <GPS+0x1fa>
	  					/*
	  					memset(txBuffer,0,sizeof(txBuffer));
	  					sprintf(txBuffer,"pV[%d] : %s\n",cnt, pV);
	  					HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 100);
	  					*/
	  					switch (cnt) {
 800297c:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8002980:	3b01      	subs	r3, #1
 8002982:	2b04      	cmp	r3, #4
 8002984:	d844      	bhi.n	8002a10 <GPS+0x1e4>
 8002986:	a201      	add	r2, pc, #4	; (adr r2, 800298c <GPS+0x160>)
 8002988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298c:	080029a1 	.word	0x080029a1
 8002990:	080029b1 	.word	0x080029b1
 8002994:	080029c1 	.word	0x080029c1
 8002998:	080029d1 	.word	0x080029d1
 800299c:	08002a01 	.word	0x08002a01
	  						case 1:
	  							  utcRaw = strdup(pV);
 80029a0:	f8d7 02c4 	ldr.w	r0, [r7, #708]	; 0x2c4
 80029a4:	f00e f998 	bl	8010cd8 <strdup>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
	  							  break;
 80029ae:	e02f      	b.n	8002a10 <GPS+0x1e4>
	  						case 2:
	  							  latRaw = strdup(pV);
 80029b0:	f8d7 02c4 	ldr.w	r0, [r7, #708]	; 0x2c4
 80029b4:	f00e f990 	bl	8010cd8 <strdup>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
	  							  break;
 80029be:	e027      	b.n	8002a10 <GPS+0x1e4>
	  						case 3:
	  							  hemNS = strdup(pV);
 80029c0:	f8d7 02c4 	ldr.w	r0, [r7, #708]	; 0x2c4
 80029c4:	f00e f988 	bl	8010cd8 <strdup>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
	  							  break;
 80029ce:	e01f      	b.n	8002a10 <GPS+0x1e4>
	  						case 4:
	  							  lonRaw = strdup(pV);
 80029d0:	f8d7 02c4 	ldr.w	r0, [r7, #708]	; 0x2c4
 80029d4:	f00e f980 	bl	8010cd8 <strdup>
 80029d8:	4603      	mov	r3, r0
 80029da:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
	  							  break;
 80029de:	e017      	b.n	8002a10 <GPS+0x1e4>
 80029e0:	200079fc 	.word	0x200079fc
 80029e4:	08016264 	.word	0x08016264
 80029e8:	20008c50 	.word	0x20008c50
 80029ec:	20000290 	.word	0x20000290
 80029f0:	0801626c 	.word	0x0801626c
 80029f4:	08016270 	.word	0x08016270
 80029f8:	08016278 	.word	0x08016278
 80029fc:	0801627c 	.word	0x0801627c
	  						case 5:
	  							  hemEW = strdup(pV);
 8002a00:	f8d7 02c4 	ldr.w	r0, [r7, #708]	; 0x2c4
 8002a04:	f00e f968 	bl	8010cd8 <strdup>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	  							  break;
 8002a0e:	bf00      	nop
	  					}
	  					cnt++;
 8002a10:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8002a14:	3301      	adds	r3, #1
 8002a16:	f887 32cb 	strb.w	r3, [r7, #715]	; 0x2cb
	  				for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8002a1a:	49d9      	ldr	r1, [pc, #868]	; (8002d80 <GPS+0x554>)
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f00e ffd9 	bl	80119d4 <strtok>
 8002a22:	f8c7 02c4 	str.w	r0, [r7, #708]	; 0x2c4
 8002a26:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1a6      	bne.n	800297c <GPS+0x150>
	  				} //end for

	  				//Converting Longitude and Latitude into Float
	  				latitude = atof(latRaw);
 8002a2e:	f8d7 02dc 	ldr.w	r0, [r7, #732]	; 0x2dc
 8002a32:	f00d fc2b 	bl	801028c <atof>
 8002a36:	eeb0 7a40 	vmov.f32	s14, s0
 8002a3a:	eef0 7a60 	vmov.f32	s15, s1
 8002a3e:	4bd1      	ldr	r3, [pc, #836]	; (8002d84 <GPS+0x558>)
 8002a40:	ed83 7b00 	vstr	d7, [r3]
	  				longitude = atof(lonRaw);
 8002a44:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 8002a48:	f00d fc20 	bl	801028c <atof>
 8002a4c:	eeb0 7a40 	vmov.f32	s14, s0
 8002a50:	eef0 7a60 	vmov.f32	s15, s1
 8002a54:	4bcc      	ldr	r3, [pc, #816]	; (8002d88 <GPS+0x55c>)
 8002a56:	ed83 7b00 	vstr	d7, [r3]

	  				if (*hemNS == 'S') {
 8002a5a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b53      	cmp	r3, #83	; 0x53
 8002a62:	d108      	bne.n	8002a76 <GPS+0x24a>
	  					latitude  *= -1.0;
 8002a64:	4bc7      	ldr	r3, [pc, #796]	; (8002d84 <GPS+0x558>)
 8002a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6a:	4614      	mov	r4, r2
 8002a6c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002a70:	4bc4      	ldr	r3, [pc, #784]	; (8002d84 <GPS+0x558>)
 8002a72:	e9c3 4500 	strd	r4, r5, [r3]
	  				}
	  				if (*hemEW == 'W') {
 8002a76:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b57      	cmp	r3, #87	; 0x57
 8002a7e:	d108      	bne.n	8002a92 <GPS+0x266>
	  					longitude *= -1.0;
 8002a80:	4bc1      	ldr	r3, [pc, #772]	; (8002d88 <GPS+0x55c>)
 8002a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a86:	4690      	mov	r8, r2
 8002a88:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002a8c:	4bbe      	ldr	r3, [pc, #760]	; (8002d88 <GPS+0x55c>)
 8002a8e:	e9c3 8900 	strd	r8, r9, [r3]
	  				}
	  				char * token;

	  				//Get LatitudeDegree
	  				token = strtok(latRaw, ".");
 8002a92:	49be      	ldr	r1, [pc, #760]	; (8002d8c <GPS+0x560>)
 8002a94:	f8d7 02dc 	ldr.w	r0, [r7, #732]	; 0x2dc
 8002a98:	f00e ff9c 	bl	80119d4 <strtok>
 8002a9c:	f8c7 02b4 	str.w	r0, [r7, #692]	; 0x2b4
	  				memset(latDg, 0, sizeof(latDg));
 8002aa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002aa4:	220a      	movs	r2, #10
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f00d fc2b 	bl	8010304 <memset>
	  				sprintf(latDg, token);
 8002aae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ab2:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f00e f8ca 	bl	8010c50 <siprintf>

	  				//Get Minutes
	  				token = strtok(NULL,".");
 8002abc:	49b3      	ldr	r1, [pc, #716]	; (8002d8c <GPS+0x560>)
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f00e ff88 	bl	80119d4 <strtok>
 8002ac4:	f8c7 02b4 	str.w	r0, [r7, #692]	; 0x2b4
	  				memset(latMS, 0, sizeof(latMS));
 8002ac8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002acc:	2214      	movs	r2, #20
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f00d fc17 	bl	8010304 <memset>
	  				sprintf(latMS, token);
 8002ad6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ada:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f00e f8b6 	bl	8010c50 <siprintf>

	  				//Get longitude Degree
	  				float degrees = trunc(latitude / 100.0f);
 8002ae4:	4ba7      	ldr	r3, [pc, #668]	; (8002d84 <GPS+0x558>)
 8002ae6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	4ba8      	ldr	r3, [pc, #672]	; (8002d90 <GPS+0x564>)
 8002af0:	f7fd feb4 	bl	800085c <__aeabi_ddiv>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	ec43 2b17 	vmov	d7, r2, r3
 8002afc:	eeb0 0a47 	vmov.f32	s0, s14
 8002b00:	eef0 0a67 	vmov.f32	s1, s15
 8002b04:	f011 ff68 	bl	80149d8 <trunc>
 8002b08:	ec53 2b10 	vmov	r2, r3, d0
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f7fe f872 	bl	8000bf8 <__aeabi_d2f>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
	  				float minutes = latitude - (degrees * 100.0f);
 8002b1a:	4b9a      	ldr	r3, [pc, #616]	; (8002d84 <GPS+0x558>)
 8002b1c:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8002b20:	edd7 7aac 	vldr	s15, [r7, #688]	; 0x2b0
 8002b24:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002d94 <GPS+0x568>
 8002b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b2c:	ee17 0a90 	vmov	r0, s15
 8002b30:	f7fd fd12 	bl	8000558 <__aeabi_f2d>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4650      	mov	r0, sl
 8002b3a:	4659      	mov	r1, fp
 8002b3c:	f7fd fbac 	bl	8000298 <__aeabi_dsub>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	f7fe f856 	bl	8000bf8 <__aeabi_d2f>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
	  				latitude = degrees + (minutes / 60.0f);
 8002b52:	edd7 7aab 	vldr	s15, [r7, #684]	; 0x2ac
 8002b56:	eddf 6a90 	vldr	s13, [pc, #576]	; 8002d98 <GPS+0x56c>
 8002b5a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b5e:	edd7 7aac 	vldr	s15, [r7, #688]	; 0x2b0
 8002b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b66:	ee17 0a90 	vmov	r0, s15
 8002b6a:	f7fd fcf5 	bl	8000558 <__aeabi_f2d>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4984      	ldr	r1, [pc, #528]	; (8002d84 <GPS+0x558>)
 8002b74:	e9c1 2300 	strd	r2, r3, [r1]

	  				degrees = trunc(longitude / 100.0f);
 8002b78:	4b83      	ldr	r3, [pc, #524]	; (8002d88 <GPS+0x55c>)
 8002b7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	4b83      	ldr	r3, [pc, #524]	; (8002d90 <GPS+0x564>)
 8002b84:	f7fd fe6a 	bl	800085c <__aeabi_ddiv>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	ec43 2b17 	vmov	d7, r2, r3
 8002b90:	eeb0 0a47 	vmov.f32	s0, s14
 8002b94:	eef0 0a67 	vmov.f32	s1, s15
 8002b98:	f011 ff1e 	bl	80149d8 <trunc>
 8002b9c:	ec53 2b10 	vmov	r2, r3, d0
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f7fe f828 	bl	8000bf8 <__aeabi_d2f>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
	  				minutes = longitude - (degrees * 100.0f);
 8002bae:	4b76      	ldr	r3, [pc, #472]	; (8002d88 <GPS+0x55c>)
 8002bb0:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8002bb4:	edd7 7aac 	vldr	s15, [r7, #688]	; 0x2b0
 8002bb8:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002d94 <GPS+0x568>
 8002bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc0:	ee17 0a90 	vmov	r0, s15
 8002bc4:	f7fd fcc8 	bl	8000558 <__aeabi_f2d>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4650      	mov	r0, sl
 8002bce:	4659      	mov	r1, fp
 8002bd0:	f7fd fb62 	bl	8000298 <__aeabi_dsub>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f7fe f80c 	bl	8000bf8 <__aeabi_d2f>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
	  				longitude = degrees + (minutes / 60.0f);
 8002be6:	edd7 7aab 	vldr	s15, [r7, #684]	; 0x2ac
 8002bea:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8002d98 <GPS+0x56c>
 8002bee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bf2:	edd7 7aac 	vldr	s15, [r7, #688]	; 0x2b0
 8002bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfa:	ee17 0a90 	vmov	r0, s15
 8002bfe:	f7fd fcab 	bl	8000558 <__aeabi_f2d>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4960      	ldr	r1, [pc, #384]	; (8002d88 <GPS+0x55c>)
 8002c08:	e9c1 2300 	strd	r2, r3, [r1]


	  				token = strtok(lonRaw, ".");
 8002c0c:	495f      	ldr	r1, [pc, #380]	; (8002d8c <GPS+0x560>)
 8002c0e:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 8002c12:	f00e fedf 	bl	80119d4 <strtok>
 8002c16:	f8c7 02b4 	str.w	r0, [r7, #692]	; 0x2b4
	  				memset(lonDg, 0, sizeof(lonDg));
 8002c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c1e:	220a      	movs	r2, #10
 8002c20:	2100      	movs	r1, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f00d fb6e 	bl	8010304 <memset>
	  				memcpy(lonDg, token, strlen(token));
 8002c28:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8002c2c:	f7fd fad8 	bl	80001e0 <strlen>
 8002c30:	4602      	mov	r2, r0
 8002c32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c36:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f00d fb54 	bl	80102e8 <memcpy>

	  				token = strtok(NULL, ".");
 8002c40:	4952      	ldr	r1, [pc, #328]	; (8002d8c <GPS+0x560>)
 8002c42:	2000      	movs	r0, #0
 8002c44:	f00e fec6 	bl	80119d4 <strtok>
 8002c48:	f8c7 02b4 	str.w	r0, [r7, #692]	; 0x2b4
	  				memset(lonMS, 0, sizeof(lonMS));
 8002c4c:	f107 0320 	add.w	r3, r7, #32
 8002c50:	220a      	movs	r2, #10
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f00d fb55 	bl	8010304 <memset>
	  				memcpy(lonMS, token, strlen(token));
 8002c5a:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8002c5e:	f7fd fabf 	bl	80001e0 <strlen>
 8002c62:	4602      	mov	r2, r0
 8002c64:	f107 0320 	add.w	r3, r7, #32
 8002c68:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f00d fb3b 	bl	80102e8 <memcpy>
 8002c72:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	b29a      	uxth	r2, r3

	  				//converting the UTC time in the hh:mm:ss format
	  				memcpy(hH, &utcRaw[0], 2);
 8002c7a:	f107 031c 	add.w	r3, r7, #28
 8002c7e:	801a      	strh	r2, [r3, #0]
	  				hH[2] = '\0';
 8002c80:	f107 031c 	add.w	r3, r7, #28
 8002c84:	2200      	movs	r2, #0
 8002c86:	709a      	strb	r2, [r3, #2]

	  				memcpy(mM, &utcRaw[2], 2);
 8002c88:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	f107 0318 	add.w	r3, r7, #24
 8002c96:	801a      	strh	r2, [r3, #0]
	  				mM[2] = '\0';
 8002c98:	f107 0318 	add.w	r3, r7, #24
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	709a      	strb	r2, [r3, #2]

	  				memcpy(sS, &utcRaw[4], 2);
 8002ca0:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	f107 0314 	add.w	r3, r7, #20
 8002cae:	801a      	strh	r2, [r3, #0]
	  				sS[2] = '\0';
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	709a      	strb	r2, [r3, #2]
//	  				float latDg_f = atof(latDg)/100.0;
//	  				float latMS_f = atof(latMS)/60.0;
//	  				float lonDg_f = atof(lonDg)/100.0;
//	  				float lonMS_f = atof(lonMS)/60.0;

	  				strcpy(strUTC, hH);
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4837      	ldr	r0, [pc, #220]	; (8002d9c <GPS+0x570>)
 8002cc0:	f00e f802 	bl	8010cc8 <strcpy>
	  				strcat(strUTC, ":");
 8002cc4:	4835      	ldr	r0, [pc, #212]	; (8002d9c <GPS+0x570>)
 8002cc6:	f7fd fa8b 	bl	80001e0 <strlen>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b33      	ldr	r3, [pc, #204]	; (8002d9c <GPS+0x570>)
 8002cd0:	4413      	add	r3, r2
 8002cd2:	4933      	ldr	r1, [pc, #204]	; (8002da0 <GPS+0x574>)
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	8013      	strh	r3, [r2, #0]
	  				strcat(strUTC, mM);
 8002cdc:	f107 0318 	add.w	r3, r7, #24
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	482e      	ldr	r0, [pc, #184]	; (8002d9c <GPS+0x570>)
 8002ce4:	f00d ffd4 	bl	8010c90 <strcat>
	  				strcat(strUTC, ":");
 8002ce8:	482c      	ldr	r0, [pc, #176]	; (8002d9c <GPS+0x570>)
 8002cea:	f7fd fa79 	bl	80001e0 <strlen>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b2a      	ldr	r3, [pc, #168]	; (8002d9c <GPS+0x570>)
 8002cf4:	4413      	add	r3, r2
 8002cf6:	492a      	ldr	r1, [pc, #168]	; (8002da0 <GPS+0x574>)
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	8013      	strh	r3, [r2, #0]
	  				strcat(strUTC, sS);
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	4619      	mov	r1, r3
 8002d06:	4825      	ldr	r0, [pc, #148]	; (8002d9c <GPS+0x570>)
 8002d08:	f00d ffc2 	bl	8010c90 <strcat>
	  				strUTC[8] = '\0';
 8002d0c:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <GPS+0x570>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	721a      	strb	r2, [r3, #8]
	  	while ((token = strsep(&string, "\n")) != NULL) {
 8002d12:	f107 0310 	add.w	r3, r7, #16
 8002d16:	4923      	ldr	r1, [pc, #140]	; (8002da4 <GPS+0x578>)
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f00e f80d 	bl	8010d38 <strsep>
 8002d1e:	f8c7 02c0 	str.w	r0, [r7, #704]	; 0x2c0
 8002d22:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f47f adb7 	bne.w	800289a <GPS+0x6e>
	  				HAL_UART_Transmit(&huart2, (unsigned char *)txBuffer, sizeof(txBuffer), 100);
					*/
	  			} //end of the chekcsum data verification
	  		} //end of %GPPGA Sentences selection
	  	}// end of splotting the buffstr by the "\n" delimiter with strsep() c function
	  	flag = 0;
 8002d2c:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <GPS+0x57c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]

	  	//Calculate Distance
	  	GPS_distance = distance_on_geoid(prev_latitude, prev_longitude, latitude, longitude);
 8002d32:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <GPS+0x580>)
 8002d34:	ed93 7b00 	vldr	d7, [r3]
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <GPS+0x584>)
 8002d3a:	ed93 6b00 	vldr	d6, [r3]
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <GPS+0x558>)
 8002d40:	ed93 5b00 	vldr	d5, [r3]
 8002d44:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <GPS+0x55c>)
 8002d46:	ed93 4b00 	vldr	d4, [r3]
 8002d4a:	eeb0 3a44 	vmov.f32	s6, s8
 8002d4e:	eef0 3a64 	vmov.f32	s7, s9
 8002d52:	eeb0 2a45 	vmov.f32	s4, s10
 8002d56:	eef0 2a65 	vmov.f32	s5, s11
 8002d5a:	eeb0 1a46 	vmov.f32	s2, s12
 8002d5e:	eef0 1a66 	vmov.f32	s3, s13
 8002d62:	eeb0 0a47 	vmov.f32	s0, s14
 8002d66:	eef0 0a67 	vmov.f32	s1, s15
 8002d6a:	f7fe fecd 	bl	8001b08 <distance_on_geoid>
 8002d6e:	eeb0 7a40 	vmov.f32	s14, s0
 8002d72:	eef0 7a60 	vmov.f32	s15, s1
 8002d76:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <GPS+0x588>)
 8002d78:	ed83 7b00 	vstr	d7, [r3]
	  	GPS_speed    = (double) (GPS_distance/GPS_TS)*1000; //ms to s
 8002d7c:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <GPS+0x588>)
 8002d7e:	e01b      	b.n	8002db8 <GPS+0x58c>
 8002d80:	0801627c 	.word	0x0801627c
 8002d84:	20007be8 	.word	0x20007be8
 8002d88:	20007ab8 	.word	0x20007ab8
 8002d8c:	08016280 	.word	0x08016280
 8002d90:	40590000 	.word	0x40590000
 8002d94:	42c80000 	.word	0x42c80000
 8002d98:	42700000 	.word	0x42700000
 8002d9c:	20000288 	.word	0x20000288
 8002da0:	08016284 	.word	0x08016284
 8002da4:	08016288 	.word	0x08016288
 8002da8:	20000290 	.word	0x20000290
 8002dac:	20000278 	.word	0x20000278
 8002db0:	20000280 	.word	0x20000280
 8002db4:	20007878 	.word	0x20007878
 8002db8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <GPS+0x614>)
 8002dc2:	f7fd fd4b 	bl	800085c <__aeabi_ddiv>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <GPS+0x618>)
 8002dd4:	f7fd fc18 	bl	8000608 <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	491a      	ldr	r1, [pc, #104]	; (8002e48 <GPS+0x61c>)
 8002dde:	e9c1 2300 	strd	r2, r3, [r1]

	  	//Update previous location
	  	prev_latitude = latitude;
 8002de2:	4b1a      	ldr	r3, [pc, #104]	; (8002e4c <GPS+0x620>)
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	4919      	ldr	r1, [pc, #100]	; (8002e50 <GPS+0x624>)
 8002dea:	e9c1 2300 	strd	r2, r3, [r1]
	  	prev_longitude = longitude;
 8002dee:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <GPS+0x628>)
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	4918      	ldr	r1, [pc, #96]	; (8002e58 <GPS+0x62c>)
 8002df6:	e9c1 2300 	strd	r2, r3, [r1]
 8002dfa:	e01b      	b.n	8002e34 <GPS+0x608>
	  }
	  else {
		  GPS_distance = 0;
 8002dfc:	4917      	ldr	r1, [pc, #92]	; (8002e5c <GPS+0x630>)
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	e9c1 2300 	strd	r2, r3, [r1]
		  latitude = 0;
 8002e0a:	4910      	ldr	r1, [pc, #64]	; (8002e4c <GPS+0x620>)
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9c1 2300 	strd	r2, r3, [r1]
		  longitude = 0;
 8002e18:	490e      	ldr	r1, [pc, #56]	; (8002e54 <GPS+0x628>)
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	e9c1 2300 	strd	r2, r3, [r1]
		  GPS_speed = 0;
 8002e26:	4908      	ldr	r1, [pc, #32]	; (8002e48 <GPS+0x61c>)
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9c1 2300 	strd	r2, r3, [r1]
//		  sprintf(txBuffer," GPS no signal..");
//		  HAL_UART_Transmit(&huart2, (uint8_t *) txBuffer, sizeof(txBuffer), 100);
	  }
	  osDelay(GPS_TS);
 8002e34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e38:	f009 fd80 	bl	800c93c <osDelay>
	  if (flag) {
 8002e3c:	e50e      	b.n	800285c <GPS+0x30>
 8002e3e:	bf00      	nop
 8002e40:	407f4000 	.word	0x407f4000
 8002e44:	408f4000 	.word	0x408f4000
 8002e48:	20007740 	.word	0x20007740
 8002e4c:	20007be8 	.word	0x20007be8
 8002e50:	20000278 	.word	0x20000278
 8002e54:	20007ab8 	.word	0x20007ab8
 8002e58:	20000280 	.word	0x20000280
 8002e5c:	20007878 	.word	0x20007878

08002e60 <RFID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RFID */
void RFID(void *argument)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b0a5      	sub	sp, #148	; 0x94
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RFID */

	char txBuffer [100] ={};
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	f107 0320 	add.w	r3, r7, #32
 8002e70:	2260      	movs	r2, #96	; 0x60
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f00d fa45 	bl	8010304 <memset>
	u_char status, cardstr[MAX_LEN];
//	u_char checksum

	osMutexAcquire(MutexSPI1Handle, portMAX_DELAY);
 8002e7a:	4b5c      	ldr	r3, [pc, #368]	; (8002fec <RFID+0x18c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f04f 31ff 	mov.w	r1, #4294967295
 8002e82:	4618      	mov	r0, r3
 8002e84:	f009 fdfb 	bl	800ca7e <osMutexAcquire>

	MFRC522_Init();
 8002e88:	f7fe f9b8 	bl	80011fc <MFRC522_Init>
	status = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	while (status == 0){
 8002e92:	e018      	b.n	8002ec6 <RFID+0x66>
		status = Read_MFRC522(VersionReg);
 8002e94:	2037      	movs	r0, #55	; 0x37
 8002e96:	f7fe f931 	bl	80010fc <Read_MFRC522>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		sprintf(txBuffer,"Running RC522 ver :%x\n", status);
 8002ea0:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002ea4:	f107 031c 	add.w	r3, r7, #28
 8002ea8:	4951      	ldr	r1, [pc, #324]	; (8002ff0 <RFID+0x190>)
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f00d fed0 	bl	8010c50 <siprintf>
		HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
 8002eb0:	f107 011c 	add.w	r1, r7, #28
 8002eb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002eb8:	2264      	movs	r2, #100	; 0x64
 8002eba:	484e      	ldr	r0, [pc, #312]	; (8002ff4 <RFID+0x194>)
 8002ebc:	f005 f9ed 	bl	800829a <HAL_UART_Transmit>
		osDelay(100);
 8002ec0:	2064      	movs	r0, #100	; 0x64
 8002ec2:	f009 fd3b 	bl	800c93c <osDelay>
	while (status == 0){
 8002ec6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0e2      	beq.n	8002e94 <RFID+0x34>
	}
	osMutexRelease(MutexSPI1Handle);
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <RFID+0x18c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f009 fe1e 	bl	800cb14 <osMutexRelease>
	//Printing to PC
	memset(txBuffer,0,sizeof(txBuffer));
 8002ed8:	f107 031c 	add.w	r3, r7, #28
 8002edc:	2264      	movs	r2, #100	; 0x64
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f00d fa0f 	bl	8010304 <memset>
	status = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	osDelay(200);
 8002eec:	20c8      	movs	r0, #200	; 0xc8
 8002eee:	f009 fd25 	bl	800c93c <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexSPI1Handle, portMAX_DELAY);
 8002ef2:	4b3e      	ldr	r3, [pc, #248]	; (8002fec <RFID+0x18c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f04f 31ff 	mov.w	r1, #4294967295
 8002efa:	4618      	mov	r0, r3
 8002efc:	f009 fdbf 	bl	800ca7e <osMutexAcquire>
	  status = MFRC522_Request(PICC_REQIDL, cardstr);
 8002f00:	f107 030c 	add.w	r3, r7, #12
 8002f04:	4619      	mov	r1, r3
 8002f06:	2026      	movs	r0, #38	; 0x26
 8002f08:	f7fe f9a4 	bl	8001254 <MFRC522_Request>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	  if(status == MI_OK){
 8002f12:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d150      	bne.n	8002fbc <RFID+0x15c>
		  sprintf(txBuffer,"Card detected ..\n");
 8002f1a:	f107 031c 	add.w	r3, r7, #28
 8002f1e:	4936      	ldr	r1, [pc, #216]	; (8002ff8 <RFID+0x198>)
 8002f20:	4618      	mov	r0, r3
 8002f22:	f00d fe95 	bl	8010c50 <siprintf>
		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 8002f26:	f107 011c 	add.w	r1, r7, #28
 8002f2a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002f2e:	2264      	movs	r2, #100	; 0x64
 8002f30:	4830      	ldr	r0, [pc, #192]	; (8002ff4 <RFID+0x194>)
 8002f32:	f005 f9b2 	bl	800829a <HAL_UART_Transmit>
//		  sprintf(txBuffer,"Card Type : %x %x %x\n", cardstr[0],cardstr[1],cardstr[2]);
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
		  memset(txBuffer,0,sizeof(txBuffer));
 8002f36:	f107 031c 	add.w	r3, r7, #28
 8002f3a:	2264      	movs	r2, #100	; 0x64
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f00d f9e0 	bl	8010304 <memset>

		  //Anti-collision, return card serial number == 4 bytes
		  status = MFRC522_Anticoll(cardstr);
 8002f44:	f107 030c 	add.w	r3, r7, #12
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fe fa71 	bl	8001430 <MFRC522_Anticoll>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  if (status == MI_OK){
 8002f54:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d13e      	bne.n	8002fda <RFID+0x17a>
//			  checksum1 = cardstr[0] ^ cardstr[1] ^ cardstr[2] ^ cardstr[3];
			  for(int i = 0; i <4 ;i++){
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f62:	e010      	b.n	8002f86 <RFID+0x126>
				  UID[i]=cardstr[i];
 8002f64:	f107 020c 	add.w	r2, r7, #12
 8002f68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f6c:	4413      	add	r3, r2
 8002f6e:	7819      	ldrb	r1, [r3, #0]
 8002f70:	4a22      	ldr	r2, [pc, #136]	; (8002ffc <RFID+0x19c>)
 8002f72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f76:	4413      	add	r3, r2
 8002f78:	460a      	mov	r2, r1
 8002f7a:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i <4 ;i++){
 8002f7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f80:	3301      	adds	r3, #1
 8002f82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	ddea      	ble.n	8002f64 <RFID+0x104>
			  }
			  sprintf(txBuffer,"UID: %x %x %x %x\n\r",(u_char)cardstr[0], (u_char)cardstr[1],(u_char)cardstr[2],(u_char)cardstr[3]);
 8002f8e:	7b3b      	ldrb	r3, [r7, #12]
 8002f90:	4619      	mov	r1, r3
 8002f92:	7b7b      	ldrb	r3, [r7, #13]
 8002f94:	461c      	mov	r4, r3
 8002f96:	7bbb      	ldrb	r3, [r7, #14]
 8002f98:	7bfa      	ldrb	r2, [r7, #15]
 8002f9a:	f107 001c 	add.w	r0, r7, #28
 8002f9e:	9201      	str	r2, [sp, #4]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	4623      	mov	r3, r4
 8002fa4:	460a      	mov	r2, r1
 8002fa6:	4916      	ldr	r1, [pc, #88]	; (8003000 <RFID+0x1a0>)
 8002fa8:	f00d fe52 	bl	8010c50 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
 8002fac:	f107 011c 	add.w	r1, r7, #28
 8002fb0:	2364      	movs	r3, #100	; 0x64
 8002fb2:	2264      	movs	r2, #100	; 0x64
 8002fb4:	480f      	ldr	r0, [pc, #60]	; (8002ff4 <RFID+0x194>)
 8002fb6:	f005 f970 	bl	800829a <HAL_UART_Transmit>
 8002fba:	e00e      	b.n	8002fda <RFID+0x17a>
		  }
	  }
	  else {
		  memset(txBuffer,0,sizeof(txBuffer));
 8002fbc:	f107 031c 	add.w	r3, r7, #28
 8002fc0:	2264      	movs	r2, #100	; 0x64
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f00d f99d 	bl	8010304 <memset>
		  sprintf(txBuffer,"Status :%x\n", status);
 8002fca:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002fce:	f107 031c 	add.w	r3, r7, #28
 8002fd2:	490c      	ldr	r1, [pc, #48]	; (8003004 <RFID+0x1a4>)
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f00d fe3b 	bl	8010c50 <siprintf>
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
		  //		  sprintf(txBuffer,"Finding ..\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
	  }
	  osMutexRelease(MutexSPI1Handle);
 8002fda:	4b04      	ldr	r3, [pc, #16]	; (8002fec <RFID+0x18c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f009 fd98 	bl	800cb14 <osMutexRelease>
    osDelay(250);
 8002fe4:	20fa      	movs	r0, #250	; 0xfa
 8002fe6:	f009 fca9 	bl	800c93c <osDelay>
	  osMutexAcquire(MutexSPI1Handle, portMAX_DELAY);
 8002fea:	e782      	b.n	8002ef2 <RFID+0x92>
 8002fec:	200077a0 	.word	0x200077a0
 8002ff0:	0801628c 	.word	0x0801628c
 8002ff4:	20008c50 	.word	0x20008c50
 8002ff8:	080162a4 	.word	0x080162a4
 8002ffc:	20000270 	.word	0x20000270
 8003000:	080162b8 	.word	0x080162b8
 8003004:	080162cc 	.word	0x080162cc

08003008 <SDCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SDCard */
void SDCard(void *argument)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b0a0      	sub	sp, #128	; 0x80
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDCard */
	osMutexAcquire(MutexSPI1Handle, portMAX_DELAY);
 8003010:	4b6f      	ldr	r3, [pc, #444]	; (80031d0 <SDCard+0x1c8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f04f 31ff 	mov.w	r1, #4294967295
 8003018:	4618      	mov	r0, r3
 800301a:	f009 fd30 	bl	800ca7e <osMutexAcquire>
	osDelay(pdMS_TO_TICKS(2000));
 800301e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003022:	f009 fc8b 	bl	800c93c <osDelay>
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8003026:	2201      	movs	r2, #1
 8003028:	496a      	ldr	r1, [pc, #424]	; (80031d4 <SDCard+0x1cc>)
 800302a:	486b      	ldr	r0, [pc, #428]	; (80031d8 <SDCard+0x1d0>)
 800302c:	f008 fbd8 	bl	800b7e0 <f_mount>
 8003030:	4603      	mov	r3, r0
 8003032:	461a      	mov	r2, r3
 8003034:	4b69      	ldr	r3, [pc, #420]	; (80031dc <SDCard+0x1d4>)
 8003036:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8003038:	4b68      	ldr	r3, [pc, #416]	; (80031dc <SDCard+0x1d4>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00a      	beq.n	8003056 <SDCard+0x4e>
		myprintf("f_mount error (%i)\r\n", fres);
 8003040:	4b66      	ldr	r3, [pc, #408]	; (80031dc <SDCard+0x1d4>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	4619      	mov	r1, r3
 8003046:	4866      	ldr	r0, [pc, #408]	; (80031e0 <SDCard+0x1d8>)
 8003048:	f7fe fd36 	bl	8001ab8 <myprintf>
		osMutexRelease(MutexSPI1Handle);
 800304c:	4b60      	ldr	r3, [pc, #384]	; (80031d0 <SDCard+0x1c8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f009 fd5f 	bl	800cb14 <osMutexRelease>
	}

    fres = f_getfree("", &free_clusters, &getFreeFs);
 8003056:	4a63      	ldr	r2, [pc, #396]	; (80031e4 <SDCard+0x1dc>)
 8003058:	4963      	ldr	r1, [pc, #396]	; (80031e8 <SDCard+0x1e0>)
 800305a:	485e      	ldr	r0, [pc, #376]	; (80031d4 <SDCard+0x1cc>)
 800305c:	f009 f9b3 	bl	800c3c6 <f_getfree>
 8003060:	4603      	mov	r3, r0
 8003062:	461a      	mov	r2, r3
 8003064:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <SDCard+0x1d4>)
 8003066:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 8003068:	4b5c      	ldr	r3, [pc, #368]	; (80031dc <SDCard+0x1d4>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <SDCard+0x7e>
    	myprintf("f_getfree error (%i)\r\n", fres);
 8003070:	4b5a      	ldr	r3, [pc, #360]	; (80031dc <SDCard+0x1d4>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	4619      	mov	r1, r3
 8003076:	485d      	ldr	r0, [pc, #372]	; (80031ec <SDCard+0x1e4>)
 8003078:	f7fe fd1e 	bl	8001ab8 <myprintf>
    	osMutexRelease(MutexSPI1Handle);
 800307c:	4b54      	ldr	r3, [pc, #336]	; (80031d0 <SDCard+0x1c8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f009 fd47 	bl	800cb14 <osMutexRelease>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8003086:	4b57      	ldr	r3, [pc, #348]	; (80031e4 <SDCard+0x1dc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	3b02      	subs	r3, #2
 800308e:	4a55      	ldr	r2, [pc, #340]	; (80031e4 <SDCard+0x1dc>)
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	8952      	ldrh	r2, [r2, #10]
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	4a55      	ldr	r2, [pc, #340]	; (80031f0 <SDCard+0x1e8>)
 800309a:	6013      	str	r3, [r2, #0]
    free_sectors = free_clusters * getFreeFs->csize;
 800309c:	4b51      	ldr	r3, [pc, #324]	; (80031e4 <SDCard+0x1dc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	895b      	ldrh	r3, [r3, #10]
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b50      	ldr	r3, [pc, #320]	; (80031e8 <SDCard+0x1e0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	fb03 f302 	mul.w	r3, r3, r2
 80030ac:	4a51      	ldr	r2, [pc, #324]	; (80031f4 <SDCard+0x1ec>)
 80030ae:	6013      	str	r3, [r2, #0]

    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80030b0:	4b4f      	ldr	r3, [pc, #316]	; (80031f0 <SDCard+0x1e8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	0859      	lsrs	r1, r3, #1
 80030b6:	4b4f      	ldr	r3, [pc, #316]	; (80031f4 <SDCard+0x1ec>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	461a      	mov	r2, r3
 80030be:	484e      	ldr	r0, [pc, #312]	; (80031f8 <SDCard+0x1f0>)
 80030c0:	f7fe fcfa 	bl	8001ab8 <myprintf>

    //Now let's try to open file "test.txt"
    fres = f_open(&fil, "tesjson.txt", FA_READ);
 80030c4:	2201      	movs	r2, #1
 80030c6:	494d      	ldr	r1, [pc, #308]	; (80031fc <SDCard+0x1f4>)
 80030c8:	484d      	ldr	r0, [pc, #308]	; (8003200 <SDCard+0x1f8>)
 80030ca:	f008 fbed 	bl	800b8a8 <f_open>
 80030ce:	4603      	mov	r3, r0
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b42      	ldr	r3, [pc, #264]	; (80031dc <SDCard+0x1d4>)
 80030d4:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 80030d6:	4b41      	ldr	r3, [pc, #260]	; (80031dc <SDCard+0x1d4>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <SDCard+0xe6>
    	myprintf("f_open error (%i)\r\n");
 80030de:	4849      	ldr	r0, [pc, #292]	; (8003204 <SDCard+0x1fc>)
 80030e0:	f7fe fcea 	bl	8001ab8 <myprintf>
    	osMutexRelease(MutexSPI1Handle);
 80030e4:	4b3a      	ldr	r3, [pc, #232]	; (80031d0 <SDCard+0x1c8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f009 fd13 	bl	800cb14 <osMutexRelease>
    }
    myprintf("I was able to open 'tesjson.txt' for reading!\r\n");
 80030ee:	4846      	ldr	r0, [pc, #280]	; (8003208 <SDCard+0x200>)
 80030f0:	f7fe fce2 	bl	8001ab8 <myprintf>
    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[100];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 100, &fil);
 80030f4:	f107 0310 	add.w	r3, r7, #16
 80030f8:	4a41      	ldr	r2, [pc, #260]	; (8003200 <SDCard+0x1f8>)
 80030fa:	2164      	movs	r1, #100	; 0x64
 80030fc:	4618      	mov	r0, r3
 80030fe:	f009 fa1e 	bl	800c53e <f_gets>
 8003102:	67f8      	str	r0, [r7, #124]	; 0x7c
    if(rres != 0) {
 8003104:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d006      	beq.n	8003118 <SDCard+0x110>
    	myprintf("Read string from 'tesjson.txt'' contents: %s\r\n", readBuf);
 800310a:	f107 0310 	add.w	r3, r7, #16
 800310e:	4619      	mov	r1, r3
 8003110:	483e      	ldr	r0, [pc, #248]	; (800320c <SDCard+0x204>)
 8003112:	f7fe fcd1 	bl	8001ab8 <myprintf>
 8003116:	e005      	b.n	8003124 <SDCard+0x11c>
    } else {
    	myprintf("f_gets error (%i)\r\n", fres);
 8003118:	4b30      	ldr	r3, [pc, #192]	; (80031dc <SDCard+0x1d4>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	483c      	ldr	r0, [pc, #240]	; (8003210 <SDCard+0x208>)
 8003120:	f7fe fcca 	bl	8001ab8 <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 8003124:	4836      	ldr	r0, [pc, #216]	; (8003200 <SDCard+0x1f8>)
 8003126:	f009 f91f 	bl	800c368 <f_close>

    //Now let's try and write a file "write.txt"
    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800312a:	221a      	movs	r2, #26
 800312c:	4939      	ldr	r1, [pc, #228]	; (8003214 <SDCard+0x20c>)
 800312e:	4834      	ldr	r0, [pc, #208]	; (8003200 <SDCard+0x1f8>)
 8003130:	f008 fbba 	bl	800b8a8 <f_open>
 8003134:	4603      	mov	r3, r0
 8003136:	461a      	mov	r2, r3
 8003138:	4b28      	ldr	r3, [pc, #160]	; (80031dc <SDCard+0x1d4>)
 800313a:	701a      	strb	r2, [r3, #0]
    if(fres == FR_OK) {
 800313c:	4b27      	ldr	r3, [pc, #156]	; (80031dc <SDCard+0x1d4>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d103      	bne.n	800314c <SDCard+0x144>
    	myprintf("I was able to open 'write.txt' for writing\r\n");
 8003144:	4834      	ldr	r0, [pc, #208]	; (8003218 <SDCard+0x210>)
 8003146:	f7fe fcb7 	bl	8001ab8 <myprintf>
 800314a:	e005      	b.n	8003158 <SDCard+0x150>
    } else {
    	myprintf("f_open error (%i)\r\n", fres);
 800314c:	4b23      	ldr	r3, [pc, #140]	; (80031dc <SDCard+0x1d4>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	4619      	mov	r1, r3
 8003152:	482c      	ldr	r0, [pc, #176]	; (8003204 <SDCard+0x1fc>)
 8003154:	f7fe fcb0 	bl	8001ab8 <myprintf>
    }

    //Copy in a string
//    strncpy((char*)readBuf, "a new file is made!", 19);
    char* kirimjson = "{'Lokasi':'-6.914744,107.609810','Time_Stamp':'27 April 2021, 20:22'}" ;
 8003158:	4b30      	ldr	r3, [pc, #192]	; (800321c <SDCard+0x214>)
 800315a:	67bb      	str	r3, [r7, #120]	; 0x78
    uint32_t length_var = strlen(kirimjson);
 800315c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800315e:	f7fd f83f 	bl	80001e0 <strlen>
 8003162:	6778      	str	r0, [r7, #116]	; 0x74
    strncpy((char*)readBuf, kirimjson, length_var);
 8003164:	f107 0310 	add.w	r3, r7, #16
 8003168:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800316a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800316c:	4618      	mov	r0, r3
 800316e:	f00d fdd0 	bl	8010d12 <strncpy>
    UINT bytesWrote;
    fres = f_write(&fil, readBuf, length_var, &bytesWrote);
 8003172:	f107 030c 	add.w	r3, r7, #12
 8003176:	f107 0110 	add.w	r1, r7, #16
 800317a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800317c:	4820      	ldr	r0, [pc, #128]	; (8003200 <SDCard+0x1f8>)
 800317e:	f008 fec6 	bl	800bf0e <f_write>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	4b15      	ldr	r3, [pc, #84]	; (80031dc <SDCard+0x1d4>)
 8003188:	701a      	strb	r2, [r3, #0]
    if(fres == FR_OK) {
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <SDCard+0x1d4>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d105      	bne.n	800319e <SDCard+0x196>
    	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4619      	mov	r1, r3
 8003196:	4822      	ldr	r0, [pc, #136]	; (8003220 <SDCard+0x218>)
 8003198:	f7fe fc8e 	bl	8001ab8 <myprintf>
 800319c:	e002      	b.n	80031a4 <SDCard+0x19c>
    } else {
    	myprintf("f_write error (%i)\r\n");
 800319e:	4821      	ldr	r0, [pc, #132]	; (8003224 <SDCard+0x21c>)
 80031a0:	f7fe fc8a 	bl	8001ab8 <myprintf>
    }
    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 80031a4:	4816      	ldr	r0, [pc, #88]	; (8003200 <SDCard+0x1f8>)
 80031a6:	f009 f8df 	bl	800c368 <f_close>
//    f_unlink("/write.txt"); Buat ngedelete file
    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	4909      	ldr	r1, [pc, #36]	; (80031d4 <SDCard+0x1cc>)
 80031ae:	2000      	movs	r0, #0
 80031b0:	f008 fb16 	bl	800b7e0 <f_mount>

    osMutexRelease(MutexSPI1Handle);
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <SDCard+0x1c8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f009 fcab 	bl	800cb14 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {
	 ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 80031be:	f04f 31ff 	mov.w	r1, #4294967295
 80031c2:	2001      	movs	r0, #1
 80031c4:	f00b ff8a 	bl	800f0dc <ulTaskNotifyTake>

    osDelay(1);
 80031c8:	2001      	movs	r0, #1
 80031ca:	f009 fbb7 	bl	800c93c <osDelay>
	 ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 80031ce:	e7f6      	b.n	80031be <SDCard+0x1b6>
 80031d0:	200077a0 	.word	0x200077a0
 80031d4:	080162d8 	.word	0x080162d8
 80031d8:	20007494 	.word	0x20007494
 80031dc:	20008c98 	.word	0x20008c98
 80031e0:	080162dc 	.word	0x080162dc
 80031e4:	20007870 	.word	0x20007870
 80031e8:	20008f20 	.word	0x20008f20
 80031ec:	080162f4 	.word	0x080162f4
 80031f0:	20008f24 	.word	0x20008f24
 80031f4:	20007880 	.word	0x20007880
 80031f8:	0801630c 	.word	0x0801630c
 80031fc:	08016354 	.word	0x08016354
 8003200:	20008c9c 	.word	0x20008c9c
 8003204:	08016360 	.word	0x08016360
 8003208:	08016374 	.word	0x08016374
 800320c:	080163a4 	.word	0x080163a4
 8003210:	080163d4 	.word	0x080163d4
 8003214:	080163e8 	.word	0x080163e8
 8003218:	080163f4 	.word	0x080163f4
 800321c:	08016424 	.word	0x08016424
 8003220:	0801646c 	.word	0x0801646c
 8003224:	08016490 	.word	0x08016490

08003228 <ADCProcesing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADCProcesing */
void ADCProcesing(void *argument)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b09e      	sub	sp, #120	; 0x78
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADCProcesing */
	char txBuffer[100] = {};
 8003230:	2300      	movs	r3, #0
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	f107 030c 	add.w	r3, r7, #12
 8003238:	2260      	movs	r2, #96	; 0x60
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f00d f861 	bl	8010304 <memset>
	HAL_ADC_Start_DMA(&hadc1, buffer, 3);
 8003242:	2203      	movs	r2, #3
 8003244:	494c      	ldr	r1, [pc, #304]	; (8003378 <ADCProcesing+0x150>)
 8003246:	484d      	ldr	r0, [pc, #308]	; (800337c <ADCProcesing+0x154>)
 8003248:	f001 f90e 	bl	8004468 <HAL_ADC_Start_DMA>
	sprintf(txBuffer,"ADC Intialization..\n");
 800324c:	f107 0308 	add.w	r3, r7, #8
 8003250:	494b      	ldr	r1, [pc, #300]	; (8003380 <ADCProcesing+0x158>)
 8003252:	4618      	mov	r0, r3
 8003254:	f00d fcfc 	bl	8010c50 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 8003258:	f107 0108 	add.w	r1, r7, #8
 800325c:	f04f 33ff 	mov.w	r3, #4294967295
 8003260:	2264      	movs	r2, #100	; 0x64
 8003262:	4848      	ldr	r0, [pc, #288]	; (8003384 <ADCProcesing+0x15c>)
 8003264:	f005 f819 	bl	800829a <HAL_UART_Transmit>

	/* Initialize Input Value */
	float input_fuel, input_accu, input_batt = 0;
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	677b      	str	r3, [r7, #116]	; 0x74

	/* Initialize RC Filter */
	RCFilter_Init(&rcFiltFuel, 5.0f, 100.0f);
 800326e:	eddf 0a46 	vldr	s1, [pc, #280]	; 8003388 <ADCProcesing+0x160>
 8003272:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003276:	4845      	ldr	r0, [pc, #276]	; (800338c <ADCProcesing+0x164>)
 8003278:	f7fe face 	bl	8001818 <RCFilter_Init>

	/*Initialize Moving Average Filter*/
	MovAvgFilter_init(&MAFiltFuel);
 800327c:	4844      	ldr	r0, [pc, #272]	; (8003390 <ADCProcesing+0x168>)
 800327e:	f7fe fb4a 	bl	8001916 <MovAvgFilter_init>
	MovAvgFilter_init(&MAFiltAccu);
 8003282:	4844      	ldr	r0, [pc, #272]	; (8003394 <ADCProcesing+0x16c>)
 8003284:	f7fe fb47 	bl	8001916 <MovAvgFilter_init>
	MovAvgFilter_init(&MAFiltBatt);
 8003288:	4843      	ldr	r0, [pc, #268]	; (8003398 <ADCProcesing+0x170>)
 800328a:	f7fe fb44 	bl	8001916 <MovAvgFilter_init>
	/* Start ADC */
	HAL_ADC_Start_DMA(&hadc1, buffer, 3);
 800328e:	2203      	movs	r2, #3
 8003290:	4939      	ldr	r1, [pc, #228]	; (8003378 <ADCProcesing+0x150>)
 8003292:	483a      	ldr	r0, [pc, #232]	; (800337c <ADCProcesing+0x154>)
 8003294:	f001 f8e8 	bl	8004468 <HAL_ADC_Start_DMA>
	sprintf(txBuffer,"ADC Intialization Success..\n");
 8003298:	f107 0308 	add.w	r3, r7, #8
 800329c:	493f      	ldr	r1, [pc, #252]	; (800339c <ADCProcesing+0x174>)
 800329e:	4618      	mov	r0, r3
 80032a0:	f00d fcd6 	bl	8010c50 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 80032a4:	f107 0108 	add.w	r1, r7, #8
 80032a8:	f04f 33ff 	mov.w	r3, #4294967295
 80032ac:	2264      	movs	r2, #100	; 0x64
 80032ae:	4835      	ldr	r0, [pc, #212]	; (8003384 <ADCProcesing+0x15c>)
 80032b0:	f004 fff3 	bl	800829a <HAL_UART_Transmit>
	osDelay(100);
 80032b4:	2064      	movs	r0, #100	; 0x64
 80032b6:	f009 fb41 	bl	800c93c <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  input_accu = (value[0]/ADC_RESOLUTION) * 13;
 80032ba:	4b39      	ldr	r3, [pc, #228]	; (80033a0 <ADCProcesing+0x178>)
 80032bc:	ed93 7a00 	vldr	s14, [r3]
 80032c0:	eddf 6a38 	vldr	s13, [pc, #224]	; 80033a4 <ADCProcesing+0x17c>
 80032c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032c8:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80032cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032d0:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	  input_batt = (value[1]/ADC_RESOLUTION) * 4.2;
 80032d4:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <ADCProcesing+0x178>)
 80032d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80032da:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80033a4 <ADCProcesing+0x17c>
 80032de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80032e2:	ee16 0a90 	vmov	r0, s13
 80032e6:	f7fd f937 	bl	8000558 <__aeabi_f2d>
 80032ea:	a31f      	add	r3, pc, #124	; (adr r3, 8003368 <ADCProcesing+0x140>)
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	f7fd f98a 	bl	8000608 <__aeabi_dmul>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4610      	mov	r0, r2
 80032fa:	4619      	mov	r1, r3
 80032fc:	f7fd fc7c 	bl	8000bf8 <__aeabi_d2f>
 8003300:	4603      	mov	r3, r0
 8003302:	677b      	str	r3, [r7, #116]	; 0x74
	  input_fuel = (value[2]/ADC_RESOLUTION) * VOLTAGE_REFERENCE;
 8003304:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <ADCProcesing+0x178>)
 8003306:	edd3 7a02 	vldr	s15, [r3, #8]
 800330a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80033a4 <ADCProcesing+0x17c>
 800330e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003312:	ee16 0a90 	vmov	r0, s13
 8003316:	f7fd f91f 	bl	8000558 <__aeabi_f2d>
 800331a:	a315      	add	r3, pc, #84	; (adr r3, 8003370 <ADCProcesing+0x148>)
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	f7fd f972 	bl	8000608 <__aeabi_dmul>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4610      	mov	r0, r2
 800332a:	4619      	mov	r1, r3
 800332c:	f7fd fc64 	bl	8000bf8 <__aeabi_d2f>
 8003330:	4603      	mov	r3, r0
 8003332:	66fb      	str	r3, [r7, #108]	; 0x6c

	  RCFilter_Update(&rcFiltFuel, input_fuel);
 8003334:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8003338:	4814      	ldr	r0, [pc, #80]	; (800338c <ADCProcesing+0x164>)
 800333a:	f7fe fac3 	bl	80018c4 <RCFilter_Update>
	  MovAvgFilter_Update(&MAFiltFuel, input_fuel);
 800333e:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8003342:	4813      	ldr	r0, [pc, #76]	; (8003390 <ADCProcesing+0x168>)
 8003344:	f7fe fb08 	bl	8001958 <MovAvgFilter_Update>
	  MovAvgFilter_Update(&MAFiltAccu, input_accu);
 8003348:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 800334c:	4811      	ldr	r0, [pc, #68]	; (8003394 <ADCProcesing+0x16c>)
 800334e:	f7fe fb03 	bl	8001958 <MovAvgFilter_Update>
	  MovAvgFilter_Update(&MAFiltBatt, input_batt);
 8003352:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8003356:	4810      	ldr	r0, [pc, #64]	; (8003398 <ADCProcesing+0x170>)
 8003358:	f7fe fafe 	bl	8001958 <MovAvgFilter_Update>
//	  sprintf(txBuffer,"Raw : %.3f Filtered : %.3f\n", input, rcFiltFuel.out[0]);
//	  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
	  osDelay(100); //100 Hz Sampling Rate
 800335c:	2064      	movs	r0, #100	; 0x64
 800335e:	f009 faed 	bl	800c93c <osDelay>
	  input_accu = (value[0]/ADC_RESOLUTION) * 13;
 8003362:	e7aa      	b.n	80032ba <ADCProcesing+0x92>
 8003364:	f3af 8000 	nop.w
 8003368:	cccccccd 	.word	0xcccccccd
 800336c:	4010cccc 	.word	0x4010cccc
 8003370:	66666666 	.word	0x66666666
 8003374:	400a6666 	.word	0x400a6666
 8003378:	20007a44 	.word	0x20007a44
 800337c:	20007954 	.word	0x20007954
 8003380:	080164a8 	.word	0x080164a8
 8003384:	20008c50 	.word	0x20008c50
 8003388:	42c80000 	.word	0x42c80000
 800338c:	20007ac4 	.word	0x20007ac4
 8003390:	20007888 	.word	0x20007888
 8003394:	20007ad4 	.word	0x20007ad4
 8003398:	200077a4 	.word	0x200077a4
 800339c:	080164c0 	.word	0x080164c0
 80033a0:	20008f3c 	.word	0x20008f3c
 80033a4:	45800000 	.word	0x45800000

080033a8 <LoggingData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LoggingData */
void LoggingData(void *argument)
{
 80033a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ac:	ed2d 8b06 	vpush	{d8-d10}
 80033b0:	b0d6      	sub	sp, #344	; 0x158
 80033b2:	af24      	add	r7, sp, #144	; 0x90
 80033b4:	65f8      	str	r0, [r7, #92]	; 0x5c
  /* USER CODE BEGIN LoggingData */

	uint8_t index = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	char txBuffer[100];
	memset(txBuffer,0,sizeof(txBuffer));
 80033bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80033c0:	2264      	movs	r2, #100	; 0x64
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f00c ff9d 	bl	8010304 <memset>
	sprintf(txBuffer,"Starting Logging..\n");
 80033ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80033ce:	49b4      	ldr	r1, [pc, #720]	; (80036a0 <LoggingData+0x2f8>)
 80033d0:	4618      	mov	r0, r3
 80033d2:	f00d fc3d 	bl	8010c50 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *) txBuffer , sizeof(txBuffer), 100);
 80033d6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80033da:	2364      	movs	r3, #100	; 0x64
 80033dc:	2264      	movs	r2, #100	; 0x64
 80033de:	48b1      	ldr	r0, [pc, #708]	; (80036a4 <LoggingData+0x2fc>)
 80033e0:	f004 ff5b 	bl	800829a <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	log_acc_avg[index] = acc_avg;
 80033e4:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80033e8:	4aaf      	ldr	r2, [pc, #700]	; (80036a8 <LoggingData+0x300>)
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	49af      	ldr	r1, [pc, #700]	; (80036ac <LoggingData+0x304>)
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	601a      	str	r2, [r3, #0]
	log_acc_max[index] = acc_max;
 80033f4:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80033f8:	4aad      	ldr	r2, [pc, #692]	; (80036b0 <LoggingData+0x308>)
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	49ad      	ldr	r1, [pc, #692]	; (80036b4 <LoggingData+0x30c>)
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	601a      	str	r2, [r3, #0]
	log_speed_max[index] = speed_max;
 8003404:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8003408:	4aab      	ldr	r2, [pc, #684]	; (80036b8 <LoggingData+0x310>)
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	49ab      	ldr	r1, [pc, #684]	; (80036bc <LoggingData+0x314>)
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	601a      	str	r2, [r3, #0]
	log_speed_avg[index] = speed_avg;
 8003414:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8003418:	4aa9      	ldr	r2, [pc, #676]	; (80036c0 <LoggingData+0x318>)
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	49a9      	ldr	r1, [pc, #676]	; (80036c4 <LoggingData+0x31c>)
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	601a      	str	r2, [r3, #0]
	log_latitude[index] = latitude;
 8003424:	f897 10c7 	ldrb.w	r1, [r7, #199]	; 0xc7
 8003428:	4ba7      	ldr	r3, [pc, #668]	; (80036c8 <LoggingData+0x320>)
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	48a7      	ldr	r0, [pc, #668]	; (80036cc <LoggingData+0x324>)
 8003430:	00c9      	lsls	r1, r1, #3
 8003432:	4401      	add	r1, r0
 8003434:	e9c1 2300 	strd	r2, r3, [r1]
	log_longitude[index] = longitude;
 8003438:	f897 10c7 	ldrb.w	r1, [r7, #199]	; 0xc7
 800343c:	4ba4      	ldr	r3, [pc, #656]	; (80036d0 <LoggingData+0x328>)
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	48a4      	ldr	r0, [pc, #656]	; (80036d4 <LoggingData+0x32c>)
 8003444:	00c9      	lsls	r1, r1, #3
 8003446:	4401      	add	r1, r0
 8003448:	e9c1 2300 	strd	r2, r3, [r1]
	log_fuel[index] = MAFiltFuel.out;
 800344c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8003450:	4aa1      	ldr	r2, [pc, #644]	; (80036d8 <LoggingData+0x330>)
 8003452:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 8003456:	49a1      	ldr	r1, [pc, #644]	; (80036dc <LoggingData+0x334>)
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	601a      	str	r2, [r3, #0]
	log_accu[index] = MAFiltAccu.out;
 800345e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8003462:	4a9f      	ldr	r2, [pc, #636]	; (80036e0 <LoggingData+0x338>)
 8003464:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 8003468:	499e      	ldr	r1, [pc, #632]	; (80036e4 <LoggingData+0x33c>)
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	601a      	str	r2, [r3, #0]
	log_batt[index] = MAFiltBatt.out;
 8003470:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8003474:	4a9c      	ldr	r2, [pc, #624]	; (80036e8 <LoggingData+0x340>)
 8003476:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 800347a:	499c      	ldr	r1, [pc, #624]	; (80036ec <LoggingData+0x344>)
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	601a      	str	r2, [r3, #0]
	log_ignition_status[index] = ignition_status;
 8003482:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8003486:	4a9a      	ldr	r2, [pc, #616]	; (80036f0 <LoggingData+0x348>)
 8003488:	7811      	ldrb	r1, [r2, #0]
 800348a:	4a9a      	ldr	r2, [pc, #616]	; (80036f4 <LoggingData+0x34c>)
 800348c:	54d1      	strb	r1, [r2, r3]

	memset(txBuffer,0,sizeof(txBuffer));
 800348e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003492:	2264      	movs	r2, #100	; 0x64
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f00c ff34 	bl	8010304 <memset>
	sprintf(txBuffer,"index : %d\n", index);
 800349c:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 80034a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80034a4:	4994      	ldr	r1, [pc, #592]	; (80036f8 <LoggingData+0x350>)
 80034a6:	4618      	mov	r0, r3
 80034a8:	f00d fbd2 	bl	8010c50 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *) txBuffer , sizeof(txBuffer), 100);
 80034ac:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80034b0:	2364      	movs	r3, #100	; 0x64
 80034b2:	2264      	movs	r2, #100	; 0x64
 80034b4:	487b      	ldr	r0, [pc, #492]	; (80036a4 <LoggingData+0x2fc>)
 80034b6:	f004 fef0 	bl	800829a <HAL_UART_Transmit>
	//Increment Index
	index++;
 80034ba:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80034be:	3301      	adds	r3, #1
 80034c0:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	if(index >= LOG_LENGTH){
 80034c4:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	f240 8121 	bls.w	8003710 <LoggingData+0x368>

//		osMutexAcquire(mutexIMUHandle, portMAX_DELAY);
		index = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		//Add clearing array
		imu_index = 0;
 80034d4:	4b89      	ldr	r3, [pc, #548]	; (80036fc <LoggingData+0x354>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	801a      	strh	r2, [r3, #0]
		speed_avg = 0;
 80034da:	4b79      	ldr	r3, [pc, #484]	; (80036c0 <LoggingData+0x318>)
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
		speed_max = 0;
 80034e2:	4b75      	ldr	r3, [pc, #468]	; (80036b8 <LoggingData+0x310>)
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
		acc_avg = 0;
 80034ea:	4b6f      	ldr	r3, [pc, #444]	; (80036a8 <LoggingData+0x300>)
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
		acc_max = 0;
 80034f2:	4b6f      	ldr	r3, [pc, #444]	; (80036b0 <LoggingData+0x308>)
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
		memset(txBuffer,0,sizeof(txBuffer));
 80034fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80034fe:	2264      	movs	r2, #100	; 0x64
 8003500:	2100      	movs	r1, #0
 8003502:	4618      	mov	r0, r3
 8003504:	f00c fefe 	bl	8010304 <memset>
		sprintf(txBuffer,"FULL!\n");
 8003508:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800350c:	497c      	ldr	r1, [pc, #496]	; (8003700 <LoggingData+0x358>)
 800350e:	4618      	mov	r0, r3
 8003510:	f00d fb9e 	bl	8010c50 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *) txBuffer , sizeof(txBuffer), 100);
 8003514:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003518:	2364      	movs	r3, #100	; 0x64
 800351a:	2264      	movs	r2, #100	; 0x64
 800351c:	4861      	ldr	r0, [pc, #388]	; (80036a4 <LoggingData+0x2fc>)
 800351e:	f004 febc 	bl	800829a <HAL_UART_Transmit>
//		osMutexRelease(mutexIMUHandle);
		memset(payload,0,sizeof(payload)); //clearing form
 8003522:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003526:	2100      	movs	r1, #0
 8003528:	4876      	ldr	r0, [pc, #472]	; (8003704 <LoggingData+0x35c>)
 800352a:	f00c feeb 	bl	8010304 <memset>
		//Create Payload Form
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 800352e:	4b67      	ldr	r3, [pc, #412]	; (80036cc <LoggingData+0x324>)
 8003530:	ed93 7b00 	vldr	d7, [r3]
 8003534:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 8003538:	4b66      	ldr	r3, [pc, #408]	; (80036d4 <LoggingData+0x32c>)
 800353a:	ed93 8b00 	vldr	d8, [r3]
 800353e:	4b63      	ldr	r3, [pc, #396]	; (80036cc <LoggingData+0x324>)
 8003540:	ed93 9b02 	vldr	d9, [r3, #8]
 8003544:	4b63      	ldr	r3, [pc, #396]	; (80036d4 <LoggingData+0x32c>)
 8003546:	ed93 ab02 	vldr	d10, [r3, #8]
				log_latitude[0],log_longitude[0], log_latitude[1], log_longitude[1], log_speed_max[0],log_speed_max[1],log_speed_avg[0],log_speed_avg[1],log_acc_max[0],log_acc_max[1], log_acc_avg[0], log_acc_avg[1], log_batt[0], log_batt[1], log_accu[0], log_accu[1],log_fuel[0], log_fuel[1], log_ignition_status[0], log_ignition_status[1]);
 800354a:	4b5c      	ldr	r3, [pc, #368]	; (80036bc <LoggingData+0x314>)
 800354c:	681b      	ldr	r3, [r3, #0]
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 800354e:	4618      	mov	r0, r3
 8003550:	f7fd f802 	bl	8000558 <__aeabi_f2d>
 8003554:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
				log_latitude[0],log_longitude[0], log_latitude[1], log_longitude[1], log_speed_max[0],log_speed_max[1],log_speed_avg[0],log_speed_avg[1],log_acc_max[0],log_acc_max[1], log_acc_avg[0], log_acc_avg[1], log_batt[0], log_batt[1], log_accu[0], log_accu[1],log_fuel[0], log_fuel[1], log_ignition_status[0], log_ignition_status[1]);
 8003558:	4b58      	ldr	r3, [pc, #352]	; (80036bc <LoggingData+0x314>)
 800355a:	685b      	ldr	r3, [r3, #4]
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 800355c:	4618      	mov	r0, r3
 800355e:	f7fc fffb 	bl	8000558 <__aeabi_f2d>
 8003562:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				log_latitude[0],log_longitude[0], log_latitude[1], log_longitude[1], log_speed_max[0],log_speed_max[1],log_speed_avg[0],log_speed_avg[1],log_acc_max[0],log_acc_max[1], log_acc_avg[0], log_acc_avg[1], log_batt[0], log_batt[1], log_accu[0], log_accu[1],log_fuel[0], log_fuel[1], log_ignition_status[0], log_ignition_status[1]);
 8003566:	4b57      	ldr	r3, [pc, #348]	; (80036c4 <LoggingData+0x31c>)
 8003568:	681b      	ldr	r3, [r3, #0]
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 800356a:	4618      	mov	r0, r3
 800356c:	f7fc fff4 	bl	8000558 <__aeabi_f2d>
 8003570:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				log_latitude[0],log_longitude[0], log_latitude[1], log_longitude[1], log_speed_max[0],log_speed_max[1],log_speed_avg[0],log_speed_avg[1],log_acc_max[0],log_acc_max[1], log_acc_avg[0], log_acc_avg[1], log_batt[0], log_batt[1], log_accu[0], log_accu[1],log_fuel[0], log_fuel[1], log_ignition_status[0], log_ignition_status[1]);
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <LoggingData+0x31c>)
 8003576:	685b      	ldr	r3, [r3, #4]
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 8003578:	4618      	mov	r0, r3
 800357a:	f7fc ffed 	bl	8000558 <__aeabi_f2d>
 800357e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				log_latitude[0],log_longitude[0], log_latitude[1], log_longitude[1], log_speed_max[0],log_speed_max[1],log_speed_avg[0],log_speed_avg[1],log_acc_max[0],log_acc_max[1], log_acc_avg[0], log_acc_avg[1], log_batt[0], log_batt[1], log_accu[0], log_accu[1],log_fuel[0], log_fuel[1], log_ignition_status[0], log_ignition_status[1]);
 8003582:	4b4c      	ldr	r3, [pc, #304]	; (80036b4 <LoggingData+0x30c>)
 8003584:	681b      	ldr	r3, [r3, #0]
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 8003586:	4618      	mov	r0, r3
 8003588:	f7fc ffe6 	bl	8000558 <__aeabi_f2d>
 800358c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				log_latitude[0],log_longitude[0], log_latitude[1], log_longitude[1], log_speed_max[0],log_speed_max[1],log_speed_avg[0],log_speed_avg[1],log_acc_max[0],log_acc_max[1], log_acc_avg[0], log_acc_avg[1], log_batt[0], log_batt[1], log_accu[0], log_accu[1],log_fuel[0], log_fuel[1], log_ignition_status[0], log_ignition_status[1]);
 8003590:	4b48      	ldr	r3, [pc, #288]	; (80036b4 <LoggingData+0x30c>)
 8003592:	685b      	ldr	r3, [r3, #4]
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 8003594:	4618      	mov	r0, r3
 8003596:	f7fc ffdf 	bl	8000558 <__aeabi_f2d>
 800359a:	e9c7 0108 	strd	r0, r1, [r7, #32]
				log_latitude[0],log_longitude[0], log_latitude[1], log_longitude[1], log_speed_max[0],log_speed_max[1],log_speed_avg[0],log_speed_avg[1],log_acc_max[0],log_acc_max[1], log_acc_avg[0], log_acc_avg[1], log_batt[0], log_batt[1], log_accu[0], log_accu[1],log_fuel[0], log_fuel[1], log_ignition_status[0], log_ignition_status[1]);
 800359e:	4b43      	ldr	r3, [pc, #268]	; (80036ac <LoggingData+0x304>)
 80035a0:	681b      	ldr	r3, [r3, #0]
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fc ffd8 	bl	8000558 <__aeabi_f2d>
 80035a8:	e9c7 0106 	strd	r0, r1, [r7, #24]
				log_latitude[0],log_longitude[0], log_latitude[1], log_longitude[1], log_speed_max[0],log_speed_max[1],log_speed_avg[0],log_speed_avg[1],log_acc_max[0],log_acc_max[1], log_acc_avg[0], log_acc_avg[1], log_batt[0], log_batt[1], log_accu[0], log_accu[1],log_fuel[0], log_fuel[1], log_ignition_status[0], log_ignition_status[1]);
 80035ac:	4b3f      	ldr	r3, [pc, #252]	; (80036ac <LoggingData+0x304>)
 80035ae:	685b      	ldr	r3, [r3, #4]
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fc ffd1 	bl	8000558 <__aeabi_f2d>
 80035b6:	e9c7 0104 	strd	r0, r1, [r7, #16]
				log_latitude[0],log_longitude[0], log_latitude[1], log_longitude[1], log_speed_max[0],log_speed_max[1],log_speed_avg[0],log_speed_avg[1],log_acc_max[0],log_acc_max[1], log_acc_avg[0], log_acc_avg[1], log_batt[0], log_batt[1], log_accu[0], log_accu[1],log_fuel[0], log_fuel[1], log_ignition_status[0], log_ignition_status[1]);
 80035ba:	4b4c      	ldr	r3, [pc, #304]	; (80036ec <LoggingData+0x344>)
 80035bc:	681b      	ldr	r3, [r3, #0]
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fc ffca 	bl	8000558 <__aeabi_f2d>
 80035c4:	e9c7 0102 	strd	r0, r1, [r7, #8]
				log_latitude[0],log_longitude[0], log_latitude[1], log_longitude[1], log_speed_max[0],log_speed_max[1],log_speed_avg[0],log_speed_avg[1],log_acc_max[0],log_acc_max[1], log_acc_avg[0], log_acc_avg[1], log_batt[0], log_batt[1], log_accu[0], log_accu[1],log_fuel[0], log_fuel[1], log_ignition_status[0], log_ignition_status[1]);
 80035c8:	4b48      	ldr	r3, [pc, #288]	; (80036ec <LoggingData+0x344>)
 80035ca:	685b      	ldr	r3, [r3, #4]
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fc ffc3 	bl	8000558 <__aeabi_f2d>
 80035d2:	e9c7 0100 	strd	r0, r1, [r7]
				log_latitude[0],log_longitude[0], log_latitude[1], log_longitude[1], log_speed_max[0],log_speed_max[1],log_speed_avg[0],log_speed_avg[1],log_acc_max[0],log_acc_max[1], log_acc_avg[0], log_acc_avg[1], log_batt[0], log_batt[1], log_accu[0], log_accu[1],log_fuel[0], log_fuel[1], log_ignition_status[0], log_ignition_status[1]);
 80035d6:	4b43      	ldr	r3, [pc, #268]	; (80036e4 <LoggingData+0x33c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fc ffbc 	bl	8000558 <__aeabi_f2d>
 80035e0:	4682      	mov	sl, r0
 80035e2:	468b      	mov	fp, r1
				log_latitude[0],log_longitude[0], log_latitude[1], log_longitude[1], log_speed_max[0],log_speed_max[1],log_speed_avg[0],log_speed_avg[1],log_acc_max[0],log_acc_max[1], log_acc_avg[0], log_acc_avg[1], log_batt[0], log_batt[1], log_accu[0], log_accu[1],log_fuel[0], log_fuel[1], log_ignition_status[0], log_ignition_status[1]);
 80035e4:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <LoggingData+0x33c>)
 80035e6:	685b      	ldr	r3, [r3, #4]
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fc ffb5 	bl	8000558 <__aeabi_f2d>
 80035ee:	4680      	mov	r8, r0
 80035f0:	4689      	mov	r9, r1
				log_latitude[0],log_longitude[0], log_latitude[1], log_longitude[1], log_speed_max[0],log_speed_max[1],log_speed_avg[0],log_speed_avg[1],log_acc_max[0],log_acc_max[1], log_acc_avg[0], log_acc_avg[1], log_batt[0], log_batt[1], log_accu[0], log_accu[1],log_fuel[0], log_fuel[1], log_ignition_status[0], log_ignition_status[1]);
 80035f2:	4b3a      	ldr	r3, [pc, #232]	; (80036dc <LoggingData+0x334>)
 80035f4:	681b      	ldr	r3, [r3, #0]
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fc ffae 	bl	8000558 <__aeabi_f2d>
 80035fc:	4604      	mov	r4, r0
 80035fe:	460d      	mov	r5, r1
				log_latitude[0],log_longitude[0], log_latitude[1], log_longitude[1], log_speed_max[0],log_speed_max[1],log_speed_avg[0],log_speed_avg[1],log_acc_max[0],log_acc_max[1], log_acc_avg[0], log_acc_avg[1], log_batt[0], log_batt[1], log_accu[0], log_accu[1],log_fuel[0], log_fuel[1], log_ignition_status[0], log_ignition_status[1]);
 8003600:	4b36      	ldr	r3, [pc, #216]	; (80036dc <LoggingData+0x334>)
 8003602:	685b      	ldr	r3, [r3, #4]
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 8003604:	4618      	mov	r0, r3
 8003606:	f7fc ffa7 	bl	8000558 <__aeabi_f2d>
				log_latitude[0],log_longitude[0], log_latitude[1], log_longitude[1], log_speed_max[0],log_speed_max[1],log_speed_avg[0],log_speed_avg[1],log_acc_max[0],log_acc_max[1], log_acc_avg[0], log_acc_avg[1], log_batt[0], log_batt[1], log_accu[0], log_accu[1],log_fuel[0], log_fuel[1], log_ignition_status[0], log_ignition_status[1]);
 800360a:	4b3a      	ldr	r3, [pc, #232]	; (80036f4 <LoggingData+0x34c>)
 800360c:	781b      	ldrb	r3, [r3, #0]
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 800360e:	461a      	mov	r2, r3
				log_latitude[0],log_longitude[0], log_latitude[1], log_longitude[1], log_speed_max[0],log_speed_max[1],log_speed_avg[0],log_speed_avg[1],log_acc_max[0],log_acc_max[1], log_acc_avg[0], log_acc_avg[1], log_batt[0], log_batt[1], log_accu[0], log_accu[1],log_fuel[0], log_fuel[1], log_ignition_status[0], log_ignition_status[1]);
 8003610:	4b38      	ldr	r3, [pc, #224]	; (80036f4 <LoggingData+0x34c>)
 8003612:	785b      	ldrb	r3, [r3, #1]
		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"%f,%f\\\",\\\"%f,%f\\\"],\\\"k_max\\\":[%.2f,%.2f],\\\"k_avg\\\":[%.2f,%.2f],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[%.2f,%.2f],\\\"a_avg\\\":[%.2f,%.2f],\\\"tb\\\":[%.2f,%.2f],\\\"ta\\\":[%.2f,%.2f],\\\"bb\\\":[%.2f,%.2f],\\\"si\\\":[%d,%d],\\\"kurir\\\":1}`",
 8003614:	9323      	str	r3, [sp, #140]	; 0x8c
 8003616:	9222      	str	r2, [sp, #136]	; 0x88
 8003618:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 800361c:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8003620:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8003624:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
 8003628:	ed97 7b00 	vldr	d7, [r7]
 800362c:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8003630:	ed97 7b02 	vldr	d7, [r7, #8]
 8003634:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8003638:	ed97 7b04 	vldr	d7, [r7, #16]
 800363c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003640:	ed97 7b06 	vldr	d7, [r7, #24]
 8003644:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8003648:	ed97 7b08 	vldr	d7, [r7, #32]
 800364c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003650:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003654:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003658:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800365c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003660:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003664:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003668:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800366c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003670:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8003674:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003678:	ed8d ab04 	vstr	d10, [sp, #16]
 800367c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8003680:	ed8d 8b00 	vstr	d8, [sp]
 8003684:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003688:	491f      	ldr	r1, [pc, #124]	; (8003708 <LoggingData+0x360>)
 800368a:	481e      	ldr	r0, [pc, #120]	; (8003704 <LoggingData+0x35c>)
 800368c:	f00d fae0 	bl	8010c50 <siprintf>


//		sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"-6.8385324382250205,107.6955557148961\\\",\\\"-6.828578043365432,107.6112333432733\\\"],\\\"k_max\\\":[43.99,55.65],\\\"k_avg\\\":[76.99,82.97],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[3.62,83.87],\\\"a_avg\\\":[91.39,62.66],\\\"tb\\\":[6.07,6.39],\\\"ta\\\":[5.10,1.99],\\\"bb\\\":[0.92,0.98],\\\"si\\\":[0,1],\\\"kurir\\\":1}`");
		xTaskNotifyGive(SendDataTaskHandle);
 8003690:	4b1e      	ldr	r3, [pc, #120]	; (800370c <LoggingData+0x364>)
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	2300      	movs	r3, #0
 8003696:	2202      	movs	r2, #2
 8003698:	2100      	movs	r1, #0
 800369a:	f00b fd67 	bl	800f16c <xTaskGenericNotify>
 800369e:	e037      	b.n	8003710 <LoggingData+0x368>
 80036a0:	080164e0 	.word	0x080164e0
 80036a4:	20008c50 	.word	0x20008c50
 80036a8:	200076c8 	.word	0x200076c8
 80036ac:	2000029c 	.word	0x2000029c
 80036b0:	20007488 	.word	0x20007488
 80036b4:	20000294 	.word	0x20000294
 80036b8:	20007490 	.word	0x20007490
 80036bc:	200002a4 	.word	0x200002a4
 80036c0:	20007734 	.word	0x20007734
 80036c4:	200002ac 	.word	0x200002ac
 80036c8:	20007be8 	.word	0x20007be8
 80036cc:	200002b8 	.word	0x200002b8
 80036d0:	20007ab8 	.word	0x20007ab8
 80036d4:	200002c8 	.word	0x200002c8
 80036d8:	20007888 	.word	0x20007888
 80036dc:	200002d8 	.word	0x200002d8
 80036e0:	20007ad4 	.word	0x20007ad4
 80036e4:	200002e0 	.word	0x200002e0
 80036e8:	200077a4 	.word	0x200077a4
 80036ec:	200002e8 	.word	0x200002e8
 80036f0:	20000291 	.word	0x20000291
 80036f4:	200002f0 	.word	0x200002f0
 80036f8:	080164f4 	.word	0x080164f4
 80036fc:	20008f38 	.word	0x20008f38
 8003700:	08016500 	.word	0x08016500
 8003704:	20007bf8 	.word	0x20007bf8
 8003708:	08016508 	.word	0x08016508
 800370c:	20007ab0 	.word	0x20007ab0
//				memset(txBuffer, 0, sizeof(txBuffer));
//				sprintf(txBuffer,"\n[%d] acc_avg: %.2f acc_max: %.2f speed_avg: %.2f speed_max: %.2f",
//						i,log_acc_avg[i],log_acc_max[i], log_speed_avg[i], log_speed_max[i]);
//				HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, sizeof(txBuffer), 100);
//			}
    osDelay(pdMS_TO_TICKS(10*1000));
 8003710:	f242 7010 	movw	r0, #10000	; 0x2710
 8003714:	f009 f912 	bl	800c93c <osDelay>
	log_acc_avg[index] = acc_avg;
 8003718:	e664      	b.n	80033e4 <LoggingData+0x3c>
 800371a:	bf00      	nop

0800371c <SendData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SendData */
void SendData(void *argument)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b098      	sub	sp, #96	; 0x60
 8003720:	af06      	add	r7, sp, #24
 8003722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SendData */
	char txBuffer[50] ={};
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	f107 0310 	add.w	r3, r7, #16
 800372c:	222e      	movs	r2, #46	; 0x2e
 800372e:	2100      	movs	r1, #0
 8003730:	4618      	mov	r0, r3
 8003732:	f00c fde7 	bl	8010304 <memset>
	uint8_t pub_status = 1;
 8003736:	2301      	movs	r3, #1
 8003738:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	char * topic = "client-1";
 800373c:	4b66      	ldr	r3, [pc, #408]	; (80038d8 <SendData+0x1bc>)
 800373e:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t error = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	error += SIM800_Init();
 8003746:	f7fd ff3b 	bl	80015c0 <SIM800_Init>
 800374a:	4603      	mov	r3, r0
 800374c:	b2da      	uxtb	r2, r3
 800374e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003752:	4413      	add	r3, r2
 8003754:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if(error >0 ){
 8003758:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800375c:	2b00      	cmp	r3, #0
 800375e:	d006      	beq.n	800376e <SendData+0x52>
		sprintf(txBuffer,"GSM Initialization fail\n");
 8003760:	f107 030c 	add.w	r3, r7, #12
 8003764:	495d      	ldr	r1, [pc, #372]	; (80038dc <SendData+0x1c0>)
 8003766:	4618      	mov	r0, r3
 8003768:	f00d fa72 	bl	8010c50 <siprintf>
 800376c:	e005      	b.n	800377a <SendData+0x5e>
	} else {
		sprintf(txBuffer,"GSM Initialization success\n");
 800376e:	f107 030c 	add.w	r3, r7, #12
 8003772:	495b      	ldr	r1, [pc, #364]	; (80038e0 <SendData+0x1c4>)
 8003774:	4618      	mov	r0, r3
 8003776:	f00d fa6b 	bl	8010c50 <siprintf>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
 800377a:	f107 010c 	add.w	r1, r7, #12
 800377e:	2364      	movs	r3, #100	; 0x64
 8003780:	2232      	movs	r2, #50	; 0x32
 8003782:	4858      	ldr	r0, [pc, #352]	; (80038e4 <SendData+0x1c8>)
 8003784:	f004 fd89 	bl	800829a <HAL_UART_Transmit>
	//Connecting to broker
	error += MQTT_Connect("indosatgprs", "", "", "3.210.14.248", 1883, "faisa", "disadacepetlulus", "client-1", 1000);
 8003788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800378c:	9304      	str	r3, [sp, #16]
 800378e:	4b52      	ldr	r3, [pc, #328]	; (80038d8 <SendData+0x1bc>)
 8003790:	9303      	str	r3, [sp, #12]
 8003792:	4b55      	ldr	r3, [pc, #340]	; (80038e8 <SendData+0x1cc>)
 8003794:	9302      	str	r3, [sp, #8]
 8003796:	4b55      	ldr	r3, [pc, #340]	; (80038ec <SendData+0x1d0>)
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	f240 735b 	movw	r3, #1883	; 0x75b
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	4b53      	ldr	r3, [pc, #332]	; (80038f0 <SendData+0x1d4>)
 80037a2:	4a54      	ldr	r2, [pc, #336]	; (80038f4 <SendData+0x1d8>)
 80037a4:	4953      	ldr	r1, [pc, #332]	; (80038f4 <SendData+0x1d8>)
 80037a6:	4854      	ldr	r0, [pc, #336]	; (80038f8 <SendData+0x1dc>)
 80037a8:	f7fd ff38 	bl	800161c <MQTT_Connect>
 80037ac:	4603      	mov	r3, r0
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80037b4:	4413      	add	r3, r2
 80037b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	memset(txBuffer,0,sizeof(txBuffer));
 80037ba:	f107 030c 	add.w	r3, r7, #12
 80037be:	2232      	movs	r2, #50	; 0x32
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f00c fd9e 	bl	8010304 <memset>
	if(error >0 ){
 80037c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d041      	beq.n	8003854 <SendData+0x138>
		memset(txBuffer,0,sizeof(txBuffer));
 80037d0:	f107 030c 	add.w	r3, r7, #12
 80037d4:	2232      	movs	r2, #50	; 0x32
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f00c fd93 	bl	8010304 <memset>
		sprintf(txBuffer,"Reconnecting..\n");
 80037de:	f107 030c 	add.w	r3, r7, #12
 80037e2:	4946      	ldr	r1, [pc, #280]	; (80038fc <SendData+0x1e0>)
 80037e4:	4618      	mov	r0, r3
 80037e6:	f00d fa33 	bl	8010c50 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
 80037ea:	f107 010c 	add.w	r1, r7, #12
 80037ee:	2364      	movs	r3, #100	; 0x64
 80037f0:	2232      	movs	r2, #50	; 0x32
 80037f2:	483c      	ldr	r0, [pc, #240]	; (80038e4 <SendData+0x1c8>)
 80037f4:	f004 fd51 	bl	800829a <HAL_UART_Transmit>
		error = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		error += SIM800_SendCommand("AT+RST=1\r\n", "READY\r\n", 1000);
 80037fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003802:	493f      	ldr	r1, [pc, #252]	; (8003900 <SendData+0x1e4>)
 8003804:	483f      	ldr	r0, [pc, #252]	; (8003904 <SendData+0x1e8>)
 8003806:	f7fd fe9f 	bl	8001548 <SIM800_SendCommand>
 800380a:	4603      	mov	r3, r0
 800380c:	b2da      	uxtb	r2, r3
 800380e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003812:	4413      	add	r3, r2
 8003814:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		osDelay(pdMS_TO_TICKS(20*1000));
 8003818:	f644 6020 	movw	r0, #20000	; 0x4e20
 800381c:	f009 f88e 	bl	800c93c <osDelay>
		error += MQTT_Connect("indosatgprs", "", "", "3.210.14.248", 1883, "faisa", "disadacepetlulus", "client-1", 1000);
 8003820:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003824:	9304      	str	r3, [sp, #16]
 8003826:	4b2c      	ldr	r3, [pc, #176]	; (80038d8 <SendData+0x1bc>)
 8003828:	9303      	str	r3, [sp, #12]
 800382a:	4b2f      	ldr	r3, [pc, #188]	; (80038e8 <SendData+0x1cc>)
 800382c:	9302      	str	r3, [sp, #8]
 800382e:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <SendData+0x1d0>)
 8003830:	9301      	str	r3, [sp, #4]
 8003832:	f240 735b 	movw	r3, #1883	; 0x75b
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	4b2d      	ldr	r3, [pc, #180]	; (80038f0 <SendData+0x1d4>)
 800383a:	4a2e      	ldr	r2, [pc, #184]	; (80038f4 <SendData+0x1d8>)
 800383c:	492d      	ldr	r1, [pc, #180]	; (80038f4 <SendData+0x1d8>)
 800383e:	482e      	ldr	r0, [pc, #184]	; (80038f8 <SendData+0x1dc>)
 8003840:	f7fd feec 	bl	800161c <MQTT_Connect>
 8003844:	4603      	mov	r3, r0
 8003846:	b2da      	uxtb	r2, r3
 8003848:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800384c:	4413      	add	r3, r2
 800384e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003852:	e013      	b.n	800387c <SendData+0x160>
	}
	else {
		memset(txBuffer,0,sizeof(txBuffer));
 8003854:	f107 030c 	add.w	r3, r7, #12
 8003858:	2232      	movs	r2, #50	; 0x32
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f00c fd51 	bl	8010304 <memset>
		sprintf(txBuffer,"Connected..\n");
 8003862:	f107 030c 	add.w	r3, r7, #12
 8003866:	4928      	ldr	r1, [pc, #160]	; (8003908 <SendData+0x1ec>)
 8003868:	4618      	mov	r0, r3
 800386a:	f00d f9f1 	bl	8010c50 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
 800386e:	f107 010c 	add.w	r1, r7, #12
 8003872:	2364      	movs	r3, #100	; 0x64
 8003874:	2232      	movs	r2, #50	; 0x32
 8003876:	481b      	ldr	r0, [pc, #108]	; (80038e4 <SendData+0x1c8>)
 8003878:	f004 fd0f 	bl	800829a <HAL_UART_Transmit>
//	sprintf(payload,"`{\\\"tw\\\":[\\\"2021-05-26T07:47:21.810Z\\\",\\\"2021-05-26T07:47:21.916Z\\\"],\\\"lk\\\":[\\\"-6.8385324382250205,107.6955557148961\\\",\\\"-6.828578043365432,107.6112333432733\\\"],\\\"k_max\\\":[43.99,55.65],\\\"k_avg\\\":[76.99,82.97],\\\"k_ang\\\":[13.24,2.99],\\\"a_max\\\":[3.62,83.87],\\\"a_avg\\\":[91.39,62.66],\\\"tb\\\":[6.07,6.39],\\\"ta\\\":[5.10,1.99],\\\"bb\\\":[0.92,0.98],\\\"si\\\":[0,1],\\\"kurir\\\":1}`");
  /* Infinite loop */
  for(;;)
  {
	  //Blocking Until Notified
	  ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 800387c:	f04f 31ff 	mov.w	r1, #4294967295
 8003880:	2001      	movs	r0, #1
 8003882:	f00b fc2b 	bl	800f0dc <ulTaskNotifyTake>
	  //Send Payload
	  HAL_UART_Transmit(&huart2, (uint8_t *) payload , sizeof(payload), 100);
 8003886:	2364      	movs	r3, #100	; 0x64
 8003888:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800388c:	491f      	ldr	r1, [pc, #124]	; (800390c <SendData+0x1f0>)
 800388e:	4815      	ldr	r0, [pc, #84]	; (80038e4 <SendData+0x1c8>)
 8003890:	f004 fd03 	bl	800829a <HAL_UART_Transmit>
	  pub_status = MQTT_Pub("client-1", payload);
 8003894:	491d      	ldr	r1, [pc, #116]	; (800390c <SendData+0x1f0>)
 8003896:	4810      	ldr	r0, [pc, #64]	; (80038d8 <SendData+0x1bc>)
 8003898:	f7fd ff60 	bl	800175c <MQTT_Pub>
 800389c:	4603      	mov	r3, r0
 800389e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  osDelay(pdMS_TO_TICKS(5000));
 80038a2:	f241 3088 	movw	r0, #5000	; 0x1388
 80038a6:	f009 f849 	bl	800c93c <osDelay>

	  memset(txBuffer, 0, sizeof(txBuffer));
 80038aa:	f107 030c 	add.w	r3, r7, #12
 80038ae:	2232      	movs	r2, #50	; 0x32
 80038b0:	2100      	movs	r1, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f00c fd26 	bl	8010304 <memset>
	  sprintf(txBuffer,"Sending : %d\n", pub_status);
 80038b8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80038bc:	f107 030c 	add.w	r3, r7, #12
 80038c0:	4913      	ldr	r1, [pc, #76]	; (8003910 <SendData+0x1f4>)
 80038c2:	4618      	mov	r0, r3
 80038c4:	f00d f9c4 	bl	8010c50 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, sizeof(txBuffer), 100);
 80038c8:	f107 010c 	add.w	r1, r7, #12
 80038cc:	2364      	movs	r3, #100	; 0x64
 80038ce:	2232      	movs	r2, #50	; 0x32
 80038d0:	4804      	ldr	r0, [pc, #16]	; (80038e4 <SendData+0x1c8>)
 80038d2:	f004 fce2 	bl	800829a <HAL_UART_Transmit>
	  ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 80038d6:	e7d1      	b.n	800387c <SendData+0x160>
 80038d8:	08016630 	.word	0x08016630
 80038dc:	0801663c 	.word	0x0801663c
 80038e0:	08016658 	.word	0x08016658
 80038e4:	20008c50 	.word	0x20008c50
 80038e8:	08016690 	.word	0x08016690
 80038ec:	080166a4 	.word	0x080166a4
 80038f0:	08016674 	.word	0x08016674
 80038f4:	080162d8 	.word	0x080162d8
 80038f8:	08016684 	.word	0x08016684
 80038fc:	080166ac 	.word	0x080166ac
 8003900:	080166bc 	.word	0x080166bc
 8003904:	080166c4 	.word	0x080166c4
 8003908:	080166d0 	.word	0x080166d0
 800390c:	20007bf8 	.word	0x20007bf8
 8003910:	080166e0 	.word	0x080166e0

08003914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a04      	ldr	r2, [pc, #16]	; (8003934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d101      	bne.n	800392a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003926:	f000 fd17 	bl	8004358 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40010000 	.word	0x40010000

08003938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800393c:	b672      	cpsid	i
}
 800393e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003940:	e7fe      	b.n	8003940 <Error_Handler+0x8>

08003942 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8003942:	b580      	push	{r7, lr}
 8003944:	b088      	sub	sp, #32
 8003946:	af04      	add	r7, sp, #16
 8003948:	6078      	str	r0, [r7, #4]
    uint8_t registerContents;


    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_DEVID_REG, 1, &check, 1, i2c_timeout);
 800394a:	2364      	movs	r3, #100	; 0x64
 800394c:	9302      	str	r3, [sp, #8]
 800394e:	2301      	movs	r3, #1
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	f107 030f 	add.w	r3, r7, #15
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	2301      	movs	r3, #1
 800395a:	2200      	movs	r2, #0
 800395c:	21a6      	movs	r1, #166	; 0xa6
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f002 f9fe 	bl	8005d60 <HAL_I2C_Mem_Read>
    if (check == 0xE5)  // 0xE5 will be returned by the sensor if everything goes well
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	2be5      	cmp	r3, #229	; 0xe5
 8003968:	d15e      	bne.n	8003a28 <MPU6050_Init+0xe6>
    {
        // power management register 0X2D we should write all 0's to wake the sensor up
        Data = 0x0;
 800396a:	2300      	movs	r3, #0
 800396c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 800396e:	2364      	movs	r3, #100	; 0x64
 8003970:	9302      	str	r3, [sp, #8]
 8003972:	2301      	movs	r3, #1
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	f107 030e 	add.w	r3, r7, #14
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	2301      	movs	r3, #1
 800397e:	222d      	movs	r2, #45	; 0x2d
 8003980:	21a6      	movs	r1, #166	; 0xa6
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f002 f8f2 	bl	8005b6c <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8003988:	2064      	movs	r0, #100	; 0x64
 800398a:	f000 fd05 	bl	8004398 <HAL_Delay>

        // Set DATA FORMAT
        Data = 0x0B;
 800398e:	230b      	movs	r3, #11
 8003990:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_DATA_FORMAT_REG, 1, &Data, 1, i2c_timeout);
 8003992:	2364      	movs	r3, #100	; 0x64
 8003994:	9302      	str	r3, [sp, #8]
 8003996:	2301      	movs	r3, #1
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	f107 030e 	add.w	r3, r7, #14
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	2301      	movs	r3, #1
 80039a2:	2231      	movs	r2, #49	; 0x31
 80039a4:	21a6      	movs	r1, #166	; 0xa6
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f002 f8e0 	bl	8005b6c <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80039ac:	2064      	movs	r0, #100	; 0x64
 80039ae:	f000 fcf3 	bl	8004398 <HAL_Delay>

        // Get the current register contents, so we don't clobber the power bit
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 80039b2:	2364      	movs	r3, #100	; 0x64
 80039b4:	9302      	str	r3, [sp, #8]
 80039b6:	2301      	movs	r3, #1
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	f107 030d 	add.w	r3, r7, #13
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	2301      	movs	r3, #1
 80039c2:	222c      	movs	r2, #44	; 0x2c
 80039c4:	21a6      	movs	r1, #166	; 0xa6
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f002 f9ca 	bl	8005d60 <HAL_I2C_Mem_Read>
        registerContents &= 0x10;
 80039cc:	7b7b      	ldrb	r3, [r7, #13]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	737b      	strb	r3, [r7, #13]
        registerContents |= ADXL345_3200HZ;
 80039d6:	7b7b      	ldrb	r3, [r7, #13]
 80039d8:	f043 030f 	orr.w	r3, r3, #15
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	737b      	strb	r3, [r7, #13]

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 80039e0:	2364      	movs	r3, #100	; 0x64
 80039e2:	9302      	str	r3, [sp, #8]
 80039e4:	2301      	movs	r3, #1
 80039e6:	9301      	str	r3, [sp, #4]
 80039e8:	f107 030d 	add.w	r3, r7, #13
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2301      	movs	r3, #1
 80039f0:	222c      	movs	r2, #44	; 0x2c
 80039f2:	21a6      	movs	r1, #166	; 0xa6
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f002 f8b9 	bl	8005b6c <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80039fa:	2064      	movs	r0, #100	; 0x64
 80039fc:	f000 fccc 	bl	8004398 <HAL_Delay>

        // Set Power Control to Measurement mode
        Data = 0x08;
 8003a00:	2308      	movs	r3, #8
 8003a02:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 8003a04:	2364      	movs	r3, #100	; 0x64
 8003a06:	9302      	str	r3, [sp, #8]
 8003a08:	2301      	movs	r3, #1
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	f107 030e 	add.w	r3, r7, #14
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2301      	movs	r3, #1
 8003a14:	222d      	movs	r2, #45	; 0x2d
 8003a16:	21a6      	movs	r1, #166	; 0xa6
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f002 f8a7 	bl	8005b6c <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8003a1e:	2064      	movs	r0, #100	; 0x64
 8003a20:	f000 fcba 	bl	8004398 <HAL_Delay>

        return check;
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	e000      	b.n	8003a2a <MPU6050_Init+0xe8>
    }
    return 1;
 8003a28:	2301      	movs	r3, #1
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	0000      	movs	r0, r0
 8003a34:	0000      	movs	r0, r0
	...

08003a38 <MPU6050_Read_Accel>:
	}
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, address, 1, &offset, 1, i2c_timeout);

	return offset;
}
void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af04      	add	r7, sp, #16
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8003a42:	2364      	movs	r3, #100	; 0x64
 8003a44:	9302      	str	r3, [sp, #8]
 8003a46:	2306      	movs	r3, #6
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	f107 0308 	add.w	r3, r7, #8
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2301      	movs	r3, #1
 8003a52:	2232      	movs	r2, #50	; 0x32
 8003a54:	21a6      	movs	r1, #166	; 0xa6
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f002 f982 	bl	8005d60 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[1] << 8 | Rec_Data[0]);
 8003a5c:	7a7b      	ldrb	r3, [r7, #9]
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	b21a      	sxth	r2, r3
 8003a62:	7a3b      	ldrb	r3, [r7, #8]
 8003a64:	b21b      	sxth	r3, r3
 8003a66:	4313      	orrs	r3, r2
 8003a68:	b21a      	sxth	r2, r3
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[3] << 8 | Rec_Data[2]);
 8003a6e:	7afb      	ldrb	r3, [r7, #11]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	b21a      	sxth	r2, r3
 8003a74:	7abb      	ldrb	r3, [r7, #10]
 8003a76:	b21b      	sxth	r3, r3
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	b21a      	sxth	r2, r3
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[5] << 8 | Rec_Data[4]);
 8003a80:	7b7b      	ldrb	r3, [r7, #13]
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	b21a      	sxth	r2, r3
 8003a86:	7b3b      	ldrb	r3, [r7, #12]
 8003a88:	b21b      	sxth	r3, r3
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	b21a      	sxth	r2, r3
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW * scale_factor / GRAVITY;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a98:	ee07 3a90 	vmov	s15, r3
 8003a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aa0:	4b27      	ldr	r3, [pc, #156]	; (8003b40 <MPU6050_Read_Accel+0x108>)
 8003aa2:	edd3 7a00 	vldr	s15, [r3]
 8003aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aaa:	ee17 0a90 	vmov	r0, s15
 8003aae:	f7fc fd53 	bl	8000558 <__aeabi_f2d>
 8003ab2:	a321      	add	r3, pc, #132	; (adr r3, 8003b38 <MPU6050_Read_Accel+0x100>)
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	f7fc fed0 	bl	800085c <__aeabi_ddiv>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	6839      	ldr	r1, [r7, #0]
 8003ac2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW * scale_factor / GRAVITY;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003acc:	ee07 3a90 	vmov	s15, r3
 8003ad0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ad4:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <MPU6050_Read_Accel+0x108>)
 8003ad6:	edd3 7a00 	vldr	s15, [r3]
 8003ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ade:	ee17 0a90 	vmov	r0, s15
 8003ae2:	f7fc fd39 	bl	8000558 <__aeabi_f2d>
 8003ae6:	a314      	add	r3, pc, #80	; (adr r3, 8003b38 <MPU6050_Read_Accel+0x100>)
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f7fc feb6 	bl	800085c <__aeabi_ddiv>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	6839      	ldr	r1, [r7, #0]
 8003af6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW * scale_factor / GRAVITY;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b00:	ee07 3a90 	vmov	s15, r3
 8003b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b08:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <MPU6050_Read_Accel+0x108>)
 8003b0a:	edd3 7a00 	vldr	s15, [r3]
 8003b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b12:	ee17 0a90 	vmov	r0, s15
 8003b16:	f7fc fd1f 	bl	8000558 <__aeabi_f2d>
 8003b1a:	a307      	add	r3, pc, #28	; (adr r3, 8003b38 <MPU6050_Read_Accel+0x100>)
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	f7fc fe9c 	bl	800085c <__aeabi_ddiv>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	6839      	ldr	r1, [r7, #0]
 8003b2a:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	3a92a305 	.word	0x3a92a305
 8003b3c:	40239d01 	.word	0x40239d01
 8003b40:	20000000 	.word	0x20000000

08003b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <HAL_MspInit+0x54>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	4a11      	ldr	r2, [pc, #68]	; (8003b98 <HAL_MspInit+0x54>)
 8003b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b58:	6453      	str	r3, [r2, #68]	; 0x44
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <HAL_MspInit+0x54>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_MspInit+0x54>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	4a0a      	ldr	r2, [pc, #40]	; (8003b98 <HAL_MspInit+0x54>)
 8003b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b74:	6413      	str	r3, [r2, #64]	; 0x40
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <HAL_MspInit+0x54>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b82:	2200      	movs	r2, #0
 8003b84:	210f      	movs	r1, #15
 8003b86:	f06f 0001 	mvn.w	r0, #1
 8003b8a:	f001 f8c9 	bl	8004d20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800

08003b9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	; 0x28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba4:	f107 0314 	add.w	r3, r7, #20
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	609a      	str	r2, [r3, #8]
 8003bb0:	60da      	str	r2, [r3, #12]
 8003bb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a3c      	ldr	r2, [pc, #240]	; (8003cac <HAL_ADC_MspInit+0x110>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d171      	bne.n	8003ca2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <HAL_ADC_MspInit+0x114>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	4a3a      	ldr	r2, [pc, #232]	; (8003cb0 <HAL_ADC_MspInit+0x114>)
 8003bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bce:	4b38      	ldr	r3, [pc, #224]	; (8003cb0 <HAL_ADC_MspInit+0x114>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	4b34      	ldr	r3, [pc, #208]	; (8003cb0 <HAL_ADC_MspInit+0x114>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	4a33      	ldr	r2, [pc, #204]	; (8003cb0 <HAL_ADC_MspInit+0x114>)
 8003be4:	f043 0304 	orr.w	r3, r3, #4
 8003be8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bea:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <HAL_ADC_MspInit+0x114>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	4b2d      	ldr	r3, [pc, #180]	; (8003cb0 <HAL_ADC_MspInit+0x114>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	4a2c      	ldr	r2, [pc, #176]	; (8003cb0 <HAL_ADC_MspInit+0x114>)
 8003c00:	f043 0302 	orr.w	r3, r3, #2
 8003c04:	6313      	str	r3, [r2, #48]	; 0x30
 8003c06:	4b2a      	ldr	r3, [pc, #168]	; (8003cb0 <HAL_ADC_MspInit+0x114>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BATT_LEVEL_Pin;
 8003c12:	2320      	movs	r3, #32
 8003c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c16:	2303      	movs	r3, #3
 8003c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8003c1e:	f107 0314 	add.w	r3, r7, #20
 8003c22:	4619      	mov	r1, r3
 8003c24:	4823      	ldr	r0, [pc, #140]	; (8003cb4 <HAL_ADC_MspInit+0x118>)
 8003c26:	f001 fca7 	bl	8005578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ACCU_LEVEL_Pin|FUEL_LEVEL_Pin;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c36:	f107 0314 	add.w	r3, r7, #20
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	481e      	ldr	r0, [pc, #120]	; (8003cb8 <HAL_ADC_MspInit+0x11c>)
 8003c3e:	f001 fc9b 	bl	8005578 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003c42:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <HAL_ADC_MspInit+0x120>)
 8003c44:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <HAL_ADC_MspInit+0x124>)
 8003c46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003c48:	4b1c      	ldr	r3, [pc, #112]	; (8003cbc <HAL_ADC_MspInit+0x120>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c4e:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <HAL_ADC_MspInit+0x120>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c54:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <HAL_ADC_MspInit+0x120>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003c5a:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <HAL_ADC_MspInit+0x120>)
 8003c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c62:	4b16      	ldr	r3, [pc, #88]	; (8003cbc <HAL_ADC_MspInit+0x120>)
 8003c64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c6a:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <HAL_ADC_MspInit+0x120>)
 8003c6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c72:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <HAL_ADC_MspInit+0x120>)
 8003c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003c7a:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <HAL_ADC_MspInit+0x120>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c80:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <HAL_ADC_MspInit+0x120>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003c86:	480d      	ldr	r0, [pc, #52]	; (8003cbc <HAL_ADC_MspInit+0x120>)
 8003c88:	f001 f874 	bl	8004d74 <HAL_DMA_Init>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003c92:	f7ff fe51 	bl	8003938 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a08      	ldr	r2, [pc, #32]	; (8003cbc <HAL_ADC_MspInit+0x120>)
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
 8003c9c:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <HAL_ADC_MspInit+0x120>)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ca2:	bf00      	nop
 8003ca4:	3728      	adds	r7, #40	; 0x28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40012000 	.word	0x40012000
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40020800 	.word	0x40020800
 8003cb8:	40020400 	.word	0x40020400
 8003cbc:	20007a50 	.word	0x20007a50
 8003cc0:	40026410 	.word	0x40026410

08003cc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08a      	sub	sp, #40	; 0x28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ccc:	f107 0314 	add.w	r3, r7, #20
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	60da      	str	r2, [r3, #12]
 8003cda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a19      	ldr	r2, [pc, #100]	; (8003d48 <HAL_I2C_MspInit+0x84>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d12b      	bne.n	8003d3e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <HAL_I2C_MspInit+0x88>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	4a17      	ldr	r2, [pc, #92]	; (8003d4c <HAL_I2C_MspInit+0x88>)
 8003cf0:	f043 0302 	orr.w	r3, r3, #2
 8003cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf6:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <HAL_I2C_MspInit+0x88>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d02:	23c0      	movs	r3, #192	; 0xc0
 8003d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d06:	2312      	movs	r3, #18
 8003d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d12:	2304      	movs	r3, #4
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d16:	f107 0314 	add.w	r3, r7, #20
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	480c      	ldr	r0, [pc, #48]	; (8003d50 <HAL_I2C_MspInit+0x8c>)
 8003d1e:	f001 fc2b 	bl	8005578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_I2C_MspInit+0x88>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <HAL_I2C_MspInit+0x88>)
 8003d2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d30:	6413      	str	r3, [r2, #64]	; 0x40
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_I2C_MspInit+0x88>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d3e:	bf00      	nop
 8003d40:	3728      	adds	r7, #40	; 0x28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40005400 	.word	0x40005400
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40020400 	.word	0x40020400

08003d54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5c:	f107 0314 	add.w	r3, r7, #20
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	60da      	str	r2, [r3, #12]
 8003d6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a19      	ldr	r2, [pc, #100]	; (8003dd8 <HAL_SPI_MspInit+0x84>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d12b      	bne.n	8003dce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <HAL_SPI_MspInit+0x88>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	4a17      	ldr	r2, [pc, #92]	; (8003ddc <HAL_SPI_MspInit+0x88>)
 8003d80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d84:	6453      	str	r3, [r2, #68]	; 0x44
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <HAL_SPI_MspInit+0x88>)
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <HAL_SPI_MspInit+0x88>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	4a10      	ldr	r2, [pc, #64]	; (8003ddc <HAL_SPI_MspInit+0x88>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6313      	str	r3, [r2, #48]	; 0x30
 8003da2:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <HAL_SPI_MspInit+0x88>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003dae:	23e0      	movs	r3, #224	; 0xe0
 8003db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db2:	2302      	movs	r3, #2
 8003db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003db6:	2301      	movs	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003dbe:	2305      	movs	r3, #5
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc2:	f107 0314 	add.w	r3, r7, #20
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4805      	ldr	r0, [pc, #20]	; (8003de0 <HAL_SPI_MspInit+0x8c>)
 8003dca:	f001 fbd5 	bl	8005578 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003dce:	bf00      	nop
 8003dd0:	3728      	adds	r7, #40	; 0x28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40013000 	.word	0x40013000
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40020000 	.word	0x40020000

08003de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08e      	sub	sp, #56	; 0x38
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	60da      	str	r2, [r3, #12]
 8003dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a6b      	ldr	r2, [pc, #428]	; (8003fb0 <HAL_UART_MspInit+0x1cc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d164      	bne.n	8003ed0 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	623b      	str	r3, [r7, #32]
 8003e0a:	4b6a      	ldr	r3, [pc, #424]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	4a69      	ldr	r2, [pc, #420]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003e10:	f043 0310 	orr.w	r3, r3, #16
 8003e14:	6453      	str	r3, [r2, #68]	; 0x44
 8003e16:	4b67      	ldr	r3, [pc, #412]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	623b      	str	r3, [r7, #32]
 8003e20:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	4b63      	ldr	r3, [pc, #396]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	4a62      	ldr	r2, [pc, #392]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	6313      	str	r3, [r2, #48]	; 0x30
 8003e32:	4b60      	ldr	r3, [pc, #384]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e44:	2302      	movs	r3, #2
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e50:	2307      	movs	r3, #7
 8003e52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4857      	ldr	r0, [pc, #348]	; (8003fb8 <HAL_UART_MspInit+0x1d4>)
 8003e5c:	f001 fb8c 	bl	8005578 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003e60:	4b56      	ldr	r3, [pc, #344]	; (8003fbc <HAL_UART_MspInit+0x1d8>)
 8003e62:	4a57      	ldr	r2, [pc, #348]	; (8003fc0 <HAL_UART_MspInit+0x1dc>)
 8003e64:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003e66:	4b55      	ldr	r3, [pc, #340]	; (8003fbc <HAL_UART_MspInit+0x1d8>)
 8003e68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e6c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e6e:	4b53      	ldr	r3, [pc, #332]	; (8003fbc <HAL_UART_MspInit+0x1d8>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e74:	4b51      	ldr	r3, [pc, #324]	; (8003fbc <HAL_UART_MspInit+0x1d8>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e7a:	4b50      	ldr	r3, [pc, #320]	; (8003fbc <HAL_UART_MspInit+0x1d8>)
 8003e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e80:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e82:	4b4e      	ldr	r3, [pc, #312]	; (8003fbc <HAL_UART_MspInit+0x1d8>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e88:	4b4c      	ldr	r3, [pc, #304]	; (8003fbc <HAL_UART_MspInit+0x1d8>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003e8e:	4b4b      	ldr	r3, [pc, #300]	; (8003fbc <HAL_UART_MspInit+0x1d8>)
 8003e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e94:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e96:	4b49      	ldr	r3, [pc, #292]	; (8003fbc <HAL_UART_MspInit+0x1d8>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e9c:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <HAL_UART_MspInit+0x1d8>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003ea2:	4846      	ldr	r0, [pc, #280]	; (8003fbc <HAL_UART_MspInit+0x1d8>)
 8003ea4:	f000 ff66 	bl	8004d74 <HAL_DMA_Init>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003eae:	f7ff fd43 	bl	8003938 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a41      	ldr	r2, [pc, #260]	; (8003fbc <HAL_UART_MspInit+0x1d8>)
 8003eb6:	639a      	str	r2, [r3, #56]	; 0x38
 8003eb8:	4a40      	ldr	r2, [pc, #256]	; (8003fbc <HAL_UART_MspInit+0x1d8>)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2105      	movs	r1, #5
 8003ec2:	2025      	movs	r0, #37	; 0x25
 8003ec4:	f000 ff2c 	bl	8004d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ec8:	2025      	movs	r0, #37	; 0x25
 8003eca:	f000 ff45 	bl	8004d58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003ece:	e06a      	b.n	8003fa6 <HAL_UART_MspInit+0x1c2>
  else if(huart->Instance==USART2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a3b      	ldr	r2, [pc, #236]	; (8003fc4 <HAL_UART_MspInit+0x1e0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d12c      	bne.n	8003f34 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	4b35      	ldr	r3, [pc, #212]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	4a34      	ldr	r2, [pc, #208]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eea:	4b32      	ldr	r3, [pc, #200]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	4b2e      	ldr	r3, [pc, #184]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	4a2d      	ldr	r2, [pc, #180]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	6313      	str	r3, [r2, #48]	; 0x30
 8003f06:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003f12:	230c      	movs	r3, #12
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f16:	2302      	movs	r3, #2
 8003f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f22:	2307      	movs	r3, #7
 8003f24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4822      	ldr	r0, [pc, #136]	; (8003fb8 <HAL_UART_MspInit+0x1d4>)
 8003f2e:	f001 fb23 	bl	8005578 <HAL_GPIO_Init>
}
 8003f32:	e038      	b.n	8003fa6 <HAL_UART_MspInit+0x1c2>
  else if(huart->Instance==USART6)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a23      	ldr	r2, [pc, #140]	; (8003fc8 <HAL_UART_MspInit+0x1e4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d133      	bne.n	8003fa6 <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	4b1c      	ldr	r3, [pc, #112]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	4a1b      	ldr	r2, [pc, #108]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003f48:	f043 0320 	orr.w	r3, r3, #32
 8003f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f4e:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	4a14      	ldr	r2, [pc, #80]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003f64:	f043 0304 	orr.w	r3, r3, #4
 8003f68:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6a:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <HAL_UART_MspInit+0x1d0>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f76:	23c0      	movs	r3, #192	; 0xc0
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f82:	2303      	movs	r3, #3
 8003f84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003f86:	2308      	movs	r3, #8
 8003f88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f8e:	4619      	mov	r1, r3
 8003f90:	480e      	ldr	r0, [pc, #56]	; (8003fcc <HAL_UART_MspInit+0x1e8>)
 8003f92:	f001 faf1 	bl	8005578 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003f96:	2200      	movs	r2, #0
 8003f98:	2105      	movs	r1, #5
 8003f9a:	2047      	movs	r0, #71	; 0x47
 8003f9c:	f000 fec0 	bl	8004d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003fa0:	2047      	movs	r0, #71	; 0x47
 8003fa2:	f000 fed9 	bl	8004d58 <HAL_NVIC_EnableIRQ>
}
 8003fa6:	bf00      	nop
 8003fa8:	3738      	adds	r7, #56	; 0x38
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40011000 	.word	0x40011000
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40020000 	.word	0x40020000
 8003fbc:	2000799c 	.word	0x2000799c
 8003fc0:	40026440 	.word	0x40026440
 8003fc4:	40004400 	.word	0x40004400
 8003fc8:	40011400 	.word	0x40011400
 8003fcc:	40020800 	.word	0x40020800

08003fd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08c      	sub	sp, #48	; 0x30
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	2019      	movs	r0, #25
 8003fe6:	f000 fe9b 	bl	8004d20 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003fea:	2019      	movs	r0, #25
 8003fec:	f000 feb4 	bl	8004d58 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	4b1e      	ldr	r3, [pc, #120]	; (8004070 <HAL_InitTick+0xa0>)
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff8:	4a1d      	ldr	r2, [pc, #116]	; (8004070 <HAL_InitTick+0xa0>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6453      	str	r3, [r2, #68]	; 0x44
 8004000:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <HAL_InitTick+0xa0>)
 8004002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800400c:	f107 0210 	add.w	r2, r7, #16
 8004010:	f107 0314 	add.w	r3, r7, #20
 8004014:	4611      	mov	r1, r2
 8004016:	4618      	mov	r0, r3
 8004018:	f003 f898 	bl	800714c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800401c:	f003 f882 	bl	8007124 <HAL_RCC_GetPCLK2Freq>
 8004020:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004024:	4a13      	ldr	r2, [pc, #76]	; (8004074 <HAL_InitTick+0xa4>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	0c9b      	lsrs	r3, r3, #18
 800402c:	3b01      	subs	r3, #1
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004030:	4b11      	ldr	r3, [pc, #68]	; (8004078 <HAL_InitTick+0xa8>)
 8004032:	4a12      	ldr	r2, [pc, #72]	; (800407c <HAL_InitTick+0xac>)
 8004034:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <HAL_InitTick+0xa8>)
 8004038:	f240 32e7 	movw	r2, #999	; 0x3e7
 800403c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800403e:	4a0e      	ldr	r2, [pc, #56]	; (8004078 <HAL_InitTick+0xa8>)
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004044:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <HAL_InitTick+0xa8>)
 8004046:	2200      	movs	r2, #0
 8004048:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_InitTick+0xa8>)
 800404c:	2200      	movs	r2, #0
 800404e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004050:	4809      	ldr	r0, [pc, #36]	; (8004078 <HAL_InitTick+0xa8>)
 8004052:	f003 fe55 	bl	8007d00 <HAL_TIM_Base_Init>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d104      	bne.n	8004066 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800405c:	4806      	ldr	r0, [pc, #24]	; (8004078 <HAL_InitTick+0xa8>)
 800405e:	f003 fea9 	bl	8007db4 <HAL_TIM_Base_Start_IT>
 8004062:	4603      	mov	r3, r0
 8004064:	e000      	b.n	8004068 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
}
 8004068:	4618      	mov	r0, r3
 800406a:	3730      	adds	r7, #48	; 0x30
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40023800 	.word	0x40023800
 8004074:	431bde83 	.word	0x431bde83
 8004078:	20008f48 	.word	0x20008f48
 800407c:	40010000 	.word	0x40010000

08004080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004084:	e7fe      	b.n	8004084 <NMI_Handler+0x4>

08004086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004086:	b480      	push	{r7}
 8004088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800408a:	e7fe      	b.n	800408a <HardFault_Handler+0x4>

0800408c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004090:	e7fe      	b.n	8004090 <MemManage_Handler+0x4>

08004092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004096:	e7fe      	b.n	8004096 <BusFault_Handler+0x4>

08004098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800409c:	e7fe      	b.n	800409c <UsageFault_Handler+0x4>

0800409e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040a2:	bf00      	nop
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80040b0:	4802      	ldr	r0, [pc, #8]	; (80040bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80040b2:	f003 fee1 	bl	8007e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80040b6:	bf00      	nop
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20008f48 	.word	0x20008f48

080040c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80040c4:	4802      	ldr	r0, [pc, #8]	; (80040d0 <USART1_IRQHandler+0x10>)
 80040c6:	f004 fa1f 	bl	8008508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80040ca:	bf00      	nop
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	200079fc 	.word	0x200079fc

080040d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80040d8:	4802      	ldr	r0, [pc, #8]	; (80040e4 <DMA2_Stream0_IRQHandler+0x10>)
 80040da:	f000 ffe3 	bl	80050a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80040de:	bf00      	nop
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20007a50 	.word	0x20007a50

080040e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80040ec:	4802      	ldr	r0, [pc, #8]	; (80040f8 <DMA2_Stream2_IRQHandler+0x10>)
 80040ee:	f000 ffd9 	bl	80050a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80040f2:	bf00      	nop
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	2000799c 	.word	0x2000799c

080040fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004100:	4802      	ldr	r0, [pc, #8]	; (800410c <USART6_IRQHandler+0x10>)
 8004102:	f004 fa01 	bl	8008508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20007ba0 	.word	0x20007ba0

08004110 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
	return 1;
 8004114:	2301      	movs	r3, #1
}
 8004116:	4618      	mov	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <_kill>:

int _kill(int pid, int sig)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800412a:	f00c f8b3 	bl	8010294 <__errno>
 800412e:	4603      	mov	r3, r0
 8004130:	2216      	movs	r2, #22
 8004132:	601a      	str	r2, [r3, #0]
	return -1;
 8004134:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <_exit>:

void _exit (int status)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004148:	f04f 31ff 	mov.w	r1, #4294967295
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff ffe7 	bl	8004120 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004152:	e7fe      	b.n	8004152 <_exit+0x12>

08004154 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	e00a      	b.n	800417c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004166:	f3af 8000 	nop.w
 800416a:	4601      	mov	r1, r0
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	60ba      	str	r2, [r7, #8]
 8004172:	b2ca      	uxtb	r2, r1
 8004174:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	3301      	adds	r3, #1
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	429a      	cmp	r2, r3
 8004182:	dbf0      	blt.n	8004166 <_read+0x12>
	}

return len;
 8004184:	687b      	ldr	r3, [r7, #4]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b086      	sub	sp, #24
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	e009      	b.n	80041b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	60ba      	str	r2, [r7, #8]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	3301      	adds	r3, #1
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	dbf1      	blt.n	80041a0 <_write+0x12>
	}
	return len;
 80041bc:	687b      	ldr	r3, [r7, #4]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <_close>:

int _close(int file)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
	return -1;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041ee:	605a      	str	r2, [r3, #4]
	return 0;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <_isatty>:

int _isatty(int file)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
	return 1;
 8004206:	2301      	movs	r3, #1
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
	return 0;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
	...

08004230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004238:	4a14      	ldr	r2, [pc, #80]	; (800428c <_sbrk+0x5c>)
 800423a:	4b15      	ldr	r3, [pc, #84]	; (8004290 <_sbrk+0x60>)
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004244:	4b13      	ldr	r3, [pc, #76]	; (8004294 <_sbrk+0x64>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d102      	bne.n	8004252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800424c:	4b11      	ldr	r3, [pc, #68]	; (8004294 <_sbrk+0x64>)
 800424e:	4a12      	ldr	r2, [pc, #72]	; (8004298 <_sbrk+0x68>)
 8004250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <_sbrk+0x64>)
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4413      	add	r3, r2
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	429a      	cmp	r2, r3
 800425e:	d207      	bcs.n	8004270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004260:	f00c f818 	bl	8010294 <__errno>
 8004264:	4603      	mov	r3, r0
 8004266:	220c      	movs	r2, #12
 8004268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800426a:	f04f 33ff 	mov.w	r3, #4294967295
 800426e:	e009      	b.n	8004284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004270:	4b08      	ldr	r3, [pc, #32]	; (8004294 <_sbrk+0x64>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004276:	4b07      	ldr	r3, [pc, #28]	; (8004294 <_sbrk+0x64>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4413      	add	r3, r2
 800427e:	4a05      	ldr	r2, [pc, #20]	; (8004294 <_sbrk+0x64>)
 8004280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004282:	68fb      	ldr	r3, [r7, #12]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20018000 	.word	0x20018000
 8004290:	00000400 	.word	0x00000400
 8004294:	200003f4 	.word	0x200003f4
 8004298:	20009458 	.word	0x20009458

0800429c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <SystemInit+0x20>)
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a6:	4a05      	ldr	r2, [pc, #20]	; (80042bc <SystemInit+0x20>)
 80042a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042b0:	bf00      	nop
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	e000ed00 	.word	0xe000ed00

080042c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80042c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042c4:	480d      	ldr	r0, [pc, #52]	; (80042fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042c6:	490e      	ldr	r1, [pc, #56]	; (8004300 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042c8:	4a0e      	ldr	r2, [pc, #56]	; (8004304 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042cc:	e002      	b.n	80042d4 <LoopCopyDataInit>

080042ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042d2:	3304      	adds	r3, #4

080042d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042d8:	d3f9      	bcc.n	80042ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042da:	4a0b      	ldr	r2, [pc, #44]	; (8004308 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80042dc:	4c0b      	ldr	r4, [pc, #44]	; (800430c <LoopFillZerobss+0x26>)
  movs r3, #0
 80042de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042e0:	e001      	b.n	80042e6 <LoopFillZerobss>

080042e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042e4:	3204      	adds	r2, #4

080042e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042e8:	d3fb      	bcc.n	80042e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042ea:	f7ff ffd7 	bl	800429c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042ee:	f00b ffd7 	bl	80102a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042f2:	f7fd fd37 	bl	8001d64 <main>
  bx  lr    
 80042f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80042f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80042fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004300:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8004304:	08017020 	.word	0x08017020
  ldr r2, =_sbss
 8004308:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800430c:	20009458 	.word	0x20009458

08004310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004310:	e7fe      	b.n	8004310 <ADC_IRQHandler>
	...

08004314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004318:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <HAL_Init+0x40>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a0d      	ldr	r2, [pc, #52]	; (8004354 <HAL_Init+0x40>)
 800431e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004322:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_Init+0x40>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a0a      	ldr	r2, [pc, #40]	; (8004354 <HAL_Init+0x40>)
 800432a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800432e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004330:	4b08      	ldr	r3, [pc, #32]	; (8004354 <HAL_Init+0x40>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a07      	ldr	r2, [pc, #28]	; (8004354 <HAL_Init+0x40>)
 8004336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800433c:	2003      	movs	r0, #3
 800433e:	f000 fce4 	bl	8004d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004342:	2000      	movs	r0, #0
 8004344:	f7ff fe44 	bl	8003fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004348:	f7ff fbfc 	bl	8003b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40023c00 	.word	0x40023c00

08004358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_IncTick+0x20>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_IncTick+0x24>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4413      	add	r3, r2
 8004368:	4a04      	ldr	r2, [pc, #16]	; (800437c <HAL_IncTick+0x24>)
 800436a:	6013      	str	r3, [r2, #0]
}
 800436c:	bf00      	nop
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	2000000c 	.word	0x2000000c
 800437c:	20008f90 	.word	0x20008f90

08004380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  return uwTick;
 8004384:	4b03      	ldr	r3, [pc, #12]	; (8004394 <HAL_GetTick+0x14>)
 8004386:	681b      	ldr	r3, [r3, #0]
}
 8004388:	4618      	mov	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	20008f90 	.word	0x20008f90

08004398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043a0:	f7ff ffee 	bl	8004380 <HAL_GetTick>
 80043a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d005      	beq.n	80043be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043b2:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <HAL_Delay+0x44>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043be:	bf00      	nop
 80043c0:	f7ff ffde 	bl	8004380 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d8f7      	bhi.n	80043c0 <HAL_Delay+0x28>
  {
  }
}
 80043d0:	bf00      	nop
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	2000000c 	.word	0x2000000c

080043e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e033      	b.n	800445e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff fbcc 	bl	8003b9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	2b00      	cmp	r3, #0
 800441c:	d118      	bne.n	8004450 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004426:	f023 0302 	bic.w	r3, r3, #2
 800442a:	f043 0202 	orr.w	r2, r3, #2
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fa3e 	bl	80048b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f023 0303 	bic.w	r3, r3, #3
 8004446:	f043 0201 	orr.w	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	641a      	str	r2, [r3, #64]	; 0x40
 800444e:	e001      	b.n	8004454 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_ADC_Start_DMA+0x1e>
 8004482:	2302      	movs	r3, #2
 8004484:	e0ce      	b.n	8004624 <HAL_ADC_Start_DMA+0x1bc>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b01      	cmp	r3, #1
 800449a:	d018      	beq.n	80044ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80044ac:	4b5f      	ldr	r3, [pc, #380]	; (800462c <HAL_ADC_Start_DMA+0x1c4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a5f      	ldr	r2, [pc, #380]	; (8004630 <HAL_ADC_Start_DMA+0x1c8>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	0c9a      	lsrs	r2, r3, #18
 80044b8:	4613      	mov	r3, r2
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	4413      	add	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80044c0:	e002      	b.n	80044c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f9      	bne.n	80044c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044dc:	d107      	bne.n	80044ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	f040 8086 	bne.w	800460a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004506:	f023 0301 	bic.w	r3, r3, #1
 800450a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004528:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453c:	d106      	bne.n	800454c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004542:	f023 0206 	bic.w	r2, r3, #6
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	645a      	str	r2, [r3, #68]	; 0x44
 800454a:	e002      	b.n	8004552 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800455a:	4b36      	ldr	r3, [pc, #216]	; (8004634 <HAL_ADC_Start_DMA+0x1cc>)
 800455c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	4a35      	ldr	r2, [pc, #212]	; (8004638 <HAL_ADC_Start_DMA+0x1d0>)
 8004564:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	4a34      	ldr	r2, [pc, #208]	; (800463c <HAL_ADC_Start_DMA+0x1d4>)
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	4a33      	ldr	r2, [pc, #204]	; (8004640 <HAL_ADC_Start_DMA+0x1d8>)
 8004574:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800457e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800458e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800459e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	334c      	adds	r3, #76	; 0x4c
 80045aa:	4619      	mov	r1, r3
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f000 fc8e 	bl	8004ed0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 031f 	and.w	r3, r3, #31
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10f      	bne.n	80045e0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d129      	bne.n	8004622 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80045dc:	609a      	str	r2, [r3, #8]
 80045de:	e020      	b.n	8004622 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a17      	ldr	r2, [pc, #92]	; (8004644 <HAL_ADC_Start_DMA+0x1dc>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d11b      	bne.n	8004622 <HAL_ADC_Start_DMA+0x1ba>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d114      	bne.n	8004622 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	e00b      	b.n	8004622 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	f043 0210 	orr.w	r2, r3, #16
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461a:	f043 0201 	orr.w	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20000004 	.word	0x20000004
 8004630:	431bde83 	.word	0x431bde83
 8004634:	40012300 	.word	0x40012300
 8004638:	08004aad 	.word	0x08004aad
 800463c:	08004b67 	.word	0x08004b67
 8004640:	08004b83 	.word	0x08004b83
 8004644:	40012000 	.word	0x40012000

08004648 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_ADC_ConfigChannel+0x1c>
 8004688:	2302      	movs	r3, #2
 800468a:	e105      	b.n	8004898 <HAL_ADC_ConfigChannel+0x228>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b09      	cmp	r3, #9
 800469a:	d925      	bls.n	80046e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68d9      	ldr	r1, [r3, #12]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	4613      	mov	r3, r2
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	4413      	add	r3, r2
 80046b0:	3b1e      	subs	r3, #30
 80046b2:	2207      	movs	r2, #7
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	43da      	mvns	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	400a      	ands	r2, r1
 80046c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68d9      	ldr	r1, [r3, #12]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	4618      	mov	r0, r3
 80046d4:	4603      	mov	r3, r0
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	4403      	add	r3, r0
 80046da:	3b1e      	subs	r3, #30
 80046dc:	409a      	lsls	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	e022      	b.n	800472e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6919      	ldr	r1, [r3, #16]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	4613      	mov	r3, r2
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	4413      	add	r3, r2
 80046fc:	2207      	movs	r2, #7
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	43da      	mvns	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	400a      	ands	r2, r1
 800470a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6919      	ldr	r1, [r3, #16]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	4618      	mov	r0, r3
 800471e:	4603      	mov	r3, r0
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	4403      	add	r3, r0
 8004724:	409a      	lsls	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b06      	cmp	r3, #6
 8004734:	d824      	bhi.n	8004780 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	3b05      	subs	r3, #5
 8004748:	221f      	movs	r2, #31
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43da      	mvns	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	400a      	ands	r2, r1
 8004756:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	4618      	mov	r0, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	3b05      	subs	r3, #5
 8004772:	fa00 f203 	lsl.w	r2, r0, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	635a      	str	r2, [r3, #52]	; 0x34
 800477e:	e04c      	b.n	800481a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b0c      	cmp	r3, #12
 8004786:	d824      	bhi.n	80047d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	3b23      	subs	r3, #35	; 0x23
 800479a:	221f      	movs	r2, #31
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	43da      	mvns	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	400a      	ands	r2, r1
 80047a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	4618      	mov	r0, r3
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	3b23      	subs	r3, #35	; 0x23
 80047c4:	fa00 f203 	lsl.w	r2, r0, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
 80047d0:	e023      	b.n	800481a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	3b41      	subs	r3, #65	; 0x41
 80047e4:	221f      	movs	r2, #31
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43da      	mvns	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	400a      	ands	r2, r1
 80047f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	4618      	mov	r0, r3
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	3b41      	subs	r3, #65	; 0x41
 800480e:	fa00 f203 	lsl.w	r2, r0, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800481a:	4b22      	ldr	r3, [pc, #136]	; (80048a4 <HAL_ADC_ConfigChannel+0x234>)
 800481c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a21      	ldr	r2, [pc, #132]	; (80048a8 <HAL_ADC_ConfigChannel+0x238>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d109      	bne.n	800483c <HAL_ADC_ConfigChannel+0x1cc>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b12      	cmp	r3, #18
 800482e:	d105      	bne.n	800483c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a19      	ldr	r2, [pc, #100]	; (80048a8 <HAL_ADC_ConfigChannel+0x238>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d123      	bne.n	800488e <HAL_ADC_ConfigChannel+0x21e>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b10      	cmp	r3, #16
 800484c:	d003      	beq.n	8004856 <HAL_ADC_ConfigChannel+0x1e6>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b11      	cmp	r3, #17
 8004854:	d11b      	bne.n	800488e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b10      	cmp	r3, #16
 8004868:	d111      	bne.n	800488e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800486a:	4b10      	ldr	r3, [pc, #64]	; (80048ac <HAL_ADC_ConfigChannel+0x23c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a10      	ldr	r2, [pc, #64]	; (80048b0 <HAL_ADC_ConfigChannel+0x240>)
 8004870:	fba2 2303 	umull	r2, r3, r2, r3
 8004874:	0c9a      	lsrs	r2, r3, #18
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004880:	e002      	b.n	8004888 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	3b01      	subs	r3, #1
 8004886:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f9      	bne.n	8004882 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40012300 	.word	0x40012300
 80048a8:	40012000 	.word	0x40012000
 80048ac:	20000004 	.word	0x20000004
 80048b0:	431bde83 	.word	0x431bde83

080048b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048bc:	4b79      	ldr	r3, [pc, #484]	; (8004aa4 <ADC_Init+0x1f0>)
 80048be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6859      	ldr	r1, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	021a      	lsls	r2, r3, #8
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800490c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6859      	ldr	r1, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800492e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6899      	ldr	r1, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	4a58      	ldr	r2, [pc, #352]	; (8004aa8 <ADC_Init+0x1f4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d022      	beq.n	8004992 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800495a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6899      	ldr	r1, [r3, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800497c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6899      	ldr	r1, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	609a      	str	r2, [r3, #8]
 8004990:	e00f      	b.n	80049b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0202 	bic.w	r2, r2, #2
 80049c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6899      	ldr	r1, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	7e1b      	ldrb	r3, [r3, #24]
 80049cc:	005a      	lsls	r2, r3, #1
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01b      	beq.n	8004a18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80049fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6859      	ldr	r1, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	035a      	lsls	r2, r3, #13
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]
 8004a16:	e007      	b.n	8004a28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	051a      	lsls	r2, r3, #20
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6899      	ldr	r1, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a6a:	025a      	lsls	r2, r3, #9
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689a      	ldr	r2, [r3, #8]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6899      	ldr	r1, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	029a      	lsls	r2, r3, #10
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	609a      	str	r2, [r3, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	40012300 	.word	0x40012300
 8004aa8:	0f000001 	.word	0x0f000001

08004aac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d13c      	bne.n	8004b40 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d12b      	bne.n	8004b38 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d127      	bne.n	8004b38 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d006      	beq.n	8004b04 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d119      	bne.n	8004b38 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0220 	bic.w	r2, r2, #32
 8004b12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d105      	bne.n	8004b38 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	f043 0201 	orr.w	r2, r3, #1
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7fc ff97 	bl	8001a6c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b3e:	e00e      	b.n	8004b5e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f7ff fd85 	bl	800465c <HAL_ADC_ErrorCallback>
}
 8004b52:	e004      	b.n	8004b5e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	4798      	blx	r3
}
 8004b5e:	bf00      	nop
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f7ff fd67 	bl	8004648 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2240      	movs	r2, #64	; 0x40
 8004b94:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	f043 0204 	orr.w	r2, r3, #4
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff fd5a 	bl	800465c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bc0:	4b0c      	ldr	r3, [pc, #48]	; (8004bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bcc:	4013      	ands	r3, r2
 8004bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004be2:	4a04      	ldr	r2, [pc, #16]	; (8004bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	60d3      	str	r3, [r2, #12]
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	e000ed00 	.word	0xe000ed00

08004bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bfc:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <__NVIC_GetPriorityGrouping+0x18>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	0a1b      	lsrs	r3, r3, #8
 8004c02:	f003 0307 	and.w	r3, r3, #7
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	e000ed00 	.word	0xe000ed00

08004c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	db0b      	blt.n	8004c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	f003 021f 	and.w	r2, r3, #31
 8004c2c:	4907      	ldr	r1, [pc, #28]	; (8004c4c <__NVIC_EnableIRQ+0x38>)
 8004c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c32:	095b      	lsrs	r3, r3, #5
 8004c34:	2001      	movs	r0, #1
 8004c36:	fa00 f202 	lsl.w	r2, r0, r2
 8004c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	e000e100 	.word	0xe000e100

08004c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	4603      	mov	r3, r0
 8004c58:	6039      	str	r1, [r7, #0]
 8004c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	db0a      	blt.n	8004c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	490c      	ldr	r1, [pc, #48]	; (8004c9c <__NVIC_SetPriority+0x4c>)
 8004c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6e:	0112      	lsls	r2, r2, #4
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	440b      	add	r3, r1
 8004c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c78:	e00a      	b.n	8004c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	4908      	ldr	r1, [pc, #32]	; (8004ca0 <__NVIC_SetPriority+0x50>)
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	3b04      	subs	r3, #4
 8004c88:	0112      	lsls	r2, r2, #4
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	761a      	strb	r2, [r3, #24]
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	e000e100 	.word	0xe000e100
 8004ca0:	e000ed00 	.word	0xe000ed00

08004ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b089      	sub	sp, #36	; 0x24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f1c3 0307 	rsb	r3, r3, #7
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	bf28      	it	cs
 8004cc2:	2304      	movcs	r3, #4
 8004cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	2b06      	cmp	r3, #6
 8004ccc:	d902      	bls.n	8004cd4 <NVIC_EncodePriority+0x30>
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	3b03      	subs	r3, #3
 8004cd2:	e000      	b.n	8004cd6 <NVIC_EncodePriority+0x32>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43da      	mvns	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	401a      	ands	r2, r3
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cec:	f04f 31ff 	mov.w	r1, #4294967295
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf6:	43d9      	mvns	r1, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cfc:	4313      	orrs	r3, r2
         );
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3724      	adds	r7, #36	; 0x24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff ff4c 	bl	8004bb0 <__NVIC_SetPriorityGrouping>
}
 8004d18:	bf00      	nop
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d32:	f7ff ff61 	bl	8004bf8 <__NVIC_GetPriorityGrouping>
 8004d36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	68b9      	ldr	r1, [r7, #8]
 8004d3c:	6978      	ldr	r0, [r7, #20]
 8004d3e:	f7ff ffb1 	bl	8004ca4 <NVIC_EncodePriority>
 8004d42:	4602      	mov	r2, r0
 8004d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d48:	4611      	mov	r1, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff ff80 	bl	8004c50 <__NVIC_SetPriority>
}
 8004d50:	bf00      	nop
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff ff54 	bl	8004c14 <__NVIC_EnableIRQ>
}
 8004d6c:	bf00      	nop
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d80:	f7ff fafe 	bl	8004380 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e099      	b.n	8004ec4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0201 	bic.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004db0:	e00f      	b.n	8004dd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004db2:	f7ff fae5 	bl	8004380 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b05      	cmp	r3, #5
 8004dbe:	d908      	bls.n	8004dd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2203      	movs	r2, #3
 8004dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e078      	b.n	8004ec4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1e8      	bne.n	8004db2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4b38      	ldr	r3, [pc, #224]	; (8004ecc <HAL_DMA_Init+0x158>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d107      	bne.n	8004e3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	4313      	orrs	r3, r2
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f023 0307 	bic.w	r3, r3, #7
 8004e52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d117      	bne.n	8004e96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00e      	beq.n	8004e96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fb01 	bl	8005480 <DMA_CheckFifoParam>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d008      	beq.n	8004e96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2240      	movs	r2, #64	; 0x40
 8004e88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e92:	2301      	movs	r3, #1
 8004e94:	e016      	b.n	8004ec4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fab8 	bl	8005414 <DMA_CalcBaseAndBitshift>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eac:	223f      	movs	r2, #63	; 0x3f
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	f010803f 	.word	0xf010803f

08004ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <HAL_DMA_Start_IT+0x26>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e040      	b.n	8004f78 <HAL_DMA_Start_IT+0xa8>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d12f      	bne.n	8004f6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 fa4a 	bl	80053b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f28:	223f      	movs	r2, #63	; 0x3f
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0216 	orr.w	r2, r2, #22
 8004f3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d007      	beq.n	8004f58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0208 	orr.w	r2, r2, #8
 8004f56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0201 	orr.w	r2, r2, #1
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	e005      	b.n	8004f76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f72:	2302      	movs	r3, #2
 8004f74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f8e:	f7ff f9f7 	bl	8004380 <HAL_GetTick>
 8004f92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d008      	beq.n	8004fb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2280      	movs	r2, #128	; 0x80
 8004fa4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e052      	b.n	8005058 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0216 	bic.w	r2, r2, #22
 8004fc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695a      	ldr	r2, [r3, #20]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <HAL_DMA_Abort+0x62>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0208 	bic.w	r2, r2, #8
 8004ff0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0201 	bic.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005002:	e013      	b.n	800502c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005004:	f7ff f9bc 	bl	8004380 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b05      	cmp	r3, #5
 8005010:	d90c      	bls.n	800502c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2220      	movs	r2, #32
 8005016:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2203      	movs	r2, #3
 8005024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e015      	b.n	8005058 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e4      	bne.n	8005004 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503e:	223f      	movs	r2, #63	; 0x3f
 8005040:	409a      	lsls	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d004      	beq.n	800507e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2280      	movs	r2, #128	; 0x80
 8005078:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e00c      	b.n	8005098 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2205      	movs	r2, #5
 8005082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0201 	bic.w	r2, r2, #1
 8005094:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050b0:	4b92      	ldr	r3, [pc, #584]	; (80052fc <HAL_DMA_IRQHandler+0x258>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a92      	ldr	r2, [pc, #584]	; (8005300 <HAL_DMA_IRQHandler+0x25c>)
 80050b6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ba:	0a9b      	lsrs	r3, r3, #10
 80050bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ce:	2208      	movs	r2, #8
 80050d0:	409a      	lsls	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01a      	beq.n	8005110 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d013      	beq.n	8005110 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0204 	bic.w	r2, r2, #4
 80050f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fc:	2208      	movs	r2, #8
 80050fe:	409a      	lsls	r2, r3
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005108:	f043 0201 	orr.w	r2, r3, #1
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005114:	2201      	movs	r2, #1
 8005116:	409a      	lsls	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4013      	ands	r3, r2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d012      	beq.n	8005146 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005132:	2201      	movs	r2, #1
 8005134:	409a      	lsls	r2, r3
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513e:	f043 0202 	orr.w	r2, r3, #2
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514a:	2204      	movs	r2, #4
 800514c:	409a      	lsls	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d012      	beq.n	800517c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00b      	beq.n	800517c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005168:	2204      	movs	r2, #4
 800516a:	409a      	lsls	r2, r3
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005174:	f043 0204 	orr.w	r2, r3, #4
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005180:	2210      	movs	r2, #16
 8005182:	409a      	lsls	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d043      	beq.n	8005214 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d03c      	beq.n	8005214 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519e:	2210      	movs	r2, #16
 80051a0:	409a      	lsls	r2, r3
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d018      	beq.n	80051e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d108      	bne.n	80051d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d024      	beq.n	8005214 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	4798      	blx	r3
 80051d2:	e01f      	b.n	8005214 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01b      	beq.n	8005214 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
 80051e4:	e016      	b.n	8005214 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d107      	bne.n	8005204 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0208 	bic.w	r2, r2, #8
 8005202:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005218:	2220      	movs	r2, #32
 800521a:	409a      	lsls	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4013      	ands	r3, r2
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 808e 	beq.w	8005342 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0310 	and.w	r3, r3, #16
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8086 	beq.w	8005342 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523a:	2220      	movs	r2, #32
 800523c:	409a      	lsls	r2, r3
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b05      	cmp	r3, #5
 800524c:	d136      	bne.n	80052bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0216 	bic.w	r2, r2, #22
 800525c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695a      	ldr	r2, [r3, #20]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800526c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d103      	bne.n	800527e <HAL_DMA_IRQHandler+0x1da>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0208 	bic.w	r2, r2, #8
 800528c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005292:	223f      	movs	r2, #63	; 0x3f
 8005294:	409a      	lsls	r2, r3
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d07d      	beq.n	80053ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	4798      	blx	r3
        }
        return;
 80052ba:	e078      	b.n	80053ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01c      	beq.n	8005304 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d108      	bne.n	80052ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d030      	beq.n	8005342 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	4798      	blx	r3
 80052e8:	e02b      	b.n	8005342 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d027      	beq.n	8005342 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	4798      	blx	r3
 80052fa:	e022      	b.n	8005342 <HAL_DMA_IRQHandler+0x29e>
 80052fc:	20000004 	.word	0x20000004
 8005300:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10f      	bne.n	8005332 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0210 	bic.w	r2, r2, #16
 8005320:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005346:	2b00      	cmp	r3, #0
 8005348:	d032      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d022      	beq.n	800539c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2205      	movs	r2, #5
 800535a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0201 	bic.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	3301      	adds	r3, #1
 8005372:	60bb      	str	r3, [r7, #8]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	429a      	cmp	r2, r3
 8005378:	d307      	bcc.n	800538a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1f2      	bne.n	800536e <HAL_DMA_IRQHandler+0x2ca>
 8005388:	e000      	b.n	800538c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800538a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	4798      	blx	r3
 80053ac:	e000      	b.n	80053b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80053ae:	bf00      	nop
    }
  }
}
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop

080053b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b40      	cmp	r3, #64	; 0x40
 80053e4:	d108      	bne.n	80053f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053f6:	e007      	b.n	8005408 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	60da      	str	r2, [r3, #12]
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	3b10      	subs	r3, #16
 8005424:	4a14      	ldr	r2, [pc, #80]	; (8005478 <DMA_CalcBaseAndBitshift+0x64>)
 8005426:	fba2 2303 	umull	r2, r3, r2, r3
 800542a:	091b      	lsrs	r3, r3, #4
 800542c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800542e:	4a13      	ldr	r2, [pc, #76]	; (800547c <DMA_CalcBaseAndBitshift+0x68>)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b03      	cmp	r3, #3
 8005440:	d909      	bls.n	8005456 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	1d1a      	adds	r2, r3, #4
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	659a      	str	r2, [r3, #88]	; 0x58
 8005454:	e007      	b.n	8005466 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800545e:	f023 0303 	bic.w	r3, r3, #3
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	aaaaaaab 	.word	0xaaaaaaab
 800547c:	080168a4 	.word	0x080168a4

08005480 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005490:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d11f      	bne.n	80054da <DMA_CheckFifoParam+0x5a>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b03      	cmp	r3, #3
 800549e:	d856      	bhi.n	800554e <DMA_CheckFifoParam+0xce>
 80054a0:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <DMA_CheckFifoParam+0x28>)
 80054a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a6:	bf00      	nop
 80054a8:	080054b9 	.word	0x080054b9
 80054ac:	080054cb 	.word	0x080054cb
 80054b0:	080054b9 	.word	0x080054b9
 80054b4:	0800554f 	.word	0x0800554f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d046      	beq.n	8005552 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054c8:	e043      	b.n	8005552 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054d2:	d140      	bne.n	8005556 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054d8:	e03d      	b.n	8005556 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e2:	d121      	bne.n	8005528 <DMA_CheckFifoParam+0xa8>
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d837      	bhi.n	800555a <DMA_CheckFifoParam+0xda>
 80054ea:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <DMA_CheckFifoParam+0x70>)
 80054ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f0:	08005501 	.word	0x08005501
 80054f4:	08005507 	.word	0x08005507
 80054f8:	08005501 	.word	0x08005501
 80054fc:	08005519 	.word	0x08005519
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
      break;
 8005504:	e030      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d025      	beq.n	800555e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005516:	e022      	b.n	800555e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005520:	d11f      	bne.n	8005562 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005526:	e01c      	b.n	8005562 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b02      	cmp	r3, #2
 800552c:	d903      	bls.n	8005536 <DMA_CheckFifoParam+0xb6>
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b03      	cmp	r3, #3
 8005532:	d003      	beq.n	800553c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005534:	e018      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
      break;
 800553a:	e015      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00e      	beq.n	8005566 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	73fb      	strb	r3, [r7, #15]
      break;
 800554c:	e00b      	b.n	8005566 <DMA_CheckFifoParam+0xe6>
      break;
 800554e:	bf00      	nop
 8005550:	e00a      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
      break;
 8005552:	bf00      	nop
 8005554:	e008      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
      break;
 8005556:	bf00      	nop
 8005558:	e006      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
      break;
 800555a:	bf00      	nop
 800555c:	e004      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
      break;
 800555e:	bf00      	nop
 8005560:	e002      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
      break;   
 8005562:	bf00      	nop
 8005564:	e000      	b.n	8005568 <DMA_CheckFifoParam+0xe8>
      break;
 8005566:	bf00      	nop
    }
  } 
  
  return status; 
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop

08005578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005578:	b480      	push	{r7}
 800557a:	b089      	sub	sp, #36	; 0x24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005586:	2300      	movs	r3, #0
 8005588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800558a:	2300      	movs	r3, #0
 800558c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800558e:	2300      	movs	r3, #0
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	e159      	b.n	8005848 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005594:	2201      	movs	r2, #1
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4013      	ands	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	f040 8148 	bne.w	8005842 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d005      	beq.n	80055ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d130      	bne.n	800562c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	2203      	movs	r2, #3
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	43db      	mvns	r3, r3
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	4013      	ands	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005600:	2201      	movs	r2, #1
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	43db      	mvns	r3, r3
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4013      	ands	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	f003 0201 	and.w	r2, r3, #1
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	4313      	orrs	r3, r2
 8005624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f003 0303 	and.w	r3, r3, #3
 8005634:	2b03      	cmp	r3, #3
 8005636:	d017      	beq.n	8005668 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	2203      	movs	r2, #3
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	43db      	mvns	r3, r3
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	4013      	ands	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	4313      	orrs	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f003 0303 	and.w	r3, r3, #3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d123      	bne.n	80056bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	08da      	lsrs	r2, r3, #3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3208      	adds	r2, #8
 800567c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	220f      	movs	r2, #15
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	43db      	mvns	r3, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4013      	ands	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	08da      	lsrs	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3208      	adds	r2, #8
 80056b6:	69b9      	ldr	r1, [r7, #24]
 80056b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	2203      	movs	r2, #3
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	43db      	mvns	r3, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4013      	ands	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f003 0203 	and.w	r2, r3, #3
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 80a2 	beq.w	8005842 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	4b57      	ldr	r3, [pc, #348]	; (8005860 <HAL_GPIO_Init+0x2e8>)
 8005704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005706:	4a56      	ldr	r2, [pc, #344]	; (8005860 <HAL_GPIO_Init+0x2e8>)
 8005708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800570c:	6453      	str	r3, [r2, #68]	; 0x44
 800570e:	4b54      	ldr	r3, [pc, #336]	; (8005860 <HAL_GPIO_Init+0x2e8>)
 8005710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800571a:	4a52      	ldr	r2, [pc, #328]	; (8005864 <HAL_GPIO_Init+0x2ec>)
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	089b      	lsrs	r3, r3, #2
 8005720:	3302      	adds	r3, #2
 8005722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	220f      	movs	r2, #15
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	43db      	mvns	r3, r3
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	4013      	ands	r3, r2
 800573c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a49      	ldr	r2, [pc, #292]	; (8005868 <HAL_GPIO_Init+0x2f0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d019      	beq.n	800577a <HAL_GPIO_Init+0x202>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a48      	ldr	r2, [pc, #288]	; (800586c <HAL_GPIO_Init+0x2f4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_GPIO_Init+0x1fe>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a47      	ldr	r2, [pc, #284]	; (8005870 <HAL_GPIO_Init+0x2f8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00d      	beq.n	8005772 <HAL_GPIO_Init+0x1fa>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a46      	ldr	r2, [pc, #280]	; (8005874 <HAL_GPIO_Init+0x2fc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d007      	beq.n	800576e <HAL_GPIO_Init+0x1f6>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a45      	ldr	r2, [pc, #276]	; (8005878 <HAL_GPIO_Init+0x300>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d101      	bne.n	800576a <HAL_GPIO_Init+0x1f2>
 8005766:	2304      	movs	r3, #4
 8005768:	e008      	b.n	800577c <HAL_GPIO_Init+0x204>
 800576a:	2307      	movs	r3, #7
 800576c:	e006      	b.n	800577c <HAL_GPIO_Init+0x204>
 800576e:	2303      	movs	r3, #3
 8005770:	e004      	b.n	800577c <HAL_GPIO_Init+0x204>
 8005772:	2302      	movs	r3, #2
 8005774:	e002      	b.n	800577c <HAL_GPIO_Init+0x204>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <HAL_GPIO_Init+0x204>
 800577a:	2300      	movs	r3, #0
 800577c:	69fa      	ldr	r2, [r7, #28]
 800577e:	f002 0203 	and.w	r2, r2, #3
 8005782:	0092      	lsls	r2, r2, #2
 8005784:	4093      	lsls	r3, r2
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	4313      	orrs	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800578c:	4935      	ldr	r1, [pc, #212]	; (8005864 <HAL_GPIO_Init+0x2ec>)
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	089b      	lsrs	r3, r3, #2
 8005792:	3302      	adds	r3, #2
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800579a:	4b38      	ldr	r3, [pc, #224]	; (800587c <HAL_GPIO_Init+0x304>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	43db      	mvns	r3, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4013      	ands	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057be:	4a2f      	ldr	r2, [pc, #188]	; (800587c <HAL_GPIO_Init+0x304>)
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80057c4:	4b2d      	ldr	r3, [pc, #180]	; (800587c <HAL_GPIO_Init+0x304>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	43db      	mvns	r3, r3
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4013      	ands	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057e8:	4a24      	ldr	r2, [pc, #144]	; (800587c <HAL_GPIO_Init+0x304>)
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057ee:	4b23      	ldr	r3, [pc, #140]	; (800587c <HAL_GPIO_Init+0x304>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	43db      	mvns	r3, r3
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	4013      	ands	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005812:	4a1a      	ldr	r2, [pc, #104]	; (800587c <HAL_GPIO_Init+0x304>)
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005818:	4b18      	ldr	r3, [pc, #96]	; (800587c <HAL_GPIO_Init+0x304>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	43db      	mvns	r3, r3
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	4013      	ands	r3, r2
 8005826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800583c:	4a0f      	ldr	r2, [pc, #60]	; (800587c <HAL_GPIO_Init+0x304>)
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	3301      	adds	r3, #1
 8005846:	61fb      	str	r3, [r7, #28]
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	2b0f      	cmp	r3, #15
 800584c:	f67f aea2 	bls.w	8005594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	3724      	adds	r7, #36	; 0x24
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40023800 	.word	0x40023800
 8005864:	40013800 	.word	0x40013800
 8005868:	40020000 	.word	0x40020000
 800586c:	40020400 	.word	0x40020400
 8005870:	40020800 	.word	0x40020800
 8005874:	40020c00 	.word	0x40020c00
 8005878:	40021000 	.word	0x40021000
 800587c:	40013c00 	.word	0x40013c00

08005880 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	887b      	ldrh	r3, [r7, #2]
 8005892:	4013      	ands	r3, r2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005898:	2301      	movs	r3, #1
 800589a:	73fb      	strb	r3, [r7, #15]
 800589c:	e001      	b.n	80058a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800589e:	2300      	movs	r3, #0
 80058a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	807b      	strh	r3, [r7, #2]
 80058bc:	4613      	mov	r3, r2
 80058be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058c0:	787b      	ldrb	r3, [r7, #1]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058c6:	887a      	ldrh	r2, [r7, #2]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058cc:	e003      	b.n	80058d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058ce:	887b      	ldrh	r3, [r7, #2]
 80058d0:	041a      	lsls	r2, r3, #16
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	619a      	str	r2, [r3, #24]
}
 80058d6:	bf00      	nop
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
	...

080058e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e12b      	b.n	8005b4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d106      	bne.n	8005910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7fe f9da 	bl	8003cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2224      	movs	r2, #36	; 0x24
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0201 	bic.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005936:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005946:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005948:	f001 fbd8 	bl	80070fc <HAL_RCC_GetPCLK1Freq>
 800594c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	4a81      	ldr	r2, [pc, #516]	; (8005b58 <HAL_I2C_Init+0x274>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d807      	bhi.n	8005968 <HAL_I2C_Init+0x84>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4a80      	ldr	r2, [pc, #512]	; (8005b5c <HAL_I2C_Init+0x278>)
 800595c:	4293      	cmp	r3, r2
 800595e:	bf94      	ite	ls
 8005960:	2301      	movls	r3, #1
 8005962:	2300      	movhi	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	e006      	b.n	8005976 <HAL_I2C_Init+0x92>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4a7d      	ldr	r2, [pc, #500]	; (8005b60 <HAL_I2C_Init+0x27c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	bf94      	ite	ls
 8005970:	2301      	movls	r3, #1
 8005972:	2300      	movhi	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e0e7      	b.n	8005b4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4a78      	ldr	r2, [pc, #480]	; (8005b64 <HAL_I2C_Init+0x280>)
 8005982:	fba2 2303 	umull	r2, r3, r2, r3
 8005986:	0c9b      	lsrs	r3, r3, #18
 8005988:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	4a6a      	ldr	r2, [pc, #424]	; (8005b58 <HAL_I2C_Init+0x274>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d802      	bhi.n	80059b8 <HAL_I2C_Init+0xd4>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	3301      	adds	r3, #1
 80059b6:	e009      	b.n	80059cc <HAL_I2C_Init+0xe8>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059be:	fb02 f303 	mul.w	r3, r2, r3
 80059c2:	4a69      	ldr	r2, [pc, #420]	; (8005b68 <HAL_I2C_Init+0x284>)
 80059c4:	fba2 2303 	umull	r2, r3, r2, r3
 80059c8:	099b      	lsrs	r3, r3, #6
 80059ca:	3301      	adds	r3, #1
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6812      	ldr	r2, [r2, #0]
 80059d0:	430b      	orrs	r3, r1
 80059d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	495c      	ldr	r1, [pc, #368]	; (8005b58 <HAL_I2C_Init+0x274>)
 80059e8:	428b      	cmp	r3, r1
 80059ea:	d819      	bhi.n	8005a20 <HAL_I2C_Init+0x13c>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	1e59      	subs	r1, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80059fa:	1c59      	adds	r1, r3, #1
 80059fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a00:	400b      	ands	r3, r1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <HAL_I2C_Init+0x138>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	1e59      	subs	r1, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a14:	3301      	adds	r3, #1
 8005a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a1a:	e051      	b.n	8005ac0 <HAL_I2C_Init+0x1dc>
 8005a1c:	2304      	movs	r3, #4
 8005a1e:	e04f      	b.n	8005ac0 <HAL_I2C_Init+0x1dc>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d111      	bne.n	8005a4c <HAL_I2C_Init+0x168>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	1e58      	subs	r0, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6859      	ldr	r1, [r3, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	440b      	add	r3, r1
 8005a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	bf0c      	ite	eq
 8005a44:	2301      	moveq	r3, #1
 8005a46:	2300      	movne	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	e012      	b.n	8005a72 <HAL_I2C_Init+0x18e>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	1e58      	subs	r0, r3, #1
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6859      	ldr	r1, [r3, #4]
 8005a54:	460b      	mov	r3, r1
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	0099      	lsls	r1, r3, #2
 8005a5c:	440b      	add	r3, r1
 8005a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a62:	3301      	adds	r3, #1
 8005a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	bf0c      	ite	eq
 8005a6c:	2301      	moveq	r3, #1
 8005a6e:	2300      	movne	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <HAL_I2C_Init+0x196>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e022      	b.n	8005ac0 <HAL_I2C_Init+0x1dc>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10e      	bne.n	8005aa0 <HAL_I2C_Init+0x1bc>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	1e58      	subs	r0, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6859      	ldr	r1, [r3, #4]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	440b      	add	r3, r1
 8005a90:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a94:	3301      	adds	r3, #1
 8005a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a9e:	e00f      	b.n	8005ac0 <HAL_I2C_Init+0x1dc>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	1e58      	subs	r0, r3, #1
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6859      	ldr	r1, [r3, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	0099      	lsls	r1, r3, #2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	6809      	ldr	r1, [r1, #0]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69da      	ldr	r2, [r3, #28]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005aee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6911      	ldr	r1, [r2, #16]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	68d2      	ldr	r2, [r2, #12]
 8005afa:	4311      	orrs	r1, r2
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6812      	ldr	r2, [r2, #0]
 8005b00:	430b      	orrs	r3, r1
 8005b02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695a      	ldr	r2, [r3, #20]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	000186a0 	.word	0x000186a0
 8005b5c:	001e847f 	.word	0x001e847f
 8005b60:	003d08ff 	.word	0x003d08ff
 8005b64:	431bde83 	.word	0x431bde83
 8005b68:	10624dd3 	.word	0x10624dd3

08005b6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	4608      	mov	r0, r1
 8005b76:	4611      	mov	r1, r2
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	817b      	strh	r3, [r7, #10]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	813b      	strh	r3, [r7, #8]
 8005b82:	4613      	mov	r3, r2
 8005b84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b86:	f7fe fbfb 	bl	8004380 <HAL_GetTick>
 8005b8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	f040 80d9 	bne.w	8005d4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	2319      	movs	r3, #25
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	496d      	ldr	r1, [pc, #436]	; (8005d58 <HAL_I2C_Mem_Write+0x1ec>)
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 fc7f 	bl	80064a8 <I2C_WaitOnFlagUntilTimeout>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e0cc      	b.n	8005d4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_I2C_Mem_Write+0x56>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e0c5      	b.n	8005d4e <HAL_I2C_Mem_Write+0x1e2>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d007      	beq.n	8005be8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0201 	orr.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2221      	movs	r2, #33	; 0x21
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2240      	movs	r2, #64	; 0x40
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a3a      	ldr	r2, [r7, #32]
 8005c12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4a4d      	ldr	r2, [pc, #308]	; (8005d5c <HAL_I2C_Mem_Write+0x1f0>)
 8005c28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c2a:	88f8      	ldrh	r0, [r7, #6]
 8005c2c:	893a      	ldrh	r2, [r7, #8]
 8005c2e:	8979      	ldrh	r1, [r7, #10]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	9301      	str	r3, [sp, #4]
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	4603      	mov	r3, r0
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 fab6 	bl	80061ac <I2C_RequestMemoryWrite>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d052      	beq.n	8005cec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e081      	b.n	8005d4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 fd00 	bl	8006654 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00d      	beq.n	8005c76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d107      	bne.n	8005c72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e06b      	b.n	8005d4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	781a      	ldrb	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d11b      	bne.n	8005cec <HAL_I2C_Mem_Write+0x180>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d017      	beq.n	8005cec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	781a      	ldrb	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1aa      	bne.n	8005c4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 fcec 	bl	80066d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00d      	beq.n	8005d20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d107      	bne.n	8005d1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e016      	b.n	8005d4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	e000      	b.n	8005d4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d4c:	2302      	movs	r3, #2
  }
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	00100002 	.word	0x00100002
 8005d5c:	ffff0000 	.word	0xffff0000

08005d60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08c      	sub	sp, #48	; 0x30
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	4608      	mov	r0, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	4603      	mov	r3, r0
 8005d70:	817b      	strh	r3, [r7, #10]
 8005d72:	460b      	mov	r3, r1
 8005d74:	813b      	strh	r3, [r7, #8]
 8005d76:	4613      	mov	r3, r2
 8005d78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d7a:	f7fe fb01 	bl	8004380 <HAL_GetTick>
 8005d7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	f040 8208 	bne.w	800619e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	2319      	movs	r3, #25
 8005d94:	2201      	movs	r2, #1
 8005d96:	497b      	ldr	r1, [pc, #492]	; (8005f84 <HAL_I2C_Mem_Read+0x224>)
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 fb85 	bl	80064a8 <I2C_WaitOnFlagUntilTimeout>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005da4:	2302      	movs	r3, #2
 8005da6:	e1fb      	b.n	80061a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_I2C_Mem_Read+0x56>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e1f4      	b.n	80061a0 <HAL_I2C_Mem_Read+0x440>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d007      	beq.n	8005ddc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2222      	movs	r2, #34	; 0x22
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2240      	movs	r2, #64	; 0x40
 8005df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4a5b      	ldr	r2, [pc, #364]	; (8005f88 <HAL_I2C_Mem_Read+0x228>)
 8005e1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e1e:	88f8      	ldrh	r0, [r7, #6]
 8005e20:	893a      	ldrh	r2, [r7, #8]
 8005e22:	8979      	ldrh	r1, [r7, #10]
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	9301      	str	r3, [sp, #4]
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 fa52 	bl	80062d8 <I2C_RequestMemoryRead>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e1b0      	b.n	80061a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d113      	bne.n	8005e6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e46:	2300      	movs	r3, #0
 8005e48:	623b      	str	r3, [r7, #32]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	623b      	str	r3, [r7, #32]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	623b      	str	r3, [r7, #32]
 8005e5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	e184      	b.n	8006178 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d11b      	bne.n	8005eae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e86:	2300      	movs	r3, #0
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	61fb      	str	r3, [r7, #28]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	e164      	b.n	8006178 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d11b      	bne.n	8005eee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ed4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	e144      	b.n	8006178 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005f04:	e138      	b.n	8006178 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	f200 80f1 	bhi.w	80060f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d123      	bne.n	8005f60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 fc1b 	bl	8006758 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e139      	b.n	80061a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691a      	ldr	r2, [r3, #16]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f5e:	e10b      	b.n	8006178 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d14e      	bne.n	8006006 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6e:	2200      	movs	r2, #0
 8005f70:	4906      	ldr	r1, [pc, #24]	; (8005f8c <HAL_I2C_Mem_Read+0x22c>)
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 fa98 	bl	80064a8 <I2C_WaitOnFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d008      	beq.n	8005f90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e10e      	b.n	80061a0 <HAL_I2C_Mem_Read+0x440>
 8005f82:	bf00      	nop
 8005f84:	00100002 	.word	0x00100002
 8005f88:	ffff0000 	.word	0xffff0000
 8005f8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691a      	ldr	r2, [r3, #16]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691a      	ldr	r2, [r3, #16]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006004:	e0b8      	b.n	8006178 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	2200      	movs	r2, #0
 800600e:	4966      	ldr	r1, [pc, #408]	; (80061a8 <HAL_I2C_Mem_Read+0x448>)
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 fa49 	bl	80064a8 <I2C_WaitOnFlagUntilTimeout>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e0bf      	b.n	80061a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800602e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	691a      	ldr	r2, [r3, #16]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800604c:	3b01      	subs	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006058:	b29b      	uxth	r3, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006068:	2200      	movs	r2, #0
 800606a:	494f      	ldr	r1, [pc, #316]	; (80061a8 <HAL_I2C_Mem_Read+0x448>)
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 fa1b 	bl	80064a8 <I2C_WaitOnFlagUntilTimeout>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e091      	b.n	80061a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800608a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691a      	ldr	r2, [r3, #16]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060f0:	e042      	b.n	8006178 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 fb2e 	bl	8006758 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e04c      	b.n	80061a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	691a      	ldr	r2, [r3, #16]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006122:	3b01      	subs	r3, #1
 8006124:	b29a      	uxth	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b04      	cmp	r3, #4
 8006144:	d118      	bne.n	8006178 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691a      	ldr	r2, [r3, #16]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616e:	b29b      	uxth	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800617c:	2b00      	cmp	r3, #0
 800617e:	f47f aec2 	bne.w	8005f06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	e000      	b.n	80061a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800619e:	2302      	movs	r3, #2
  }
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3728      	adds	r7, #40	; 0x28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	00010004 	.word	0x00010004

080061ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	4608      	mov	r0, r1
 80061b6:	4611      	mov	r1, r2
 80061b8:	461a      	mov	r2, r3
 80061ba:	4603      	mov	r3, r0
 80061bc:	817b      	strh	r3, [r7, #10]
 80061be:	460b      	mov	r3, r1
 80061c0:	813b      	strh	r3, [r7, #8]
 80061c2:	4613      	mov	r3, r2
 80061c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	2200      	movs	r2, #0
 80061de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f960 	bl	80064a8 <I2C_WaitOnFlagUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00d      	beq.n	800620a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061fc:	d103      	bne.n	8006206 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006204:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e05f      	b.n	80062ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800620a:	897b      	ldrh	r3, [r7, #10]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	461a      	mov	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006218:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	6a3a      	ldr	r2, [r7, #32]
 800621e:	492d      	ldr	r1, [pc, #180]	; (80062d4 <I2C_RequestMemoryWrite+0x128>)
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f998 	bl	8006556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e04c      	b.n	80062ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006248:	6a39      	ldr	r1, [r7, #32]
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 fa02 	bl	8006654 <I2C_WaitOnTXEFlagUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00d      	beq.n	8006272 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	2b04      	cmp	r3, #4
 800625c:	d107      	bne.n	800626e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800626c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e02b      	b.n	80062ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d105      	bne.n	8006284 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006278:	893b      	ldrh	r3, [r7, #8]
 800627a:	b2da      	uxtb	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	611a      	str	r2, [r3, #16]
 8006282:	e021      	b.n	80062c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006284:	893b      	ldrh	r3, [r7, #8]
 8006286:	0a1b      	lsrs	r3, r3, #8
 8006288:	b29b      	uxth	r3, r3
 800628a:	b2da      	uxtb	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006294:	6a39      	ldr	r1, [r7, #32]
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 f9dc 	bl	8006654 <I2C_WaitOnTXEFlagUntilTimeout>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00d      	beq.n	80062be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d107      	bne.n	80062ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e005      	b.n	80062ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062be:	893b      	ldrh	r3, [r7, #8]
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	00010002 	.word	0x00010002

080062d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b088      	sub	sp, #32
 80062dc:	af02      	add	r7, sp, #8
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	4608      	mov	r0, r1
 80062e2:	4611      	mov	r1, r2
 80062e4:	461a      	mov	r2, r3
 80062e6:	4603      	mov	r3, r0
 80062e8:	817b      	strh	r3, [r7, #10]
 80062ea:	460b      	mov	r3, r1
 80062ec:	813b      	strh	r3, [r7, #8]
 80062ee:	4613      	mov	r3, r2
 80062f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006300:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006310:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	2200      	movs	r2, #0
 800631a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 f8c2 	bl	80064a8 <I2C_WaitOnFlagUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00d      	beq.n	8006346 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006338:	d103      	bne.n	8006342 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006340:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e0aa      	b.n	800649c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006346:	897b      	ldrh	r3, [r7, #10]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006354:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	6a3a      	ldr	r2, [r7, #32]
 800635a:	4952      	ldr	r1, [pc, #328]	; (80064a4 <I2C_RequestMemoryRead+0x1cc>)
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f8fa 	bl	8006556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e097      	b.n	800649c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006384:	6a39      	ldr	r1, [r7, #32]
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 f964 	bl	8006654 <I2C_WaitOnTXEFlagUntilTimeout>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00d      	beq.n	80063ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	2b04      	cmp	r3, #4
 8006398:	d107      	bne.n	80063aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e076      	b.n	800649c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d105      	bne.n	80063c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063b4:	893b      	ldrh	r3, [r7, #8]
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	611a      	str	r2, [r3, #16]
 80063be:	e021      	b.n	8006404 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063c0:	893b      	ldrh	r3, [r7, #8]
 80063c2:	0a1b      	lsrs	r3, r3, #8
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d0:	6a39      	ldr	r1, [r7, #32]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 f93e 	bl	8006654 <I2C_WaitOnTXEFlagUntilTimeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00d      	beq.n	80063fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d107      	bne.n	80063f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e050      	b.n	800649c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063fa:	893b      	ldrh	r3, [r7, #8]
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006406:	6a39      	ldr	r1, [r7, #32]
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 f923 	bl	8006654 <I2C_WaitOnTXEFlagUntilTimeout>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00d      	beq.n	8006430 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	2b04      	cmp	r3, #4
 800641a:	d107      	bne.n	800642c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800642a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e035      	b.n	800649c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800643e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	2200      	movs	r2, #0
 8006448:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 f82b 	bl	80064a8 <I2C_WaitOnFlagUntilTimeout>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00d      	beq.n	8006474 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006466:	d103      	bne.n	8006470 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800646e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e013      	b.n	800649c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006474:	897b      	ldrh	r3, [r7, #10]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	f043 0301 	orr.w	r3, r3, #1
 800647c:	b2da      	uxtb	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	6a3a      	ldr	r2, [r7, #32]
 8006488:	4906      	ldr	r1, [pc, #24]	; (80064a4 <I2C_RequestMemoryRead+0x1cc>)
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 f863 	bl	8006556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	00010002 	.word	0x00010002

080064a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	603b      	str	r3, [r7, #0]
 80064b4:	4613      	mov	r3, r2
 80064b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064b8:	e025      	b.n	8006506 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c0:	d021      	beq.n	8006506 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c2:	f7fd ff5d 	bl	8004380 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d302      	bcc.n	80064d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d116      	bne.n	8006506 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	f043 0220 	orr.w	r2, r3, #32
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e023      	b.n	800654e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	0c1b      	lsrs	r3, r3, #16
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b01      	cmp	r3, #1
 800650e:	d10d      	bne.n	800652c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	43da      	mvns	r2, r3
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4013      	ands	r3, r2
 800651c:	b29b      	uxth	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	bf0c      	ite	eq
 8006522:	2301      	moveq	r3, #1
 8006524:	2300      	movne	r3, #0
 8006526:	b2db      	uxtb	r3, r3
 8006528:	461a      	mov	r2, r3
 800652a:	e00c      	b.n	8006546 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	43da      	mvns	r2, r3
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	4013      	ands	r3, r2
 8006538:	b29b      	uxth	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	bf0c      	ite	eq
 800653e:	2301      	moveq	r3, #1
 8006540:	2300      	movne	r3, #0
 8006542:	b2db      	uxtb	r3, r3
 8006544:	461a      	mov	r2, r3
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	429a      	cmp	r2, r3
 800654a:	d0b6      	beq.n	80064ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	607a      	str	r2, [r7, #4]
 8006562:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006564:	e051      	b.n	800660a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006574:	d123      	bne.n	80065be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006584:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800658e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2220      	movs	r2, #32
 800659a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	f043 0204 	orr.w	r2, r3, #4
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e046      	b.n	800664c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c4:	d021      	beq.n	800660a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065c6:	f7fd fedb 	bl	8004380 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d302      	bcc.n	80065dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d116      	bne.n	800660a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f043 0220 	orr.w	r2, r3, #32
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e020      	b.n	800664c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	0c1b      	lsrs	r3, r3, #16
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b01      	cmp	r3, #1
 8006612:	d10c      	bne.n	800662e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	43da      	mvns	r2, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	4013      	ands	r3, r2
 8006620:	b29b      	uxth	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	bf14      	ite	ne
 8006626:	2301      	movne	r3, #1
 8006628:	2300      	moveq	r3, #0
 800662a:	b2db      	uxtb	r3, r3
 800662c:	e00b      	b.n	8006646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	43da      	mvns	r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	4013      	ands	r3, r2
 800663a:	b29b      	uxth	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	bf14      	ite	ne
 8006640:	2301      	movne	r3, #1
 8006642:	2300      	moveq	r3, #0
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d18d      	bne.n	8006566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006660:	e02d      	b.n	80066be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 f8ce 	bl	8006804 <I2C_IsAcknowledgeFailed>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e02d      	b.n	80066ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006678:	d021      	beq.n	80066be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800667a:	f7fd fe81 	bl	8004380 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	429a      	cmp	r2, r3
 8006688:	d302      	bcc.n	8006690 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d116      	bne.n	80066be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2220      	movs	r2, #32
 800669a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f043 0220 	orr.w	r2, r3, #32
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e007      	b.n	80066ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c8:	2b80      	cmp	r3, #128	; 0x80
 80066ca:	d1ca      	bne.n	8006662 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066e2:	e02d      	b.n	8006740 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 f88d 	bl	8006804 <I2C_IsAcknowledgeFailed>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e02d      	b.n	8006750 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fa:	d021      	beq.n	8006740 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066fc:	f7fd fe40 	bl	8004380 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	429a      	cmp	r2, r3
 800670a:	d302      	bcc.n	8006712 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d116      	bne.n	8006740 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672c:	f043 0220 	orr.w	r2, r3, #32
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e007      	b.n	8006750 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	f003 0304 	and.w	r3, r3, #4
 800674a:	2b04      	cmp	r3, #4
 800674c:	d1ca      	bne.n	80066e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006764:	e042      	b.n	80067ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	f003 0310 	and.w	r3, r3, #16
 8006770:	2b10      	cmp	r3, #16
 8006772:	d119      	bne.n	80067a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f06f 0210 	mvn.w	r2, #16
 800677c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e029      	b.n	80067fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a8:	f7fd fdea 	bl	8004380 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d302      	bcc.n	80067be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d116      	bne.n	80067ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d8:	f043 0220 	orr.w	r2, r3, #32
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e007      	b.n	80067fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f6:	2b40      	cmp	r3, #64	; 0x40
 80067f8:	d1b5      	bne.n	8006766 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800681a:	d11b      	bne.n	8006854 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006824:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2220      	movs	r2, #32
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006840:	f043 0204 	orr.w	r2, r3, #4
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e000      	b.n	8006856 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e264      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d075      	beq.n	800696e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006882:	4ba3      	ldr	r3, [pc, #652]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f003 030c 	and.w	r3, r3, #12
 800688a:	2b04      	cmp	r3, #4
 800688c:	d00c      	beq.n	80068a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800688e:	4ba0      	ldr	r3, [pc, #640]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006896:	2b08      	cmp	r3, #8
 8006898:	d112      	bne.n	80068c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800689a:	4b9d      	ldr	r3, [pc, #628]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068a6:	d10b      	bne.n	80068c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068a8:	4b99      	ldr	r3, [pc, #612]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d05b      	beq.n	800696c <HAL_RCC_OscConfig+0x108>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d157      	bne.n	800696c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e23f      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c8:	d106      	bne.n	80068d8 <HAL_RCC_OscConfig+0x74>
 80068ca:	4b91      	ldr	r3, [pc, #580]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a90      	ldr	r2, [pc, #576]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 80068d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	e01d      	b.n	8006914 <HAL_RCC_OscConfig+0xb0>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068e0:	d10c      	bne.n	80068fc <HAL_RCC_OscConfig+0x98>
 80068e2:	4b8b      	ldr	r3, [pc, #556]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a8a      	ldr	r2, [pc, #552]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 80068e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	4b88      	ldr	r3, [pc, #544]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a87      	ldr	r2, [pc, #540]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 80068f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	e00b      	b.n	8006914 <HAL_RCC_OscConfig+0xb0>
 80068fc:	4b84      	ldr	r3, [pc, #528]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a83      	ldr	r2, [pc, #524]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 8006902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	4b81      	ldr	r3, [pc, #516]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a80      	ldr	r2, [pc, #512]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 800690e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d013      	beq.n	8006944 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800691c:	f7fd fd30 	bl	8004380 <HAL_GetTick>
 8006920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006924:	f7fd fd2c 	bl	8004380 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b64      	cmp	r3, #100	; 0x64
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e204      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006936:	4b76      	ldr	r3, [pc, #472]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0f0      	beq.n	8006924 <HAL_RCC_OscConfig+0xc0>
 8006942:	e014      	b.n	800696e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006944:	f7fd fd1c 	bl	8004380 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800694c:	f7fd fd18 	bl	8004380 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b64      	cmp	r3, #100	; 0x64
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e1f0      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800695e:	4b6c      	ldr	r3, [pc, #432]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1f0      	bne.n	800694c <HAL_RCC_OscConfig+0xe8>
 800696a:	e000      	b.n	800696e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800696c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d063      	beq.n	8006a42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800697a:	4b65      	ldr	r3, [pc, #404]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 030c 	and.w	r3, r3, #12
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006986:	4b62      	ldr	r3, [pc, #392]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800698e:	2b08      	cmp	r3, #8
 8006990:	d11c      	bne.n	80069cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006992:	4b5f      	ldr	r3, [pc, #380]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d116      	bne.n	80069cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800699e:	4b5c      	ldr	r3, [pc, #368]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d005      	beq.n	80069b6 <HAL_RCC_OscConfig+0x152>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d001      	beq.n	80069b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e1c4      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069b6:	4b56      	ldr	r3, [pc, #344]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	4952      	ldr	r1, [pc, #328]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ca:	e03a      	b.n	8006a42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d020      	beq.n	8006a16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069d4:	4b4f      	ldr	r3, [pc, #316]	; (8006b14 <HAL_RCC_OscConfig+0x2b0>)
 80069d6:	2201      	movs	r2, #1
 80069d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069da:	f7fd fcd1 	bl	8004380 <HAL_GetTick>
 80069de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069e0:	e008      	b.n	80069f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069e2:	f7fd fccd 	bl	8004380 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e1a5      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069f4:	4b46      	ldr	r3, [pc, #280]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0f0      	beq.n	80069e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a00:	4b43      	ldr	r3, [pc, #268]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	4940      	ldr	r1, [pc, #256]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	600b      	str	r3, [r1, #0]
 8006a14:	e015      	b.n	8006a42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a16:	4b3f      	ldr	r3, [pc, #252]	; (8006b14 <HAL_RCC_OscConfig+0x2b0>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a1c:	f7fd fcb0 	bl	8004380 <HAL_GetTick>
 8006a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a24:	f7fd fcac 	bl	8004380 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e184      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a36:	4b36      	ldr	r3, [pc, #216]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1f0      	bne.n	8006a24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0308 	and.w	r3, r3, #8
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d030      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d016      	beq.n	8006a84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a56:	4b30      	ldr	r3, [pc, #192]	; (8006b18 <HAL_RCC_OscConfig+0x2b4>)
 8006a58:	2201      	movs	r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a5c:	f7fd fc90 	bl	8004380 <HAL_GetTick>
 8006a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a62:	e008      	b.n	8006a76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a64:	f7fd fc8c 	bl	8004380 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e164      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a76:	4b26      	ldr	r3, [pc, #152]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 8006a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0f0      	beq.n	8006a64 <HAL_RCC_OscConfig+0x200>
 8006a82:	e015      	b.n	8006ab0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a84:	4b24      	ldr	r3, [pc, #144]	; (8006b18 <HAL_RCC_OscConfig+0x2b4>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a8a:	f7fd fc79 	bl	8004380 <HAL_GetTick>
 8006a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a90:	e008      	b.n	8006aa4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a92:	f7fd fc75 	bl	8004380 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d901      	bls.n	8006aa4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e14d      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006aa4:	4b1a      	ldr	r3, [pc, #104]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 8006aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1f0      	bne.n	8006a92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80a0 	beq.w	8006bfe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ac2:	4b13      	ldr	r3, [pc, #76]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10f      	bne.n	8006aee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60bb      	str	r3, [r7, #8]
 8006ad2:	4b0f      	ldr	r3, [pc, #60]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	4a0e      	ldr	r2, [pc, #56]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 8006ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006adc:	6413      	str	r3, [r2, #64]	; 0x40
 8006ade:	4b0c      	ldr	r3, [pc, #48]	; (8006b10 <HAL_RCC_OscConfig+0x2ac>)
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae6:	60bb      	str	r3, [r7, #8]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aea:	2301      	movs	r3, #1
 8006aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aee:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <HAL_RCC_OscConfig+0x2b8>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d121      	bne.n	8006b3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006afa:	4b08      	ldr	r3, [pc, #32]	; (8006b1c <HAL_RCC_OscConfig+0x2b8>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a07      	ldr	r2, [pc, #28]	; (8006b1c <HAL_RCC_OscConfig+0x2b8>)
 8006b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b06:	f7fd fc3b 	bl	8004380 <HAL_GetTick>
 8006b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b0c:	e011      	b.n	8006b32 <HAL_RCC_OscConfig+0x2ce>
 8006b0e:	bf00      	nop
 8006b10:	40023800 	.word	0x40023800
 8006b14:	42470000 	.word	0x42470000
 8006b18:	42470e80 	.word	0x42470e80
 8006b1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b20:	f7fd fc2e 	bl	8004380 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e106      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b32:	4b85      	ldr	r3, [pc, #532]	; (8006d48 <HAL_RCC_OscConfig+0x4e4>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0f0      	beq.n	8006b20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d106      	bne.n	8006b54 <HAL_RCC_OscConfig+0x2f0>
 8006b46:	4b81      	ldr	r3, [pc, #516]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4a:	4a80      	ldr	r2, [pc, #512]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006b4c:	f043 0301 	orr.w	r3, r3, #1
 8006b50:	6713      	str	r3, [r2, #112]	; 0x70
 8006b52:	e01c      	b.n	8006b8e <HAL_RCC_OscConfig+0x32a>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	2b05      	cmp	r3, #5
 8006b5a:	d10c      	bne.n	8006b76 <HAL_RCC_OscConfig+0x312>
 8006b5c:	4b7b      	ldr	r3, [pc, #492]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b60:	4a7a      	ldr	r2, [pc, #488]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006b62:	f043 0304 	orr.w	r3, r3, #4
 8006b66:	6713      	str	r3, [r2, #112]	; 0x70
 8006b68:	4b78      	ldr	r3, [pc, #480]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6c:	4a77      	ldr	r2, [pc, #476]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006b6e:	f043 0301 	orr.w	r3, r3, #1
 8006b72:	6713      	str	r3, [r2, #112]	; 0x70
 8006b74:	e00b      	b.n	8006b8e <HAL_RCC_OscConfig+0x32a>
 8006b76:	4b75      	ldr	r3, [pc, #468]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7a:	4a74      	ldr	r2, [pc, #464]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006b7c:	f023 0301 	bic.w	r3, r3, #1
 8006b80:	6713      	str	r3, [r2, #112]	; 0x70
 8006b82:	4b72      	ldr	r3, [pc, #456]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b86:	4a71      	ldr	r2, [pc, #452]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006b88:	f023 0304 	bic.w	r3, r3, #4
 8006b8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d015      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b96:	f7fd fbf3 	bl	8004380 <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b9c:	e00a      	b.n	8006bb4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b9e:	f7fd fbef 	bl	8004380 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d901      	bls.n	8006bb4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e0c5      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bb4:	4b65      	ldr	r3, [pc, #404]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0ee      	beq.n	8006b9e <HAL_RCC_OscConfig+0x33a>
 8006bc0:	e014      	b.n	8006bec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bc2:	f7fd fbdd 	bl	8004380 <HAL_GetTick>
 8006bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bc8:	e00a      	b.n	8006be0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bca:	f7fd fbd9 	bl	8004380 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e0af      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006be0:	4b5a      	ldr	r3, [pc, #360]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1ee      	bne.n	8006bca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d105      	bne.n	8006bfe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bf2:	4b56      	ldr	r3, [pc, #344]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	4a55      	ldr	r2, [pc, #340]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 809b 	beq.w	8006d3e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c08:	4b50      	ldr	r3, [pc, #320]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f003 030c 	and.w	r3, r3, #12
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d05c      	beq.n	8006cce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d141      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1c:	4b4c      	ldr	r3, [pc, #304]	; (8006d50 <HAL_RCC_OscConfig+0x4ec>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c22:	f7fd fbad 	bl	8004380 <HAL_GetTick>
 8006c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c28:	e008      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c2a:	f7fd fba9 	bl	8004380 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d901      	bls.n	8006c3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e081      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c3c:	4b43      	ldr	r3, [pc, #268]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1f0      	bne.n	8006c2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	69da      	ldr	r2, [r3, #28]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	019b      	lsls	r3, r3, #6
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5e:	085b      	lsrs	r3, r3, #1
 8006c60:	3b01      	subs	r3, #1
 8006c62:	041b      	lsls	r3, r3, #16
 8006c64:	431a      	orrs	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6a:	061b      	lsls	r3, r3, #24
 8006c6c:	4937      	ldr	r1, [pc, #220]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c72:	4b37      	ldr	r3, [pc, #220]	; (8006d50 <HAL_RCC_OscConfig+0x4ec>)
 8006c74:	2201      	movs	r2, #1
 8006c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c78:	f7fd fb82 	bl	8004380 <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c80:	f7fd fb7e 	bl	8004380 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e056      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c92:	4b2e      	ldr	r3, [pc, #184]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0f0      	beq.n	8006c80 <HAL_RCC_OscConfig+0x41c>
 8006c9e:	e04e      	b.n	8006d3e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ca0:	4b2b      	ldr	r3, [pc, #172]	; (8006d50 <HAL_RCC_OscConfig+0x4ec>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca6:	f7fd fb6b 	bl	8004380 <HAL_GetTick>
 8006caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cae:	f7fd fb67 	bl	8004380 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e03f      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cc0:	4b22      	ldr	r3, [pc, #136]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1f0      	bne.n	8006cae <HAL_RCC_OscConfig+0x44a>
 8006ccc:	e037      	b.n	8006d3e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e032      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006cda:	4b1c      	ldr	r3, [pc, #112]	; (8006d4c <HAL_RCC_OscConfig+0x4e8>)
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d028      	beq.n	8006d3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d121      	bne.n	8006d3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d11a      	bne.n	8006d3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d10:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d111      	bne.n	8006d3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d20:	085b      	lsrs	r3, r3, #1
 8006d22:	3b01      	subs	r3, #1
 8006d24:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d107      	bne.n	8006d3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d001      	beq.n	8006d3e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40007000 	.word	0x40007000
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	42470060 	.word	0x42470060

08006d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e0cc      	b.n	8006f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d68:	4b68      	ldr	r3, [pc, #416]	; (8006f0c <HAL_RCC_ClockConfig+0x1b8>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0307 	and.w	r3, r3, #7
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d90c      	bls.n	8006d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d76:	4b65      	ldr	r3, [pc, #404]	; (8006f0c <HAL_RCC_ClockConfig+0x1b8>)
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d7e:	4b63      	ldr	r3, [pc, #396]	; (8006f0c <HAL_RCC_ClockConfig+0x1b8>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0307 	and.w	r3, r3, #7
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d001      	beq.n	8006d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e0b8      	b.n	8006f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d020      	beq.n	8006dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d005      	beq.n	8006db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006da8:	4b59      	ldr	r3, [pc, #356]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	4a58      	ldr	r2, [pc, #352]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006db2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006dc0:	4b53      	ldr	r3, [pc, #332]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	4a52      	ldr	r2, [pc, #328]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dcc:	4b50      	ldr	r3, [pc, #320]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	494d      	ldr	r1, [pc, #308]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d044      	beq.n	8006e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d107      	bne.n	8006e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006df2:	4b47      	ldr	r3, [pc, #284]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d119      	bne.n	8006e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e07f      	b.n	8006f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d003      	beq.n	8006e12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d107      	bne.n	8006e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e12:	4b3f      	ldr	r3, [pc, #252]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d109      	bne.n	8006e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e06f      	b.n	8006f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e22:	4b3b      	ldr	r3, [pc, #236]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e067      	b.n	8006f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e32:	4b37      	ldr	r3, [pc, #220]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f023 0203 	bic.w	r2, r3, #3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	4934      	ldr	r1, [pc, #208]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e44:	f7fd fa9c 	bl	8004380 <HAL_GetTick>
 8006e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e4a:	e00a      	b.n	8006e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e4c:	f7fd fa98 	bl	8004380 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e04f      	b.n	8006f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e62:	4b2b      	ldr	r3, [pc, #172]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f003 020c 	and.w	r2, r3, #12
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d1eb      	bne.n	8006e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e74:	4b25      	ldr	r3, [pc, #148]	; (8006f0c <HAL_RCC_ClockConfig+0x1b8>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0307 	and.w	r3, r3, #7
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d20c      	bcs.n	8006e9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e82:	4b22      	ldr	r3, [pc, #136]	; (8006f0c <HAL_RCC_ClockConfig+0x1b8>)
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	b2d2      	uxtb	r2, r2
 8006e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e8a:	4b20      	ldr	r3, [pc, #128]	; (8006f0c <HAL_RCC_ClockConfig+0x1b8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d001      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e032      	b.n	8006f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0304 	and.w	r3, r3, #4
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d008      	beq.n	8006eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ea8:	4b19      	ldr	r3, [pc, #100]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	4916      	ldr	r1, [pc, #88]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d009      	beq.n	8006eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ec6:	4b12      	ldr	r3, [pc, #72]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	490e      	ldr	r1, [pc, #56]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006eda:	f000 f821 	bl	8006f20 <HAL_RCC_GetSysClockFreq>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	091b      	lsrs	r3, r3, #4
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	490a      	ldr	r1, [pc, #40]	; (8006f14 <HAL_RCC_ClockConfig+0x1c0>)
 8006eec:	5ccb      	ldrb	r3, [r1, r3]
 8006eee:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef2:	4a09      	ldr	r2, [pc, #36]	; (8006f18 <HAL_RCC_ClockConfig+0x1c4>)
 8006ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ef6:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <HAL_RCC_ClockConfig+0x1c8>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fd f868 	bl	8003fd0 <HAL_InitTick>

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	40023c00 	.word	0x40023c00
 8006f10:	40023800 	.word	0x40023800
 8006f14:	0801688c 	.word	0x0801688c
 8006f18:	20000004 	.word	0x20000004
 8006f1c:	20000008 	.word	0x20000008

08006f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	607b      	str	r3, [r7, #4]
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	2300      	movs	r3, #0
 8006f32:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f38:	4b67      	ldr	r3, [pc, #412]	; (80070d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f003 030c 	and.w	r3, r3, #12
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d00d      	beq.n	8006f60 <HAL_RCC_GetSysClockFreq+0x40>
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	f200 80bd 	bhi.w	80070c4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <HAL_RCC_GetSysClockFreq+0x34>
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d003      	beq.n	8006f5a <HAL_RCC_GetSysClockFreq+0x3a>
 8006f52:	e0b7      	b.n	80070c4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f54:	4b61      	ldr	r3, [pc, #388]	; (80070dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006f56:	60bb      	str	r3, [r7, #8]
       break;
 8006f58:	e0b7      	b.n	80070ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f5a:	4b61      	ldr	r3, [pc, #388]	; (80070e0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006f5c:	60bb      	str	r3, [r7, #8]
      break;
 8006f5e:	e0b4      	b.n	80070ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f60:	4b5d      	ldr	r3, [pc, #372]	; (80070d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f6a:	4b5b      	ldr	r3, [pc, #364]	; (80070d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d04d      	beq.n	8007012 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f76:	4b58      	ldr	r3, [pc, #352]	; (80070d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	099b      	lsrs	r3, r3, #6
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f86:	f04f 0100 	mov.w	r1, #0
 8006f8a:	ea02 0800 	and.w	r8, r2, r0
 8006f8e:	ea03 0901 	and.w	r9, r3, r1
 8006f92:	4640      	mov	r0, r8
 8006f94:	4649      	mov	r1, r9
 8006f96:	f04f 0200 	mov.w	r2, #0
 8006f9a:	f04f 0300 	mov.w	r3, #0
 8006f9e:	014b      	lsls	r3, r1, #5
 8006fa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006fa4:	0142      	lsls	r2, r0, #5
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	4619      	mov	r1, r3
 8006faa:	ebb0 0008 	subs.w	r0, r0, r8
 8006fae:	eb61 0109 	sbc.w	r1, r1, r9
 8006fb2:	f04f 0200 	mov.w	r2, #0
 8006fb6:	f04f 0300 	mov.w	r3, #0
 8006fba:	018b      	lsls	r3, r1, #6
 8006fbc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006fc0:	0182      	lsls	r2, r0, #6
 8006fc2:	1a12      	subs	r2, r2, r0
 8006fc4:	eb63 0301 	sbc.w	r3, r3, r1
 8006fc8:	f04f 0000 	mov.w	r0, #0
 8006fcc:	f04f 0100 	mov.w	r1, #0
 8006fd0:	00d9      	lsls	r1, r3, #3
 8006fd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fd6:	00d0      	lsls	r0, r2, #3
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	eb12 0208 	adds.w	r2, r2, r8
 8006fe0:	eb43 0309 	adc.w	r3, r3, r9
 8006fe4:	f04f 0000 	mov.w	r0, #0
 8006fe8:	f04f 0100 	mov.w	r1, #0
 8006fec:	0259      	lsls	r1, r3, #9
 8006fee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006ff2:	0250      	lsls	r0, r2, #9
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	461a      	mov	r2, r3
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	f7f9 fe48 	bl	8000c98 <__aeabi_uldivmod>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4613      	mov	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	e04a      	b.n	80070a8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007012:	4b31      	ldr	r3, [pc, #196]	; (80070d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	099b      	lsrs	r3, r3, #6
 8007018:	461a      	mov	r2, r3
 800701a:	f04f 0300 	mov.w	r3, #0
 800701e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007022:	f04f 0100 	mov.w	r1, #0
 8007026:	ea02 0400 	and.w	r4, r2, r0
 800702a:	ea03 0501 	and.w	r5, r3, r1
 800702e:	4620      	mov	r0, r4
 8007030:	4629      	mov	r1, r5
 8007032:	f04f 0200 	mov.w	r2, #0
 8007036:	f04f 0300 	mov.w	r3, #0
 800703a:	014b      	lsls	r3, r1, #5
 800703c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007040:	0142      	lsls	r2, r0, #5
 8007042:	4610      	mov	r0, r2
 8007044:	4619      	mov	r1, r3
 8007046:	1b00      	subs	r0, r0, r4
 8007048:	eb61 0105 	sbc.w	r1, r1, r5
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	018b      	lsls	r3, r1, #6
 8007056:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800705a:	0182      	lsls	r2, r0, #6
 800705c:	1a12      	subs	r2, r2, r0
 800705e:	eb63 0301 	sbc.w	r3, r3, r1
 8007062:	f04f 0000 	mov.w	r0, #0
 8007066:	f04f 0100 	mov.w	r1, #0
 800706a:	00d9      	lsls	r1, r3, #3
 800706c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007070:	00d0      	lsls	r0, r2, #3
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	1912      	adds	r2, r2, r4
 8007078:	eb45 0303 	adc.w	r3, r5, r3
 800707c:	f04f 0000 	mov.w	r0, #0
 8007080:	f04f 0100 	mov.w	r1, #0
 8007084:	0299      	lsls	r1, r3, #10
 8007086:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800708a:	0290      	lsls	r0, r2, #10
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4610      	mov	r0, r2
 8007092:	4619      	mov	r1, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	461a      	mov	r2, r3
 8007098:	f04f 0300 	mov.w	r3, #0
 800709c:	f7f9 fdfc 	bl	8000c98 <__aeabi_uldivmod>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4613      	mov	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80070a8:	4b0b      	ldr	r3, [pc, #44]	; (80070d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	0c1b      	lsrs	r3, r3, #16
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	3301      	adds	r3, #1
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c0:	60bb      	str	r3, [r7, #8]
      break;
 80070c2:	e002      	b.n	80070ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070c4:	4b05      	ldr	r3, [pc, #20]	; (80070dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80070c6:	60bb      	str	r3, [r7, #8]
      break;
 80070c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070ca:	68bb      	ldr	r3, [r7, #8]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80070d6:	bf00      	nop
 80070d8:	40023800 	.word	0x40023800
 80070dc:	00f42400 	.word	0x00f42400
 80070e0:	007a1200 	.word	0x007a1200

080070e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070e4:	b480      	push	{r7}
 80070e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070e8:	4b03      	ldr	r3, [pc, #12]	; (80070f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80070ea:	681b      	ldr	r3, [r3, #0]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	20000004 	.word	0x20000004

080070fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007100:	f7ff fff0 	bl	80070e4 <HAL_RCC_GetHCLKFreq>
 8007104:	4602      	mov	r2, r0
 8007106:	4b05      	ldr	r3, [pc, #20]	; (800711c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	0a9b      	lsrs	r3, r3, #10
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	4903      	ldr	r1, [pc, #12]	; (8007120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007112:	5ccb      	ldrb	r3, [r1, r3]
 8007114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007118:	4618      	mov	r0, r3
 800711a:	bd80      	pop	{r7, pc}
 800711c:	40023800 	.word	0x40023800
 8007120:	0801689c 	.word	0x0801689c

08007124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007128:	f7ff ffdc 	bl	80070e4 <HAL_RCC_GetHCLKFreq>
 800712c:	4602      	mov	r2, r0
 800712e:	4b05      	ldr	r3, [pc, #20]	; (8007144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	0b5b      	lsrs	r3, r3, #13
 8007134:	f003 0307 	and.w	r3, r3, #7
 8007138:	4903      	ldr	r1, [pc, #12]	; (8007148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800713a:	5ccb      	ldrb	r3, [r1, r3]
 800713c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007140:	4618      	mov	r0, r3
 8007142:	bd80      	pop	{r7, pc}
 8007144:	40023800 	.word	0x40023800
 8007148:	0801689c 	.word	0x0801689c

0800714c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	220f      	movs	r2, #15
 800715a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800715c:	4b12      	ldr	r3, [pc, #72]	; (80071a8 <HAL_RCC_GetClockConfig+0x5c>)
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f003 0203 	and.w	r2, r3, #3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007168:	4b0f      	ldr	r3, [pc, #60]	; (80071a8 <HAL_RCC_GetClockConfig+0x5c>)
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007174:	4b0c      	ldr	r3, [pc, #48]	; (80071a8 <HAL_RCC_GetClockConfig+0x5c>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007180:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <HAL_RCC_GetClockConfig+0x5c>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	08db      	lsrs	r3, r3, #3
 8007186:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800718e:	4b07      	ldr	r3, [pc, #28]	; (80071ac <HAL_RCC_GetClockConfig+0x60>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0207 	and.w	r2, r3, #7
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	601a      	str	r2, [r3, #0]
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	40023800 	.word	0x40023800
 80071ac:	40023c00 	.word	0x40023c00

080071b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e07b      	b.n	80072ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d108      	bne.n	80071dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071d2:	d009      	beq.n	80071e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	61da      	str	r2, [r3, #28]
 80071da:	e005      	b.n	80071e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fc fda6 	bl	8003d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800721e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007230:	431a      	orrs	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	431a      	orrs	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007258:	431a      	orrs	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007262:	431a      	orrs	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726c:	ea42 0103 	orr.w	r1, r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007274:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	0c1b      	lsrs	r3, r3, #16
 8007286:	f003 0104 	and.w	r1, r3, #4
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	f003 0210 	and.w	r2, r3, #16
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69da      	ldr	r2, [r3, #28]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b088      	sub	sp, #32
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	603b      	str	r3, [r7, #0]
 80072ce:	4613      	mov	r3, r2
 80072d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d101      	bne.n	80072e4 <HAL_SPI_Transmit+0x22>
 80072e0:	2302      	movs	r3, #2
 80072e2:	e126      	b.n	8007532 <HAL_SPI_Transmit+0x270>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072ec:	f7fd f848 	bl	8004380 <HAL_GetTick>
 80072f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80072f2:	88fb      	ldrh	r3, [r7, #6]
 80072f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d002      	beq.n	8007308 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007302:	2302      	movs	r3, #2
 8007304:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007306:	e10b      	b.n	8007520 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d002      	beq.n	8007314 <HAL_SPI_Transmit+0x52>
 800730e:	88fb      	ldrh	r3, [r7, #6]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d102      	bne.n	800731a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007318:	e102      	b.n	8007520 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2203      	movs	r2, #3
 800731e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	88fa      	ldrh	r2, [r7, #6]
 8007332:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	88fa      	ldrh	r2, [r7, #6]
 8007338:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007360:	d10f      	bne.n	8007382 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007370:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007380:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b40      	cmp	r3, #64	; 0x40
 800738e:	d007      	beq.n	80073a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800739e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073a8:	d14b      	bne.n	8007442 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <HAL_SPI_Transmit+0xf6>
 80073b2:	8afb      	ldrh	r3, [r7, #22]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d13e      	bne.n	8007436 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073bc:	881a      	ldrh	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c8:	1c9a      	adds	r2, r3, #2
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	3b01      	subs	r3, #1
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80073dc:	e02b      	b.n	8007436 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d112      	bne.n	8007412 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f0:	881a      	ldrh	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fc:	1c9a      	adds	r2, r3, #2
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007410:	e011      	b.n	8007436 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007412:	f7fc ffb5 	bl	8004380 <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	429a      	cmp	r2, r3
 8007420:	d803      	bhi.n	800742a <HAL_SPI_Transmit+0x168>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007428:	d102      	bne.n	8007430 <HAL_SPI_Transmit+0x16e>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007434:	e074      	b.n	8007520 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800743a:	b29b      	uxth	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1ce      	bne.n	80073de <HAL_SPI_Transmit+0x11c>
 8007440:	e04c      	b.n	80074dc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <HAL_SPI_Transmit+0x18e>
 800744a:	8afb      	ldrh	r3, [r7, #22]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d140      	bne.n	80074d2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	330c      	adds	r3, #12
 800745a:	7812      	ldrb	r2, [r2, #0]
 800745c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007462:	1c5a      	adds	r2, r3, #1
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800746c:	b29b      	uxth	r3, r3
 800746e:	3b01      	subs	r3, #1
 8007470:	b29a      	uxth	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007476:	e02c      	b.n	80074d2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b02      	cmp	r3, #2
 8007484:	d113      	bne.n	80074ae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	330c      	adds	r3, #12
 8007490:	7812      	ldrb	r2, [r2, #0]
 8007492:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80074ac:	e011      	b.n	80074d2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074ae:	f7fc ff67 	bl	8004380 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d803      	bhi.n	80074c6 <HAL_SPI_Transmit+0x204>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c4:	d102      	bne.n	80074cc <HAL_SPI_Transmit+0x20a>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d102      	bne.n	80074d2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80074d0:	e026      	b.n	8007520 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1cd      	bne.n	8007478 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 fbcb 	bl	8007c7c <SPI_EndRxTxTransaction>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2220      	movs	r2, #32
 80074f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10a      	bne.n	8007510 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074fa:	2300      	movs	r3, #0
 80074fc:	613b      	str	r3, [r7, #16]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	613b      	str	r3, [r7, #16]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	613b      	str	r3, [r7, #16]
 800750e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	77fb      	strb	r3, [r7, #31]
 800751c:	e000      	b.n	8007520 <HAL_SPI_Transmit+0x25e>
  }

error:
 800751e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007530:	7ffb      	ldrb	r3, [r7, #31]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3720      	adds	r7, #32
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b088      	sub	sp, #32
 800753e:	af02      	add	r7, sp, #8
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	603b      	str	r3, [r7, #0]
 8007546:	4613      	mov	r3, r2
 8007548:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007556:	d112      	bne.n	800757e <HAL_SPI_Receive+0x44>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10e      	bne.n	800757e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2204      	movs	r2, #4
 8007564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007568:	88fa      	ldrh	r2, [r7, #6]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	4613      	mov	r3, r2
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	68b9      	ldr	r1, [r7, #8]
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 f8f1 	bl	800775c <HAL_SPI_TransmitReceive>
 800757a:	4603      	mov	r3, r0
 800757c:	e0ea      	b.n	8007754 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007584:	2b01      	cmp	r3, #1
 8007586:	d101      	bne.n	800758c <HAL_SPI_Receive+0x52>
 8007588:	2302      	movs	r3, #2
 800758a:	e0e3      	b.n	8007754 <HAL_SPI_Receive+0x21a>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007594:	f7fc fef4 	bl	8004380 <HAL_GetTick>
 8007598:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d002      	beq.n	80075ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80075a6:	2302      	movs	r3, #2
 80075a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075aa:	e0ca      	b.n	8007742 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d002      	beq.n	80075b8 <HAL_SPI_Receive+0x7e>
 80075b2:	88fb      	ldrh	r3, [r7, #6]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d102      	bne.n	80075be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075bc:	e0c1      	b.n	8007742 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2204      	movs	r2, #4
 80075c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	88fa      	ldrh	r2, [r7, #6]
 80075d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	88fa      	ldrh	r2, [r7, #6]
 80075dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007604:	d10f      	bne.n	8007626 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007614:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007624:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007630:	2b40      	cmp	r3, #64	; 0x40
 8007632:	d007      	beq.n	8007644 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007642:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d162      	bne.n	8007712 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800764c:	e02e      	b.n	80076ac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b01      	cmp	r3, #1
 800765a:	d115      	bne.n	8007688 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f103 020c 	add.w	r2, r3, #12
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	7812      	ldrb	r2, [r2, #0]
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800767c:	b29b      	uxth	r3, r3
 800767e:	3b01      	subs	r3, #1
 8007680:	b29a      	uxth	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007686:	e011      	b.n	80076ac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007688:	f7fc fe7a 	bl	8004380 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	429a      	cmp	r2, r3
 8007696:	d803      	bhi.n	80076a0 <HAL_SPI_Receive+0x166>
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769e:	d102      	bne.n	80076a6 <HAL_SPI_Receive+0x16c>
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d102      	bne.n	80076ac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80076aa:	e04a      	b.n	8007742 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1cb      	bne.n	800764e <HAL_SPI_Receive+0x114>
 80076b6:	e031      	b.n	800771c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d113      	bne.n	80076ee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	b292      	uxth	r2, r2
 80076d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d8:	1c9a      	adds	r2, r3, #2
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	3b01      	subs	r3, #1
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076ec:	e011      	b.n	8007712 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076ee:	f7fc fe47 	bl	8004380 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d803      	bhi.n	8007706 <HAL_SPI_Receive+0x1cc>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007704:	d102      	bne.n	800770c <HAL_SPI_Receive+0x1d2>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d102      	bne.n	8007712 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007710:	e017      	b.n	8007742 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007716:	b29b      	uxth	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1cd      	bne.n	80076b8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 fa45 	bl	8007bb0 <SPI_EndRxTransaction>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2220      	movs	r2, #32
 8007730:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	75fb      	strb	r3, [r7, #23]
 800773e:	e000      	b.n	8007742 <HAL_SPI_Receive+0x208>
  }

error :
 8007740:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007752:	7dfb      	ldrb	r3, [r7, #23]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08c      	sub	sp, #48	; 0x30
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
 8007768:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800776a:	2301      	movs	r3, #1
 800776c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800777a:	2b01      	cmp	r3, #1
 800777c:	d101      	bne.n	8007782 <HAL_SPI_TransmitReceive+0x26>
 800777e:	2302      	movs	r3, #2
 8007780:	e18a      	b.n	8007a98 <HAL_SPI_TransmitReceive+0x33c>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800778a:	f7fc fdf9 	bl	8004380 <HAL_GetTick>
 800778e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80077a0:	887b      	ldrh	r3, [r7, #2]
 80077a2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d00f      	beq.n	80077cc <HAL_SPI_TransmitReceive+0x70>
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077b2:	d107      	bne.n	80077c4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d103      	bne.n	80077c4 <HAL_SPI_TransmitReceive+0x68>
 80077bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	d003      	beq.n	80077cc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80077c4:	2302      	movs	r3, #2
 80077c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077ca:	e15b      	b.n	8007a84 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d005      	beq.n	80077de <HAL_SPI_TransmitReceive+0x82>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <HAL_SPI_TransmitReceive+0x82>
 80077d8:	887b      	ldrh	r3, [r7, #2]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d103      	bne.n	80077e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077e4:	e14e      	b.n	8007a84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	d003      	beq.n	80077fa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2205      	movs	r2, #5
 80077f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	887a      	ldrh	r2, [r7, #2]
 800780a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	887a      	ldrh	r2, [r7, #2]
 8007810:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	887a      	ldrh	r2, [r7, #2]
 800781c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	887a      	ldrh	r2, [r7, #2]
 8007822:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783a:	2b40      	cmp	r3, #64	; 0x40
 800783c:	d007      	beq.n	800784e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800784c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007856:	d178      	bne.n	800794a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <HAL_SPI_TransmitReceive+0x10a>
 8007860:	8b7b      	ldrh	r3, [r7, #26]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d166      	bne.n	8007934 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	881a      	ldrh	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007876:	1c9a      	adds	r2, r3, #2
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007880:	b29b      	uxth	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	b29a      	uxth	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800788a:	e053      	b.n	8007934 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b02      	cmp	r3, #2
 8007898:	d11b      	bne.n	80078d2 <HAL_SPI_TransmitReceive+0x176>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800789e:	b29b      	uxth	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d016      	beq.n	80078d2 <HAL_SPI_TransmitReceive+0x176>
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d113      	bne.n	80078d2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ae:	881a      	ldrh	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ba:	1c9a      	adds	r2, r3, #2
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078ce:	2300      	movs	r3, #0
 80078d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d119      	bne.n	8007914 <HAL_SPI_TransmitReceive+0x1b8>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d014      	beq.n	8007914 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68da      	ldr	r2, [r3, #12]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f4:	b292      	uxth	r2, r2
 80078f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fc:	1c9a      	adds	r2, r3, #2
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007906:	b29b      	uxth	r3, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	b29a      	uxth	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007910:	2301      	movs	r3, #1
 8007912:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007914:	f7fc fd34 	bl	8004380 <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007920:	429a      	cmp	r2, r3
 8007922:	d807      	bhi.n	8007934 <HAL_SPI_TransmitReceive+0x1d8>
 8007924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792a:	d003      	beq.n	8007934 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007932:	e0a7      	b.n	8007a84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007938:	b29b      	uxth	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1a6      	bne.n	800788c <HAL_SPI_TransmitReceive+0x130>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007942:	b29b      	uxth	r3, r3
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1a1      	bne.n	800788c <HAL_SPI_TransmitReceive+0x130>
 8007948:	e07c      	b.n	8007a44 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <HAL_SPI_TransmitReceive+0x1fc>
 8007952:	8b7b      	ldrh	r3, [r7, #26]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d16b      	bne.n	8007a30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	330c      	adds	r3, #12
 8007962:	7812      	ldrb	r2, [r2, #0]
 8007964:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007974:	b29b      	uxth	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	b29a      	uxth	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800797e:	e057      	b.n	8007a30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b02      	cmp	r3, #2
 800798c:	d11c      	bne.n	80079c8 <HAL_SPI_TransmitReceive+0x26c>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007992:	b29b      	uxth	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	d017      	beq.n	80079c8 <HAL_SPI_TransmitReceive+0x26c>
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	2b01      	cmp	r3, #1
 800799c:	d114      	bne.n	80079c8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	330c      	adds	r3, #12
 80079a8:	7812      	ldrb	r2, [r2, #0]
 80079aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	3b01      	subs	r3, #1
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d119      	bne.n	8007a0a <HAL_SPI_TransmitReceive+0x2ae>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079da:	b29b      	uxth	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d014      	beq.n	8007a0a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68da      	ldr	r2, [r3, #12]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ea:	b2d2      	uxtb	r2, r2
 80079ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	3b01      	subs	r3, #1
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a06:	2301      	movs	r3, #1
 8007a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a0a:	f7fc fcb9 	bl	8004380 <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d803      	bhi.n	8007a22 <HAL_SPI_TransmitReceive+0x2c6>
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a20:	d102      	bne.n	8007a28 <HAL_SPI_TransmitReceive+0x2cc>
 8007a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d103      	bne.n	8007a30 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a2e:	e029      	b.n	8007a84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1a2      	bne.n	8007980 <HAL_SPI_TransmitReceive+0x224>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d19d      	bne.n	8007980 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 f917 	bl	8007c7c <SPI_EndRxTxTransaction>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d006      	beq.n	8007a62 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007a60:	e010      	b.n	8007a84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10b      	bne.n	8007a82 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	617b      	str	r3, [r7, #20]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	617b      	str	r3, [r7, #20]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	617b      	str	r3, [r7, #20]
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	e000      	b.n	8007a84 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007a82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3730      	adds	r7, #48	; 0x30
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	4613      	mov	r3, r2
 8007aae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ab0:	f7fc fc66 	bl	8004380 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab8:	1a9b      	subs	r3, r3, r2
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	4413      	add	r3, r2
 8007abe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ac0:	f7fc fc5e 	bl	8004380 <HAL_GetTick>
 8007ac4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ac6:	4b39      	ldr	r3, [pc, #228]	; (8007bac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	015b      	lsls	r3, r3, #5
 8007acc:	0d1b      	lsrs	r3, r3, #20
 8007ace:	69fa      	ldr	r2, [r7, #28]
 8007ad0:	fb02 f303 	mul.w	r3, r2, r3
 8007ad4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ad6:	e054      	b.n	8007b82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ade:	d050      	beq.n	8007b82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ae0:	f7fc fc4e 	bl	8004380 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	69fa      	ldr	r2, [r7, #28]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d902      	bls.n	8007af6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d13d      	bne.n	8007b72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b0e:	d111      	bne.n	8007b34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b18:	d004      	beq.n	8007b24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b22:	d107      	bne.n	8007b34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b3c:	d10f      	bne.n	8007b5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e017      	b.n	8007ba2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	bf0c      	ite	eq
 8007b92:	2301      	moveq	r3, #1
 8007b94:	2300      	movne	r3, #0
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	461a      	mov	r2, r3
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d19b      	bne.n	8007ad8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3720      	adds	r7, #32
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20000004 	.word	0x20000004

08007bb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af02      	add	r7, sp, #8
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bc4:	d111      	bne.n	8007bea <SPI_EndRxTransaction+0x3a>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bce:	d004      	beq.n	8007bda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bd8:	d107      	bne.n	8007bea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007be8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bf2:	d12a      	bne.n	8007c4a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bfc:	d012      	beq.n	8007c24 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	2200      	movs	r2, #0
 8007c06:	2180      	movs	r1, #128	; 0x80
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f7ff ff49 	bl	8007aa0 <SPI_WaitFlagStateUntilTimeout>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d02d      	beq.n	8007c70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c18:	f043 0220 	orr.w	r2, r3, #32
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e026      	b.n	8007c72 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f7ff ff36 	bl	8007aa0 <SPI_WaitFlagStateUntilTimeout>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d01a      	beq.n	8007c70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3e:	f043 0220 	orr.w	r2, r3, #32
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e013      	b.n	8007c72 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2200      	movs	r2, #0
 8007c52:	2101      	movs	r1, #1
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7ff ff23 	bl	8007aa0 <SPI_WaitFlagStateUntilTimeout>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d007      	beq.n	8007c70 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c64:	f043 0220 	orr.w	r2, r3, #32
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e000      	b.n	8007c72 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b088      	sub	sp, #32
 8007c80:	af02      	add	r7, sp, #8
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c88:	4b1b      	ldr	r3, [pc, #108]	; (8007cf8 <SPI_EndRxTxTransaction+0x7c>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a1b      	ldr	r2, [pc, #108]	; (8007cfc <SPI_EndRxTxTransaction+0x80>)
 8007c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c92:	0d5b      	lsrs	r3, r3, #21
 8007c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c98:	fb02 f303 	mul.w	r3, r2, r3
 8007c9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ca6:	d112      	bne.n	8007cce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2180      	movs	r1, #128	; 0x80
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f7ff fef4 	bl	8007aa0 <SPI_WaitFlagStateUntilTimeout>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d016      	beq.n	8007cec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc2:	f043 0220 	orr.w	r2, r3, #32
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e00f      	b.n	8007cee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00a      	beq.n	8007cea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce4:	2b80      	cmp	r3, #128	; 0x80
 8007ce6:	d0f2      	beq.n	8007cce <SPI_EndRxTxTransaction+0x52>
 8007ce8:	e000      	b.n	8007cec <SPI_EndRxTxTransaction+0x70>
        break;
 8007cea:	bf00      	nop
  }

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3718      	adds	r7, #24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20000004 	.word	0x20000004
 8007cfc:	165e9f81 	.word	0x165e9f81

08007d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e041      	b.n	8007d96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d106      	bne.n	8007d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f839 	bl	8007d9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4610      	mov	r0, r2
 8007d40:	f000 f9ca 	bl	80080d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
	...

08007db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d001      	beq.n	8007dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e044      	b.n	8007e56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68da      	ldr	r2, [r3, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0201 	orr.w	r2, r2, #1
 8007de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a1e      	ldr	r2, [pc, #120]	; (8007e64 <HAL_TIM_Base_Start_IT+0xb0>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d018      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x6c>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007df6:	d013      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x6c>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a1a      	ldr	r2, [pc, #104]	; (8007e68 <HAL_TIM_Base_Start_IT+0xb4>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d00e      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x6c>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a19      	ldr	r2, [pc, #100]	; (8007e6c <HAL_TIM_Base_Start_IT+0xb8>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d009      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x6c>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a17      	ldr	r2, [pc, #92]	; (8007e70 <HAL_TIM_Base_Start_IT+0xbc>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d004      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x6c>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a16      	ldr	r2, [pc, #88]	; (8007e74 <HAL_TIM_Base_Start_IT+0xc0>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d111      	bne.n	8007e44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f003 0307 	and.w	r3, r3, #7
 8007e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2b06      	cmp	r3, #6
 8007e30:	d010      	beq.n	8007e54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f042 0201 	orr.w	r2, r2, #1
 8007e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e42:	e007      	b.n	8007e54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 0201 	orr.w	r2, r2, #1
 8007e52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	40010000 	.word	0x40010000
 8007e68:	40000400 	.word	0x40000400
 8007e6c:	40000800 	.word	0x40000800
 8007e70:	40000c00 	.word	0x40000c00
 8007e74:	40014000 	.word	0x40014000

08007e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d122      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	f003 0302 	and.w	r3, r3, #2
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d11b      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f06f 0202 	mvn.w	r2, #2
 8007ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	f003 0303 	and.w	r3, r3, #3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f8ee 	bl	800809c <HAL_TIM_IC_CaptureCallback>
 8007ec0:	e005      	b.n	8007ece <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f8e0 	bl	8008088 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f8f1 	bl	80080b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	f003 0304 	and.w	r3, r3, #4
 8007ede:	2b04      	cmp	r3, #4
 8007ee0:	d122      	bne.n	8007f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d11b      	bne.n	8007f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f06f 0204 	mvn.w	r2, #4
 8007ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2202      	movs	r2, #2
 8007efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d003      	beq.n	8007f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f8c4 	bl	800809c <HAL_TIM_IC_CaptureCallback>
 8007f14:	e005      	b.n	8007f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f8b6 	bl	8008088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f8c7 	bl	80080b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	f003 0308 	and.w	r3, r3, #8
 8007f32:	2b08      	cmp	r3, #8
 8007f34:	d122      	bne.n	8007f7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	f003 0308 	and.w	r3, r3, #8
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d11b      	bne.n	8007f7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f06f 0208 	mvn.w	r2, #8
 8007f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2204      	movs	r2, #4
 8007f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	f003 0303 	and.w	r3, r3, #3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f89a 	bl	800809c <HAL_TIM_IC_CaptureCallback>
 8007f68:	e005      	b.n	8007f76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f88c 	bl	8008088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f89d 	bl	80080b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f003 0310 	and.w	r3, r3, #16
 8007f86:	2b10      	cmp	r3, #16
 8007f88:	d122      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f003 0310 	and.w	r3, r3, #16
 8007f94:	2b10      	cmp	r3, #16
 8007f96:	d11b      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f06f 0210 	mvn.w	r2, #16
 8007fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2208      	movs	r2, #8
 8007fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f870 	bl	800809c <HAL_TIM_IC_CaptureCallback>
 8007fbc:	e005      	b.n	8007fca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f862 	bl	8008088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f873 	bl	80080b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d10e      	bne.n	8007ffc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d107      	bne.n	8007ffc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f06f 0201 	mvn.w	r2, #1
 8007ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7fb fc8c 	bl	8003914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008006:	2b80      	cmp	r3, #128	; 0x80
 8008008:	d10e      	bne.n	8008028 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008014:	2b80      	cmp	r3, #128	; 0x80
 8008016:	d107      	bne.n	8008028 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f8e2 	bl	80081ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008032:	2b40      	cmp	r3, #64	; 0x40
 8008034:	d10e      	bne.n	8008054 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008040:	2b40      	cmp	r3, #64	; 0x40
 8008042:	d107      	bne.n	8008054 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800804c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f838 	bl	80080c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b20      	cmp	r3, #32
 8008060:	d10e      	bne.n	8008080 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	f003 0320 	and.w	r3, r3, #32
 800806c:	2b20      	cmp	r3, #32
 800806e:	d107      	bne.n	8008080 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f06f 0220 	mvn.w	r2, #32
 8008078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f8ac 	bl	80081d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a34      	ldr	r2, [pc, #208]	; (80081bc <TIM_Base_SetConfig+0xe4>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d00f      	beq.n	8008110 <TIM_Base_SetConfig+0x38>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f6:	d00b      	beq.n	8008110 <TIM_Base_SetConfig+0x38>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a31      	ldr	r2, [pc, #196]	; (80081c0 <TIM_Base_SetConfig+0xe8>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d007      	beq.n	8008110 <TIM_Base_SetConfig+0x38>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a30      	ldr	r2, [pc, #192]	; (80081c4 <TIM_Base_SetConfig+0xec>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d003      	beq.n	8008110 <TIM_Base_SetConfig+0x38>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a2f      	ldr	r2, [pc, #188]	; (80081c8 <TIM_Base_SetConfig+0xf0>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d108      	bne.n	8008122 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a25      	ldr	r2, [pc, #148]	; (80081bc <TIM_Base_SetConfig+0xe4>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d01b      	beq.n	8008162 <TIM_Base_SetConfig+0x8a>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008130:	d017      	beq.n	8008162 <TIM_Base_SetConfig+0x8a>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a22      	ldr	r2, [pc, #136]	; (80081c0 <TIM_Base_SetConfig+0xe8>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d013      	beq.n	8008162 <TIM_Base_SetConfig+0x8a>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a21      	ldr	r2, [pc, #132]	; (80081c4 <TIM_Base_SetConfig+0xec>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00f      	beq.n	8008162 <TIM_Base_SetConfig+0x8a>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a20      	ldr	r2, [pc, #128]	; (80081c8 <TIM_Base_SetConfig+0xf0>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d00b      	beq.n	8008162 <TIM_Base_SetConfig+0x8a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a1f      	ldr	r2, [pc, #124]	; (80081cc <TIM_Base_SetConfig+0xf4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d007      	beq.n	8008162 <TIM_Base_SetConfig+0x8a>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a1e      	ldr	r2, [pc, #120]	; (80081d0 <TIM_Base_SetConfig+0xf8>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d003      	beq.n	8008162 <TIM_Base_SetConfig+0x8a>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a1d      	ldr	r2, [pc, #116]	; (80081d4 <TIM_Base_SetConfig+0xfc>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d108      	bne.n	8008174 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	4313      	orrs	r3, r2
 8008172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a08      	ldr	r2, [pc, #32]	; (80081bc <TIM_Base_SetConfig+0xe4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d103      	bne.n	80081a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	691a      	ldr	r2, [r3, #16]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	615a      	str	r2, [r3, #20]
}
 80081ae:	bf00      	nop
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	40010000 	.word	0x40010000
 80081c0:	40000400 	.word	0x40000400
 80081c4:	40000800 	.word	0x40000800
 80081c8:	40000c00 	.word	0x40000c00
 80081cc:	40014000 	.word	0x40014000
 80081d0:	40014400 	.word	0x40014400
 80081d4:	40014800 	.word	0x40014800

080081d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e03f      	b.n	8008292 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d106      	bne.n	800822c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7fb fddc 	bl	8003de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2224      	movs	r2, #36	; 0x24
 8008230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68da      	ldr	r2, [r3, #12]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008242:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fe23 	bl	8008e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	691a      	ldr	r2, [r3, #16]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008258:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	695a      	ldr	r2, [r3, #20]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008268:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008278:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2220      	movs	r2, #32
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2220      	movs	r2, #32
 800828c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b08a      	sub	sp, #40	; 0x28
 800829e:	af02      	add	r7, sp, #8
 80082a0:	60f8      	str	r0, [r7, #12]
 80082a2:	60b9      	str	r1, [r7, #8]
 80082a4:	603b      	str	r3, [r7, #0]
 80082a6:	4613      	mov	r3, r2
 80082a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b20      	cmp	r3, #32
 80082b8:	d17c      	bne.n	80083b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <HAL_UART_Transmit+0x2c>
 80082c0:	88fb      	ldrh	r3, [r7, #6]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e075      	b.n	80083b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d101      	bne.n	80082d8 <HAL_UART_Transmit+0x3e>
 80082d4:	2302      	movs	r3, #2
 80082d6:	e06e      	b.n	80083b6 <HAL_UART_Transmit+0x11c>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2221      	movs	r2, #33	; 0x21
 80082ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082ee:	f7fc f847 	bl	8004380 <HAL_GetTick>
 80082f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	88fa      	ldrh	r2, [r7, #6]
 80082f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	88fa      	ldrh	r2, [r7, #6]
 80082fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008308:	d108      	bne.n	800831c <HAL_UART_Transmit+0x82>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d104      	bne.n	800831c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008312:	2300      	movs	r3, #0
 8008314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	61bb      	str	r3, [r7, #24]
 800831a:	e003      	b.n	8008324 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008320:	2300      	movs	r3, #0
 8008322:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800832c:	e02a      	b.n	8008384 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2200      	movs	r2, #0
 8008336:	2180      	movs	r1, #128	; 0x80
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f000 fb6b 	bl	8008a14 <UART_WaitOnFlagUntilTimeout>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e036      	b.n	80083b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10b      	bne.n	8008366 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	881b      	ldrh	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800835c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	3302      	adds	r3, #2
 8008362:	61bb      	str	r3, [r7, #24]
 8008364:	e007      	b.n	8008376 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	781a      	ldrb	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	3301      	adds	r3, #1
 8008374:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800837a:	b29b      	uxth	r3, r3
 800837c:	3b01      	subs	r3, #1
 800837e:	b29a      	uxth	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008388:	b29b      	uxth	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1cf      	bne.n	800832e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	2200      	movs	r2, #0
 8008396:	2140      	movs	r1, #64	; 0x40
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 fb3b 	bl	8008a14 <UART_WaitOnFlagUntilTimeout>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e006      	b.n	80083b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2220      	movs	r2, #32
 80083ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	e000      	b.n	80083b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80083b4:	2302      	movs	r3, #2
  }
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3720      	adds	r7, #32
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083be:	b480      	push	{r7}
 80083c0:	b085      	sub	sp, #20
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	4613      	mov	r3, r2
 80083ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b20      	cmp	r3, #32
 80083d6:	d130      	bne.n	800843a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d002      	beq.n	80083e4 <HAL_UART_Transmit_IT+0x26>
 80083de:	88fb      	ldrh	r3, [r7, #6]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e029      	b.n	800843c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d101      	bne.n	80083f6 <HAL_UART_Transmit_IT+0x38>
 80083f2:	2302      	movs	r3, #2
 80083f4:	e022      	b.n	800843c <HAL_UART_Transmit_IT+0x7e>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	88fa      	ldrh	r2, [r7, #6]
 8008408:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	88fa      	ldrh	r2, [r7, #6]
 800840e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2221      	movs	r2, #33	; 0x21
 800841a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68da      	ldr	r2, [r3, #12]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008434:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	e000      	b.n	800843c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800843a:	2302      	movs	r3, #2
  }
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	4613      	mov	r3, r2
 8008454:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b20      	cmp	r3, #32
 8008460:	d11d      	bne.n	800849e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d002      	beq.n	800846e <HAL_UART_Receive_IT+0x26>
 8008468:	88fb      	ldrh	r3, [r7, #6]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e016      	b.n	80084a0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008478:	2b01      	cmp	r3, #1
 800847a:	d101      	bne.n	8008480 <HAL_UART_Receive_IT+0x38>
 800847c:	2302      	movs	r3, #2
 800847e:	e00f      	b.n	80084a0 <HAL_UART_Receive_IT+0x58>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800848e:	88fb      	ldrh	r3, [r7, #6]
 8008490:	461a      	mov	r2, r3
 8008492:	68b9      	ldr	r1, [r7, #8]
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 fb07 	bl	8008aa8 <UART_Start_Receive_IT>
 800849a:	4603      	mov	r3, r0
 800849c:	e000      	b.n	80084a0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800849e:	2302      	movs	r3, #2
  }
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	4613      	mov	r3, r2
 80084b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b20      	cmp	r3, #32
 80084c0:	d11d      	bne.n	80084fe <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <HAL_UART_Receive_DMA+0x26>
 80084c8:	88fb      	ldrh	r3, [r7, #6]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e016      	b.n	8008500 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d101      	bne.n	80084e0 <HAL_UART_Receive_DMA+0x38>
 80084dc:	2302      	movs	r3, #2
 80084de:	e00f      	b.n	8008500 <HAL_UART_Receive_DMA+0x58>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80084ee:	88fb      	ldrh	r3, [r7, #6]
 80084f0:	461a      	mov	r2, r3
 80084f2:	68b9      	ldr	r1, [r7, #8]
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 fb11 	bl	8008b1c <UART_Start_Receive_DMA>
 80084fa:	4603      	mov	r3, r0
 80084fc:	e000      	b.n	8008500 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80084fe:	2302      	movs	r3, #2
  }
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08a      	sub	sp, #40	; 0x28
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008528:	2300      	movs	r3, #0
 800852a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800852c:	2300      	movs	r3, #0
 800852e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	f003 030f 	and.w	r3, r3, #15
 8008536:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10d      	bne.n	800855a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	f003 0320 	and.w	r3, r3, #32
 8008544:	2b00      	cmp	r3, #0
 8008546:	d008      	beq.n	800855a <HAL_UART_IRQHandler+0x52>
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	f003 0320 	and.w	r3, r3, #32
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fc05 	bl	8008d62 <UART_Receive_IT>
      return;
 8008558:	e17c      	b.n	8008854 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 80b1 	beq.w	80086c4 <HAL_UART_IRQHandler+0x1bc>
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b00      	cmp	r3, #0
 800856a:	d105      	bne.n	8008578 <HAL_UART_IRQHandler+0x70>
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 80a6 	beq.w	80086c4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00a      	beq.n	8008598 <HAL_UART_IRQHandler+0x90>
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008588:	2b00      	cmp	r3, #0
 800858a:	d005      	beq.n	8008598 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008590:	f043 0201 	orr.w	r2, r3, #1
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	f003 0304 	and.w	r3, r3, #4
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00a      	beq.n	80085b8 <HAL_UART_IRQHandler+0xb0>
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d005      	beq.n	80085b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b0:	f043 0202 	orr.w	r2, r3, #2
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <HAL_UART_IRQHandler+0xd0>
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d005      	beq.n	80085d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d0:	f043 0204 	orr.w	r2, r3, #4
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00f      	beq.n	8008602 <HAL_UART_IRQHandler+0xfa>
 80085e2:	6a3b      	ldr	r3, [r7, #32]
 80085e4:	f003 0320 	and.w	r3, r3, #32
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d104      	bne.n	80085f6 <HAL_UART_IRQHandler+0xee>
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d005      	beq.n	8008602 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	f043 0208 	orr.w	r2, r3, #8
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 811f 	beq.w	800884a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	f003 0320 	and.w	r3, r3, #32
 8008612:	2b00      	cmp	r3, #0
 8008614:	d007      	beq.n	8008626 <HAL_UART_IRQHandler+0x11e>
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	f003 0320 	and.w	r3, r3, #32
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fb9e 	bl	8008d62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008630:	2b40      	cmp	r3, #64	; 0x40
 8008632:	bf0c      	ite	eq
 8008634:	2301      	moveq	r3, #1
 8008636:	2300      	movne	r3, #0
 8008638:	b2db      	uxtb	r3, r3
 800863a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008640:	f003 0308 	and.w	r3, r3, #8
 8008644:	2b00      	cmp	r3, #0
 8008646:	d102      	bne.n	800864e <HAL_UART_IRQHandler+0x146>
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d031      	beq.n	80086b2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fade 	bl	8008c10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865e:	2b40      	cmp	r3, #64	; 0x40
 8008660:	d123      	bne.n	80086aa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	695a      	ldr	r2, [r3, #20]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008670:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008676:	2b00      	cmp	r3, #0
 8008678:	d013      	beq.n	80086a2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867e:	4a77      	ldr	r2, [pc, #476]	; (800885c <HAL_UART_IRQHandler+0x354>)
 8008680:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008686:	4618      	mov	r0, r3
 8008688:	f7fc fcea 	bl	8005060 <HAL_DMA_Abort_IT>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d016      	beq.n	80086c0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800869c:	4610      	mov	r0, r2
 800869e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a0:	e00e      	b.n	80086c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f8f0 	bl	8008888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a8:	e00a      	b.n	80086c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f8ec 	bl	8008888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b0:	e006      	b.n	80086c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f8e8 	bl	8008888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80086be:	e0c4      	b.n	800884a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c0:	bf00      	nop
    return;
 80086c2:	e0c2      	b.n	800884a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	f040 80a2 	bne.w	8008812 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	f003 0310 	and.w	r3, r3, #16
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 809c 	beq.w	8008812 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	f003 0310 	and.w	r3, r3, #16
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	f000 8096 	beq.w	8008812 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086e6:	2300      	movs	r3, #0
 80086e8:	60fb      	str	r3, [r7, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	60fb      	str	r3, [r7, #12]
 80086fa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008706:	2b40      	cmp	r3, #64	; 0x40
 8008708:	d14f      	bne.n	80087aa <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008714:	8a3b      	ldrh	r3, [r7, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 8099 	beq.w	800884e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008720:	8a3a      	ldrh	r2, [r7, #16]
 8008722:	429a      	cmp	r2, r3
 8008724:	f080 8093 	bcs.w	800884e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	8a3a      	ldrh	r2, [r7, #16]
 800872c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008738:	d02b      	beq.n	8008792 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68da      	ldr	r2, [r3, #12]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008748:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	695a      	ldr	r2, [r3, #20]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f022 0201 	bic.w	r2, r2, #1
 8008758:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	695a      	ldr	r2, [r3, #20]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008768:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2220      	movs	r2, #32
 800876e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f022 0210 	bic.w	r2, r2, #16
 8008786:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	4618      	mov	r0, r3
 800878e:	f7fc fbf7 	bl	8004f80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800879a:	b29b      	uxth	r3, r3
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	b29b      	uxth	r3, r3
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f87a 	bl	800889c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80087a8:	e051      	b.n	800884e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087bc:	b29b      	uxth	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d047      	beq.n	8008852 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80087c2:	8a7b      	ldrh	r3, [r7, #18]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d044      	beq.n	8008852 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80087d6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	695a      	ldr	r2, [r3, #20]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f022 0201 	bic.w	r2, r2, #1
 80087e6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2220      	movs	r2, #32
 80087ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68da      	ldr	r2, [r3, #12]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f022 0210 	bic.w	r2, r2, #16
 8008804:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008806:	8a7b      	ldrh	r3, [r7, #18]
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f846 	bl	800889c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008810:	e01f      	b.n	8008852 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008818:	2b00      	cmp	r3, #0
 800881a:	d008      	beq.n	800882e <HAL_UART_IRQHandler+0x326>
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008822:	2b00      	cmp	r3, #0
 8008824:	d003      	beq.n	800882e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fa33 	bl	8008c92 <UART_Transmit_IT>
    return;
 800882c:	e012      	b.n	8008854 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00d      	beq.n	8008854 <HAL_UART_IRQHandler+0x34c>
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800883e:	2b00      	cmp	r3, #0
 8008840:	d008      	beq.n	8008854 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fa75 	bl	8008d32 <UART_EndTransmit_IT>
    return;
 8008848:	e004      	b.n	8008854 <HAL_UART_IRQHandler+0x34c>
    return;
 800884a:	bf00      	nop
 800884c:	e002      	b.n	8008854 <HAL_UART_IRQHandler+0x34c>
      return;
 800884e:	bf00      	nop
 8008850:	e000      	b.n	8008854 <HAL_UART_IRQHandler+0x34c>
      return;
 8008852:	bf00      	nop
  }
}
 8008854:	3728      	adds	r7, #40	; 0x28
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	08008c6b 	.word	0x08008c6b

08008860 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d12a      	bne.n	8008926 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68da      	ldr	r2, [r3, #12]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088e4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	695a      	ldr	r2, [r3, #20]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f022 0201 	bic.w	r2, r2, #1
 80088f4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	695a      	ldr	r2, [r3, #20]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008904:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2220      	movs	r2, #32
 800890a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008912:	2b01      	cmp	r3, #1
 8008914:	d107      	bne.n	8008926 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68da      	ldr	r2, [r3, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f022 0210 	bic.w	r2, r2, #16
 8008924:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892a:	2b01      	cmp	r3, #1
 800892c:	d106      	bne.n	800893c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008932:	4619      	mov	r1, r3
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f7ff ffb1 	bl	800889c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800893a:	e002      	b.n	8008942 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f7f9 f87f 	bl	8001a40 <HAL_UART_RxCpltCallback>
}
 8008942:	bf00      	nop
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008956:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895c:	2b01      	cmp	r3, #1
 800895e:	d108      	bne.n	8008972 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008964:	085b      	lsrs	r3, r3, #1
 8008966:	b29b      	uxth	r3, r3
 8008968:	4619      	mov	r1, r3
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f7ff ff96 	bl	800889c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008970:	e002      	b.n	8008978 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f7ff ff7e 	bl	8008874 <HAL_UART_RxHalfCpltCallback>
}
 8008978:	bf00      	nop
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008988:	2300      	movs	r3, #0
 800898a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008990:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899c:	2b80      	cmp	r3, #128	; 0x80
 800899e:	bf0c      	ite	eq
 80089a0:	2301      	moveq	r3, #1
 80089a2:	2300      	movne	r3, #0
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b21      	cmp	r3, #33	; 0x21
 80089b2:	d108      	bne.n	80089c6 <UART_DMAError+0x46>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d005      	beq.n	80089c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2200      	movs	r2, #0
 80089be:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80089c0:	68b8      	ldr	r0, [r7, #8]
 80089c2:	f000 f90f 	bl	8008be4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d0:	2b40      	cmp	r3, #64	; 0x40
 80089d2:	bf0c      	ite	eq
 80089d4:	2301      	moveq	r3, #1
 80089d6:	2300      	movne	r3, #0
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b22      	cmp	r3, #34	; 0x22
 80089e6:	d108      	bne.n	80089fa <UART_DMAError+0x7a>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d005      	beq.n	80089fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	2200      	movs	r2, #0
 80089f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80089f4:	68b8      	ldr	r0, [r7, #8]
 80089f6:	f000 f90b 	bl	8008c10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	f043 0210 	orr.w	r2, r3, #16
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a06:	68b8      	ldr	r0, [r7, #8]
 8008a08:	f7ff ff3e 	bl	8008888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a0c:	bf00      	nop
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	603b      	str	r3, [r7, #0]
 8008a20:	4613      	mov	r3, r2
 8008a22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a24:	e02c      	b.n	8008a80 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2c:	d028      	beq.n	8008a80 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d007      	beq.n	8008a44 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a34:	f7fb fca4 	bl	8004380 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d21d      	bcs.n	8008a80 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a52:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	695a      	ldr	r2, [r3, #20]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0201 	bic.w	r2, r2, #1
 8008a62:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2220      	movs	r2, #32
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e00f      	b.n	8008aa0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	4013      	ands	r3, r2
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	bf0c      	ite	eq
 8008a90:	2301      	moveq	r3, #1
 8008a92:	2300      	movne	r3, #0
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	461a      	mov	r2, r3
 8008a98:	79fb      	ldrb	r3, [r7, #7]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d0c3      	beq.n	8008a26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	88fa      	ldrh	r2, [r7, #6]
 8008ac0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	88fa      	ldrh	r2, [r7, #6]
 8008ac6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2222      	movs	r2, #34	; 0x22
 8008ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68da      	ldr	r2, [r3, #12]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008aec:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	695a      	ldr	r2, [r3, #20]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f042 0201 	orr.w	r2, r2, #1
 8008afc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68da      	ldr	r2, [r3, #12]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f042 0220 	orr.w	r2, r2, #32
 8008b0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	4613      	mov	r3, r2
 8008b28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	88fa      	ldrh	r2, [r7, #6]
 8008b34:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2222      	movs	r2, #34	; 0x22
 8008b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b48:	4a23      	ldr	r2, [pc, #140]	; (8008bd8 <UART_Start_Receive_DMA+0xbc>)
 8008b4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	4a22      	ldr	r2, [pc, #136]	; (8008bdc <UART_Start_Receive_DMA+0xc0>)
 8008b52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	4a21      	ldr	r2, [pc, #132]	; (8008be0 <UART_Start_Receive_DMA+0xc4>)
 8008b5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b60:	2200      	movs	r2, #0
 8008b62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008b64:	f107 0308 	add.w	r3, r7, #8
 8008b68:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3304      	adds	r3, #4
 8008b74:	4619      	mov	r1, r3
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	88fb      	ldrh	r3, [r7, #6]
 8008b7c:	f7fc f9a8 	bl	8004ed0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008b80:	2300      	movs	r3, #0
 8008b82:	613b      	str	r3, [r7, #16]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	613b      	str	r3, [r7, #16]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	613b      	str	r3, [r7, #16]
 8008b94:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68da      	ldr	r2, [r3, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bac:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	695a      	ldr	r2, [r3, #20]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f042 0201 	orr.w	r2, r2, #1
 8008bbc:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	695a      	ldr	r2, [r3, #20]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bcc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3718      	adds	r7, #24
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	080088b5 	.word	0x080088b5
 8008bdc:	0800894b 	.word	0x0800894b
 8008be0:	08008981 	.word	0x08008981

08008be4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68da      	ldr	r2, [r3, #12]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008bfa:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2220      	movs	r2, #32
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68da      	ldr	r2, [r3, #12]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008c26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	695a      	ldr	r2, [r3, #20]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f022 0201 	bic.w	r2, r2, #1
 8008c36:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d107      	bne.n	8008c50 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68da      	ldr	r2, [r3, #12]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f022 0210 	bic.w	r2, r2, #16
 8008c4e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2220      	movs	r2, #32
 8008c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008c5e:	bf00      	nop
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f7ff fdff 	bl	8008888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c8a:	bf00      	nop
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b085      	sub	sp, #20
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b21      	cmp	r3, #33	; 0x21
 8008ca4:	d13e      	bne.n	8008d24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cae:	d114      	bne.n	8008cda <UART_Transmit_IT+0x48>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d110      	bne.n	8008cda <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a1b      	ldr	r3, [r3, #32]
 8008cbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ccc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	1c9a      	adds	r2, r3, #2
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	621a      	str	r2, [r3, #32]
 8008cd8:	e008      	b.n	8008cec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	1c59      	adds	r1, r3, #1
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	6211      	str	r1, [r2, #32]
 8008ce4:	781a      	ldrb	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10f      	bne.n	8008d20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68da      	ldr	r2, [r3, #12]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68da      	ldr	r2, [r3, #12]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	e000      	b.n	8008d26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d24:	2302      	movs	r3, #2
  }
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b082      	sub	sp, #8
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68da      	ldr	r2, [r3, #12]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7ff fd84 	bl	8008860 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b22      	cmp	r3, #34	; 0x22
 8008d74:	f040 8087 	bne.w	8008e86 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d80:	d117      	bne.n	8008db2 <UART_Receive_IT+0x50>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d113      	bne.n	8008db2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d92:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008daa:	1c9a      	adds	r2, r3, #2
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	629a      	str	r2, [r3, #40]	; 0x28
 8008db0:	e026      	b.n	8008e00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008db8:	2300      	movs	r3, #0
 8008dba:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc4:	d007      	beq.n	8008dd6 <UART_Receive_IT+0x74>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10a      	bne.n	8008de4 <UART_Receive_IT+0x82>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d106      	bne.n	8008de4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	701a      	strb	r2, [r3, #0]
 8008de2:	e008      	b.n	8008df6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	3b01      	subs	r3, #1
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d136      	bne.n	8008e82 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68da      	ldr	r2, [r3, #12]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f022 0220 	bic.w	r2, r2, #32
 8008e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68da      	ldr	r2, [r3, #12]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	695a      	ldr	r2, [r3, #20]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f022 0201 	bic.w	r2, r2, #1
 8008e42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2220      	movs	r2, #32
 8008e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d10e      	bne.n	8008e72 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68da      	ldr	r2, [r3, #12]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f022 0210 	bic.w	r2, r2, #16
 8008e62:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7ff fd16 	bl	800889c <HAL_UARTEx_RxEventCallback>
 8008e70:	e002      	b.n	8008e78 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7f8 fde4 	bl	8001a40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	e002      	b.n	8008e88 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	e000      	b.n	8008e88 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008e86:	2302      	movs	r3, #2
  }
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e94:	b09f      	sub	sp, #124	; 0x7c
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea6:	68d9      	ldr	r1, [r3, #12]
 8008ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	ea40 0301 	orr.w	r3, r0, r1
 8008eb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eb4:	689a      	ldr	r2, [r3, #8]
 8008eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	431a      	orrs	r2, r3
 8008ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ed4:	f021 010c 	bic.w	r1, r1, #12
 8008ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ede:	430b      	orrs	r3, r1
 8008ee0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eee:	6999      	ldr	r1, [r3, #24]
 8008ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	ea40 0301 	orr.w	r3, r0, r1
 8008ef8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	4bc5      	ldr	r3, [pc, #788]	; (8009214 <UART_SetConfig+0x384>)
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d004      	beq.n	8008f0e <UART_SetConfig+0x7e>
 8008f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	4bc3      	ldr	r3, [pc, #780]	; (8009218 <UART_SetConfig+0x388>)
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d103      	bne.n	8008f16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f0e:	f7fe f909 	bl	8007124 <HAL_RCC_GetPCLK2Freq>
 8008f12:	6778      	str	r0, [r7, #116]	; 0x74
 8008f14:	e002      	b.n	8008f1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f16:	f7fe f8f1 	bl	80070fc <HAL_RCC_GetPCLK1Freq>
 8008f1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f1e:	69db      	ldr	r3, [r3, #28]
 8008f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f24:	f040 80b6 	bne.w	8009094 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f2a:	461c      	mov	r4, r3
 8008f2c:	f04f 0500 	mov.w	r5, #0
 8008f30:	4622      	mov	r2, r4
 8008f32:	462b      	mov	r3, r5
 8008f34:	1891      	adds	r1, r2, r2
 8008f36:	6439      	str	r1, [r7, #64]	; 0x40
 8008f38:	415b      	adcs	r3, r3
 8008f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f40:	1912      	adds	r2, r2, r4
 8008f42:	eb45 0303 	adc.w	r3, r5, r3
 8008f46:	f04f 0000 	mov.w	r0, #0
 8008f4a:	f04f 0100 	mov.w	r1, #0
 8008f4e:	00d9      	lsls	r1, r3, #3
 8008f50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f54:	00d0      	lsls	r0, r2, #3
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	1911      	adds	r1, r2, r4
 8008f5c:	6639      	str	r1, [r7, #96]	; 0x60
 8008f5e:	416b      	adcs	r3, r5
 8008f60:	667b      	str	r3, [r7, #100]	; 0x64
 8008f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	461a      	mov	r2, r3
 8008f68:	f04f 0300 	mov.w	r3, #0
 8008f6c:	1891      	adds	r1, r2, r2
 8008f6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f70:	415b      	adcs	r3, r3
 8008f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008f7c:	f7f7 fe8c 	bl	8000c98 <__aeabi_uldivmod>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4ba5      	ldr	r3, [pc, #660]	; (800921c <UART_SetConfig+0x38c>)
 8008f86:	fba3 2302 	umull	r2, r3, r3, r2
 8008f8a:	095b      	lsrs	r3, r3, #5
 8008f8c:	011e      	lsls	r6, r3, #4
 8008f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f90:	461c      	mov	r4, r3
 8008f92:	f04f 0500 	mov.w	r5, #0
 8008f96:	4622      	mov	r2, r4
 8008f98:	462b      	mov	r3, r5
 8008f9a:	1891      	adds	r1, r2, r2
 8008f9c:	6339      	str	r1, [r7, #48]	; 0x30
 8008f9e:	415b      	adcs	r3, r3
 8008fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8008fa2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008fa6:	1912      	adds	r2, r2, r4
 8008fa8:	eb45 0303 	adc.w	r3, r5, r3
 8008fac:	f04f 0000 	mov.w	r0, #0
 8008fb0:	f04f 0100 	mov.w	r1, #0
 8008fb4:	00d9      	lsls	r1, r3, #3
 8008fb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008fba:	00d0      	lsls	r0, r2, #3
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	1911      	adds	r1, r2, r4
 8008fc2:	65b9      	str	r1, [r7, #88]	; 0x58
 8008fc4:	416b      	adcs	r3, r5
 8008fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	f04f 0300 	mov.w	r3, #0
 8008fd2:	1891      	adds	r1, r2, r2
 8008fd4:	62b9      	str	r1, [r7, #40]	; 0x28
 8008fd6:	415b      	adcs	r3, r3
 8008fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008fde:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008fe2:	f7f7 fe59 	bl	8000c98 <__aeabi_uldivmod>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4b8c      	ldr	r3, [pc, #560]	; (800921c <UART_SetConfig+0x38c>)
 8008fec:	fba3 1302 	umull	r1, r3, r3, r2
 8008ff0:	095b      	lsrs	r3, r3, #5
 8008ff2:	2164      	movs	r1, #100	; 0x64
 8008ff4:	fb01 f303 	mul.w	r3, r1, r3
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	00db      	lsls	r3, r3, #3
 8008ffc:	3332      	adds	r3, #50	; 0x32
 8008ffe:	4a87      	ldr	r2, [pc, #540]	; (800921c <UART_SetConfig+0x38c>)
 8009000:	fba2 2303 	umull	r2, r3, r2, r3
 8009004:	095b      	lsrs	r3, r3, #5
 8009006:	005b      	lsls	r3, r3, #1
 8009008:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800900c:	441e      	add	r6, r3
 800900e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009010:	4618      	mov	r0, r3
 8009012:	f04f 0100 	mov.w	r1, #0
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	1894      	adds	r4, r2, r2
 800901c:	623c      	str	r4, [r7, #32]
 800901e:	415b      	adcs	r3, r3
 8009020:	627b      	str	r3, [r7, #36]	; 0x24
 8009022:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009026:	1812      	adds	r2, r2, r0
 8009028:	eb41 0303 	adc.w	r3, r1, r3
 800902c:	f04f 0400 	mov.w	r4, #0
 8009030:	f04f 0500 	mov.w	r5, #0
 8009034:	00dd      	lsls	r5, r3, #3
 8009036:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800903a:	00d4      	lsls	r4, r2, #3
 800903c:	4622      	mov	r2, r4
 800903e:	462b      	mov	r3, r5
 8009040:	1814      	adds	r4, r2, r0
 8009042:	653c      	str	r4, [r7, #80]	; 0x50
 8009044:	414b      	adcs	r3, r1
 8009046:	657b      	str	r3, [r7, #84]	; 0x54
 8009048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	461a      	mov	r2, r3
 800904e:	f04f 0300 	mov.w	r3, #0
 8009052:	1891      	adds	r1, r2, r2
 8009054:	61b9      	str	r1, [r7, #24]
 8009056:	415b      	adcs	r3, r3
 8009058:	61fb      	str	r3, [r7, #28]
 800905a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800905e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009062:	f7f7 fe19 	bl	8000c98 <__aeabi_uldivmod>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	4b6c      	ldr	r3, [pc, #432]	; (800921c <UART_SetConfig+0x38c>)
 800906c:	fba3 1302 	umull	r1, r3, r3, r2
 8009070:	095b      	lsrs	r3, r3, #5
 8009072:	2164      	movs	r1, #100	; 0x64
 8009074:	fb01 f303 	mul.w	r3, r1, r3
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	00db      	lsls	r3, r3, #3
 800907c:	3332      	adds	r3, #50	; 0x32
 800907e:	4a67      	ldr	r2, [pc, #412]	; (800921c <UART_SetConfig+0x38c>)
 8009080:	fba2 2303 	umull	r2, r3, r2, r3
 8009084:	095b      	lsrs	r3, r3, #5
 8009086:	f003 0207 	and.w	r2, r3, #7
 800908a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4432      	add	r2, r6
 8009090:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009092:	e0b9      	b.n	8009208 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009096:	461c      	mov	r4, r3
 8009098:	f04f 0500 	mov.w	r5, #0
 800909c:	4622      	mov	r2, r4
 800909e:	462b      	mov	r3, r5
 80090a0:	1891      	adds	r1, r2, r2
 80090a2:	6139      	str	r1, [r7, #16]
 80090a4:	415b      	adcs	r3, r3
 80090a6:	617b      	str	r3, [r7, #20]
 80090a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80090ac:	1912      	adds	r2, r2, r4
 80090ae:	eb45 0303 	adc.w	r3, r5, r3
 80090b2:	f04f 0000 	mov.w	r0, #0
 80090b6:	f04f 0100 	mov.w	r1, #0
 80090ba:	00d9      	lsls	r1, r3, #3
 80090bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090c0:	00d0      	lsls	r0, r2, #3
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	eb12 0804 	adds.w	r8, r2, r4
 80090ca:	eb43 0905 	adc.w	r9, r3, r5
 80090ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f04f 0100 	mov.w	r1, #0
 80090d8:	f04f 0200 	mov.w	r2, #0
 80090dc:	f04f 0300 	mov.w	r3, #0
 80090e0:	008b      	lsls	r3, r1, #2
 80090e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80090e6:	0082      	lsls	r2, r0, #2
 80090e8:	4640      	mov	r0, r8
 80090ea:	4649      	mov	r1, r9
 80090ec:	f7f7 fdd4 	bl	8000c98 <__aeabi_uldivmod>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4b49      	ldr	r3, [pc, #292]	; (800921c <UART_SetConfig+0x38c>)
 80090f6:	fba3 2302 	umull	r2, r3, r3, r2
 80090fa:	095b      	lsrs	r3, r3, #5
 80090fc:	011e      	lsls	r6, r3, #4
 80090fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009100:	4618      	mov	r0, r3
 8009102:	f04f 0100 	mov.w	r1, #0
 8009106:	4602      	mov	r2, r0
 8009108:	460b      	mov	r3, r1
 800910a:	1894      	adds	r4, r2, r2
 800910c:	60bc      	str	r4, [r7, #8]
 800910e:	415b      	adcs	r3, r3
 8009110:	60fb      	str	r3, [r7, #12]
 8009112:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009116:	1812      	adds	r2, r2, r0
 8009118:	eb41 0303 	adc.w	r3, r1, r3
 800911c:	f04f 0400 	mov.w	r4, #0
 8009120:	f04f 0500 	mov.w	r5, #0
 8009124:	00dd      	lsls	r5, r3, #3
 8009126:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800912a:	00d4      	lsls	r4, r2, #3
 800912c:	4622      	mov	r2, r4
 800912e:	462b      	mov	r3, r5
 8009130:	1814      	adds	r4, r2, r0
 8009132:	64bc      	str	r4, [r7, #72]	; 0x48
 8009134:	414b      	adcs	r3, r1
 8009136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	4618      	mov	r0, r3
 800913e:	f04f 0100 	mov.w	r1, #0
 8009142:	f04f 0200 	mov.w	r2, #0
 8009146:	f04f 0300 	mov.w	r3, #0
 800914a:	008b      	lsls	r3, r1, #2
 800914c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009150:	0082      	lsls	r2, r0, #2
 8009152:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009156:	f7f7 fd9f 	bl	8000c98 <__aeabi_uldivmod>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4b2f      	ldr	r3, [pc, #188]	; (800921c <UART_SetConfig+0x38c>)
 8009160:	fba3 1302 	umull	r1, r3, r3, r2
 8009164:	095b      	lsrs	r3, r3, #5
 8009166:	2164      	movs	r1, #100	; 0x64
 8009168:	fb01 f303 	mul.w	r3, r1, r3
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	011b      	lsls	r3, r3, #4
 8009170:	3332      	adds	r3, #50	; 0x32
 8009172:	4a2a      	ldr	r2, [pc, #168]	; (800921c <UART_SetConfig+0x38c>)
 8009174:	fba2 2303 	umull	r2, r3, r2, r3
 8009178:	095b      	lsrs	r3, r3, #5
 800917a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800917e:	441e      	add	r6, r3
 8009180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009182:	4618      	mov	r0, r3
 8009184:	f04f 0100 	mov.w	r1, #0
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	1894      	adds	r4, r2, r2
 800918e:	603c      	str	r4, [r7, #0]
 8009190:	415b      	adcs	r3, r3
 8009192:	607b      	str	r3, [r7, #4]
 8009194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009198:	1812      	adds	r2, r2, r0
 800919a:	eb41 0303 	adc.w	r3, r1, r3
 800919e:	f04f 0400 	mov.w	r4, #0
 80091a2:	f04f 0500 	mov.w	r5, #0
 80091a6:	00dd      	lsls	r5, r3, #3
 80091a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80091ac:	00d4      	lsls	r4, r2, #3
 80091ae:	4622      	mov	r2, r4
 80091b0:	462b      	mov	r3, r5
 80091b2:	eb12 0a00 	adds.w	sl, r2, r0
 80091b6:	eb43 0b01 	adc.w	fp, r3, r1
 80091ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	4618      	mov	r0, r3
 80091c0:	f04f 0100 	mov.w	r1, #0
 80091c4:	f04f 0200 	mov.w	r2, #0
 80091c8:	f04f 0300 	mov.w	r3, #0
 80091cc:	008b      	lsls	r3, r1, #2
 80091ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80091d2:	0082      	lsls	r2, r0, #2
 80091d4:	4650      	mov	r0, sl
 80091d6:	4659      	mov	r1, fp
 80091d8:	f7f7 fd5e 	bl	8000c98 <__aeabi_uldivmod>
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	4b0e      	ldr	r3, [pc, #56]	; (800921c <UART_SetConfig+0x38c>)
 80091e2:	fba3 1302 	umull	r1, r3, r3, r2
 80091e6:	095b      	lsrs	r3, r3, #5
 80091e8:	2164      	movs	r1, #100	; 0x64
 80091ea:	fb01 f303 	mul.w	r3, r1, r3
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	011b      	lsls	r3, r3, #4
 80091f2:	3332      	adds	r3, #50	; 0x32
 80091f4:	4a09      	ldr	r2, [pc, #36]	; (800921c <UART_SetConfig+0x38c>)
 80091f6:	fba2 2303 	umull	r2, r3, r2, r3
 80091fa:	095b      	lsrs	r3, r3, #5
 80091fc:	f003 020f 	and.w	r2, r3, #15
 8009200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4432      	add	r2, r6
 8009206:	609a      	str	r2, [r3, #8]
}
 8009208:	bf00      	nop
 800920a:	377c      	adds	r7, #124	; 0x7c
 800920c:	46bd      	mov	sp, r7
 800920e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009212:	bf00      	nop
 8009214:	40011000 	.word	0x40011000
 8009218:	40011400 	.word	0x40011400
 800921c:	51eb851f 	.word	0x51eb851f

08009220 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009224:	4904      	ldr	r1, [pc, #16]	; (8009238 <MX_FATFS_Init+0x18>)
 8009226:	4805      	ldr	r0, [pc, #20]	; (800923c <MX_FATFS_Init+0x1c>)
 8009228:	f003 fa12 	bl	800c650 <FATFS_LinkDriver>
 800922c:	4603      	mov	r3, r0
 800922e:	461a      	mov	r2, r3
 8009230:	4b03      	ldr	r3, [pc, #12]	; (8009240 <MX_FATFS_Init+0x20>)
 8009232:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009234:	bf00      	nop
 8009236:	bd80      	pop	{r7, pc}
 8009238:	20008f94 	.word	0x20008f94
 800923c:	20000010 	.word	0x20000010
 8009240:	20008f98 	.word	0x20008f98

08009244 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009244:	b480      	push	{r7}
 8009246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009248:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800924a:	4618      	mov	r0, r3
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <USER_initialize>:
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */

)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	4603      	mov	r3, r0
 800925c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 800925e:	79fb      	ldrb	r3, [r7, #7]
 8009260:	4618      	mov	r0, r3
 8009262:	f000 f9df 	bl	8009624 <USER_SPI_initialize>
 8009266:	4603      	mov	r3, r0
 8009268:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800926a:	4618      	mov	r0, r3
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b082      	sub	sp, #8
 8009276:	af00      	add	r7, sp, #0
 8009278:	4603      	mov	r3, r0
 800927a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800927c:	79fb      	ldrb	r3, [r7, #7]
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fabc 	bl	80097fc <USER_SPI_status>
 8009284:	4603      	mov	r3, r0
 8009286:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009288:	4618      	mov	r0, r3
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
 800929a:	603b      	str	r3, [r7, #0]
 800929c:	4603      	mov	r3, r0
 800929e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 80092a0:	7bf8      	ldrb	r0, [r7, #15]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	68b9      	ldr	r1, [r7, #8]
 80092a8:	f000 fabe 	bl	8009828 <USER_SPI_read>
 80092ac:	4603      	mov	r3, r0
 80092ae:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60b9      	str	r1, [r7, #8]
 80092c0:	607a      	str	r2, [r7, #4]
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	4603      	mov	r3, r0
 80092c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 80092c8:	7bf8      	ldrb	r0, [r7, #15]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	68b9      	ldr	r1, [r7, #8]
 80092d0:	f000 fb10 	bl	80098f4 <USER_SPI_write>
 80092d4:	4603      	mov	r3, r0
 80092d6:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	603a      	str	r2, [r7, #0]
 80092ea:	71fb      	strb	r3, [r7, #7]
 80092ec:	460b      	mov	r3, r1
 80092ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	73fb      	strb	r3, [r7, #15]
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	79b9      	ldrb	r1, [r7, #6]
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 fb76 	bl	80099ec <USER_SPI_ioctl>
 8009300:	4603      	mov	r3, r0
 8009302:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009314:	f7fb f834 	bl	8004380 <HAL_GetTick>
 8009318:	4603      	mov	r3, r0
 800931a:	4a04      	ldr	r2, [pc, #16]	; (800932c <SPI_Timer_On+0x20>)
 800931c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800931e:	4a04      	ldr	r2, [pc, #16]	; (8009330 <SPI_Timer_On+0x24>)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6013      	str	r3, [r2, #0]
}
 8009324:	bf00      	nop
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	20009400 	.word	0x20009400
 8009330:	20009404 	.word	0x20009404

08009334 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009334:	b580      	push	{r7, lr}
 8009336:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009338:	f7fb f822 	bl	8004380 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	4b06      	ldr	r3, [pc, #24]	; (8009358 <SPI_Timer_Status+0x24>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	1ad2      	subs	r2, r2, r3
 8009344:	4b05      	ldr	r3, [pc, #20]	; (800935c <SPI_Timer_Status+0x28>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	429a      	cmp	r2, r3
 800934a:	bf34      	ite	cc
 800934c:	2301      	movcc	r3, #1
 800934e:	2300      	movcs	r3, #0
 8009350:	b2db      	uxtb	r3, r3
}
 8009352:	4618      	mov	r0, r3
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20009400 	.word	0x20009400
 800935c:	20009404 	.word	0x20009404

08009360 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af02      	add	r7, sp, #8
 8009366:	4603      	mov	r3, r0
 8009368:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800936a:	f107 020f 	add.w	r2, r7, #15
 800936e:	1df9      	adds	r1, r7, #7
 8009370:	2332      	movs	r3, #50	; 0x32
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	2301      	movs	r3, #1
 8009376:	4804      	ldr	r0, [pc, #16]	; (8009388 <xchg_spi+0x28>)
 8009378:	f7fe f9f0 	bl	800775c <HAL_SPI_TransmitReceive>
    return rxDat;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	20008bf8 	.word	0x20008bf8

0800938c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800938c:	b590      	push	{r4, r7, lr}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8009396:	2300      	movs	r3, #0
 8009398:	60fb      	str	r3, [r7, #12]
 800939a:	e00a      	b.n	80093b2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	18d4      	adds	r4, r2, r3
 80093a2:	20ff      	movs	r0, #255	; 0xff
 80093a4:	f7ff ffdc 	bl	8009360 <xchg_spi>
 80093a8:	4603      	mov	r3, r0
 80093aa:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60fb      	str	r3, [r7, #12]
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d3f0      	bcc.n	800939c <rcvr_spi_multi+0x10>
	}
}
 80093ba:	bf00      	nop
 80093bc:	bf00      	nop
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd90      	pop	{r4, r7, pc}

080093c4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80093ce:	2300      	movs	r3, #0
 80093d0:	60fb      	str	r3, [r7, #12]
 80093d2:	e009      	b.n	80093e8 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	4413      	add	r3, r2
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff ffbf 	bl	8009360 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3301      	adds	r3, #1
 80093e6:	60fb      	str	r3, [r7, #12]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d3f1      	bcc.n	80093d4 <xmit_spi_multi+0x10>
	}
}
 80093f0:	bf00      	nop
 80093f2:	bf00      	nop
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b086      	sub	sp, #24
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8009402:	f7fa ffbd 	bl	8004380 <HAL_GetTick>
 8009406:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800940c:	20ff      	movs	r0, #255	; 0xff
 800940e:	f7ff ffa7 	bl	8009360 <xchg_spi>
 8009412:	4603      	mov	r3, r0
 8009414:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	2bff      	cmp	r3, #255	; 0xff
 800941a:	d007      	beq.n	800942c <wait_ready+0x32>
 800941c:	f7fa ffb0 	bl	8004380 <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	693a      	ldr	r2, [r7, #16]
 8009428:	429a      	cmp	r2, r3
 800942a:	d8ef      	bhi.n	800940c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	2bff      	cmp	r3, #255	; 0xff
 8009430:	bf0c      	ite	eq
 8009432:	2301      	moveq	r3, #1
 8009434:	2300      	movne	r3, #0
 8009436:	b2db      	uxtb	r3, r3
}
 8009438:	4618      	mov	r0, r3
 800943a:	3718      	adds	r7, #24
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009444:	2201      	movs	r2, #1
 8009446:	2110      	movs	r1, #16
 8009448:	4803      	ldr	r0, [pc, #12]	; (8009458 <despiselect+0x18>)
 800944a:	f7fc fa31 	bl	80058b0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800944e:	20ff      	movs	r0, #255	; 0xff
 8009450:	f7ff ff86 	bl	8009360 <xchg_spi>

}
 8009454:	bf00      	nop
 8009456:	bd80      	pop	{r7, pc}
 8009458:	40020800 	.word	0x40020800

0800945c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8009460:	2200      	movs	r2, #0
 8009462:	2110      	movs	r1, #16
 8009464:	4809      	ldr	r0, [pc, #36]	; (800948c <spiselect+0x30>)
 8009466:	f7fc fa23 	bl	80058b0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800946a:	20ff      	movs	r0, #255	; 0xff
 800946c:	f7ff ff78 	bl	8009360 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009470:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009474:	f7ff ffc1 	bl	80093fa <wait_ready>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <spiselect+0x26>
 800947e:	2301      	movs	r3, #1
 8009480:	e002      	b.n	8009488 <spiselect+0x2c>

	despiselect();
 8009482:	f7ff ffdd 	bl	8009440 <despiselect>
	return 0;	/* Timeout */
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	bd80      	pop	{r7, pc}
 800948c:	40020800 	.word	0x40020800

08009490 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800949a:	20c8      	movs	r0, #200	; 0xc8
 800949c:	f7ff ff36 	bl	800930c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80094a0:	20ff      	movs	r0, #255	; 0xff
 80094a2:	f7ff ff5d 	bl	8009360 <xchg_spi>
 80094a6:	4603      	mov	r3, r0
 80094a8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80094aa:	7bfb      	ldrb	r3, [r7, #15]
 80094ac:	2bff      	cmp	r3, #255	; 0xff
 80094ae:	d104      	bne.n	80094ba <rcvr_datablock+0x2a>
 80094b0:	f7ff ff40 	bl	8009334 <SPI_Timer_Status>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1f2      	bne.n	80094a0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80094ba:	7bfb      	ldrb	r3, [r7, #15]
 80094bc:	2bfe      	cmp	r3, #254	; 0xfe
 80094be:	d001      	beq.n	80094c4 <rcvr_datablock+0x34>
 80094c0:	2300      	movs	r3, #0
 80094c2:	e00a      	b.n	80094da <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7ff ff60 	bl	800938c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80094cc:	20ff      	movs	r0, #255	; 0xff
 80094ce:	f7ff ff47 	bl	8009360 <xchg_spi>
 80094d2:	20ff      	movs	r0, #255	; 0xff
 80094d4:	f7ff ff44 	bl	8009360 <xchg_spi>

	return 1;						/* Function succeeded */
 80094d8:	2301      	movs	r3, #1
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b084      	sub	sp, #16
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	460b      	mov	r3, r1
 80094ec:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80094ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80094f2:	f7ff ff82 	bl	80093fa <wait_ready>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <xmit_datablock+0x1e>
 80094fc:	2300      	movs	r3, #0
 80094fe:	e01e      	b.n	800953e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8009500:	78fb      	ldrb	r3, [r7, #3]
 8009502:	4618      	mov	r0, r3
 8009504:	f7ff ff2c 	bl	8009360 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	2bfd      	cmp	r3, #253	; 0xfd
 800950c:	d016      	beq.n	800953c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800950e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7ff ff56 	bl	80093c4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009518:	20ff      	movs	r0, #255	; 0xff
 800951a:	f7ff ff21 	bl	8009360 <xchg_spi>
 800951e:	20ff      	movs	r0, #255	; 0xff
 8009520:	f7ff ff1e 	bl	8009360 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009524:	20ff      	movs	r0, #255	; 0xff
 8009526:	f7ff ff1b 	bl	8009360 <xchg_spi>
 800952a:	4603      	mov	r3, r0
 800952c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	f003 031f 	and.w	r3, r3, #31
 8009534:	2b05      	cmp	r3, #5
 8009536:	d001      	beq.n	800953c <xmit_datablock+0x5a>
 8009538:	2300      	movs	r3, #0
 800953a:	e000      	b.n	800953e <xmit_datablock+0x5c>
	}
	return 1;
 800953c:	2301      	movs	r3, #1
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	4603      	mov	r3, r0
 800954e:	6039      	str	r1, [r7, #0]
 8009550:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009556:	2b00      	cmp	r3, #0
 8009558:	da0e      	bge.n	8009578 <send_cmd+0x32>
		cmd &= 0x7F;
 800955a:	79fb      	ldrb	r3, [r7, #7]
 800955c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009560:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8009562:	2100      	movs	r1, #0
 8009564:	2037      	movs	r0, #55	; 0x37
 8009566:	f7ff ffee 	bl	8009546 <send_cmd>
 800956a:	4603      	mov	r3, r0
 800956c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800956e:	7bbb      	ldrb	r3, [r7, #14]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d901      	bls.n	8009578 <send_cmd+0x32>
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	e051      	b.n	800961c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009578:	79fb      	ldrb	r3, [r7, #7]
 800957a:	2b0c      	cmp	r3, #12
 800957c:	d008      	beq.n	8009590 <send_cmd+0x4a>
		despiselect();
 800957e:	f7ff ff5f 	bl	8009440 <despiselect>
		if (!spiselect()) return 0xFF;
 8009582:	f7ff ff6b 	bl	800945c <spiselect>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <send_cmd+0x4a>
 800958c:	23ff      	movs	r3, #255	; 0xff
 800958e:	e045      	b.n	800961c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009596:	b2db      	uxtb	r3, r3
 8009598:	4618      	mov	r0, r3
 800959a:	f7ff fee1 	bl	8009360 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	0e1b      	lsrs	r3, r3, #24
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7ff fedb 	bl	8009360 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	0c1b      	lsrs	r3, r3, #16
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7ff fed5 	bl	8009360 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	0a1b      	lsrs	r3, r3, #8
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	4618      	mov	r0, r3
 80095be:	f7ff fecf 	bl	8009360 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff feca 	bl	8009360 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80095cc:	2301      	movs	r3, #1
 80095ce:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80095d0:	79fb      	ldrb	r3, [r7, #7]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d101      	bne.n	80095da <send_cmd+0x94>
 80095d6:	2395      	movs	r3, #149	; 0x95
 80095d8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80095da:	79fb      	ldrb	r3, [r7, #7]
 80095dc:	2b08      	cmp	r3, #8
 80095de:	d101      	bne.n	80095e4 <send_cmd+0x9e>
 80095e0:	2387      	movs	r3, #135	; 0x87
 80095e2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7ff feba 	bl	8009360 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80095ec:	79fb      	ldrb	r3, [r7, #7]
 80095ee:	2b0c      	cmp	r3, #12
 80095f0:	d102      	bne.n	80095f8 <send_cmd+0xb2>
 80095f2:	20ff      	movs	r0, #255	; 0xff
 80095f4:	f7ff feb4 	bl	8009360 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80095f8:	230a      	movs	r3, #10
 80095fa:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80095fc:	20ff      	movs	r0, #255	; 0xff
 80095fe:	f7ff feaf 	bl	8009360 <xchg_spi>
 8009602:	4603      	mov	r3, r0
 8009604:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8009606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800960a:	2b00      	cmp	r3, #0
 800960c:	da05      	bge.n	800961a <send_cmd+0xd4>
 800960e:	7bfb      	ldrb	r3, [r7, #15]
 8009610:	3b01      	subs	r3, #1
 8009612:	73fb      	strb	r3, [r7, #15]
 8009614:	7bfb      	ldrb	r3, [r7, #15]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1f0      	bne.n	80095fc <send_cmd+0xb6>

	return res;							/* Return received response */
 800961a:	7bbb      	ldrb	r3, [r7, #14]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009624:	b590      	push	{r4, r7, lr}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	4603      	mov	r3, r0
 800962c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800962e:	79fb      	ldrb	r3, [r7, #7]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <USER_SPI_initialize+0x14>
 8009634:	2301      	movs	r3, #1
 8009636:	e0d6      	b.n	80097e6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009638:	4b6d      	ldr	r3, [pc, #436]	; (80097f0 <USER_SPI_initialize+0x1cc>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	b2db      	uxtb	r3, r3
 800963e:	f003 0302 	and.w	r3, r3, #2
 8009642:	2b00      	cmp	r3, #0
 8009644:	d003      	beq.n	800964e <USER_SPI_initialize+0x2a>
 8009646:	4b6a      	ldr	r3, [pc, #424]	; (80097f0 <USER_SPI_initialize+0x1cc>)
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	b2db      	uxtb	r3, r3
 800964c:	e0cb      	b.n	80097e6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800964e:	4b69      	ldr	r3, [pc, #420]	; (80097f4 <USER_SPI_initialize+0x1d0>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009658:	4b66      	ldr	r3, [pc, #408]	; (80097f4 <USER_SPI_initialize+0x1d0>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8009660:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009662:	230a      	movs	r3, #10
 8009664:	73fb      	strb	r3, [r7, #15]
 8009666:	e005      	b.n	8009674 <USER_SPI_initialize+0x50>
 8009668:	20ff      	movs	r0, #255	; 0xff
 800966a:	f7ff fe79 	bl	8009360 <xchg_spi>
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	3b01      	subs	r3, #1
 8009672:	73fb      	strb	r3, [r7, #15]
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1f6      	bne.n	8009668 <USER_SPI_initialize+0x44>

	ty = 0;
 800967a:	2300      	movs	r3, #0
 800967c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800967e:	2100      	movs	r1, #0
 8009680:	2000      	movs	r0, #0
 8009682:	f7ff ff60 	bl	8009546 <send_cmd>
 8009686:	4603      	mov	r3, r0
 8009688:	2b01      	cmp	r3, #1
 800968a:	f040 808b 	bne.w	80097a4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800968e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009692:	f7ff fe3b 	bl	800930c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8009696:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800969a:	2008      	movs	r0, #8
 800969c:	f7ff ff53 	bl	8009546 <send_cmd>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d151      	bne.n	800974a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80096a6:	2300      	movs	r3, #0
 80096a8:	73fb      	strb	r3, [r7, #15]
 80096aa:	e00d      	b.n	80096c8 <USER_SPI_initialize+0xa4>
 80096ac:	7bfc      	ldrb	r4, [r7, #15]
 80096ae:	20ff      	movs	r0, #255	; 0xff
 80096b0:	f7ff fe56 	bl	8009360 <xchg_spi>
 80096b4:	4603      	mov	r3, r0
 80096b6:	461a      	mov	r2, r3
 80096b8:	f107 0310 	add.w	r3, r7, #16
 80096bc:	4423      	add	r3, r4
 80096be:	f803 2c08 	strb.w	r2, [r3, #-8]
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	3301      	adds	r3, #1
 80096c6:	73fb      	strb	r3, [r7, #15]
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d9ee      	bls.n	80096ac <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80096ce:	7abb      	ldrb	r3, [r7, #10]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d167      	bne.n	80097a4 <USER_SPI_initialize+0x180>
 80096d4:	7afb      	ldrb	r3, [r7, #11]
 80096d6:	2baa      	cmp	r3, #170	; 0xaa
 80096d8:	d164      	bne.n	80097a4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80096da:	bf00      	nop
 80096dc:	f7ff fe2a 	bl	8009334 <SPI_Timer_Status>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d007      	beq.n	80096f6 <USER_SPI_initialize+0xd2>
 80096e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80096ea:	20a9      	movs	r0, #169	; 0xa9
 80096ec:	f7ff ff2b 	bl	8009546 <send_cmd>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1f2      	bne.n	80096dc <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80096f6:	f7ff fe1d 	bl	8009334 <SPI_Timer_Status>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d051      	beq.n	80097a4 <USER_SPI_initialize+0x180>
 8009700:	2100      	movs	r1, #0
 8009702:	203a      	movs	r0, #58	; 0x3a
 8009704:	f7ff ff1f 	bl	8009546 <send_cmd>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d14a      	bne.n	80097a4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800970e:	2300      	movs	r3, #0
 8009710:	73fb      	strb	r3, [r7, #15]
 8009712:	e00d      	b.n	8009730 <USER_SPI_initialize+0x10c>
 8009714:	7bfc      	ldrb	r4, [r7, #15]
 8009716:	20ff      	movs	r0, #255	; 0xff
 8009718:	f7ff fe22 	bl	8009360 <xchg_spi>
 800971c:	4603      	mov	r3, r0
 800971e:	461a      	mov	r2, r3
 8009720:	f107 0310 	add.w	r3, r7, #16
 8009724:	4423      	add	r3, r4
 8009726:	f803 2c08 	strb.w	r2, [r3, #-8]
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	3301      	adds	r3, #1
 800972e:	73fb      	strb	r3, [r7, #15]
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	2b03      	cmp	r3, #3
 8009734:	d9ee      	bls.n	8009714 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8009736:	7a3b      	ldrb	r3, [r7, #8]
 8009738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <USER_SPI_initialize+0x120>
 8009740:	230c      	movs	r3, #12
 8009742:	e000      	b.n	8009746 <USER_SPI_initialize+0x122>
 8009744:	2304      	movs	r3, #4
 8009746:	737b      	strb	r3, [r7, #13]
 8009748:	e02c      	b.n	80097a4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800974a:	2100      	movs	r1, #0
 800974c:	20a9      	movs	r0, #169	; 0xa9
 800974e:	f7ff fefa 	bl	8009546 <send_cmd>
 8009752:	4603      	mov	r3, r0
 8009754:	2b01      	cmp	r3, #1
 8009756:	d804      	bhi.n	8009762 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009758:	2302      	movs	r3, #2
 800975a:	737b      	strb	r3, [r7, #13]
 800975c:	23a9      	movs	r3, #169	; 0xa9
 800975e:	73bb      	strb	r3, [r7, #14]
 8009760:	e003      	b.n	800976a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8009762:	2301      	movs	r3, #1
 8009764:	737b      	strb	r3, [r7, #13]
 8009766:	2301      	movs	r3, #1
 8009768:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800976a:	bf00      	nop
 800976c:	f7ff fde2 	bl	8009334 <SPI_Timer_Status>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d007      	beq.n	8009786 <USER_SPI_initialize+0x162>
 8009776:	7bbb      	ldrb	r3, [r7, #14]
 8009778:	2100      	movs	r1, #0
 800977a:	4618      	mov	r0, r3
 800977c:	f7ff fee3 	bl	8009546 <send_cmd>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1f2      	bne.n	800976c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8009786:	f7ff fdd5 	bl	8009334 <SPI_Timer_Status>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d007      	beq.n	80097a0 <USER_SPI_initialize+0x17c>
 8009790:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009794:	2010      	movs	r0, #16
 8009796:	f7ff fed6 	bl	8009546 <send_cmd>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d001      	beq.n	80097a4 <USER_SPI_initialize+0x180>
				ty = 0;
 80097a0:	2300      	movs	r3, #0
 80097a2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80097a4:	4a14      	ldr	r2, [pc, #80]	; (80097f8 <USER_SPI_initialize+0x1d4>)
 80097a6:	7b7b      	ldrb	r3, [r7, #13]
 80097a8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80097aa:	f7ff fe49 	bl	8009440 <despiselect>

	if (ty) {			/* OK */
 80097ae:	7b7b      	ldrb	r3, [r7, #13]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d012      	beq.n	80097da <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80097b4:	4b0f      	ldr	r3, [pc, #60]	; (80097f4 <USER_SPI_initialize+0x1d0>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80097be:	4b0d      	ldr	r3, [pc, #52]	; (80097f4 <USER_SPI_initialize+0x1d0>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f042 0218 	orr.w	r2, r2, #24
 80097c6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80097c8:	4b09      	ldr	r3, [pc, #36]	; (80097f0 <USER_SPI_initialize+0x1cc>)
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	f023 0301 	bic.w	r3, r3, #1
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	4b06      	ldr	r3, [pc, #24]	; (80097f0 <USER_SPI_initialize+0x1cc>)
 80097d6:	701a      	strb	r2, [r3, #0]
 80097d8:	e002      	b.n	80097e0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80097da:	4b05      	ldr	r3, [pc, #20]	; (80097f0 <USER_SPI_initialize+0x1cc>)
 80097dc:	2201      	movs	r2, #1
 80097de:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80097e0:	4b03      	ldr	r3, [pc, #12]	; (80097f0 <USER_SPI_initialize+0x1cc>)
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	b2db      	uxtb	r3, r3
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd90      	pop	{r4, r7, pc}
 80097ee:	bf00      	nop
 80097f0:	20000024 	.word	0x20000024
 80097f4:	20008bf8 	.word	0x20008bf8
 80097f8:	200003f8 	.word	0x200003f8

080097fc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	4603      	mov	r3, r0
 8009804:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8009806:	79fb      	ldrb	r3, [r7, #7]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d001      	beq.n	8009810 <USER_SPI_status+0x14>
 800980c:	2301      	movs	r3, #1
 800980e:	e002      	b.n	8009816 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8009810:	4b04      	ldr	r3, [pc, #16]	; (8009824 <USER_SPI_status+0x28>)
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	b2db      	uxtb	r3, r3
}
 8009816:	4618      	mov	r0, r3
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	20000024 	.word	0x20000024

08009828 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	60b9      	str	r1, [r7, #8]
 8009830:	607a      	str	r2, [r7, #4]
 8009832:	603b      	str	r3, [r7, #0]
 8009834:	4603      	mov	r3, r0
 8009836:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d102      	bne.n	8009844 <USER_SPI_read+0x1c>
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <USER_SPI_read+0x20>
 8009844:	2304      	movs	r3, #4
 8009846:	e04d      	b.n	80098e4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009848:	4b28      	ldr	r3, [pc, #160]	; (80098ec <USER_SPI_read+0xc4>)
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	b2db      	uxtb	r3, r3
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <USER_SPI_read+0x32>
 8009856:	2303      	movs	r3, #3
 8009858:	e044      	b.n	80098e4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800985a:	4b25      	ldr	r3, [pc, #148]	; (80098f0 <USER_SPI_read+0xc8>)
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	f003 0308 	and.w	r3, r3, #8
 8009862:	2b00      	cmp	r3, #0
 8009864:	d102      	bne.n	800986c <USER_SPI_read+0x44>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	025b      	lsls	r3, r3, #9
 800986a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d111      	bne.n	8009896 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8009872:	6879      	ldr	r1, [r7, #4]
 8009874:	2011      	movs	r0, #17
 8009876:	f7ff fe66 	bl	8009546 <send_cmd>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d129      	bne.n	80098d4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009884:	68b8      	ldr	r0, [r7, #8]
 8009886:	f7ff fe03 	bl	8009490 <rcvr_datablock>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d021      	beq.n	80098d4 <USER_SPI_read+0xac>
			count = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	603b      	str	r3, [r7, #0]
 8009894:	e01e      	b.n	80098d4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	2012      	movs	r0, #18
 800989a:	f7ff fe54 	bl	8009546 <send_cmd>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d117      	bne.n	80098d4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80098a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80098a8:	68b8      	ldr	r0, [r7, #8]
 80098aa:	f7ff fdf1 	bl	8009490 <rcvr_datablock>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00a      	beq.n	80098ca <USER_SPI_read+0xa2>
				buff += 512;
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80098ba:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	3b01      	subs	r3, #1
 80098c0:	603b      	str	r3, [r7, #0]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1ed      	bne.n	80098a4 <USER_SPI_read+0x7c>
 80098c8:	e000      	b.n	80098cc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80098ca:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80098cc:	2100      	movs	r1, #0
 80098ce:	200c      	movs	r0, #12
 80098d0:	f7ff fe39 	bl	8009546 <send_cmd>
		}
	}
	despiselect();
 80098d4:	f7ff fdb4 	bl	8009440 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	bf14      	ite	ne
 80098de:	2301      	movne	r3, #1
 80098e0:	2300      	moveq	r3, #0
 80098e2:	b2db      	uxtb	r3, r3
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	20000024 	.word	0x20000024
 80098f0:	200003f8 	.word	0x200003f8

080098f4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	607a      	str	r2, [r7, #4]
 80098fe:	603b      	str	r3, [r7, #0]
 8009900:	4603      	mov	r3, r0
 8009902:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009904:	7bfb      	ldrb	r3, [r7, #15]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d102      	bne.n	8009910 <USER_SPI_write+0x1c>
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <USER_SPI_write+0x20>
 8009910:	2304      	movs	r3, #4
 8009912:	e063      	b.n	80099dc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009914:	4b33      	ldr	r3, [pc, #204]	; (80099e4 <USER_SPI_write+0xf0>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	d001      	beq.n	8009926 <USER_SPI_write+0x32>
 8009922:	2303      	movs	r3, #3
 8009924:	e05a      	b.n	80099dc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009926:	4b2f      	ldr	r3, [pc, #188]	; (80099e4 <USER_SPI_write+0xf0>)
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	f003 0304 	and.w	r3, r3, #4
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <USER_SPI_write+0x44>
 8009934:	2302      	movs	r3, #2
 8009936:	e051      	b.n	80099dc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009938:	4b2b      	ldr	r3, [pc, #172]	; (80099e8 <USER_SPI_write+0xf4>)
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	f003 0308 	and.w	r3, r3, #8
 8009940:	2b00      	cmp	r3, #0
 8009942:	d102      	bne.n	800994a <USER_SPI_write+0x56>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	025b      	lsls	r3, r3, #9
 8009948:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d110      	bne.n	8009972 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009950:	6879      	ldr	r1, [r7, #4]
 8009952:	2018      	movs	r0, #24
 8009954:	f7ff fdf7 	bl	8009546 <send_cmd>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d136      	bne.n	80099cc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800995e:	21fe      	movs	r1, #254	; 0xfe
 8009960:	68b8      	ldr	r0, [r7, #8]
 8009962:	f7ff fdbe 	bl	80094e2 <xmit_datablock>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d02f      	beq.n	80099cc <USER_SPI_write+0xd8>
			count = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	e02c      	b.n	80099cc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009972:	4b1d      	ldr	r3, [pc, #116]	; (80099e8 <USER_SPI_write+0xf4>)
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	f003 0306 	and.w	r3, r3, #6
 800997a:	2b00      	cmp	r3, #0
 800997c:	d003      	beq.n	8009986 <USER_SPI_write+0x92>
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	2097      	movs	r0, #151	; 0x97
 8009982:	f7ff fde0 	bl	8009546 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009986:	6879      	ldr	r1, [r7, #4]
 8009988:	2019      	movs	r0, #25
 800998a:	f7ff fddc 	bl	8009546 <send_cmd>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d11b      	bne.n	80099cc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009994:	21fc      	movs	r1, #252	; 0xfc
 8009996:	68b8      	ldr	r0, [r7, #8]
 8009998:	f7ff fda3 	bl	80094e2 <xmit_datablock>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00a      	beq.n	80099b8 <USER_SPI_write+0xc4>
				buff += 512;
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80099a8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	603b      	str	r3, [r7, #0]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1ee      	bne.n	8009994 <USER_SPI_write+0xa0>
 80099b6:	e000      	b.n	80099ba <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80099b8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80099ba:	21fd      	movs	r1, #253	; 0xfd
 80099bc:	2000      	movs	r0, #0
 80099be:	f7ff fd90 	bl	80094e2 <xmit_datablock>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <USER_SPI_write+0xd8>
 80099c8:	2301      	movs	r3, #1
 80099ca:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80099cc:	f7ff fd38 	bl	8009440 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	bf14      	ite	ne
 80099d6:	2301      	movne	r3, #1
 80099d8:	2300      	moveq	r3, #0
 80099da:	b2db      	uxtb	r3, r3
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	20000024 	.word	0x20000024
 80099e8:	200003f8 	.word	0x200003f8

080099ec <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b08c      	sub	sp, #48	; 0x30
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	4603      	mov	r3, r0
 80099f4:	603a      	str	r2, [r7, #0]
 80099f6:	71fb      	strb	r3, [r7, #7]
 80099f8:	460b      	mov	r3, r1
 80099fa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80099fc:	79fb      	ldrb	r3, [r7, #7]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <USER_SPI_ioctl+0x1a>
 8009a02:	2304      	movs	r3, #4
 8009a04:	e15a      	b.n	8009cbc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009a06:	4baf      	ldr	r3, [pc, #700]	; (8009cc4 <USER_SPI_ioctl+0x2d8>)
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	f003 0301 	and.w	r3, r3, #1
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d001      	beq.n	8009a18 <USER_SPI_ioctl+0x2c>
 8009a14:	2303      	movs	r3, #3
 8009a16:	e151      	b.n	8009cbc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8009a1e:	79bb      	ldrb	r3, [r7, #6]
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	f200 8136 	bhi.w	8009c92 <USER_SPI_ioctl+0x2a6>
 8009a26:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <USER_SPI_ioctl+0x40>)
 8009a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2c:	08009a41 	.word	0x08009a41
 8009a30:	08009a55 	.word	0x08009a55
 8009a34:	08009c93 	.word	0x08009c93
 8009a38:	08009b01 	.word	0x08009b01
 8009a3c:	08009bf7 	.word	0x08009bf7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009a40:	f7ff fd0c 	bl	800945c <spiselect>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 8127 	beq.w	8009c9a <USER_SPI_ioctl+0x2ae>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009a52:	e122      	b.n	8009c9a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009a54:	2100      	movs	r1, #0
 8009a56:	2009      	movs	r0, #9
 8009a58:	f7ff fd75 	bl	8009546 <send_cmd>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f040 811d 	bne.w	8009c9e <USER_SPI_ioctl+0x2b2>
 8009a64:	f107 030c 	add.w	r3, r7, #12
 8009a68:	2110      	movs	r1, #16
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff fd10 	bl	8009490 <rcvr_datablock>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f000 8113 	beq.w	8009c9e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009a78:	7b3b      	ldrb	r3, [r7, #12]
 8009a7a:	099b      	lsrs	r3, r3, #6
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d111      	bne.n	8009aa6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8009a82:	7d7b      	ldrb	r3, [r7, #21]
 8009a84:	461a      	mov	r2, r3
 8009a86:	7d3b      	ldrb	r3, [r7, #20]
 8009a88:	021b      	lsls	r3, r3, #8
 8009a8a:	4413      	add	r3, r2
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	7cfb      	ldrb	r3, [r7, #19]
 8009a90:	041b      	lsls	r3, r3, #16
 8009a92:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009a96:	4413      	add	r3, r2
 8009a98:	3301      	adds	r3, #1
 8009a9a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	029a      	lsls	r2, r3, #10
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	e028      	b.n	8009af8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009aa6:	7c7b      	ldrb	r3, [r7, #17]
 8009aa8:	f003 030f 	and.w	r3, r3, #15
 8009aac:	b2da      	uxtb	r2, r3
 8009aae:	7dbb      	ldrb	r3, [r7, #22]
 8009ab0:	09db      	lsrs	r3, r3, #7
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	4413      	add	r3, r2
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	7d7b      	ldrb	r3, [r7, #21]
 8009aba:	005b      	lsls	r3, r3, #1
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	f003 0306 	and.w	r3, r3, #6
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	4413      	add	r3, r2
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	3302      	adds	r3, #2
 8009aca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009ace:	7d3b      	ldrb	r3, [r7, #20]
 8009ad0:	099b      	lsrs	r3, r3, #6
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	7cfb      	ldrb	r3, [r7, #19]
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	441a      	add	r2, r3
 8009adc:	7cbb      	ldrb	r3, [r7, #18]
 8009ade:	029b      	lsls	r3, r3, #10
 8009ae0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009ae4:	4413      	add	r3, r2
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009aea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009aee:	3b09      	subs	r3, #9
 8009af0:	69fa      	ldr	r2, [r7, #28]
 8009af2:	409a      	lsls	r2, r3
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009afe:	e0ce      	b.n	8009c9e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009b00:	4b71      	ldr	r3, [pc, #452]	; (8009cc8 <USER_SPI_ioctl+0x2dc>)
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	f003 0304 	and.w	r3, r3, #4
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d031      	beq.n	8009b70 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	208d      	movs	r0, #141	; 0x8d
 8009b10:	f7ff fd19 	bl	8009546 <send_cmd>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f040 80c3 	bne.w	8009ca2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8009b1c:	20ff      	movs	r0, #255	; 0xff
 8009b1e:	f7ff fc1f 	bl	8009360 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8009b22:	f107 030c 	add.w	r3, r7, #12
 8009b26:	2110      	movs	r1, #16
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7ff fcb1 	bl	8009490 <rcvr_datablock>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f000 80b6 	beq.w	8009ca2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009b36:	2330      	movs	r3, #48	; 0x30
 8009b38:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009b3c:	e007      	b.n	8009b4e <USER_SPI_ioctl+0x162>
 8009b3e:	20ff      	movs	r0, #255	; 0xff
 8009b40:	f7ff fc0e 	bl	8009360 <xchg_spi>
 8009b44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009b4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1f3      	bne.n	8009b3e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009b56:	7dbb      	ldrb	r3, [r7, #22]
 8009b58:	091b      	lsrs	r3, r3, #4
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	2310      	movs	r3, #16
 8009b60:	fa03 f202 	lsl.w	r2, r3, r2
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009b6e:	e098      	b.n	8009ca2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009b70:	2100      	movs	r1, #0
 8009b72:	2009      	movs	r0, #9
 8009b74:	f7ff fce7 	bl	8009546 <send_cmd>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f040 8091 	bne.w	8009ca2 <USER_SPI_ioctl+0x2b6>
 8009b80:	f107 030c 	add.w	r3, r7, #12
 8009b84:	2110      	movs	r1, #16
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fc82 	bl	8009490 <rcvr_datablock>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f000 8087 	beq.w	8009ca2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009b94:	4b4c      	ldr	r3, [pc, #304]	; (8009cc8 <USER_SPI_ioctl+0x2dc>)
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	f003 0302 	and.w	r3, r3, #2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d012      	beq.n	8009bc6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009ba0:	7dbb      	ldrb	r3, [r7, #22]
 8009ba2:	005b      	lsls	r3, r3, #1
 8009ba4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009ba8:	7dfa      	ldrb	r2, [r7, #23]
 8009baa:	09d2      	lsrs	r2, r2, #7
 8009bac:	b2d2      	uxtb	r2, r2
 8009bae:	4413      	add	r3, r2
 8009bb0:	1c5a      	adds	r2, r3, #1
 8009bb2:	7e7b      	ldrb	r3, [r7, #25]
 8009bb4:	099b      	lsrs	r3, r3, #6
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	fa02 f303 	lsl.w	r3, r2, r3
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	e013      	b.n	8009bee <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009bc6:	7dbb      	ldrb	r3, [r7, #22]
 8009bc8:	109b      	asrs	r3, r3, #2
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	f003 031f 	and.w	r3, r3, #31
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	7dfa      	ldrb	r2, [r7, #23]
 8009bd4:	00d2      	lsls	r2, r2, #3
 8009bd6:	f002 0218 	and.w	r2, r2, #24
 8009bda:	7df9      	ldrb	r1, [r7, #23]
 8009bdc:	0949      	lsrs	r1, r1, #5
 8009bde:	b2c9      	uxtb	r1, r1
 8009be0:	440a      	add	r2, r1
 8009be2:	3201      	adds	r2, #1
 8009be4:	fb02 f303 	mul.w	r3, r2, r3
 8009be8:	461a      	mov	r2, r3
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009bf4:	e055      	b.n	8009ca2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009bf6:	4b34      	ldr	r3, [pc, #208]	; (8009cc8 <USER_SPI_ioctl+0x2dc>)
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	f003 0306 	and.w	r3, r3, #6
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d051      	beq.n	8009ca6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009c02:	f107 020c 	add.w	r2, r7, #12
 8009c06:	79fb      	ldrb	r3, [r7, #7]
 8009c08:	210b      	movs	r1, #11
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7ff feee 	bl	80099ec <USER_SPI_ioctl>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d149      	bne.n	8009caa <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009c16:	7b3b      	ldrb	r3, [r7, #12]
 8009c18:	099b      	lsrs	r3, r3, #6
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d104      	bne.n	8009c2a <USER_SPI_ioctl+0x23e>
 8009c20:	7dbb      	ldrb	r3, [r7, #22]
 8009c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d041      	beq.n	8009cae <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	623b      	str	r3, [r7, #32]
 8009c2e:	6a3b      	ldr	r3, [r7, #32]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c34:	6a3b      	ldr	r3, [r7, #32]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8009c3a:	4b23      	ldr	r3, [pc, #140]	; (8009cc8 <USER_SPI_ioctl+0x2dc>)
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	f003 0308 	and.w	r3, r3, #8
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d105      	bne.n	8009c52 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8009c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c48:	025b      	lsls	r3, r3, #9
 8009c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	025b      	lsls	r3, r3, #9
 8009c50:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009c52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c54:	2020      	movs	r0, #32
 8009c56:	f7ff fc76 	bl	8009546 <send_cmd>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d128      	bne.n	8009cb2 <USER_SPI_ioctl+0x2c6>
 8009c60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c62:	2021      	movs	r0, #33	; 0x21
 8009c64:	f7ff fc6f 	bl	8009546 <send_cmd>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d121      	bne.n	8009cb2 <USER_SPI_ioctl+0x2c6>
 8009c6e:	2100      	movs	r1, #0
 8009c70:	2026      	movs	r0, #38	; 0x26
 8009c72:	f7ff fc68 	bl	8009546 <send_cmd>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d11a      	bne.n	8009cb2 <USER_SPI_ioctl+0x2c6>
 8009c7c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009c80:	f7ff fbbb 	bl	80093fa <wait_ready>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d013      	beq.n	8009cb2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009c90:	e00f      	b.n	8009cb2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009c92:	2304      	movs	r3, #4
 8009c94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009c98:	e00c      	b.n	8009cb4 <USER_SPI_ioctl+0x2c8>
		break;
 8009c9a:	bf00      	nop
 8009c9c:	e00a      	b.n	8009cb4 <USER_SPI_ioctl+0x2c8>
		break;
 8009c9e:	bf00      	nop
 8009ca0:	e008      	b.n	8009cb4 <USER_SPI_ioctl+0x2c8>
		break;
 8009ca2:	bf00      	nop
 8009ca4:	e006      	b.n	8009cb4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009ca6:	bf00      	nop
 8009ca8:	e004      	b.n	8009cb4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009caa:	bf00      	nop
 8009cac:	e002      	b.n	8009cb4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009cae:	bf00      	nop
 8009cb0:	e000      	b.n	8009cb4 <USER_SPI_ioctl+0x2c8>
		break;
 8009cb2:	bf00      	nop
	}

	despiselect();
 8009cb4:	f7ff fbc4 	bl	8009440 <despiselect>

	return res;
 8009cb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3730      	adds	r7, #48	; 0x30
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	20000024 	.word	0x20000024
 8009cc8:	200003f8 	.word	0x200003f8

08009ccc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009cd6:	79fb      	ldrb	r3, [r7, #7]
 8009cd8:	4a08      	ldr	r2, [pc, #32]	; (8009cfc <disk_status+0x30>)
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	79fa      	ldrb	r2, [r7, #7]
 8009ce4:	4905      	ldr	r1, [pc, #20]	; (8009cfc <disk_status+0x30>)
 8009ce6:	440a      	add	r2, r1
 8009ce8:	7a12      	ldrb	r2, [r2, #8]
 8009cea:	4610      	mov	r0, r2
 8009cec:	4798      	blx	r3
 8009cee:	4603      	mov	r3, r0
 8009cf0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	20000424 	.word	0x20000424

08009d00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	4603      	mov	r3, r0
 8009d08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009d0e:	79fb      	ldrb	r3, [r7, #7]
 8009d10:	4a0d      	ldr	r2, [pc, #52]	; (8009d48 <disk_initialize+0x48>)
 8009d12:	5cd3      	ldrb	r3, [r2, r3]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d111      	bne.n	8009d3c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009d18:	79fb      	ldrb	r3, [r7, #7]
 8009d1a:	4a0b      	ldr	r2, [pc, #44]	; (8009d48 <disk_initialize+0x48>)
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009d20:	79fb      	ldrb	r3, [r7, #7]
 8009d22:	4a09      	ldr	r2, [pc, #36]	; (8009d48 <disk_initialize+0x48>)
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	79fa      	ldrb	r2, [r7, #7]
 8009d2e:	4906      	ldr	r1, [pc, #24]	; (8009d48 <disk_initialize+0x48>)
 8009d30:	440a      	add	r2, r1
 8009d32:	7a12      	ldrb	r2, [r2, #8]
 8009d34:	4610      	mov	r0, r2
 8009d36:	4798      	blx	r3
 8009d38:	4603      	mov	r3, r0
 8009d3a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	20000424 	.word	0x20000424

08009d4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009d4c:	b590      	push	{r4, r7, lr}
 8009d4e:	b087      	sub	sp, #28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60b9      	str	r1, [r7, #8]
 8009d54:	607a      	str	r2, [r7, #4]
 8009d56:	603b      	str	r3, [r7, #0]
 8009d58:	4603      	mov	r3, r0
 8009d5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	4a0a      	ldr	r2, [pc, #40]	; (8009d88 <disk_read+0x3c>)
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	689c      	ldr	r4, [r3, #8]
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	4a07      	ldr	r2, [pc, #28]	; (8009d88 <disk_read+0x3c>)
 8009d6c:	4413      	add	r3, r2
 8009d6e:	7a18      	ldrb	r0, [r3, #8]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	68b9      	ldr	r1, [r7, #8]
 8009d76:	47a0      	blx	r4
 8009d78:	4603      	mov	r3, r0
 8009d7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	371c      	adds	r7, #28
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd90      	pop	{r4, r7, pc}
 8009d86:	bf00      	nop
 8009d88:	20000424 	.word	0x20000424

08009d8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009d8c:	b590      	push	{r4, r7, lr}
 8009d8e:	b087      	sub	sp, #28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60b9      	str	r1, [r7, #8]
 8009d94:	607a      	str	r2, [r7, #4]
 8009d96:	603b      	str	r3, [r7, #0]
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	4a0a      	ldr	r2, [pc, #40]	; (8009dc8 <disk_write+0x3c>)
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	68dc      	ldr	r4, [r3, #12]
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
 8009daa:	4a07      	ldr	r2, [pc, #28]	; (8009dc8 <disk_write+0x3c>)
 8009dac:	4413      	add	r3, r2
 8009dae:	7a18      	ldrb	r0, [r3, #8]
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	68b9      	ldr	r1, [r7, #8]
 8009db6:	47a0      	blx	r4
 8009db8:	4603      	mov	r3, r0
 8009dba:	75fb      	strb	r3, [r7, #23]
  return res;
 8009dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	371c      	adds	r7, #28
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd90      	pop	{r4, r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20000424 	.word	0x20000424

08009dcc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	603a      	str	r2, [r7, #0]
 8009dd6:	71fb      	strb	r3, [r7, #7]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009ddc:	79fb      	ldrb	r3, [r7, #7]
 8009dde:	4a09      	ldr	r2, [pc, #36]	; (8009e04 <disk_ioctl+0x38>)
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	79fa      	ldrb	r2, [r7, #7]
 8009dea:	4906      	ldr	r1, [pc, #24]	; (8009e04 <disk_ioctl+0x38>)
 8009dec:	440a      	add	r2, r1
 8009dee:	7a10      	ldrb	r0, [r2, #8]
 8009df0:	79b9      	ldrb	r1, [r7, #6]
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	4798      	blx	r3
 8009df6:	4603      	mov	r3, r0
 8009df8:	73fb      	strb	r3, [r7, #15]
  return res;
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	20000424 	.word	0x20000424

08009e08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	3301      	adds	r3, #1
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009e18:	89fb      	ldrh	r3, [r7, #14]
 8009e1a:	021b      	lsls	r3, r3, #8
 8009e1c:	b21a      	sxth	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	b21b      	sxth	r3, r3
 8009e24:	4313      	orrs	r3, r2
 8009e26:	b21b      	sxth	r3, r3
 8009e28:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009e2a:	89fb      	ldrh	r3, [r7, #14]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3714      	adds	r7, #20
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	3303      	adds	r3, #3
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	021b      	lsls	r3, r3, #8
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	3202      	adds	r2, #2
 8009e50:	7812      	ldrb	r2, [r2, #0]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	021b      	lsls	r3, r3, #8
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	3201      	adds	r2, #1
 8009e5e:	7812      	ldrb	r2, [r2, #0]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	021b      	lsls	r3, r3, #8
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	7812      	ldrb	r2, [r2, #0]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009e70:	68fb      	ldr	r3, [r7, #12]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b083      	sub	sp, #12
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	460b      	mov	r3, r1
 8009e88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	1c5a      	adds	r2, r3, #1
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	887a      	ldrh	r2, [r7, #2]
 8009e92:	b2d2      	uxtb	r2, r2
 8009e94:	701a      	strb	r2, [r3, #0]
 8009e96:	887b      	ldrh	r3, [r7, #2]
 8009e98:	0a1b      	lsrs	r3, r3, #8
 8009e9a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	607a      	str	r2, [r7, #4]
 8009ea2:	887a      	ldrh	r2, [r7, #2]
 8009ea4:	b2d2      	uxtb	r2, r2
 8009ea6:	701a      	strb	r2, [r3, #0]
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	1c5a      	adds	r2, r3, #1
 8009ec2:	607a      	str	r2, [r7, #4]
 8009ec4:	683a      	ldr	r2, [r7, #0]
 8009ec6:	b2d2      	uxtb	r2, r2
 8009ec8:	701a      	strb	r2, [r3, #0]
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	0a1b      	lsrs	r3, r3, #8
 8009ece:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	1c5a      	adds	r2, r3, #1
 8009ed4:	607a      	str	r2, [r7, #4]
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	b2d2      	uxtb	r2, r2
 8009eda:	701a      	strb	r2, [r3, #0]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	0a1b      	lsrs	r3, r3, #8
 8009ee0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	1c5a      	adds	r2, r3, #1
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	b2d2      	uxtb	r2, r2
 8009eec:	701a      	strb	r2, [r3, #0]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	0a1b      	lsrs	r3, r3, #8
 8009ef2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	1c5a      	adds	r2, r3, #1
 8009ef8:	607a      	str	r2, [r7, #4]
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	b2d2      	uxtb	r2, r2
 8009efe:	701a      	strb	r2, [r3, #0]
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009f0c:	b480      	push	{r7}
 8009f0e:	b087      	sub	sp, #28
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00d      	beq.n	8009f42 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	1c53      	adds	r3, r2, #1
 8009f2a:	613b      	str	r3, [r7, #16]
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	1c59      	adds	r1, r3, #1
 8009f30:	6179      	str	r1, [r7, #20]
 8009f32:	7812      	ldrb	r2, [r2, #0]
 8009f34:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	607b      	str	r3, [r7, #4]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1f1      	bne.n	8009f26 <mem_cpy+0x1a>
	}
}
 8009f42:	bf00      	nop
 8009f44:	371c      	adds	r7, #28
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009f4e:	b480      	push	{r7}
 8009f50:	b087      	sub	sp, #28
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	60f8      	str	r0, [r7, #12]
 8009f56:	60b9      	str	r1, [r7, #8]
 8009f58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	1c5a      	adds	r2, r3, #1
 8009f62:	617a      	str	r2, [r7, #20]
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	b2d2      	uxtb	r2, r2
 8009f68:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	607b      	str	r3, [r7, #4]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1f3      	bne.n	8009f5e <mem_set+0x10>
}
 8009f76:	bf00      	nop
 8009f78:	bf00      	nop
 8009f7a:	371c      	adds	r7, #28
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009f84:	b480      	push	{r7}
 8009f86:	b089      	sub	sp, #36	; 0x24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	61fb      	str	r3, [r7, #28]
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	1c5a      	adds	r2, r3, #1
 8009fa0:	61fa      	str	r2, [r7, #28]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	1c5a      	adds	r2, r3, #1
 8009faa:	61ba      	str	r2, [r7, #24]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	1acb      	subs	r3, r1, r3
 8009fb0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	607b      	str	r3, [r7, #4]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d002      	beq.n	8009fc4 <mem_cmp+0x40>
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d0eb      	beq.n	8009f9c <mem_cmp+0x18>

	return r;
 8009fc4:	697b      	ldr	r3, [r7, #20]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3724      	adds	r7, #36	; 0x24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009fd2:	b480      	push	{r7}
 8009fd4:	b083      	sub	sp, #12
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009fdc:	e002      	b.n	8009fe4 <chk_chr+0x12>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	607b      	str	r3, [r7, #4]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d005      	beq.n	8009ff8 <chk_chr+0x26>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d1f2      	bne.n	8009fde <chk_chr+0xc>
	return *str;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d009      	beq.n	800a02a <lock_fs+0x22>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f002 fb4e 	bl	800c6bc <ff_req_grant>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <lock_fs+0x22>
 800a026:	2301      	movs	r3, #1
 800a028:	e000      	b.n	800a02c <lock_fs+0x24>
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	460b      	mov	r3, r1
 800a03e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00d      	beq.n	800a062 <unlock_fs+0x2e>
 800a046:	78fb      	ldrb	r3, [r7, #3]
 800a048:	2b0c      	cmp	r3, #12
 800a04a:	d00a      	beq.n	800a062 <unlock_fs+0x2e>
 800a04c:	78fb      	ldrb	r3, [r7, #3]
 800a04e:	2b0b      	cmp	r3, #11
 800a050:	d007      	beq.n	800a062 <unlock_fs+0x2e>
 800a052:	78fb      	ldrb	r3, [r7, #3]
 800a054:	2b0f      	cmp	r3, #15
 800a056:	d004      	beq.n	800a062 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f002 fb42 	bl	800c6e6 <ff_rel_grant>
	}
}
 800a062:	bf00      	nop
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
	...

0800a06c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a076:	2300      	movs	r3, #0
 800a078:	60bb      	str	r3, [r7, #8]
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	60fb      	str	r3, [r7, #12]
 800a07e:	e029      	b.n	800a0d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a080:	4a27      	ldr	r2, [pc, #156]	; (800a120 <chk_lock+0xb4>)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	011b      	lsls	r3, r3, #4
 800a086:	4413      	add	r3, r2
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d01d      	beq.n	800a0ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a08e:	4a24      	ldr	r2, [pc, #144]	; (800a120 <chk_lock+0xb4>)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	011b      	lsls	r3, r3, #4
 800a094:	4413      	add	r3, r2
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d116      	bne.n	800a0ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a0a0:	4a1f      	ldr	r2, [pc, #124]	; (800a120 <chk_lock+0xb4>)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	011b      	lsls	r3, r3, #4
 800a0a6:	4413      	add	r3, r2
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d10c      	bne.n	800a0ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a0b4:	4a1a      	ldr	r2, [pc, #104]	; (800a120 <chk_lock+0xb4>)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	011b      	lsls	r3, r3, #4
 800a0ba:	4413      	add	r3, r2
 800a0bc:	3308      	adds	r3, #8
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d102      	bne.n	800a0ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a0c8:	e007      	b.n	800a0da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	60fb      	str	r3, [r7, #12]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d9d2      	bls.n	800a080 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d109      	bne.n	800a0f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d102      	bne.n	800a0ec <chk_lock+0x80>
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d101      	bne.n	800a0f0 <chk_lock+0x84>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	e010      	b.n	800a112 <chk_lock+0xa6>
 800a0f0:	2312      	movs	r3, #18
 800a0f2:	e00e      	b.n	800a112 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d108      	bne.n	800a10c <chk_lock+0xa0>
 800a0fa:	4a09      	ldr	r2, [pc, #36]	; (800a120 <chk_lock+0xb4>)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	011b      	lsls	r3, r3, #4
 800a100:	4413      	add	r3, r2
 800a102:	330c      	adds	r3, #12
 800a104:	881b      	ldrh	r3, [r3, #0]
 800a106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a10a:	d101      	bne.n	800a110 <chk_lock+0xa4>
 800a10c:	2310      	movs	r3, #16
 800a10e:	e000      	b.n	800a112 <chk_lock+0xa6>
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	20000404 	.word	0x20000404

0800a124 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a12a:	2300      	movs	r3, #0
 800a12c:	607b      	str	r3, [r7, #4]
 800a12e:	e002      	b.n	800a136 <enq_lock+0x12>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	3301      	adds	r3, #1
 800a134:	607b      	str	r3, [r7, #4]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d806      	bhi.n	800a14a <enq_lock+0x26>
 800a13c:	4a09      	ldr	r2, [pc, #36]	; (800a164 <enq_lock+0x40>)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	011b      	lsls	r3, r3, #4
 800a142:	4413      	add	r3, r2
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1f2      	bne.n	800a130 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	bf14      	ite	ne
 800a150:	2301      	movne	r3, #1
 800a152:	2300      	moveq	r3, #0
 800a154:	b2db      	uxtb	r3, r3
}
 800a156:	4618      	mov	r0, r3
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	20000404 	.word	0x20000404

0800a168 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a172:	2300      	movs	r3, #0
 800a174:	60fb      	str	r3, [r7, #12]
 800a176:	e01f      	b.n	800a1b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a178:	4a41      	ldr	r2, [pc, #260]	; (800a280 <inc_lock+0x118>)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	011b      	lsls	r3, r3, #4
 800a17e:	4413      	add	r3, r2
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	429a      	cmp	r2, r3
 800a188:	d113      	bne.n	800a1b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a18a:	4a3d      	ldr	r2, [pc, #244]	; (800a280 <inc_lock+0x118>)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	011b      	lsls	r3, r3, #4
 800a190:	4413      	add	r3, r2
 800a192:	3304      	adds	r3, #4
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d109      	bne.n	800a1b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a19e:	4a38      	ldr	r2, [pc, #224]	; (800a280 <inc_lock+0x118>)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	011b      	lsls	r3, r3, #4
 800a1a4:	4413      	add	r3, r2
 800a1a6:	3308      	adds	r3, #8
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d006      	beq.n	800a1c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	60fb      	str	r3, [r7, #12]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d9dc      	bls.n	800a178 <inc_lock+0x10>
 800a1be:	e000      	b.n	800a1c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a1c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d132      	bne.n	800a22e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	60fb      	str	r3, [r7, #12]
 800a1cc:	e002      	b.n	800a1d4 <inc_lock+0x6c>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	60fb      	str	r3, [r7, #12]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d806      	bhi.n	800a1e8 <inc_lock+0x80>
 800a1da:	4a29      	ldr	r2, [pc, #164]	; (800a280 <inc_lock+0x118>)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	011b      	lsls	r3, r3, #4
 800a1e0:	4413      	add	r3, r2
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1f2      	bne.n	800a1ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d101      	bne.n	800a1f2 <inc_lock+0x8a>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	e040      	b.n	800a274 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	4922      	ldr	r1, [pc, #136]	; (800a280 <inc_lock+0x118>)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	011b      	lsls	r3, r3, #4
 800a1fc:	440b      	add	r3, r1
 800a1fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	689a      	ldr	r2, [r3, #8]
 800a204:	491e      	ldr	r1, [pc, #120]	; (800a280 <inc_lock+0x118>)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	011b      	lsls	r3, r3, #4
 800a20a:	440b      	add	r3, r1
 800a20c:	3304      	adds	r3, #4
 800a20e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	695a      	ldr	r2, [r3, #20]
 800a214:	491a      	ldr	r1, [pc, #104]	; (800a280 <inc_lock+0x118>)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	011b      	lsls	r3, r3, #4
 800a21a:	440b      	add	r3, r1
 800a21c:	3308      	adds	r3, #8
 800a21e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a220:	4a17      	ldr	r2, [pc, #92]	; (800a280 <inc_lock+0x118>)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	011b      	lsls	r3, r3, #4
 800a226:	4413      	add	r3, r2
 800a228:	330c      	adds	r3, #12
 800a22a:	2200      	movs	r2, #0
 800a22c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d009      	beq.n	800a248 <inc_lock+0xe0>
 800a234:	4a12      	ldr	r2, [pc, #72]	; (800a280 <inc_lock+0x118>)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	011b      	lsls	r3, r3, #4
 800a23a:	4413      	add	r3, r2
 800a23c:	330c      	adds	r3, #12
 800a23e:	881b      	ldrh	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d001      	beq.n	800a248 <inc_lock+0xe0>
 800a244:	2300      	movs	r3, #0
 800a246:	e015      	b.n	800a274 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d108      	bne.n	800a260 <inc_lock+0xf8>
 800a24e:	4a0c      	ldr	r2, [pc, #48]	; (800a280 <inc_lock+0x118>)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	011b      	lsls	r3, r3, #4
 800a254:	4413      	add	r3, r2
 800a256:	330c      	adds	r3, #12
 800a258:	881b      	ldrh	r3, [r3, #0]
 800a25a:	3301      	adds	r3, #1
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	e001      	b.n	800a264 <inc_lock+0xfc>
 800a260:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a264:	4906      	ldr	r1, [pc, #24]	; (800a280 <inc_lock+0x118>)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	011b      	lsls	r3, r3, #4
 800a26a:	440b      	add	r3, r1
 800a26c:	330c      	adds	r3, #12
 800a26e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	3301      	adds	r3, #1
}
 800a274:	4618      	mov	r0, r3
 800a276:	3714      	adds	r7, #20
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	20000404 	.word	0x20000404

0800a284 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3b01      	subs	r3, #1
 800a290:	607b      	str	r3, [r7, #4]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d825      	bhi.n	800a2e4 <dec_lock+0x60>
		n = Files[i].ctr;
 800a298:	4a17      	ldr	r2, [pc, #92]	; (800a2f8 <dec_lock+0x74>)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	011b      	lsls	r3, r3, #4
 800a29e:	4413      	add	r3, r2
 800a2a0:	330c      	adds	r3, #12
 800a2a2:	881b      	ldrh	r3, [r3, #0]
 800a2a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a2a6:	89fb      	ldrh	r3, [r7, #14]
 800a2a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2ac:	d101      	bne.n	800a2b2 <dec_lock+0x2e>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a2b2:	89fb      	ldrh	r3, [r7, #14]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d002      	beq.n	800a2be <dec_lock+0x3a>
 800a2b8:	89fb      	ldrh	r3, [r7, #14]
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a2be:	4a0e      	ldr	r2, [pc, #56]	; (800a2f8 <dec_lock+0x74>)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	011b      	lsls	r3, r3, #4
 800a2c4:	4413      	add	r3, r2
 800a2c6:	330c      	adds	r3, #12
 800a2c8:	89fa      	ldrh	r2, [r7, #14]
 800a2ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a2cc:	89fb      	ldrh	r3, [r7, #14]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d105      	bne.n	800a2de <dec_lock+0x5a>
 800a2d2:	4a09      	ldr	r2, [pc, #36]	; (800a2f8 <dec_lock+0x74>)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	011b      	lsls	r3, r3, #4
 800a2d8:	4413      	add	r3, r2
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	737b      	strb	r3, [r7, #13]
 800a2e2:	e001      	b.n	800a2e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a2e8:	7b7b      	ldrb	r3, [r7, #13]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	20000404 	.word	0x20000404

0800a2fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a304:	2300      	movs	r3, #0
 800a306:	60fb      	str	r3, [r7, #12]
 800a308:	e010      	b.n	800a32c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a30a:	4a0d      	ldr	r2, [pc, #52]	; (800a340 <clear_lock+0x44>)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	011b      	lsls	r3, r3, #4
 800a310:	4413      	add	r3, r2
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	429a      	cmp	r2, r3
 800a318:	d105      	bne.n	800a326 <clear_lock+0x2a>
 800a31a:	4a09      	ldr	r2, [pc, #36]	; (800a340 <clear_lock+0x44>)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	011b      	lsls	r3, r3, #4
 800a320:	4413      	add	r3, r2
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	3301      	adds	r3, #1
 800a32a:	60fb      	str	r3, [r7, #12]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d9eb      	bls.n	800a30a <clear_lock+0xe>
	}
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	20000404 	.word	0x20000404

0800a344 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	78db      	ldrb	r3, [r3, #3]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d034      	beq.n	800a3c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	7858      	ldrb	r0, [r3, #1]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a368:	2301      	movs	r3, #1
 800a36a:	697a      	ldr	r2, [r7, #20]
 800a36c:	f7ff fd0e 	bl	8009d8c <disk_write>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d002      	beq.n	800a37c <sync_window+0x38>
			res = FR_DISK_ERR;
 800a376:	2301      	movs	r3, #1
 800a378:	73fb      	strb	r3, [r7, #15]
 800a37a:	e022      	b.n	800a3c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	1ad2      	subs	r2, r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d217      	bcs.n	800a3c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	789b      	ldrb	r3, [r3, #2]
 800a396:	613b      	str	r3, [r7, #16]
 800a398:	e010      	b.n	800a3bc <sync_window+0x78>
					wsect += fs->fsize;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	69db      	ldr	r3, [r3, #28]
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	7858      	ldrb	r0, [r3, #1]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	f7ff fceb 	bl	8009d8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	613b      	str	r3, [r7, #16]
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d8eb      	bhi.n	800a39a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3718      	adds	r7, #24
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d01b      	beq.n	800a41c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff ffad 	bl	800a344 <sync_window>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a3ee:	7bfb      	ldrb	r3, [r7, #15]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d113      	bne.n	800a41c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	7858      	ldrb	r0, [r3, #1]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a3fe:	2301      	movs	r3, #1
 800a400:	683a      	ldr	r2, [r7, #0]
 800a402:	f7ff fca3 	bl	8009d4c <disk_read>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d004      	beq.n	800a416 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a40c:	f04f 33ff 	mov.w	r3, #4294967295
 800a410:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a412:	2301      	movs	r3, #1
 800a414:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
	...

0800a428 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f7ff ff87 	bl	800a344 <sync_window>
 800a436:	4603      	mov	r3, r0
 800a438:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a43a:	7bfb      	ldrb	r3, [r7, #15]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d158      	bne.n	800a4f2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	2b03      	cmp	r3, #3
 800a446:	d148      	bne.n	800a4da <sync_fs+0xb2>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	791b      	ldrb	r3, [r3, #4]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d144      	bne.n	800a4da <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	3334      	adds	r3, #52	; 0x34
 800a454:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a458:	2100      	movs	r1, #0
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7ff fd77 	bl	8009f4e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	3334      	adds	r3, #52	; 0x34
 800a464:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a468:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7ff fd06 	bl	8009e7e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	3334      	adds	r3, #52	; 0x34
 800a476:	4921      	ldr	r1, [pc, #132]	; (800a4fc <sync_fs+0xd4>)
 800a478:	4618      	mov	r0, r3
 800a47a:	f7ff fd1b 	bl	8009eb4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3334      	adds	r3, #52	; 0x34
 800a482:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a486:	491e      	ldr	r1, [pc, #120]	; (800a500 <sync_fs+0xd8>)
 800a488:	4618      	mov	r0, r3
 800a48a:	f7ff fd13 	bl	8009eb4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	3334      	adds	r3, #52	; 0x34
 800a492:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	4619      	mov	r1, r3
 800a49c:	4610      	mov	r0, r2
 800a49e:	f7ff fd09 	bl	8009eb4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	3334      	adds	r3, #52	; 0x34
 800a4a6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	f7ff fcff 	bl	8009eb4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a1b      	ldr	r3, [r3, #32]
 800a4ba:	1c5a      	adds	r2, r3, #1
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	7858      	ldrb	r0, [r3, #1]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	f7ff fc5c 	bl	8009d8c <disk_write>
			fs->fsi_flag = 0;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	785b      	ldrb	r3, [r3, #1]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7ff fc72 	bl	8009dcc <disk_ioctl>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <sync_fs+0xca>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	41615252 	.word	0x41615252
 800a500:	61417272 	.word	0x61417272

0800a504 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	3b02      	subs	r3, #2
 800a512:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	699b      	ldr	r3, [r3, #24]
 800a518:	3b02      	subs	r3, #2
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d301      	bcc.n	800a524 <clust2sect+0x20>
 800a520:	2300      	movs	r3, #0
 800a522:	e008      	b.n	800a536 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	895b      	ldrh	r3, [r3, #10]
 800a528:	461a      	mov	r2, r3
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	fb03 f202 	mul.w	r2, r3, r2
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a534:	4413      	add	r3, r2
}
 800a536:	4618      	mov	r0, r3
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b086      	sub	sp, #24
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	2b01      	cmp	r3, #1
 800a556:	d904      	bls.n	800a562 <get_fat+0x20>
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d302      	bcc.n	800a568 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a562:	2301      	movs	r3, #1
 800a564:	617b      	str	r3, [r7, #20]
 800a566:	e08f      	b.n	800a688 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a568:	f04f 33ff 	mov.w	r3, #4294967295
 800a56c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	2b03      	cmp	r3, #3
 800a574:	d062      	beq.n	800a63c <get_fat+0xfa>
 800a576:	2b03      	cmp	r3, #3
 800a578:	dc7c      	bgt.n	800a674 <get_fat+0x132>
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d002      	beq.n	800a584 <get_fat+0x42>
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d042      	beq.n	800a608 <get_fat+0xc6>
 800a582:	e077      	b.n	800a674 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	085b      	lsrs	r3, r3, #1
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	4413      	add	r3, r2
 800a590:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	0a5b      	lsrs	r3, r3, #9
 800a59a:	4413      	add	r3, r2
 800a59c:	4619      	mov	r1, r3
 800a59e:	6938      	ldr	r0, [r7, #16]
 800a5a0:	f7ff ff14 	bl	800a3cc <move_window>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d167      	bne.n	800a67a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	1c5a      	adds	r2, r3, #1
 800a5ae:	60fa      	str	r2, [r7, #12]
 800a5b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b4:	693a      	ldr	r2, [r7, #16]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a5bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	0a5b      	lsrs	r3, r3, #9
 800a5c6:	4413      	add	r3, r2
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	6938      	ldr	r0, [r7, #16]
 800a5cc:	f7ff fefe 	bl	800a3cc <move_window>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d153      	bne.n	800a67e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	4413      	add	r3, r2
 800a5e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a5e4:	021b      	lsls	r3, r3, #8
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	f003 0301 	and.w	r3, r3, #1
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d002      	beq.n	800a5fe <get_fat+0xbc>
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	091b      	lsrs	r3, r3, #4
 800a5fc:	e002      	b.n	800a604 <get_fat+0xc2>
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a604:	617b      	str	r3, [r7, #20]
			break;
 800a606:	e03f      	b.n	800a688 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	0a1b      	lsrs	r3, r3, #8
 800a610:	4413      	add	r3, r2
 800a612:	4619      	mov	r1, r3
 800a614:	6938      	ldr	r0, [r7, #16]
 800a616:	f7ff fed9 	bl	800a3cc <move_window>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d130      	bne.n	800a682 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a62e:	4413      	add	r3, r2
 800a630:	4618      	mov	r0, r3
 800a632:	f7ff fbe9 	bl	8009e08 <ld_word>
 800a636:	4603      	mov	r3, r0
 800a638:	617b      	str	r3, [r7, #20]
			break;
 800a63a:	e025      	b.n	800a688 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	09db      	lsrs	r3, r3, #7
 800a644:	4413      	add	r3, r2
 800a646:	4619      	mov	r1, r3
 800a648:	6938      	ldr	r0, [r7, #16]
 800a64a:	f7ff febf 	bl	800a3cc <move_window>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d118      	bne.n	800a686 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a662:	4413      	add	r3, r2
 800a664:	4618      	mov	r0, r3
 800a666:	f7ff fbe7 	bl	8009e38 <ld_dword>
 800a66a:	4603      	mov	r3, r0
 800a66c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a670:	617b      	str	r3, [r7, #20]
			break;
 800a672:	e009      	b.n	800a688 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a674:	2301      	movs	r3, #1
 800a676:	617b      	str	r3, [r7, #20]
 800a678:	e006      	b.n	800a688 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a67a:	bf00      	nop
 800a67c:	e004      	b.n	800a688 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a67e:	bf00      	nop
 800a680:	e002      	b.n	800a688 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a682:	bf00      	nop
 800a684:	e000      	b.n	800a688 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a686:	bf00      	nop
		}
	}

	return val;
 800a688:	697b      	ldr	r3, [r7, #20]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3718      	adds	r7, #24
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a692:	b590      	push	{r4, r7, lr}
 800a694:	b089      	sub	sp, #36	; 0x24
 800a696:	af00      	add	r7, sp, #0
 800a698:	60f8      	str	r0, [r7, #12]
 800a69a:	60b9      	str	r1, [r7, #8]
 800a69c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a69e:	2302      	movs	r3, #2
 800a6a0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	f240 80d2 	bls.w	800a84e <put_fat+0x1bc>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	699b      	ldr	r3, [r3, #24]
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	f080 80cc 	bcs.w	800a84e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	f000 8096 	beq.w	800a7ec <put_fat+0x15a>
 800a6c0:	2b03      	cmp	r3, #3
 800a6c2:	f300 80cd 	bgt.w	800a860 <put_fat+0x1ce>
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d002      	beq.n	800a6d0 <put_fat+0x3e>
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d06e      	beq.n	800a7ac <put_fat+0x11a>
 800a6ce:	e0c7      	b.n	800a860 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	61bb      	str	r3, [r7, #24]
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	085b      	lsrs	r3, r3, #1
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	4413      	add	r3, r2
 800a6dc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	0a5b      	lsrs	r3, r3, #9
 800a6e6:	4413      	add	r3, r2
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f7ff fe6e 	bl	800a3cc <move_window>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a6f4:	7ffb      	ldrb	r3, [r7, #31]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f040 80ab 	bne.w	800a852 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	1c59      	adds	r1, r3, #1
 800a706:	61b9      	str	r1, [r7, #24]
 800a708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a70c:	4413      	add	r3, r2
 800a70e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00d      	beq.n	800a736 <put_fat+0xa4>
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	b25b      	sxtb	r3, r3
 800a720:	f003 030f 	and.w	r3, r3, #15
 800a724:	b25a      	sxtb	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	b25b      	sxtb	r3, r3
 800a72e:	4313      	orrs	r3, r2
 800a730:	b25b      	sxtb	r3, r3
 800a732:	b2db      	uxtb	r3, r3
 800a734:	e001      	b.n	800a73a <put_fat+0xa8>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2201      	movs	r2, #1
 800a742:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	0a5b      	lsrs	r3, r3, #9
 800a74c:	4413      	add	r3, r2
 800a74e:	4619      	mov	r1, r3
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	f7ff fe3b 	bl	800a3cc <move_window>
 800a756:	4603      	mov	r3, r0
 800a758:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a75a:	7ffb      	ldrb	r3, [r7, #31]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d17a      	bne.n	800a856 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a76c:	4413      	add	r3, r2
 800a76e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	f003 0301 	and.w	r3, r3, #1
 800a776:	2b00      	cmp	r3, #0
 800a778:	d003      	beq.n	800a782 <put_fat+0xf0>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	091b      	lsrs	r3, r3, #4
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	e00e      	b.n	800a7a0 <put_fat+0x10e>
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	b25b      	sxtb	r3, r3
 800a788:	f023 030f 	bic.w	r3, r3, #15
 800a78c:	b25a      	sxtb	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	0a1b      	lsrs	r3, r3, #8
 800a792:	b25b      	sxtb	r3, r3
 800a794:	f003 030f 	and.w	r3, r3, #15
 800a798:	b25b      	sxtb	r3, r3
 800a79a:	4313      	orrs	r3, r2
 800a79c:	b25b      	sxtb	r3, r3
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	697a      	ldr	r2, [r7, #20]
 800a7a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	70da      	strb	r2, [r3, #3]
			break;
 800a7aa:	e059      	b.n	800a860 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	0a1b      	lsrs	r3, r3, #8
 800a7b4:	4413      	add	r3, r2
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f7ff fe07 	bl	800a3cc <move_window>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7c2:	7ffb      	ldrb	r3, [r7, #31]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d148      	bne.n	800a85a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	005b      	lsls	r3, r3, #1
 800a7d2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a7d6:	4413      	add	r3, r2
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	b292      	uxth	r2, r2
 800a7dc:	4611      	mov	r1, r2
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff fb4d 	bl	8009e7e <st_word>
			fs->wflag = 1;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	70da      	strb	r2, [r3, #3]
			break;
 800a7ea:	e039      	b.n	800a860 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	09db      	lsrs	r3, r3, #7
 800a7f4:	4413      	add	r3, r2
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f7ff fde7 	bl	800a3cc <move_window>
 800a7fe:	4603      	mov	r3, r0
 800a800:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a802:	7ffb      	ldrb	r3, [r7, #31]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d12a      	bne.n	800a85e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a81c:	4413      	add	r3, r2
 800a81e:	4618      	mov	r0, r3
 800a820:	f7ff fb0a 	bl	8009e38 <ld_dword>
 800a824:	4603      	mov	r3, r0
 800a826:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a82a:	4323      	orrs	r3, r4
 800a82c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a83c:	4413      	add	r3, r2
 800a83e:	6879      	ldr	r1, [r7, #4]
 800a840:	4618      	mov	r0, r3
 800a842:	f7ff fb37 	bl	8009eb4 <st_dword>
			fs->wflag = 1;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2201      	movs	r2, #1
 800a84a:	70da      	strb	r2, [r3, #3]
			break;
 800a84c:	e008      	b.n	800a860 <put_fat+0x1ce>
		}
	}
 800a84e:	bf00      	nop
 800a850:	e006      	b.n	800a860 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a852:	bf00      	nop
 800a854:	e004      	b.n	800a860 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a856:	bf00      	nop
 800a858:	e002      	b.n	800a860 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a85a:	bf00      	nop
 800a85c:	e000      	b.n	800a860 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a85e:	bf00      	nop
	return res;
 800a860:	7ffb      	ldrb	r3, [r7, #31]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3724      	adds	r7, #36	; 0x24
 800a866:	46bd      	mov	sp, r7
 800a868:	bd90      	pop	{r4, r7, pc}

0800a86a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b088      	sub	sp, #32
 800a86e:	af00      	add	r7, sp, #0
 800a870:	60f8      	str	r0, [r7, #12]
 800a872:	60b9      	str	r1, [r7, #8]
 800a874:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d904      	bls.n	800a890 <remove_chain+0x26>
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d301      	bcc.n	800a894 <remove_chain+0x2a>
 800a890:	2302      	movs	r3, #2
 800a892:	e04b      	b.n	800a92c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00c      	beq.n	800a8b4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a89a:	f04f 32ff 	mov.w	r2, #4294967295
 800a89e:	6879      	ldr	r1, [r7, #4]
 800a8a0:	69b8      	ldr	r0, [r7, #24]
 800a8a2:	f7ff fef6 	bl	800a692 <put_fat>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a8aa:	7ffb      	ldrb	r3, [r7, #31]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d001      	beq.n	800a8b4 <remove_chain+0x4a>
 800a8b0:	7ffb      	ldrb	r3, [r7, #31]
 800a8b2:	e03b      	b.n	800a92c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a8b4:	68b9      	ldr	r1, [r7, #8]
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f7ff fe43 	bl	800a542 <get_fat>
 800a8bc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d031      	beq.n	800a928 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d101      	bne.n	800a8ce <remove_chain+0x64>
 800a8ca:	2302      	movs	r3, #2
 800a8cc:	e02e      	b.n	800a92c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d4:	d101      	bne.n	800a8da <remove_chain+0x70>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e028      	b.n	800a92c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a8da:	2200      	movs	r2, #0
 800a8dc:	68b9      	ldr	r1, [r7, #8]
 800a8de:	69b8      	ldr	r0, [r7, #24]
 800a8e0:	f7ff fed7 	bl	800a692 <put_fat>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a8e8:	7ffb      	ldrb	r3, [r7, #31]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <remove_chain+0x88>
 800a8ee:	7ffb      	ldrb	r3, [r7, #31]
 800a8f0:	e01c      	b.n	800a92c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	695a      	ldr	r2, [r3, #20]
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	699b      	ldr	r3, [r3, #24]
 800a8fa:	3b02      	subs	r3, #2
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d20b      	bcs.n	800a918 <remove_chain+0xae>
			fs->free_clst++;
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	695b      	ldr	r3, [r3, #20]
 800a904:	1c5a      	adds	r2, r3, #1
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	791b      	ldrb	r3, [r3, #4]
 800a90e:	f043 0301 	orr.w	r3, r3, #1
 800a912:	b2da      	uxtb	r2, r3
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	429a      	cmp	r2, r3
 800a924:	d3c6      	bcc.n	800a8b4 <remove_chain+0x4a>
 800a926:	e000      	b.n	800a92a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a928:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3720      	adds	r7, #32
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b088      	sub	sp, #32
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10d      	bne.n	800a966 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d004      	beq.n	800a960 <create_chain+0x2c>
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	69ba      	ldr	r2, [r7, #24]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d31b      	bcc.n	800a998 <create_chain+0x64>
 800a960:	2301      	movs	r3, #1
 800a962:	61bb      	str	r3, [r7, #24]
 800a964:	e018      	b.n	800a998 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a966:	6839      	ldr	r1, [r7, #0]
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f7ff fdea 	bl	800a542 <get_fat>
 800a96e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2b01      	cmp	r3, #1
 800a974:	d801      	bhi.n	800a97a <create_chain+0x46>
 800a976:	2301      	movs	r3, #1
 800a978:	e070      	b.n	800aa5c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a980:	d101      	bne.n	800a986 <create_chain+0x52>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	e06a      	b.n	800aa5c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	699b      	ldr	r3, [r3, #24]
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d201      	bcs.n	800a994 <create_chain+0x60>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	e063      	b.n	800aa5c <create_chain+0x128>
		scl = clst;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	69fa      	ldr	r2, [r7, #28]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d307      	bcc.n	800a9bc <create_chain+0x88>
				ncl = 2;
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a9b0:	69fa      	ldr	r2, [r7, #28]
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d901      	bls.n	800a9bc <create_chain+0x88>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	e04f      	b.n	800aa5c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a9bc:	69f9      	ldr	r1, [r7, #28]
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f7ff fdbf 	bl	800a542 <get_fat>
 800a9c4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00e      	beq.n	800a9ea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d003      	beq.n	800a9da <create_chain+0xa6>
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d8:	d101      	bne.n	800a9de <create_chain+0xaa>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	e03e      	b.n	800aa5c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a9de:	69fa      	ldr	r2, [r7, #28]
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d1da      	bne.n	800a99c <create_chain+0x68>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	e038      	b.n	800aa5c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a9ea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f0:	69f9      	ldr	r1, [r7, #28]
 800a9f2:	6938      	ldr	r0, [r7, #16]
 800a9f4:	f7ff fe4d 	bl	800a692 <put_fat>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a9fc:	7dfb      	ldrb	r3, [r7, #23]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d109      	bne.n	800aa16 <create_chain+0xe2>
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d006      	beq.n	800aa16 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800aa08:	69fa      	ldr	r2, [r7, #28]
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	6938      	ldr	r0, [r7, #16]
 800aa0e:	f7ff fe40 	bl	800a692 <put_fat>
 800aa12:	4603      	mov	r3, r0
 800aa14:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800aa16:	7dfb      	ldrb	r3, [r7, #23]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d116      	bne.n	800aa4a <create_chain+0x116>
		fs->last_clst = ncl;
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	69fa      	ldr	r2, [r7, #28]
 800aa20:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	695a      	ldr	r2, [r3, #20]
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	699b      	ldr	r3, [r3, #24]
 800aa2a:	3b02      	subs	r3, #2
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d804      	bhi.n	800aa3a <create_chain+0x106>
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	695b      	ldr	r3, [r3, #20]
 800aa34:	1e5a      	subs	r2, r3, #1
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	791b      	ldrb	r3, [r3, #4]
 800aa3e:	f043 0301 	orr.w	r3, r3, #1
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	711a      	strb	r2, [r3, #4]
 800aa48:	e007      	b.n	800aa5a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d102      	bne.n	800aa56 <create_chain+0x122>
 800aa50:	f04f 33ff 	mov.w	r3, #4294967295
 800aa54:	e000      	b.n	800aa58 <create_chain+0x124>
 800aa56:	2301      	movs	r3, #1
 800aa58:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800aa5a:	69fb      	ldr	r3, [r7, #28]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3720      	adds	r7, #32
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b087      	sub	sp, #28
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa78:	3304      	adds	r3, #4
 800aa7a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	0a5b      	lsrs	r3, r3, #9
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	8952      	ldrh	r2, [r2, #10]
 800aa84:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa88:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	1d1a      	adds	r2, r3, #4
 800aa8e:	613a      	str	r2, [r7, #16]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <clmt_clust+0x3a>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	e010      	b.n	800aac0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d307      	bcc.n	800aab6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	1ad3      	subs	r3, r2, r3
 800aaac:	617b      	str	r3, [r7, #20]
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	3304      	adds	r3, #4
 800aab2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aab4:	e7e9      	b.n	800aa8a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800aab6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	4413      	add	r3, r2
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	371c      	adds	r7, #28
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b086      	sub	sp, #24
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aae2:	d204      	bcs.n	800aaee <dir_sdi+0x22>
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	f003 031f 	and.w	r3, r3, #31
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800aaee:	2302      	movs	r3, #2
 800aaf0:	e063      	b.n	800abba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	683a      	ldr	r2, [r7, #0]
 800aaf6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d106      	bne.n	800ab12 <dir_sdi+0x46>
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d902      	bls.n	800ab12 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab10:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10c      	bne.n	800ab32 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	095b      	lsrs	r3, r3, #5
 800ab1c:	693a      	ldr	r2, [r7, #16]
 800ab1e:	8912      	ldrh	r2, [r2, #8]
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d301      	bcc.n	800ab28 <dir_sdi+0x5c>
 800ab24:	2302      	movs	r3, #2
 800ab26:	e048      	b.n	800abba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	61da      	str	r2, [r3, #28]
 800ab30:	e029      	b.n	800ab86 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	895b      	ldrh	r3, [r3, #10]
 800ab36:	025b      	lsls	r3, r3, #9
 800ab38:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ab3a:	e019      	b.n	800ab70 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6979      	ldr	r1, [r7, #20]
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7ff fcfe 	bl	800a542 <get_fat>
 800ab46:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4e:	d101      	bne.n	800ab54 <dir_sdi+0x88>
 800ab50:	2301      	movs	r3, #1
 800ab52:	e032      	b.n	800abba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d904      	bls.n	800ab64 <dir_sdi+0x98>
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	699b      	ldr	r3, [r3, #24]
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d301      	bcc.n	800ab68 <dir_sdi+0x9c>
 800ab64:	2302      	movs	r3, #2
 800ab66:	e028      	b.n	800abba <dir_sdi+0xee>
			ofs -= csz;
 800ab68:	683a      	ldr	r2, [r7, #0]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ab70:	683a      	ldr	r2, [r7, #0]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d2e1      	bcs.n	800ab3c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ab78:	6979      	ldr	r1, [r7, #20]
 800ab7a:	6938      	ldr	r0, [r7, #16]
 800ab7c:	f7ff fcc2 	bl	800a504 <clust2sect>
 800ab80:	4602      	mov	r2, r0
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	697a      	ldr	r2, [r7, #20]
 800ab8a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	69db      	ldr	r3, [r3, #28]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <dir_sdi+0xcc>
 800ab94:	2302      	movs	r3, #2
 800ab96:	e010      	b.n	800abba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	69da      	ldr	r2, [r3, #28]
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	0a5b      	lsrs	r3, r3, #9
 800aba0:	441a      	add	r2, r3
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abb2:	441a      	add	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3718      	adds	r7, #24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b086      	sub	sp, #24
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	695b      	ldr	r3, [r3, #20]
 800abd6:	3320      	adds	r3, #32
 800abd8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	69db      	ldr	r3, [r3, #28]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d003      	beq.n	800abea <dir_next+0x28>
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abe8:	d301      	bcc.n	800abee <dir_next+0x2c>
 800abea:	2304      	movs	r3, #4
 800abec:	e0aa      	b.n	800ad44 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f040 8098 	bne.w	800ad2a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	69db      	ldr	r3, [r3, #28]
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	699b      	ldr	r3, [r3, #24]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10b      	bne.n	800ac24 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	095b      	lsrs	r3, r3, #5
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	8912      	ldrh	r2, [r2, #8]
 800ac14:	4293      	cmp	r3, r2
 800ac16:	f0c0 8088 	bcc.w	800ad2a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	61da      	str	r2, [r3, #28]
 800ac20:	2304      	movs	r3, #4
 800ac22:	e08f      	b.n	800ad44 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	0a5b      	lsrs	r3, r3, #9
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	8952      	ldrh	r2, [r2, #10]
 800ac2c:	3a01      	subs	r2, #1
 800ac2e:	4013      	ands	r3, r2
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d17a      	bne.n	800ad2a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	f7ff fc80 	bl	800a542 <get_fat>
 800ac42:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d801      	bhi.n	800ac4e <dir_next+0x8c>
 800ac4a:	2302      	movs	r3, #2
 800ac4c:	e07a      	b.n	800ad44 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac54:	d101      	bne.n	800ac5a <dir_next+0x98>
 800ac56:	2301      	movs	r3, #1
 800ac58:	e074      	b.n	800ad44 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	699b      	ldr	r3, [r3, #24]
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d358      	bcc.n	800ad16 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d104      	bne.n	800ac74 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	61da      	str	r2, [r3, #28]
 800ac70:	2304      	movs	r3, #4
 800ac72:	e067      	b.n	800ad44 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	4610      	mov	r0, r2
 800ac7e:	f7ff fe59 	bl	800a934 <create_chain>
 800ac82:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d101      	bne.n	800ac8e <dir_next+0xcc>
 800ac8a:	2307      	movs	r3, #7
 800ac8c:	e05a      	b.n	800ad44 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d101      	bne.n	800ac98 <dir_next+0xd6>
 800ac94:	2302      	movs	r3, #2
 800ac96:	e055      	b.n	800ad44 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9e:	d101      	bne.n	800aca4 <dir_next+0xe2>
 800aca0:	2301      	movs	r3, #1
 800aca2:	e04f      	b.n	800ad44 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f7ff fb4d 	bl	800a344 <sync_window>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d001      	beq.n	800acb4 <dir_next+0xf2>
 800acb0:	2301      	movs	r3, #1
 800acb2:	e047      	b.n	800ad44 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	3334      	adds	r3, #52	; 0x34
 800acb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acbc:	2100      	movs	r1, #0
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7ff f945 	bl	8009f4e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800acc4:	2300      	movs	r3, #0
 800acc6:	613b      	str	r3, [r7, #16]
 800acc8:	6979      	ldr	r1, [r7, #20]
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f7ff fc1a 	bl	800a504 <clust2sect>
 800acd0:	4602      	mov	r2, r0
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	631a      	str	r2, [r3, #48]	; 0x30
 800acd6:	e012      	b.n	800acfe <dir_next+0x13c>
						fs->wflag = 1;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2201      	movs	r2, #1
 800acdc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f7ff fb30 	bl	800a344 <sync_window>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d001      	beq.n	800acee <dir_next+0x12c>
 800acea:	2301      	movs	r3, #1
 800acec:	e02a      	b.n	800ad44 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	3301      	adds	r3, #1
 800acf2:	613b      	str	r3, [r7, #16]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf8:	1c5a      	adds	r2, r3, #1
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	631a      	str	r2, [r3, #48]	; 0x30
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	895b      	ldrh	r3, [r3, #10]
 800ad02:	461a      	mov	r2, r3
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d3e6      	bcc.n	800acd8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	1ad2      	subs	r2, r2, r3
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ad1c:	6979      	ldr	r1, [r7, #20]
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	f7ff fbf0 	bl	800a504 <clust2sect>
 800ad24:	4602      	mov	r2, r0
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	68ba      	ldr	r2, [r7, #8]
 800ad2e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad3c:	441a      	add	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3718      	adds	r7, #24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7ff feb4 	bl	800aacc <dir_sdi>
 800ad64:	4603      	mov	r3, r0
 800ad66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ad68:	7dfb      	ldrb	r3, [r7, #23]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d12b      	bne.n	800adc6 <dir_alloc+0x7a>
		n = 0;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	69db      	ldr	r3, [r3, #28]
 800ad76:	4619      	mov	r1, r3
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	f7ff fb27 	bl	800a3cc <move_window>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ad82:	7dfb      	ldrb	r3, [r7, #23]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d11d      	bne.n	800adc4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6a1b      	ldr	r3, [r3, #32]
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	2be5      	cmp	r3, #229	; 0xe5
 800ad90:	d004      	beq.n	800ad9c <dir_alloc+0x50>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a1b      	ldr	r3, [r3, #32]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d107      	bne.n	800adac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	613b      	str	r3, [r7, #16]
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d102      	bne.n	800adb0 <dir_alloc+0x64>
 800adaa:	e00c      	b.n	800adc6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800adac:	2300      	movs	r3, #0
 800adae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800adb0:	2101      	movs	r1, #1
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7ff ff05 	bl	800abc2 <dir_next>
 800adb8:	4603      	mov	r3, r0
 800adba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800adbc:	7dfb      	ldrb	r3, [r7, #23]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d0d7      	beq.n	800ad72 <dir_alloc+0x26>
 800adc2:	e000      	b.n	800adc6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800adc4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800adc6:	7dfb      	ldrb	r3, [r7, #23]
 800adc8:	2b04      	cmp	r3, #4
 800adca:	d101      	bne.n	800add0 <dir_alloc+0x84>
 800adcc:	2307      	movs	r3, #7
 800adce:	75fb      	strb	r3, [r7, #23]
	return res;
 800add0:	7dfb      	ldrb	r3, [r7, #23]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3718      	adds	r7, #24
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b084      	sub	sp, #16
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	331a      	adds	r3, #26
 800ade8:	4618      	mov	r0, r3
 800adea:	f7ff f80d 	bl	8009e08 <ld_word>
 800adee:	4603      	mov	r3, r0
 800adf0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d109      	bne.n	800ae0e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	3314      	adds	r3, #20
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff f802 	bl	8009e08 <ld_word>
 800ae04:	4603      	mov	r3, r0
 800ae06:	041b      	lsls	r3, r3, #16
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3710      	adds	r7, #16
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	331a      	adds	r3, #26
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	b292      	uxth	r2, r2
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7ff f825 	bl	8009e7e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	2b03      	cmp	r3, #3
 800ae3a:	d109      	bne.n	800ae50 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	f103 0214 	add.w	r2, r3, #20
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	0c1b      	lsrs	r3, r3, #16
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	4619      	mov	r1, r3
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	f7ff f817 	bl	8009e7e <st_word>
	}
}
 800ae50:	bf00      	nop
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ae66:	2100      	movs	r1, #0
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7ff fe2f 	bl	800aacc <dir_sdi>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ae72:	7dfb      	ldrb	r3, [r7, #23]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d001      	beq.n	800ae7c <dir_find+0x24>
 800ae78:	7dfb      	ldrb	r3, [r7, #23]
 800ae7a:	e03e      	b.n	800aefa <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	69db      	ldr	r3, [r3, #28]
 800ae80:	4619      	mov	r1, r3
 800ae82:	6938      	ldr	r0, [r7, #16]
 800ae84:	f7ff faa2 	bl	800a3cc <move_window>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ae8c:	7dfb      	ldrb	r3, [r7, #23]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d12f      	bne.n	800aef2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a1b      	ldr	r3, [r3, #32]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ae9a:	7bfb      	ldrb	r3, [r7, #15]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d102      	bne.n	800aea6 <dir_find+0x4e>
 800aea0:	2304      	movs	r3, #4
 800aea2:	75fb      	strb	r3, [r7, #23]
 800aea4:	e028      	b.n	800aef8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	330b      	adds	r3, #11
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aeb2:	b2da      	uxtb	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a1b      	ldr	r3, [r3, #32]
 800aebc:	330b      	adds	r3, #11
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	f003 0308 	and.w	r3, r3, #8
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10a      	bne.n	800aede <dir_find+0x86>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a18      	ldr	r0, [r3, #32]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	3324      	adds	r3, #36	; 0x24
 800aed0:	220b      	movs	r2, #11
 800aed2:	4619      	mov	r1, r3
 800aed4:	f7ff f856 	bl	8009f84 <mem_cmp>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d00b      	beq.n	800aef6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aede:	2100      	movs	r1, #0
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f7ff fe6e 	bl	800abc2 <dir_next>
 800aee6:	4603      	mov	r3, r0
 800aee8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d0c5      	beq.n	800ae7c <dir_find+0x24>
 800aef0:	e002      	b.n	800aef8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800aef2:	bf00      	nop
 800aef4:	e000      	b.n	800aef8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aef6:	bf00      	nop

	return res;
 800aef8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3718      	adds	r7, #24
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b084      	sub	sp, #16
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800af10:	2101      	movs	r1, #1
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f7ff ff1a 	bl	800ad4c <dir_alloc>
 800af18:	4603      	mov	r3, r0
 800af1a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800af1c:	7bfb      	ldrb	r3, [r7, #15]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d11c      	bne.n	800af5c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	69db      	ldr	r3, [r3, #28]
 800af26:	4619      	mov	r1, r3
 800af28:	68b8      	ldr	r0, [r7, #8]
 800af2a:	f7ff fa4f 	bl	800a3cc <move_window>
 800af2e:	4603      	mov	r3, r0
 800af30:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800af32:	7bfb      	ldrb	r3, [r7, #15]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d111      	bne.n	800af5c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a1b      	ldr	r3, [r3, #32]
 800af3c:	2220      	movs	r2, #32
 800af3e:	2100      	movs	r1, #0
 800af40:	4618      	mov	r0, r3
 800af42:	f7ff f804 	bl	8009f4e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a18      	ldr	r0, [r3, #32]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	3324      	adds	r3, #36	; 0x24
 800af4e:	220b      	movs	r2, #11
 800af50:	4619      	mov	r1, r3
 800af52:	f7fe ffdb 	bl	8009f0c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	2201      	movs	r2, #1
 800af5a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
	...

0800af68 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b088      	sub	sp, #32
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	60fb      	str	r3, [r7, #12]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	3324      	adds	r3, #36	; 0x24
 800af7c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800af7e:	220b      	movs	r2, #11
 800af80:	2120      	movs	r1, #32
 800af82:	68b8      	ldr	r0, [r7, #8]
 800af84:	f7fe ffe3 	bl	8009f4e <mem_set>
	si = i = 0; ni = 8;
 800af88:	2300      	movs	r3, #0
 800af8a:	613b      	str	r3, [r7, #16]
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	61fb      	str	r3, [r7, #28]
 800af90:	2308      	movs	r3, #8
 800af92:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	1c5a      	adds	r2, r3, #1
 800af98:	61fa      	str	r2, [r7, #28]
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	4413      	add	r3, r2
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800afa2:	7efb      	ldrb	r3, [r7, #27]
 800afa4:	2b20      	cmp	r3, #32
 800afa6:	d94e      	bls.n	800b046 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800afa8:	7efb      	ldrb	r3, [r7, #27]
 800afaa:	2b2f      	cmp	r3, #47	; 0x2f
 800afac:	d006      	beq.n	800afbc <create_name+0x54>
 800afae:	7efb      	ldrb	r3, [r7, #27]
 800afb0:	2b5c      	cmp	r3, #92	; 0x5c
 800afb2:	d110      	bne.n	800afd6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800afb4:	e002      	b.n	800afbc <create_name+0x54>
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	3301      	adds	r3, #1
 800afba:	61fb      	str	r3, [r7, #28]
 800afbc:	68fa      	ldr	r2, [r7, #12]
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	4413      	add	r3, r2
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	2b2f      	cmp	r3, #47	; 0x2f
 800afc6:	d0f6      	beq.n	800afb6 <create_name+0x4e>
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	4413      	add	r3, r2
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	2b5c      	cmp	r3, #92	; 0x5c
 800afd2:	d0f0      	beq.n	800afb6 <create_name+0x4e>
			break;
 800afd4:	e038      	b.n	800b048 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800afd6:	7efb      	ldrb	r3, [r7, #27]
 800afd8:	2b2e      	cmp	r3, #46	; 0x2e
 800afda:	d003      	beq.n	800afe4 <create_name+0x7c>
 800afdc:	693a      	ldr	r2, [r7, #16]
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d30c      	bcc.n	800affe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	2b0b      	cmp	r3, #11
 800afe8:	d002      	beq.n	800aff0 <create_name+0x88>
 800afea:	7efb      	ldrb	r3, [r7, #27]
 800afec:	2b2e      	cmp	r3, #46	; 0x2e
 800afee:	d001      	beq.n	800aff4 <create_name+0x8c>
 800aff0:	2306      	movs	r3, #6
 800aff2:	e044      	b.n	800b07e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800aff4:	2308      	movs	r3, #8
 800aff6:	613b      	str	r3, [r7, #16]
 800aff8:	230b      	movs	r3, #11
 800affa:	617b      	str	r3, [r7, #20]
			continue;
 800affc:	e022      	b.n	800b044 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800affe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b002:	2b00      	cmp	r3, #0
 800b004:	da04      	bge.n	800b010 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b006:	7efb      	ldrb	r3, [r7, #27]
 800b008:	3b80      	subs	r3, #128	; 0x80
 800b00a:	4a1f      	ldr	r2, [pc, #124]	; (800b088 <create_name+0x120>)
 800b00c:	5cd3      	ldrb	r3, [r2, r3]
 800b00e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b010:	7efb      	ldrb	r3, [r7, #27]
 800b012:	4619      	mov	r1, r3
 800b014:	481d      	ldr	r0, [pc, #116]	; (800b08c <create_name+0x124>)
 800b016:	f7fe ffdc 	bl	8009fd2 <chk_chr>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d001      	beq.n	800b024 <create_name+0xbc>
 800b020:	2306      	movs	r3, #6
 800b022:	e02c      	b.n	800b07e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b024:	7efb      	ldrb	r3, [r7, #27]
 800b026:	2b60      	cmp	r3, #96	; 0x60
 800b028:	d905      	bls.n	800b036 <create_name+0xce>
 800b02a:	7efb      	ldrb	r3, [r7, #27]
 800b02c:	2b7a      	cmp	r3, #122	; 0x7a
 800b02e:	d802      	bhi.n	800b036 <create_name+0xce>
 800b030:	7efb      	ldrb	r3, [r7, #27]
 800b032:	3b20      	subs	r3, #32
 800b034:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	1c5a      	adds	r2, r3, #1
 800b03a:	613a      	str	r2, [r7, #16]
 800b03c:	68ba      	ldr	r2, [r7, #8]
 800b03e:	4413      	add	r3, r2
 800b040:	7efa      	ldrb	r2, [r7, #27]
 800b042:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b044:	e7a6      	b.n	800af94 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b046:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	441a      	add	r2, r3
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d101      	bne.n	800b05c <create_name+0xf4>
 800b058:	2306      	movs	r3, #6
 800b05a:	e010      	b.n	800b07e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	2be5      	cmp	r3, #229	; 0xe5
 800b062:	d102      	bne.n	800b06a <create_name+0x102>
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	2205      	movs	r2, #5
 800b068:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b06a:	7efb      	ldrb	r3, [r7, #27]
 800b06c:	2b20      	cmp	r3, #32
 800b06e:	d801      	bhi.n	800b074 <create_name+0x10c>
 800b070:	2204      	movs	r2, #4
 800b072:	e000      	b.n	800b076 <create_name+0x10e>
 800b074:	2200      	movs	r2, #0
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	330b      	adds	r3, #11
 800b07a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b07c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3720      	adds	r7, #32
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	080168ac 	.word	0x080168ac
 800b08c:	080166f0 	.word	0x080166f0

0800b090 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b0a4:	e002      	b.n	800b0ac <follow_path+0x1c>
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	603b      	str	r3, [r7, #0]
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	2b2f      	cmp	r3, #47	; 0x2f
 800b0b2:	d0f8      	beq.n	800b0a6 <follow_path+0x16>
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	2b5c      	cmp	r3, #92	; 0x5c
 800b0ba:	d0f4      	beq.n	800b0a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	2b1f      	cmp	r3, #31
 800b0c8:	d80a      	bhi.n	800b0e0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2280      	movs	r2, #128	; 0x80
 800b0ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f7ff fcf9 	bl	800aacc <dir_sdi>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	75fb      	strb	r3, [r7, #23]
 800b0de:	e043      	b.n	800b168 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b0e0:	463b      	mov	r3, r7
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f7ff ff3f 	bl	800af68 <create_name>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b0ee:	7dfb      	ldrb	r3, [r7, #23]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d134      	bne.n	800b15e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7ff feaf 	bl	800ae58 <dir_find>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b104:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b106:	7dfb      	ldrb	r3, [r7, #23]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00a      	beq.n	800b122 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b10c:	7dfb      	ldrb	r3, [r7, #23]
 800b10e:	2b04      	cmp	r3, #4
 800b110:	d127      	bne.n	800b162 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b112:	7afb      	ldrb	r3, [r7, #11]
 800b114:	f003 0304 	and.w	r3, r3, #4
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d122      	bne.n	800b162 <follow_path+0xd2>
 800b11c:	2305      	movs	r3, #5
 800b11e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b120:	e01f      	b.n	800b162 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b122:	7afb      	ldrb	r3, [r7, #11]
 800b124:	f003 0304 	and.w	r3, r3, #4
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d11c      	bne.n	800b166 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	799b      	ldrb	r3, [r3, #6]
 800b130:	f003 0310 	and.w	r3, r3, #16
 800b134:	2b00      	cmp	r3, #0
 800b136:	d102      	bne.n	800b13e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b138:	2305      	movs	r3, #5
 800b13a:	75fb      	strb	r3, [r7, #23]
 800b13c:	e014      	b.n	800b168 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	695b      	ldr	r3, [r3, #20]
 800b148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b14c:	4413      	add	r3, r2
 800b14e:	4619      	mov	r1, r3
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f7ff fe42 	bl	800adda <ld_clust>
 800b156:	4602      	mov	r2, r0
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b15c:	e7c0      	b.n	800b0e0 <follow_path+0x50>
			if (res != FR_OK) break;
 800b15e:	bf00      	nop
 800b160:	e002      	b.n	800b168 <follow_path+0xd8>
				break;
 800b162:	bf00      	nop
 800b164:	e000      	b.n	800b168 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b166:	bf00      	nop
			}
		}
	}

	return res;
 800b168:	7dfb      	ldrb	r3, [r7, #23]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3718      	adds	r7, #24
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b172:	b480      	push	{r7}
 800b174:	b087      	sub	sp, #28
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b17a:	f04f 33ff 	mov.w	r3, #4294967295
 800b17e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d031      	beq.n	800b1ec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	617b      	str	r3, [r7, #20]
 800b18e:	e002      	b.n	800b196 <get_ldnumber+0x24>
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	3301      	adds	r3, #1
 800b194:	617b      	str	r3, [r7, #20]
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	2b20      	cmp	r3, #32
 800b19c:	d903      	bls.n	800b1a6 <get_ldnumber+0x34>
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	2b3a      	cmp	r3, #58	; 0x3a
 800b1a4:	d1f4      	bne.n	800b190 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	2b3a      	cmp	r3, #58	; 0x3a
 800b1ac:	d11c      	bne.n	800b1e8 <get_ldnumber+0x76>
			tp = *path;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	1c5a      	adds	r2, r3, #1
 800b1b8:	60fa      	str	r2, [r7, #12]
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	3b30      	subs	r3, #48	; 0x30
 800b1be:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2b09      	cmp	r3, #9
 800b1c4:	d80e      	bhi.n	800b1e4 <get_ldnumber+0x72>
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d10a      	bne.n	800b1e4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d107      	bne.n	800b1e4 <get_ldnumber+0x72>
					vol = (int)i;
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	617b      	str	r3, [r7, #20]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	697a      	ldr	r2, [r7, #20]
 800b1e2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	e002      	b.n	800b1ee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b1ec:	693b      	ldr	r3, [r7, #16]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	371c      	adds	r7, #28
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
	...

0800b1fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	70da      	strb	r2, [r3, #3]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f04f 32ff 	mov.w	r2, #4294967295
 800b212:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b214:	6839      	ldr	r1, [r7, #0]
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f7ff f8d8 	bl	800a3cc <move_window>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d001      	beq.n	800b226 <check_fs+0x2a>
 800b222:	2304      	movs	r3, #4
 800b224:	e038      	b.n	800b298 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	3334      	adds	r3, #52	; 0x34
 800b22a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b22e:	4618      	mov	r0, r3
 800b230:	f7fe fdea 	bl	8009e08 <ld_word>
 800b234:	4603      	mov	r3, r0
 800b236:	461a      	mov	r2, r3
 800b238:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d001      	beq.n	800b244 <check_fs+0x48>
 800b240:	2303      	movs	r3, #3
 800b242:	e029      	b.n	800b298 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b24a:	2be9      	cmp	r3, #233	; 0xe9
 800b24c:	d009      	beq.n	800b262 <check_fs+0x66>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b254:	2beb      	cmp	r3, #235	; 0xeb
 800b256:	d11e      	bne.n	800b296 <check_fs+0x9a>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b25e:	2b90      	cmp	r3, #144	; 0x90
 800b260:	d119      	bne.n	800b296 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	3334      	adds	r3, #52	; 0x34
 800b266:	3336      	adds	r3, #54	; 0x36
 800b268:	4618      	mov	r0, r3
 800b26a:	f7fe fde5 	bl	8009e38 <ld_dword>
 800b26e:	4603      	mov	r3, r0
 800b270:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b274:	4a0a      	ldr	r2, [pc, #40]	; (800b2a0 <check_fs+0xa4>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d101      	bne.n	800b27e <check_fs+0x82>
 800b27a:	2300      	movs	r3, #0
 800b27c:	e00c      	b.n	800b298 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3334      	adds	r3, #52	; 0x34
 800b282:	3352      	adds	r3, #82	; 0x52
 800b284:	4618      	mov	r0, r3
 800b286:	f7fe fdd7 	bl	8009e38 <ld_dword>
 800b28a:	4603      	mov	r3, r0
 800b28c:	4a05      	ldr	r2, [pc, #20]	; (800b2a4 <check_fs+0xa8>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d101      	bne.n	800b296 <check_fs+0x9a>
 800b292:	2300      	movs	r3, #0
 800b294:	e000      	b.n	800b298 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b296:	2302      	movs	r3, #2
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	00544146 	.word	0x00544146
 800b2a4:	33544146 	.word	0x33544146

0800b2a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b096      	sub	sp, #88	; 0x58
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f7ff ff58 	bl	800b172 <get_ldnumber>
 800b2c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	da01      	bge.n	800b2ce <find_volume+0x26>
 800b2ca:	230b      	movs	r3, #11
 800b2cc:	e236      	b.n	800b73c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b2ce:	4aac      	ldr	r2, [pc, #688]	; (800b580 <find_volume+0x2d8>)
 800b2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2d6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <find_volume+0x3a>
 800b2de:	230c      	movs	r3, #12
 800b2e0:	e22c      	b.n	800b73c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800b2e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2e4:	f7fe fe90 	bl	800a008 <lock_fs>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <find_volume+0x4a>
 800b2ee:	230f      	movs	r3, #15
 800b2f0:	e224      	b.n	800b73c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b2f8:	79fb      	ldrb	r3, [r7, #7]
 800b2fa:	f023 0301 	bic.w	r3, r3, #1
 800b2fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d01a      	beq.n	800b33e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30a:	785b      	ldrb	r3, [r3, #1]
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7fe fcdd 	bl	8009ccc <disk_status>
 800b312:	4603      	mov	r3, r0
 800b314:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b318:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b31c:	f003 0301 	and.w	r3, r3, #1
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10c      	bne.n	800b33e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b324:	79fb      	ldrb	r3, [r7, #7]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d007      	beq.n	800b33a <find_volume+0x92>
 800b32a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b32e:	f003 0304 	and.w	r3, r3, #4
 800b332:	2b00      	cmp	r3, #0
 800b334:	d001      	beq.n	800b33a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b336:	230a      	movs	r3, #10
 800b338:	e200      	b.n	800b73c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800b33a:	2300      	movs	r3, #0
 800b33c:	e1fe      	b.n	800b73c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b340:	2200      	movs	r2, #0
 800b342:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b346:	b2da      	uxtb	r2, r3
 800b348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34e:	785b      	ldrb	r3, [r3, #1]
 800b350:	4618      	mov	r0, r3
 800b352:	f7fe fcd5 	bl	8009d00 <disk_initialize>
 800b356:	4603      	mov	r3, r0
 800b358:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b35c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b360:	f003 0301 	and.w	r3, r3, #1
 800b364:	2b00      	cmp	r3, #0
 800b366:	d001      	beq.n	800b36c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b368:	2303      	movs	r3, #3
 800b36a:	e1e7      	b.n	800b73c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b36c:	79fb      	ldrb	r3, [r7, #7]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d007      	beq.n	800b382 <find_volume+0xda>
 800b372:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b376:	f003 0304 	and.w	r3, r3, #4
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b37e:	230a      	movs	r3, #10
 800b380:	e1dc      	b.n	800b73c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b382:	2300      	movs	r3, #0
 800b384:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b386:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b388:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b38a:	f7ff ff37 	bl	800b1fc <check_fs>
 800b38e:	4603      	mov	r3, r0
 800b390:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b394:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b398:	2b02      	cmp	r3, #2
 800b39a:	d14b      	bne.n	800b434 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b39c:	2300      	movs	r3, #0
 800b39e:	643b      	str	r3, [r7, #64]	; 0x40
 800b3a0:	e01f      	b.n	800b3e2 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b3a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3aa:	011b      	lsls	r3, r3, #4
 800b3ac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b3b0:	4413      	add	r3, r2
 800b3b2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b6:	3304      	adds	r3, #4
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d006      	beq.n	800b3cc <find_volume+0x124>
 800b3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c0:	3308      	adds	r3, #8
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fe fd38 	bl	8009e38 <ld_dword>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	e000      	b.n	800b3ce <find_volume+0x126>
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b3d6:	440b      	add	r3, r1
 800b3d8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b3dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3de:	3301      	adds	r3, #1
 800b3e0:	643b      	str	r3, [r7, #64]	; 0x40
 800b3e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3e4:	2b03      	cmp	r3, #3
 800b3e6:	d9dc      	bls.n	800b3a2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b3ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d002      	beq.n	800b3f8 <find_volume+0x150>
 800b3f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b3f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b400:	4413      	add	r3, r2
 800b402:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b406:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d005      	beq.n	800b41a <find_volume+0x172>
 800b40e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b410:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b412:	f7ff fef3 	bl	800b1fc <check_fs>
 800b416:	4603      	mov	r3, r0
 800b418:	e000      	b.n	800b41c <find_volume+0x174>
 800b41a:	2303      	movs	r3, #3
 800b41c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b420:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b424:	2b01      	cmp	r3, #1
 800b426:	d905      	bls.n	800b434 <find_volume+0x18c>
 800b428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b42a:	3301      	adds	r3, #1
 800b42c:	643b      	str	r3, [r7, #64]	; 0x40
 800b42e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b430:	2b03      	cmp	r3, #3
 800b432:	d9e1      	bls.n	800b3f8 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b434:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b438:	2b04      	cmp	r3, #4
 800b43a:	d101      	bne.n	800b440 <find_volume+0x198>
 800b43c:	2301      	movs	r3, #1
 800b43e:	e17d      	b.n	800b73c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b440:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b444:	2b01      	cmp	r3, #1
 800b446:	d901      	bls.n	800b44c <find_volume+0x1a4>
 800b448:	230d      	movs	r3, #13
 800b44a:	e177      	b.n	800b73c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44e:	3334      	adds	r3, #52	; 0x34
 800b450:	330b      	adds	r3, #11
 800b452:	4618      	mov	r0, r3
 800b454:	f7fe fcd8 	bl	8009e08 <ld_word>
 800b458:	4603      	mov	r3, r0
 800b45a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b45e:	d001      	beq.n	800b464 <find_volume+0x1bc>
 800b460:	230d      	movs	r3, #13
 800b462:	e16b      	b.n	800b73c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b466:	3334      	adds	r3, #52	; 0x34
 800b468:	3316      	adds	r3, #22
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fe fccc 	bl	8009e08 <ld_word>
 800b470:	4603      	mov	r3, r0
 800b472:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b476:	2b00      	cmp	r3, #0
 800b478:	d106      	bne.n	800b488 <find_volume+0x1e0>
 800b47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47c:	3334      	adds	r3, #52	; 0x34
 800b47e:	3324      	adds	r3, #36	; 0x24
 800b480:	4618      	mov	r0, r3
 800b482:	f7fe fcd9 	bl	8009e38 <ld_dword>
 800b486:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b48c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b490:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b496:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49a:	789b      	ldrb	r3, [r3, #2]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d005      	beq.n	800b4ac <find_volume+0x204>
 800b4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a2:	789b      	ldrb	r3, [r3, #2]
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d001      	beq.n	800b4ac <find_volume+0x204>
 800b4a8:	230d      	movs	r3, #13
 800b4aa:	e147      	b.n	800b73c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ae:	789b      	ldrb	r3, [r3, #2]
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4b4:	fb02 f303 	mul.w	r3, r2, r3
 800b4b8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c8:	895b      	ldrh	r3, [r3, #10]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d008      	beq.n	800b4e0 <find_volume+0x238>
 800b4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d0:	895b      	ldrh	r3, [r3, #10]
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d6:	895b      	ldrh	r3, [r3, #10]
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	4013      	ands	r3, r2
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d001      	beq.n	800b4e4 <find_volume+0x23c>
 800b4e0:	230d      	movs	r3, #13
 800b4e2:	e12b      	b.n	800b73c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e6:	3334      	adds	r3, #52	; 0x34
 800b4e8:	3311      	adds	r3, #17
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fe fc8c 	bl	8009e08 <ld_word>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fa:	891b      	ldrh	r3, [r3, #8]
 800b4fc:	f003 030f 	and.w	r3, r3, #15
 800b500:	b29b      	uxth	r3, r3
 800b502:	2b00      	cmp	r3, #0
 800b504:	d001      	beq.n	800b50a <find_volume+0x262>
 800b506:	230d      	movs	r3, #13
 800b508:	e118      	b.n	800b73c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50c:	3334      	adds	r3, #52	; 0x34
 800b50e:	3313      	adds	r3, #19
 800b510:	4618      	mov	r0, r3
 800b512:	f7fe fc79 	bl	8009e08 <ld_word>
 800b516:	4603      	mov	r3, r0
 800b518:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b51a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d106      	bne.n	800b52e <find_volume+0x286>
 800b520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b522:	3334      	adds	r3, #52	; 0x34
 800b524:	3320      	adds	r3, #32
 800b526:	4618      	mov	r0, r3
 800b528:	f7fe fc86 	bl	8009e38 <ld_dword>
 800b52c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b530:	3334      	adds	r3, #52	; 0x34
 800b532:	330e      	adds	r3, #14
 800b534:	4618      	mov	r0, r3
 800b536:	f7fe fc67 	bl	8009e08 <ld_word>
 800b53a:	4603      	mov	r3, r0
 800b53c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b53e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b540:	2b00      	cmp	r3, #0
 800b542:	d101      	bne.n	800b548 <find_volume+0x2a0>
 800b544:	230d      	movs	r3, #13
 800b546:	e0f9      	b.n	800b73c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b548:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b54c:	4413      	add	r3, r2
 800b54e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b550:	8912      	ldrh	r2, [r2, #8]
 800b552:	0912      	lsrs	r2, r2, #4
 800b554:	b292      	uxth	r2, r2
 800b556:	4413      	add	r3, r2
 800b558:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b55a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55e:	429a      	cmp	r2, r3
 800b560:	d201      	bcs.n	800b566 <find_volume+0x2be>
 800b562:	230d      	movs	r3, #13
 800b564:	e0ea      	b.n	800b73c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56a:	1ad3      	subs	r3, r2, r3
 800b56c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b56e:	8952      	ldrh	r2, [r2, #10]
 800b570:	fbb3 f3f2 	udiv	r3, r3, r2
 800b574:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d103      	bne.n	800b584 <find_volume+0x2dc>
 800b57c:	230d      	movs	r3, #13
 800b57e:	e0dd      	b.n	800b73c <find_volume+0x494>
 800b580:	200003fc 	.word	0x200003fc
		fmt = FS_FAT32;
 800b584:	2303      	movs	r3, #3
 800b586:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b590:	4293      	cmp	r3, r2
 800b592:	d802      	bhi.n	800b59a <find_volume+0x2f2>
 800b594:	2302      	movs	r3, #2
 800b596:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d802      	bhi.n	800b5aa <find_volume+0x302>
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ac:	1c9a      	adds	r2, r3, #2
 800b5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5b6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b5b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b5ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5bc:	441a      	add	r2, r3
 800b5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b5c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c6:	441a      	add	r2, r3
 800b5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ca:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800b5cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5d0:	2b03      	cmp	r3, #3
 800b5d2:	d11e      	bne.n	800b612 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d6:	3334      	adds	r3, #52	; 0x34
 800b5d8:	332a      	adds	r3, #42	; 0x2a
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fe fc14 	bl	8009e08 <ld_word>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <find_volume+0x342>
 800b5e6:	230d      	movs	r3, #13
 800b5e8:	e0a8      	b.n	800b73c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ec:	891b      	ldrh	r3, [r3, #8]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <find_volume+0x34e>
 800b5f2:	230d      	movs	r3, #13
 800b5f4:	e0a2      	b.n	800b73c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f8:	3334      	adds	r3, #52	; 0x34
 800b5fa:	332c      	adds	r3, #44	; 0x2c
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fe fc1b 	bl	8009e38 <ld_dword>
 800b602:	4602      	mov	r2, r0
 800b604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b606:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60a:	699b      	ldr	r3, [r3, #24]
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	647b      	str	r3, [r7, #68]	; 0x44
 800b610:	e01f      	b.n	800b652 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b614:	891b      	ldrh	r3, [r3, #8]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d101      	bne.n	800b61e <find_volume+0x376>
 800b61a:	230d      	movs	r3, #13
 800b61c:	e08e      	b.n	800b73c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b624:	441a      	add	r2, r3
 800b626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b628:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b62a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d103      	bne.n	800b63a <find_volume+0x392>
 800b632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b634:	699b      	ldr	r3, [r3, #24]
 800b636:	005b      	lsls	r3, r3, #1
 800b638:	e00a      	b.n	800b650 <find_volume+0x3a8>
 800b63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63c:	699a      	ldr	r2, [r3, #24]
 800b63e:	4613      	mov	r3, r2
 800b640:	005b      	lsls	r3, r3, #1
 800b642:	4413      	add	r3, r2
 800b644:	085a      	lsrs	r2, r3, #1
 800b646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b648:	699b      	ldr	r3, [r3, #24]
 800b64a:	f003 0301 	and.w	r3, r3, #1
 800b64e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b650:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b654:	69da      	ldr	r2, [r3, #28]
 800b656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b658:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b65c:	0a5b      	lsrs	r3, r3, #9
 800b65e:	429a      	cmp	r2, r3
 800b660:	d201      	bcs.n	800b666 <find_volume+0x3be>
 800b662:	230d      	movs	r3, #13
 800b664:	e06a      	b.n	800b73c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b668:	f04f 32ff 	mov.w	r2, #4294967295
 800b66c:	615a      	str	r2, [r3, #20]
 800b66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b670:	695a      	ldr	r2, [r3, #20]
 800b672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b674:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b678:	2280      	movs	r2, #128	; 0x80
 800b67a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b67c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b680:	2b03      	cmp	r3, #3
 800b682:	d149      	bne.n	800b718 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b686:	3334      	adds	r3, #52	; 0x34
 800b688:	3330      	adds	r3, #48	; 0x30
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fe fbbc 	bl	8009e08 <ld_word>
 800b690:	4603      	mov	r3, r0
 800b692:	2b01      	cmp	r3, #1
 800b694:	d140      	bne.n	800b718 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b698:	3301      	adds	r3, #1
 800b69a:	4619      	mov	r1, r3
 800b69c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b69e:	f7fe fe95 	bl	800a3cc <move_window>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d137      	bne.n	800b718 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b0:	3334      	adds	r3, #52	; 0x34
 800b6b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7fe fba6 	bl	8009e08 <ld_word>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	461a      	mov	r2, r3
 800b6c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d127      	bne.n	800b718 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ca:	3334      	adds	r3, #52	; 0x34
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fe fbb3 	bl	8009e38 <ld_dword>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	4a1b      	ldr	r2, [pc, #108]	; (800b744 <find_volume+0x49c>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d11e      	bne.n	800b718 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6dc:	3334      	adds	r3, #52	; 0x34
 800b6de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7fe fba8 	bl	8009e38 <ld_dword>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	4a17      	ldr	r2, [pc, #92]	; (800b748 <find_volume+0x4a0>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d113      	bne.n	800b718 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f2:	3334      	adds	r3, #52	; 0x34
 800b6f4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7fe fb9d 	bl	8009e38 <ld_dword>
 800b6fe:	4602      	mov	r2, r0
 800b700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b702:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b706:	3334      	adds	r3, #52	; 0x34
 800b708:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7fe fb93 	bl	8009e38 <ld_dword>
 800b712:	4602      	mov	r2, r0
 800b714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b716:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b71e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b720:	4b0a      	ldr	r3, [pc, #40]	; (800b74c <find_volume+0x4a4>)
 800b722:	881b      	ldrh	r3, [r3, #0]
 800b724:	3301      	adds	r3, #1
 800b726:	b29a      	uxth	r2, r3
 800b728:	4b08      	ldr	r3, [pc, #32]	; (800b74c <find_volume+0x4a4>)
 800b72a:	801a      	strh	r2, [r3, #0]
 800b72c:	4b07      	ldr	r3, [pc, #28]	; (800b74c <find_volume+0x4a4>)
 800b72e:	881a      	ldrh	r2, [r3, #0]
 800b730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b732:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b734:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b736:	f7fe fde1 	bl	800a2fc <clear_lock>
#endif
	return FR_OK;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3758      	adds	r7, #88	; 0x58
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	41615252 	.word	0x41615252
 800b748:	61417272 	.word	0x61417272
 800b74c:	20000400 	.word	0x20000400

0800b750 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b75a:	2309      	movs	r3, #9
 800b75c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d02e      	beq.n	800b7c2 <validate+0x72>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d02a      	beq.n	800b7c2 <validate+0x72>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d025      	beq.n	800b7c2 <validate+0x72>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	889a      	ldrh	r2, [r3, #4]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	88db      	ldrh	r3, [r3, #6]
 800b780:	429a      	cmp	r2, r3
 800b782:	d11e      	bne.n	800b7c2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4618      	mov	r0, r3
 800b78a:	f7fe fc3d 	bl	800a008 <lock_fs>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d014      	beq.n	800b7be <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	785b      	ldrb	r3, [r3, #1]
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7fe fa96 	bl	8009ccc <disk_status>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	f003 0301 	and.w	r3, r3, #1
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d102      	bne.n	800b7b0 <validate+0x60>
				res = FR_OK;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	73fb      	strb	r3, [r7, #15]
 800b7ae:	e008      	b.n	800b7c2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fe fc3c 	bl	800a034 <unlock_fs>
 800b7bc:	e001      	b.n	800b7c2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b7be:	230f      	movs	r3, #15
 800b7c0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b7c2:	7bfb      	ldrb	r3, [r7, #15]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d102      	bne.n	800b7ce <validate+0x7e>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	e000      	b.n	800b7d0 <validate+0x80>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	683a      	ldr	r2, [r7, #0]
 800b7d2:	6013      	str	r3, [r2, #0]
	return res;
 800b7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
	...

0800b7e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b088      	sub	sp, #32
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b7f2:	f107 0310 	add.w	r3, r7, #16
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff fcbb 	bl	800b172 <get_ldnumber>
 800b7fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	2b00      	cmp	r3, #0
 800b802:	da01      	bge.n	800b808 <f_mount+0x28>
 800b804:	230b      	movs	r3, #11
 800b806:	e048      	b.n	800b89a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b808:	4a26      	ldr	r2, [pc, #152]	; (800b8a4 <f_mount+0xc4>)
 800b80a:	69fb      	ldr	r3, [r7, #28]
 800b80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b810:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00f      	beq.n	800b838 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b818:	69b8      	ldr	r0, [r7, #24]
 800b81a:	f7fe fd6f 	bl	800a2fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	4618      	mov	r0, r3
 800b824:	f000 ff3e 	bl	800c6a4 <ff_del_syncobj>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d101      	bne.n	800b832 <f_mount+0x52>
 800b82e:	2302      	movs	r3, #2
 800b830:	e033      	b.n	800b89a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	2200      	movs	r2, #0
 800b836:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00f      	beq.n	800b85e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	b2da      	uxtb	r2, r3
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	330c      	adds	r3, #12
 800b84c:	4619      	mov	r1, r3
 800b84e:	4610      	mov	r0, r2
 800b850:	f000 ff0d 	bl	800c66e <ff_cre_syncobj>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <f_mount+0x7e>
 800b85a:	2302      	movs	r3, #2
 800b85c:	e01d      	b.n	800b89a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	4910      	ldr	r1, [pc, #64]	; (800b8a4 <f_mount+0xc4>)
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d002      	beq.n	800b874 <f_mount+0x94>
 800b86e:	79fb      	ldrb	r3, [r7, #7]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d001      	beq.n	800b878 <f_mount+0x98>
 800b874:	2300      	movs	r3, #0
 800b876:	e010      	b.n	800b89a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b878:	f107 010c 	add.w	r1, r7, #12
 800b87c:	f107 0308 	add.w	r3, r7, #8
 800b880:	2200      	movs	r2, #0
 800b882:	4618      	mov	r0, r3
 800b884:	f7ff fd10 	bl	800b2a8 <find_volume>
 800b888:	4603      	mov	r3, r0
 800b88a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	7dfa      	ldrb	r2, [r7, #23]
 800b890:	4611      	mov	r1, r2
 800b892:	4618      	mov	r0, r3
 800b894:	f7fe fbce 	bl	800a034 <unlock_fs>
 800b898:	7dfb      	ldrb	r3, [r7, #23]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3720      	adds	r7, #32
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	200003fc 	.word	0x200003fc

0800b8a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b098      	sub	sp, #96	; 0x60
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d101      	bne.n	800b8c0 <f_open+0x18>
 800b8bc:	2309      	movs	r3, #9
 800b8be:	e1b4      	b.n	800bc2a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b8c0:	79fb      	ldrb	r3, [r7, #7]
 800b8c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b8c8:	79fa      	ldrb	r2, [r7, #7]
 800b8ca:	f107 0110 	add.w	r1, r7, #16
 800b8ce:	f107 0308 	add.w	r3, r7, #8
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7ff fce8 	bl	800b2a8 <find_volume>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b8de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f040 8191 	bne.w	800bc0a <f_open+0x362>
		dj.obj.fs = fs;
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	f107 0314 	add.w	r3, r7, #20
 800b8f2:	4611      	mov	r1, r2
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7ff fbcb 	bl	800b090 <follow_path>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b904:	2b00      	cmp	r3, #0
 800b906:	d11a      	bne.n	800b93e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b908:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b90c:	b25b      	sxtb	r3, r3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	da03      	bge.n	800b91a <f_open+0x72>
				res = FR_INVALID_NAME;
 800b912:	2306      	movs	r3, #6
 800b914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b918:	e011      	b.n	800b93e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b91a:	79fb      	ldrb	r3, [r7, #7]
 800b91c:	f023 0301 	bic.w	r3, r3, #1
 800b920:	2b00      	cmp	r3, #0
 800b922:	bf14      	ite	ne
 800b924:	2301      	movne	r3, #1
 800b926:	2300      	moveq	r3, #0
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	461a      	mov	r2, r3
 800b92c:	f107 0314 	add.w	r3, r7, #20
 800b930:	4611      	mov	r1, r2
 800b932:	4618      	mov	r0, r3
 800b934:	f7fe fb9a 	bl	800a06c <chk_lock>
 800b938:	4603      	mov	r3, r0
 800b93a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b93e:	79fb      	ldrb	r3, [r7, #7]
 800b940:	f003 031c 	and.w	r3, r3, #28
 800b944:	2b00      	cmp	r3, #0
 800b946:	d07f      	beq.n	800ba48 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b948:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d017      	beq.n	800b980 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b950:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b954:	2b04      	cmp	r3, #4
 800b956:	d10e      	bne.n	800b976 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b958:	f7fe fbe4 	bl	800a124 <enq_lock>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d006      	beq.n	800b970 <f_open+0xc8>
 800b962:	f107 0314 	add.w	r3, r7, #20
 800b966:	4618      	mov	r0, r3
 800b968:	f7ff facb 	bl	800af02 <dir_register>
 800b96c:	4603      	mov	r3, r0
 800b96e:	e000      	b.n	800b972 <f_open+0xca>
 800b970:	2312      	movs	r3, #18
 800b972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b976:	79fb      	ldrb	r3, [r7, #7]
 800b978:	f043 0308 	orr.w	r3, r3, #8
 800b97c:	71fb      	strb	r3, [r7, #7]
 800b97e:	e010      	b.n	800b9a2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b980:	7ebb      	ldrb	r3, [r7, #26]
 800b982:	f003 0311 	and.w	r3, r3, #17
 800b986:	2b00      	cmp	r3, #0
 800b988:	d003      	beq.n	800b992 <f_open+0xea>
					res = FR_DENIED;
 800b98a:	2307      	movs	r3, #7
 800b98c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b990:	e007      	b.n	800b9a2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b992:	79fb      	ldrb	r3, [r7, #7]
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d002      	beq.n	800b9a2 <f_open+0xfa>
 800b99c:	2308      	movs	r3, #8
 800b99e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b9a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d168      	bne.n	800ba7c <f_open+0x1d4>
 800b9aa:	79fb      	ldrb	r3, [r7, #7]
 800b9ac:	f003 0308 	and.w	r3, r3, #8
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d063      	beq.n	800ba7c <f_open+0x1d4>
				dw = GET_FATTIME();
 800b9b4:	f7fd fc46 	bl	8009244 <get_fattime>
 800b9b8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9bc:	330e      	adds	r3, #14
 800b9be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fe fa77 	bl	8009eb4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c8:	3316      	adds	r3, #22
 800b9ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7fe fa71 	bl	8009eb4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d4:	330b      	adds	r3, #11
 800b9d6:	2220      	movs	r2, #32
 800b9d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9de:	4611      	mov	r1, r2
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7ff f9fa 	bl	800adda <ld_clust>
 800b9e6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7ff fa12 	bl	800ae18 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f6:	331c      	adds	r3, #28
 800b9f8:	2100      	movs	r1, #0
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe fa5a 	bl	8009eb4 <st_dword>
					fs->wflag = 1;
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	2201      	movs	r2, #1
 800ba04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ba06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d037      	beq.n	800ba7c <f_open+0x1d4>
						dw = fs->winsect;
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba10:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ba12:	f107 0314 	add.w	r3, r7, #20
 800ba16:	2200      	movs	r2, #0
 800ba18:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7fe ff25 	bl	800a86a <remove_chain>
 800ba20:	4603      	mov	r3, r0
 800ba22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ba26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d126      	bne.n	800ba7c <f_open+0x1d4>
							res = move_window(fs, dw);
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fe fcca 	bl	800a3cc <move_window>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba42:	3a01      	subs	r2, #1
 800ba44:	611a      	str	r2, [r3, #16]
 800ba46:	e019      	b.n	800ba7c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ba48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d115      	bne.n	800ba7c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ba50:	7ebb      	ldrb	r3, [r7, #26]
 800ba52:	f003 0310 	and.w	r3, r3, #16
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d003      	beq.n	800ba62 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ba5a:	2304      	movs	r3, #4
 800ba5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ba60:	e00c      	b.n	800ba7c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ba62:	79fb      	ldrb	r3, [r7, #7]
 800ba64:	f003 0302 	and.w	r3, r3, #2
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d007      	beq.n	800ba7c <f_open+0x1d4>
 800ba6c:	7ebb      	ldrb	r3, [r7, #26]
 800ba6e:	f003 0301 	and.w	r3, r3, #1
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d002      	beq.n	800ba7c <f_open+0x1d4>
						res = FR_DENIED;
 800ba76:	2307      	movs	r3, #7
 800ba78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ba7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d128      	bne.n	800bad6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ba84:	79fb      	ldrb	r3, [r7, #7]
 800ba86:	f003 0308 	and.w	r3, r3, #8
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d003      	beq.n	800ba96 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ba8e:	79fb      	ldrb	r3, [r7, #7]
 800ba90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ba9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800baa4:	79fb      	ldrb	r3, [r7, #7]
 800baa6:	f023 0301 	bic.w	r3, r3, #1
 800baaa:	2b00      	cmp	r3, #0
 800baac:	bf14      	ite	ne
 800baae:	2301      	movne	r3, #1
 800bab0:	2300      	moveq	r3, #0
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	461a      	mov	r2, r3
 800bab6:	f107 0314 	add.w	r3, r7, #20
 800baba:	4611      	mov	r1, r2
 800babc:	4618      	mov	r0, r3
 800babe:	f7fe fb53 	bl	800a168 <inc_lock>
 800bac2:	4602      	mov	r2, r0
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d102      	bne.n	800bad6 <f_open+0x22e>
 800bad0:	2302      	movs	r3, #2
 800bad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bad6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bada:	2b00      	cmp	r3, #0
 800badc:	f040 8095 	bne.w	800bc0a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bae4:	4611      	mov	r1, r2
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7ff f977 	bl	800adda <ld_clust>
 800baec:	4602      	mov	r2, r0
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800baf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baf4:	331c      	adds	r3, #28
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fe f99e 	bl	8009e38 <ld_dword>
 800bafc:	4602      	mov	r2, r0
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2200      	movs	r2, #0
 800bb06:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bb08:	693a      	ldr	r2, [r7, #16]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	88da      	ldrh	r2, [r3, #6]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	79fa      	ldrb	r2, [r7, #7]
 800bb1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	3330      	adds	r3, #48	; 0x30
 800bb32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb36:	2100      	movs	r1, #0
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fe fa08 	bl	8009f4e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bb3e:	79fb      	ldrb	r3, [r7, #7]
 800bb40:	f003 0320 	and.w	r3, r3, #32
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d060      	beq.n	800bc0a <f_open+0x362>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d05c      	beq.n	800bc0a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	68da      	ldr	r2, [r3, #12]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	895b      	ldrh	r3, [r3, #10]
 800bb5c:	025b      	lsls	r3, r3, #9
 800bb5e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	657b      	str	r3, [r7, #84]	; 0x54
 800bb6c:	e016      	b.n	800bb9c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fe fce5 	bl	800a542 <get_fat>
 800bb78:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bb7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d802      	bhi.n	800bb86 <f_open+0x2de>
 800bb80:	2302      	movs	r3, #2
 800bb82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bb86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb8c:	d102      	bne.n	800bb94 <f_open+0x2ec>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bb94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	657b      	str	r3, [r7, #84]	; 0x54
 800bb9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d103      	bne.n	800bbac <f_open+0x304>
 800bba4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d8e0      	bhi.n	800bb6e <f_open+0x2c6>
				}
				fp->clust = clst;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bbb0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bbb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d127      	bne.n	800bc0a <f_open+0x362>
 800bbba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d022      	beq.n	800bc0a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7fe fc9b 	bl	800a504 <clust2sect>
 800bbce:	6478      	str	r0, [r7, #68]	; 0x44
 800bbd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d103      	bne.n	800bbde <f_open+0x336>
						res = FR_INT_ERR;
 800bbd6:	2302      	movs	r3, #2
 800bbd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bbdc:	e015      	b.n	800bc0a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bbde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbe0:	0a5a      	lsrs	r2, r3, #9
 800bbe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbe4:	441a      	add	r2, r3
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	7858      	ldrb	r0, [r3, #1]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6a1a      	ldr	r2, [r3, #32]
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	f7fe f8a7 	bl	8009d4c <disk_read>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <f_open+0x362>
 800bc04:	2301      	movs	r3, #1
 800bc06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bc0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d002      	beq.n	800bc18 <f_open+0x370>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2200      	movs	r2, #0
 800bc16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800bc1e:	4611      	mov	r1, r2
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7fe fa07 	bl	800a034 <unlock_fs>
 800bc26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3760      	adds	r7, #96	; 0x60
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b08e      	sub	sp, #56	; 0x38
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	60f8      	str	r0, [r7, #12]
 800bc3a:	60b9      	str	r1, [r7, #8]
 800bc3c:	607a      	str	r2, [r7, #4]
 800bc3e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	2200      	movs	r2, #0
 800bc48:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f107 0214 	add.w	r2, r7, #20
 800bc50:	4611      	mov	r1, r2
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7ff fd7c 	bl	800b750 <validate>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bc5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d107      	bne.n	800bc76 <f_read+0x44>
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	7d5b      	ldrb	r3, [r3, #21]
 800bc6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bc6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d009      	beq.n	800bc8a <f_read+0x58>
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bc7c:	4611      	mov	r1, r2
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7fe f9d8 	bl	800a034 <unlock_fs>
 800bc84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc88:	e13d      	b.n	800bf06 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	7d1b      	ldrb	r3, [r3, #20]
 800bc8e:	f003 0301 	and.w	r3, r3, #1
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d106      	bne.n	800bca4 <f_read+0x72>
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	2107      	movs	r1, #7
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7fe f9ca 	bl	800a034 <unlock_fs>
 800bca0:	2307      	movs	r3, #7
 800bca2:	e130      	b.n	800bf06 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	68da      	ldr	r2, [r3, #12]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	6a3b      	ldr	r3, [r7, #32]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	f240 811c 	bls.w	800bef2 <f_read+0x2c0>
 800bcba:	6a3b      	ldr	r3, [r7, #32]
 800bcbc:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bcbe:	e118      	b.n	800bef2 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	699b      	ldr	r3, [r3, #24]
 800bcc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	f040 80e4 	bne.w	800be96 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	699b      	ldr	r3, [r3, #24]
 800bcd2:	0a5b      	lsrs	r3, r3, #9
 800bcd4:	697a      	ldr	r2, [r7, #20]
 800bcd6:	8952      	ldrh	r2, [r2, #10]
 800bcd8:	3a01      	subs	r2, #1
 800bcda:	4013      	ands	r3, r2
 800bcdc:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d139      	bne.n	800bd58 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	699b      	ldr	r3, [r3, #24]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d103      	bne.n	800bcf4 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	633b      	str	r3, [r7, #48]	; 0x30
 800bcf2:	e013      	b.n	800bd1c <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d007      	beq.n	800bd0c <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	699b      	ldr	r3, [r3, #24]
 800bd00:	4619      	mov	r1, r3
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f7fe feae 	bl	800aa64 <clmt_clust>
 800bd08:	6338      	str	r0, [r7, #48]	; 0x30
 800bd0a:	e007      	b.n	800bd1c <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	69db      	ldr	r3, [r3, #28]
 800bd12:	4619      	mov	r1, r3
 800bd14:	4610      	mov	r0, r2
 800bd16:	f7fe fc14 	bl	800a542 <get_fat>
 800bd1a:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d809      	bhi.n	800bd36 <f_read+0x104>
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2202      	movs	r2, #2
 800bd26:	755a      	strb	r2, [r3, #21]
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	2102      	movs	r1, #2
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7fe f981 	bl	800a034 <unlock_fs>
 800bd32:	2302      	movs	r3, #2
 800bd34:	e0e7      	b.n	800bf06 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd3c:	d109      	bne.n	800bd52 <f_read+0x120>
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2201      	movs	r2, #1
 800bd42:	755a      	strb	r2, [r3, #21]
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	2101      	movs	r1, #1
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7fe f973 	bl	800a034 <unlock_fs>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e0d9      	b.n	800bf06 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd56:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bd58:	697a      	ldr	r2, [r7, #20]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	69db      	ldr	r3, [r3, #28]
 800bd5e:	4619      	mov	r1, r3
 800bd60:	4610      	mov	r0, r2
 800bd62:	f7fe fbcf 	bl	800a504 <clust2sect>
 800bd66:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d109      	bne.n	800bd82 <f_read+0x150>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2202      	movs	r2, #2
 800bd72:	755a      	strb	r2, [r3, #21]
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	2102      	movs	r1, #2
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7fe f95b 	bl	800a034 <unlock_fs>
 800bd7e:	2302      	movs	r3, #2
 800bd80:	e0c1      	b.n	800bf06 <f_read+0x2d4>
			sect += csect;
 800bd82:	69ba      	ldr	r2, [r7, #24]
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	4413      	add	r3, r2
 800bd88:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	0a5b      	lsrs	r3, r3, #9
 800bd8e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d03e      	beq.n	800be14 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bd96:	69fa      	ldr	r2, [r7, #28]
 800bd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9a:	4413      	add	r3, r2
 800bd9c:	697a      	ldr	r2, [r7, #20]
 800bd9e:	8952      	ldrh	r2, [r2, #10]
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d905      	bls.n	800bdb0 <f_read+0x17e>
					cc = fs->csize - csect;
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	895b      	ldrh	r3, [r3, #10]
 800bda8:	461a      	mov	r2, r3
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	7858      	ldrb	r0, [r3, #1]
 800bdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb6:	69ba      	ldr	r2, [r7, #24]
 800bdb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdba:	f7fd ffc7 	bl	8009d4c <disk_read>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d009      	beq.n	800bdd8 <f_read+0x1a6>
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	755a      	strb	r2, [r3, #21]
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	2101      	movs	r1, #1
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fe f930 	bl	800a034 <unlock_fs>
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	e096      	b.n	800bf06 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	7d1b      	ldrb	r3, [r3, #20]
 800bddc:	b25b      	sxtb	r3, r3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	da14      	bge.n	800be0c <f_read+0x1da>
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	6a1a      	ldr	r2, [r3, #32]
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d90d      	bls.n	800be0c <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6a1a      	ldr	r2, [r3, #32]
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	1ad3      	subs	r3, r2, r3
 800bdf8:	025b      	lsls	r3, r3, #9
 800bdfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdfc:	18d0      	adds	r0, r2, r3
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	3330      	adds	r3, #48	; 0x30
 800be02:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be06:	4619      	mov	r1, r3
 800be08:	f7fe f880 	bl	8009f0c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800be0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0e:	025b      	lsls	r3, r3, #9
 800be10:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800be12:	e05a      	b.n	800beca <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6a1b      	ldr	r3, [r3, #32]
 800be18:	69ba      	ldr	r2, [r7, #24]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d038      	beq.n	800be90 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	7d1b      	ldrb	r3, [r3, #20]
 800be22:	b25b      	sxtb	r3, r3
 800be24:	2b00      	cmp	r3, #0
 800be26:	da1d      	bge.n	800be64 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	7858      	ldrb	r0, [r3, #1]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6a1a      	ldr	r2, [r3, #32]
 800be36:	2301      	movs	r3, #1
 800be38:	f7fd ffa8 	bl	8009d8c <disk_write>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d009      	beq.n	800be56 <f_read+0x224>
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2201      	movs	r2, #1
 800be46:	755a      	strb	r2, [r3, #21]
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	2101      	movs	r1, #1
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7fe f8f1 	bl	800a034 <unlock_fs>
 800be52:	2301      	movs	r3, #1
 800be54:	e057      	b.n	800bf06 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	7d1b      	ldrb	r3, [r3, #20]
 800be5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	7858      	ldrb	r0, [r3, #1]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be6e:	2301      	movs	r3, #1
 800be70:	69ba      	ldr	r2, [r7, #24]
 800be72:	f7fd ff6b 	bl	8009d4c <disk_read>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d009      	beq.n	800be90 <f_read+0x25e>
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2201      	movs	r2, #1
 800be80:	755a      	strb	r2, [r3, #21]
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	2101      	movs	r1, #1
 800be86:	4618      	mov	r0, r3
 800be88:	f7fe f8d4 	bl	800a034 <unlock_fs>
 800be8c:	2301      	movs	r3, #1
 800be8e:	e03a      	b.n	800bf06 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	69ba      	ldr	r2, [r7, #24]
 800be94:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	699b      	ldr	r3, [r3, #24]
 800be9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be9e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bea2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d901      	bls.n	800beb0 <f_read+0x27e>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	699b      	ldr	r3, [r3, #24]
 800beba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bebe:	4413      	add	r3, r2
 800bec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bec2:	4619      	mov	r1, r3
 800bec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bec6:	f7fe f821 	bl	8009f0c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800beca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800becc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bece:	4413      	add	r3, r2
 800bed0:	627b      	str	r3, [r7, #36]	; 0x24
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	699a      	ldr	r2, [r3, #24]
 800bed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed8:	441a      	add	r2, r3
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	619a      	str	r2, [r3, #24]
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee4:	441a      	add	r2, r3
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	601a      	str	r2, [r3, #0]
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beee:	1ad3      	subs	r3, r2, r3
 800bef0:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f47f aee3 	bne.w	800bcc0 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	2100      	movs	r1, #0
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fe f898 	bl	800a034 <unlock_fs>
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3738      	adds	r7, #56	; 0x38
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b08c      	sub	sp, #48	; 0x30
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	60f8      	str	r0, [r7, #12]
 800bf16:	60b9      	str	r1, [r7, #8]
 800bf18:	607a      	str	r2, [r7, #4]
 800bf1a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	2200      	movs	r2, #0
 800bf24:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f107 0210 	add.w	r2, r7, #16
 800bf2c:	4611      	mov	r1, r2
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7ff fc0e 	bl	800b750 <validate>
 800bf34:	4603      	mov	r3, r0
 800bf36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bf3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d107      	bne.n	800bf52 <f_write+0x44>
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	7d5b      	ldrb	r3, [r3, #21]
 800bf46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bf4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d009      	beq.n	800bf66 <f_write+0x58>
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bf58:	4611      	mov	r1, r2
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fe f86a 	bl	800a034 <unlock_fs>
 800bf60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf64:	e173      	b.n	800c24e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	7d1b      	ldrb	r3, [r3, #20]
 800bf6a:	f003 0302 	and.w	r3, r3, #2
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d106      	bne.n	800bf80 <f_write+0x72>
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	2107      	movs	r1, #7
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7fe f85c 	bl	800a034 <unlock_fs>
 800bf7c:	2307      	movs	r3, #7
 800bf7e:	e166      	b.n	800c24e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	699a      	ldr	r2, [r3, #24]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	441a      	add	r2, r3
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	699b      	ldr	r3, [r3, #24]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	f080 814b 	bcs.w	800c228 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	699b      	ldr	r3, [r3, #24]
 800bf96:	43db      	mvns	r3, r3
 800bf98:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bf9a:	e145      	b.n	800c228 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	699b      	ldr	r3, [r3, #24]
 800bfa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f040 8101 	bne.w	800c1ac <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	0a5b      	lsrs	r3, r3, #9
 800bfb0:	693a      	ldr	r2, [r7, #16]
 800bfb2:	8952      	ldrh	r2, [r2, #10]
 800bfb4:	3a01      	subs	r2, #1
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d14d      	bne.n	800c05c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	699b      	ldr	r3, [r3, #24]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d10c      	bne.n	800bfe2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d11a      	bne.n	800c00a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fe fcab 	bl	800a934 <create_chain>
 800bfde:	62b8      	str	r0, [r7, #40]	; 0x28
 800bfe0:	e013      	b.n	800c00a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d007      	beq.n	800bffa <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	699b      	ldr	r3, [r3, #24]
 800bfee:	4619      	mov	r1, r3
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f7fe fd37 	bl	800aa64 <clmt_clust>
 800bff6:	62b8      	str	r0, [r7, #40]	; 0x28
 800bff8:	e007      	b.n	800c00a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	69db      	ldr	r3, [r3, #28]
 800c000:	4619      	mov	r1, r3
 800c002:	4610      	mov	r0, r2
 800c004:	f7fe fc96 	bl	800a934 <create_chain>
 800c008:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f000 8110 	beq.w	800c232 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c014:	2b01      	cmp	r3, #1
 800c016:	d109      	bne.n	800c02c <f_write+0x11e>
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2202      	movs	r2, #2
 800c01c:	755a      	strb	r2, [r3, #21]
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	2102      	movs	r1, #2
 800c022:	4618      	mov	r0, r3
 800c024:	f7fe f806 	bl	800a034 <unlock_fs>
 800c028:	2302      	movs	r3, #2
 800c02a:	e110      	b.n	800c24e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c032:	d109      	bne.n	800c048 <f_write+0x13a>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2201      	movs	r2, #1
 800c038:	755a      	strb	r2, [r3, #21]
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	2101      	movs	r1, #1
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fd fff8 	bl	800a034 <unlock_fs>
 800c044:	2301      	movs	r3, #1
 800c046:	e102      	b.n	800c24e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c04c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d102      	bne.n	800c05c <f_write+0x14e>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c05a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	7d1b      	ldrb	r3, [r3, #20]
 800c060:	b25b      	sxtb	r3, r3
 800c062:	2b00      	cmp	r3, #0
 800c064:	da1d      	bge.n	800c0a2 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	7858      	ldrb	r0, [r3, #1]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6a1a      	ldr	r2, [r3, #32]
 800c074:	2301      	movs	r3, #1
 800c076:	f7fd fe89 	bl	8009d8c <disk_write>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d009      	beq.n	800c094 <f_write+0x186>
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2201      	movs	r2, #1
 800c084:	755a      	strb	r2, [r3, #21]
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	2101      	movs	r1, #1
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fd ffd2 	bl	800a034 <unlock_fs>
 800c090:	2301      	movs	r3, #1
 800c092:	e0dc      	b.n	800c24e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	7d1b      	ldrb	r3, [r3, #20]
 800c098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c09c:	b2da      	uxtb	r2, r3
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c0a2:	693a      	ldr	r2, [r7, #16]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	69db      	ldr	r3, [r3, #28]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	4610      	mov	r0, r2
 800c0ac:	f7fe fa2a 	bl	800a504 <clust2sect>
 800c0b0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d109      	bne.n	800c0cc <f_write+0x1be>
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2202      	movs	r2, #2
 800c0bc:	755a      	strb	r2, [r3, #21]
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	2102      	movs	r1, #2
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7fd ffb6 	bl	800a034 <unlock_fs>
 800c0c8:	2302      	movs	r3, #2
 800c0ca:	e0c0      	b.n	800c24e <f_write+0x340>
			sect += csect;
 800c0cc:	697a      	ldr	r2, [r7, #20]
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	0a5b      	lsrs	r3, r3, #9
 800c0d8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d041      	beq.n	800c164 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c0e0:	69ba      	ldr	r2, [r7, #24]
 800c0e2:	6a3b      	ldr	r3, [r7, #32]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	693a      	ldr	r2, [r7, #16]
 800c0e8:	8952      	ldrh	r2, [r2, #10]
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d905      	bls.n	800c0fa <f_write+0x1ec>
					cc = fs->csize - csect;
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	895b      	ldrh	r3, [r3, #10]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	1ad3      	subs	r3, r2, r3
 800c0f8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	7858      	ldrb	r0, [r3, #1]
 800c0fe:	6a3b      	ldr	r3, [r7, #32]
 800c100:	697a      	ldr	r2, [r7, #20]
 800c102:	69f9      	ldr	r1, [r7, #28]
 800c104:	f7fd fe42 	bl	8009d8c <disk_write>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d009      	beq.n	800c122 <f_write+0x214>
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2201      	movs	r2, #1
 800c112:	755a      	strb	r2, [r3, #21]
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	2101      	movs	r1, #1
 800c118:	4618      	mov	r0, r3
 800c11a:	f7fd ff8b 	bl	800a034 <unlock_fs>
 800c11e:	2301      	movs	r3, #1
 800c120:	e095      	b.n	800c24e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	6a1a      	ldr	r2, [r3, #32]
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	1ad3      	subs	r3, r2, r3
 800c12a:	6a3a      	ldr	r2, [r7, #32]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d915      	bls.n	800c15c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6a1a      	ldr	r2, [r3, #32]
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	1ad3      	subs	r3, r2, r3
 800c13e:	025b      	lsls	r3, r3, #9
 800c140:	69fa      	ldr	r2, [r7, #28]
 800c142:	4413      	add	r3, r2
 800c144:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c148:	4619      	mov	r1, r3
 800c14a:	f7fd fedf 	bl	8009f0c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	7d1b      	ldrb	r3, [r3, #20]
 800c152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c156:	b2da      	uxtb	r2, r3
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c15c:	6a3b      	ldr	r3, [r7, #32]
 800c15e:	025b      	lsls	r3, r3, #9
 800c160:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c162:	e044      	b.n	800c1ee <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6a1b      	ldr	r3, [r3, #32]
 800c168:	697a      	ldr	r2, [r7, #20]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d01b      	beq.n	800c1a6 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	699a      	ldr	r2, [r3, #24]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c176:	429a      	cmp	r2, r3
 800c178:	d215      	bcs.n	800c1a6 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	7858      	ldrb	r0, [r3, #1]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c184:	2301      	movs	r3, #1
 800c186:	697a      	ldr	r2, [r7, #20]
 800c188:	f7fd fde0 	bl	8009d4c <disk_read>
 800c18c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d009      	beq.n	800c1a6 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2201      	movs	r2, #1
 800c196:	755a      	strb	r2, [r3, #21]
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	2101      	movs	r1, #1
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7fd ff49 	bl	800a034 <unlock_fs>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e053      	b.n	800c24e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	697a      	ldr	r2, [r7, #20]
 800c1aa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	699b      	ldr	r3, [r3, #24]
 800c1b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c1b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c1ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d901      	bls.n	800c1c6 <f_write+0x2b8>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1d4:	4413      	add	r3, r2
 800c1d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1d8:	69f9      	ldr	r1, [r7, #28]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fd fe96 	bl	8009f0c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	7d1b      	ldrb	r3, [r3, #20]
 800c1e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c1e8:	b2da      	uxtb	r2, r3
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c1ee:	69fa      	ldr	r2, [r7, #28]
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f2:	4413      	add	r3, r2
 800c1f4:	61fb      	str	r3, [r7, #28]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	699a      	ldr	r2, [r3, #24]
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fc:	441a      	add	r2, r3
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	619a      	str	r2, [r3, #24]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	68da      	ldr	r2, [r3, #12]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	699b      	ldr	r3, [r3, #24]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	bf38      	it	cc
 800c20e:	461a      	movcc	r2, r3
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	60da      	str	r2, [r3, #12]
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21a:	441a      	add	r2, r3
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	601a      	str	r2, [r3, #0]
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c224:	1ad3      	subs	r3, r2, r3
 800c226:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f47f aeb6 	bne.w	800bf9c <f_write+0x8e>
 800c230:	e000      	b.n	800c234 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c232:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	7d1b      	ldrb	r3, [r3, #20]
 800c238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	2100      	movs	r1, #0
 800c246:	4618      	mov	r0, r3
 800c248:	f7fd fef4 	bl	800a034 <unlock_fs>
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3730      	adds	r7, #48	; 0x30
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b086      	sub	sp, #24
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f107 0208 	add.w	r2, r7, #8
 800c264:	4611      	mov	r1, r2
 800c266:	4618      	mov	r0, r3
 800c268:	f7ff fa72 	bl	800b750 <validate>
 800c26c:	4603      	mov	r3, r0
 800c26e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c270:	7dfb      	ldrb	r3, [r7, #23]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d16d      	bne.n	800c352 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	7d1b      	ldrb	r3, [r3, #20]
 800c27a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d067      	beq.n	800c352 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	7d1b      	ldrb	r3, [r3, #20]
 800c286:	b25b      	sxtb	r3, r3
 800c288:	2b00      	cmp	r3, #0
 800c28a:	da1a      	bge.n	800c2c2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	7858      	ldrb	r0, [r3, #1]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6a1a      	ldr	r2, [r3, #32]
 800c29a:	2301      	movs	r3, #1
 800c29c:	f7fd fd76 	bl	8009d8c <disk_write>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d006      	beq.n	800c2b4 <f_sync+0x5e>
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	2101      	movs	r1, #1
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fd fec2 	bl	800a034 <unlock_fs>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e055      	b.n	800c360 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	7d1b      	ldrb	r3, [r3, #20]
 800c2b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c2c2:	f7fc ffbf 	bl	8009244 <get_fattime>
 800c2c6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c2c8:	68ba      	ldr	r2, [r7, #8]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	f7fe f87b 	bl	800a3cc <move_window>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c2da:	7dfb      	ldrb	r3, [r7, #23]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d138      	bne.n	800c352 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	330b      	adds	r3, #11
 800c2ea:	781a      	ldrb	r2, [r3, #0]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	330b      	adds	r3, #11
 800c2f0:	f042 0220 	orr.w	r2, r2, #32
 800c2f4:	b2d2      	uxtb	r2, r2
 800c2f6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6818      	ldr	r0, [r3, #0]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	461a      	mov	r2, r3
 800c302:	68f9      	ldr	r1, [r7, #12]
 800c304:	f7fe fd88 	bl	800ae18 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f103 021c 	add.w	r2, r3, #28
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	4619      	mov	r1, r3
 800c314:	4610      	mov	r0, r2
 800c316:	f7fd fdcd 	bl	8009eb4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	3316      	adds	r3, #22
 800c31e:	6939      	ldr	r1, [r7, #16]
 800c320:	4618      	mov	r0, r3
 800c322:	f7fd fdc7 	bl	8009eb4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	3312      	adds	r3, #18
 800c32a:	2100      	movs	r1, #0
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7fd fda6 	bl	8009e7e <st_word>
					fs->wflag = 1;
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	2201      	movs	r2, #1
 800c336:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fe f874 	bl	800a428 <sync_fs>
 800c340:	4603      	mov	r3, r0
 800c342:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	7d1b      	ldrb	r3, [r3, #20]
 800c348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c34c:	b2da      	uxtb	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	7dfa      	ldrb	r2, [r7, #23]
 800c356:	4611      	mov	r1, r2
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fd fe6b 	bl	800a034 <unlock_fs>
 800c35e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c360:	4618      	mov	r0, r3
 800c362:	3718      	adds	r7, #24
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7ff ff70 	bl	800c256 <f_sync>
 800c376:	4603      	mov	r3, r0
 800c378:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c37a:	7bfb      	ldrb	r3, [r7, #15]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d11d      	bne.n	800c3bc <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f107 0208 	add.w	r2, r7, #8
 800c386:	4611      	mov	r1, r2
 800c388:	4618      	mov	r0, r3
 800c38a:	f7ff f9e1 	bl	800b750 <validate>
 800c38e:	4603      	mov	r3, r0
 800c390:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c392:	7bfb      	ldrb	r3, [r7, #15]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d111      	bne.n	800c3bc <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7fd ff71 	bl	800a284 <dec_lock>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c3a6:	7bfb      	ldrb	r3, [r7, #15]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d102      	bne.n	800c3b2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fd fe3c 	bl	800a034 <unlock_fs>
#endif
		}
	}
	return res;
 800c3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}

0800c3c6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b092      	sub	sp, #72	; 0x48
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	60f8      	str	r0, [r7, #12]
 800c3ce:	60b9      	str	r1, [r7, #8]
 800c3d0:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c3d2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c3d6:	f107 030c 	add.w	r3, r7, #12
 800c3da:	2200      	movs	r2, #0
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7fe ff63 	bl	800b2a8 <find_volume>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800c3e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f040 8099 	bne.w	800c524 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c3f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fa:	695a      	ldr	r2, [r3, #20]
 800c3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fe:	699b      	ldr	r3, [r3, #24]
 800c400:	3b02      	subs	r3, #2
 800c402:	429a      	cmp	r2, r3
 800c404:	d804      	bhi.n	800c410 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c408:	695a      	ldr	r2, [r3, #20]
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	e089      	b.n	800c524 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c410:	2300      	movs	r3, #0
 800c412:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d128      	bne.n	800c46e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c41c:	2302      	movs	r3, #2
 800c41e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c422:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800c424:	f107 0314 	add.w	r3, r7, #20
 800c428:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fe f889 	bl	800a542 <get_fat>
 800c430:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c438:	d103      	bne.n	800c442 <f_getfree+0x7c>
 800c43a:	2301      	movs	r3, #1
 800c43c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c440:	e063      	b.n	800c50a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c444:	2b01      	cmp	r3, #1
 800c446:	d103      	bne.n	800c450 <f_getfree+0x8a>
 800c448:	2302      	movs	r3, #2
 800c44a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c44e:	e05c      	b.n	800c50a <f_getfree+0x144>
					if (stat == 0) nfree++;
 800c450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c452:	2b00      	cmp	r3, #0
 800c454:	d102      	bne.n	800c45c <f_getfree+0x96>
 800c456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c458:	3301      	adds	r3, #1
 800c45a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800c45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c45e:	3301      	adds	r3, #1
 800c460:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c464:	699b      	ldr	r3, [r3, #24]
 800c466:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c468:	429a      	cmp	r2, r3
 800c46a:	d3db      	bcc.n	800c424 <f_getfree+0x5e>
 800c46c:	e04d      	b.n	800c50a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c470:	699b      	ldr	r3, [r3, #24]
 800c472:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c478:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800c47a:	2300      	movs	r3, #0
 800c47c:	637b      	str	r3, [r7, #52]	; 0x34
 800c47e:	2300      	movs	r3, #0
 800c480:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800c482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c484:	2b00      	cmp	r3, #0
 800c486:	d113      	bne.n	800c4b0 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800c488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48c:	1c5a      	adds	r2, r3, #1
 800c48e:	63ba      	str	r2, [r7, #56]	; 0x38
 800c490:	4619      	mov	r1, r3
 800c492:	f7fd ff9b 	bl	800a3cc <move_window>
 800c496:	4603      	mov	r3, r0
 800c498:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800c49c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d131      	bne.n	800c508 <f_getfree+0x142>
							p = fs->win;
 800c4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a6:	3334      	adds	r3, #52	; 0x34
 800c4a8:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800c4aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4ae:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800c4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	2b02      	cmp	r3, #2
 800c4b6:	d10f      	bne.n	800c4d8 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800c4b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4ba:	f7fd fca5 	bl	8009e08 <ld_word>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d102      	bne.n	800c4ca <f_getfree+0x104>
 800c4c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800c4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4cc:	3302      	adds	r3, #2
 800c4ce:	633b      	str	r3, [r7, #48]	; 0x30
 800c4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4d2:	3b02      	subs	r3, #2
 800c4d4:	637b      	str	r3, [r7, #52]	; 0x34
 800c4d6:	e010      	b.n	800c4fa <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c4d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4da:	f7fd fcad 	bl	8009e38 <ld_dword>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d102      	bne.n	800c4ee <f_getfree+0x128>
 800c4e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f0:	3304      	adds	r3, #4
 800c4f2:	633b      	str	r3, [r7, #48]	; 0x30
 800c4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4f6:	3b04      	subs	r3, #4
 800c4f8:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800c4fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4fc:	3b01      	subs	r3, #1
 800c4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1bd      	bne.n	800c482 <f_getfree+0xbc>
 800c506:	e000      	b.n	800c50a <f_getfree+0x144>
							if (res != FR_OK) break;
 800c508:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c50e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c514:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c518:	791a      	ldrb	r2, [r3, #4]
 800c51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51c:	f042 0201 	orr.w	r2, r2, #1
 800c520:	b2d2      	uxtb	r2, r2
 800c522:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c526:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800c52a:	4611      	mov	r1, r2
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fd fd81 	bl	800a034 <unlock_fs>
 800c532:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c536:	4618      	mov	r0, r3
 800c538:	3748      	adds	r7, #72	; 0x48
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b088      	sub	sp, #32
 800c542:	af00      	add	r7, sp, #0
 800c544:	60f8      	str	r0, [r7, #12]
 800c546:	60b9      	str	r1, [r7, #8]
 800c548:	607a      	str	r2, [r7, #4]
	int n = 0;
 800c54a:	2300      	movs	r3, #0
 800c54c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c552:	e01b      	b.n	800c58c <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800c554:	f107 0310 	add.w	r3, r7, #16
 800c558:	f107 0114 	add.w	r1, r7, #20
 800c55c:	2201      	movs	r2, #1
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f7ff fb67 	bl	800bc32 <f_read>
		if (rc != 1) break;
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	2b01      	cmp	r3, #1
 800c568:	d116      	bne.n	800c598 <f_gets+0x5a>
		c = s[0];
 800c56a:	7d3b      	ldrb	r3, [r7, #20]
 800c56c:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800c56e:	7dfb      	ldrb	r3, [r7, #23]
 800c570:	2b0d      	cmp	r3, #13
 800c572:	d100      	bne.n	800c576 <f_gets+0x38>
 800c574:	e00a      	b.n	800c58c <f_gets+0x4e>
		*p++ = c;
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	1c5a      	adds	r2, r3, #1
 800c57a:	61ba      	str	r2, [r7, #24]
 800c57c:	7dfa      	ldrb	r2, [r7, #23]
 800c57e:	701a      	strb	r2, [r3, #0]
		n++;
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	3301      	adds	r3, #1
 800c584:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800c586:	7dfb      	ldrb	r3, [r7, #23]
 800c588:	2b0a      	cmp	r3, #10
 800c58a:	d007      	beq.n	800c59c <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	3b01      	subs	r3, #1
 800c590:	69fa      	ldr	r2, [r7, #28]
 800c592:	429a      	cmp	r2, r3
 800c594:	dbde      	blt.n	800c554 <f_gets+0x16>
 800c596:	e002      	b.n	800c59e <f_gets+0x60>
		if (rc != 1) break;
 800c598:	bf00      	nop
 800c59a:	e000      	b.n	800c59e <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800c59c:	bf00      	nop
	}
	*p = 0;
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d001      	beq.n	800c5ae <f_gets+0x70>
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	e000      	b.n	800c5b0 <f_gets+0x72>
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3720      	adds	r7, #32
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b087      	sub	sp, #28
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	4613      	mov	r3, r2
 800c5c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c5ce:	4b1f      	ldr	r3, [pc, #124]	; (800c64c <FATFS_LinkDriverEx+0x94>)
 800c5d0:	7a5b      	ldrb	r3, [r3, #9]
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d131      	bne.n	800c63c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c5d8:	4b1c      	ldr	r3, [pc, #112]	; (800c64c <FATFS_LinkDriverEx+0x94>)
 800c5da:	7a5b      	ldrb	r3, [r3, #9]
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	461a      	mov	r2, r3
 800c5e0:	4b1a      	ldr	r3, [pc, #104]	; (800c64c <FATFS_LinkDriverEx+0x94>)
 800c5e2:	2100      	movs	r1, #0
 800c5e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c5e6:	4b19      	ldr	r3, [pc, #100]	; (800c64c <FATFS_LinkDriverEx+0x94>)
 800c5e8:	7a5b      	ldrb	r3, [r3, #9]
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	4a17      	ldr	r2, [pc, #92]	; (800c64c <FATFS_LinkDriverEx+0x94>)
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	4413      	add	r3, r2
 800c5f2:	68fa      	ldr	r2, [r7, #12]
 800c5f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c5f6:	4b15      	ldr	r3, [pc, #84]	; (800c64c <FATFS_LinkDriverEx+0x94>)
 800c5f8:	7a5b      	ldrb	r3, [r3, #9]
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	4b13      	ldr	r3, [pc, #76]	; (800c64c <FATFS_LinkDriverEx+0x94>)
 800c600:	4413      	add	r3, r2
 800c602:	79fa      	ldrb	r2, [r7, #7]
 800c604:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c606:	4b11      	ldr	r3, [pc, #68]	; (800c64c <FATFS_LinkDriverEx+0x94>)
 800c608:	7a5b      	ldrb	r3, [r3, #9]
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	1c5a      	adds	r2, r3, #1
 800c60e:	b2d1      	uxtb	r1, r2
 800c610:	4a0e      	ldr	r2, [pc, #56]	; (800c64c <FATFS_LinkDriverEx+0x94>)
 800c612:	7251      	strb	r1, [r2, #9]
 800c614:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c616:	7dbb      	ldrb	r3, [r7, #22]
 800c618:	3330      	adds	r3, #48	; 0x30
 800c61a:	b2da      	uxtb	r2, r3
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	3301      	adds	r3, #1
 800c624:	223a      	movs	r2, #58	; 0x3a
 800c626:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	3302      	adds	r3, #2
 800c62c:	222f      	movs	r2, #47	; 0x2f
 800c62e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	3303      	adds	r3, #3
 800c634:	2200      	movs	r2, #0
 800c636:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c638:	2300      	movs	r3, #0
 800c63a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c63c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	371c      	adds	r7, #28
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	20000424 	.word	0x20000424

0800c650 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c65a:	2200      	movs	r2, #0
 800c65c:	6839      	ldr	r1, [r7, #0]
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f7ff ffaa 	bl	800c5b8 <FATFS_LinkDriverEx>
 800c664:	4603      	mov	r3, r0
}
 800c666:	4618      	mov	r0, r3
 800c668:	3708      	adds	r7, #8
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}

0800c66e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c66e:	b580      	push	{r7, lr}
 800c670:	b084      	sub	sp, #16
 800c672:	af00      	add	r7, sp, #0
 800c674:	4603      	mov	r3, r0
 800c676:	6039      	str	r1, [r7, #0]
 800c678:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800c67a:	2200      	movs	r2, #0
 800c67c:	2101      	movs	r1, #1
 800c67e:	2001      	movs	r0, #1
 800c680:	f000 fa85 	bl	800cb8e <osSemaphoreNew>
 800c684:	4602      	mov	r2, r0
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	bf14      	ite	ne
 800c692:	2301      	movne	r3, #1
 800c694:	2300      	moveq	r3, #0
 800c696:	b2db      	uxtb	r3, r3
 800c698:	60fb      	str	r3, [r7, #12]

    return ret;
 800c69a:	68fb      	ldr	r3, [r7, #12]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3710      	adds	r7, #16
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 fb8d 	bl	800cdcc <osSemaphoreDelete>
#endif
    return 1;
 800c6b2:	2301      	movs	r3, #1
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800c6c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 fae7 	bl	800cca0 <osSemaphoreAcquire>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d101      	bne.n	800c6dc <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b082      	sub	sp, #8
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 fb28 	bl	800cd44 <osSemaphoreRelease>
#endif
}
 800c6f4:	bf00      	nop
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <__NVIC_SetPriority>:
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	4603      	mov	r3, r0
 800c704:	6039      	str	r1, [r7, #0]
 800c706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	db0a      	blt.n	800c726 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	b2da      	uxtb	r2, r3
 800c714:	490c      	ldr	r1, [pc, #48]	; (800c748 <__NVIC_SetPriority+0x4c>)
 800c716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c71a:	0112      	lsls	r2, r2, #4
 800c71c:	b2d2      	uxtb	r2, r2
 800c71e:	440b      	add	r3, r1
 800c720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c724:	e00a      	b.n	800c73c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	b2da      	uxtb	r2, r3
 800c72a:	4908      	ldr	r1, [pc, #32]	; (800c74c <__NVIC_SetPriority+0x50>)
 800c72c:	79fb      	ldrb	r3, [r7, #7]
 800c72e:	f003 030f 	and.w	r3, r3, #15
 800c732:	3b04      	subs	r3, #4
 800c734:	0112      	lsls	r2, r2, #4
 800c736:	b2d2      	uxtb	r2, r2
 800c738:	440b      	add	r3, r1
 800c73a:	761a      	strb	r2, [r3, #24]
}
 800c73c:	bf00      	nop
 800c73e:	370c      	adds	r7, #12
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr
 800c748:	e000e100 	.word	0xe000e100
 800c74c:	e000ed00 	.word	0xe000ed00

0800c750 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c750:	b580      	push	{r7, lr}
 800c752:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c754:	4b05      	ldr	r3, [pc, #20]	; (800c76c <SysTick_Handler+0x1c>)
 800c756:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c758:	f002 fb36 	bl	800edc8 <xTaskGetSchedulerState>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d001      	beq.n	800c766 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c762:	f003 fb19 	bl	800fd98 <xPortSysTickHandler>
  }
}
 800c766:	bf00      	nop
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	e000e010 	.word	0xe000e010

0800c770 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c770:	b580      	push	{r7, lr}
 800c772:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c774:	2100      	movs	r1, #0
 800c776:	f06f 0004 	mvn.w	r0, #4
 800c77a:	f7ff ffbf 	bl	800c6fc <__NVIC_SetPriority>
#endif
}
 800c77e:	bf00      	nop
 800c780:	bd80      	pop	{r7, pc}
	...

0800c784 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c78a:	f3ef 8305 	mrs	r3, IPSR
 800c78e:	603b      	str	r3, [r7, #0]
  return(result);
 800c790:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c792:	2b00      	cmp	r3, #0
 800c794:	d003      	beq.n	800c79e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c796:	f06f 0305 	mvn.w	r3, #5
 800c79a:	607b      	str	r3, [r7, #4]
 800c79c:	e00c      	b.n	800c7b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c79e:	4b0a      	ldr	r3, [pc, #40]	; (800c7c8 <osKernelInitialize+0x44>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d105      	bne.n	800c7b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c7a6:	4b08      	ldr	r3, [pc, #32]	; (800c7c8 <osKernelInitialize+0x44>)
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	607b      	str	r3, [r7, #4]
 800c7b0:	e002      	b.n	800c7b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c7b8:	687b      	ldr	r3, [r7, #4]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	370c      	adds	r7, #12
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	20000430 	.word	0x20000430

0800c7cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7d2:	f3ef 8305 	mrs	r3, IPSR
 800c7d6:	603b      	str	r3, [r7, #0]
  return(result);
 800c7d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d003      	beq.n	800c7e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c7de:	f06f 0305 	mvn.w	r3, #5
 800c7e2:	607b      	str	r3, [r7, #4]
 800c7e4:	e010      	b.n	800c808 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c7e6:	4b0b      	ldr	r3, [pc, #44]	; (800c814 <osKernelStart+0x48>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d109      	bne.n	800c802 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c7ee:	f7ff ffbf 	bl	800c770 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c7f2:	4b08      	ldr	r3, [pc, #32]	; (800c814 <osKernelStart+0x48>)
 800c7f4:	2202      	movs	r2, #2
 800c7f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c7f8:	f001 fe8e 	bl	800e518 <vTaskStartScheduler>
      stat = osOK;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	607b      	str	r3, [r7, #4]
 800c800:	e002      	b.n	800c808 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c802:	f04f 33ff 	mov.w	r3, #4294967295
 800c806:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c808:	687b      	ldr	r3, [r7, #4]
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3708      	adds	r7, #8
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	20000430 	.word	0x20000430

0800c818 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c818:	b580      	push	{r7, lr}
 800c81a:	b08e      	sub	sp, #56	; 0x38
 800c81c:	af04      	add	r7, sp, #16
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c824:	2300      	movs	r3, #0
 800c826:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c828:	f3ef 8305 	mrs	r3, IPSR
 800c82c:	617b      	str	r3, [r7, #20]
  return(result);
 800c82e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c830:	2b00      	cmp	r3, #0
 800c832:	d17e      	bne.n	800c932 <osThreadNew+0x11a>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d07b      	beq.n	800c932 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c83a:	2380      	movs	r3, #128	; 0x80
 800c83c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c83e:	2318      	movs	r3, #24
 800c840:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c842:	2300      	movs	r3, #0
 800c844:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c846:	f04f 33ff 	mov.w	r3, #4294967295
 800c84a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d045      	beq.n	800c8de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d002      	beq.n	800c860 <osThreadNew+0x48>
        name = attr->name;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	699b      	ldr	r3, [r3, #24]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d002      	beq.n	800c86e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	699b      	ldr	r3, [r3, #24]
 800c86c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c86e:	69fb      	ldr	r3, [r7, #28]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d008      	beq.n	800c886 <osThreadNew+0x6e>
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	2b38      	cmp	r3, #56	; 0x38
 800c878:	d805      	bhi.n	800c886 <osThreadNew+0x6e>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	f003 0301 	and.w	r3, r3, #1
 800c882:	2b00      	cmp	r3, #0
 800c884:	d001      	beq.n	800c88a <osThreadNew+0x72>
        return (NULL);
 800c886:	2300      	movs	r3, #0
 800c888:	e054      	b.n	800c934 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	695b      	ldr	r3, [r3, #20]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d003      	beq.n	800c89a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	695b      	ldr	r3, [r3, #20]
 800c896:	089b      	lsrs	r3, r3, #2
 800c898:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00e      	beq.n	800c8c0 <osThreadNew+0xa8>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	2b5b      	cmp	r3, #91	; 0x5b
 800c8a8:	d90a      	bls.n	800c8c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d006      	beq.n	800c8c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	695b      	ldr	r3, [r3, #20]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d002      	beq.n	800c8c0 <osThreadNew+0xa8>
        mem = 1;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	61bb      	str	r3, [r7, #24]
 800c8be:	e010      	b.n	800c8e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d10c      	bne.n	800c8e2 <osThreadNew+0xca>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d108      	bne.n	800c8e2 <osThreadNew+0xca>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	691b      	ldr	r3, [r3, #16]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d104      	bne.n	800c8e2 <osThreadNew+0xca>
          mem = 0;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	61bb      	str	r3, [r7, #24]
 800c8dc:	e001      	b.n	800c8e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d110      	bne.n	800c90a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c8f0:	9202      	str	r2, [sp, #8]
 800c8f2:	9301      	str	r3, [sp, #4]
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	6a3a      	ldr	r2, [r7, #32]
 800c8fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f001 fc34 	bl	800e16c <xTaskCreateStatic>
 800c904:	4603      	mov	r3, r0
 800c906:	613b      	str	r3, [r7, #16]
 800c908:	e013      	b.n	800c932 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d110      	bne.n	800c932 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	b29a      	uxth	r2, r3
 800c914:	f107 0310 	add.w	r3, r7, #16
 800c918:	9301      	str	r3, [sp, #4]
 800c91a:	69fb      	ldr	r3, [r7, #28]
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c922:	68f8      	ldr	r0, [r7, #12]
 800c924:	f001 fc7f 	bl	800e226 <xTaskCreate>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d001      	beq.n	800c932 <osThreadNew+0x11a>
            hTask = NULL;
 800c92e:	2300      	movs	r3, #0
 800c930:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c932:	693b      	ldr	r3, [r7, #16]
}
 800c934:	4618      	mov	r0, r3
 800c936:	3728      	adds	r7, #40	; 0x28
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c944:	f3ef 8305 	mrs	r3, IPSR
 800c948:	60bb      	str	r3, [r7, #8]
  return(result);
 800c94a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d003      	beq.n	800c958 <osDelay+0x1c>
    stat = osErrorISR;
 800c950:	f06f 0305 	mvn.w	r3, #5
 800c954:	60fb      	str	r3, [r7, #12]
 800c956:	e007      	b.n	800c968 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c958:	2300      	movs	r3, #0
 800c95a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d002      	beq.n	800c968 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f001 fda4 	bl	800e4b0 <vTaskDelay>
    }
  }

  return (stat);
 800c968:	68fb      	ldr	r3, [r7, #12]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c972:	b580      	push	{r7, lr}
 800c974:	b088      	sub	sp, #32
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c97a:	2300      	movs	r3, #0
 800c97c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c97e:	f3ef 8305 	mrs	r3, IPSR
 800c982:	60bb      	str	r3, [r7, #8]
  return(result);
 800c984:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c986:	2b00      	cmp	r3, #0
 800c988:	d174      	bne.n	800ca74 <osMutexNew+0x102>
    if (attr != NULL) {
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d003      	beq.n	800c998 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	61bb      	str	r3, [r7, #24]
 800c996:	e001      	b.n	800c99c <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c998:	2300      	movs	r3, #0
 800c99a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	f003 0301 	and.w	r3, r3, #1
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d002      	beq.n	800c9ac <osMutexNew+0x3a>
      rmtx = 1U;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	617b      	str	r3, [r7, #20]
 800c9aa:	e001      	b.n	800c9b0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	f003 0308 	and.w	r3, r3, #8
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d15c      	bne.n	800ca74 <osMutexNew+0x102>
      mem = -1;
 800c9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c9be:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d015      	beq.n	800c9f2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d006      	beq.n	800c9dc <osMutexNew+0x6a>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	2b4f      	cmp	r3, #79	; 0x4f
 800c9d4:	d902      	bls.n	800c9dc <osMutexNew+0x6a>
          mem = 1;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	613b      	str	r3, [r7, #16]
 800c9da:	e00c      	b.n	800c9f6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d108      	bne.n	800c9f6 <osMutexNew+0x84>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d104      	bne.n	800c9f6 <osMutexNew+0x84>
            mem = 0;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	613b      	str	r3, [r7, #16]
 800c9f0:	e001      	b.n	800c9f6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d112      	bne.n	800ca22 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d007      	beq.n	800ca12 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	4619      	mov	r1, r3
 800ca08:	2004      	movs	r0, #4
 800ca0a:	f000 fc5a 	bl	800d2c2 <xQueueCreateMutexStatic>
 800ca0e:	61f8      	str	r0, [r7, #28]
 800ca10:	e016      	b.n	800ca40 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	689b      	ldr	r3, [r3, #8]
 800ca16:	4619      	mov	r1, r3
 800ca18:	2001      	movs	r0, #1
 800ca1a:	f000 fc52 	bl	800d2c2 <xQueueCreateMutexStatic>
 800ca1e:	61f8      	str	r0, [r7, #28]
 800ca20:	e00e      	b.n	800ca40 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10b      	bne.n	800ca40 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d004      	beq.n	800ca38 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800ca2e:	2004      	movs	r0, #4
 800ca30:	f000 fc2f 	bl	800d292 <xQueueCreateMutex>
 800ca34:	61f8      	str	r0, [r7, #28]
 800ca36:	e003      	b.n	800ca40 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800ca38:	2001      	movs	r0, #1
 800ca3a:	f000 fc2a 	bl	800d292 <xQueueCreateMutex>
 800ca3e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00c      	beq.n	800ca60 <osMutexNew+0xee>
        if (attr != NULL) {
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d003      	beq.n	800ca54 <osMutexNew+0xe2>
          name = attr->name;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	60fb      	str	r3, [r7, #12]
 800ca52:	e001      	b.n	800ca58 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ca54:	2300      	movs	r3, #0
 800ca56:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ca58:	68f9      	ldr	r1, [r7, #12]
 800ca5a:	69f8      	ldr	r0, [r7, #28]
 800ca5c:	f001 fafe 	bl	800e05c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d006      	beq.n	800ca74 <osMutexNew+0x102>
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d003      	beq.n	800ca74 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	f043 0301 	orr.w	r3, r3, #1
 800ca72:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ca74:	69fb      	ldr	r3, [r7, #28]
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3720      	adds	r7, #32
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b086      	sub	sp, #24
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f023 0301 	bic.w	r3, r3, #1
 800ca8e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f003 0301 	and.w	r3, r3, #1
 800ca96:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca9c:	f3ef 8305 	mrs	r3, IPSR
 800caa0:	60bb      	str	r3, [r7, #8]
  return(result);
 800caa2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d003      	beq.n	800cab0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800caa8:	f06f 0305 	mvn.w	r3, #5
 800caac:	617b      	str	r3, [r7, #20]
 800caae:	e02c      	b.n	800cb0a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d103      	bne.n	800cabe <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800cab6:	f06f 0303 	mvn.w	r3, #3
 800caba:	617b      	str	r3, [r7, #20]
 800cabc:	e025      	b.n	800cb0a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d011      	beq.n	800cae8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cac4:	6839      	ldr	r1, [r7, #0]
 800cac6:	6938      	ldr	r0, [r7, #16]
 800cac8:	f000 fc4a 	bl	800d360 <xQueueTakeMutexRecursive>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d01b      	beq.n	800cb0a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d003      	beq.n	800cae0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800cad8:	f06f 0301 	mvn.w	r3, #1
 800cadc:	617b      	str	r3, [r7, #20]
 800cade:	e014      	b.n	800cb0a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cae0:	f06f 0302 	mvn.w	r3, #2
 800cae4:	617b      	str	r3, [r7, #20]
 800cae6:	e010      	b.n	800cb0a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cae8:	6839      	ldr	r1, [r7, #0]
 800caea:	6938      	ldr	r0, [r7, #16]
 800caec:	f000 ffde 	bl	800daac <xQueueSemaphoreTake>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d009      	beq.n	800cb0a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d003      	beq.n	800cb04 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800cafc:	f06f 0301 	mvn.w	r3, #1
 800cb00:	617b      	str	r3, [r7, #20]
 800cb02:	e002      	b.n	800cb0a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cb04:	f06f 0302 	mvn.w	r3, #2
 800cb08:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800cb0a:	697b      	ldr	r3, [r7, #20]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3718      	adds	r7, #24
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b086      	sub	sp, #24
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f023 0301 	bic.w	r3, r3, #1
 800cb22:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f003 0301 	and.w	r3, r3, #1
 800cb2a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb30:	f3ef 8305 	mrs	r3, IPSR
 800cb34:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb36:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d003      	beq.n	800cb44 <osMutexRelease+0x30>
    stat = osErrorISR;
 800cb3c:	f06f 0305 	mvn.w	r3, #5
 800cb40:	617b      	str	r3, [r7, #20]
 800cb42:	e01f      	b.n	800cb84 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d103      	bne.n	800cb52 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800cb4a:	f06f 0303 	mvn.w	r3, #3
 800cb4e:	617b      	str	r3, [r7, #20]
 800cb50:	e018      	b.n	800cb84 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d009      	beq.n	800cb6c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cb58:	6938      	ldr	r0, [r7, #16]
 800cb5a:	f000 fbcd 	bl	800d2f8 <xQueueGiveMutexRecursive>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d00f      	beq.n	800cb84 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cb64:	f06f 0302 	mvn.w	r3, #2
 800cb68:	617b      	str	r3, [r7, #20]
 800cb6a:	e00b      	b.n	800cb84 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	2200      	movs	r2, #0
 800cb70:	2100      	movs	r1, #0
 800cb72:	6938      	ldr	r0, [r7, #16]
 800cb74:	f000 fc94 	bl	800d4a0 <xQueueGenericSend>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d002      	beq.n	800cb84 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cb7e:	f06f 0302 	mvn.w	r3, #2
 800cb82:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cb84:	697b      	ldr	r3, [r7, #20]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3718      	adds	r7, #24
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b08a      	sub	sp, #40	; 0x28
 800cb92:	af02      	add	r7, sp, #8
 800cb94:	60f8      	str	r0, [r7, #12]
 800cb96:	60b9      	str	r1, [r7, #8]
 800cb98:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb9e:	f3ef 8305 	mrs	r3, IPSR
 800cba2:	613b      	str	r3, [r7, #16]
  return(result);
 800cba4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d175      	bne.n	800cc96 <osSemaphoreNew+0x108>
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d072      	beq.n	800cc96 <osSemaphoreNew+0x108>
 800cbb0:	68ba      	ldr	r2, [r7, #8]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d86e      	bhi.n	800cc96 <osSemaphoreNew+0x108>
    mem = -1;
 800cbb8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbbc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d015      	beq.n	800cbf0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d006      	beq.n	800cbda <osSemaphoreNew+0x4c>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	2b4f      	cmp	r3, #79	; 0x4f
 800cbd2:	d902      	bls.n	800cbda <osSemaphoreNew+0x4c>
        mem = 1;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	61bb      	str	r3, [r7, #24]
 800cbd8:	e00c      	b.n	800cbf4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	689b      	ldr	r3, [r3, #8]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d108      	bne.n	800cbf4 <osSemaphoreNew+0x66>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d104      	bne.n	800cbf4 <osSemaphoreNew+0x66>
          mem = 0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	61bb      	str	r3, [r7, #24]
 800cbee:	e001      	b.n	800cbf4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbfa:	d04c      	beq.n	800cc96 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d128      	bne.n	800cc54 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d10a      	bne.n	800cc1e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	2203      	movs	r2, #3
 800cc0e:	9200      	str	r2, [sp, #0]
 800cc10:	2200      	movs	r2, #0
 800cc12:	2100      	movs	r1, #0
 800cc14:	2001      	movs	r0, #1
 800cc16:	f000 fa4d 	bl	800d0b4 <xQueueGenericCreateStatic>
 800cc1a:	61f8      	str	r0, [r7, #28]
 800cc1c:	e005      	b.n	800cc2a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800cc1e:	2203      	movs	r2, #3
 800cc20:	2100      	movs	r1, #0
 800cc22:	2001      	movs	r0, #1
 800cc24:	f000 fabe 	bl	800d1a4 <xQueueGenericCreate>
 800cc28:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d022      	beq.n	800cc76 <osSemaphoreNew+0xe8>
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d01f      	beq.n	800cc76 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cc36:	2300      	movs	r3, #0
 800cc38:	2200      	movs	r2, #0
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	69f8      	ldr	r0, [r7, #28]
 800cc3e:	f000 fc2f 	bl	800d4a0 <xQueueGenericSend>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d016      	beq.n	800cc76 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800cc48:	69f8      	ldr	r0, [r7, #28]
 800cc4a:	f001 f8bb 	bl	800ddc4 <vQueueDelete>
            hSemaphore = NULL;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	61fb      	str	r3, [r7, #28]
 800cc52:	e010      	b.n	800cc76 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d108      	bne.n	800cc6c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	461a      	mov	r2, r3
 800cc60:	68b9      	ldr	r1, [r7, #8]
 800cc62:	68f8      	ldr	r0, [r7, #12]
 800cc64:	f000 fbb2 	bl	800d3cc <xQueueCreateCountingSemaphoreStatic>
 800cc68:	61f8      	str	r0, [r7, #28]
 800cc6a:	e004      	b.n	800cc76 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cc6c:	68b9      	ldr	r1, [r7, #8]
 800cc6e:	68f8      	ldr	r0, [r7, #12]
 800cc70:	f000 fbe3 	bl	800d43a <xQueueCreateCountingSemaphore>
 800cc74:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d00c      	beq.n	800cc96 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d003      	beq.n	800cc8a <osSemaphoreNew+0xfc>
          name = attr->name;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	617b      	str	r3, [r7, #20]
 800cc88:	e001      	b.n	800cc8e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800cc8e:	6979      	ldr	r1, [r7, #20]
 800cc90:	69f8      	ldr	r0, [r7, #28]
 800cc92:	f001 f9e3 	bl	800e05c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800cc96:	69fb      	ldr	r3, [r7, #28]
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3720      	adds	r7, #32
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d103      	bne.n	800ccc0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ccb8:	f06f 0303 	mvn.w	r3, #3
 800ccbc:	617b      	str	r3, [r7, #20]
 800ccbe:	e039      	b.n	800cd34 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccc0:	f3ef 8305 	mrs	r3, IPSR
 800ccc4:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d022      	beq.n	800cd12 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d003      	beq.n	800ccda <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ccd2:	f06f 0303 	mvn.w	r3, #3
 800ccd6:	617b      	str	r3, [r7, #20]
 800ccd8:	e02c      	b.n	800cd34 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ccde:	f107 0308 	add.w	r3, r7, #8
 800cce2:	461a      	mov	r2, r3
 800cce4:	2100      	movs	r1, #0
 800cce6:	6938      	ldr	r0, [r7, #16]
 800cce8:	f000 ffec 	bl	800dcc4 <xQueueReceiveFromISR>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d003      	beq.n	800ccfa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ccf2:	f06f 0302 	mvn.w	r3, #2
 800ccf6:	617b      	str	r3, [r7, #20]
 800ccf8:	e01c      	b.n	800cd34 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d019      	beq.n	800cd34 <osSemaphoreAcquire+0x94>
 800cd00:	4b0f      	ldr	r3, [pc, #60]	; (800cd40 <osSemaphoreAcquire+0xa0>)
 800cd02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd06:	601a      	str	r2, [r3, #0]
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	f3bf 8f6f 	isb	sy
 800cd10:	e010      	b.n	800cd34 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800cd12:	6839      	ldr	r1, [r7, #0]
 800cd14:	6938      	ldr	r0, [r7, #16]
 800cd16:	f000 fec9 	bl	800daac <xQueueSemaphoreTake>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d009      	beq.n	800cd34 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d003      	beq.n	800cd2e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800cd26:	f06f 0301 	mvn.w	r3, #1
 800cd2a:	617b      	str	r3, [r7, #20]
 800cd2c:	e002      	b.n	800cd34 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800cd2e:	f06f 0302 	mvn.w	r3, #2
 800cd32:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cd34:	697b      	ldr	r3, [r7, #20]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3718      	adds	r7, #24
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	e000ed04 	.word	0xe000ed04

0800cd44 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b086      	sub	sp, #24
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d103      	bne.n	800cd62 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800cd5a:	f06f 0303 	mvn.w	r3, #3
 800cd5e:	617b      	str	r3, [r7, #20]
 800cd60:	e02c      	b.n	800cdbc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd62:	f3ef 8305 	mrs	r3, IPSR
 800cd66:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd68:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d01a      	beq.n	800cda4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cd72:	f107 0308 	add.w	r3, r7, #8
 800cd76:	4619      	mov	r1, r3
 800cd78:	6938      	ldr	r0, [r7, #16]
 800cd7a:	f000 fd2a 	bl	800d7d2 <xQueueGiveFromISR>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d003      	beq.n	800cd8c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800cd84:	f06f 0302 	mvn.w	r3, #2
 800cd88:	617b      	str	r3, [r7, #20]
 800cd8a:	e017      	b.n	800cdbc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d014      	beq.n	800cdbc <osSemaphoreRelease+0x78>
 800cd92:	4b0d      	ldr	r3, [pc, #52]	; (800cdc8 <osSemaphoreRelease+0x84>)
 800cd94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd98:	601a      	str	r2, [r3, #0]
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	f3bf 8f6f 	isb	sy
 800cda2:	e00b      	b.n	800cdbc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cda4:	2300      	movs	r3, #0
 800cda6:	2200      	movs	r2, #0
 800cda8:	2100      	movs	r1, #0
 800cdaa:	6938      	ldr	r0, [r7, #16]
 800cdac:	f000 fb78 	bl	800d4a0 <xQueueGenericSend>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d002      	beq.n	800cdbc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800cdb6:	f06f 0302 	mvn.w	r3, #2
 800cdba:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800cdbc:	697b      	ldr	r3, [r7, #20]
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3718      	adds	r7, #24
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	e000ed04 	.word	0xe000ed04

0800cdcc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdd8:	f3ef 8305 	mrs	r3, IPSR
 800cddc:	60fb      	str	r3, [r7, #12]
  return(result);
 800cdde:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d003      	beq.n	800cdec <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800cde4:	f06f 0305 	mvn.w	r3, #5
 800cde8:	617b      	str	r3, [r7, #20]
 800cdea:	e00e      	b.n	800ce0a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d103      	bne.n	800cdfa <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800cdf2:	f06f 0303 	mvn.w	r3, #3
 800cdf6:	617b      	str	r3, [r7, #20]
 800cdf8:	e007      	b.n	800ce0a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800cdfa:	6938      	ldr	r0, [r7, #16]
 800cdfc:	f001 f958 	bl	800e0b0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800ce00:	2300      	movs	r3, #0
 800ce02:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800ce04:	6938      	ldr	r0, [r7, #16]
 800ce06:	f000 ffdd 	bl	800ddc4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800ce0a:	697b      	ldr	r3, [r7, #20]
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3718      	adds	r7, #24
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ce14:	b480      	push	{r7}
 800ce16:	b085      	sub	sp, #20
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	4a07      	ldr	r2, [pc, #28]	; (800ce40 <vApplicationGetIdleTaskMemory+0x2c>)
 800ce24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	4a06      	ldr	r2, [pc, #24]	; (800ce44 <vApplicationGetIdleTaskMemory+0x30>)
 800ce2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2280      	movs	r2, #128	; 0x80
 800ce30:	601a      	str	r2, [r3, #0]
}
 800ce32:	bf00      	nop
 800ce34:	3714      	adds	r7, #20
 800ce36:	46bd      	mov	sp, r7
 800ce38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3c:	4770      	bx	lr
 800ce3e:	bf00      	nop
 800ce40:	20000434 	.word	0x20000434
 800ce44:	20000490 	.word	0x20000490

0800ce48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	4a07      	ldr	r2, [pc, #28]	; (800ce74 <vApplicationGetTimerTaskMemory+0x2c>)
 800ce58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	4a06      	ldr	r2, [pc, #24]	; (800ce78 <vApplicationGetTimerTaskMemory+0x30>)
 800ce5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce66:	601a      	str	r2, [r3, #0]
}
 800ce68:	bf00      	nop
 800ce6a:	3714      	adds	r7, #20
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr
 800ce74:	20000690 	.word	0x20000690
 800ce78:	200006ec 	.word	0x200006ec

0800ce7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f103 0208 	add.w	r2, r3, #8
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f04f 32ff 	mov.w	r2, #4294967295
 800ce94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f103 0208 	add.w	r2, r3, #8
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f103 0208 	add.w	r2, r3, #8
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ceb0:	bf00      	nop
 800ceb2:	370c      	adds	r7, #12
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ceca:	bf00      	nop
 800cecc:	370c      	adds	r7, #12
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr

0800ced6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ced6:	b480      	push	{r7}
 800ced8:	b085      	sub	sp, #20
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
 800cede:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	689a      	ldr	r2, [r3, #8]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	689b      	ldr	r3, [r3, #8]
 800cef8:	683a      	ldr	r2, [r7, #0]
 800cefa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	683a      	ldr	r2, [r7, #0]
 800cf00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	1c5a      	adds	r2, r3, #1
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	601a      	str	r2, [r3, #0]
}
 800cf12:	bf00      	nop
 800cf14:	3714      	adds	r7, #20
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr

0800cf1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf1e:	b480      	push	{r7}
 800cf20:	b085      	sub	sp, #20
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
 800cf26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf34:	d103      	bne.n	800cf3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	60fb      	str	r3, [r7, #12]
 800cf3c:	e00c      	b.n	800cf58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	3308      	adds	r3, #8
 800cf42:	60fb      	str	r3, [r7, #12]
 800cf44:	e002      	b.n	800cf4c <vListInsert+0x2e>
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	60fb      	str	r3, [r7, #12]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	68ba      	ldr	r2, [r7, #8]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d2f6      	bcs.n	800cf46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	685a      	ldr	r2, [r3, #4]
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	683a      	ldr	r2, [r7, #0]
 800cf66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	683a      	ldr	r2, [r7, #0]
 800cf72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	1c5a      	adds	r2, r3, #1
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	601a      	str	r2, [r3, #0]
}
 800cf84:	bf00      	nop
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cf90:	b480      	push	{r7}
 800cf92:	b085      	sub	sp, #20
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	691b      	ldr	r3, [r3, #16]
 800cf9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	6892      	ldr	r2, [r2, #8]
 800cfa6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	689b      	ldr	r3, [r3, #8]
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	6852      	ldr	r2, [r2, #4]
 800cfb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d103      	bne.n	800cfc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	689a      	ldr	r2, [r3, #8]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	1e5a      	subs	r2, r3, #1
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3714      	adds	r7, #20
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10a      	bne.n	800d00e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffc:	f383 8811 	msr	BASEPRI, r3
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d00a:	bf00      	nop
 800d00c:	e7fe      	b.n	800d00c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d00e:	f002 fe31 	bl	800fc74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d01a:	68f9      	ldr	r1, [r7, #12]
 800d01c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d01e:	fb01 f303 	mul.w	r3, r1, r3
 800d022:	441a      	add	r2, r3
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2200      	movs	r2, #0
 800d02c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d03e:	3b01      	subs	r3, #1
 800d040:	68f9      	ldr	r1, [r7, #12]
 800d042:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d044:	fb01 f303 	mul.w	r3, r1, r3
 800d048:	441a      	add	r2, r3
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	22ff      	movs	r2, #255	; 0xff
 800d052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	22ff      	movs	r2, #255	; 0xff
 800d05a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d114      	bne.n	800d08e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	691b      	ldr	r3, [r3, #16]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d01a      	beq.n	800d0a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	3310      	adds	r3, #16
 800d070:	4618      	mov	r0, r3
 800d072:	f001 fcdb 	bl	800ea2c <xTaskRemoveFromEventList>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d012      	beq.n	800d0a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d07c:	4b0c      	ldr	r3, [pc, #48]	; (800d0b0 <xQueueGenericReset+0xcc>)
 800d07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d082:	601a      	str	r2, [r3, #0]
 800d084:	f3bf 8f4f 	dsb	sy
 800d088:	f3bf 8f6f 	isb	sy
 800d08c:	e009      	b.n	800d0a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	3310      	adds	r3, #16
 800d092:	4618      	mov	r0, r3
 800d094:	f7ff fef2 	bl	800ce7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	3324      	adds	r3, #36	; 0x24
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7ff feed 	bl	800ce7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d0a2:	f002 fe17 	bl	800fcd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d0a6:	2301      	movs	r3, #1
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3710      	adds	r7, #16
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	e000ed04 	.word	0xe000ed04

0800d0b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b08e      	sub	sp, #56	; 0x38
 800d0b8:	af02      	add	r7, sp, #8
 800d0ba:	60f8      	str	r0, [r7, #12]
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	607a      	str	r2, [r7, #4]
 800d0c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d10a      	bne.n	800d0de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0cc:	f383 8811 	msr	BASEPRI, r3
 800d0d0:	f3bf 8f6f 	isb	sy
 800d0d4:	f3bf 8f4f 	dsb	sy
 800d0d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d0da:	bf00      	nop
 800d0dc:	e7fe      	b.n	800d0dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d10a      	bne.n	800d0fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e8:	f383 8811 	msr	BASEPRI, r3
 800d0ec:	f3bf 8f6f 	isb	sy
 800d0f0:	f3bf 8f4f 	dsb	sy
 800d0f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0f6:	bf00      	nop
 800d0f8:	e7fe      	b.n	800d0f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d002      	beq.n	800d106 <xQueueGenericCreateStatic+0x52>
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <xQueueGenericCreateStatic+0x56>
 800d106:	2301      	movs	r3, #1
 800d108:	e000      	b.n	800d10c <xQueueGenericCreateStatic+0x58>
 800d10a:	2300      	movs	r3, #0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d10a      	bne.n	800d126 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d114:	f383 8811 	msr	BASEPRI, r3
 800d118:	f3bf 8f6f 	isb	sy
 800d11c:	f3bf 8f4f 	dsb	sy
 800d120:	623b      	str	r3, [r7, #32]
}
 800d122:	bf00      	nop
 800d124:	e7fe      	b.n	800d124 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d102      	bne.n	800d132 <xQueueGenericCreateStatic+0x7e>
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d101      	bne.n	800d136 <xQueueGenericCreateStatic+0x82>
 800d132:	2301      	movs	r3, #1
 800d134:	e000      	b.n	800d138 <xQueueGenericCreateStatic+0x84>
 800d136:	2300      	movs	r3, #0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d10a      	bne.n	800d152 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	61fb      	str	r3, [r7, #28]
}
 800d14e:	bf00      	nop
 800d150:	e7fe      	b.n	800d150 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d152:	2350      	movs	r3, #80	; 0x50
 800d154:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	2b50      	cmp	r3, #80	; 0x50
 800d15a:	d00a      	beq.n	800d172 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d160:	f383 8811 	msr	BASEPRI, r3
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	61bb      	str	r3, [r7, #24]
}
 800d16e:	bf00      	nop
 800d170:	e7fe      	b.n	800d170 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d172:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00d      	beq.n	800d19a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d180:	2201      	movs	r2, #1
 800d182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d186:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	4613      	mov	r3, r2
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	68b9      	ldr	r1, [r7, #8]
 800d194:	68f8      	ldr	r0, [r7, #12]
 800d196:	f000 f83f 	bl	800d218 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3730      	adds	r7, #48	; 0x30
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b08a      	sub	sp, #40	; 0x28
 800d1a8:	af02      	add	r7, sp, #8
 800d1aa:	60f8      	str	r0, [r7, #12]
 800d1ac:	60b9      	str	r1, [r7, #8]
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d10a      	bne.n	800d1ce <xQueueGenericCreate+0x2a>
	__asm volatile
 800d1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	613b      	str	r3, [r7, #16]
}
 800d1ca:	bf00      	nop
 800d1cc:	e7fe      	b.n	800d1cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	68ba      	ldr	r2, [r7, #8]
 800d1d2:	fb02 f303 	mul.w	r3, r2, r3
 800d1d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	3350      	adds	r3, #80	; 0x50
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f002 fe6b 	bl	800feb8 <pvPortMalloc>
 800d1e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d1e4:	69bb      	ldr	r3, [r7, #24]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d011      	beq.n	800d20e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	3350      	adds	r3, #80	; 0x50
 800d1f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d1fc:	79fa      	ldrb	r2, [r7, #7]
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	9300      	str	r3, [sp, #0]
 800d202:	4613      	mov	r3, r2
 800d204:	697a      	ldr	r2, [r7, #20]
 800d206:	68b9      	ldr	r1, [r7, #8]
 800d208:	68f8      	ldr	r0, [r7, #12]
 800d20a:	f000 f805 	bl	800d218 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d20e:	69bb      	ldr	r3, [r7, #24]
	}
 800d210:	4618      	mov	r0, r3
 800d212:	3720      	adds	r7, #32
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	60f8      	str	r0, [r7, #12]
 800d220:	60b9      	str	r1, [r7, #8]
 800d222:	607a      	str	r2, [r7, #4]
 800d224:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d103      	bne.n	800d234 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	69ba      	ldr	r2, [r7, #24]
 800d230:	601a      	str	r2, [r3, #0]
 800d232:	e002      	b.n	800d23a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d23a:	69bb      	ldr	r3, [r7, #24]
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	68ba      	ldr	r2, [r7, #8]
 800d244:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d246:	2101      	movs	r1, #1
 800d248:	69b8      	ldr	r0, [r7, #24]
 800d24a:	f7ff fecb 	bl	800cfe4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d24e:	69bb      	ldr	r3, [r7, #24]
 800d250:	78fa      	ldrb	r2, [r7, #3]
 800d252:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d256:	bf00      	nop
 800d258:	3710      	adds	r7, #16
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b082      	sub	sp, #8
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00e      	beq.n	800d28a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2200      	movs	r2, #0
 800d270:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2200      	movs	r2, #0
 800d276:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2200      	movs	r2, #0
 800d27c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d27e:	2300      	movs	r3, #0
 800d280:	2200      	movs	r2, #0
 800d282:	2100      	movs	r1, #0
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 f90b 	bl	800d4a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d28a:	bf00      	nop
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d292:	b580      	push	{r7, lr}
 800d294:	b086      	sub	sp, #24
 800d296:	af00      	add	r7, sp, #0
 800d298:	4603      	mov	r3, r0
 800d29a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d29c:	2301      	movs	r3, #1
 800d29e:	617b      	str	r3, [r7, #20]
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d2a4:	79fb      	ldrb	r3, [r7, #7]
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	6939      	ldr	r1, [r7, #16]
 800d2aa:	6978      	ldr	r0, [r7, #20]
 800d2ac:	f7ff ff7a 	bl	800d1a4 <xQueueGenericCreate>
 800d2b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d2b2:	68f8      	ldr	r0, [r7, #12]
 800d2b4:	f7ff ffd3 	bl	800d25e <prvInitialiseMutex>

		return xNewQueue;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
	}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3718      	adds	r7, #24
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}

0800d2c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d2c2:	b580      	push	{r7, lr}
 800d2c4:	b088      	sub	sp, #32
 800d2c6:	af02      	add	r7, sp, #8
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	6039      	str	r1, [r7, #0]
 800d2cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	617b      	str	r3, [r7, #20]
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d2d6:	79fb      	ldrb	r3, [r7, #7]
 800d2d8:	9300      	str	r3, [sp, #0]
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	6939      	ldr	r1, [r7, #16]
 800d2e0:	6978      	ldr	r0, [r7, #20]
 800d2e2:	f7ff fee7 	bl	800d0b4 <xQueueGenericCreateStatic>
 800d2e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d2e8:	68f8      	ldr	r0, [r7, #12]
 800d2ea:	f7ff ffb8 	bl	800d25e <prvInitialiseMutex>

		return xNewQueue;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
	}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3718      	adds	r7, #24
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d2f8:	b590      	push	{r4, r7, lr}
 800d2fa:	b087      	sub	sp, #28
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d10a      	bne.n	800d320 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800d30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30e:	f383 8811 	msr	BASEPRI, r3
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	f3bf 8f4f 	dsb	sy
 800d31a:	60fb      	str	r3, [r7, #12]
}
 800d31c:	bf00      	nop
 800d31e:	e7fe      	b.n	800d31e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	689c      	ldr	r4, [r3, #8]
 800d324:	f001 fd40 	bl	800eda8 <xTaskGetCurrentTaskHandle>
 800d328:	4603      	mov	r3, r0
 800d32a:	429c      	cmp	r4, r3
 800d32c:	d111      	bne.n	800d352 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	1e5a      	subs	r2, r3, #1
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d105      	bne.n	800d34c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d340:	2300      	movs	r3, #0
 800d342:	2200      	movs	r2, #0
 800d344:	2100      	movs	r1, #0
 800d346:	6938      	ldr	r0, [r7, #16]
 800d348:	f000 f8aa 	bl	800d4a0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d34c:	2301      	movs	r3, #1
 800d34e:	617b      	str	r3, [r7, #20]
 800d350:	e001      	b.n	800d356 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d352:	2300      	movs	r3, #0
 800d354:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d356:	697b      	ldr	r3, [r7, #20]
	}
 800d358:	4618      	mov	r0, r3
 800d35a:	371c      	adds	r7, #28
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd90      	pop	{r4, r7, pc}

0800d360 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d360:	b590      	push	{r4, r7, lr}
 800d362:	b087      	sub	sp, #28
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d10a      	bne.n	800d38a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800d374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d378:	f383 8811 	msr	BASEPRI, r3
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	f3bf 8f4f 	dsb	sy
 800d384:	60fb      	str	r3, [r7, #12]
}
 800d386:	bf00      	nop
 800d388:	e7fe      	b.n	800d388 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	689c      	ldr	r4, [r3, #8]
 800d38e:	f001 fd0b 	bl	800eda8 <xTaskGetCurrentTaskHandle>
 800d392:	4603      	mov	r3, r0
 800d394:	429c      	cmp	r4, r3
 800d396:	d107      	bne.n	800d3a8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	1c5a      	adds	r2, r3, #1
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	617b      	str	r3, [r7, #20]
 800d3a6:	e00c      	b.n	800d3c2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d3a8:	6839      	ldr	r1, [r7, #0]
 800d3aa:	6938      	ldr	r0, [r7, #16]
 800d3ac:	f000 fb7e 	bl	800daac <xQueueSemaphoreTake>
 800d3b0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d004      	beq.n	800d3c2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	1c5a      	adds	r2, r3, #1
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d3c2:	697b      	ldr	r3, [r7, #20]
	}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	371c      	adds	r7, #28
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd90      	pop	{r4, r7, pc}

0800d3cc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b08a      	sub	sp, #40	; 0x28
 800d3d0:	af02      	add	r7, sp, #8
 800d3d2:	60f8      	str	r0, [r7, #12]
 800d3d4:	60b9      	str	r1, [r7, #8]
 800d3d6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10a      	bne.n	800d3f4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	61bb      	str	r3, [r7, #24]
}
 800d3f0:	bf00      	nop
 800d3f2:	e7fe      	b.n	800d3f2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d3f4:	68ba      	ldr	r2, [r7, #8]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d90a      	bls.n	800d412 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d400:	f383 8811 	msr	BASEPRI, r3
 800d404:	f3bf 8f6f 	isb	sy
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	617b      	str	r3, [r7, #20]
}
 800d40e:	bf00      	nop
 800d410:	e7fe      	b.n	800d410 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d412:	2302      	movs	r3, #2
 800d414:	9300      	str	r3, [sp, #0]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	2100      	movs	r1, #0
 800d41c:	68f8      	ldr	r0, [r7, #12]
 800d41e:	f7ff fe49 	bl	800d0b4 <xQueueGenericCreateStatic>
 800d422:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d424:	69fb      	ldr	r3, [r7, #28]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d002      	beq.n	800d430 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d42a:	69fb      	ldr	r3, [r7, #28]
 800d42c:	68ba      	ldr	r2, [r7, #8]
 800d42e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d430:	69fb      	ldr	r3, [r7, #28]
	}
 800d432:	4618      	mov	r0, r3
 800d434:	3720      	adds	r7, #32
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}

0800d43a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b086      	sub	sp, #24
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
 800d442:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d10a      	bne.n	800d460 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44e:	f383 8811 	msr	BASEPRI, r3
 800d452:	f3bf 8f6f 	isb	sy
 800d456:	f3bf 8f4f 	dsb	sy
 800d45a:	613b      	str	r3, [r7, #16]
}
 800d45c:	bf00      	nop
 800d45e:	e7fe      	b.n	800d45e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d460:	683a      	ldr	r2, [r7, #0]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	429a      	cmp	r2, r3
 800d466:	d90a      	bls.n	800d47e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	60fb      	str	r3, [r7, #12]
}
 800d47a:	bf00      	nop
 800d47c:	e7fe      	b.n	800d47c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d47e:	2202      	movs	r2, #2
 800d480:	2100      	movs	r1, #0
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f7ff fe8e 	bl	800d1a4 <xQueueGenericCreate>
 800d488:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d002      	beq.n	800d496 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	683a      	ldr	r2, [r7, #0]
 800d494:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d496:	697b      	ldr	r3, [r7, #20]
	}
 800d498:	4618      	mov	r0, r3
 800d49a:	3718      	adds	r7, #24
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b08e      	sub	sp, #56	; 0x38
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	607a      	str	r2, [r7, #4]
 800d4ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d10a      	bne.n	800d4d2 <xQueueGenericSend+0x32>
	__asm volatile
 800d4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c0:	f383 8811 	msr	BASEPRI, r3
 800d4c4:	f3bf 8f6f 	isb	sy
 800d4c8:	f3bf 8f4f 	dsb	sy
 800d4cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d4ce:	bf00      	nop
 800d4d0:	e7fe      	b.n	800d4d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d103      	bne.n	800d4e0 <xQueueGenericSend+0x40>
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d101      	bne.n	800d4e4 <xQueueGenericSend+0x44>
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	e000      	b.n	800d4e6 <xQueueGenericSend+0x46>
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10a      	bne.n	800d500 <xQueueGenericSend+0x60>
	__asm volatile
 800d4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ee:	f383 8811 	msr	BASEPRI, r3
 800d4f2:	f3bf 8f6f 	isb	sy
 800d4f6:	f3bf 8f4f 	dsb	sy
 800d4fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4fc:	bf00      	nop
 800d4fe:	e7fe      	b.n	800d4fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	2b02      	cmp	r3, #2
 800d504:	d103      	bne.n	800d50e <xQueueGenericSend+0x6e>
 800d506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d101      	bne.n	800d512 <xQueueGenericSend+0x72>
 800d50e:	2301      	movs	r3, #1
 800d510:	e000      	b.n	800d514 <xQueueGenericSend+0x74>
 800d512:	2300      	movs	r3, #0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d10a      	bne.n	800d52e <xQueueGenericSend+0x8e>
	__asm volatile
 800d518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51c:	f383 8811 	msr	BASEPRI, r3
 800d520:	f3bf 8f6f 	isb	sy
 800d524:	f3bf 8f4f 	dsb	sy
 800d528:	623b      	str	r3, [r7, #32]
}
 800d52a:	bf00      	nop
 800d52c:	e7fe      	b.n	800d52c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d52e:	f001 fc4b 	bl	800edc8 <xTaskGetSchedulerState>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d102      	bne.n	800d53e <xQueueGenericSend+0x9e>
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d101      	bne.n	800d542 <xQueueGenericSend+0xa2>
 800d53e:	2301      	movs	r3, #1
 800d540:	e000      	b.n	800d544 <xQueueGenericSend+0xa4>
 800d542:	2300      	movs	r3, #0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d10a      	bne.n	800d55e <xQueueGenericSend+0xbe>
	__asm volatile
 800d548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54c:	f383 8811 	msr	BASEPRI, r3
 800d550:	f3bf 8f6f 	isb	sy
 800d554:	f3bf 8f4f 	dsb	sy
 800d558:	61fb      	str	r3, [r7, #28]
}
 800d55a:	bf00      	nop
 800d55c:	e7fe      	b.n	800d55c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d55e:	f002 fb89 	bl	800fc74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d302      	bcc.n	800d574 <xQueueGenericSend+0xd4>
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	2b02      	cmp	r3, #2
 800d572:	d129      	bne.n	800d5c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d574:	683a      	ldr	r2, [r7, #0]
 800d576:	68b9      	ldr	r1, [r7, #8]
 800d578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d57a:	f000 fc5e 	bl	800de3a <prvCopyDataToQueue>
 800d57e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d584:	2b00      	cmp	r3, #0
 800d586:	d010      	beq.n	800d5aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58a:	3324      	adds	r3, #36	; 0x24
 800d58c:	4618      	mov	r0, r3
 800d58e:	f001 fa4d 	bl	800ea2c <xTaskRemoveFromEventList>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	d013      	beq.n	800d5c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d598:	4b3f      	ldr	r3, [pc, #252]	; (800d698 <xQueueGenericSend+0x1f8>)
 800d59a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d59e:	601a      	str	r2, [r3, #0]
 800d5a0:	f3bf 8f4f 	dsb	sy
 800d5a4:	f3bf 8f6f 	isb	sy
 800d5a8:	e00a      	b.n	800d5c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d007      	beq.n	800d5c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d5b0:	4b39      	ldr	r3, [pc, #228]	; (800d698 <xQueueGenericSend+0x1f8>)
 800d5b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5b6:	601a      	str	r2, [r3, #0]
 800d5b8:	f3bf 8f4f 	dsb	sy
 800d5bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d5c0:	f002 fb88 	bl	800fcd4 <vPortExitCritical>
				return pdPASS;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	e063      	b.n	800d690 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d103      	bne.n	800d5d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5ce:	f002 fb81 	bl	800fcd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	e05c      	b.n	800d690 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d106      	bne.n	800d5ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5dc:	f107 0314 	add.w	r3, r7, #20
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f001 fa87 	bl	800eaf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5ea:	f002 fb73 	bl	800fcd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5ee:	f000 fff9 	bl	800e5e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5f2:	f002 fb3f 	bl	800fc74 <vPortEnterCritical>
 800d5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5fc:	b25b      	sxtb	r3, r3
 800d5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d602:	d103      	bne.n	800d60c <xQueueGenericSend+0x16c>
 800d604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d606:	2200      	movs	r2, #0
 800d608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d612:	b25b      	sxtb	r3, r3
 800d614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d618:	d103      	bne.n	800d622 <xQueueGenericSend+0x182>
 800d61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61c:	2200      	movs	r2, #0
 800d61e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d622:	f002 fb57 	bl	800fcd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d626:	1d3a      	adds	r2, r7, #4
 800d628:	f107 0314 	add.w	r3, r7, #20
 800d62c:	4611      	mov	r1, r2
 800d62e:	4618      	mov	r0, r3
 800d630:	f001 fa76 	bl	800eb20 <xTaskCheckForTimeOut>
 800d634:	4603      	mov	r3, r0
 800d636:	2b00      	cmp	r3, #0
 800d638:	d124      	bne.n	800d684 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d63a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d63c:	f000 fcf5 	bl	800e02a <prvIsQueueFull>
 800d640:	4603      	mov	r3, r0
 800d642:	2b00      	cmp	r3, #0
 800d644:	d018      	beq.n	800d678 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d648:	3310      	adds	r3, #16
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	4611      	mov	r1, r2
 800d64e:	4618      	mov	r0, r3
 800d650:	f001 f99c 	bl	800e98c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d656:	f000 fc80 	bl	800df5a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d65a:	f000 ffd1 	bl	800e600 <xTaskResumeAll>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	f47f af7c 	bne.w	800d55e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d666:	4b0c      	ldr	r3, [pc, #48]	; (800d698 <xQueueGenericSend+0x1f8>)
 800d668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d66c:	601a      	str	r2, [r3, #0]
 800d66e:	f3bf 8f4f 	dsb	sy
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	e772      	b.n	800d55e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d67a:	f000 fc6e 	bl	800df5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d67e:	f000 ffbf 	bl	800e600 <xTaskResumeAll>
 800d682:	e76c      	b.n	800d55e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d686:	f000 fc68 	bl	800df5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d68a:	f000 ffb9 	bl	800e600 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d68e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d690:	4618      	mov	r0, r3
 800d692:	3738      	adds	r7, #56	; 0x38
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	e000ed04 	.word	0xe000ed04

0800d69c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b090      	sub	sp, #64	; 0x40
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	607a      	str	r2, [r7, #4]
 800d6a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d10a      	bne.n	800d6ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b8:	f383 8811 	msr	BASEPRI, r3
 800d6bc:	f3bf 8f6f 	isb	sy
 800d6c0:	f3bf 8f4f 	dsb	sy
 800d6c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d6c6:	bf00      	nop
 800d6c8:	e7fe      	b.n	800d6c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d103      	bne.n	800d6d8 <xQueueGenericSendFromISR+0x3c>
 800d6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d101      	bne.n	800d6dc <xQueueGenericSendFromISR+0x40>
 800d6d8:	2301      	movs	r3, #1
 800d6da:	e000      	b.n	800d6de <xQueueGenericSendFromISR+0x42>
 800d6dc:	2300      	movs	r3, #0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d10a      	bne.n	800d6f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e6:	f383 8811 	msr	BASEPRI, r3
 800d6ea:	f3bf 8f6f 	isb	sy
 800d6ee:	f3bf 8f4f 	dsb	sy
 800d6f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d6f4:	bf00      	nop
 800d6f6:	e7fe      	b.n	800d6f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d103      	bne.n	800d706 <xQueueGenericSendFromISR+0x6a>
 800d6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d702:	2b01      	cmp	r3, #1
 800d704:	d101      	bne.n	800d70a <xQueueGenericSendFromISR+0x6e>
 800d706:	2301      	movs	r3, #1
 800d708:	e000      	b.n	800d70c <xQueueGenericSendFromISR+0x70>
 800d70a:	2300      	movs	r3, #0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d10a      	bne.n	800d726 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d714:	f383 8811 	msr	BASEPRI, r3
 800d718:	f3bf 8f6f 	isb	sy
 800d71c:	f3bf 8f4f 	dsb	sy
 800d720:	623b      	str	r3, [r7, #32]
}
 800d722:	bf00      	nop
 800d724:	e7fe      	b.n	800d724 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d726:	f002 fb87 	bl	800fe38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d72a:	f3ef 8211 	mrs	r2, BASEPRI
 800d72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d732:	f383 8811 	msr	BASEPRI, r3
 800d736:	f3bf 8f6f 	isb	sy
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	61fa      	str	r2, [r7, #28]
 800d740:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d742:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d744:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d74e:	429a      	cmp	r2, r3
 800d750:	d302      	bcc.n	800d758 <xQueueGenericSendFromISR+0xbc>
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	2b02      	cmp	r3, #2
 800d756:	d12f      	bne.n	800d7b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d766:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d768:	683a      	ldr	r2, [r7, #0]
 800d76a:	68b9      	ldr	r1, [r7, #8]
 800d76c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d76e:	f000 fb64 	bl	800de3a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d772:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d77a:	d112      	bne.n	800d7a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d780:	2b00      	cmp	r3, #0
 800d782:	d016      	beq.n	800d7b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d786:	3324      	adds	r3, #36	; 0x24
 800d788:	4618      	mov	r0, r3
 800d78a:	f001 f94f 	bl	800ea2c <xTaskRemoveFromEventList>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d00e      	beq.n	800d7b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00b      	beq.n	800d7b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2201      	movs	r2, #1
 800d79e:	601a      	str	r2, [r3, #0]
 800d7a0:	e007      	b.n	800d7b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d7a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	b25a      	sxtb	r2, r3
 800d7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d7b6:	e001      	b.n	800d7bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d7c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3740      	adds	r7, #64	; 0x40
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b08e      	sub	sp, #56	; 0x38
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
 800d7da:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d10a      	bne.n	800d7fc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ea:	f383 8811 	msr	BASEPRI, r3
 800d7ee:	f3bf 8f6f 	isb	sy
 800d7f2:	f3bf 8f4f 	dsb	sy
 800d7f6:	623b      	str	r3, [r7, #32]
}
 800d7f8:	bf00      	nop
 800d7fa:	e7fe      	b.n	800d7fa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d800:	2b00      	cmp	r3, #0
 800d802:	d00a      	beq.n	800d81a <xQueueGiveFromISR+0x48>
	__asm volatile
 800d804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d808:	f383 8811 	msr	BASEPRI, r3
 800d80c:	f3bf 8f6f 	isb	sy
 800d810:	f3bf 8f4f 	dsb	sy
 800d814:	61fb      	str	r3, [r7, #28]
}
 800d816:	bf00      	nop
 800d818:	e7fe      	b.n	800d818 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d103      	bne.n	800d82a <xQueueGiveFromISR+0x58>
 800d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d824:	689b      	ldr	r3, [r3, #8]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d101      	bne.n	800d82e <xQueueGiveFromISR+0x5c>
 800d82a:	2301      	movs	r3, #1
 800d82c:	e000      	b.n	800d830 <xQueueGiveFromISR+0x5e>
 800d82e:	2300      	movs	r3, #0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10a      	bne.n	800d84a <xQueueGiveFromISR+0x78>
	__asm volatile
 800d834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d838:	f383 8811 	msr	BASEPRI, r3
 800d83c:	f3bf 8f6f 	isb	sy
 800d840:	f3bf 8f4f 	dsb	sy
 800d844:	61bb      	str	r3, [r7, #24]
}
 800d846:	bf00      	nop
 800d848:	e7fe      	b.n	800d848 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d84a:	f002 faf5 	bl	800fe38 <vPortValidateInterruptPriority>
	__asm volatile
 800d84e:	f3ef 8211 	mrs	r2, BASEPRI
 800d852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d856:	f383 8811 	msr	BASEPRI, r3
 800d85a:	f3bf 8f6f 	isb	sy
 800d85e:	f3bf 8f4f 	dsb	sy
 800d862:	617a      	str	r2, [r7, #20]
 800d864:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d866:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d868:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d86e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d876:	429a      	cmp	r2, r3
 800d878:	d22b      	bcs.n	800d8d2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d886:	1c5a      	adds	r2, r3, #1
 800d888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d88c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d894:	d112      	bne.n	800d8bc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d016      	beq.n	800d8cc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a0:	3324      	adds	r3, #36	; 0x24
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f001 f8c2 	bl	800ea2c <xTaskRemoveFromEventList>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d00e      	beq.n	800d8cc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d00b      	beq.n	800d8cc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	601a      	str	r2, [r3, #0]
 800d8ba:	e007      	b.n	800d8cc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d8bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	b25a      	sxtb	r2, r3
 800d8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	637b      	str	r3, [r7, #52]	; 0x34
 800d8d0:	e001      	b.n	800d8d6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	637b      	str	r3, [r7, #52]	; 0x34
 800d8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f383 8811 	msr	BASEPRI, r3
}
 800d8e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3738      	adds	r7, #56	; 0x38
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b08c      	sub	sp, #48	; 0x30
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d902:	2b00      	cmp	r3, #0
 800d904:	d10a      	bne.n	800d91c <xQueueReceive+0x30>
	__asm volatile
 800d906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90a:	f383 8811 	msr	BASEPRI, r3
 800d90e:	f3bf 8f6f 	isb	sy
 800d912:	f3bf 8f4f 	dsb	sy
 800d916:	623b      	str	r3, [r7, #32]
}
 800d918:	bf00      	nop
 800d91a:	e7fe      	b.n	800d91a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d103      	bne.n	800d92a <xQueueReceive+0x3e>
 800d922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d926:	2b00      	cmp	r3, #0
 800d928:	d101      	bne.n	800d92e <xQueueReceive+0x42>
 800d92a:	2301      	movs	r3, #1
 800d92c:	e000      	b.n	800d930 <xQueueReceive+0x44>
 800d92e:	2300      	movs	r3, #0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d10a      	bne.n	800d94a <xQueueReceive+0x5e>
	__asm volatile
 800d934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d938:	f383 8811 	msr	BASEPRI, r3
 800d93c:	f3bf 8f6f 	isb	sy
 800d940:	f3bf 8f4f 	dsb	sy
 800d944:	61fb      	str	r3, [r7, #28]
}
 800d946:	bf00      	nop
 800d948:	e7fe      	b.n	800d948 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d94a:	f001 fa3d 	bl	800edc8 <xTaskGetSchedulerState>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d102      	bne.n	800d95a <xQueueReceive+0x6e>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d101      	bne.n	800d95e <xQueueReceive+0x72>
 800d95a:	2301      	movs	r3, #1
 800d95c:	e000      	b.n	800d960 <xQueueReceive+0x74>
 800d95e:	2300      	movs	r3, #0
 800d960:	2b00      	cmp	r3, #0
 800d962:	d10a      	bne.n	800d97a <xQueueReceive+0x8e>
	__asm volatile
 800d964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d968:	f383 8811 	msr	BASEPRI, r3
 800d96c:	f3bf 8f6f 	isb	sy
 800d970:	f3bf 8f4f 	dsb	sy
 800d974:	61bb      	str	r3, [r7, #24]
}
 800d976:	bf00      	nop
 800d978:	e7fe      	b.n	800d978 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d97a:	f002 f97b 	bl	800fc74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d982:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d986:	2b00      	cmp	r3, #0
 800d988:	d01f      	beq.n	800d9ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d98a:	68b9      	ldr	r1, [r7, #8]
 800d98c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d98e:	f000 fabe 	bl	800df0e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d994:	1e5a      	subs	r2, r3, #1
 800d996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d998:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00f      	beq.n	800d9c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a4:	3310      	adds	r3, #16
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f001 f840 	bl	800ea2c <xTaskRemoveFromEventList>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d007      	beq.n	800d9c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d9b2:	4b3d      	ldr	r3, [pc, #244]	; (800daa8 <xQueueReceive+0x1bc>)
 800d9b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9b8:	601a      	str	r2, [r3, #0]
 800d9ba:	f3bf 8f4f 	dsb	sy
 800d9be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d9c2:	f002 f987 	bl	800fcd4 <vPortExitCritical>
				return pdPASS;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	e069      	b.n	800da9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d103      	bne.n	800d9d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9d0:	f002 f980 	bl	800fcd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	e062      	b.n	800da9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d106      	bne.n	800d9ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9de:	f107 0310 	add.w	r3, r7, #16
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f001 f886 	bl	800eaf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9ec:	f002 f972 	bl	800fcd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9f0:	f000 fdf8 	bl	800e5e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9f4:	f002 f93e 	bl	800fc74 <vPortEnterCritical>
 800d9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9fe:	b25b      	sxtb	r3, r3
 800da00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da04:	d103      	bne.n	800da0e <xQueueReceive+0x122>
 800da06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da08:	2200      	movs	r2, #0
 800da0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da14:	b25b      	sxtb	r3, r3
 800da16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da1a:	d103      	bne.n	800da24 <xQueueReceive+0x138>
 800da1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1e:	2200      	movs	r2, #0
 800da20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da24:	f002 f956 	bl	800fcd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da28:	1d3a      	adds	r2, r7, #4
 800da2a:	f107 0310 	add.w	r3, r7, #16
 800da2e:	4611      	mov	r1, r2
 800da30:	4618      	mov	r0, r3
 800da32:	f001 f875 	bl	800eb20 <xTaskCheckForTimeOut>
 800da36:	4603      	mov	r3, r0
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d123      	bne.n	800da84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da3e:	f000 fade 	bl	800dffe <prvIsQueueEmpty>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d017      	beq.n	800da78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da4a:	3324      	adds	r3, #36	; 0x24
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	4611      	mov	r1, r2
 800da50:	4618      	mov	r0, r3
 800da52:	f000 ff9b 	bl	800e98c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da58:	f000 fa7f 	bl	800df5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da5c:	f000 fdd0 	bl	800e600 <xTaskResumeAll>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	d189      	bne.n	800d97a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800da66:	4b10      	ldr	r3, [pc, #64]	; (800daa8 <xQueueReceive+0x1bc>)
 800da68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da6c:	601a      	str	r2, [r3, #0]
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	e780      	b.n	800d97a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800da78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da7a:	f000 fa6e 	bl	800df5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da7e:	f000 fdbf 	bl	800e600 <xTaskResumeAll>
 800da82:	e77a      	b.n	800d97a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800da84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da86:	f000 fa68 	bl	800df5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da8a:	f000 fdb9 	bl	800e600 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da90:	f000 fab5 	bl	800dffe <prvIsQueueEmpty>
 800da94:	4603      	mov	r3, r0
 800da96:	2b00      	cmp	r3, #0
 800da98:	f43f af6f 	beq.w	800d97a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3730      	adds	r7, #48	; 0x30
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	e000ed04 	.word	0xe000ed04

0800daac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b08e      	sub	sp, #56	; 0x38
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dab6:	2300      	movs	r3, #0
 800dab8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dabe:	2300      	movs	r3, #0
 800dac0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d10a      	bne.n	800dade <xQueueSemaphoreTake+0x32>
	__asm volatile
 800dac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dacc:	f383 8811 	msr	BASEPRI, r3
 800dad0:	f3bf 8f6f 	isb	sy
 800dad4:	f3bf 8f4f 	dsb	sy
 800dad8:	623b      	str	r3, [r7, #32]
}
 800dada:	bf00      	nop
 800dadc:	e7fe      	b.n	800dadc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00a      	beq.n	800dafc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800dae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daea:	f383 8811 	msr	BASEPRI, r3
 800daee:	f3bf 8f6f 	isb	sy
 800daf2:	f3bf 8f4f 	dsb	sy
 800daf6:	61fb      	str	r3, [r7, #28]
}
 800daf8:	bf00      	nop
 800dafa:	e7fe      	b.n	800dafa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dafc:	f001 f964 	bl	800edc8 <xTaskGetSchedulerState>
 800db00:	4603      	mov	r3, r0
 800db02:	2b00      	cmp	r3, #0
 800db04:	d102      	bne.n	800db0c <xQueueSemaphoreTake+0x60>
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d101      	bne.n	800db10 <xQueueSemaphoreTake+0x64>
 800db0c:	2301      	movs	r3, #1
 800db0e:	e000      	b.n	800db12 <xQueueSemaphoreTake+0x66>
 800db10:	2300      	movs	r3, #0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d10a      	bne.n	800db2c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800db16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1a:	f383 8811 	msr	BASEPRI, r3
 800db1e:	f3bf 8f6f 	isb	sy
 800db22:	f3bf 8f4f 	dsb	sy
 800db26:	61bb      	str	r3, [r7, #24]
}
 800db28:	bf00      	nop
 800db2a:	e7fe      	b.n	800db2a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db2c:	f002 f8a2 	bl	800fc74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800db30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db34:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800db36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d024      	beq.n	800db86 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800db3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3e:	1e5a      	subs	r2, r3, #1
 800db40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db42:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d104      	bne.n	800db56 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800db4c:	f001 fab2 	bl	800f0b4 <pvTaskIncrementMutexHeldCount>
 800db50:	4602      	mov	r2, r0
 800db52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db54:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db58:	691b      	ldr	r3, [r3, #16]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d00f      	beq.n	800db7e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db60:	3310      	adds	r3, #16
 800db62:	4618      	mov	r0, r3
 800db64:	f000 ff62 	bl	800ea2c <xTaskRemoveFromEventList>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d007      	beq.n	800db7e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800db6e:	4b54      	ldr	r3, [pc, #336]	; (800dcc0 <xQueueSemaphoreTake+0x214>)
 800db70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db74:	601a      	str	r2, [r3, #0]
 800db76:	f3bf 8f4f 	dsb	sy
 800db7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800db7e:	f002 f8a9 	bl	800fcd4 <vPortExitCritical>
				return pdPASS;
 800db82:	2301      	movs	r3, #1
 800db84:	e097      	b.n	800dcb6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d111      	bne.n	800dbb0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800db8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d00a      	beq.n	800dba8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800db92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db96:	f383 8811 	msr	BASEPRI, r3
 800db9a:	f3bf 8f6f 	isb	sy
 800db9e:	f3bf 8f4f 	dsb	sy
 800dba2:	617b      	str	r3, [r7, #20]
}
 800dba4:	bf00      	nop
 800dba6:	e7fe      	b.n	800dba6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dba8:	f002 f894 	bl	800fcd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dbac:	2300      	movs	r3, #0
 800dbae:	e082      	b.n	800dcb6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d106      	bne.n	800dbc4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dbb6:	f107 030c 	add.w	r3, r7, #12
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f000 ff9a 	bl	800eaf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dbc4:	f002 f886 	bl	800fcd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dbc8:	f000 fd0c 	bl	800e5e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dbcc:	f002 f852 	bl	800fc74 <vPortEnterCritical>
 800dbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbd6:	b25b      	sxtb	r3, r3
 800dbd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbdc:	d103      	bne.n	800dbe6 <xQueueSemaphoreTake+0x13a>
 800dbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbec:	b25b      	sxtb	r3, r3
 800dbee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbf2:	d103      	bne.n	800dbfc <xQueueSemaphoreTake+0x150>
 800dbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbfc:	f002 f86a 	bl	800fcd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc00:	463a      	mov	r2, r7
 800dc02:	f107 030c 	add.w	r3, r7, #12
 800dc06:	4611      	mov	r1, r2
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f000 ff89 	bl	800eb20 <xTaskCheckForTimeOut>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d132      	bne.n	800dc7a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc16:	f000 f9f2 	bl	800dffe <prvIsQueueEmpty>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d026      	beq.n	800dc6e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d109      	bne.n	800dc3c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800dc28:	f002 f824 	bl	800fc74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc2e:	689b      	ldr	r3, [r3, #8]
 800dc30:	4618      	mov	r0, r3
 800dc32:	f001 f8e7 	bl	800ee04 <xTaskPriorityInherit>
 800dc36:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800dc38:	f002 f84c 	bl	800fcd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3e:	3324      	adds	r3, #36	; 0x24
 800dc40:	683a      	ldr	r2, [r7, #0]
 800dc42:	4611      	mov	r1, r2
 800dc44:	4618      	mov	r0, r3
 800dc46:	f000 fea1 	bl	800e98c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc4c:	f000 f985 	bl	800df5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc50:	f000 fcd6 	bl	800e600 <xTaskResumeAll>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	f47f af68 	bne.w	800db2c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800dc5c:	4b18      	ldr	r3, [pc, #96]	; (800dcc0 <xQueueSemaphoreTake+0x214>)
 800dc5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc62:	601a      	str	r2, [r3, #0]
 800dc64:	f3bf 8f4f 	dsb	sy
 800dc68:	f3bf 8f6f 	isb	sy
 800dc6c:	e75e      	b.n	800db2c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dc6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc70:	f000 f973 	bl	800df5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc74:	f000 fcc4 	bl	800e600 <xTaskResumeAll>
 800dc78:	e758      	b.n	800db2c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dc7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc7c:	f000 f96d 	bl	800df5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc80:	f000 fcbe 	bl	800e600 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc86:	f000 f9ba 	bl	800dffe <prvIsQueueEmpty>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f43f af4d 	beq.w	800db2c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d00d      	beq.n	800dcb4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800dc98:	f001 ffec 	bl	800fc74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dc9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc9e:	f000 f8b4 	bl	800de0a <prvGetDisinheritPriorityAfterTimeout>
 800dca2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca6:	689b      	ldr	r3, [r3, #8]
 800dca8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f001 f980 	bl	800efb0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dcb0:	f002 f810 	bl	800fcd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dcb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3738      	adds	r7, #56	; 0x38
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	e000ed04 	.word	0xe000ed04

0800dcc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b08e      	sub	sp, #56	; 0x38
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d10a      	bne.n	800dcf0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800dcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcde:	f383 8811 	msr	BASEPRI, r3
 800dce2:	f3bf 8f6f 	isb	sy
 800dce6:	f3bf 8f4f 	dsb	sy
 800dcea:	623b      	str	r3, [r7, #32]
}
 800dcec:	bf00      	nop
 800dcee:	e7fe      	b.n	800dcee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d103      	bne.n	800dcfe <xQueueReceiveFromISR+0x3a>
 800dcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d101      	bne.n	800dd02 <xQueueReceiveFromISR+0x3e>
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e000      	b.n	800dd04 <xQueueReceiveFromISR+0x40>
 800dd02:	2300      	movs	r3, #0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d10a      	bne.n	800dd1e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800dd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0c:	f383 8811 	msr	BASEPRI, r3
 800dd10:	f3bf 8f6f 	isb	sy
 800dd14:	f3bf 8f4f 	dsb	sy
 800dd18:	61fb      	str	r3, [r7, #28]
}
 800dd1a:	bf00      	nop
 800dd1c:	e7fe      	b.n	800dd1c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd1e:	f002 f88b 	bl	800fe38 <vPortValidateInterruptPriority>
	__asm volatile
 800dd22:	f3ef 8211 	mrs	r2, BASEPRI
 800dd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2a:	f383 8811 	msr	BASEPRI, r3
 800dd2e:	f3bf 8f6f 	isb	sy
 800dd32:	f3bf 8f4f 	dsb	sy
 800dd36:	61ba      	str	r2, [r7, #24]
 800dd38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dd3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d02f      	beq.n	800ddaa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd54:	68b9      	ldr	r1, [r7, #8]
 800dd56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd58:	f000 f8d9 	bl	800df0e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5e:	1e5a      	subs	r2, r3, #1
 800dd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dd64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dd68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd6c:	d112      	bne.n	800dd94 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd70:	691b      	ldr	r3, [r3, #16]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d016      	beq.n	800dda4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd78:	3310      	adds	r3, #16
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f000 fe56 	bl	800ea2c <xTaskRemoveFromEventList>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d00e      	beq.n	800dda4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00b      	beq.n	800dda4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2201      	movs	r2, #1
 800dd90:	601a      	str	r2, [r3, #0]
 800dd92:	e007      	b.n	800dda4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dd94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd98:	3301      	adds	r3, #1
 800dd9a:	b2db      	uxtb	r3, r3
 800dd9c:	b25a      	sxtb	r2, r3
 800dd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dda4:	2301      	movs	r3, #1
 800dda6:	637b      	str	r3, [r7, #52]	; 0x34
 800dda8:	e001      	b.n	800ddae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	637b      	str	r3, [r7, #52]	; 0x34
 800ddae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	f383 8811 	msr	BASEPRI, r3
}
 800ddb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ddba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3738      	adds	r7, #56	; 0x38
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d10a      	bne.n	800ddec <vQueueDelete+0x28>
	__asm volatile
 800ddd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddda:	f383 8811 	msr	BASEPRI, r3
 800ddde:	f3bf 8f6f 	isb	sy
 800dde2:	f3bf 8f4f 	dsb	sy
 800dde6:	60bb      	str	r3, [r7, #8]
}
 800dde8:	bf00      	nop
 800ddea:	e7fe      	b.n	800ddea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	f000 f95f 	bl	800e0b0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d102      	bne.n	800de02 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ddfc:	68f8      	ldr	r0, [r7, #12]
 800ddfe:	f002 f927 	bl	8010050 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800de02:	bf00      	nop
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}

0800de0a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800de0a:	b480      	push	{r7}
 800de0c:	b085      	sub	sp, #20
 800de0e:	af00      	add	r7, sp, #0
 800de10:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de16:	2b00      	cmp	r3, #0
 800de18:	d006      	beq.n	800de28 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800de24:	60fb      	str	r3, [r7, #12]
 800de26:	e001      	b.n	800de2c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800de28:	2300      	movs	r3, #0
 800de2a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800de2c:	68fb      	ldr	r3, [r7, #12]
	}
 800de2e:	4618      	mov	r0, r3
 800de30:	3714      	adds	r7, #20
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr

0800de3a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b086      	sub	sp, #24
 800de3e:	af00      	add	r7, sp, #0
 800de40:	60f8      	str	r0, [r7, #12]
 800de42:	60b9      	str	r1, [r7, #8]
 800de44:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800de46:	2300      	movs	r3, #0
 800de48:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de4e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de54:	2b00      	cmp	r3, #0
 800de56:	d10d      	bne.n	800de74 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d14d      	bne.n	800defc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	4618      	mov	r0, r3
 800de66:	f001 f835 	bl	800eed4 <xTaskPriorityDisinherit>
 800de6a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2200      	movs	r2, #0
 800de70:	609a      	str	r2, [r3, #8]
 800de72:	e043      	b.n	800defc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d119      	bne.n	800deae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	6858      	ldr	r0, [r3, #4]
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de82:	461a      	mov	r2, r3
 800de84:	68b9      	ldr	r1, [r7, #8]
 800de86:	f002 fa2f 	bl	80102e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	685a      	ldr	r2, [r3, #4]
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de92:	441a      	add	r2, r3
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	685a      	ldr	r2, [r3, #4]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d32b      	bcc.n	800defc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	605a      	str	r2, [r3, #4]
 800deac:	e026      	b.n	800defc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	68d8      	ldr	r0, [r3, #12]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb6:	461a      	mov	r2, r3
 800deb8:	68b9      	ldr	r1, [r7, #8]
 800deba:	f002 fa15 	bl	80102e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	68da      	ldr	r2, [r3, #12]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec6:	425b      	negs	r3, r3
 800dec8:	441a      	add	r2, r3
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	68da      	ldr	r2, [r3, #12]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d207      	bcs.n	800deea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	689a      	ldr	r2, [r3, #8]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dee2:	425b      	negs	r3, r3
 800dee4:	441a      	add	r2, r3
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2b02      	cmp	r3, #2
 800deee:	d105      	bne.n	800defc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d002      	beq.n	800defc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	3b01      	subs	r3, #1
 800defa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	1c5a      	adds	r2, r3, #1
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800df04:	697b      	ldr	r3, [r7, #20]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3718      	adds	r7, #24
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b082      	sub	sp, #8
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
 800df16:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d018      	beq.n	800df52 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	68da      	ldr	r2, [r3, #12]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df28:	441a      	add	r2, r3
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	68da      	ldr	r2, [r3, #12]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	689b      	ldr	r3, [r3, #8]
 800df36:	429a      	cmp	r2, r3
 800df38:	d303      	bcc.n	800df42 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	68d9      	ldr	r1, [r3, #12]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df4a:	461a      	mov	r2, r3
 800df4c:	6838      	ldr	r0, [r7, #0]
 800df4e:	f002 f9cb 	bl	80102e8 <memcpy>
	}
}
 800df52:	bf00      	nop
 800df54:	3708      	adds	r7, #8
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b084      	sub	sp, #16
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800df62:	f001 fe87 	bl	800fc74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df6c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df6e:	e011      	b.n	800df94 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df74:	2b00      	cmp	r3, #0
 800df76:	d012      	beq.n	800df9e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	3324      	adds	r3, #36	; 0x24
 800df7c:	4618      	mov	r0, r3
 800df7e:	f000 fd55 	bl	800ea2c <xTaskRemoveFromEventList>
 800df82:	4603      	mov	r3, r0
 800df84:	2b00      	cmp	r3, #0
 800df86:	d001      	beq.n	800df8c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800df88:	f000 fe2c 	bl	800ebe4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800df8c:	7bfb      	ldrb	r3, [r7, #15]
 800df8e:	3b01      	subs	r3, #1
 800df90:	b2db      	uxtb	r3, r3
 800df92:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	dce9      	bgt.n	800df70 <prvUnlockQueue+0x16>
 800df9c:	e000      	b.n	800dfa0 <prvUnlockQueue+0x46>
					break;
 800df9e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	22ff      	movs	r2, #255	; 0xff
 800dfa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dfa8:	f001 fe94 	bl	800fcd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dfac:	f001 fe62 	bl	800fc74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfb6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dfb8:	e011      	b.n	800dfde <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	691b      	ldr	r3, [r3, #16]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d012      	beq.n	800dfe8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	3310      	adds	r3, #16
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f000 fd30 	bl	800ea2c <xTaskRemoveFromEventList>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d001      	beq.n	800dfd6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dfd2:	f000 fe07 	bl	800ebe4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dfd6:	7bbb      	ldrb	r3, [r7, #14]
 800dfd8:	3b01      	subs	r3, #1
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dfde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	dce9      	bgt.n	800dfba <prvUnlockQueue+0x60>
 800dfe6:	e000      	b.n	800dfea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dfe8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	22ff      	movs	r2, #255	; 0xff
 800dfee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dff2:	f001 fe6f 	bl	800fcd4 <vPortExitCritical>
}
 800dff6:	bf00      	nop
 800dff8:	3710      	adds	r7, #16
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}

0800dffe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dffe:	b580      	push	{r7, lr}
 800e000:	b084      	sub	sp, #16
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e006:	f001 fe35 	bl	800fc74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d102      	bne.n	800e018 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e012:	2301      	movs	r3, #1
 800e014:	60fb      	str	r3, [r7, #12]
 800e016:	e001      	b.n	800e01c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e018:	2300      	movs	r3, #0
 800e01a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e01c:	f001 fe5a 	bl	800fcd4 <vPortExitCritical>

	return xReturn;
 800e020:	68fb      	ldr	r3, [r7, #12]
}
 800e022:	4618      	mov	r0, r3
 800e024:	3710      	adds	r7, #16
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b084      	sub	sp, #16
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e032:	f001 fe1f 	bl	800fc74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e03e:	429a      	cmp	r2, r3
 800e040:	d102      	bne.n	800e048 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e042:	2301      	movs	r3, #1
 800e044:	60fb      	str	r3, [r7, #12]
 800e046:	e001      	b.n	800e04c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e048:	2300      	movs	r3, #0
 800e04a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e04c:	f001 fe42 	bl	800fcd4 <vPortExitCritical>

	return xReturn;
 800e050:	68fb      	ldr	r3, [r7, #12]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
	...

0800e05c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e05c:	b480      	push	{r7}
 800e05e:	b085      	sub	sp, #20
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e066:	2300      	movs	r3, #0
 800e068:	60fb      	str	r3, [r7, #12]
 800e06a:	e014      	b.n	800e096 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e06c:	4a0f      	ldr	r2, [pc, #60]	; (800e0ac <vQueueAddToRegistry+0x50>)
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d10b      	bne.n	800e090 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e078:	490c      	ldr	r1, [pc, #48]	; (800e0ac <vQueueAddToRegistry+0x50>)
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	683a      	ldr	r2, [r7, #0]
 800e07e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e082:	4a0a      	ldr	r2, [pc, #40]	; (800e0ac <vQueueAddToRegistry+0x50>)
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	00db      	lsls	r3, r3, #3
 800e088:	4413      	add	r3, r2
 800e08a:	687a      	ldr	r2, [r7, #4]
 800e08c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e08e:	e006      	b.n	800e09e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	3301      	adds	r3, #1
 800e094:	60fb      	str	r3, [r7, #12]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2b07      	cmp	r3, #7
 800e09a:	d9e7      	bls.n	800e06c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e09c:	bf00      	nop
 800e09e:	bf00      	nop
 800e0a0:	3714      	adds	r7, #20
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a8:	4770      	bx	lr
 800e0aa:	bf00      	nop
 800e0ac:	20009408 	.word	0x20009408

0800e0b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b085      	sub	sp, #20
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	60fb      	str	r3, [r7, #12]
 800e0bc:	e016      	b.n	800e0ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e0be:	4a10      	ldr	r2, [pc, #64]	; (800e100 <vQueueUnregisterQueue+0x50>)
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	00db      	lsls	r3, r3, #3
 800e0c4:	4413      	add	r3, r2
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d10b      	bne.n	800e0e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e0ce:	4a0c      	ldr	r2, [pc, #48]	; (800e100 <vQueueUnregisterQueue+0x50>)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2100      	movs	r1, #0
 800e0d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e0d8:	4a09      	ldr	r2, [pc, #36]	; (800e100 <vQueueUnregisterQueue+0x50>)
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	00db      	lsls	r3, r3, #3
 800e0de:	4413      	add	r3, r2
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	605a      	str	r2, [r3, #4]
				break;
 800e0e4:	e006      	b.n	800e0f4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	60fb      	str	r3, [r7, #12]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	2b07      	cmp	r3, #7
 800e0f0:	d9e5      	bls.n	800e0be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e0f2:	bf00      	nop
 800e0f4:	bf00      	nop
 800e0f6:	3714      	adds	r7, #20
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr
 800e100:	20009408 	.word	0x20009408

0800e104 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af00      	add	r7, sp, #0
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e114:	f001 fdae 	bl	800fc74 <vPortEnterCritical>
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e11e:	b25b      	sxtb	r3, r3
 800e120:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e124:	d103      	bne.n	800e12e <vQueueWaitForMessageRestricted+0x2a>
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	2200      	movs	r2, #0
 800e12a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e134:	b25b      	sxtb	r3, r3
 800e136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e13a:	d103      	bne.n	800e144 <vQueueWaitForMessageRestricted+0x40>
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	2200      	movs	r2, #0
 800e140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e144:	f001 fdc6 	bl	800fcd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d106      	bne.n	800e15e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	3324      	adds	r3, #36	; 0x24
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	68b9      	ldr	r1, [r7, #8]
 800e158:	4618      	mov	r0, r3
 800e15a:	f000 fc3b 	bl	800e9d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e15e:	6978      	ldr	r0, [r7, #20]
 800e160:	f7ff fefb 	bl	800df5a <prvUnlockQueue>
	}
 800e164:	bf00      	nop
 800e166:	3718      	adds	r7, #24
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b08e      	sub	sp, #56	; 0x38
 800e170:	af04      	add	r7, sp, #16
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	607a      	str	r2, [r7, #4]
 800e178:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d10a      	bne.n	800e196 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e184:	f383 8811 	msr	BASEPRI, r3
 800e188:	f3bf 8f6f 	isb	sy
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	623b      	str	r3, [r7, #32]
}
 800e192:	bf00      	nop
 800e194:	e7fe      	b.n	800e194 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d10a      	bne.n	800e1b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800e19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a0:	f383 8811 	msr	BASEPRI, r3
 800e1a4:	f3bf 8f6f 	isb	sy
 800e1a8:	f3bf 8f4f 	dsb	sy
 800e1ac:	61fb      	str	r3, [r7, #28]
}
 800e1ae:	bf00      	nop
 800e1b0:	e7fe      	b.n	800e1b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e1b2:	235c      	movs	r3, #92	; 0x5c
 800e1b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	2b5c      	cmp	r3, #92	; 0x5c
 800e1ba:	d00a      	beq.n	800e1d2 <xTaskCreateStatic+0x66>
	__asm volatile
 800e1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c0:	f383 8811 	msr	BASEPRI, r3
 800e1c4:	f3bf 8f6f 	isb	sy
 800e1c8:	f3bf 8f4f 	dsb	sy
 800e1cc:	61bb      	str	r3, [r7, #24]
}
 800e1ce:	bf00      	nop
 800e1d0:	e7fe      	b.n	800e1d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e1d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d01e      	beq.n	800e218 <xTaskCreateStatic+0xac>
 800e1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d01b      	beq.n	800e218 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ec:	2202      	movs	r2, #2
 800e1ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	9303      	str	r3, [sp, #12]
 800e1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f8:	9302      	str	r3, [sp, #8]
 800e1fa:	f107 0314 	add.w	r3, r7, #20
 800e1fe:	9301      	str	r3, [sp, #4]
 800e200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	68b9      	ldr	r1, [r7, #8]
 800e20a:	68f8      	ldr	r0, [r7, #12]
 800e20c:	f000 f850 	bl	800e2b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e212:	f000 f8dd 	bl	800e3d0 <prvAddNewTaskToReadyList>
 800e216:	e001      	b.n	800e21c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e218:	2300      	movs	r3, #0
 800e21a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e21c:	697b      	ldr	r3, [r7, #20]
	}
 800e21e:	4618      	mov	r0, r3
 800e220:	3728      	adds	r7, #40	; 0x28
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}

0800e226 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e226:	b580      	push	{r7, lr}
 800e228:	b08c      	sub	sp, #48	; 0x30
 800e22a:	af04      	add	r7, sp, #16
 800e22c:	60f8      	str	r0, [r7, #12]
 800e22e:	60b9      	str	r1, [r7, #8]
 800e230:	603b      	str	r3, [r7, #0]
 800e232:	4613      	mov	r3, r2
 800e234:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e236:	88fb      	ldrh	r3, [r7, #6]
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	4618      	mov	r0, r3
 800e23c:	f001 fe3c 	bl	800feb8 <pvPortMalloc>
 800e240:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00e      	beq.n	800e266 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e248:	205c      	movs	r0, #92	; 0x5c
 800e24a:	f001 fe35 	bl	800feb8 <pvPortMalloc>
 800e24e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d003      	beq.n	800e25e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	697a      	ldr	r2, [r7, #20]
 800e25a:	631a      	str	r2, [r3, #48]	; 0x30
 800e25c:	e005      	b.n	800e26a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e25e:	6978      	ldr	r0, [r7, #20]
 800e260:	f001 fef6 	bl	8010050 <vPortFree>
 800e264:	e001      	b.n	800e26a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e266:	2300      	movs	r3, #0
 800e268:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e26a:	69fb      	ldr	r3, [r7, #28]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d017      	beq.n	800e2a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	2200      	movs	r2, #0
 800e274:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e278:	88fa      	ldrh	r2, [r7, #6]
 800e27a:	2300      	movs	r3, #0
 800e27c:	9303      	str	r3, [sp, #12]
 800e27e:	69fb      	ldr	r3, [r7, #28]
 800e280:	9302      	str	r3, [sp, #8]
 800e282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e284:	9301      	str	r3, [sp, #4]
 800e286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e288:	9300      	str	r3, [sp, #0]
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	68b9      	ldr	r1, [r7, #8]
 800e28e:	68f8      	ldr	r0, [r7, #12]
 800e290:	f000 f80e 	bl	800e2b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e294:	69f8      	ldr	r0, [r7, #28]
 800e296:	f000 f89b 	bl	800e3d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e29a:	2301      	movs	r3, #1
 800e29c:	61bb      	str	r3, [r7, #24]
 800e29e:	e002      	b.n	800e2a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e2a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e2a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e2a6:	69bb      	ldr	r3, [r7, #24]
	}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3720      	adds	r7, #32
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b088      	sub	sp, #32
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	607a      	str	r2, [r7, #4]
 800e2bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	21a5      	movs	r1, #165	; 0xa5
 800e2ca:	f002 f81b 	bl	8010304 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4413      	add	r3, r2
 800e2de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e2e0:	69bb      	ldr	r3, [r7, #24]
 800e2e2:	f023 0307 	bic.w	r3, r3, #7
 800e2e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e2e8:	69bb      	ldr	r3, [r7, #24]
 800e2ea:	f003 0307 	and.w	r3, r3, #7
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d00a      	beq.n	800e308 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f6:	f383 8811 	msr	BASEPRI, r3
 800e2fa:	f3bf 8f6f 	isb	sy
 800e2fe:	f3bf 8f4f 	dsb	sy
 800e302:	617b      	str	r3, [r7, #20]
}
 800e304:	bf00      	nop
 800e306:	e7fe      	b.n	800e306 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d01f      	beq.n	800e34e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e30e:	2300      	movs	r3, #0
 800e310:	61fb      	str	r3, [r7, #28]
 800e312:	e012      	b.n	800e33a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e314:	68ba      	ldr	r2, [r7, #8]
 800e316:	69fb      	ldr	r3, [r7, #28]
 800e318:	4413      	add	r3, r2
 800e31a:	7819      	ldrb	r1, [r3, #0]
 800e31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e31e:	69fb      	ldr	r3, [r7, #28]
 800e320:	4413      	add	r3, r2
 800e322:	3334      	adds	r3, #52	; 0x34
 800e324:	460a      	mov	r2, r1
 800e326:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e328:	68ba      	ldr	r2, [r7, #8]
 800e32a:	69fb      	ldr	r3, [r7, #28]
 800e32c:	4413      	add	r3, r2
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d006      	beq.n	800e342 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	3301      	adds	r3, #1
 800e338:	61fb      	str	r3, [r7, #28]
 800e33a:	69fb      	ldr	r3, [r7, #28]
 800e33c:	2b0f      	cmp	r3, #15
 800e33e:	d9e9      	bls.n	800e314 <prvInitialiseNewTask+0x64>
 800e340:	e000      	b.n	800e344 <prvInitialiseNewTask+0x94>
			{
				break;
 800e342:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e346:	2200      	movs	r2, #0
 800e348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e34c:	e003      	b.n	800e356 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e350:	2200      	movs	r2, #0
 800e352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e358:	2b37      	cmp	r3, #55	; 0x37
 800e35a:	d901      	bls.n	800e360 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e35c:	2337      	movs	r3, #55	; 0x37
 800e35e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e364:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e36a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36e:	2200      	movs	r2, #0
 800e370:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e374:	3304      	adds	r3, #4
 800e376:	4618      	mov	r0, r3
 800e378:	f7fe fda0 	bl	800cebc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e37e:	3318      	adds	r3, #24
 800e380:	4618      	mov	r0, r3
 800e382:	f7fe fd9b 	bl	800cebc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e38a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e394:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e39a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39e:	2200      	movs	r2, #0
 800e3a0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e3aa:	683a      	ldr	r2, [r7, #0]
 800e3ac:	68f9      	ldr	r1, [r7, #12]
 800e3ae:	69b8      	ldr	r0, [r7, #24]
 800e3b0:	f001 fb36 	bl	800fa20 <pxPortInitialiseStack>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d002      	beq.n	800e3c6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3c6:	bf00      	nop
 800e3c8:	3720      	adds	r7, #32
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
	...

0800e3d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e3d8:	f001 fc4c 	bl	800fc74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e3dc:	4b2d      	ldr	r3, [pc, #180]	; (800e494 <prvAddNewTaskToReadyList+0xc4>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	4a2c      	ldr	r2, [pc, #176]	; (800e494 <prvAddNewTaskToReadyList+0xc4>)
 800e3e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e3e6:	4b2c      	ldr	r3, [pc, #176]	; (800e498 <prvAddNewTaskToReadyList+0xc8>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d109      	bne.n	800e402 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e3ee:	4a2a      	ldr	r2, [pc, #168]	; (800e498 <prvAddNewTaskToReadyList+0xc8>)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e3f4:	4b27      	ldr	r3, [pc, #156]	; (800e494 <prvAddNewTaskToReadyList+0xc4>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d110      	bne.n	800e41e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e3fc:	f000 fc16 	bl	800ec2c <prvInitialiseTaskLists>
 800e400:	e00d      	b.n	800e41e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e402:	4b26      	ldr	r3, [pc, #152]	; (800e49c <prvAddNewTaskToReadyList+0xcc>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d109      	bne.n	800e41e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e40a:	4b23      	ldr	r3, [pc, #140]	; (800e498 <prvAddNewTaskToReadyList+0xc8>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e414:	429a      	cmp	r2, r3
 800e416:	d802      	bhi.n	800e41e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e418:	4a1f      	ldr	r2, [pc, #124]	; (800e498 <prvAddNewTaskToReadyList+0xc8>)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e41e:	4b20      	ldr	r3, [pc, #128]	; (800e4a0 <prvAddNewTaskToReadyList+0xd0>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	3301      	adds	r3, #1
 800e424:	4a1e      	ldr	r2, [pc, #120]	; (800e4a0 <prvAddNewTaskToReadyList+0xd0>)
 800e426:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e428:	4b1d      	ldr	r3, [pc, #116]	; (800e4a0 <prvAddNewTaskToReadyList+0xd0>)
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e434:	4b1b      	ldr	r3, [pc, #108]	; (800e4a4 <prvAddNewTaskToReadyList+0xd4>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d903      	bls.n	800e444 <prvAddNewTaskToReadyList+0x74>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e440:	4a18      	ldr	r2, [pc, #96]	; (800e4a4 <prvAddNewTaskToReadyList+0xd4>)
 800e442:	6013      	str	r3, [r2, #0]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e448:	4613      	mov	r3, r2
 800e44a:	009b      	lsls	r3, r3, #2
 800e44c:	4413      	add	r3, r2
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	4a15      	ldr	r2, [pc, #84]	; (800e4a8 <prvAddNewTaskToReadyList+0xd8>)
 800e452:	441a      	add	r2, r3
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	3304      	adds	r3, #4
 800e458:	4619      	mov	r1, r3
 800e45a:	4610      	mov	r0, r2
 800e45c:	f7fe fd3b 	bl	800ced6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e460:	f001 fc38 	bl	800fcd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e464:	4b0d      	ldr	r3, [pc, #52]	; (800e49c <prvAddNewTaskToReadyList+0xcc>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d00e      	beq.n	800e48a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e46c:	4b0a      	ldr	r3, [pc, #40]	; (800e498 <prvAddNewTaskToReadyList+0xc8>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e476:	429a      	cmp	r2, r3
 800e478:	d207      	bcs.n	800e48a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e47a:	4b0c      	ldr	r3, [pc, #48]	; (800e4ac <prvAddNewTaskToReadyList+0xdc>)
 800e47c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e480:	601a      	str	r2, [r3, #0]
 800e482:	f3bf 8f4f 	dsb	sy
 800e486:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e48a:	bf00      	nop
 800e48c:	3708      	adds	r7, #8
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	20000fc0 	.word	0x20000fc0
 800e498:	20000aec 	.word	0x20000aec
 800e49c:	20000fcc 	.word	0x20000fcc
 800e4a0:	20000fdc 	.word	0x20000fdc
 800e4a4:	20000fc8 	.word	0x20000fc8
 800e4a8:	20000af0 	.word	0x20000af0
 800e4ac:	e000ed04 	.word	0xe000ed04

0800e4b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d017      	beq.n	800e4f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e4c2:	4b13      	ldr	r3, [pc, #76]	; (800e510 <vTaskDelay+0x60>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d00a      	beq.n	800e4e0 <vTaskDelay+0x30>
	__asm volatile
 800e4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ce:	f383 8811 	msr	BASEPRI, r3
 800e4d2:	f3bf 8f6f 	isb	sy
 800e4d6:	f3bf 8f4f 	dsb	sy
 800e4da:	60bb      	str	r3, [r7, #8]
}
 800e4dc:	bf00      	nop
 800e4de:	e7fe      	b.n	800e4de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e4e0:	f000 f880 	bl	800e5e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 fef8 	bl	800f2dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e4ec:	f000 f888 	bl	800e600 <xTaskResumeAll>
 800e4f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d107      	bne.n	800e508 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e4f8:	4b06      	ldr	r3, [pc, #24]	; (800e514 <vTaskDelay+0x64>)
 800e4fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4fe:	601a      	str	r2, [r3, #0]
 800e500:	f3bf 8f4f 	dsb	sy
 800e504:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e508:	bf00      	nop
 800e50a:	3710      	adds	r7, #16
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	20000fe8 	.word	0x20000fe8
 800e514:	e000ed04 	.word	0xe000ed04

0800e518 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b08a      	sub	sp, #40	; 0x28
 800e51c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e51e:	2300      	movs	r3, #0
 800e520:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e522:	2300      	movs	r3, #0
 800e524:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e526:	463a      	mov	r2, r7
 800e528:	1d39      	adds	r1, r7, #4
 800e52a:	f107 0308 	add.w	r3, r7, #8
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fe fc70 	bl	800ce14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e534:	6839      	ldr	r1, [r7, #0]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	68ba      	ldr	r2, [r7, #8]
 800e53a:	9202      	str	r2, [sp, #8]
 800e53c:	9301      	str	r3, [sp, #4]
 800e53e:	2300      	movs	r3, #0
 800e540:	9300      	str	r3, [sp, #0]
 800e542:	2300      	movs	r3, #0
 800e544:	460a      	mov	r2, r1
 800e546:	4921      	ldr	r1, [pc, #132]	; (800e5cc <vTaskStartScheduler+0xb4>)
 800e548:	4821      	ldr	r0, [pc, #132]	; (800e5d0 <vTaskStartScheduler+0xb8>)
 800e54a:	f7ff fe0f 	bl	800e16c <xTaskCreateStatic>
 800e54e:	4603      	mov	r3, r0
 800e550:	4a20      	ldr	r2, [pc, #128]	; (800e5d4 <vTaskStartScheduler+0xbc>)
 800e552:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e554:	4b1f      	ldr	r3, [pc, #124]	; (800e5d4 <vTaskStartScheduler+0xbc>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d002      	beq.n	800e562 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e55c:	2301      	movs	r3, #1
 800e55e:	617b      	str	r3, [r7, #20]
 800e560:	e001      	b.n	800e566 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e562:	2300      	movs	r3, #0
 800e564:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d102      	bne.n	800e572 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e56c:	f000 ff0a 	bl	800f384 <xTimerCreateTimerTask>
 800e570:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	2b01      	cmp	r3, #1
 800e576:	d116      	bne.n	800e5a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800e578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57c:	f383 8811 	msr	BASEPRI, r3
 800e580:	f3bf 8f6f 	isb	sy
 800e584:	f3bf 8f4f 	dsb	sy
 800e588:	613b      	str	r3, [r7, #16]
}
 800e58a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e58c:	4b12      	ldr	r3, [pc, #72]	; (800e5d8 <vTaskStartScheduler+0xc0>)
 800e58e:	f04f 32ff 	mov.w	r2, #4294967295
 800e592:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e594:	4b11      	ldr	r3, [pc, #68]	; (800e5dc <vTaskStartScheduler+0xc4>)
 800e596:	2201      	movs	r2, #1
 800e598:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e59a:	4b11      	ldr	r3, [pc, #68]	; (800e5e0 <vTaskStartScheduler+0xc8>)
 800e59c:	2200      	movs	r2, #0
 800e59e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e5a0:	f001 fac6 	bl	800fb30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e5a4:	e00e      	b.n	800e5c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ac:	d10a      	bne.n	800e5c4 <vTaskStartScheduler+0xac>
	__asm volatile
 800e5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b2:	f383 8811 	msr	BASEPRI, r3
 800e5b6:	f3bf 8f6f 	isb	sy
 800e5ba:	f3bf 8f4f 	dsb	sy
 800e5be:	60fb      	str	r3, [r7, #12]
}
 800e5c0:	bf00      	nop
 800e5c2:	e7fe      	b.n	800e5c2 <vTaskStartScheduler+0xaa>
}
 800e5c4:	bf00      	nop
 800e5c6:	3718      	adds	r7, #24
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	08016734 	.word	0x08016734
 800e5d0:	0800ebfd 	.word	0x0800ebfd
 800e5d4:	20000fe4 	.word	0x20000fe4
 800e5d8:	20000fe0 	.word	0x20000fe0
 800e5dc:	20000fcc 	.word	0x20000fcc
 800e5e0:	20000fc4 	.word	0x20000fc4

0800e5e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e5e8:	4b04      	ldr	r3, [pc, #16]	; (800e5fc <vTaskSuspendAll+0x18>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	4a03      	ldr	r2, [pc, #12]	; (800e5fc <vTaskSuspendAll+0x18>)
 800e5f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e5f2:	bf00      	nop
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr
 800e5fc:	20000fe8 	.word	0x20000fe8

0800e600 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e606:	2300      	movs	r3, #0
 800e608:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e60a:	2300      	movs	r3, #0
 800e60c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e60e:	4b42      	ldr	r3, [pc, #264]	; (800e718 <xTaskResumeAll+0x118>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d10a      	bne.n	800e62c <xTaskResumeAll+0x2c>
	__asm volatile
 800e616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61a:	f383 8811 	msr	BASEPRI, r3
 800e61e:	f3bf 8f6f 	isb	sy
 800e622:	f3bf 8f4f 	dsb	sy
 800e626:	603b      	str	r3, [r7, #0]
}
 800e628:	bf00      	nop
 800e62a:	e7fe      	b.n	800e62a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e62c:	f001 fb22 	bl	800fc74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e630:	4b39      	ldr	r3, [pc, #228]	; (800e718 <xTaskResumeAll+0x118>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	3b01      	subs	r3, #1
 800e636:	4a38      	ldr	r2, [pc, #224]	; (800e718 <xTaskResumeAll+0x118>)
 800e638:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e63a:	4b37      	ldr	r3, [pc, #220]	; (800e718 <xTaskResumeAll+0x118>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d162      	bne.n	800e708 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e642:	4b36      	ldr	r3, [pc, #216]	; (800e71c <xTaskResumeAll+0x11c>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d05e      	beq.n	800e708 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e64a:	e02f      	b.n	800e6ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e64c:	4b34      	ldr	r3, [pc, #208]	; (800e720 <xTaskResumeAll+0x120>)
 800e64e:	68db      	ldr	r3, [r3, #12]
 800e650:	68db      	ldr	r3, [r3, #12]
 800e652:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	3318      	adds	r3, #24
 800e658:	4618      	mov	r0, r3
 800e65a:	f7fe fc99 	bl	800cf90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	3304      	adds	r3, #4
 800e662:	4618      	mov	r0, r3
 800e664:	f7fe fc94 	bl	800cf90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e66c:	4b2d      	ldr	r3, [pc, #180]	; (800e724 <xTaskResumeAll+0x124>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	429a      	cmp	r2, r3
 800e672:	d903      	bls.n	800e67c <xTaskResumeAll+0x7c>
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e678:	4a2a      	ldr	r2, [pc, #168]	; (800e724 <xTaskResumeAll+0x124>)
 800e67a:	6013      	str	r3, [r2, #0]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e680:	4613      	mov	r3, r2
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	4413      	add	r3, r2
 800e686:	009b      	lsls	r3, r3, #2
 800e688:	4a27      	ldr	r2, [pc, #156]	; (800e728 <xTaskResumeAll+0x128>)
 800e68a:	441a      	add	r2, r3
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	3304      	adds	r3, #4
 800e690:	4619      	mov	r1, r3
 800e692:	4610      	mov	r0, r2
 800e694:	f7fe fc1f 	bl	800ced6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e69c:	4b23      	ldr	r3, [pc, #140]	; (800e72c <xTaskResumeAll+0x12c>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d302      	bcc.n	800e6ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e6a6:	4b22      	ldr	r3, [pc, #136]	; (800e730 <xTaskResumeAll+0x130>)
 800e6a8:	2201      	movs	r2, #1
 800e6aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6ac:	4b1c      	ldr	r3, [pc, #112]	; (800e720 <xTaskResumeAll+0x120>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d1cb      	bne.n	800e64c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d001      	beq.n	800e6be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e6ba:	f000 fb55 	bl	800ed68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e6be:	4b1d      	ldr	r3, [pc, #116]	; (800e734 <xTaskResumeAll+0x134>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d010      	beq.n	800e6ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e6ca:	f000 f847 	bl	800e75c <xTaskIncrementTick>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d002      	beq.n	800e6da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e6d4:	4b16      	ldr	r3, [pc, #88]	; (800e730 <xTaskResumeAll+0x130>)
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	3b01      	subs	r3, #1
 800e6de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d1f1      	bne.n	800e6ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e6e6:	4b13      	ldr	r3, [pc, #76]	; (800e734 <xTaskResumeAll+0x134>)
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e6ec:	4b10      	ldr	r3, [pc, #64]	; (800e730 <xTaskResumeAll+0x130>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d009      	beq.n	800e708 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e6f8:	4b0f      	ldr	r3, [pc, #60]	; (800e738 <xTaskResumeAll+0x138>)
 800e6fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6fe:	601a      	str	r2, [r3, #0]
 800e700:	f3bf 8f4f 	dsb	sy
 800e704:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e708:	f001 fae4 	bl	800fcd4 <vPortExitCritical>

	return xAlreadyYielded;
 800e70c:	68bb      	ldr	r3, [r7, #8]
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3710      	adds	r7, #16
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	20000fe8 	.word	0x20000fe8
 800e71c:	20000fc0 	.word	0x20000fc0
 800e720:	20000f80 	.word	0x20000f80
 800e724:	20000fc8 	.word	0x20000fc8
 800e728:	20000af0 	.word	0x20000af0
 800e72c:	20000aec 	.word	0x20000aec
 800e730:	20000fd4 	.word	0x20000fd4
 800e734:	20000fd0 	.word	0x20000fd0
 800e738:	e000ed04 	.word	0xe000ed04

0800e73c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e73c:	b480      	push	{r7}
 800e73e:	b083      	sub	sp, #12
 800e740:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e742:	4b05      	ldr	r3, [pc, #20]	; (800e758 <xTaskGetTickCount+0x1c>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e748:	687b      	ldr	r3, [r7, #4]
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	370c      	adds	r7, #12
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr
 800e756:	bf00      	nop
 800e758:	20000fc4 	.word	0x20000fc4

0800e75c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b086      	sub	sp, #24
 800e760:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e762:	2300      	movs	r3, #0
 800e764:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e766:	4b4f      	ldr	r3, [pc, #316]	; (800e8a4 <xTaskIncrementTick+0x148>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	f040 808f 	bne.w	800e88e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e770:	4b4d      	ldr	r3, [pc, #308]	; (800e8a8 <xTaskIncrementTick+0x14c>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	3301      	adds	r3, #1
 800e776:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e778:	4a4b      	ldr	r2, [pc, #300]	; (800e8a8 <xTaskIncrementTick+0x14c>)
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d120      	bne.n	800e7c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e784:	4b49      	ldr	r3, [pc, #292]	; (800e8ac <xTaskIncrementTick+0x150>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00a      	beq.n	800e7a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800e78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e792:	f383 8811 	msr	BASEPRI, r3
 800e796:	f3bf 8f6f 	isb	sy
 800e79a:	f3bf 8f4f 	dsb	sy
 800e79e:	603b      	str	r3, [r7, #0]
}
 800e7a0:	bf00      	nop
 800e7a2:	e7fe      	b.n	800e7a2 <xTaskIncrementTick+0x46>
 800e7a4:	4b41      	ldr	r3, [pc, #260]	; (800e8ac <xTaskIncrementTick+0x150>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	60fb      	str	r3, [r7, #12]
 800e7aa:	4b41      	ldr	r3, [pc, #260]	; (800e8b0 <xTaskIncrementTick+0x154>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4a3f      	ldr	r2, [pc, #252]	; (800e8ac <xTaskIncrementTick+0x150>)
 800e7b0:	6013      	str	r3, [r2, #0]
 800e7b2:	4a3f      	ldr	r2, [pc, #252]	; (800e8b0 <xTaskIncrementTick+0x154>)
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	6013      	str	r3, [r2, #0]
 800e7b8:	4b3e      	ldr	r3, [pc, #248]	; (800e8b4 <xTaskIncrementTick+0x158>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	3301      	adds	r3, #1
 800e7be:	4a3d      	ldr	r2, [pc, #244]	; (800e8b4 <xTaskIncrementTick+0x158>)
 800e7c0:	6013      	str	r3, [r2, #0]
 800e7c2:	f000 fad1 	bl	800ed68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e7c6:	4b3c      	ldr	r3, [pc, #240]	; (800e8b8 <xTaskIncrementTick+0x15c>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	693a      	ldr	r2, [r7, #16]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d349      	bcc.n	800e864 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7d0:	4b36      	ldr	r3, [pc, #216]	; (800e8ac <xTaskIncrementTick+0x150>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d104      	bne.n	800e7e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7da:	4b37      	ldr	r3, [pc, #220]	; (800e8b8 <xTaskIncrementTick+0x15c>)
 800e7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e7e0:	601a      	str	r2, [r3, #0]
					break;
 800e7e2:	e03f      	b.n	800e864 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7e4:	4b31      	ldr	r3, [pc, #196]	; (800e8ac <xTaskIncrementTick+0x150>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	68db      	ldr	r3, [r3, #12]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e7f4:	693a      	ldr	r2, [r7, #16]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d203      	bcs.n	800e804 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e7fc:	4a2e      	ldr	r2, [pc, #184]	; (800e8b8 <xTaskIncrementTick+0x15c>)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e802:	e02f      	b.n	800e864 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	3304      	adds	r3, #4
 800e808:	4618      	mov	r0, r3
 800e80a:	f7fe fbc1 	bl	800cf90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e812:	2b00      	cmp	r3, #0
 800e814:	d004      	beq.n	800e820 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	3318      	adds	r3, #24
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7fe fbb8 	bl	800cf90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e824:	4b25      	ldr	r3, [pc, #148]	; (800e8bc <xTaskIncrementTick+0x160>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d903      	bls.n	800e834 <xTaskIncrementTick+0xd8>
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e830:	4a22      	ldr	r2, [pc, #136]	; (800e8bc <xTaskIncrementTick+0x160>)
 800e832:	6013      	str	r3, [r2, #0]
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e838:	4613      	mov	r3, r2
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	4413      	add	r3, r2
 800e83e:	009b      	lsls	r3, r3, #2
 800e840:	4a1f      	ldr	r2, [pc, #124]	; (800e8c0 <xTaskIncrementTick+0x164>)
 800e842:	441a      	add	r2, r3
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	3304      	adds	r3, #4
 800e848:	4619      	mov	r1, r3
 800e84a:	4610      	mov	r0, r2
 800e84c:	f7fe fb43 	bl	800ced6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e854:	4b1b      	ldr	r3, [pc, #108]	; (800e8c4 <xTaskIncrementTick+0x168>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d3b8      	bcc.n	800e7d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e85e:	2301      	movs	r3, #1
 800e860:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e862:	e7b5      	b.n	800e7d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e864:	4b17      	ldr	r3, [pc, #92]	; (800e8c4 <xTaskIncrementTick+0x168>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e86a:	4915      	ldr	r1, [pc, #84]	; (800e8c0 <xTaskIncrementTick+0x164>)
 800e86c:	4613      	mov	r3, r2
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	4413      	add	r3, r2
 800e872:	009b      	lsls	r3, r3, #2
 800e874:	440b      	add	r3, r1
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d901      	bls.n	800e880 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e87c:	2301      	movs	r3, #1
 800e87e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e880:	4b11      	ldr	r3, [pc, #68]	; (800e8c8 <xTaskIncrementTick+0x16c>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d007      	beq.n	800e898 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e888:	2301      	movs	r3, #1
 800e88a:	617b      	str	r3, [r7, #20]
 800e88c:	e004      	b.n	800e898 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e88e:	4b0f      	ldr	r3, [pc, #60]	; (800e8cc <xTaskIncrementTick+0x170>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	3301      	adds	r3, #1
 800e894:	4a0d      	ldr	r2, [pc, #52]	; (800e8cc <xTaskIncrementTick+0x170>)
 800e896:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e898:	697b      	ldr	r3, [r7, #20]
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3718      	adds	r7, #24
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	20000fe8 	.word	0x20000fe8
 800e8a8:	20000fc4 	.word	0x20000fc4
 800e8ac:	20000f78 	.word	0x20000f78
 800e8b0:	20000f7c 	.word	0x20000f7c
 800e8b4:	20000fd8 	.word	0x20000fd8
 800e8b8:	20000fe0 	.word	0x20000fe0
 800e8bc:	20000fc8 	.word	0x20000fc8
 800e8c0:	20000af0 	.word	0x20000af0
 800e8c4:	20000aec 	.word	0x20000aec
 800e8c8:	20000fd4 	.word	0x20000fd4
 800e8cc:	20000fd0 	.word	0x20000fd0

0800e8d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b085      	sub	sp, #20
 800e8d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e8d6:	4b28      	ldr	r3, [pc, #160]	; (800e978 <vTaskSwitchContext+0xa8>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d003      	beq.n	800e8e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e8de:	4b27      	ldr	r3, [pc, #156]	; (800e97c <vTaskSwitchContext+0xac>)
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e8e4:	e041      	b.n	800e96a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e8e6:	4b25      	ldr	r3, [pc, #148]	; (800e97c <vTaskSwitchContext+0xac>)
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8ec:	4b24      	ldr	r3, [pc, #144]	; (800e980 <vTaskSwitchContext+0xb0>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	60fb      	str	r3, [r7, #12]
 800e8f2:	e010      	b.n	800e916 <vTaskSwitchContext+0x46>
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d10a      	bne.n	800e910 <vTaskSwitchContext+0x40>
	__asm volatile
 800e8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fe:	f383 8811 	msr	BASEPRI, r3
 800e902:	f3bf 8f6f 	isb	sy
 800e906:	f3bf 8f4f 	dsb	sy
 800e90a:	607b      	str	r3, [r7, #4]
}
 800e90c:	bf00      	nop
 800e90e:	e7fe      	b.n	800e90e <vTaskSwitchContext+0x3e>
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	3b01      	subs	r3, #1
 800e914:	60fb      	str	r3, [r7, #12]
 800e916:	491b      	ldr	r1, [pc, #108]	; (800e984 <vTaskSwitchContext+0xb4>)
 800e918:	68fa      	ldr	r2, [r7, #12]
 800e91a:	4613      	mov	r3, r2
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	4413      	add	r3, r2
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	440b      	add	r3, r1
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d0e4      	beq.n	800e8f4 <vTaskSwitchContext+0x24>
 800e92a:	68fa      	ldr	r2, [r7, #12]
 800e92c:	4613      	mov	r3, r2
 800e92e:	009b      	lsls	r3, r3, #2
 800e930:	4413      	add	r3, r2
 800e932:	009b      	lsls	r3, r3, #2
 800e934:	4a13      	ldr	r2, [pc, #76]	; (800e984 <vTaskSwitchContext+0xb4>)
 800e936:	4413      	add	r3, r2
 800e938:	60bb      	str	r3, [r7, #8]
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	685a      	ldr	r2, [r3, #4]
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	605a      	str	r2, [r3, #4]
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	685a      	ldr	r2, [r3, #4]
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	3308      	adds	r3, #8
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d104      	bne.n	800e95a <vTaskSwitchContext+0x8a>
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	685b      	ldr	r3, [r3, #4]
 800e954:	685a      	ldr	r2, [r3, #4]
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	605a      	str	r2, [r3, #4]
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	4a09      	ldr	r2, [pc, #36]	; (800e988 <vTaskSwitchContext+0xb8>)
 800e962:	6013      	str	r3, [r2, #0]
 800e964:	4a06      	ldr	r2, [pc, #24]	; (800e980 <vTaskSwitchContext+0xb0>)
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	6013      	str	r3, [r2, #0]
}
 800e96a:	bf00      	nop
 800e96c:	3714      	adds	r7, #20
 800e96e:	46bd      	mov	sp, r7
 800e970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e974:	4770      	bx	lr
 800e976:	bf00      	nop
 800e978:	20000fe8 	.word	0x20000fe8
 800e97c:	20000fd4 	.word	0x20000fd4
 800e980:	20000fc8 	.word	0x20000fc8
 800e984:	20000af0 	.word	0x20000af0
 800e988:	20000aec 	.word	0x20000aec

0800e98c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d10a      	bne.n	800e9b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a0:	f383 8811 	msr	BASEPRI, r3
 800e9a4:	f3bf 8f6f 	isb	sy
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	60fb      	str	r3, [r7, #12]
}
 800e9ae:	bf00      	nop
 800e9b0:	e7fe      	b.n	800e9b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9b2:	4b07      	ldr	r3, [pc, #28]	; (800e9d0 <vTaskPlaceOnEventList+0x44>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	3318      	adds	r3, #24
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f7fe faaf 	bl	800cf1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e9c0:	2101      	movs	r1, #1
 800e9c2:	6838      	ldr	r0, [r7, #0]
 800e9c4:	f000 fc8a 	bl	800f2dc <prvAddCurrentTaskToDelayedList>
}
 800e9c8:	bf00      	nop
 800e9ca:	3710      	adds	r7, #16
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	20000aec 	.word	0x20000aec

0800e9d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b086      	sub	sp, #24
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d10a      	bne.n	800e9fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ea:	f383 8811 	msr	BASEPRI, r3
 800e9ee:	f3bf 8f6f 	isb	sy
 800e9f2:	f3bf 8f4f 	dsb	sy
 800e9f6:	617b      	str	r3, [r7, #20]
}
 800e9f8:	bf00      	nop
 800e9fa:	e7fe      	b.n	800e9fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ea28 <vTaskPlaceOnEventListRestricted+0x54>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	3318      	adds	r3, #24
 800ea02:	4619      	mov	r1, r3
 800ea04:	68f8      	ldr	r0, [r7, #12]
 800ea06:	f7fe fa66 	bl	800ced6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d002      	beq.n	800ea16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ea10:	f04f 33ff 	mov.w	r3, #4294967295
 800ea14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ea16:	6879      	ldr	r1, [r7, #4]
 800ea18:	68b8      	ldr	r0, [r7, #8]
 800ea1a:	f000 fc5f 	bl	800f2dc <prvAddCurrentTaskToDelayedList>
	}
 800ea1e:	bf00      	nop
 800ea20:	3718      	adds	r7, #24
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	20000aec 	.word	0x20000aec

0800ea2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b086      	sub	sp, #24
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d10a      	bne.n	800ea58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ea42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea46:	f383 8811 	msr	BASEPRI, r3
 800ea4a:	f3bf 8f6f 	isb	sy
 800ea4e:	f3bf 8f4f 	dsb	sy
 800ea52:	60fb      	str	r3, [r7, #12]
}
 800ea54:	bf00      	nop
 800ea56:	e7fe      	b.n	800ea56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	3318      	adds	r3, #24
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7fe fa97 	bl	800cf90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea62:	4b1e      	ldr	r3, [pc, #120]	; (800eadc <xTaskRemoveFromEventList+0xb0>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d11d      	bne.n	800eaa6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	3304      	adds	r3, #4
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7fe fa8e 	bl	800cf90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea78:	4b19      	ldr	r3, [pc, #100]	; (800eae0 <xTaskRemoveFromEventList+0xb4>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d903      	bls.n	800ea88 <xTaskRemoveFromEventList+0x5c>
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea84:	4a16      	ldr	r2, [pc, #88]	; (800eae0 <xTaskRemoveFromEventList+0xb4>)
 800ea86:	6013      	str	r3, [r2, #0]
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea8c:	4613      	mov	r3, r2
 800ea8e:	009b      	lsls	r3, r3, #2
 800ea90:	4413      	add	r3, r2
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	4a13      	ldr	r2, [pc, #76]	; (800eae4 <xTaskRemoveFromEventList+0xb8>)
 800ea96:	441a      	add	r2, r3
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	4610      	mov	r0, r2
 800eaa0:	f7fe fa19 	bl	800ced6 <vListInsertEnd>
 800eaa4:	e005      	b.n	800eab2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	3318      	adds	r3, #24
 800eaaa:	4619      	mov	r1, r3
 800eaac:	480e      	ldr	r0, [pc, #56]	; (800eae8 <xTaskRemoveFromEventList+0xbc>)
 800eaae:	f7fe fa12 	bl	800ced6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab6:	4b0d      	ldr	r3, [pc, #52]	; (800eaec <xTaskRemoveFromEventList+0xc0>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d905      	bls.n	800eacc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eac0:	2301      	movs	r3, #1
 800eac2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eac4:	4b0a      	ldr	r3, [pc, #40]	; (800eaf0 <xTaskRemoveFromEventList+0xc4>)
 800eac6:	2201      	movs	r2, #1
 800eac8:	601a      	str	r2, [r3, #0]
 800eaca:	e001      	b.n	800ead0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800eacc:	2300      	movs	r3, #0
 800eace:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ead0:	697b      	ldr	r3, [r7, #20]
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3718      	adds	r7, #24
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
 800eada:	bf00      	nop
 800eadc:	20000fe8 	.word	0x20000fe8
 800eae0:	20000fc8 	.word	0x20000fc8
 800eae4:	20000af0 	.word	0x20000af0
 800eae8:	20000f80 	.word	0x20000f80
 800eaec:	20000aec 	.word	0x20000aec
 800eaf0:	20000fd4 	.word	0x20000fd4

0800eaf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eafc:	4b06      	ldr	r3, [pc, #24]	; (800eb18 <vTaskInternalSetTimeOutState+0x24>)
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eb04:	4b05      	ldr	r3, [pc, #20]	; (800eb1c <vTaskInternalSetTimeOutState+0x28>)
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	605a      	str	r2, [r3, #4]
}
 800eb0c:	bf00      	nop
 800eb0e:	370c      	adds	r7, #12
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr
 800eb18:	20000fd8 	.word	0x20000fd8
 800eb1c:	20000fc4 	.word	0x20000fc4

0800eb20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b088      	sub	sp, #32
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d10a      	bne.n	800eb46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800eb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb34:	f383 8811 	msr	BASEPRI, r3
 800eb38:	f3bf 8f6f 	isb	sy
 800eb3c:	f3bf 8f4f 	dsb	sy
 800eb40:	613b      	str	r3, [r7, #16]
}
 800eb42:	bf00      	nop
 800eb44:	e7fe      	b.n	800eb44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d10a      	bne.n	800eb62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800eb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb50:	f383 8811 	msr	BASEPRI, r3
 800eb54:	f3bf 8f6f 	isb	sy
 800eb58:	f3bf 8f4f 	dsb	sy
 800eb5c:	60fb      	str	r3, [r7, #12]
}
 800eb5e:	bf00      	nop
 800eb60:	e7fe      	b.n	800eb60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800eb62:	f001 f887 	bl	800fc74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eb66:	4b1d      	ldr	r3, [pc, #116]	; (800ebdc <xTaskCheckForTimeOut+0xbc>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	69ba      	ldr	r2, [r7, #24]
 800eb72:	1ad3      	subs	r3, r2, r3
 800eb74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb7e:	d102      	bne.n	800eb86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eb80:	2300      	movs	r3, #0
 800eb82:	61fb      	str	r3, [r7, #28]
 800eb84:	e023      	b.n	800ebce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681a      	ldr	r2, [r3, #0]
 800eb8a:	4b15      	ldr	r3, [pc, #84]	; (800ebe0 <xTaskCheckForTimeOut+0xc0>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d007      	beq.n	800eba2 <xTaskCheckForTimeOut+0x82>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	685b      	ldr	r3, [r3, #4]
 800eb96:	69ba      	ldr	r2, [r7, #24]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d302      	bcc.n	800eba2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	61fb      	str	r3, [r7, #28]
 800eba0:	e015      	b.n	800ebce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	697a      	ldr	r2, [r7, #20]
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d20b      	bcs.n	800ebc4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	681a      	ldr	r2, [r3, #0]
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	1ad2      	subs	r2, r2, r3
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f7ff ff9b 	bl	800eaf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	61fb      	str	r3, [r7, #28]
 800ebc2:	e004      	b.n	800ebce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ebce:	f001 f881 	bl	800fcd4 <vPortExitCritical>

	return xReturn;
 800ebd2:	69fb      	ldr	r3, [r7, #28]
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3720      	adds	r7, #32
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	20000fc4 	.word	0x20000fc4
 800ebe0:	20000fd8 	.word	0x20000fd8

0800ebe4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ebe8:	4b03      	ldr	r3, [pc, #12]	; (800ebf8 <vTaskMissedYield+0x14>)
 800ebea:	2201      	movs	r2, #1
 800ebec:	601a      	str	r2, [r3, #0]
}
 800ebee:	bf00      	nop
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr
 800ebf8:	20000fd4 	.word	0x20000fd4

0800ebfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ec04:	f000 f852 	bl	800ecac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ec08:	4b06      	ldr	r3, [pc, #24]	; (800ec24 <prvIdleTask+0x28>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2b01      	cmp	r3, #1
 800ec0e:	d9f9      	bls.n	800ec04 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ec10:	4b05      	ldr	r3, [pc, #20]	; (800ec28 <prvIdleTask+0x2c>)
 800ec12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec16:	601a      	str	r2, [r3, #0]
 800ec18:	f3bf 8f4f 	dsb	sy
 800ec1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ec20:	e7f0      	b.n	800ec04 <prvIdleTask+0x8>
 800ec22:	bf00      	nop
 800ec24:	20000af0 	.word	0x20000af0
 800ec28:	e000ed04 	.word	0xe000ed04

0800ec2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec32:	2300      	movs	r3, #0
 800ec34:	607b      	str	r3, [r7, #4]
 800ec36:	e00c      	b.n	800ec52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	4613      	mov	r3, r2
 800ec3c:	009b      	lsls	r3, r3, #2
 800ec3e:	4413      	add	r3, r2
 800ec40:	009b      	lsls	r3, r3, #2
 800ec42:	4a12      	ldr	r2, [pc, #72]	; (800ec8c <prvInitialiseTaskLists+0x60>)
 800ec44:	4413      	add	r3, r2
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7fe f918 	bl	800ce7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	607b      	str	r3, [r7, #4]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2b37      	cmp	r3, #55	; 0x37
 800ec56:	d9ef      	bls.n	800ec38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ec58:	480d      	ldr	r0, [pc, #52]	; (800ec90 <prvInitialiseTaskLists+0x64>)
 800ec5a:	f7fe f90f 	bl	800ce7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ec5e:	480d      	ldr	r0, [pc, #52]	; (800ec94 <prvInitialiseTaskLists+0x68>)
 800ec60:	f7fe f90c 	bl	800ce7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ec64:	480c      	ldr	r0, [pc, #48]	; (800ec98 <prvInitialiseTaskLists+0x6c>)
 800ec66:	f7fe f909 	bl	800ce7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ec6a:	480c      	ldr	r0, [pc, #48]	; (800ec9c <prvInitialiseTaskLists+0x70>)
 800ec6c:	f7fe f906 	bl	800ce7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ec70:	480b      	ldr	r0, [pc, #44]	; (800eca0 <prvInitialiseTaskLists+0x74>)
 800ec72:	f7fe f903 	bl	800ce7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ec76:	4b0b      	ldr	r3, [pc, #44]	; (800eca4 <prvInitialiseTaskLists+0x78>)
 800ec78:	4a05      	ldr	r2, [pc, #20]	; (800ec90 <prvInitialiseTaskLists+0x64>)
 800ec7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec7c:	4b0a      	ldr	r3, [pc, #40]	; (800eca8 <prvInitialiseTaskLists+0x7c>)
 800ec7e:	4a05      	ldr	r2, [pc, #20]	; (800ec94 <prvInitialiseTaskLists+0x68>)
 800ec80:	601a      	str	r2, [r3, #0]
}
 800ec82:	bf00      	nop
 800ec84:	3708      	adds	r7, #8
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	20000af0 	.word	0x20000af0
 800ec90:	20000f50 	.word	0x20000f50
 800ec94:	20000f64 	.word	0x20000f64
 800ec98:	20000f80 	.word	0x20000f80
 800ec9c:	20000f94 	.word	0x20000f94
 800eca0:	20000fac 	.word	0x20000fac
 800eca4:	20000f78 	.word	0x20000f78
 800eca8:	20000f7c 	.word	0x20000f7c

0800ecac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ecb2:	e019      	b.n	800ece8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ecb4:	f000 ffde 	bl	800fc74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecb8:	4b10      	ldr	r3, [pc, #64]	; (800ecfc <prvCheckTasksWaitingTermination+0x50>)
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	68db      	ldr	r3, [r3, #12]
 800ecbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	3304      	adds	r3, #4
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7fe f963 	bl	800cf90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ecca:	4b0d      	ldr	r3, [pc, #52]	; (800ed00 <prvCheckTasksWaitingTermination+0x54>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	3b01      	subs	r3, #1
 800ecd0:	4a0b      	ldr	r2, [pc, #44]	; (800ed00 <prvCheckTasksWaitingTermination+0x54>)
 800ecd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ecd4:	4b0b      	ldr	r3, [pc, #44]	; (800ed04 <prvCheckTasksWaitingTermination+0x58>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	3b01      	subs	r3, #1
 800ecda:	4a0a      	ldr	r2, [pc, #40]	; (800ed04 <prvCheckTasksWaitingTermination+0x58>)
 800ecdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ecde:	f000 fff9 	bl	800fcd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f000 f810 	bl	800ed08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ece8:	4b06      	ldr	r3, [pc, #24]	; (800ed04 <prvCheckTasksWaitingTermination+0x58>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d1e1      	bne.n	800ecb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ecf0:	bf00      	nop
 800ecf2:	bf00      	nop
 800ecf4:	3708      	adds	r7, #8
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	20000f94 	.word	0x20000f94
 800ed00:	20000fc0 	.word	0x20000fc0
 800ed04:	20000fa8 	.word	0x20000fa8

0800ed08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d108      	bne.n	800ed2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f001 f996 	bl	8010050 <vPortFree>
				vPortFree( pxTCB );
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f001 f993 	bl	8010050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ed2a:	e018      	b.n	800ed5e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	d103      	bne.n	800ed3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f001 f98a 	bl	8010050 <vPortFree>
	}
 800ed3c:	e00f      	b.n	800ed5e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ed44:	2b02      	cmp	r3, #2
 800ed46:	d00a      	beq.n	800ed5e <prvDeleteTCB+0x56>
	__asm volatile
 800ed48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed4c:	f383 8811 	msr	BASEPRI, r3
 800ed50:	f3bf 8f6f 	isb	sy
 800ed54:	f3bf 8f4f 	dsb	sy
 800ed58:	60fb      	str	r3, [r7, #12]
}
 800ed5a:	bf00      	nop
 800ed5c:	e7fe      	b.n	800ed5c <prvDeleteTCB+0x54>
	}
 800ed5e:	bf00      	nop
 800ed60:	3710      	adds	r7, #16
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
	...

0800ed68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b083      	sub	sp, #12
 800ed6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed6e:	4b0c      	ldr	r3, [pc, #48]	; (800eda0 <prvResetNextTaskUnblockTime+0x38>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d104      	bne.n	800ed82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ed78:	4b0a      	ldr	r3, [pc, #40]	; (800eda4 <prvResetNextTaskUnblockTime+0x3c>)
 800ed7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ed80:	e008      	b.n	800ed94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed82:	4b07      	ldr	r3, [pc, #28]	; (800eda0 <prvResetNextTaskUnblockTime+0x38>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	68db      	ldr	r3, [r3, #12]
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	4a04      	ldr	r2, [pc, #16]	; (800eda4 <prvResetNextTaskUnblockTime+0x3c>)
 800ed92:	6013      	str	r3, [r2, #0]
}
 800ed94:	bf00      	nop
 800ed96:	370c      	adds	r7, #12
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr
 800eda0:	20000f78 	.word	0x20000f78
 800eda4:	20000fe0 	.word	0x20000fe0

0800eda8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800edae:	4b05      	ldr	r3, [pc, #20]	; (800edc4 <xTaskGetCurrentTaskHandle+0x1c>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800edb4:	687b      	ldr	r3, [r7, #4]
	}
 800edb6:	4618      	mov	r0, r3
 800edb8:	370c      	adds	r7, #12
 800edba:	46bd      	mov	sp, r7
 800edbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc0:	4770      	bx	lr
 800edc2:	bf00      	nop
 800edc4:	20000aec 	.word	0x20000aec

0800edc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800edce:	4b0b      	ldr	r3, [pc, #44]	; (800edfc <xTaskGetSchedulerState+0x34>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d102      	bne.n	800eddc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800edd6:	2301      	movs	r3, #1
 800edd8:	607b      	str	r3, [r7, #4]
 800edda:	e008      	b.n	800edee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eddc:	4b08      	ldr	r3, [pc, #32]	; (800ee00 <xTaskGetSchedulerState+0x38>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d102      	bne.n	800edea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ede4:	2302      	movs	r3, #2
 800ede6:	607b      	str	r3, [r7, #4]
 800ede8:	e001      	b.n	800edee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800edea:	2300      	movs	r3, #0
 800edec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800edee:	687b      	ldr	r3, [r7, #4]
	}
 800edf0:	4618      	mov	r0, r3
 800edf2:	370c      	adds	r7, #12
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr
 800edfc:	20000fcc 	.word	0x20000fcc
 800ee00:	20000fe8 	.word	0x20000fe8

0800ee04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ee10:	2300      	movs	r3, #0
 800ee12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d051      	beq.n	800eebe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee1e:	4b2a      	ldr	r3, [pc, #168]	; (800eec8 <xTaskPriorityInherit+0xc4>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d241      	bcs.n	800eeac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	699b      	ldr	r3, [r3, #24]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	db06      	blt.n	800ee3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee30:	4b25      	ldr	r3, [pc, #148]	; (800eec8 <xTaskPriorityInherit+0xc4>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	6959      	ldr	r1, [r3, #20]
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee46:	4613      	mov	r3, r2
 800ee48:	009b      	lsls	r3, r3, #2
 800ee4a:	4413      	add	r3, r2
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	4a1f      	ldr	r2, [pc, #124]	; (800eecc <xTaskPriorityInherit+0xc8>)
 800ee50:	4413      	add	r3, r2
 800ee52:	4299      	cmp	r1, r3
 800ee54:	d122      	bne.n	800ee9c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	3304      	adds	r3, #4
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7fe f898 	bl	800cf90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ee60:	4b19      	ldr	r3, [pc, #100]	; (800eec8 <xTaskPriorityInherit+0xc4>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee6e:	4b18      	ldr	r3, [pc, #96]	; (800eed0 <xTaskPriorityInherit+0xcc>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d903      	bls.n	800ee7e <xTaskPriorityInherit+0x7a>
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee7a:	4a15      	ldr	r2, [pc, #84]	; (800eed0 <xTaskPriorityInherit+0xcc>)
 800ee7c:	6013      	str	r3, [r2, #0]
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee82:	4613      	mov	r3, r2
 800ee84:	009b      	lsls	r3, r3, #2
 800ee86:	4413      	add	r3, r2
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	4a10      	ldr	r2, [pc, #64]	; (800eecc <xTaskPriorityInherit+0xc8>)
 800ee8c:	441a      	add	r2, r3
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	3304      	adds	r3, #4
 800ee92:	4619      	mov	r1, r3
 800ee94:	4610      	mov	r0, r2
 800ee96:	f7fe f81e 	bl	800ced6 <vListInsertEnd>
 800ee9a:	e004      	b.n	800eea6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ee9c:	4b0a      	ldr	r3, [pc, #40]	; (800eec8 <xTaskPriorityInherit+0xc4>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eea6:	2301      	movs	r3, #1
 800eea8:	60fb      	str	r3, [r7, #12]
 800eeaa:	e008      	b.n	800eebe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eeb0:	4b05      	ldr	r3, [pc, #20]	; (800eec8 <xTaskPriorityInherit+0xc4>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d201      	bcs.n	800eebe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eeba:	2301      	movs	r3, #1
 800eebc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eebe:	68fb      	ldr	r3, [r7, #12]
	}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3710      	adds	r7, #16
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}
 800eec8:	20000aec 	.word	0x20000aec
 800eecc:	20000af0 	.word	0x20000af0
 800eed0:	20000fc8 	.word	0x20000fc8

0800eed4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b086      	sub	sp, #24
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eee0:	2300      	movs	r3, #0
 800eee2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d056      	beq.n	800ef98 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eeea:	4b2e      	ldr	r3, [pc, #184]	; (800efa4 <xTaskPriorityDisinherit+0xd0>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	693a      	ldr	r2, [r7, #16]
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d00a      	beq.n	800ef0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800eef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef8:	f383 8811 	msr	BASEPRI, r3
 800eefc:	f3bf 8f6f 	isb	sy
 800ef00:	f3bf 8f4f 	dsb	sy
 800ef04:	60fb      	str	r3, [r7, #12]
}
 800ef06:	bf00      	nop
 800ef08:	e7fe      	b.n	800ef08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d10a      	bne.n	800ef28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ef12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef16:	f383 8811 	msr	BASEPRI, r3
 800ef1a:	f3bf 8f6f 	isb	sy
 800ef1e:	f3bf 8f4f 	dsb	sy
 800ef22:	60bb      	str	r3, [r7, #8]
}
 800ef24:	bf00      	nop
 800ef26:	e7fe      	b.n	800ef26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef2c:	1e5a      	subs	r2, r3, #1
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d02c      	beq.n	800ef98 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d128      	bne.n	800ef98 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	3304      	adds	r3, #4
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fe f820 	bl	800cf90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef68:	4b0f      	ldr	r3, [pc, #60]	; (800efa8 <xTaskPriorityDisinherit+0xd4>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d903      	bls.n	800ef78 <xTaskPriorityDisinherit+0xa4>
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef74:	4a0c      	ldr	r2, [pc, #48]	; (800efa8 <xTaskPriorityDisinherit+0xd4>)
 800ef76:	6013      	str	r3, [r2, #0]
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef7c:	4613      	mov	r3, r2
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	4413      	add	r3, r2
 800ef82:	009b      	lsls	r3, r3, #2
 800ef84:	4a09      	ldr	r2, [pc, #36]	; (800efac <xTaskPriorityDisinherit+0xd8>)
 800ef86:	441a      	add	r2, r3
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	3304      	adds	r3, #4
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	4610      	mov	r0, r2
 800ef90:	f7fd ffa1 	bl	800ced6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ef94:	2301      	movs	r3, #1
 800ef96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef98:	697b      	ldr	r3, [r7, #20]
	}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3718      	adds	r7, #24
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	20000aec 	.word	0x20000aec
 800efa8:	20000fc8 	.word	0x20000fc8
 800efac:	20000af0 	.word	0x20000af0

0800efb0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b088      	sub	sp, #32
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800efbe:	2301      	movs	r3, #1
 800efc0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d06a      	beq.n	800f09e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800efc8:	69bb      	ldr	r3, [r7, #24]
 800efca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d10a      	bne.n	800efe6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800efd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd4:	f383 8811 	msr	BASEPRI, r3
 800efd8:	f3bf 8f6f 	isb	sy
 800efdc:	f3bf 8f4f 	dsb	sy
 800efe0:	60fb      	str	r3, [r7, #12]
}
 800efe2:	bf00      	nop
 800efe4:	e7fe      	b.n	800efe4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efea:	683a      	ldr	r2, [r7, #0]
 800efec:	429a      	cmp	r2, r3
 800efee:	d902      	bls.n	800eff6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	61fb      	str	r3, [r7, #28]
 800eff4:	e002      	b.n	800effc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eff6:	69bb      	ldr	r3, [r7, #24]
 800eff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800effa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800effc:	69bb      	ldr	r3, [r7, #24]
 800effe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f000:	69fa      	ldr	r2, [r7, #28]
 800f002:	429a      	cmp	r2, r3
 800f004:	d04b      	beq.n	800f09e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f006:	69bb      	ldr	r3, [r7, #24]
 800f008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f00a:	697a      	ldr	r2, [r7, #20]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d146      	bne.n	800f09e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f010:	4b25      	ldr	r3, [pc, #148]	; (800f0a8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	69ba      	ldr	r2, [r7, #24]
 800f016:	429a      	cmp	r2, r3
 800f018:	d10a      	bne.n	800f030 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f01e:	f383 8811 	msr	BASEPRI, r3
 800f022:	f3bf 8f6f 	isb	sy
 800f026:	f3bf 8f4f 	dsb	sy
 800f02a:	60bb      	str	r3, [r7, #8]
}
 800f02c:	bf00      	nop
 800f02e:	e7fe      	b.n	800f02e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f030:	69bb      	ldr	r3, [r7, #24]
 800f032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f034:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f036:	69bb      	ldr	r3, [r7, #24]
 800f038:	69fa      	ldr	r2, [r7, #28]
 800f03a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f03c:	69bb      	ldr	r3, [r7, #24]
 800f03e:	699b      	ldr	r3, [r3, #24]
 800f040:	2b00      	cmp	r3, #0
 800f042:	db04      	blt.n	800f04e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f044:	69fb      	ldr	r3, [r7, #28]
 800f046:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f04e:	69bb      	ldr	r3, [r7, #24]
 800f050:	6959      	ldr	r1, [r3, #20]
 800f052:	693a      	ldr	r2, [r7, #16]
 800f054:	4613      	mov	r3, r2
 800f056:	009b      	lsls	r3, r3, #2
 800f058:	4413      	add	r3, r2
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	4a13      	ldr	r2, [pc, #76]	; (800f0ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f05e:	4413      	add	r3, r2
 800f060:	4299      	cmp	r1, r3
 800f062:	d11c      	bne.n	800f09e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f064:	69bb      	ldr	r3, [r7, #24]
 800f066:	3304      	adds	r3, #4
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fd ff91 	bl	800cf90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f072:	4b0f      	ldr	r3, [pc, #60]	; (800f0b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	429a      	cmp	r2, r3
 800f078:	d903      	bls.n	800f082 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07e:	4a0c      	ldr	r2, [pc, #48]	; (800f0b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f080:	6013      	str	r3, [r2, #0]
 800f082:	69bb      	ldr	r3, [r7, #24]
 800f084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f086:	4613      	mov	r3, r2
 800f088:	009b      	lsls	r3, r3, #2
 800f08a:	4413      	add	r3, r2
 800f08c:	009b      	lsls	r3, r3, #2
 800f08e:	4a07      	ldr	r2, [pc, #28]	; (800f0ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f090:	441a      	add	r2, r3
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	3304      	adds	r3, #4
 800f096:	4619      	mov	r1, r3
 800f098:	4610      	mov	r0, r2
 800f09a:	f7fd ff1c 	bl	800ced6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f09e:	bf00      	nop
 800f0a0:	3720      	adds	r7, #32
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	20000aec 	.word	0x20000aec
 800f0ac:	20000af0 	.word	0x20000af0
 800f0b0:	20000fc8 	.word	0x20000fc8

0800f0b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f0b4:	b480      	push	{r7}
 800f0b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f0b8:	4b07      	ldr	r3, [pc, #28]	; (800f0d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d004      	beq.n	800f0ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f0c0:	4b05      	ldr	r3, [pc, #20]	; (800f0d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0c6:	3201      	adds	r2, #1
 800f0c8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f0ca:	4b03      	ldr	r3, [pc, #12]	; (800f0d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
	}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr
 800f0d8:	20000aec 	.word	0x20000aec

0800f0dc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f0e6:	f000 fdc5 	bl	800fc74 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f0ea:	4b1e      	ldr	r3, [pc, #120]	; (800f164 <ulTaskNotifyTake+0x88>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d113      	bne.n	800f11c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f0f4:	4b1b      	ldr	r3, [pc, #108]	; (800f164 <ulTaskNotifyTake+0x88>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	2201      	movs	r2, #1
 800f0fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d00b      	beq.n	800f11c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f104:	2101      	movs	r1, #1
 800f106:	6838      	ldr	r0, [r7, #0]
 800f108:	f000 f8e8 	bl	800f2dc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f10c:	4b16      	ldr	r3, [pc, #88]	; (800f168 <ulTaskNotifyTake+0x8c>)
 800f10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f112:	601a      	str	r2, [r3, #0]
 800f114:	f3bf 8f4f 	dsb	sy
 800f118:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f11c:	f000 fdda 	bl	800fcd4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f120:	f000 fda8 	bl	800fc74 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f124:	4b0f      	ldr	r3, [pc, #60]	; (800f164 <ulTaskNotifyTake+0x88>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f12a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00c      	beq.n	800f14c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d004      	beq.n	800f142 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f138:	4b0a      	ldr	r3, [pc, #40]	; (800f164 <ulTaskNotifyTake+0x88>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2200      	movs	r2, #0
 800f13e:	655a      	str	r2, [r3, #84]	; 0x54
 800f140:	e004      	b.n	800f14c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800f142:	4b08      	ldr	r3, [pc, #32]	; (800f164 <ulTaskNotifyTake+0x88>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	68fa      	ldr	r2, [r7, #12]
 800f148:	3a01      	subs	r2, #1
 800f14a:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f14c:	4b05      	ldr	r3, [pc, #20]	; (800f164 <ulTaskNotifyTake+0x88>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	2200      	movs	r2, #0
 800f152:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800f156:	f000 fdbd 	bl	800fcd4 <vPortExitCritical>

		return ulReturn;
 800f15a:	68fb      	ldr	r3, [r7, #12]
	}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3710      	adds	r7, #16
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}
 800f164:	20000aec 	.word	0x20000aec
 800f168:	e000ed04 	.word	0xe000ed04

0800f16c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b08a      	sub	sp, #40	; 0x28
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	603b      	str	r3, [r7, #0]
 800f178:	4613      	mov	r3, r2
 800f17a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f17c:	2301      	movs	r3, #1
 800f17e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d10a      	bne.n	800f19c <xTaskGenericNotify+0x30>
	__asm volatile
 800f186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18a:	f383 8811 	msr	BASEPRI, r3
 800f18e:	f3bf 8f6f 	isb	sy
 800f192:	f3bf 8f4f 	dsb	sy
 800f196:	61bb      	str	r3, [r7, #24]
}
 800f198:	bf00      	nop
 800f19a:	e7fe      	b.n	800f19a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f1a0:	f000 fd68 	bl	800fc74 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d003      	beq.n	800f1b2 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f1aa:	6a3b      	ldr	r3, [r7, #32]
 800f1ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f1b2:	6a3b      	ldr	r3, [r7, #32]
 800f1b4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f1b8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f1ba:	6a3b      	ldr	r3, [r7, #32]
 800f1bc:	2202      	movs	r2, #2
 800f1be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800f1c2:	79fb      	ldrb	r3, [r7, #7]
 800f1c4:	2b04      	cmp	r3, #4
 800f1c6:	d828      	bhi.n	800f21a <xTaskGenericNotify+0xae>
 800f1c8:	a201      	add	r2, pc, #4	; (adr r2, 800f1d0 <xTaskGenericNotify+0x64>)
 800f1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ce:	bf00      	nop
 800f1d0:	0800f23b 	.word	0x0800f23b
 800f1d4:	0800f1e5 	.word	0x0800f1e5
 800f1d8:	0800f1f3 	.word	0x0800f1f3
 800f1dc:	0800f1ff 	.word	0x0800f1ff
 800f1e0:	0800f207 	.word	0x0800f207
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f1e4:	6a3b      	ldr	r3, [r7, #32]
 800f1e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	431a      	orrs	r2, r3
 800f1ec:	6a3b      	ldr	r3, [r7, #32]
 800f1ee:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f1f0:	e026      	b.n	800f240 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f1f2:	6a3b      	ldr	r3, [r7, #32]
 800f1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1f6:	1c5a      	adds	r2, r3, #1
 800f1f8:	6a3b      	ldr	r3, [r7, #32]
 800f1fa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f1fc:	e020      	b.n	800f240 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f1fe:	6a3b      	ldr	r3, [r7, #32]
 800f200:	68ba      	ldr	r2, [r7, #8]
 800f202:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f204:	e01c      	b.n	800f240 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f206:	7ffb      	ldrb	r3, [r7, #31]
 800f208:	2b02      	cmp	r3, #2
 800f20a:	d003      	beq.n	800f214 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f20c:	6a3b      	ldr	r3, [r7, #32]
 800f20e:	68ba      	ldr	r2, [r7, #8]
 800f210:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f212:	e015      	b.n	800f240 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800f214:	2300      	movs	r3, #0
 800f216:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800f218:	e012      	b.n	800f240 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f21a:	6a3b      	ldr	r3, [r7, #32]
 800f21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f222:	d00c      	beq.n	800f23e <xTaskGenericNotify+0xd2>
	__asm volatile
 800f224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f228:	f383 8811 	msr	BASEPRI, r3
 800f22c:	f3bf 8f6f 	isb	sy
 800f230:	f3bf 8f4f 	dsb	sy
 800f234:	617b      	str	r3, [r7, #20]
}
 800f236:	bf00      	nop
 800f238:	e7fe      	b.n	800f238 <xTaskGenericNotify+0xcc>
					break;
 800f23a:	bf00      	nop
 800f23c:	e000      	b.n	800f240 <xTaskGenericNotify+0xd4>

					break;
 800f23e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f240:	7ffb      	ldrb	r3, [r7, #31]
 800f242:	2b01      	cmp	r3, #1
 800f244:	d13a      	bne.n	800f2bc <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f246:	6a3b      	ldr	r3, [r7, #32]
 800f248:	3304      	adds	r3, #4
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fd fea0 	bl	800cf90 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f250:	6a3b      	ldr	r3, [r7, #32]
 800f252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f254:	4b1d      	ldr	r3, [pc, #116]	; (800f2cc <xTaskGenericNotify+0x160>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d903      	bls.n	800f264 <xTaskGenericNotify+0xf8>
 800f25c:	6a3b      	ldr	r3, [r7, #32]
 800f25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f260:	4a1a      	ldr	r2, [pc, #104]	; (800f2cc <xTaskGenericNotify+0x160>)
 800f262:	6013      	str	r3, [r2, #0]
 800f264:	6a3b      	ldr	r3, [r7, #32]
 800f266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f268:	4613      	mov	r3, r2
 800f26a:	009b      	lsls	r3, r3, #2
 800f26c:	4413      	add	r3, r2
 800f26e:	009b      	lsls	r3, r3, #2
 800f270:	4a17      	ldr	r2, [pc, #92]	; (800f2d0 <xTaskGenericNotify+0x164>)
 800f272:	441a      	add	r2, r3
 800f274:	6a3b      	ldr	r3, [r7, #32]
 800f276:	3304      	adds	r3, #4
 800f278:	4619      	mov	r1, r3
 800f27a:	4610      	mov	r0, r2
 800f27c:	f7fd fe2b 	bl	800ced6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f280:	6a3b      	ldr	r3, [r7, #32]
 800f282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f284:	2b00      	cmp	r3, #0
 800f286:	d00a      	beq.n	800f29e <xTaskGenericNotify+0x132>
	__asm volatile
 800f288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f28c:	f383 8811 	msr	BASEPRI, r3
 800f290:	f3bf 8f6f 	isb	sy
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	613b      	str	r3, [r7, #16]
}
 800f29a:	bf00      	nop
 800f29c:	e7fe      	b.n	800f29c <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f29e:	6a3b      	ldr	r3, [r7, #32]
 800f2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2a2:	4b0c      	ldr	r3, [pc, #48]	; (800f2d4 <xTaskGenericNotify+0x168>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d907      	bls.n	800f2bc <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f2ac:	4b0a      	ldr	r3, [pc, #40]	; (800f2d8 <xTaskGenericNotify+0x16c>)
 800f2ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2b2:	601a      	str	r2, [r3, #0]
 800f2b4:	f3bf 8f4f 	dsb	sy
 800f2b8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f2bc:	f000 fd0a 	bl	800fcd4 <vPortExitCritical>

		return xReturn;
 800f2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3728      	adds	r7, #40	; 0x28
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	20000fc8 	.word	0x20000fc8
 800f2d0:	20000af0 	.word	0x20000af0
 800f2d4:	20000aec 	.word	0x20000aec
 800f2d8:	e000ed04 	.word	0xe000ed04

0800f2dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f2e6:	4b21      	ldr	r3, [pc, #132]	; (800f36c <prvAddCurrentTaskToDelayedList+0x90>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f2ec:	4b20      	ldr	r3, [pc, #128]	; (800f370 <prvAddCurrentTaskToDelayedList+0x94>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	3304      	adds	r3, #4
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7fd fe4c 	bl	800cf90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2fe:	d10a      	bne.n	800f316 <prvAddCurrentTaskToDelayedList+0x3a>
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d007      	beq.n	800f316 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f306:	4b1a      	ldr	r3, [pc, #104]	; (800f370 <prvAddCurrentTaskToDelayedList+0x94>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	3304      	adds	r3, #4
 800f30c:	4619      	mov	r1, r3
 800f30e:	4819      	ldr	r0, [pc, #100]	; (800f374 <prvAddCurrentTaskToDelayedList+0x98>)
 800f310:	f7fd fde1 	bl	800ced6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f314:	e026      	b.n	800f364 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f316:	68fa      	ldr	r2, [r7, #12]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	4413      	add	r3, r2
 800f31c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f31e:	4b14      	ldr	r3, [pc, #80]	; (800f370 <prvAddCurrentTaskToDelayedList+0x94>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	68ba      	ldr	r2, [r7, #8]
 800f324:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f326:	68ba      	ldr	r2, [r7, #8]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d209      	bcs.n	800f342 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f32e:	4b12      	ldr	r3, [pc, #72]	; (800f378 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f330:	681a      	ldr	r2, [r3, #0]
 800f332:	4b0f      	ldr	r3, [pc, #60]	; (800f370 <prvAddCurrentTaskToDelayedList+0x94>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	3304      	adds	r3, #4
 800f338:	4619      	mov	r1, r3
 800f33a:	4610      	mov	r0, r2
 800f33c:	f7fd fdef 	bl	800cf1e <vListInsert>
}
 800f340:	e010      	b.n	800f364 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f342:	4b0e      	ldr	r3, [pc, #56]	; (800f37c <prvAddCurrentTaskToDelayedList+0xa0>)
 800f344:	681a      	ldr	r2, [r3, #0]
 800f346:	4b0a      	ldr	r3, [pc, #40]	; (800f370 <prvAddCurrentTaskToDelayedList+0x94>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	3304      	adds	r3, #4
 800f34c:	4619      	mov	r1, r3
 800f34e:	4610      	mov	r0, r2
 800f350:	f7fd fde5 	bl	800cf1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f354:	4b0a      	ldr	r3, [pc, #40]	; (800f380 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	68ba      	ldr	r2, [r7, #8]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d202      	bcs.n	800f364 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f35e:	4a08      	ldr	r2, [pc, #32]	; (800f380 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	6013      	str	r3, [r2, #0]
}
 800f364:	bf00      	nop
 800f366:	3710      	adds	r7, #16
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	20000fc4 	.word	0x20000fc4
 800f370:	20000aec 	.word	0x20000aec
 800f374:	20000fac 	.word	0x20000fac
 800f378:	20000f7c 	.word	0x20000f7c
 800f37c:	20000f78 	.word	0x20000f78
 800f380:	20000fe0 	.word	0x20000fe0

0800f384 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b08a      	sub	sp, #40	; 0x28
 800f388:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f38a:	2300      	movs	r3, #0
 800f38c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f38e:	f000 fb07 	bl	800f9a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f392:	4b1c      	ldr	r3, [pc, #112]	; (800f404 <xTimerCreateTimerTask+0x80>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d021      	beq.n	800f3de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f39a:	2300      	movs	r3, #0
 800f39c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f3a2:	1d3a      	adds	r2, r7, #4
 800f3a4:	f107 0108 	add.w	r1, r7, #8
 800f3a8:	f107 030c 	add.w	r3, r7, #12
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7fd fd4b 	bl	800ce48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f3b2:	6879      	ldr	r1, [r7, #4]
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	9202      	str	r2, [sp, #8]
 800f3ba:	9301      	str	r3, [sp, #4]
 800f3bc:	2302      	movs	r3, #2
 800f3be:	9300      	str	r3, [sp, #0]
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	460a      	mov	r2, r1
 800f3c4:	4910      	ldr	r1, [pc, #64]	; (800f408 <xTimerCreateTimerTask+0x84>)
 800f3c6:	4811      	ldr	r0, [pc, #68]	; (800f40c <xTimerCreateTimerTask+0x88>)
 800f3c8:	f7fe fed0 	bl	800e16c <xTaskCreateStatic>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	4a10      	ldr	r2, [pc, #64]	; (800f410 <xTimerCreateTimerTask+0x8c>)
 800f3d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f3d2:	4b0f      	ldr	r3, [pc, #60]	; (800f410 <xTimerCreateTimerTask+0x8c>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d001      	beq.n	800f3de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f3da:	2301      	movs	r3, #1
 800f3dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d10a      	bne.n	800f3fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e8:	f383 8811 	msr	BASEPRI, r3
 800f3ec:	f3bf 8f6f 	isb	sy
 800f3f0:	f3bf 8f4f 	dsb	sy
 800f3f4:	613b      	str	r3, [r7, #16]
}
 800f3f6:	bf00      	nop
 800f3f8:	e7fe      	b.n	800f3f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f3fa:	697b      	ldr	r3, [r7, #20]
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3718      	adds	r7, #24
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}
 800f404:	2000101c 	.word	0x2000101c
 800f408:	0801673c 	.word	0x0801673c
 800f40c:	0800f549 	.word	0x0800f549
 800f410:	20001020 	.word	0x20001020

0800f414 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b08a      	sub	sp, #40	; 0x28
 800f418:	af00      	add	r7, sp, #0
 800f41a:	60f8      	str	r0, [r7, #12]
 800f41c:	60b9      	str	r1, [r7, #8]
 800f41e:	607a      	str	r2, [r7, #4]
 800f420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f422:	2300      	movs	r3, #0
 800f424:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d10a      	bne.n	800f442 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f430:	f383 8811 	msr	BASEPRI, r3
 800f434:	f3bf 8f6f 	isb	sy
 800f438:	f3bf 8f4f 	dsb	sy
 800f43c:	623b      	str	r3, [r7, #32]
}
 800f43e:	bf00      	nop
 800f440:	e7fe      	b.n	800f440 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f442:	4b1a      	ldr	r3, [pc, #104]	; (800f4ac <xTimerGenericCommand+0x98>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d02a      	beq.n	800f4a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	2b05      	cmp	r3, #5
 800f45a:	dc18      	bgt.n	800f48e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f45c:	f7ff fcb4 	bl	800edc8 <xTaskGetSchedulerState>
 800f460:	4603      	mov	r3, r0
 800f462:	2b02      	cmp	r3, #2
 800f464:	d109      	bne.n	800f47a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f466:	4b11      	ldr	r3, [pc, #68]	; (800f4ac <xTimerGenericCommand+0x98>)
 800f468:	6818      	ldr	r0, [r3, #0]
 800f46a:	f107 0110 	add.w	r1, r7, #16
 800f46e:	2300      	movs	r3, #0
 800f470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f472:	f7fe f815 	bl	800d4a0 <xQueueGenericSend>
 800f476:	6278      	str	r0, [r7, #36]	; 0x24
 800f478:	e012      	b.n	800f4a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f47a:	4b0c      	ldr	r3, [pc, #48]	; (800f4ac <xTimerGenericCommand+0x98>)
 800f47c:	6818      	ldr	r0, [r3, #0]
 800f47e:	f107 0110 	add.w	r1, r7, #16
 800f482:	2300      	movs	r3, #0
 800f484:	2200      	movs	r2, #0
 800f486:	f7fe f80b 	bl	800d4a0 <xQueueGenericSend>
 800f48a:	6278      	str	r0, [r7, #36]	; 0x24
 800f48c:	e008      	b.n	800f4a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f48e:	4b07      	ldr	r3, [pc, #28]	; (800f4ac <xTimerGenericCommand+0x98>)
 800f490:	6818      	ldr	r0, [r3, #0]
 800f492:	f107 0110 	add.w	r1, r7, #16
 800f496:	2300      	movs	r3, #0
 800f498:	683a      	ldr	r2, [r7, #0]
 800f49a:	f7fe f8ff 	bl	800d69c <xQueueGenericSendFromISR>
 800f49e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3728      	adds	r7, #40	; 0x28
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	2000101c 	.word	0x2000101c

0800f4b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b088      	sub	sp, #32
 800f4b4:	af02      	add	r7, sp, #8
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4ba:	4b22      	ldr	r3, [pc, #136]	; (800f544 <prvProcessExpiredTimer+0x94>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	68db      	ldr	r3, [r3, #12]
 800f4c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	3304      	adds	r3, #4
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7fd fd61 	bl	800cf90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4d4:	f003 0304 	and.w	r3, r3, #4
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d022      	beq.n	800f522 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	699a      	ldr	r2, [r3, #24]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	18d1      	adds	r1, r2, r3
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	683a      	ldr	r2, [r7, #0]
 800f4e8:	6978      	ldr	r0, [r7, #20]
 800f4ea:	f000 f8d1 	bl	800f690 <prvInsertTimerInActiveList>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d01f      	beq.n	800f534 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	9300      	str	r3, [sp, #0]
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	2100      	movs	r1, #0
 800f4fe:	6978      	ldr	r0, [r7, #20]
 800f500:	f7ff ff88 	bl	800f414 <xTimerGenericCommand>
 800f504:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f506:	693b      	ldr	r3, [r7, #16]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d113      	bne.n	800f534 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f510:	f383 8811 	msr	BASEPRI, r3
 800f514:	f3bf 8f6f 	isb	sy
 800f518:	f3bf 8f4f 	dsb	sy
 800f51c:	60fb      	str	r3, [r7, #12]
}
 800f51e:	bf00      	nop
 800f520:	e7fe      	b.n	800f520 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f528:	f023 0301 	bic.w	r3, r3, #1
 800f52c:	b2da      	uxtb	r2, r3
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	6a1b      	ldr	r3, [r3, #32]
 800f538:	6978      	ldr	r0, [r7, #20]
 800f53a:	4798      	blx	r3
}
 800f53c:	bf00      	nop
 800f53e:	3718      	adds	r7, #24
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}
 800f544:	20001014 	.word	0x20001014

0800f548 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b084      	sub	sp, #16
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f550:	f107 0308 	add.w	r3, r7, #8
 800f554:	4618      	mov	r0, r3
 800f556:	f000 f857 	bl	800f608 <prvGetNextExpireTime>
 800f55a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	4619      	mov	r1, r3
 800f560:	68f8      	ldr	r0, [r7, #12]
 800f562:	f000 f803 	bl	800f56c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f566:	f000 f8d5 	bl	800f714 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f56a:	e7f1      	b.n	800f550 <prvTimerTask+0x8>

0800f56c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b084      	sub	sp, #16
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f576:	f7ff f835 	bl	800e5e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f57a:	f107 0308 	add.w	r3, r7, #8
 800f57e:	4618      	mov	r0, r3
 800f580:	f000 f866 	bl	800f650 <prvSampleTimeNow>
 800f584:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d130      	bne.n	800f5ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d10a      	bne.n	800f5a8 <prvProcessTimerOrBlockTask+0x3c>
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	429a      	cmp	r2, r3
 800f598:	d806      	bhi.n	800f5a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f59a:	f7ff f831 	bl	800e600 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f59e:	68f9      	ldr	r1, [r7, #12]
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f7ff ff85 	bl	800f4b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f5a6:	e024      	b.n	800f5f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d008      	beq.n	800f5c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f5ae:	4b13      	ldr	r3, [pc, #76]	; (800f5fc <prvProcessTimerOrBlockTask+0x90>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d101      	bne.n	800f5bc <prvProcessTimerOrBlockTask+0x50>
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	e000      	b.n	800f5be <prvProcessTimerOrBlockTask+0x52>
 800f5bc:	2300      	movs	r3, #0
 800f5be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f5c0:	4b0f      	ldr	r3, [pc, #60]	; (800f600 <prvProcessTimerOrBlockTask+0x94>)
 800f5c2:	6818      	ldr	r0, [r3, #0]
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	1ad3      	subs	r3, r2, r3
 800f5ca:	683a      	ldr	r2, [r7, #0]
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	f7fe fd99 	bl	800e104 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f5d2:	f7ff f815 	bl	800e600 <xTaskResumeAll>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d10a      	bne.n	800f5f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f5dc:	4b09      	ldr	r3, [pc, #36]	; (800f604 <prvProcessTimerOrBlockTask+0x98>)
 800f5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5e2:	601a      	str	r2, [r3, #0]
 800f5e4:	f3bf 8f4f 	dsb	sy
 800f5e8:	f3bf 8f6f 	isb	sy
}
 800f5ec:	e001      	b.n	800f5f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f5ee:	f7ff f807 	bl	800e600 <xTaskResumeAll>
}
 800f5f2:	bf00      	nop
 800f5f4:	3710      	adds	r7, #16
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	20001018 	.word	0x20001018
 800f600:	2000101c 	.word	0x2000101c
 800f604:	e000ed04 	.word	0xe000ed04

0800f608 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f608:	b480      	push	{r7}
 800f60a:	b085      	sub	sp, #20
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f610:	4b0e      	ldr	r3, [pc, #56]	; (800f64c <prvGetNextExpireTime+0x44>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d101      	bne.n	800f61e <prvGetNextExpireTime+0x16>
 800f61a:	2201      	movs	r2, #1
 800f61c:	e000      	b.n	800f620 <prvGetNextExpireTime+0x18>
 800f61e:	2200      	movs	r2, #0
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d105      	bne.n	800f638 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f62c:	4b07      	ldr	r3, [pc, #28]	; (800f64c <prvGetNextExpireTime+0x44>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	60fb      	str	r3, [r7, #12]
 800f636:	e001      	b.n	800f63c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f638:	2300      	movs	r3, #0
 800f63a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f63c:	68fb      	ldr	r3, [r7, #12]
}
 800f63e:	4618      	mov	r0, r3
 800f640:	3714      	adds	r7, #20
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr
 800f64a:	bf00      	nop
 800f64c:	20001014 	.word	0x20001014

0800f650 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b084      	sub	sp, #16
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f658:	f7ff f870 	bl	800e73c <xTaskGetTickCount>
 800f65c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f65e:	4b0b      	ldr	r3, [pc, #44]	; (800f68c <prvSampleTimeNow+0x3c>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	68fa      	ldr	r2, [r7, #12]
 800f664:	429a      	cmp	r2, r3
 800f666:	d205      	bcs.n	800f674 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f668:	f000 f936 	bl	800f8d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2201      	movs	r2, #1
 800f670:	601a      	str	r2, [r3, #0]
 800f672:	e002      	b.n	800f67a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2200      	movs	r2, #0
 800f678:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f67a:	4a04      	ldr	r2, [pc, #16]	; (800f68c <prvSampleTimeNow+0x3c>)
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f680:	68fb      	ldr	r3, [r7, #12]
}
 800f682:	4618      	mov	r0, r3
 800f684:	3710      	adds	r7, #16
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	20001024 	.word	0x20001024

0800f690 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b086      	sub	sp, #24
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	607a      	str	r2, [r7, #4]
 800f69c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	68ba      	ldr	r2, [r7, #8]
 800f6a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	68fa      	ldr	r2, [r7, #12]
 800f6ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f6ae:	68ba      	ldr	r2, [r7, #8]
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d812      	bhi.n	800f6dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	1ad2      	subs	r2, r2, r3
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	699b      	ldr	r3, [r3, #24]
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d302      	bcc.n	800f6ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	617b      	str	r3, [r7, #20]
 800f6c8:	e01b      	b.n	800f702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f6ca:	4b10      	ldr	r3, [pc, #64]	; (800f70c <prvInsertTimerInActiveList+0x7c>)
 800f6cc:	681a      	ldr	r2, [r3, #0]
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	3304      	adds	r3, #4
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	4610      	mov	r0, r2
 800f6d6:	f7fd fc22 	bl	800cf1e <vListInsert>
 800f6da:	e012      	b.n	800f702 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f6dc:	687a      	ldr	r2, [r7, #4]
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d206      	bcs.n	800f6f2 <prvInsertTimerInActiveList+0x62>
 800f6e4:	68ba      	ldr	r2, [r7, #8]
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d302      	bcc.n	800f6f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	617b      	str	r3, [r7, #20]
 800f6f0:	e007      	b.n	800f702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f6f2:	4b07      	ldr	r3, [pc, #28]	; (800f710 <prvInsertTimerInActiveList+0x80>)
 800f6f4:	681a      	ldr	r2, [r3, #0]
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	3304      	adds	r3, #4
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	4610      	mov	r0, r2
 800f6fe:	f7fd fc0e 	bl	800cf1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f702:	697b      	ldr	r3, [r7, #20]
}
 800f704:	4618      	mov	r0, r3
 800f706:	3718      	adds	r7, #24
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}
 800f70c:	20001018 	.word	0x20001018
 800f710:	20001014 	.word	0x20001014

0800f714 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b08e      	sub	sp, #56	; 0x38
 800f718:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f71a:	e0ca      	b.n	800f8b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	da18      	bge.n	800f754 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f722:	1d3b      	adds	r3, r7, #4
 800f724:	3304      	adds	r3, #4
 800f726:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d10a      	bne.n	800f744 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f732:	f383 8811 	msr	BASEPRI, r3
 800f736:	f3bf 8f6f 	isb	sy
 800f73a:	f3bf 8f4f 	dsb	sy
 800f73e:	61fb      	str	r3, [r7, #28]
}
 800f740:	bf00      	nop
 800f742:	e7fe      	b.n	800f742 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f74a:	6850      	ldr	r0, [r2, #4]
 800f74c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f74e:	6892      	ldr	r2, [r2, #8]
 800f750:	4611      	mov	r1, r2
 800f752:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2b00      	cmp	r3, #0
 800f758:	f2c0 80aa 	blt.w	800f8b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f762:	695b      	ldr	r3, [r3, #20]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d004      	beq.n	800f772 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76a:	3304      	adds	r3, #4
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7fd fc0f 	bl	800cf90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f772:	463b      	mov	r3, r7
 800f774:	4618      	mov	r0, r3
 800f776:	f7ff ff6b 	bl	800f650 <prvSampleTimeNow>
 800f77a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2b09      	cmp	r3, #9
 800f780:	f200 8097 	bhi.w	800f8b2 <prvProcessReceivedCommands+0x19e>
 800f784:	a201      	add	r2, pc, #4	; (adr r2, 800f78c <prvProcessReceivedCommands+0x78>)
 800f786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f78a:	bf00      	nop
 800f78c:	0800f7b5 	.word	0x0800f7b5
 800f790:	0800f7b5 	.word	0x0800f7b5
 800f794:	0800f7b5 	.word	0x0800f7b5
 800f798:	0800f829 	.word	0x0800f829
 800f79c:	0800f83d 	.word	0x0800f83d
 800f7a0:	0800f887 	.word	0x0800f887
 800f7a4:	0800f7b5 	.word	0x0800f7b5
 800f7a8:	0800f7b5 	.word	0x0800f7b5
 800f7ac:	0800f829 	.word	0x0800f829
 800f7b0:	0800f83d 	.word	0x0800f83d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7ba:	f043 0301 	orr.w	r3, r3, #1
 800f7be:	b2da      	uxtb	r2, r3
 800f7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f7c6:	68ba      	ldr	r2, [r7, #8]
 800f7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ca:	699b      	ldr	r3, [r3, #24]
 800f7cc:	18d1      	adds	r1, r2, r3
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7d4:	f7ff ff5c 	bl	800f690 <prvInsertTimerInActiveList>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d069      	beq.n	800f8b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e0:	6a1b      	ldr	r3, [r3, #32]
 800f7e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7ec:	f003 0304 	and.w	r3, r3, #4
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d05e      	beq.n	800f8b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f7f4:	68ba      	ldr	r2, [r7, #8]
 800f7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7f8:	699b      	ldr	r3, [r3, #24]
 800f7fa:	441a      	add	r2, r3
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	9300      	str	r3, [sp, #0]
 800f800:	2300      	movs	r3, #0
 800f802:	2100      	movs	r1, #0
 800f804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f806:	f7ff fe05 	bl	800f414 <xTimerGenericCommand>
 800f80a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f80c:	6a3b      	ldr	r3, [r7, #32]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d14f      	bne.n	800f8b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f816:	f383 8811 	msr	BASEPRI, r3
 800f81a:	f3bf 8f6f 	isb	sy
 800f81e:	f3bf 8f4f 	dsb	sy
 800f822:	61bb      	str	r3, [r7, #24]
}
 800f824:	bf00      	nop
 800f826:	e7fe      	b.n	800f826 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f82a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f82e:	f023 0301 	bic.w	r3, r3, #1
 800f832:	b2da      	uxtb	r2, r3
 800f834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f83a:	e03a      	b.n	800f8b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f842:	f043 0301 	orr.w	r3, r3, #1
 800f846:	b2da      	uxtb	r2, r3
 800f848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f84e:	68ba      	ldr	r2, [r7, #8]
 800f850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f852:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f856:	699b      	ldr	r3, [r3, #24]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d10a      	bne.n	800f872 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f860:	f383 8811 	msr	BASEPRI, r3
 800f864:	f3bf 8f6f 	isb	sy
 800f868:	f3bf 8f4f 	dsb	sy
 800f86c:	617b      	str	r3, [r7, #20]
}
 800f86e:	bf00      	nop
 800f870:	e7fe      	b.n	800f870 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f874:	699a      	ldr	r2, [r3, #24]
 800f876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f878:	18d1      	adds	r1, r2, r3
 800f87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f87e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f880:	f7ff ff06 	bl	800f690 <prvInsertTimerInActiveList>
					break;
 800f884:	e015      	b.n	800f8b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f88c:	f003 0302 	and.w	r3, r3, #2
 800f890:	2b00      	cmp	r3, #0
 800f892:	d103      	bne.n	800f89c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f896:	f000 fbdb 	bl	8010050 <vPortFree>
 800f89a:	e00a      	b.n	800f8b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8a2:	f023 0301 	bic.w	r3, r3, #1
 800f8a6:	b2da      	uxtb	r2, r3
 800f8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f8ae:	e000      	b.n	800f8b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f8b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f8b2:	4b08      	ldr	r3, [pc, #32]	; (800f8d4 <prvProcessReceivedCommands+0x1c0>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	1d39      	adds	r1, r7, #4
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fe f816 	bl	800d8ec <xQueueReceive>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	f47f af2a 	bne.w	800f71c <prvProcessReceivedCommands+0x8>
	}
}
 800f8c8:	bf00      	nop
 800f8ca:	bf00      	nop
 800f8cc:	3730      	adds	r7, #48	; 0x30
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	2000101c 	.word	0x2000101c

0800f8d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b088      	sub	sp, #32
 800f8dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f8de:	e048      	b.n	800f972 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f8e0:	4b2d      	ldr	r3, [pc, #180]	; (800f998 <prvSwitchTimerLists+0xc0>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	68db      	ldr	r3, [r3, #12]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8ea:	4b2b      	ldr	r3, [pc, #172]	; (800f998 <prvSwitchTimerLists+0xc0>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	68db      	ldr	r3, [r3, #12]
 800f8f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	3304      	adds	r3, #4
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7fd fb49 	bl	800cf90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	6a1b      	ldr	r3, [r3, #32]
 800f902:	68f8      	ldr	r0, [r7, #12]
 800f904:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f90c:	f003 0304 	and.w	r3, r3, #4
 800f910:	2b00      	cmp	r3, #0
 800f912:	d02e      	beq.n	800f972 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	699b      	ldr	r3, [r3, #24]
 800f918:	693a      	ldr	r2, [r7, #16]
 800f91a:	4413      	add	r3, r2
 800f91c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f91e:	68ba      	ldr	r2, [r7, #8]
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	429a      	cmp	r2, r3
 800f924:	d90e      	bls.n	800f944 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	68ba      	ldr	r2, [r7, #8]
 800f92a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	68fa      	ldr	r2, [r7, #12]
 800f930:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f932:	4b19      	ldr	r3, [pc, #100]	; (800f998 <prvSwitchTimerLists+0xc0>)
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	3304      	adds	r3, #4
 800f93a:	4619      	mov	r1, r3
 800f93c:	4610      	mov	r0, r2
 800f93e:	f7fd faee 	bl	800cf1e <vListInsert>
 800f942:	e016      	b.n	800f972 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f944:	2300      	movs	r3, #0
 800f946:	9300      	str	r3, [sp, #0]
 800f948:	2300      	movs	r3, #0
 800f94a:	693a      	ldr	r2, [r7, #16]
 800f94c:	2100      	movs	r1, #0
 800f94e:	68f8      	ldr	r0, [r7, #12]
 800f950:	f7ff fd60 	bl	800f414 <xTimerGenericCommand>
 800f954:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d10a      	bne.n	800f972 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f960:	f383 8811 	msr	BASEPRI, r3
 800f964:	f3bf 8f6f 	isb	sy
 800f968:	f3bf 8f4f 	dsb	sy
 800f96c:	603b      	str	r3, [r7, #0]
}
 800f96e:	bf00      	nop
 800f970:	e7fe      	b.n	800f970 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f972:	4b09      	ldr	r3, [pc, #36]	; (800f998 <prvSwitchTimerLists+0xc0>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d1b1      	bne.n	800f8e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f97c:	4b06      	ldr	r3, [pc, #24]	; (800f998 <prvSwitchTimerLists+0xc0>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f982:	4b06      	ldr	r3, [pc, #24]	; (800f99c <prvSwitchTimerLists+0xc4>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	4a04      	ldr	r2, [pc, #16]	; (800f998 <prvSwitchTimerLists+0xc0>)
 800f988:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f98a:	4a04      	ldr	r2, [pc, #16]	; (800f99c <prvSwitchTimerLists+0xc4>)
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	6013      	str	r3, [r2, #0]
}
 800f990:	bf00      	nop
 800f992:	3718      	adds	r7, #24
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}
 800f998:	20001014 	.word	0x20001014
 800f99c:	20001018 	.word	0x20001018

0800f9a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b082      	sub	sp, #8
 800f9a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f9a6:	f000 f965 	bl	800fc74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f9aa:	4b15      	ldr	r3, [pc, #84]	; (800fa00 <prvCheckForValidListAndQueue+0x60>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d120      	bne.n	800f9f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f9b2:	4814      	ldr	r0, [pc, #80]	; (800fa04 <prvCheckForValidListAndQueue+0x64>)
 800f9b4:	f7fd fa62 	bl	800ce7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f9b8:	4813      	ldr	r0, [pc, #76]	; (800fa08 <prvCheckForValidListAndQueue+0x68>)
 800f9ba:	f7fd fa5f 	bl	800ce7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f9be:	4b13      	ldr	r3, [pc, #76]	; (800fa0c <prvCheckForValidListAndQueue+0x6c>)
 800f9c0:	4a10      	ldr	r2, [pc, #64]	; (800fa04 <prvCheckForValidListAndQueue+0x64>)
 800f9c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f9c4:	4b12      	ldr	r3, [pc, #72]	; (800fa10 <prvCheckForValidListAndQueue+0x70>)
 800f9c6:	4a10      	ldr	r2, [pc, #64]	; (800fa08 <prvCheckForValidListAndQueue+0x68>)
 800f9c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	9300      	str	r3, [sp, #0]
 800f9ce:	4b11      	ldr	r3, [pc, #68]	; (800fa14 <prvCheckForValidListAndQueue+0x74>)
 800f9d0:	4a11      	ldr	r2, [pc, #68]	; (800fa18 <prvCheckForValidListAndQueue+0x78>)
 800f9d2:	2110      	movs	r1, #16
 800f9d4:	200a      	movs	r0, #10
 800f9d6:	f7fd fb6d 	bl	800d0b4 <xQueueGenericCreateStatic>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	4a08      	ldr	r2, [pc, #32]	; (800fa00 <prvCheckForValidListAndQueue+0x60>)
 800f9de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f9e0:	4b07      	ldr	r3, [pc, #28]	; (800fa00 <prvCheckForValidListAndQueue+0x60>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d005      	beq.n	800f9f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f9e8:	4b05      	ldr	r3, [pc, #20]	; (800fa00 <prvCheckForValidListAndQueue+0x60>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	490b      	ldr	r1, [pc, #44]	; (800fa1c <prvCheckForValidListAndQueue+0x7c>)
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7fe fb34 	bl	800e05c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f9f4:	f000 f96e 	bl	800fcd4 <vPortExitCritical>
}
 800f9f8:	bf00      	nop
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
 800f9fe:	bf00      	nop
 800fa00:	2000101c 	.word	0x2000101c
 800fa04:	20000fec 	.word	0x20000fec
 800fa08:	20001000 	.word	0x20001000
 800fa0c:	20001014 	.word	0x20001014
 800fa10:	20001018 	.word	0x20001018
 800fa14:	200010c8 	.word	0x200010c8
 800fa18:	20001028 	.word	0x20001028
 800fa1c:	08016744 	.word	0x08016744

0800fa20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fa20:	b480      	push	{r7}
 800fa22:	b085      	sub	sp, #20
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	60b9      	str	r1, [r7, #8]
 800fa2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	3b04      	subs	r3, #4
 800fa30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fa38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	3b04      	subs	r3, #4
 800fa3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	f023 0201 	bic.w	r2, r3, #1
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	3b04      	subs	r3, #4
 800fa4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fa50:	4a0c      	ldr	r2, [pc, #48]	; (800fa84 <pxPortInitialiseStack+0x64>)
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	3b14      	subs	r3, #20
 800fa5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	3b04      	subs	r3, #4
 800fa66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f06f 0202 	mvn.w	r2, #2
 800fa6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	3b20      	subs	r3, #32
 800fa74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fa76:	68fb      	ldr	r3, [r7, #12]
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3714      	adds	r7, #20
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr
 800fa84:	0800fa89 	.word	0x0800fa89

0800fa88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b085      	sub	sp, #20
 800fa8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fa92:	4b12      	ldr	r3, [pc, #72]	; (800fadc <prvTaskExitError+0x54>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa9a:	d00a      	beq.n	800fab2 <prvTaskExitError+0x2a>
	__asm volatile
 800fa9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa0:	f383 8811 	msr	BASEPRI, r3
 800faa4:	f3bf 8f6f 	isb	sy
 800faa8:	f3bf 8f4f 	dsb	sy
 800faac:	60fb      	str	r3, [r7, #12]
}
 800faae:	bf00      	nop
 800fab0:	e7fe      	b.n	800fab0 <prvTaskExitError+0x28>
	__asm volatile
 800fab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab6:	f383 8811 	msr	BASEPRI, r3
 800faba:	f3bf 8f6f 	isb	sy
 800fabe:	f3bf 8f4f 	dsb	sy
 800fac2:	60bb      	str	r3, [r7, #8]
}
 800fac4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fac6:	bf00      	nop
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d0fc      	beq.n	800fac8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800face:	bf00      	nop
 800fad0:	bf00      	nop
 800fad2:	3714      	adds	r7, #20
 800fad4:	46bd      	mov	sp, r7
 800fad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fada:	4770      	bx	lr
 800fadc:	20000028 	.word	0x20000028

0800fae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fae0:	4b07      	ldr	r3, [pc, #28]	; (800fb00 <pxCurrentTCBConst2>)
 800fae2:	6819      	ldr	r1, [r3, #0]
 800fae4:	6808      	ldr	r0, [r1, #0]
 800fae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faea:	f380 8809 	msr	PSP, r0
 800faee:	f3bf 8f6f 	isb	sy
 800faf2:	f04f 0000 	mov.w	r0, #0
 800faf6:	f380 8811 	msr	BASEPRI, r0
 800fafa:	4770      	bx	lr
 800fafc:	f3af 8000 	nop.w

0800fb00 <pxCurrentTCBConst2>:
 800fb00:	20000aec 	.word	0x20000aec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fb04:	bf00      	nop
 800fb06:	bf00      	nop

0800fb08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fb08:	4808      	ldr	r0, [pc, #32]	; (800fb2c <prvPortStartFirstTask+0x24>)
 800fb0a:	6800      	ldr	r0, [r0, #0]
 800fb0c:	6800      	ldr	r0, [r0, #0]
 800fb0e:	f380 8808 	msr	MSP, r0
 800fb12:	f04f 0000 	mov.w	r0, #0
 800fb16:	f380 8814 	msr	CONTROL, r0
 800fb1a:	b662      	cpsie	i
 800fb1c:	b661      	cpsie	f
 800fb1e:	f3bf 8f4f 	dsb	sy
 800fb22:	f3bf 8f6f 	isb	sy
 800fb26:	df00      	svc	0
 800fb28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fb2a:	bf00      	nop
 800fb2c:	e000ed08 	.word	0xe000ed08

0800fb30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b086      	sub	sp, #24
 800fb34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fb36:	4b46      	ldr	r3, [pc, #280]	; (800fc50 <xPortStartScheduler+0x120>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	4a46      	ldr	r2, [pc, #280]	; (800fc54 <xPortStartScheduler+0x124>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d10a      	bne.n	800fb56 <xPortStartScheduler+0x26>
	__asm volatile
 800fb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb44:	f383 8811 	msr	BASEPRI, r3
 800fb48:	f3bf 8f6f 	isb	sy
 800fb4c:	f3bf 8f4f 	dsb	sy
 800fb50:	613b      	str	r3, [r7, #16]
}
 800fb52:	bf00      	nop
 800fb54:	e7fe      	b.n	800fb54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fb56:	4b3e      	ldr	r3, [pc, #248]	; (800fc50 <xPortStartScheduler+0x120>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	4a3f      	ldr	r2, [pc, #252]	; (800fc58 <xPortStartScheduler+0x128>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d10a      	bne.n	800fb76 <xPortStartScheduler+0x46>
	__asm volatile
 800fb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb64:	f383 8811 	msr	BASEPRI, r3
 800fb68:	f3bf 8f6f 	isb	sy
 800fb6c:	f3bf 8f4f 	dsb	sy
 800fb70:	60fb      	str	r3, [r7, #12]
}
 800fb72:	bf00      	nop
 800fb74:	e7fe      	b.n	800fb74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fb76:	4b39      	ldr	r3, [pc, #228]	; (800fc5c <xPortStartScheduler+0x12c>)
 800fb78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	22ff      	movs	r2, #255	; 0xff
 800fb86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fb90:	78fb      	ldrb	r3, [r7, #3]
 800fb92:	b2db      	uxtb	r3, r3
 800fb94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fb98:	b2da      	uxtb	r2, r3
 800fb9a:	4b31      	ldr	r3, [pc, #196]	; (800fc60 <xPortStartScheduler+0x130>)
 800fb9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fb9e:	4b31      	ldr	r3, [pc, #196]	; (800fc64 <xPortStartScheduler+0x134>)
 800fba0:	2207      	movs	r2, #7
 800fba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fba4:	e009      	b.n	800fbba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fba6:	4b2f      	ldr	r3, [pc, #188]	; (800fc64 <xPortStartScheduler+0x134>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	3b01      	subs	r3, #1
 800fbac:	4a2d      	ldr	r2, [pc, #180]	; (800fc64 <xPortStartScheduler+0x134>)
 800fbae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fbb0:	78fb      	ldrb	r3, [r7, #3]
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	005b      	lsls	r3, r3, #1
 800fbb6:	b2db      	uxtb	r3, r3
 800fbb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fbba:	78fb      	ldrb	r3, [r7, #3]
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbc2:	2b80      	cmp	r3, #128	; 0x80
 800fbc4:	d0ef      	beq.n	800fba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fbc6:	4b27      	ldr	r3, [pc, #156]	; (800fc64 <xPortStartScheduler+0x134>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f1c3 0307 	rsb	r3, r3, #7
 800fbce:	2b04      	cmp	r3, #4
 800fbd0:	d00a      	beq.n	800fbe8 <xPortStartScheduler+0xb8>
	__asm volatile
 800fbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd6:	f383 8811 	msr	BASEPRI, r3
 800fbda:	f3bf 8f6f 	isb	sy
 800fbde:	f3bf 8f4f 	dsb	sy
 800fbe2:	60bb      	str	r3, [r7, #8]
}
 800fbe4:	bf00      	nop
 800fbe6:	e7fe      	b.n	800fbe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fbe8:	4b1e      	ldr	r3, [pc, #120]	; (800fc64 <xPortStartScheduler+0x134>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	021b      	lsls	r3, r3, #8
 800fbee:	4a1d      	ldr	r2, [pc, #116]	; (800fc64 <xPortStartScheduler+0x134>)
 800fbf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fbf2:	4b1c      	ldr	r3, [pc, #112]	; (800fc64 <xPortStartScheduler+0x134>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fbfa:	4a1a      	ldr	r2, [pc, #104]	; (800fc64 <xPortStartScheduler+0x134>)
 800fbfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	b2da      	uxtb	r2, r3
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fc06:	4b18      	ldr	r3, [pc, #96]	; (800fc68 <xPortStartScheduler+0x138>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	4a17      	ldr	r2, [pc, #92]	; (800fc68 <xPortStartScheduler+0x138>)
 800fc0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fc10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fc12:	4b15      	ldr	r3, [pc, #84]	; (800fc68 <xPortStartScheduler+0x138>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	4a14      	ldr	r2, [pc, #80]	; (800fc68 <xPortStartScheduler+0x138>)
 800fc18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fc1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fc1e:	f000 f8dd 	bl	800fddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fc22:	4b12      	ldr	r3, [pc, #72]	; (800fc6c <xPortStartScheduler+0x13c>)
 800fc24:	2200      	movs	r2, #0
 800fc26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fc28:	f000 f8fc 	bl	800fe24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fc2c:	4b10      	ldr	r3, [pc, #64]	; (800fc70 <xPortStartScheduler+0x140>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4a0f      	ldr	r2, [pc, #60]	; (800fc70 <xPortStartScheduler+0x140>)
 800fc32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fc36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fc38:	f7ff ff66 	bl	800fb08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fc3c:	f7fe fe48 	bl	800e8d0 <vTaskSwitchContext>
	prvTaskExitError();
 800fc40:	f7ff ff22 	bl	800fa88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fc44:	2300      	movs	r3, #0
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3718      	adds	r7, #24
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}
 800fc4e:	bf00      	nop
 800fc50:	e000ed00 	.word	0xe000ed00
 800fc54:	410fc271 	.word	0x410fc271
 800fc58:	410fc270 	.word	0x410fc270
 800fc5c:	e000e400 	.word	0xe000e400
 800fc60:	20001118 	.word	0x20001118
 800fc64:	2000111c 	.word	0x2000111c
 800fc68:	e000ed20 	.word	0xe000ed20
 800fc6c:	20000028 	.word	0x20000028
 800fc70:	e000ef34 	.word	0xe000ef34

0800fc74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fc74:	b480      	push	{r7}
 800fc76:	b083      	sub	sp, #12
 800fc78:	af00      	add	r7, sp, #0
	__asm volatile
 800fc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc7e:	f383 8811 	msr	BASEPRI, r3
 800fc82:	f3bf 8f6f 	isb	sy
 800fc86:	f3bf 8f4f 	dsb	sy
 800fc8a:	607b      	str	r3, [r7, #4]
}
 800fc8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fc8e:	4b0f      	ldr	r3, [pc, #60]	; (800fccc <vPortEnterCritical+0x58>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	3301      	adds	r3, #1
 800fc94:	4a0d      	ldr	r2, [pc, #52]	; (800fccc <vPortEnterCritical+0x58>)
 800fc96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fc98:	4b0c      	ldr	r3, [pc, #48]	; (800fccc <vPortEnterCritical+0x58>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d10f      	bne.n	800fcc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fca0:	4b0b      	ldr	r3, [pc, #44]	; (800fcd0 <vPortEnterCritical+0x5c>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	b2db      	uxtb	r3, r3
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d00a      	beq.n	800fcc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800fcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcae:	f383 8811 	msr	BASEPRI, r3
 800fcb2:	f3bf 8f6f 	isb	sy
 800fcb6:	f3bf 8f4f 	dsb	sy
 800fcba:	603b      	str	r3, [r7, #0]
}
 800fcbc:	bf00      	nop
 800fcbe:	e7fe      	b.n	800fcbe <vPortEnterCritical+0x4a>
	}
}
 800fcc0:	bf00      	nop
 800fcc2:	370c      	adds	r7, #12
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr
 800fccc:	20000028 	.word	0x20000028
 800fcd0:	e000ed04 	.word	0xe000ed04

0800fcd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fcda:	4b12      	ldr	r3, [pc, #72]	; (800fd24 <vPortExitCritical+0x50>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d10a      	bne.n	800fcf8 <vPortExitCritical+0x24>
	__asm volatile
 800fce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce6:	f383 8811 	msr	BASEPRI, r3
 800fcea:	f3bf 8f6f 	isb	sy
 800fcee:	f3bf 8f4f 	dsb	sy
 800fcf2:	607b      	str	r3, [r7, #4]
}
 800fcf4:	bf00      	nop
 800fcf6:	e7fe      	b.n	800fcf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fcf8:	4b0a      	ldr	r3, [pc, #40]	; (800fd24 <vPortExitCritical+0x50>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	3b01      	subs	r3, #1
 800fcfe:	4a09      	ldr	r2, [pc, #36]	; (800fd24 <vPortExitCritical+0x50>)
 800fd00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fd02:	4b08      	ldr	r3, [pc, #32]	; (800fd24 <vPortExitCritical+0x50>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d105      	bne.n	800fd16 <vPortExitCritical+0x42>
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	f383 8811 	msr	BASEPRI, r3
}
 800fd14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fd16:	bf00      	nop
 800fd18:	370c      	adds	r7, #12
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr
 800fd22:	bf00      	nop
 800fd24:	20000028 	.word	0x20000028
	...

0800fd30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fd30:	f3ef 8009 	mrs	r0, PSP
 800fd34:	f3bf 8f6f 	isb	sy
 800fd38:	4b15      	ldr	r3, [pc, #84]	; (800fd90 <pxCurrentTCBConst>)
 800fd3a:	681a      	ldr	r2, [r3, #0]
 800fd3c:	f01e 0f10 	tst.w	lr, #16
 800fd40:	bf08      	it	eq
 800fd42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fd46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd4a:	6010      	str	r0, [r2, #0]
 800fd4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fd50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fd54:	f380 8811 	msr	BASEPRI, r0
 800fd58:	f3bf 8f4f 	dsb	sy
 800fd5c:	f3bf 8f6f 	isb	sy
 800fd60:	f7fe fdb6 	bl	800e8d0 <vTaskSwitchContext>
 800fd64:	f04f 0000 	mov.w	r0, #0
 800fd68:	f380 8811 	msr	BASEPRI, r0
 800fd6c:	bc09      	pop	{r0, r3}
 800fd6e:	6819      	ldr	r1, [r3, #0]
 800fd70:	6808      	ldr	r0, [r1, #0]
 800fd72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd76:	f01e 0f10 	tst.w	lr, #16
 800fd7a:	bf08      	it	eq
 800fd7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fd80:	f380 8809 	msr	PSP, r0
 800fd84:	f3bf 8f6f 	isb	sy
 800fd88:	4770      	bx	lr
 800fd8a:	bf00      	nop
 800fd8c:	f3af 8000 	nop.w

0800fd90 <pxCurrentTCBConst>:
 800fd90:	20000aec 	.word	0x20000aec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fd94:	bf00      	nop
 800fd96:	bf00      	nop

0800fd98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda2:	f383 8811 	msr	BASEPRI, r3
 800fda6:	f3bf 8f6f 	isb	sy
 800fdaa:	f3bf 8f4f 	dsb	sy
 800fdae:	607b      	str	r3, [r7, #4]
}
 800fdb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fdb2:	f7fe fcd3 	bl	800e75c <xTaskIncrementTick>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d003      	beq.n	800fdc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fdbc:	4b06      	ldr	r3, [pc, #24]	; (800fdd8 <xPortSysTickHandler+0x40>)
 800fdbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdc2:	601a      	str	r2, [r3, #0]
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	f383 8811 	msr	BASEPRI, r3
}
 800fdce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fdd0:	bf00      	nop
 800fdd2:	3708      	adds	r7, #8
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	e000ed04 	.word	0xe000ed04

0800fddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fddc:	b480      	push	{r7}
 800fdde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fde0:	4b0b      	ldr	r3, [pc, #44]	; (800fe10 <vPortSetupTimerInterrupt+0x34>)
 800fde2:	2200      	movs	r2, #0
 800fde4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fde6:	4b0b      	ldr	r3, [pc, #44]	; (800fe14 <vPortSetupTimerInterrupt+0x38>)
 800fde8:	2200      	movs	r2, #0
 800fdea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fdec:	4b0a      	ldr	r3, [pc, #40]	; (800fe18 <vPortSetupTimerInterrupt+0x3c>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	4a0a      	ldr	r2, [pc, #40]	; (800fe1c <vPortSetupTimerInterrupt+0x40>)
 800fdf2:	fba2 2303 	umull	r2, r3, r2, r3
 800fdf6:	099b      	lsrs	r3, r3, #6
 800fdf8:	4a09      	ldr	r2, [pc, #36]	; (800fe20 <vPortSetupTimerInterrupt+0x44>)
 800fdfa:	3b01      	subs	r3, #1
 800fdfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fdfe:	4b04      	ldr	r3, [pc, #16]	; (800fe10 <vPortSetupTimerInterrupt+0x34>)
 800fe00:	2207      	movs	r2, #7
 800fe02:	601a      	str	r2, [r3, #0]
}
 800fe04:	bf00      	nop
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	e000e010 	.word	0xe000e010
 800fe14:	e000e018 	.word	0xe000e018
 800fe18:	20000004 	.word	0x20000004
 800fe1c:	10624dd3 	.word	0x10624dd3
 800fe20:	e000e014 	.word	0xe000e014

0800fe24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fe24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fe34 <vPortEnableVFP+0x10>
 800fe28:	6801      	ldr	r1, [r0, #0]
 800fe2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fe2e:	6001      	str	r1, [r0, #0]
 800fe30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fe32:	bf00      	nop
 800fe34:	e000ed88 	.word	0xe000ed88

0800fe38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fe38:	b480      	push	{r7}
 800fe3a:	b085      	sub	sp, #20
 800fe3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fe3e:	f3ef 8305 	mrs	r3, IPSR
 800fe42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2b0f      	cmp	r3, #15
 800fe48:	d914      	bls.n	800fe74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fe4a:	4a17      	ldr	r2, [pc, #92]	; (800fea8 <vPortValidateInterruptPriority+0x70>)
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	4413      	add	r3, r2
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fe54:	4b15      	ldr	r3, [pc, #84]	; (800feac <vPortValidateInterruptPriority+0x74>)
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	7afa      	ldrb	r2, [r7, #11]
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	d20a      	bcs.n	800fe74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fe5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe62:	f383 8811 	msr	BASEPRI, r3
 800fe66:	f3bf 8f6f 	isb	sy
 800fe6a:	f3bf 8f4f 	dsb	sy
 800fe6e:	607b      	str	r3, [r7, #4]
}
 800fe70:	bf00      	nop
 800fe72:	e7fe      	b.n	800fe72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fe74:	4b0e      	ldr	r3, [pc, #56]	; (800feb0 <vPortValidateInterruptPriority+0x78>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fe7c:	4b0d      	ldr	r3, [pc, #52]	; (800feb4 <vPortValidateInterruptPriority+0x7c>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	429a      	cmp	r2, r3
 800fe82:	d90a      	bls.n	800fe9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fe84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe88:	f383 8811 	msr	BASEPRI, r3
 800fe8c:	f3bf 8f6f 	isb	sy
 800fe90:	f3bf 8f4f 	dsb	sy
 800fe94:	603b      	str	r3, [r7, #0]
}
 800fe96:	bf00      	nop
 800fe98:	e7fe      	b.n	800fe98 <vPortValidateInterruptPriority+0x60>
	}
 800fe9a:	bf00      	nop
 800fe9c:	3714      	adds	r7, #20
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr
 800fea6:	bf00      	nop
 800fea8:	e000e3f0 	.word	0xe000e3f0
 800feac:	20001118 	.word	0x20001118
 800feb0:	e000ed0c 	.word	0xe000ed0c
 800feb4:	2000111c 	.word	0x2000111c

0800feb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b08a      	sub	sp, #40	; 0x28
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fec0:	2300      	movs	r3, #0
 800fec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fec4:	f7fe fb8e 	bl	800e5e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fec8:	4b5b      	ldr	r3, [pc, #364]	; (8010038 <pvPortMalloc+0x180>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d101      	bne.n	800fed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fed0:	f000 f920 	bl	8010114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fed4:	4b59      	ldr	r3, [pc, #356]	; (801003c <pvPortMalloc+0x184>)
 800fed6:	681a      	ldr	r2, [r3, #0]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	4013      	ands	r3, r2
 800fedc:	2b00      	cmp	r3, #0
 800fede:	f040 8093 	bne.w	8010008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d01d      	beq.n	800ff24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fee8:	2208      	movs	r2, #8
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	4413      	add	r3, r2
 800feee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f003 0307 	and.w	r3, r3, #7
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d014      	beq.n	800ff24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f023 0307 	bic.w	r3, r3, #7
 800ff00:	3308      	adds	r3, #8
 800ff02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f003 0307 	and.w	r3, r3, #7
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d00a      	beq.n	800ff24 <pvPortMalloc+0x6c>
	__asm volatile
 800ff0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff12:	f383 8811 	msr	BASEPRI, r3
 800ff16:	f3bf 8f6f 	isb	sy
 800ff1a:	f3bf 8f4f 	dsb	sy
 800ff1e:	617b      	str	r3, [r7, #20]
}
 800ff20:	bf00      	nop
 800ff22:	e7fe      	b.n	800ff22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d06e      	beq.n	8010008 <pvPortMalloc+0x150>
 800ff2a:	4b45      	ldr	r3, [pc, #276]	; (8010040 <pvPortMalloc+0x188>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	687a      	ldr	r2, [r7, #4]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d869      	bhi.n	8010008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ff34:	4b43      	ldr	r3, [pc, #268]	; (8010044 <pvPortMalloc+0x18c>)
 800ff36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ff38:	4b42      	ldr	r3, [pc, #264]	; (8010044 <pvPortMalloc+0x18c>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff3e:	e004      	b.n	800ff4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ff40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ff44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d903      	bls.n	800ff5c <pvPortMalloc+0xa4>
 800ff54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d1f1      	bne.n	800ff40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ff5c:	4b36      	ldr	r3, [pc, #216]	; (8010038 <pvPortMalloc+0x180>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d050      	beq.n	8010008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ff66:	6a3b      	ldr	r3, [r7, #32]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2208      	movs	r2, #8
 800ff6c:	4413      	add	r3, r2
 800ff6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ff70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	6a3b      	ldr	r3, [r7, #32]
 800ff76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ff78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7a:	685a      	ldr	r2, [r3, #4]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	1ad2      	subs	r2, r2, r3
 800ff80:	2308      	movs	r3, #8
 800ff82:	005b      	lsls	r3, r3, #1
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d91f      	bls.n	800ffc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ff88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	4413      	add	r3, r2
 800ff8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff90:	69bb      	ldr	r3, [r7, #24]
 800ff92:	f003 0307 	and.w	r3, r3, #7
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d00a      	beq.n	800ffb0 <pvPortMalloc+0xf8>
	__asm volatile
 800ff9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff9e:	f383 8811 	msr	BASEPRI, r3
 800ffa2:	f3bf 8f6f 	isb	sy
 800ffa6:	f3bf 8f4f 	dsb	sy
 800ffaa:	613b      	str	r3, [r7, #16]
}
 800ffac:	bf00      	nop
 800ffae:	e7fe      	b.n	800ffae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ffb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb2:	685a      	ldr	r2, [r3, #4]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	1ad2      	subs	r2, r2, r3
 800ffb8:	69bb      	ldr	r3, [r7, #24]
 800ffba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ffbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffbe:	687a      	ldr	r2, [r7, #4]
 800ffc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ffc2:	69b8      	ldr	r0, [r7, #24]
 800ffc4:	f000 f908 	bl	80101d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ffc8:	4b1d      	ldr	r3, [pc, #116]	; (8010040 <pvPortMalloc+0x188>)
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	1ad3      	subs	r3, r2, r3
 800ffd2:	4a1b      	ldr	r2, [pc, #108]	; (8010040 <pvPortMalloc+0x188>)
 800ffd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ffd6:	4b1a      	ldr	r3, [pc, #104]	; (8010040 <pvPortMalloc+0x188>)
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	4b1b      	ldr	r3, [pc, #108]	; (8010048 <pvPortMalloc+0x190>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d203      	bcs.n	800ffea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ffe2:	4b17      	ldr	r3, [pc, #92]	; (8010040 <pvPortMalloc+0x188>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	4a18      	ldr	r2, [pc, #96]	; (8010048 <pvPortMalloc+0x190>)
 800ffe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ffea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffec:	685a      	ldr	r2, [r3, #4]
 800ffee:	4b13      	ldr	r3, [pc, #76]	; (801003c <pvPortMalloc+0x184>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	431a      	orrs	r2, r3
 800fff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffa:	2200      	movs	r2, #0
 800fffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fffe:	4b13      	ldr	r3, [pc, #76]	; (801004c <pvPortMalloc+0x194>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	3301      	adds	r3, #1
 8010004:	4a11      	ldr	r2, [pc, #68]	; (801004c <pvPortMalloc+0x194>)
 8010006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010008:	f7fe fafa 	bl	800e600 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801000c:	69fb      	ldr	r3, [r7, #28]
 801000e:	f003 0307 	and.w	r3, r3, #7
 8010012:	2b00      	cmp	r3, #0
 8010014:	d00a      	beq.n	801002c <pvPortMalloc+0x174>
	__asm volatile
 8010016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801001a:	f383 8811 	msr	BASEPRI, r3
 801001e:	f3bf 8f6f 	isb	sy
 8010022:	f3bf 8f4f 	dsb	sy
 8010026:	60fb      	str	r3, [r7, #12]
}
 8010028:	bf00      	nop
 801002a:	e7fe      	b.n	801002a <pvPortMalloc+0x172>
	return pvReturn;
 801002c:	69fb      	ldr	r3, [r7, #28]
}
 801002e:	4618      	mov	r0, r3
 8010030:	3728      	adds	r7, #40	; 0x28
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}
 8010036:	bf00      	nop
 8010038:	200072d0 	.word	0x200072d0
 801003c:	200072e4 	.word	0x200072e4
 8010040:	200072d4 	.word	0x200072d4
 8010044:	200072c8 	.word	0x200072c8
 8010048:	200072d8 	.word	0x200072d8
 801004c:	200072dc 	.word	0x200072dc

08010050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b086      	sub	sp, #24
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d04d      	beq.n	80100fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010062:	2308      	movs	r3, #8
 8010064:	425b      	negs	r3, r3
 8010066:	697a      	ldr	r2, [r7, #20]
 8010068:	4413      	add	r3, r2
 801006a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	685a      	ldr	r2, [r3, #4]
 8010074:	4b24      	ldr	r3, [pc, #144]	; (8010108 <vPortFree+0xb8>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	4013      	ands	r3, r2
 801007a:	2b00      	cmp	r3, #0
 801007c:	d10a      	bne.n	8010094 <vPortFree+0x44>
	__asm volatile
 801007e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010082:	f383 8811 	msr	BASEPRI, r3
 8010086:	f3bf 8f6f 	isb	sy
 801008a:	f3bf 8f4f 	dsb	sy
 801008e:	60fb      	str	r3, [r7, #12]
}
 8010090:	bf00      	nop
 8010092:	e7fe      	b.n	8010092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d00a      	beq.n	80100b2 <vPortFree+0x62>
	__asm volatile
 801009c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a0:	f383 8811 	msr	BASEPRI, r3
 80100a4:	f3bf 8f6f 	isb	sy
 80100a8:	f3bf 8f4f 	dsb	sy
 80100ac:	60bb      	str	r3, [r7, #8]
}
 80100ae:	bf00      	nop
 80100b0:	e7fe      	b.n	80100b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80100b2:	693b      	ldr	r3, [r7, #16]
 80100b4:	685a      	ldr	r2, [r3, #4]
 80100b6:	4b14      	ldr	r3, [pc, #80]	; (8010108 <vPortFree+0xb8>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	4013      	ands	r3, r2
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d01e      	beq.n	80100fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d11a      	bne.n	80100fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	685a      	ldr	r2, [r3, #4]
 80100cc:	4b0e      	ldr	r3, [pc, #56]	; (8010108 <vPortFree+0xb8>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	43db      	mvns	r3, r3
 80100d2:	401a      	ands	r2, r3
 80100d4:	693b      	ldr	r3, [r7, #16]
 80100d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80100d8:	f7fe fa84 	bl	800e5e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	685a      	ldr	r2, [r3, #4]
 80100e0:	4b0a      	ldr	r3, [pc, #40]	; (801010c <vPortFree+0xbc>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4413      	add	r3, r2
 80100e6:	4a09      	ldr	r2, [pc, #36]	; (801010c <vPortFree+0xbc>)
 80100e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80100ea:	6938      	ldr	r0, [r7, #16]
 80100ec:	f000 f874 	bl	80101d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80100f0:	4b07      	ldr	r3, [pc, #28]	; (8010110 <vPortFree+0xc0>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	3301      	adds	r3, #1
 80100f6:	4a06      	ldr	r2, [pc, #24]	; (8010110 <vPortFree+0xc0>)
 80100f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80100fa:	f7fe fa81 	bl	800e600 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80100fe:	bf00      	nop
 8010100:	3718      	adds	r7, #24
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	200072e4 	.word	0x200072e4
 801010c:	200072d4 	.word	0x200072d4
 8010110:	200072e0 	.word	0x200072e0

08010114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010114:	b480      	push	{r7}
 8010116:	b085      	sub	sp, #20
 8010118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801011a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 801011e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010120:	4b27      	ldr	r3, [pc, #156]	; (80101c0 <prvHeapInit+0xac>)
 8010122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	f003 0307 	and.w	r3, r3, #7
 801012a:	2b00      	cmp	r3, #0
 801012c:	d00c      	beq.n	8010148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	3307      	adds	r3, #7
 8010132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f023 0307 	bic.w	r3, r3, #7
 801013a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801013c:	68ba      	ldr	r2, [r7, #8]
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	1ad3      	subs	r3, r2, r3
 8010142:	4a1f      	ldr	r2, [pc, #124]	; (80101c0 <prvHeapInit+0xac>)
 8010144:	4413      	add	r3, r2
 8010146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801014c:	4a1d      	ldr	r2, [pc, #116]	; (80101c4 <prvHeapInit+0xb0>)
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010152:	4b1c      	ldr	r3, [pc, #112]	; (80101c4 <prvHeapInit+0xb0>)
 8010154:	2200      	movs	r2, #0
 8010156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	68ba      	ldr	r2, [r7, #8]
 801015c:	4413      	add	r3, r2
 801015e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010160:	2208      	movs	r2, #8
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	1a9b      	subs	r3, r3, r2
 8010166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f023 0307 	bic.w	r3, r3, #7
 801016e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	4a15      	ldr	r2, [pc, #84]	; (80101c8 <prvHeapInit+0xb4>)
 8010174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010176:	4b14      	ldr	r3, [pc, #80]	; (80101c8 <prvHeapInit+0xb4>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	2200      	movs	r2, #0
 801017c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801017e:	4b12      	ldr	r3, [pc, #72]	; (80101c8 <prvHeapInit+0xb4>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2200      	movs	r2, #0
 8010184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	68fa      	ldr	r2, [r7, #12]
 801018e:	1ad2      	subs	r2, r2, r3
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010194:	4b0c      	ldr	r3, [pc, #48]	; (80101c8 <prvHeapInit+0xb4>)
 8010196:	681a      	ldr	r2, [r3, #0]
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	4a0a      	ldr	r2, [pc, #40]	; (80101cc <prvHeapInit+0xb8>)
 80101a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	685b      	ldr	r3, [r3, #4]
 80101a8:	4a09      	ldr	r2, [pc, #36]	; (80101d0 <prvHeapInit+0xbc>)
 80101aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80101ac:	4b09      	ldr	r3, [pc, #36]	; (80101d4 <prvHeapInit+0xc0>)
 80101ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80101b2:	601a      	str	r2, [r3, #0]
}
 80101b4:	bf00      	nop
 80101b6:	3714      	adds	r7, #20
 80101b8:	46bd      	mov	sp, r7
 80101ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101be:	4770      	bx	lr
 80101c0:	20001120 	.word	0x20001120
 80101c4:	200072c8 	.word	0x200072c8
 80101c8:	200072d0 	.word	0x200072d0
 80101cc:	200072d8 	.word	0x200072d8
 80101d0:	200072d4 	.word	0x200072d4
 80101d4:	200072e4 	.word	0x200072e4

080101d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80101d8:	b480      	push	{r7}
 80101da:	b085      	sub	sp, #20
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80101e0:	4b28      	ldr	r3, [pc, #160]	; (8010284 <prvInsertBlockIntoFreeList+0xac>)
 80101e2:	60fb      	str	r3, [r7, #12]
 80101e4:	e002      	b.n	80101ec <prvInsertBlockIntoFreeList+0x14>
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	60fb      	str	r3, [r7, #12]
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d8f7      	bhi.n	80101e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	685b      	ldr	r3, [r3, #4]
 80101fe:	68ba      	ldr	r2, [r7, #8]
 8010200:	4413      	add	r3, r2
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	429a      	cmp	r2, r3
 8010206:	d108      	bne.n	801021a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	685a      	ldr	r2, [r3, #4]
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	441a      	add	r2, r3
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	68ba      	ldr	r2, [r7, #8]
 8010224:	441a      	add	r2, r3
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	429a      	cmp	r2, r3
 801022c:	d118      	bne.n	8010260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	681a      	ldr	r2, [r3, #0]
 8010232:	4b15      	ldr	r3, [pc, #84]	; (8010288 <prvInsertBlockIntoFreeList+0xb0>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	429a      	cmp	r2, r3
 8010238:	d00d      	beq.n	8010256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	685a      	ldr	r2, [r3, #4]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	685b      	ldr	r3, [r3, #4]
 8010244:	441a      	add	r2, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	681a      	ldr	r2, [r3, #0]
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	601a      	str	r2, [r3, #0]
 8010254:	e008      	b.n	8010268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010256:	4b0c      	ldr	r3, [pc, #48]	; (8010288 <prvInsertBlockIntoFreeList+0xb0>)
 8010258:	681a      	ldr	r2, [r3, #0]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	601a      	str	r2, [r3, #0]
 801025e:	e003      	b.n	8010268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681a      	ldr	r2, [r3, #0]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010268:	68fa      	ldr	r2, [r7, #12]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	429a      	cmp	r2, r3
 801026e:	d002      	beq.n	8010276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010276:	bf00      	nop
 8010278:	3714      	adds	r7, #20
 801027a:	46bd      	mov	sp, r7
 801027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010280:	4770      	bx	lr
 8010282:	bf00      	nop
 8010284:	200072c8 	.word	0x200072c8
 8010288:	200072d0 	.word	0x200072d0

0801028c <atof>:
 801028c:	2100      	movs	r1, #0
 801028e:	f001 bb95 	b.w	80119bc <strtod>
	...

08010294 <__errno>:
 8010294:	4b01      	ldr	r3, [pc, #4]	; (801029c <__errno+0x8>)
 8010296:	6818      	ldr	r0, [r3, #0]
 8010298:	4770      	bx	lr
 801029a:	bf00      	nop
 801029c:	2000002c 	.word	0x2000002c

080102a0 <__libc_init_array>:
 80102a0:	b570      	push	{r4, r5, r6, lr}
 80102a2:	4d0d      	ldr	r5, [pc, #52]	; (80102d8 <__libc_init_array+0x38>)
 80102a4:	4c0d      	ldr	r4, [pc, #52]	; (80102dc <__libc_init_array+0x3c>)
 80102a6:	1b64      	subs	r4, r4, r5
 80102a8:	10a4      	asrs	r4, r4, #2
 80102aa:	2600      	movs	r6, #0
 80102ac:	42a6      	cmp	r6, r4
 80102ae:	d109      	bne.n	80102c4 <__libc_init_array+0x24>
 80102b0:	4d0b      	ldr	r5, [pc, #44]	; (80102e0 <__libc_init_array+0x40>)
 80102b2:	4c0c      	ldr	r4, [pc, #48]	; (80102e4 <__libc_init_array+0x44>)
 80102b4:	f005 fef2 	bl	801609c <_init>
 80102b8:	1b64      	subs	r4, r4, r5
 80102ba:	10a4      	asrs	r4, r4, #2
 80102bc:	2600      	movs	r6, #0
 80102be:	42a6      	cmp	r6, r4
 80102c0:	d105      	bne.n	80102ce <__libc_init_array+0x2e>
 80102c2:	bd70      	pop	{r4, r5, r6, pc}
 80102c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80102c8:	4798      	blx	r3
 80102ca:	3601      	adds	r6, #1
 80102cc:	e7ee      	b.n	80102ac <__libc_init_array+0xc>
 80102ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80102d2:	4798      	blx	r3
 80102d4:	3601      	adds	r6, #1
 80102d6:	e7f2      	b.n	80102be <__libc_init_array+0x1e>
 80102d8:	08017018 	.word	0x08017018
 80102dc:	08017018 	.word	0x08017018
 80102e0:	08017018 	.word	0x08017018
 80102e4:	0801701c 	.word	0x0801701c

080102e8 <memcpy>:
 80102e8:	440a      	add	r2, r1
 80102ea:	4291      	cmp	r1, r2
 80102ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80102f0:	d100      	bne.n	80102f4 <memcpy+0xc>
 80102f2:	4770      	bx	lr
 80102f4:	b510      	push	{r4, lr}
 80102f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102fe:	4291      	cmp	r1, r2
 8010300:	d1f9      	bne.n	80102f6 <memcpy+0xe>
 8010302:	bd10      	pop	{r4, pc}

08010304 <memset>:
 8010304:	4402      	add	r2, r0
 8010306:	4603      	mov	r3, r0
 8010308:	4293      	cmp	r3, r2
 801030a:	d100      	bne.n	801030e <memset+0xa>
 801030c:	4770      	bx	lr
 801030e:	f803 1b01 	strb.w	r1, [r3], #1
 8010312:	e7f9      	b.n	8010308 <memset+0x4>

08010314 <__cvt>:
 8010314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010318:	ec55 4b10 	vmov	r4, r5, d0
 801031c:	2d00      	cmp	r5, #0
 801031e:	460e      	mov	r6, r1
 8010320:	4619      	mov	r1, r3
 8010322:	462b      	mov	r3, r5
 8010324:	bfbb      	ittet	lt
 8010326:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801032a:	461d      	movlt	r5, r3
 801032c:	2300      	movge	r3, #0
 801032e:	232d      	movlt	r3, #45	; 0x2d
 8010330:	700b      	strb	r3, [r1, #0]
 8010332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010334:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010338:	4691      	mov	r9, r2
 801033a:	f023 0820 	bic.w	r8, r3, #32
 801033e:	bfbc      	itt	lt
 8010340:	4622      	movlt	r2, r4
 8010342:	4614      	movlt	r4, r2
 8010344:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010348:	d005      	beq.n	8010356 <__cvt+0x42>
 801034a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801034e:	d100      	bne.n	8010352 <__cvt+0x3e>
 8010350:	3601      	adds	r6, #1
 8010352:	2102      	movs	r1, #2
 8010354:	e000      	b.n	8010358 <__cvt+0x44>
 8010356:	2103      	movs	r1, #3
 8010358:	ab03      	add	r3, sp, #12
 801035a:	9301      	str	r3, [sp, #4]
 801035c:	ab02      	add	r3, sp, #8
 801035e:	9300      	str	r3, [sp, #0]
 8010360:	ec45 4b10 	vmov	d0, r4, r5
 8010364:	4653      	mov	r3, sl
 8010366:	4632      	mov	r2, r6
 8010368:	f001 fc76 	bl	8011c58 <_dtoa_r>
 801036c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010370:	4607      	mov	r7, r0
 8010372:	d102      	bne.n	801037a <__cvt+0x66>
 8010374:	f019 0f01 	tst.w	r9, #1
 8010378:	d022      	beq.n	80103c0 <__cvt+0xac>
 801037a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801037e:	eb07 0906 	add.w	r9, r7, r6
 8010382:	d110      	bne.n	80103a6 <__cvt+0x92>
 8010384:	783b      	ldrb	r3, [r7, #0]
 8010386:	2b30      	cmp	r3, #48	; 0x30
 8010388:	d10a      	bne.n	80103a0 <__cvt+0x8c>
 801038a:	2200      	movs	r2, #0
 801038c:	2300      	movs	r3, #0
 801038e:	4620      	mov	r0, r4
 8010390:	4629      	mov	r1, r5
 8010392:	f7f0 fba1 	bl	8000ad8 <__aeabi_dcmpeq>
 8010396:	b918      	cbnz	r0, 80103a0 <__cvt+0x8c>
 8010398:	f1c6 0601 	rsb	r6, r6, #1
 801039c:	f8ca 6000 	str.w	r6, [sl]
 80103a0:	f8da 3000 	ldr.w	r3, [sl]
 80103a4:	4499      	add	r9, r3
 80103a6:	2200      	movs	r2, #0
 80103a8:	2300      	movs	r3, #0
 80103aa:	4620      	mov	r0, r4
 80103ac:	4629      	mov	r1, r5
 80103ae:	f7f0 fb93 	bl	8000ad8 <__aeabi_dcmpeq>
 80103b2:	b108      	cbz	r0, 80103b8 <__cvt+0xa4>
 80103b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80103b8:	2230      	movs	r2, #48	; 0x30
 80103ba:	9b03      	ldr	r3, [sp, #12]
 80103bc:	454b      	cmp	r3, r9
 80103be:	d307      	bcc.n	80103d0 <__cvt+0xbc>
 80103c0:	9b03      	ldr	r3, [sp, #12]
 80103c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80103c4:	1bdb      	subs	r3, r3, r7
 80103c6:	4638      	mov	r0, r7
 80103c8:	6013      	str	r3, [r2, #0]
 80103ca:	b004      	add	sp, #16
 80103cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103d0:	1c59      	adds	r1, r3, #1
 80103d2:	9103      	str	r1, [sp, #12]
 80103d4:	701a      	strb	r2, [r3, #0]
 80103d6:	e7f0      	b.n	80103ba <__cvt+0xa6>

080103d8 <__exponent>:
 80103d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103da:	4603      	mov	r3, r0
 80103dc:	2900      	cmp	r1, #0
 80103de:	bfb8      	it	lt
 80103e0:	4249      	neglt	r1, r1
 80103e2:	f803 2b02 	strb.w	r2, [r3], #2
 80103e6:	bfb4      	ite	lt
 80103e8:	222d      	movlt	r2, #45	; 0x2d
 80103ea:	222b      	movge	r2, #43	; 0x2b
 80103ec:	2909      	cmp	r1, #9
 80103ee:	7042      	strb	r2, [r0, #1]
 80103f0:	dd2a      	ble.n	8010448 <__exponent+0x70>
 80103f2:	f10d 0407 	add.w	r4, sp, #7
 80103f6:	46a4      	mov	ip, r4
 80103f8:	270a      	movs	r7, #10
 80103fa:	46a6      	mov	lr, r4
 80103fc:	460a      	mov	r2, r1
 80103fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8010402:	fb07 1516 	mls	r5, r7, r6, r1
 8010406:	3530      	adds	r5, #48	; 0x30
 8010408:	2a63      	cmp	r2, #99	; 0x63
 801040a:	f104 34ff 	add.w	r4, r4, #4294967295
 801040e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010412:	4631      	mov	r1, r6
 8010414:	dcf1      	bgt.n	80103fa <__exponent+0x22>
 8010416:	3130      	adds	r1, #48	; 0x30
 8010418:	f1ae 0502 	sub.w	r5, lr, #2
 801041c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010420:	1c44      	adds	r4, r0, #1
 8010422:	4629      	mov	r1, r5
 8010424:	4561      	cmp	r1, ip
 8010426:	d30a      	bcc.n	801043e <__exponent+0x66>
 8010428:	f10d 0209 	add.w	r2, sp, #9
 801042c:	eba2 020e 	sub.w	r2, r2, lr
 8010430:	4565      	cmp	r5, ip
 8010432:	bf88      	it	hi
 8010434:	2200      	movhi	r2, #0
 8010436:	4413      	add	r3, r2
 8010438:	1a18      	subs	r0, r3, r0
 801043a:	b003      	add	sp, #12
 801043c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801043e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010442:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010446:	e7ed      	b.n	8010424 <__exponent+0x4c>
 8010448:	2330      	movs	r3, #48	; 0x30
 801044a:	3130      	adds	r1, #48	; 0x30
 801044c:	7083      	strb	r3, [r0, #2]
 801044e:	70c1      	strb	r1, [r0, #3]
 8010450:	1d03      	adds	r3, r0, #4
 8010452:	e7f1      	b.n	8010438 <__exponent+0x60>

08010454 <_printf_float>:
 8010454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010458:	ed2d 8b02 	vpush	{d8}
 801045c:	b08d      	sub	sp, #52	; 0x34
 801045e:	460c      	mov	r4, r1
 8010460:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010464:	4616      	mov	r6, r2
 8010466:	461f      	mov	r7, r3
 8010468:	4605      	mov	r5, r0
 801046a:	f002 fd63 	bl	8012f34 <_localeconv_r>
 801046e:	f8d0 a000 	ldr.w	sl, [r0]
 8010472:	4650      	mov	r0, sl
 8010474:	f7ef feb4 	bl	80001e0 <strlen>
 8010478:	2300      	movs	r3, #0
 801047a:	930a      	str	r3, [sp, #40]	; 0x28
 801047c:	6823      	ldr	r3, [r4, #0]
 801047e:	9305      	str	r3, [sp, #20]
 8010480:	f8d8 3000 	ldr.w	r3, [r8]
 8010484:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010488:	3307      	adds	r3, #7
 801048a:	f023 0307 	bic.w	r3, r3, #7
 801048e:	f103 0208 	add.w	r2, r3, #8
 8010492:	f8c8 2000 	str.w	r2, [r8]
 8010496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801049e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80104a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80104a6:	9307      	str	r3, [sp, #28]
 80104a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80104ac:	ee08 0a10 	vmov	s16, r0
 80104b0:	4b9f      	ldr	r3, [pc, #636]	; (8010730 <_printf_float+0x2dc>)
 80104b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104b6:	f04f 32ff 	mov.w	r2, #4294967295
 80104ba:	f7f0 fb3f 	bl	8000b3c <__aeabi_dcmpun>
 80104be:	bb88      	cbnz	r0, 8010524 <_printf_float+0xd0>
 80104c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104c4:	4b9a      	ldr	r3, [pc, #616]	; (8010730 <_printf_float+0x2dc>)
 80104c6:	f04f 32ff 	mov.w	r2, #4294967295
 80104ca:	f7f0 fb19 	bl	8000b00 <__aeabi_dcmple>
 80104ce:	bb48      	cbnz	r0, 8010524 <_printf_float+0xd0>
 80104d0:	2200      	movs	r2, #0
 80104d2:	2300      	movs	r3, #0
 80104d4:	4640      	mov	r0, r8
 80104d6:	4649      	mov	r1, r9
 80104d8:	f7f0 fb08 	bl	8000aec <__aeabi_dcmplt>
 80104dc:	b110      	cbz	r0, 80104e4 <_printf_float+0x90>
 80104de:	232d      	movs	r3, #45	; 0x2d
 80104e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104e4:	4b93      	ldr	r3, [pc, #588]	; (8010734 <_printf_float+0x2e0>)
 80104e6:	4894      	ldr	r0, [pc, #592]	; (8010738 <_printf_float+0x2e4>)
 80104e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80104ec:	bf94      	ite	ls
 80104ee:	4698      	movls	r8, r3
 80104f0:	4680      	movhi	r8, r0
 80104f2:	2303      	movs	r3, #3
 80104f4:	6123      	str	r3, [r4, #16]
 80104f6:	9b05      	ldr	r3, [sp, #20]
 80104f8:	f023 0204 	bic.w	r2, r3, #4
 80104fc:	6022      	str	r2, [r4, #0]
 80104fe:	f04f 0900 	mov.w	r9, #0
 8010502:	9700      	str	r7, [sp, #0]
 8010504:	4633      	mov	r3, r6
 8010506:	aa0b      	add	r2, sp, #44	; 0x2c
 8010508:	4621      	mov	r1, r4
 801050a:	4628      	mov	r0, r5
 801050c:	f000 f9d8 	bl	80108c0 <_printf_common>
 8010510:	3001      	adds	r0, #1
 8010512:	f040 8090 	bne.w	8010636 <_printf_float+0x1e2>
 8010516:	f04f 30ff 	mov.w	r0, #4294967295
 801051a:	b00d      	add	sp, #52	; 0x34
 801051c:	ecbd 8b02 	vpop	{d8}
 8010520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010524:	4642      	mov	r2, r8
 8010526:	464b      	mov	r3, r9
 8010528:	4640      	mov	r0, r8
 801052a:	4649      	mov	r1, r9
 801052c:	f7f0 fb06 	bl	8000b3c <__aeabi_dcmpun>
 8010530:	b140      	cbz	r0, 8010544 <_printf_float+0xf0>
 8010532:	464b      	mov	r3, r9
 8010534:	2b00      	cmp	r3, #0
 8010536:	bfbc      	itt	lt
 8010538:	232d      	movlt	r3, #45	; 0x2d
 801053a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801053e:	487f      	ldr	r0, [pc, #508]	; (801073c <_printf_float+0x2e8>)
 8010540:	4b7f      	ldr	r3, [pc, #508]	; (8010740 <_printf_float+0x2ec>)
 8010542:	e7d1      	b.n	80104e8 <_printf_float+0x94>
 8010544:	6863      	ldr	r3, [r4, #4]
 8010546:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801054a:	9206      	str	r2, [sp, #24]
 801054c:	1c5a      	adds	r2, r3, #1
 801054e:	d13f      	bne.n	80105d0 <_printf_float+0x17c>
 8010550:	2306      	movs	r3, #6
 8010552:	6063      	str	r3, [r4, #4]
 8010554:	9b05      	ldr	r3, [sp, #20]
 8010556:	6861      	ldr	r1, [r4, #4]
 8010558:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801055c:	2300      	movs	r3, #0
 801055e:	9303      	str	r3, [sp, #12]
 8010560:	ab0a      	add	r3, sp, #40	; 0x28
 8010562:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010566:	ab09      	add	r3, sp, #36	; 0x24
 8010568:	ec49 8b10 	vmov	d0, r8, r9
 801056c:	9300      	str	r3, [sp, #0]
 801056e:	6022      	str	r2, [r4, #0]
 8010570:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010574:	4628      	mov	r0, r5
 8010576:	f7ff fecd 	bl	8010314 <__cvt>
 801057a:	9b06      	ldr	r3, [sp, #24]
 801057c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801057e:	2b47      	cmp	r3, #71	; 0x47
 8010580:	4680      	mov	r8, r0
 8010582:	d108      	bne.n	8010596 <_printf_float+0x142>
 8010584:	1cc8      	adds	r0, r1, #3
 8010586:	db02      	blt.n	801058e <_printf_float+0x13a>
 8010588:	6863      	ldr	r3, [r4, #4]
 801058a:	4299      	cmp	r1, r3
 801058c:	dd41      	ble.n	8010612 <_printf_float+0x1be>
 801058e:	f1ab 0b02 	sub.w	fp, fp, #2
 8010592:	fa5f fb8b 	uxtb.w	fp, fp
 8010596:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801059a:	d820      	bhi.n	80105de <_printf_float+0x18a>
 801059c:	3901      	subs	r1, #1
 801059e:	465a      	mov	r2, fp
 80105a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80105a4:	9109      	str	r1, [sp, #36]	; 0x24
 80105a6:	f7ff ff17 	bl	80103d8 <__exponent>
 80105aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105ac:	1813      	adds	r3, r2, r0
 80105ae:	2a01      	cmp	r2, #1
 80105b0:	4681      	mov	r9, r0
 80105b2:	6123      	str	r3, [r4, #16]
 80105b4:	dc02      	bgt.n	80105bc <_printf_float+0x168>
 80105b6:	6822      	ldr	r2, [r4, #0]
 80105b8:	07d2      	lsls	r2, r2, #31
 80105ba:	d501      	bpl.n	80105c0 <_printf_float+0x16c>
 80105bc:	3301      	adds	r3, #1
 80105be:	6123      	str	r3, [r4, #16]
 80105c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d09c      	beq.n	8010502 <_printf_float+0xae>
 80105c8:	232d      	movs	r3, #45	; 0x2d
 80105ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105ce:	e798      	b.n	8010502 <_printf_float+0xae>
 80105d0:	9a06      	ldr	r2, [sp, #24]
 80105d2:	2a47      	cmp	r2, #71	; 0x47
 80105d4:	d1be      	bne.n	8010554 <_printf_float+0x100>
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d1bc      	bne.n	8010554 <_printf_float+0x100>
 80105da:	2301      	movs	r3, #1
 80105dc:	e7b9      	b.n	8010552 <_printf_float+0xfe>
 80105de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80105e2:	d118      	bne.n	8010616 <_printf_float+0x1c2>
 80105e4:	2900      	cmp	r1, #0
 80105e6:	6863      	ldr	r3, [r4, #4]
 80105e8:	dd0b      	ble.n	8010602 <_printf_float+0x1ae>
 80105ea:	6121      	str	r1, [r4, #16]
 80105ec:	b913      	cbnz	r3, 80105f4 <_printf_float+0x1a0>
 80105ee:	6822      	ldr	r2, [r4, #0]
 80105f0:	07d0      	lsls	r0, r2, #31
 80105f2:	d502      	bpl.n	80105fa <_printf_float+0x1a6>
 80105f4:	3301      	adds	r3, #1
 80105f6:	440b      	add	r3, r1
 80105f8:	6123      	str	r3, [r4, #16]
 80105fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80105fc:	f04f 0900 	mov.w	r9, #0
 8010600:	e7de      	b.n	80105c0 <_printf_float+0x16c>
 8010602:	b913      	cbnz	r3, 801060a <_printf_float+0x1b6>
 8010604:	6822      	ldr	r2, [r4, #0]
 8010606:	07d2      	lsls	r2, r2, #31
 8010608:	d501      	bpl.n	801060e <_printf_float+0x1ba>
 801060a:	3302      	adds	r3, #2
 801060c:	e7f4      	b.n	80105f8 <_printf_float+0x1a4>
 801060e:	2301      	movs	r3, #1
 8010610:	e7f2      	b.n	80105f8 <_printf_float+0x1a4>
 8010612:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010618:	4299      	cmp	r1, r3
 801061a:	db05      	blt.n	8010628 <_printf_float+0x1d4>
 801061c:	6823      	ldr	r3, [r4, #0]
 801061e:	6121      	str	r1, [r4, #16]
 8010620:	07d8      	lsls	r0, r3, #31
 8010622:	d5ea      	bpl.n	80105fa <_printf_float+0x1a6>
 8010624:	1c4b      	adds	r3, r1, #1
 8010626:	e7e7      	b.n	80105f8 <_printf_float+0x1a4>
 8010628:	2900      	cmp	r1, #0
 801062a:	bfd4      	ite	le
 801062c:	f1c1 0202 	rsble	r2, r1, #2
 8010630:	2201      	movgt	r2, #1
 8010632:	4413      	add	r3, r2
 8010634:	e7e0      	b.n	80105f8 <_printf_float+0x1a4>
 8010636:	6823      	ldr	r3, [r4, #0]
 8010638:	055a      	lsls	r2, r3, #21
 801063a:	d407      	bmi.n	801064c <_printf_float+0x1f8>
 801063c:	6923      	ldr	r3, [r4, #16]
 801063e:	4642      	mov	r2, r8
 8010640:	4631      	mov	r1, r6
 8010642:	4628      	mov	r0, r5
 8010644:	47b8      	blx	r7
 8010646:	3001      	adds	r0, #1
 8010648:	d12c      	bne.n	80106a4 <_printf_float+0x250>
 801064a:	e764      	b.n	8010516 <_printf_float+0xc2>
 801064c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010650:	f240 80e0 	bls.w	8010814 <_printf_float+0x3c0>
 8010654:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010658:	2200      	movs	r2, #0
 801065a:	2300      	movs	r3, #0
 801065c:	f7f0 fa3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8010660:	2800      	cmp	r0, #0
 8010662:	d034      	beq.n	80106ce <_printf_float+0x27a>
 8010664:	4a37      	ldr	r2, [pc, #220]	; (8010744 <_printf_float+0x2f0>)
 8010666:	2301      	movs	r3, #1
 8010668:	4631      	mov	r1, r6
 801066a:	4628      	mov	r0, r5
 801066c:	47b8      	blx	r7
 801066e:	3001      	adds	r0, #1
 8010670:	f43f af51 	beq.w	8010516 <_printf_float+0xc2>
 8010674:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010678:	429a      	cmp	r2, r3
 801067a:	db02      	blt.n	8010682 <_printf_float+0x22e>
 801067c:	6823      	ldr	r3, [r4, #0]
 801067e:	07d8      	lsls	r0, r3, #31
 8010680:	d510      	bpl.n	80106a4 <_printf_float+0x250>
 8010682:	ee18 3a10 	vmov	r3, s16
 8010686:	4652      	mov	r2, sl
 8010688:	4631      	mov	r1, r6
 801068a:	4628      	mov	r0, r5
 801068c:	47b8      	blx	r7
 801068e:	3001      	adds	r0, #1
 8010690:	f43f af41 	beq.w	8010516 <_printf_float+0xc2>
 8010694:	f04f 0800 	mov.w	r8, #0
 8010698:	f104 091a 	add.w	r9, r4, #26
 801069c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801069e:	3b01      	subs	r3, #1
 80106a0:	4543      	cmp	r3, r8
 80106a2:	dc09      	bgt.n	80106b8 <_printf_float+0x264>
 80106a4:	6823      	ldr	r3, [r4, #0]
 80106a6:	079b      	lsls	r3, r3, #30
 80106a8:	f100 8105 	bmi.w	80108b6 <_printf_float+0x462>
 80106ac:	68e0      	ldr	r0, [r4, #12]
 80106ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106b0:	4298      	cmp	r0, r3
 80106b2:	bfb8      	it	lt
 80106b4:	4618      	movlt	r0, r3
 80106b6:	e730      	b.n	801051a <_printf_float+0xc6>
 80106b8:	2301      	movs	r3, #1
 80106ba:	464a      	mov	r2, r9
 80106bc:	4631      	mov	r1, r6
 80106be:	4628      	mov	r0, r5
 80106c0:	47b8      	blx	r7
 80106c2:	3001      	adds	r0, #1
 80106c4:	f43f af27 	beq.w	8010516 <_printf_float+0xc2>
 80106c8:	f108 0801 	add.w	r8, r8, #1
 80106cc:	e7e6      	b.n	801069c <_printf_float+0x248>
 80106ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	dc39      	bgt.n	8010748 <_printf_float+0x2f4>
 80106d4:	4a1b      	ldr	r2, [pc, #108]	; (8010744 <_printf_float+0x2f0>)
 80106d6:	2301      	movs	r3, #1
 80106d8:	4631      	mov	r1, r6
 80106da:	4628      	mov	r0, r5
 80106dc:	47b8      	blx	r7
 80106de:	3001      	adds	r0, #1
 80106e0:	f43f af19 	beq.w	8010516 <_printf_float+0xc2>
 80106e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80106e8:	4313      	orrs	r3, r2
 80106ea:	d102      	bne.n	80106f2 <_printf_float+0x29e>
 80106ec:	6823      	ldr	r3, [r4, #0]
 80106ee:	07d9      	lsls	r1, r3, #31
 80106f0:	d5d8      	bpl.n	80106a4 <_printf_float+0x250>
 80106f2:	ee18 3a10 	vmov	r3, s16
 80106f6:	4652      	mov	r2, sl
 80106f8:	4631      	mov	r1, r6
 80106fa:	4628      	mov	r0, r5
 80106fc:	47b8      	blx	r7
 80106fe:	3001      	adds	r0, #1
 8010700:	f43f af09 	beq.w	8010516 <_printf_float+0xc2>
 8010704:	f04f 0900 	mov.w	r9, #0
 8010708:	f104 0a1a 	add.w	sl, r4, #26
 801070c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801070e:	425b      	negs	r3, r3
 8010710:	454b      	cmp	r3, r9
 8010712:	dc01      	bgt.n	8010718 <_printf_float+0x2c4>
 8010714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010716:	e792      	b.n	801063e <_printf_float+0x1ea>
 8010718:	2301      	movs	r3, #1
 801071a:	4652      	mov	r2, sl
 801071c:	4631      	mov	r1, r6
 801071e:	4628      	mov	r0, r5
 8010720:	47b8      	blx	r7
 8010722:	3001      	adds	r0, #1
 8010724:	f43f aef7 	beq.w	8010516 <_printf_float+0xc2>
 8010728:	f109 0901 	add.w	r9, r9, #1
 801072c:	e7ee      	b.n	801070c <_printf_float+0x2b8>
 801072e:	bf00      	nop
 8010730:	7fefffff 	.word	0x7fefffff
 8010734:	08016930 	.word	0x08016930
 8010738:	08016934 	.word	0x08016934
 801073c:	0801693c 	.word	0x0801693c
 8010740:	08016938 	.word	0x08016938
 8010744:	08016940 	.word	0x08016940
 8010748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801074a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801074c:	429a      	cmp	r2, r3
 801074e:	bfa8      	it	ge
 8010750:	461a      	movge	r2, r3
 8010752:	2a00      	cmp	r2, #0
 8010754:	4691      	mov	r9, r2
 8010756:	dc37      	bgt.n	80107c8 <_printf_float+0x374>
 8010758:	f04f 0b00 	mov.w	fp, #0
 801075c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010760:	f104 021a 	add.w	r2, r4, #26
 8010764:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010766:	9305      	str	r3, [sp, #20]
 8010768:	eba3 0309 	sub.w	r3, r3, r9
 801076c:	455b      	cmp	r3, fp
 801076e:	dc33      	bgt.n	80107d8 <_printf_float+0x384>
 8010770:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010774:	429a      	cmp	r2, r3
 8010776:	db3b      	blt.n	80107f0 <_printf_float+0x39c>
 8010778:	6823      	ldr	r3, [r4, #0]
 801077a:	07da      	lsls	r2, r3, #31
 801077c:	d438      	bmi.n	80107f0 <_printf_float+0x39c>
 801077e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010780:	9b05      	ldr	r3, [sp, #20]
 8010782:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010784:	1ad3      	subs	r3, r2, r3
 8010786:	eba2 0901 	sub.w	r9, r2, r1
 801078a:	4599      	cmp	r9, r3
 801078c:	bfa8      	it	ge
 801078e:	4699      	movge	r9, r3
 8010790:	f1b9 0f00 	cmp.w	r9, #0
 8010794:	dc35      	bgt.n	8010802 <_printf_float+0x3ae>
 8010796:	f04f 0800 	mov.w	r8, #0
 801079a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801079e:	f104 0a1a 	add.w	sl, r4, #26
 80107a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107a6:	1a9b      	subs	r3, r3, r2
 80107a8:	eba3 0309 	sub.w	r3, r3, r9
 80107ac:	4543      	cmp	r3, r8
 80107ae:	f77f af79 	ble.w	80106a4 <_printf_float+0x250>
 80107b2:	2301      	movs	r3, #1
 80107b4:	4652      	mov	r2, sl
 80107b6:	4631      	mov	r1, r6
 80107b8:	4628      	mov	r0, r5
 80107ba:	47b8      	blx	r7
 80107bc:	3001      	adds	r0, #1
 80107be:	f43f aeaa 	beq.w	8010516 <_printf_float+0xc2>
 80107c2:	f108 0801 	add.w	r8, r8, #1
 80107c6:	e7ec      	b.n	80107a2 <_printf_float+0x34e>
 80107c8:	4613      	mov	r3, r2
 80107ca:	4631      	mov	r1, r6
 80107cc:	4642      	mov	r2, r8
 80107ce:	4628      	mov	r0, r5
 80107d0:	47b8      	blx	r7
 80107d2:	3001      	adds	r0, #1
 80107d4:	d1c0      	bne.n	8010758 <_printf_float+0x304>
 80107d6:	e69e      	b.n	8010516 <_printf_float+0xc2>
 80107d8:	2301      	movs	r3, #1
 80107da:	4631      	mov	r1, r6
 80107dc:	4628      	mov	r0, r5
 80107de:	9205      	str	r2, [sp, #20]
 80107e0:	47b8      	blx	r7
 80107e2:	3001      	adds	r0, #1
 80107e4:	f43f ae97 	beq.w	8010516 <_printf_float+0xc2>
 80107e8:	9a05      	ldr	r2, [sp, #20]
 80107ea:	f10b 0b01 	add.w	fp, fp, #1
 80107ee:	e7b9      	b.n	8010764 <_printf_float+0x310>
 80107f0:	ee18 3a10 	vmov	r3, s16
 80107f4:	4652      	mov	r2, sl
 80107f6:	4631      	mov	r1, r6
 80107f8:	4628      	mov	r0, r5
 80107fa:	47b8      	blx	r7
 80107fc:	3001      	adds	r0, #1
 80107fe:	d1be      	bne.n	801077e <_printf_float+0x32a>
 8010800:	e689      	b.n	8010516 <_printf_float+0xc2>
 8010802:	9a05      	ldr	r2, [sp, #20]
 8010804:	464b      	mov	r3, r9
 8010806:	4442      	add	r2, r8
 8010808:	4631      	mov	r1, r6
 801080a:	4628      	mov	r0, r5
 801080c:	47b8      	blx	r7
 801080e:	3001      	adds	r0, #1
 8010810:	d1c1      	bne.n	8010796 <_printf_float+0x342>
 8010812:	e680      	b.n	8010516 <_printf_float+0xc2>
 8010814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010816:	2a01      	cmp	r2, #1
 8010818:	dc01      	bgt.n	801081e <_printf_float+0x3ca>
 801081a:	07db      	lsls	r3, r3, #31
 801081c:	d538      	bpl.n	8010890 <_printf_float+0x43c>
 801081e:	2301      	movs	r3, #1
 8010820:	4642      	mov	r2, r8
 8010822:	4631      	mov	r1, r6
 8010824:	4628      	mov	r0, r5
 8010826:	47b8      	blx	r7
 8010828:	3001      	adds	r0, #1
 801082a:	f43f ae74 	beq.w	8010516 <_printf_float+0xc2>
 801082e:	ee18 3a10 	vmov	r3, s16
 8010832:	4652      	mov	r2, sl
 8010834:	4631      	mov	r1, r6
 8010836:	4628      	mov	r0, r5
 8010838:	47b8      	blx	r7
 801083a:	3001      	adds	r0, #1
 801083c:	f43f ae6b 	beq.w	8010516 <_printf_float+0xc2>
 8010840:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010844:	2200      	movs	r2, #0
 8010846:	2300      	movs	r3, #0
 8010848:	f7f0 f946 	bl	8000ad8 <__aeabi_dcmpeq>
 801084c:	b9d8      	cbnz	r0, 8010886 <_printf_float+0x432>
 801084e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010850:	f108 0201 	add.w	r2, r8, #1
 8010854:	3b01      	subs	r3, #1
 8010856:	4631      	mov	r1, r6
 8010858:	4628      	mov	r0, r5
 801085a:	47b8      	blx	r7
 801085c:	3001      	adds	r0, #1
 801085e:	d10e      	bne.n	801087e <_printf_float+0x42a>
 8010860:	e659      	b.n	8010516 <_printf_float+0xc2>
 8010862:	2301      	movs	r3, #1
 8010864:	4652      	mov	r2, sl
 8010866:	4631      	mov	r1, r6
 8010868:	4628      	mov	r0, r5
 801086a:	47b8      	blx	r7
 801086c:	3001      	adds	r0, #1
 801086e:	f43f ae52 	beq.w	8010516 <_printf_float+0xc2>
 8010872:	f108 0801 	add.w	r8, r8, #1
 8010876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010878:	3b01      	subs	r3, #1
 801087a:	4543      	cmp	r3, r8
 801087c:	dcf1      	bgt.n	8010862 <_printf_float+0x40e>
 801087e:	464b      	mov	r3, r9
 8010880:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010884:	e6dc      	b.n	8010640 <_printf_float+0x1ec>
 8010886:	f04f 0800 	mov.w	r8, #0
 801088a:	f104 0a1a 	add.w	sl, r4, #26
 801088e:	e7f2      	b.n	8010876 <_printf_float+0x422>
 8010890:	2301      	movs	r3, #1
 8010892:	4642      	mov	r2, r8
 8010894:	e7df      	b.n	8010856 <_printf_float+0x402>
 8010896:	2301      	movs	r3, #1
 8010898:	464a      	mov	r2, r9
 801089a:	4631      	mov	r1, r6
 801089c:	4628      	mov	r0, r5
 801089e:	47b8      	blx	r7
 80108a0:	3001      	adds	r0, #1
 80108a2:	f43f ae38 	beq.w	8010516 <_printf_float+0xc2>
 80108a6:	f108 0801 	add.w	r8, r8, #1
 80108aa:	68e3      	ldr	r3, [r4, #12]
 80108ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80108ae:	1a5b      	subs	r3, r3, r1
 80108b0:	4543      	cmp	r3, r8
 80108b2:	dcf0      	bgt.n	8010896 <_printf_float+0x442>
 80108b4:	e6fa      	b.n	80106ac <_printf_float+0x258>
 80108b6:	f04f 0800 	mov.w	r8, #0
 80108ba:	f104 0919 	add.w	r9, r4, #25
 80108be:	e7f4      	b.n	80108aa <_printf_float+0x456>

080108c0 <_printf_common>:
 80108c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108c4:	4616      	mov	r6, r2
 80108c6:	4699      	mov	r9, r3
 80108c8:	688a      	ldr	r2, [r1, #8]
 80108ca:	690b      	ldr	r3, [r1, #16]
 80108cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80108d0:	4293      	cmp	r3, r2
 80108d2:	bfb8      	it	lt
 80108d4:	4613      	movlt	r3, r2
 80108d6:	6033      	str	r3, [r6, #0]
 80108d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80108dc:	4607      	mov	r7, r0
 80108de:	460c      	mov	r4, r1
 80108e0:	b10a      	cbz	r2, 80108e6 <_printf_common+0x26>
 80108e2:	3301      	adds	r3, #1
 80108e4:	6033      	str	r3, [r6, #0]
 80108e6:	6823      	ldr	r3, [r4, #0]
 80108e8:	0699      	lsls	r1, r3, #26
 80108ea:	bf42      	ittt	mi
 80108ec:	6833      	ldrmi	r3, [r6, #0]
 80108ee:	3302      	addmi	r3, #2
 80108f0:	6033      	strmi	r3, [r6, #0]
 80108f2:	6825      	ldr	r5, [r4, #0]
 80108f4:	f015 0506 	ands.w	r5, r5, #6
 80108f8:	d106      	bne.n	8010908 <_printf_common+0x48>
 80108fa:	f104 0a19 	add.w	sl, r4, #25
 80108fe:	68e3      	ldr	r3, [r4, #12]
 8010900:	6832      	ldr	r2, [r6, #0]
 8010902:	1a9b      	subs	r3, r3, r2
 8010904:	42ab      	cmp	r3, r5
 8010906:	dc26      	bgt.n	8010956 <_printf_common+0x96>
 8010908:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801090c:	1e13      	subs	r3, r2, #0
 801090e:	6822      	ldr	r2, [r4, #0]
 8010910:	bf18      	it	ne
 8010912:	2301      	movne	r3, #1
 8010914:	0692      	lsls	r2, r2, #26
 8010916:	d42b      	bmi.n	8010970 <_printf_common+0xb0>
 8010918:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801091c:	4649      	mov	r1, r9
 801091e:	4638      	mov	r0, r7
 8010920:	47c0      	blx	r8
 8010922:	3001      	adds	r0, #1
 8010924:	d01e      	beq.n	8010964 <_printf_common+0xa4>
 8010926:	6823      	ldr	r3, [r4, #0]
 8010928:	68e5      	ldr	r5, [r4, #12]
 801092a:	6832      	ldr	r2, [r6, #0]
 801092c:	f003 0306 	and.w	r3, r3, #6
 8010930:	2b04      	cmp	r3, #4
 8010932:	bf08      	it	eq
 8010934:	1aad      	subeq	r5, r5, r2
 8010936:	68a3      	ldr	r3, [r4, #8]
 8010938:	6922      	ldr	r2, [r4, #16]
 801093a:	bf0c      	ite	eq
 801093c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010940:	2500      	movne	r5, #0
 8010942:	4293      	cmp	r3, r2
 8010944:	bfc4      	itt	gt
 8010946:	1a9b      	subgt	r3, r3, r2
 8010948:	18ed      	addgt	r5, r5, r3
 801094a:	2600      	movs	r6, #0
 801094c:	341a      	adds	r4, #26
 801094e:	42b5      	cmp	r5, r6
 8010950:	d11a      	bne.n	8010988 <_printf_common+0xc8>
 8010952:	2000      	movs	r0, #0
 8010954:	e008      	b.n	8010968 <_printf_common+0xa8>
 8010956:	2301      	movs	r3, #1
 8010958:	4652      	mov	r2, sl
 801095a:	4649      	mov	r1, r9
 801095c:	4638      	mov	r0, r7
 801095e:	47c0      	blx	r8
 8010960:	3001      	adds	r0, #1
 8010962:	d103      	bne.n	801096c <_printf_common+0xac>
 8010964:	f04f 30ff 	mov.w	r0, #4294967295
 8010968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801096c:	3501      	adds	r5, #1
 801096e:	e7c6      	b.n	80108fe <_printf_common+0x3e>
 8010970:	18e1      	adds	r1, r4, r3
 8010972:	1c5a      	adds	r2, r3, #1
 8010974:	2030      	movs	r0, #48	; 0x30
 8010976:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801097a:	4422      	add	r2, r4
 801097c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010980:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010984:	3302      	adds	r3, #2
 8010986:	e7c7      	b.n	8010918 <_printf_common+0x58>
 8010988:	2301      	movs	r3, #1
 801098a:	4622      	mov	r2, r4
 801098c:	4649      	mov	r1, r9
 801098e:	4638      	mov	r0, r7
 8010990:	47c0      	blx	r8
 8010992:	3001      	adds	r0, #1
 8010994:	d0e6      	beq.n	8010964 <_printf_common+0xa4>
 8010996:	3601      	adds	r6, #1
 8010998:	e7d9      	b.n	801094e <_printf_common+0x8e>
	...

0801099c <_printf_i>:
 801099c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109a0:	460c      	mov	r4, r1
 80109a2:	4691      	mov	r9, r2
 80109a4:	7e27      	ldrb	r7, [r4, #24]
 80109a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80109a8:	2f78      	cmp	r7, #120	; 0x78
 80109aa:	4680      	mov	r8, r0
 80109ac:	469a      	mov	sl, r3
 80109ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80109b2:	d807      	bhi.n	80109c4 <_printf_i+0x28>
 80109b4:	2f62      	cmp	r7, #98	; 0x62
 80109b6:	d80a      	bhi.n	80109ce <_printf_i+0x32>
 80109b8:	2f00      	cmp	r7, #0
 80109ba:	f000 80d8 	beq.w	8010b6e <_printf_i+0x1d2>
 80109be:	2f58      	cmp	r7, #88	; 0x58
 80109c0:	f000 80a3 	beq.w	8010b0a <_printf_i+0x16e>
 80109c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80109c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80109cc:	e03a      	b.n	8010a44 <_printf_i+0xa8>
 80109ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80109d2:	2b15      	cmp	r3, #21
 80109d4:	d8f6      	bhi.n	80109c4 <_printf_i+0x28>
 80109d6:	a001      	add	r0, pc, #4	; (adr r0, 80109dc <_printf_i+0x40>)
 80109d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80109dc:	08010a35 	.word	0x08010a35
 80109e0:	08010a49 	.word	0x08010a49
 80109e4:	080109c5 	.word	0x080109c5
 80109e8:	080109c5 	.word	0x080109c5
 80109ec:	080109c5 	.word	0x080109c5
 80109f0:	080109c5 	.word	0x080109c5
 80109f4:	08010a49 	.word	0x08010a49
 80109f8:	080109c5 	.word	0x080109c5
 80109fc:	080109c5 	.word	0x080109c5
 8010a00:	080109c5 	.word	0x080109c5
 8010a04:	080109c5 	.word	0x080109c5
 8010a08:	08010b55 	.word	0x08010b55
 8010a0c:	08010a79 	.word	0x08010a79
 8010a10:	08010b37 	.word	0x08010b37
 8010a14:	080109c5 	.word	0x080109c5
 8010a18:	080109c5 	.word	0x080109c5
 8010a1c:	08010b77 	.word	0x08010b77
 8010a20:	080109c5 	.word	0x080109c5
 8010a24:	08010a79 	.word	0x08010a79
 8010a28:	080109c5 	.word	0x080109c5
 8010a2c:	080109c5 	.word	0x080109c5
 8010a30:	08010b3f 	.word	0x08010b3f
 8010a34:	680b      	ldr	r3, [r1, #0]
 8010a36:	1d1a      	adds	r2, r3, #4
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	600a      	str	r2, [r1, #0]
 8010a3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a44:	2301      	movs	r3, #1
 8010a46:	e0a3      	b.n	8010b90 <_printf_i+0x1f4>
 8010a48:	6825      	ldr	r5, [r4, #0]
 8010a4a:	6808      	ldr	r0, [r1, #0]
 8010a4c:	062e      	lsls	r6, r5, #24
 8010a4e:	f100 0304 	add.w	r3, r0, #4
 8010a52:	d50a      	bpl.n	8010a6a <_printf_i+0xce>
 8010a54:	6805      	ldr	r5, [r0, #0]
 8010a56:	600b      	str	r3, [r1, #0]
 8010a58:	2d00      	cmp	r5, #0
 8010a5a:	da03      	bge.n	8010a64 <_printf_i+0xc8>
 8010a5c:	232d      	movs	r3, #45	; 0x2d
 8010a5e:	426d      	negs	r5, r5
 8010a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a64:	485e      	ldr	r0, [pc, #376]	; (8010be0 <_printf_i+0x244>)
 8010a66:	230a      	movs	r3, #10
 8010a68:	e019      	b.n	8010a9e <_printf_i+0x102>
 8010a6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010a6e:	6805      	ldr	r5, [r0, #0]
 8010a70:	600b      	str	r3, [r1, #0]
 8010a72:	bf18      	it	ne
 8010a74:	b22d      	sxthne	r5, r5
 8010a76:	e7ef      	b.n	8010a58 <_printf_i+0xbc>
 8010a78:	680b      	ldr	r3, [r1, #0]
 8010a7a:	6825      	ldr	r5, [r4, #0]
 8010a7c:	1d18      	adds	r0, r3, #4
 8010a7e:	6008      	str	r0, [r1, #0]
 8010a80:	0628      	lsls	r0, r5, #24
 8010a82:	d501      	bpl.n	8010a88 <_printf_i+0xec>
 8010a84:	681d      	ldr	r5, [r3, #0]
 8010a86:	e002      	b.n	8010a8e <_printf_i+0xf2>
 8010a88:	0669      	lsls	r1, r5, #25
 8010a8a:	d5fb      	bpl.n	8010a84 <_printf_i+0xe8>
 8010a8c:	881d      	ldrh	r5, [r3, #0]
 8010a8e:	4854      	ldr	r0, [pc, #336]	; (8010be0 <_printf_i+0x244>)
 8010a90:	2f6f      	cmp	r7, #111	; 0x6f
 8010a92:	bf0c      	ite	eq
 8010a94:	2308      	moveq	r3, #8
 8010a96:	230a      	movne	r3, #10
 8010a98:	2100      	movs	r1, #0
 8010a9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010a9e:	6866      	ldr	r6, [r4, #4]
 8010aa0:	60a6      	str	r6, [r4, #8]
 8010aa2:	2e00      	cmp	r6, #0
 8010aa4:	bfa2      	ittt	ge
 8010aa6:	6821      	ldrge	r1, [r4, #0]
 8010aa8:	f021 0104 	bicge.w	r1, r1, #4
 8010aac:	6021      	strge	r1, [r4, #0]
 8010aae:	b90d      	cbnz	r5, 8010ab4 <_printf_i+0x118>
 8010ab0:	2e00      	cmp	r6, #0
 8010ab2:	d04d      	beq.n	8010b50 <_printf_i+0x1b4>
 8010ab4:	4616      	mov	r6, r2
 8010ab6:	fbb5 f1f3 	udiv	r1, r5, r3
 8010aba:	fb03 5711 	mls	r7, r3, r1, r5
 8010abe:	5dc7      	ldrb	r7, [r0, r7]
 8010ac0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010ac4:	462f      	mov	r7, r5
 8010ac6:	42bb      	cmp	r3, r7
 8010ac8:	460d      	mov	r5, r1
 8010aca:	d9f4      	bls.n	8010ab6 <_printf_i+0x11a>
 8010acc:	2b08      	cmp	r3, #8
 8010ace:	d10b      	bne.n	8010ae8 <_printf_i+0x14c>
 8010ad0:	6823      	ldr	r3, [r4, #0]
 8010ad2:	07df      	lsls	r7, r3, #31
 8010ad4:	d508      	bpl.n	8010ae8 <_printf_i+0x14c>
 8010ad6:	6923      	ldr	r3, [r4, #16]
 8010ad8:	6861      	ldr	r1, [r4, #4]
 8010ada:	4299      	cmp	r1, r3
 8010adc:	bfde      	ittt	le
 8010ade:	2330      	movle	r3, #48	; 0x30
 8010ae0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010ae4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010ae8:	1b92      	subs	r2, r2, r6
 8010aea:	6122      	str	r2, [r4, #16]
 8010aec:	f8cd a000 	str.w	sl, [sp]
 8010af0:	464b      	mov	r3, r9
 8010af2:	aa03      	add	r2, sp, #12
 8010af4:	4621      	mov	r1, r4
 8010af6:	4640      	mov	r0, r8
 8010af8:	f7ff fee2 	bl	80108c0 <_printf_common>
 8010afc:	3001      	adds	r0, #1
 8010afe:	d14c      	bne.n	8010b9a <_printf_i+0x1fe>
 8010b00:	f04f 30ff 	mov.w	r0, #4294967295
 8010b04:	b004      	add	sp, #16
 8010b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b0a:	4835      	ldr	r0, [pc, #212]	; (8010be0 <_printf_i+0x244>)
 8010b0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010b10:	6823      	ldr	r3, [r4, #0]
 8010b12:	680e      	ldr	r6, [r1, #0]
 8010b14:	061f      	lsls	r7, r3, #24
 8010b16:	f856 5b04 	ldr.w	r5, [r6], #4
 8010b1a:	600e      	str	r6, [r1, #0]
 8010b1c:	d514      	bpl.n	8010b48 <_printf_i+0x1ac>
 8010b1e:	07d9      	lsls	r1, r3, #31
 8010b20:	bf44      	itt	mi
 8010b22:	f043 0320 	orrmi.w	r3, r3, #32
 8010b26:	6023      	strmi	r3, [r4, #0]
 8010b28:	b91d      	cbnz	r5, 8010b32 <_printf_i+0x196>
 8010b2a:	6823      	ldr	r3, [r4, #0]
 8010b2c:	f023 0320 	bic.w	r3, r3, #32
 8010b30:	6023      	str	r3, [r4, #0]
 8010b32:	2310      	movs	r3, #16
 8010b34:	e7b0      	b.n	8010a98 <_printf_i+0xfc>
 8010b36:	6823      	ldr	r3, [r4, #0]
 8010b38:	f043 0320 	orr.w	r3, r3, #32
 8010b3c:	6023      	str	r3, [r4, #0]
 8010b3e:	2378      	movs	r3, #120	; 0x78
 8010b40:	4828      	ldr	r0, [pc, #160]	; (8010be4 <_printf_i+0x248>)
 8010b42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010b46:	e7e3      	b.n	8010b10 <_printf_i+0x174>
 8010b48:	065e      	lsls	r6, r3, #25
 8010b4a:	bf48      	it	mi
 8010b4c:	b2ad      	uxthmi	r5, r5
 8010b4e:	e7e6      	b.n	8010b1e <_printf_i+0x182>
 8010b50:	4616      	mov	r6, r2
 8010b52:	e7bb      	b.n	8010acc <_printf_i+0x130>
 8010b54:	680b      	ldr	r3, [r1, #0]
 8010b56:	6826      	ldr	r6, [r4, #0]
 8010b58:	6960      	ldr	r0, [r4, #20]
 8010b5a:	1d1d      	adds	r5, r3, #4
 8010b5c:	600d      	str	r5, [r1, #0]
 8010b5e:	0635      	lsls	r5, r6, #24
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	d501      	bpl.n	8010b68 <_printf_i+0x1cc>
 8010b64:	6018      	str	r0, [r3, #0]
 8010b66:	e002      	b.n	8010b6e <_printf_i+0x1d2>
 8010b68:	0671      	lsls	r1, r6, #25
 8010b6a:	d5fb      	bpl.n	8010b64 <_printf_i+0x1c8>
 8010b6c:	8018      	strh	r0, [r3, #0]
 8010b6e:	2300      	movs	r3, #0
 8010b70:	6123      	str	r3, [r4, #16]
 8010b72:	4616      	mov	r6, r2
 8010b74:	e7ba      	b.n	8010aec <_printf_i+0x150>
 8010b76:	680b      	ldr	r3, [r1, #0]
 8010b78:	1d1a      	adds	r2, r3, #4
 8010b7a:	600a      	str	r2, [r1, #0]
 8010b7c:	681e      	ldr	r6, [r3, #0]
 8010b7e:	6862      	ldr	r2, [r4, #4]
 8010b80:	2100      	movs	r1, #0
 8010b82:	4630      	mov	r0, r6
 8010b84:	f7ef fb34 	bl	80001f0 <memchr>
 8010b88:	b108      	cbz	r0, 8010b8e <_printf_i+0x1f2>
 8010b8a:	1b80      	subs	r0, r0, r6
 8010b8c:	6060      	str	r0, [r4, #4]
 8010b8e:	6863      	ldr	r3, [r4, #4]
 8010b90:	6123      	str	r3, [r4, #16]
 8010b92:	2300      	movs	r3, #0
 8010b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b98:	e7a8      	b.n	8010aec <_printf_i+0x150>
 8010b9a:	6923      	ldr	r3, [r4, #16]
 8010b9c:	4632      	mov	r2, r6
 8010b9e:	4649      	mov	r1, r9
 8010ba0:	4640      	mov	r0, r8
 8010ba2:	47d0      	blx	sl
 8010ba4:	3001      	adds	r0, #1
 8010ba6:	d0ab      	beq.n	8010b00 <_printf_i+0x164>
 8010ba8:	6823      	ldr	r3, [r4, #0]
 8010baa:	079b      	lsls	r3, r3, #30
 8010bac:	d413      	bmi.n	8010bd6 <_printf_i+0x23a>
 8010bae:	68e0      	ldr	r0, [r4, #12]
 8010bb0:	9b03      	ldr	r3, [sp, #12]
 8010bb2:	4298      	cmp	r0, r3
 8010bb4:	bfb8      	it	lt
 8010bb6:	4618      	movlt	r0, r3
 8010bb8:	e7a4      	b.n	8010b04 <_printf_i+0x168>
 8010bba:	2301      	movs	r3, #1
 8010bbc:	4632      	mov	r2, r6
 8010bbe:	4649      	mov	r1, r9
 8010bc0:	4640      	mov	r0, r8
 8010bc2:	47d0      	blx	sl
 8010bc4:	3001      	adds	r0, #1
 8010bc6:	d09b      	beq.n	8010b00 <_printf_i+0x164>
 8010bc8:	3501      	adds	r5, #1
 8010bca:	68e3      	ldr	r3, [r4, #12]
 8010bcc:	9903      	ldr	r1, [sp, #12]
 8010bce:	1a5b      	subs	r3, r3, r1
 8010bd0:	42ab      	cmp	r3, r5
 8010bd2:	dcf2      	bgt.n	8010bba <_printf_i+0x21e>
 8010bd4:	e7eb      	b.n	8010bae <_printf_i+0x212>
 8010bd6:	2500      	movs	r5, #0
 8010bd8:	f104 0619 	add.w	r6, r4, #25
 8010bdc:	e7f5      	b.n	8010bca <_printf_i+0x22e>
 8010bde:	bf00      	nop
 8010be0:	08016942 	.word	0x08016942
 8010be4:	08016953 	.word	0x08016953

08010be8 <sniprintf>:
 8010be8:	b40c      	push	{r2, r3}
 8010bea:	b530      	push	{r4, r5, lr}
 8010bec:	4b17      	ldr	r3, [pc, #92]	; (8010c4c <sniprintf+0x64>)
 8010bee:	1e0c      	subs	r4, r1, #0
 8010bf0:	681d      	ldr	r5, [r3, #0]
 8010bf2:	b09d      	sub	sp, #116	; 0x74
 8010bf4:	da08      	bge.n	8010c08 <sniprintf+0x20>
 8010bf6:	238b      	movs	r3, #139	; 0x8b
 8010bf8:	602b      	str	r3, [r5, #0]
 8010bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8010bfe:	b01d      	add	sp, #116	; 0x74
 8010c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c04:	b002      	add	sp, #8
 8010c06:	4770      	bx	lr
 8010c08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010c0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010c10:	bf14      	ite	ne
 8010c12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010c16:	4623      	moveq	r3, r4
 8010c18:	9304      	str	r3, [sp, #16]
 8010c1a:	9307      	str	r3, [sp, #28]
 8010c1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010c20:	9002      	str	r0, [sp, #8]
 8010c22:	9006      	str	r0, [sp, #24]
 8010c24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010c28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010c2a:	ab21      	add	r3, sp, #132	; 0x84
 8010c2c:	a902      	add	r1, sp, #8
 8010c2e:	4628      	mov	r0, r5
 8010c30:	9301      	str	r3, [sp, #4]
 8010c32:	f002 ff6d 	bl	8013b10 <_svfiprintf_r>
 8010c36:	1c43      	adds	r3, r0, #1
 8010c38:	bfbc      	itt	lt
 8010c3a:	238b      	movlt	r3, #139	; 0x8b
 8010c3c:	602b      	strlt	r3, [r5, #0]
 8010c3e:	2c00      	cmp	r4, #0
 8010c40:	d0dd      	beq.n	8010bfe <sniprintf+0x16>
 8010c42:	9b02      	ldr	r3, [sp, #8]
 8010c44:	2200      	movs	r2, #0
 8010c46:	701a      	strb	r2, [r3, #0]
 8010c48:	e7d9      	b.n	8010bfe <sniprintf+0x16>
 8010c4a:	bf00      	nop
 8010c4c:	2000002c 	.word	0x2000002c

08010c50 <siprintf>:
 8010c50:	b40e      	push	{r1, r2, r3}
 8010c52:	b500      	push	{lr}
 8010c54:	b09c      	sub	sp, #112	; 0x70
 8010c56:	ab1d      	add	r3, sp, #116	; 0x74
 8010c58:	9002      	str	r0, [sp, #8]
 8010c5a:	9006      	str	r0, [sp, #24]
 8010c5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010c60:	4809      	ldr	r0, [pc, #36]	; (8010c88 <siprintf+0x38>)
 8010c62:	9107      	str	r1, [sp, #28]
 8010c64:	9104      	str	r1, [sp, #16]
 8010c66:	4909      	ldr	r1, [pc, #36]	; (8010c8c <siprintf+0x3c>)
 8010c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c6c:	9105      	str	r1, [sp, #20]
 8010c6e:	6800      	ldr	r0, [r0, #0]
 8010c70:	9301      	str	r3, [sp, #4]
 8010c72:	a902      	add	r1, sp, #8
 8010c74:	f002 ff4c 	bl	8013b10 <_svfiprintf_r>
 8010c78:	9b02      	ldr	r3, [sp, #8]
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	701a      	strb	r2, [r3, #0]
 8010c7e:	b01c      	add	sp, #112	; 0x70
 8010c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c84:	b003      	add	sp, #12
 8010c86:	4770      	bx	lr
 8010c88:	2000002c 	.word	0x2000002c
 8010c8c:	ffff0208 	.word	0xffff0208

08010c90 <strcat>:
 8010c90:	b510      	push	{r4, lr}
 8010c92:	4602      	mov	r2, r0
 8010c94:	7814      	ldrb	r4, [r2, #0]
 8010c96:	4613      	mov	r3, r2
 8010c98:	3201      	adds	r2, #1
 8010c9a:	2c00      	cmp	r4, #0
 8010c9c:	d1fa      	bne.n	8010c94 <strcat+0x4>
 8010c9e:	3b01      	subs	r3, #1
 8010ca0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ca4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ca8:	2a00      	cmp	r2, #0
 8010caa:	d1f9      	bne.n	8010ca0 <strcat+0x10>
 8010cac:	bd10      	pop	{r4, pc}

08010cae <strchr>:
 8010cae:	b2c9      	uxtb	r1, r1
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cb6:	b11a      	cbz	r2, 8010cc0 <strchr+0x12>
 8010cb8:	428a      	cmp	r2, r1
 8010cba:	d1f9      	bne.n	8010cb0 <strchr+0x2>
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	4770      	bx	lr
 8010cc0:	2900      	cmp	r1, #0
 8010cc2:	bf18      	it	ne
 8010cc4:	2300      	movne	r3, #0
 8010cc6:	e7f9      	b.n	8010cbc <strchr+0xe>

08010cc8 <strcpy>:
 8010cc8:	4603      	mov	r3, r0
 8010cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010cce:	f803 2b01 	strb.w	r2, [r3], #1
 8010cd2:	2a00      	cmp	r2, #0
 8010cd4:	d1f9      	bne.n	8010cca <strcpy+0x2>
 8010cd6:	4770      	bx	lr

08010cd8 <strdup>:
 8010cd8:	4b02      	ldr	r3, [pc, #8]	; (8010ce4 <strdup+0xc>)
 8010cda:	4601      	mov	r1, r0
 8010cdc:	6818      	ldr	r0, [r3, #0]
 8010cde:	f000 b803 	b.w	8010ce8 <_strdup_r>
 8010ce2:	bf00      	nop
 8010ce4:	2000002c 	.word	0x2000002c

08010ce8 <_strdup_r>:
 8010ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010cea:	4604      	mov	r4, r0
 8010cec:	4608      	mov	r0, r1
 8010cee:	460d      	mov	r5, r1
 8010cf0:	f7ef fa76 	bl	80001e0 <strlen>
 8010cf4:	1c42      	adds	r2, r0, #1
 8010cf6:	4611      	mov	r1, r2
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	9201      	str	r2, [sp, #4]
 8010cfc:	f002 fe52 	bl	80139a4 <_malloc_r>
 8010d00:	4604      	mov	r4, r0
 8010d02:	b118      	cbz	r0, 8010d0c <_strdup_r+0x24>
 8010d04:	9a01      	ldr	r2, [sp, #4]
 8010d06:	4629      	mov	r1, r5
 8010d08:	f7ff faee 	bl	80102e8 <memcpy>
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	b003      	add	sp, #12
 8010d10:	bd30      	pop	{r4, r5, pc}

08010d12 <strncpy>:
 8010d12:	b510      	push	{r4, lr}
 8010d14:	3901      	subs	r1, #1
 8010d16:	4603      	mov	r3, r0
 8010d18:	b132      	cbz	r2, 8010d28 <strncpy+0x16>
 8010d1a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010d1e:	f803 4b01 	strb.w	r4, [r3], #1
 8010d22:	3a01      	subs	r2, #1
 8010d24:	2c00      	cmp	r4, #0
 8010d26:	d1f7      	bne.n	8010d18 <strncpy+0x6>
 8010d28:	441a      	add	r2, r3
 8010d2a:	2100      	movs	r1, #0
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	d100      	bne.n	8010d32 <strncpy+0x20>
 8010d30:	bd10      	pop	{r4, pc}
 8010d32:	f803 1b01 	strb.w	r1, [r3], #1
 8010d36:	e7f9      	b.n	8010d2c <strncpy+0x1a>

08010d38 <strsep>:
 8010d38:	4602      	mov	r2, r0
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	6800      	ldr	r0, [r0, #0]
 8010d3e:	f000 be7d 	b.w	8011a3c <__strtok_r>

08010d42 <strstr>:
 8010d42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d44:	780c      	ldrb	r4, [r1, #0]
 8010d46:	b164      	cbz	r4, 8010d62 <strstr+0x20>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	781a      	ldrb	r2, [r3, #0]
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	1c5e      	adds	r6, r3, #1
 8010d50:	b90a      	cbnz	r2, 8010d56 <strstr+0x14>
 8010d52:	4610      	mov	r0, r2
 8010d54:	e005      	b.n	8010d62 <strstr+0x20>
 8010d56:	4294      	cmp	r4, r2
 8010d58:	d108      	bne.n	8010d6c <strstr+0x2a>
 8010d5a:	460d      	mov	r5, r1
 8010d5c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8010d60:	b902      	cbnz	r2, 8010d64 <strstr+0x22>
 8010d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d64:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8010d68:	4297      	cmp	r7, r2
 8010d6a:	d0f7      	beq.n	8010d5c <strstr+0x1a>
 8010d6c:	4633      	mov	r3, r6
 8010d6e:	e7ec      	b.n	8010d4a <strstr+0x8>

08010d70 <sulp>:
 8010d70:	b570      	push	{r4, r5, r6, lr}
 8010d72:	4604      	mov	r4, r0
 8010d74:	460d      	mov	r5, r1
 8010d76:	ec45 4b10 	vmov	d0, r4, r5
 8010d7a:	4616      	mov	r6, r2
 8010d7c:	f002 fc64 	bl	8013648 <__ulp>
 8010d80:	ec51 0b10 	vmov	r0, r1, d0
 8010d84:	b17e      	cbz	r6, 8010da6 <sulp+0x36>
 8010d86:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010d8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	dd09      	ble.n	8010da6 <sulp+0x36>
 8010d92:	051b      	lsls	r3, r3, #20
 8010d94:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010d98:	2400      	movs	r4, #0
 8010d9a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010d9e:	4622      	mov	r2, r4
 8010da0:	462b      	mov	r3, r5
 8010da2:	f7ef fc31 	bl	8000608 <__aeabi_dmul>
 8010da6:	bd70      	pop	{r4, r5, r6, pc}

08010da8 <_strtod_l>:
 8010da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dac:	b0a3      	sub	sp, #140	; 0x8c
 8010dae:	461f      	mov	r7, r3
 8010db0:	2300      	movs	r3, #0
 8010db2:	931e      	str	r3, [sp, #120]	; 0x78
 8010db4:	4ba4      	ldr	r3, [pc, #656]	; (8011048 <_strtod_l+0x2a0>)
 8010db6:	9219      	str	r2, [sp, #100]	; 0x64
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	9307      	str	r3, [sp, #28]
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	4688      	mov	r8, r1
 8010dc2:	f7ef fa0d 	bl	80001e0 <strlen>
 8010dc6:	f04f 0a00 	mov.w	sl, #0
 8010dca:	4605      	mov	r5, r0
 8010dcc:	f04f 0b00 	mov.w	fp, #0
 8010dd0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010dd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010dd6:	781a      	ldrb	r2, [r3, #0]
 8010dd8:	2a2b      	cmp	r2, #43	; 0x2b
 8010dda:	d04c      	beq.n	8010e76 <_strtod_l+0xce>
 8010ddc:	d839      	bhi.n	8010e52 <_strtod_l+0xaa>
 8010dde:	2a0d      	cmp	r2, #13
 8010de0:	d832      	bhi.n	8010e48 <_strtod_l+0xa0>
 8010de2:	2a08      	cmp	r2, #8
 8010de4:	d832      	bhi.n	8010e4c <_strtod_l+0xa4>
 8010de6:	2a00      	cmp	r2, #0
 8010de8:	d03c      	beq.n	8010e64 <_strtod_l+0xbc>
 8010dea:	2300      	movs	r3, #0
 8010dec:	930e      	str	r3, [sp, #56]	; 0x38
 8010dee:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010df0:	7833      	ldrb	r3, [r6, #0]
 8010df2:	2b30      	cmp	r3, #48	; 0x30
 8010df4:	f040 80b4 	bne.w	8010f60 <_strtod_l+0x1b8>
 8010df8:	7873      	ldrb	r3, [r6, #1]
 8010dfa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010dfe:	2b58      	cmp	r3, #88	; 0x58
 8010e00:	d16c      	bne.n	8010edc <_strtod_l+0x134>
 8010e02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e04:	9301      	str	r3, [sp, #4]
 8010e06:	ab1e      	add	r3, sp, #120	; 0x78
 8010e08:	9702      	str	r7, [sp, #8]
 8010e0a:	9300      	str	r3, [sp, #0]
 8010e0c:	4a8f      	ldr	r2, [pc, #572]	; (801104c <_strtod_l+0x2a4>)
 8010e0e:	ab1f      	add	r3, sp, #124	; 0x7c
 8010e10:	a91d      	add	r1, sp, #116	; 0x74
 8010e12:	4620      	mov	r0, r4
 8010e14:	f001 fd86 	bl	8012924 <__gethex>
 8010e18:	f010 0707 	ands.w	r7, r0, #7
 8010e1c:	4605      	mov	r5, r0
 8010e1e:	d005      	beq.n	8010e2c <_strtod_l+0x84>
 8010e20:	2f06      	cmp	r7, #6
 8010e22:	d12a      	bne.n	8010e7a <_strtod_l+0xd2>
 8010e24:	3601      	adds	r6, #1
 8010e26:	2300      	movs	r3, #0
 8010e28:	961d      	str	r6, [sp, #116]	; 0x74
 8010e2a:	930e      	str	r3, [sp, #56]	; 0x38
 8010e2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	f040 8596 	bne.w	8011960 <_strtod_l+0xbb8>
 8010e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e36:	b1db      	cbz	r3, 8010e70 <_strtod_l+0xc8>
 8010e38:	4652      	mov	r2, sl
 8010e3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010e3e:	ec43 2b10 	vmov	d0, r2, r3
 8010e42:	b023      	add	sp, #140	; 0x8c
 8010e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e48:	2a20      	cmp	r2, #32
 8010e4a:	d1ce      	bne.n	8010dea <_strtod_l+0x42>
 8010e4c:	3301      	adds	r3, #1
 8010e4e:	931d      	str	r3, [sp, #116]	; 0x74
 8010e50:	e7c0      	b.n	8010dd4 <_strtod_l+0x2c>
 8010e52:	2a2d      	cmp	r2, #45	; 0x2d
 8010e54:	d1c9      	bne.n	8010dea <_strtod_l+0x42>
 8010e56:	2201      	movs	r2, #1
 8010e58:	920e      	str	r2, [sp, #56]	; 0x38
 8010e5a:	1c5a      	adds	r2, r3, #1
 8010e5c:	921d      	str	r2, [sp, #116]	; 0x74
 8010e5e:	785b      	ldrb	r3, [r3, #1]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d1c4      	bne.n	8010dee <_strtod_l+0x46>
 8010e64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010e66:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	f040 8576 	bne.w	801195c <_strtod_l+0xbb4>
 8010e70:	4652      	mov	r2, sl
 8010e72:	465b      	mov	r3, fp
 8010e74:	e7e3      	b.n	8010e3e <_strtod_l+0x96>
 8010e76:	2200      	movs	r2, #0
 8010e78:	e7ee      	b.n	8010e58 <_strtod_l+0xb0>
 8010e7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010e7c:	b13a      	cbz	r2, 8010e8e <_strtod_l+0xe6>
 8010e7e:	2135      	movs	r1, #53	; 0x35
 8010e80:	a820      	add	r0, sp, #128	; 0x80
 8010e82:	f002 fcec 	bl	801385e <__copybits>
 8010e86:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010e88:	4620      	mov	r0, r4
 8010e8a:	f002 f8b1 	bl	8012ff0 <_Bfree>
 8010e8e:	3f01      	subs	r7, #1
 8010e90:	2f05      	cmp	r7, #5
 8010e92:	d807      	bhi.n	8010ea4 <_strtod_l+0xfc>
 8010e94:	e8df f007 	tbb	[pc, r7]
 8010e98:	1d180b0e 	.word	0x1d180b0e
 8010e9c:	030e      	.short	0x030e
 8010e9e:	f04f 0b00 	mov.w	fp, #0
 8010ea2:	46da      	mov	sl, fp
 8010ea4:	0728      	lsls	r0, r5, #28
 8010ea6:	d5c1      	bpl.n	8010e2c <_strtod_l+0x84>
 8010ea8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010eac:	e7be      	b.n	8010e2c <_strtod_l+0x84>
 8010eae:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8010eb2:	e7f7      	b.n	8010ea4 <_strtod_l+0xfc>
 8010eb4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8010eb8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010eba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010ebe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010ec2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010ec6:	e7ed      	b.n	8010ea4 <_strtod_l+0xfc>
 8010ec8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8011050 <_strtod_l+0x2a8>
 8010ecc:	f04f 0a00 	mov.w	sl, #0
 8010ed0:	e7e8      	b.n	8010ea4 <_strtod_l+0xfc>
 8010ed2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010ed6:	f04f 3aff 	mov.w	sl, #4294967295
 8010eda:	e7e3      	b.n	8010ea4 <_strtod_l+0xfc>
 8010edc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010ede:	1c5a      	adds	r2, r3, #1
 8010ee0:	921d      	str	r2, [sp, #116]	; 0x74
 8010ee2:	785b      	ldrb	r3, [r3, #1]
 8010ee4:	2b30      	cmp	r3, #48	; 0x30
 8010ee6:	d0f9      	beq.n	8010edc <_strtod_l+0x134>
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d09f      	beq.n	8010e2c <_strtod_l+0x84>
 8010eec:	2301      	movs	r3, #1
 8010eee:	f04f 0900 	mov.w	r9, #0
 8010ef2:	9304      	str	r3, [sp, #16]
 8010ef4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8010ef8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010efc:	464f      	mov	r7, r9
 8010efe:	220a      	movs	r2, #10
 8010f00:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010f02:	7806      	ldrb	r6, [r0, #0]
 8010f04:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010f08:	b2d9      	uxtb	r1, r3
 8010f0a:	2909      	cmp	r1, #9
 8010f0c:	d92a      	bls.n	8010f64 <_strtod_l+0x1bc>
 8010f0e:	9907      	ldr	r1, [sp, #28]
 8010f10:	462a      	mov	r2, r5
 8010f12:	f003 f871 	bl	8013ff8 <strncmp>
 8010f16:	b398      	cbz	r0, 8010f80 <_strtod_l+0x1d8>
 8010f18:	2000      	movs	r0, #0
 8010f1a:	4633      	mov	r3, r6
 8010f1c:	463d      	mov	r5, r7
 8010f1e:	9007      	str	r0, [sp, #28]
 8010f20:	4602      	mov	r2, r0
 8010f22:	2b65      	cmp	r3, #101	; 0x65
 8010f24:	d001      	beq.n	8010f2a <_strtod_l+0x182>
 8010f26:	2b45      	cmp	r3, #69	; 0x45
 8010f28:	d118      	bne.n	8010f5c <_strtod_l+0x1b4>
 8010f2a:	b91d      	cbnz	r5, 8010f34 <_strtod_l+0x18c>
 8010f2c:	9b04      	ldr	r3, [sp, #16]
 8010f2e:	4303      	orrs	r3, r0
 8010f30:	d098      	beq.n	8010e64 <_strtod_l+0xbc>
 8010f32:	2500      	movs	r5, #0
 8010f34:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8010f38:	f108 0301 	add.w	r3, r8, #1
 8010f3c:	931d      	str	r3, [sp, #116]	; 0x74
 8010f3e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010f42:	2b2b      	cmp	r3, #43	; 0x2b
 8010f44:	d075      	beq.n	8011032 <_strtod_l+0x28a>
 8010f46:	2b2d      	cmp	r3, #45	; 0x2d
 8010f48:	d07b      	beq.n	8011042 <_strtod_l+0x29a>
 8010f4a:	f04f 0c00 	mov.w	ip, #0
 8010f4e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010f52:	2909      	cmp	r1, #9
 8010f54:	f240 8082 	bls.w	801105c <_strtod_l+0x2b4>
 8010f58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010f5c:	2600      	movs	r6, #0
 8010f5e:	e09d      	b.n	801109c <_strtod_l+0x2f4>
 8010f60:	2300      	movs	r3, #0
 8010f62:	e7c4      	b.n	8010eee <_strtod_l+0x146>
 8010f64:	2f08      	cmp	r7, #8
 8010f66:	bfd8      	it	le
 8010f68:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010f6a:	f100 0001 	add.w	r0, r0, #1
 8010f6e:	bfda      	itte	le
 8010f70:	fb02 3301 	mlale	r3, r2, r1, r3
 8010f74:	9309      	strle	r3, [sp, #36]	; 0x24
 8010f76:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010f7a:	3701      	adds	r7, #1
 8010f7c:	901d      	str	r0, [sp, #116]	; 0x74
 8010f7e:	e7bf      	b.n	8010f00 <_strtod_l+0x158>
 8010f80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f82:	195a      	adds	r2, r3, r5
 8010f84:	921d      	str	r2, [sp, #116]	; 0x74
 8010f86:	5d5b      	ldrb	r3, [r3, r5]
 8010f88:	2f00      	cmp	r7, #0
 8010f8a:	d037      	beq.n	8010ffc <_strtod_l+0x254>
 8010f8c:	9007      	str	r0, [sp, #28]
 8010f8e:	463d      	mov	r5, r7
 8010f90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010f94:	2a09      	cmp	r2, #9
 8010f96:	d912      	bls.n	8010fbe <_strtod_l+0x216>
 8010f98:	2201      	movs	r2, #1
 8010f9a:	e7c2      	b.n	8010f22 <_strtod_l+0x17a>
 8010f9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f9e:	1c5a      	adds	r2, r3, #1
 8010fa0:	921d      	str	r2, [sp, #116]	; 0x74
 8010fa2:	785b      	ldrb	r3, [r3, #1]
 8010fa4:	3001      	adds	r0, #1
 8010fa6:	2b30      	cmp	r3, #48	; 0x30
 8010fa8:	d0f8      	beq.n	8010f9c <_strtod_l+0x1f4>
 8010faa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010fae:	2a08      	cmp	r2, #8
 8010fb0:	f200 84db 	bhi.w	801196a <_strtod_l+0xbc2>
 8010fb4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010fb6:	9007      	str	r0, [sp, #28]
 8010fb8:	2000      	movs	r0, #0
 8010fba:	920a      	str	r2, [sp, #40]	; 0x28
 8010fbc:	4605      	mov	r5, r0
 8010fbe:	3b30      	subs	r3, #48	; 0x30
 8010fc0:	f100 0201 	add.w	r2, r0, #1
 8010fc4:	d014      	beq.n	8010ff0 <_strtod_l+0x248>
 8010fc6:	9907      	ldr	r1, [sp, #28]
 8010fc8:	4411      	add	r1, r2
 8010fca:	9107      	str	r1, [sp, #28]
 8010fcc:	462a      	mov	r2, r5
 8010fce:	eb00 0e05 	add.w	lr, r0, r5
 8010fd2:	210a      	movs	r1, #10
 8010fd4:	4572      	cmp	r2, lr
 8010fd6:	d113      	bne.n	8011000 <_strtod_l+0x258>
 8010fd8:	182a      	adds	r2, r5, r0
 8010fda:	2a08      	cmp	r2, #8
 8010fdc:	f105 0501 	add.w	r5, r5, #1
 8010fe0:	4405      	add	r5, r0
 8010fe2:	dc1c      	bgt.n	801101e <_strtod_l+0x276>
 8010fe4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010fe6:	220a      	movs	r2, #10
 8010fe8:	fb02 3301 	mla	r3, r2, r1, r3
 8010fec:	9309      	str	r3, [sp, #36]	; 0x24
 8010fee:	2200      	movs	r2, #0
 8010ff0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010ff2:	1c59      	adds	r1, r3, #1
 8010ff4:	911d      	str	r1, [sp, #116]	; 0x74
 8010ff6:	785b      	ldrb	r3, [r3, #1]
 8010ff8:	4610      	mov	r0, r2
 8010ffa:	e7c9      	b.n	8010f90 <_strtod_l+0x1e8>
 8010ffc:	4638      	mov	r0, r7
 8010ffe:	e7d2      	b.n	8010fa6 <_strtod_l+0x1fe>
 8011000:	2a08      	cmp	r2, #8
 8011002:	dc04      	bgt.n	801100e <_strtod_l+0x266>
 8011004:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011006:	434e      	muls	r6, r1
 8011008:	9609      	str	r6, [sp, #36]	; 0x24
 801100a:	3201      	adds	r2, #1
 801100c:	e7e2      	b.n	8010fd4 <_strtod_l+0x22c>
 801100e:	f102 0c01 	add.w	ip, r2, #1
 8011012:	f1bc 0f10 	cmp.w	ip, #16
 8011016:	bfd8      	it	le
 8011018:	fb01 f909 	mulle.w	r9, r1, r9
 801101c:	e7f5      	b.n	801100a <_strtod_l+0x262>
 801101e:	2d10      	cmp	r5, #16
 8011020:	bfdc      	itt	le
 8011022:	220a      	movle	r2, #10
 8011024:	fb02 3909 	mlale	r9, r2, r9, r3
 8011028:	e7e1      	b.n	8010fee <_strtod_l+0x246>
 801102a:	2300      	movs	r3, #0
 801102c:	9307      	str	r3, [sp, #28]
 801102e:	2201      	movs	r2, #1
 8011030:	e77c      	b.n	8010f2c <_strtod_l+0x184>
 8011032:	f04f 0c00 	mov.w	ip, #0
 8011036:	f108 0302 	add.w	r3, r8, #2
 801103a:	931d      	str	r3, [sp, #116]	; 0x74
 801103c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011040:	e785      	b.n	8010f4e <_strtod_l+0x1a6>
 8011042:	f04f 0c01 	mov.w	ip, #1
 8011046:	e7f6      	b.n	8011036 <_strtod_l+0x28e>
 8011048:	08016b54 	.word	0x08016b54
 801104c:	08016964 	.word	0x08016964
 8011050:	7ff00000 	.word	0x7ff00000
 8011054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011056:	1c59      	adds	r1, r3, #1
 8011058:	911d      	str	r1, [sp, #116]	; 0x74
 801105a:	785b      	ldrb	r3, [r3, #1]
 801105c:	2b30      	cmp	r3, #48	; 0x30
 801105e:	d0f9      	beq.n	8011054 <_strtod_l+0x2ac>
 8011060:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8011064:	2908      	cmp	r1, #8
 8011066:	f63f af79 	bhi.w	8010f5c <_strtod_l+0x1b4>
 801106a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801106e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011070:	9308      	str	r3, [sp, #32]
 8011072:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011074:	1c59      	adds	r1, r3, #1
 8011076:	911d      	str	r1, [sp, #116]	; 0x74
 8011078:	785b      	ldrb	r3, [r3, #1]
 801107a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801107e:	2e09      	cmp	r6, #9
 8011080:	d937      	bls.n	80110f2 <_strtod_l+0x34a>
 8011082:	9e08      	ldr	r6, [sp, #32]
 8011084:	1b89      	subs	r1, r1, r6
 8011086:	2908      	cmp	r1, #8
 8011088:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801108c:	dc02      	bgt.n	8011094 <_strtod_l+0x2ec>
 801108e:	4576      	cmp	r6, lr
 8011090:	bfa8      	it	ge
 8011092:	4676      	movge	r6, lr
 8011094:	f1bc 0f00 	cmp.w	ip, #0
 8011098:	d000      	beq.n	801109c <_strtod_l+0x2f4>
 801109a:	4276      	negs	r6, r6
 801109c:	2d00      	cmp	r5, #0
 801109e:	d14f      	bne.n	8011140 <_strtod_l+0x398>
 80110a0:	9904      	ldr	r1, [sp, #16]
 80110a2:	4301      	orrs	r1, r0
 80110a4:	f47f aec2 	bne.w	8010e2c <_strtod_l+0x84>
 80110a8:	2a00      	cmp	r2, #0
 80110aa:	f47f aedb 	bne.w	8010e64 <_strtod_l+0xbc>
 80110ae:	2b69      	cmp	r3, #105	; 0x69
 80110b0:	d027      	beq.n	8011102 <_strtod_l+0x35a>
 80110b2:	dc24      	bgt.n	80110fe <_strtod_l+0x356>
 80110b4:	2b49      	cmp	r3, #73	; 0x49
 80110b6:	d024      	beq.n	8011102 <_strtod_l+0x35a>
 80110b8:	2b4e      	cmp	r3, #78	; 0x4e
 80110ba:	f47f aed3 	bne.w	8010e64 <_strtod_l+0xbc>
 80110be:	499e      	ldr	r1, [pc, #632]	; (8011338 <_strtod_l+0x590>)
 80110c0:	a81d      	add	r0, sp, #116	; 0x74
 80110c2:	f001 fe87 	bl	8012dd4 <__match>
 80110c6:	2800      	cmp	r0, #0
 80110c8:	f43f aecc 	beq.w	8010e64 <_strtod_l+0xbc>
 80110cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80110ce:	781b      	ldrb	r3, [r3, #0]
 80110d0:	2b28      	cmp	r3, #40	; 0x28
 80110d2:	d12d      	bne.n	8011130 <_strtod_l+0x388>
 80110d4:	4999      	ldr	r1, [pc, #612]	; (801133c <_strtod_l+0x594>)
 80110d6:	aa20      	add	r2, sp, #128	; 0x80
 80110d8:	a81d      	add	r0, sp, #116	; 0x74
 80110da:	f001 fe8f 	bl	8012dfc <__hexnan>
 80110de:	2805      	cmp	r0, #5
 80110e0:	d126      	bne.n	8011130 <_strtod_l+0x388>
 80110e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80110e4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80110e8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80110ec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80110f0:	e69c      	b.n	8010e2c <_strtod_l+0x84>
 80110f2:	210a      	movs	r1, #10
 80110f4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80110f8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80110fc:	e7b9      	b.n	8011072 <_strtod_l+0x2ca>
 80110fe:	2b6e      	cmp	r3, #110	; 0x6e
 8011100:	e7db      	b.n	80110ba <_strtod_l+0x312>
 8011102:	498f      	ldr	r1, [pc, #572]	; (8011340 <_strtod_l+0x598>)
 8011104:	a81d      	add	r0, sp, #116	; 0x74
 8011106:	f001 fe65 	bl	8012dd4 <__match>
 801110a:	2800      	cmp	r0, #0
 801110c:	f43f aeaa 	beq.w	8010e64 <_strtod_l+0xbc>
 8011110:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011112:	498c      	ldr	r1, [pc, #560]	; (8011344 <_strtod_l+0x59c>)
 8011114:	3b01      	subs	r3, #1
 8011116:	a81d      	add	r0, sp, #116	; 0x74
 8011118:	931d      	str	r3, [sp, #116]	; 0x74
 801111a:	f001 fe5b 	bl	8012dd4 <__match>
 801111e:	b910      	cbnz	r0, 8011126 <_strtod_l+0x37e>
 8011120:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011122:	3301      	adds	r3, #1
 8011124:	931d      	str	r3, [sp, #116]	; 0x74
 8011126:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8011354 <_strtod_l+0x5ac>
 801112a:	f04f 0a00 	mov.w	sl, #0
 801112e:	e67d      	b.n	8010e2c <_strtod_l+0x84>
 8011130:	4885      	ldr	r0, [pc, #532]	; (8011348 <_strtod_l+0x5a0>)
 8011132:	f002 ff49 	bl	8013fc8 <nan>
 8011136:	ed8d 0b04 	vstr	d0, [sp, #16]
 801113a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801113e:	e675      	b.n	8010e2c <_strtod_l+0x84>
 8011140:	9b07      	ldr	r3, [sp, #28]
 8011142:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011144:	1af3      	subs	r3, r6, r3
 8011146:	2f00      	cmp	r7, #0
 8011148:	bf08      	it	eq
 801114a:	462f      	moveq	r7, r5
 801114c:	2d10      	cmp	r5, #16
 801114e:	9308      	str	r3, [sp, #32]
 8011150:	46a8      	mov	r8, r5
 8011152:	bfa8      	it	ge
 8011154:	f04f 0810 	movge.w	r8, #16
 8011158:	f7ef f9dc 	bl	8000514 <__aeabi_ui2d>
 801115c:	2d09      	cmp	r5, #9
 801115e:	4682      	mov	sl, r0
 8011160:	468b      	mov	fp, r1
 8011162:	dd13      	ble.n	801118c <_strtod_l+0x3e4>
 8011164:	4b79      	ldr	r3, [pc, #484]	; (801134c <_strtod_l+0x5a4>)
 8011166:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801116a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801116e:	f7ef fa4b 	bl	8000608 <__aeabi_dmul>
 8011172:	4682      	mov	sl, r0
 8011174:	4648      	mov	r0, r9
 8011176:	468b      	mov	fp, r1
 8011178:	f7ef f9cc 	bl	8000514 <__aeabi_ui2d>
 801117c:	4602      	mov	r2, r0
 801117e:	460b      	mov	r3, r1
 8011180:	4650      	mov	r0, sl
 8011182:	4659      	mov	r1, fp
 8011184:	f7ef f88a 	bl	800029c <__adddf3>
 8011188:	4682      	mov	sl, r0
 801118a:	468b      	mov	fp, r1
 801118c:	2d0f      	cmp	r5, #15
 801118e:	dc38      	bgt.n	8011202 <_strtod_l+0x45a>
 8011190:	9b08      	ldr	r3, [sp, #32]
 8011192:	2b00      	cmp	r3, #0
 8011194:	f43f ae4a 	beq.w	8010e2c <_strtod_l+0x84>
 8011198:	dd24      	ble.n	80111e4 <_strtod_l+0x43c>
 801119a:	2b16      	cmp	r3, #22
 801119c:	dc0b      	bgt.n	80111b6 <_strtod_l+0x40e>
 801119e:	4d6b      	ldr	r5, [pc, #428]	; (801134c <_strtod_l+0x5a4>)
 80111a0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80111a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80111a8:	4652      	mov	r2, sl
 80111aa:	465b      	mov	r3, fp
 80111ac:	f7ef fa2c 	bl	8000608 <__aeabi_dmul>
 80111b0:	4682      	mov	sl, r0
 80111b2:	468b      	mov	fp, r1
 80111b4:	e63a      	b.n	8010e2c <_strtod_l+0x84>
 80111b6:	9a08      	ldr	r2, [sp, #32]
 80111b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80111bc:	4293      	cmp	r3, r2
 80111be:	db20      	blt.n	8011202 <_strtod_l+0x45a>
 80111c0:	4c62      	ldr	r4, [pc, #392]	; (801134c <_strtod_l+0x5a4>)
 80111c2:	f1c5 050f 	rsb	r5, r5, #15
 80111c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80111ca:	4652      	mov	r2, sl
 80111cc:	465b      	mov	r3, fp
 80111ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111d2:	f7ef fa19 	bl	8000608 <__aeabi_dmul>
 80111d6:	9b08      	ldr	r3, [sp, #32]
 80111d8:	1b5d      	subs	r5, r3, r5
 80111da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80111de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80111e2:	e7e3      	b.n	80111ac <_strtod_l+0x404>
 80111e4:	9b08      	ldr	r3, [sp, #32]
 80111e6:	3316      	adds	r3, #22
 80111e8:	db0b      	blt.n	8011202 <_strtod_l+0x45a>
 80111ea:	9b07      	ldr	r3, [sp, #28]
 80111ec:	4a57      	ldr	r2, [pc, #348]	; (801134c <_strtod_l+0x5a4>)
 80111ee:	1b9e      	subs	r6, r3, r6
 80111f0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80111f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80111f8:	4650      	mov	r0, sl
 80111fa:	4659      	mov	r1, fp
 80111fc:	f7ef fb2e 	bl	800085c <__aeabi_ddiv>
 8011200:	e7d6      	b.n	80111b0 <_strtod_l+0x408>
 8011202:	9b08      	ldr	r3, [sp, #32]
 8011204:	eba5 0808 	sub.w	r8, r5, r8
 8011208:	4498      	add	r8, r3
 801120a:	f1b8 0f00 	cmp.w	r8, #0
 801120e:	dd71      	ble.n	80112f4 <_strtod_l+0x54c>
 8011210:	f018 030f 	ands.w	r3, r8, #15
 8011214:	d00a      	beq.n	801122c <_strtod_l+0x484>
 8011216:	494d      	ldr	r1, [pc, #308]	; (801134c <_strtod_l+0x5a4>)
 8011218:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801121c:	4652      	mov	r2, sl
 801121e:	465b      	mov	r3, fp
 8011220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011224:	f7ef f9f0 	bl	8000608 <__aeabi_dmul>
 8011228:	4682      	mov	sl, r0
 801122a:	468b      	mov	fp, r1
 801122c:	f038 080f 	bics.w	r8, r8, #15
 8011230:	d04d      	beq.n	80112ce <_strtod_l+0x526>
 8011232:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011236:	dd22      	ble.n	801127e <_strtod_l+0x4d6>
 8011238:	2500      	movs	r5, #0
 801123a:	462e      	mov	r6, r5
 801123c:	9509      	str	r5, [sp, #36]	; 0x24
 801123e:	9507      	str	r5, [sp, #28]
 8011240:	2322      	movs	r3, #34	; 0x22
 8011242:	f8df b110 	ldr.w	fp, [pc, #272]	; 8011354 <_strtod_l+0x5ac>
 8011246:	6023      	str	r3, [r4, #0]
 8011248:	f04f 0a00 	mov.w	sl, #0
 801124c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801124e:	2b00      	cmp	r3, #0
 8011250:	f43f adec 	beq.w	8010e2c <_strtod_l+0x84>
 8011254:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011256:	4620      	mov	r0, r4
 8011258:	f001 feca 	bl	8012ff0 <_Bfree>
 801125c:	9907      	ldr	r1, [sp, #28]
 801125e:	4620      	mov	r0, r4
 8011260:	f001 fec6 	bl	8012ff0 <_Bfree>
 8011264:	4631      	mov	r1, r6
 8011266:	4620      	mov	r0, r4
 8011268:	f001 fec2 	bl	8012ff0 <_Bfree>
 801126c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801126e:	4620      	mov	r0, r4
 8011270:	f001 febe 	bl	8012ff0 <_Bfree>
 8011274:	4629      	mov	r1, r5
 8011276:	4620      	mov	r0, r4
 8011278:	f001 feba 	bl	8012ff0 <_Bfree>
 801127c:	e5d6      	b.n	8010e2c <_strtod_l+0x84>
 801127e:	2300      	movs	r3, #0
 8011280:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011284:	4650      	mov	r0, sl
 8011286:	4659      	mov	r1, fp
 8011288:	4699      	mov	r9, r3
 801128a:	f1b8 0f01 	cmp.w	r8, #1
 801128e:	dc21      	bgt.n	80112d4 <_strtod_l+0x52c>
 8011290:	b10b      	cbz	r3, 8011296 <_strtod_l+0x4ee>
 8011292:	4682      	mov	sl, r0
 8011294:	468b      	mov	fp, r1
 8011296:	4b2e      	ldr	r3, [pc, #184]	; (8011350 <_strtod_l+0x5a8>)
 8011298:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801129c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80112a0:	4652      	mov	r2, sl
 80112a2:	465b      	mov	r3, fp
 80112a4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80112a8:	f7ef f9ae 	bl	8000608 <__aeabi_dmul>
 80112ac:	4b29      	ldr	r3, [pc, #164]	; (8011354 <_strtod_l+0x5ac>)
 80112ae:	460a      	mov	r2, r1
 80112b0:	400b      	ands	r3, r1
 80112b2:	4929      	ldr	r1, [pc, #164]	; (8011358 <_strtod_l+0x5b0>)
 80112b4:	428b      	cmp	r3, r1
 80112b6:	4682      	mov	sl, r0
 80112b8:	d8be      	bhi.n	8011238 <_strtod_l+0x490>
 80112ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80112be:	428b      	cmp	r3, r1
 80112c0:	bf86      	itte	hi
 80112c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801135c <_strtod_l+0x5b4>
 80112c6:	f04f 3aff 	movhi.w	sl, #4294967295
 80112ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80112ce:	2300      	movs	r3, #0
 80112d0:	9304      	str	r3, [sp, #16]
 80112d2:	e081      	b.n	80113d8 <_strtod_l+0x630>
 80112d4:	f018 0f01 	tst.w	r8, #1
 80112d8:	d007      	beq.n	80112ea <_strtod_l+0x542>
 80112da:	4b1d      	ldr	r3, [pc, #116]	; (8011350 <_strtod_l+0x5a8>)
 80112dc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80112e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e4:	f7ef f990 	bl	8000608 <__aeabi_dmul>
 80112e8:	2301      	movs	r3, #1
 80112ea:	f109 0901 	add.w	r9, r9, #1
 80112ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80112f2:	e7ca      	b.n	801128a <_strtod_l+0x4e2>
 80112f4:	d0eb      	beq.n	80112ce <_strtod_l+0x526>
 80112f6:	f1c8 0800 	rsb	r8, r8, #0
 80112fa:	f018 020f 	ands.w	r2, r8, #15
 80112fe:	d00a      	beq.n	8011316 <_strtod_l+0x56e>
 8011300:	4b12      	ldr	r3, [pc, #72]	; (801134c <_strtod_l+0x5a4>)
 8011302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011306:	4650      	mov	r0, sl
 8011308:	4659      	mov	r1, fp
 801130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130e:	f7ef faa5 	bl	800085c <__aeabi_ddiv>
 8011312:	4682      	mov	sl, r0
 8011314:	468b      	mov	fp, r1
 8011316:	ea5f 1828 	movs.w	r8, r8, asr #4
 801131a:	d0d8      	beq.n	80112ce <_strtod_l+0x526>
 801131c:	f1b8 0f1f 	cmp.w	r8, #31
 8011320:	dd1e      	ble.n	8011360 <_strtod_l+0x5b8>
 8011322:	2500      	movs	r5, #0
 8011324:	462e      	mov	r6, r5
 8011326:	9509      	str	r5, [sp, #36]	; 0x24
 8011328:	9507      	str	r5, [sp, #28]
 801132a:	2322      	movs	r3, #34	; 0x22
 801132c:	f04f 0a00 	mov.w	sl, #0
 8011330:	f04f 0b00 	mov.w	fp, #0
 8011334:	6023      	str	r3, [r4, #0]
 8011336:	e789      	b.n	801124c <_strtod_l+0x4a4>
 8011338:	0801693d 	.word	0x0801693d
 801133c:	08016978 	.word	0x08016978
 8011340:	08016935 	.word	0x08016935
 8011344:	08016a6f 	.word	0x08016a6f
 8011348:	08016a6b 	.word	0x08016a6b
 801134c:	08016bf0 	.word	0x08016bf0
 8011350:	08016bc8 	.word	0x08016bc8
 8011354:	7ff00000 	.word	0x7ff00000
 8011358:	7ca00000 	.word	0x7ca00000
 801135c:	7fefffff 	.word	0x7fefffff
 8011360:	f018 0310 	ands.w	r3, r8, #16
 8011364:	bf18      	it	ne
 8011366:	236a      	movne	r3, #106	; 0x6a
 8011368:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011720 <_strtod_l+0x978>
 801136c:	9304      	str	r3, [sp, #16]
 801136e:	4650      	mov	r0, sl
 8011370:	4659      	mov	r1, fp
 8011372:	2300      	movs	r3, #0
 8011374:	f018 0f01 	tst.w	r8, #1
 8011378:	d004      	beq.n	8011384 <_strtod_l+0x5dc>
 801137a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801137e:	f7ef f943 	bl	8000608 <__aeabi_dmul>
 8011382:	2301      	movs	r3, #1
 8011384:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011388:	f109 0908 	add.w	r9, r9, #8
 801138c:	d1f2      	bne.n	8011374 <_strtod_l+0x5cc>
 801138e:	b10b      	cbz	r3, 8011394 <_strtod_l+0x5ec>
 8011390:	4682      	mov	sl, r0
 8011392:	468b      	mov	fp, r1
 8011394:	9b04      	ldr	r3, [sp, #16]
 8011396:	b1bb      	cbz	r3, 80113c8 <_strtod_l+0x620>
 8011398:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801139c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	4659      	mov	r1, fp
 80113a4:	dd10      	ble.n	80113c8 <_strtod_l+0x620>
 80113a6:	2b1f      	cmp	r3, #31
 80113a8:	f340 8128 	ble.w	80115fc <_strtod_l+0x854>
 80113ac:	2b34      	cmp	r3, #52	; 0x34
 80113ae:	bfde      	ittt	le
 80113b0:	3b20      	suble	r3, #32
 80113b2:	f04f 32ff 	movle.w	r2, #4294967295
 80113b6:	fa02 f303 	lslle.w	r3, r2, r3
 80113ba:	f04f 0a00 	mov.w	sl, #0
 80113be:	bfcc      	ite	gt
 80113c0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80113c4:	ea03 0b01 	andle.w	fp, r3, r1
 80113c8:	2200      	movs	r2, #0
 80113ca:	2300      	movs	r3, #0
 80113cc:	4650      	mov	r0, sl
 80113ce:	4659      	mov	r1, fp
 80113d0:	f7ef fb82 	bl	8000ad8 <__aeabi_dcmpeq>
 80113d4:	2800      	cmp	r0, #0
 80113d6:	d1a4      	bne.n	8011322 <_strtod_l+0x57a>
 80113d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113da:	9300      	str	r3, [sp, #0]
 80113dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80113de:	462b      	mov	r3, r5
 80113e0:	463a      	mov	r2, r7
 80113e2:	4620      	mov	r0, r4
 80113e4:	f001 fe70 	bl	80130c8 <__s2b>
 80113e8:	9009      	str	r0, [sp, #36]	; 0x24
 80113ea:	2800      	cmp	r0, #0
 80113ec:	f43f af24 	beq.w	8011238 <_strtod_l+0x490>
 80113f0:	9b07      	ldr	r3, [sp, #28]
 80113f2:	1b9e      	subs	r6, r3, r6
 80113f4:	9b08      	ldr	r3, [sp, #32]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	bfb4      	ite	lt
 80113fa:	4633      	movlt	r3, r6
 80113fc:	2300      	movge	r3, #0
 80113fe:	9310      	str	r3, [sp, #64]	; 0x40
 8011400:	9b08      	ldr	r3, [sp, #32]
 8011402:	2500      	movs	r5, #0
 8011404:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011408:	9318      	str	r3, [sp, #96]	; 0x60
 801140a:	462e      	mov	r6, r5
 801140c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801140e:	4620      	mov	r0, r4
 8011410:	6859      	ldr	r1, [r3, #4]
 8011412:	f001 fdad 	bl	8012f70 <_Balloc>
 8011416:	9007      	str	r0, [sp, #28]
 8011418:	2800      	cmp	r0, #0
 801141a:	f43f af11 	beq.w	8011240 <_strtod_l+0x498>
 801141e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011420:	691a      	ldr	r2, [r3, #16]
 8011422:	3202      	adds	r2, #2
 8011424:	f103 010c 	add.w	r1, r3, #12
 8011428:	0092      	lsls	r2, r2, #2
 801142a:	300c      	adds	r0, #12
 801142c:	f7fe ff5c 	bl	80102e8 <memcpy>
 8011430:	ec4b ab10 	vmov	d0, sl, fp
 8011434:	aa20      	add	r2, sp, #128	; 0x80
 8011436:	a91f      	add	r1, sp, #124	; 0x7c
 8011438:	4620      	mov	r0, r4
 801143a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801143e:	f002 f97f 	bl	8013740 <__d2b>
 8011442:	901e      	str	r0, [sp, #120]	; 0x78
 8011444:	2800      	cmp	r0, #0
 8011446:	f43f aefb 	beq.w	8011240 <_strtod_l+0x498>
 801144a:	2101      	movs	r1, #1
 801144c:	4620      	mov	r0, r4
 801144e:	f001 fed5 	bl	80131fc <__i2b>
 8011452:	4606      	mov	r6, r0
 8011454:	2800      	cmp	r0, #0
 8011456:	f43f aef3 	beq.w	8011240 <_strtod_l+0x498>
 801145a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801145c:	9904      	ldr	r1, [sp, #16]
 801145e:	2b00      	cmp	r3, #0
 8011460:	bfab      	itete	ge
 8011462:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8011464:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8011466:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8011468:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801146c:	bfac      	ite	ge
 801146e:	eb03 0902 	addge.w	r9, r3, r2
 8011472:	1ad7      	sublt	r7, r2, r3
 8011474:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011476:	eba3 0801 	sub.w	r8, r3, r1
 801147a:	4490      	add	r8, r2
 801147c:	4ba3      	ldr	r3, [pc, #652]	; (801170c <_strtod_l+0x964>)
 801147e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011482:	4598      	cmp	r8, r3
 8011484:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011488:	f280 80cc 	bge.w	8011624 <_strtod_l+0x87c>
 801148c:	eba3 0308 	sub.w	r3, r3, r8
 8011490:	2b1f      	cmp	r3, #31
 8011492:	eba2 0203 	sub.w	r2, r2, r3
 8011496:	f04f 0101 	mov.w	r1, #1
 801149a:	f300 80b6 	bgt.w	801160a <_strtod_l+0x862>
 801149e:	fa01 f303 	lsl.w	r3, r1, r3
 80114a2:	9311      	str	r3, [sp, #68]	; 0x44
 80114a4:	2300      	movs	r3, #0
 80114a6:	930c      	str	r3, [sp, #48]	; 0x30
 80114a8:	eb09 0802 	add.w	r8, r9, r2
 80114ac:	9b04      	ldr	r3, [sp, #16]
 80114ae:	45c1      	cmp	r9, r8
 80114b0:	4417      	add	r7, r2
 80114b2:	441f      	add	r7, r3
 80114b4:	464b      	mov	r3, r9
 80114b6:	bfa8      	it	ge
 80114b8:	4643      	movge	r3, r8
 80114ba:	42bb      	cmp	r3, r7
 80114bc:	bfa8      	it	ge
 80114be:	463b      	movge	r3, r7
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	bfc2      	ittt	gt
 80114c4:	eba8 0803 	subgt.w	r8, r8, r3
 80114c8:	1aff      	subgt	r7, r7, r3
 80114ca:	eba9 0903 	subgt.w	r9, r9, r3
 80114ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	dd17      	ble.n	8011504 <_strtod_l+0x75c>
 80114d4:	4631      	mov	r1, r6
 80114d6:	461a      	mov	r2, r3
 80114d8:	4620      	mov	r0, r4
 80114da:	f001 ff4b 	bl	8013374 <__pow5mult>
 80114de:	4606      	mov	r6, r0
 80114e0:	2800      	cmp	r0, #0
 80114e2:	f43f aead 	beq.w	8011240 <_strtod_l+0x498>
 80114e6:	4601      	mov	r1, r0
 80114e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80114ea:	4620      	mov	r0, r4
 80114ec:	f001 fe9c 	bl	8013228 <__multiply>
 80114f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80114f2:	2800      	cmp	r0, #0
 80114f4:	f43f aea4 	beq.w	8011240 <_strtod_l+0x498>
 80114f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80114fa:	4620      	mov	r0, r4
 80114fc:	f001 fd78 	bl	8012ff0 <_Bfree>
 8011500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011502:	931e      	str	r3, [sp, #120]	; 0x78
 8011504:	f1b8 0f00 	cmp.w	r8, #0
 8011508:	f300 8091 	bgt.w	801162e <_strtod_l+0x886>
 801150c:	9b08      	ldr	r3, [sp, #32]
 801150e:	2b00      	cmp	r3, #0
 8011510:	dd08      	ble.n	8011524 <_strtod_l+0x77c>
 8011512:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011514:	9907      	ldr	r1, [sp, #28]
 8011516:	4620      	mov	r0, r4
 8011518:	f001 ff2c 	bl	8013374 <__pow5mult>
 801151c:	9007      	str	r0, [sp, #28]
 801151e:	2800      	cmp	r0, #0
 8011520:	f43f ae8e 	beq.w	8011240 <_strtod_l+0x498>
 8011524:	2f00      	cmp	r7, #0
 8011526:	dd08      	ble.n	801153a <_strtod_l+0x792>
 8011528:	9907      	ldr	r1, [sp, #28]
 801152a:	463a      	mov	r2, r7
 801152c:	4620      	mov	r0, r4
 801152e:	f001 ff7b 	bl	8013428 <__lshift>
 8011532:	9007      	str	r0, [sp, #28]
 8011534:	2800      	cmp	r0, #0
 8011536:	f43f ae83 	beq.w	8011240 <_strtod_l+0x498>
 801153a:	f1b9 0f00 	cmp.w	r9, #0
 801153e:	dd08      	ble.n	8011552 <_strtod_l+0x7aa>
 8011540:	4631      	mov	r1, r6
 8011542:	464a      	mov	r2, r9
 8011544:	4620      	mov	r0, r4
 8011546:	f001 ff6f 	bl	8013428 <__lshift>
 801154a:	4606      	mov	r6, r0
 801154c:	2800      	cmp	r0, #0
 801154e:	f43f ae77 	beq.w	8011240 <_strtod_l+0x498>
 8011552:	9a07      	ldr	r2, [sp, #28]
 8011554:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011556:	4620      	mov	r0, r4
 8011558:	f001 ffee 	bl	8013538 <__mdiff>
 801155c:	4605      	mov	r5, r0
 801155e:	2800      	cmp	r0, #0
 8011560:	f43f ae6e 	beq.w	8011240 <_strtod_l+0x498>
 8011564:	68c3      	ldr	r3, [r0, #12]
 8011566:	930f      	str	r3, [sp, #60]	; 0x3c
 8011568:	2300      	movs	r3, #0
 801156a:	60c3      	str	r3, [r0, #12]
 801156c:	4631      	mov	r1, r6
 801156e:	f001 ffc7 	bl	8013500 <__mcmp>
 8011572:	2800      	cmp	r0, #0
 8011574:	da65      	bge.n	8011642 <_strtod_l+0x89a>
 8011576:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011578:	ea53 030a 	orrs.w	r3, r3, sl
 801157c:	f040 8087 	bne.w	801168e <_strtod_l+0x8e6>
 8011580:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011584:	2b00      	cmp	r3, #0
 8011586:	f040 8082 	bne.w	801168e <_strtod_l+0x8e6>
 801158a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801158e:	0d1b      	lsrs	r3, r3, #20
 8011590:	051b      	lsls	r3, r3, #20
 8011592:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011596:	d97a      	bls.n	801168e <_strtod_l+0x8e6>
 8011598:	696b      	ldr	r3, [r5, #20]
 801159a:	b913      	cbnz	r3, 80115a2 <_strtod_l+0x7fa>
 801159c:	692b      	ldr	r3, [r5, #16]
 801159e:	2b01      	cmp	r3, #1
 80115a0:	dd75      	ble.n	801168e <_strtod_l+0x8e6>
 80115a2:	4629      	mov	r1, r5
 80115a4:	2201      	movs	r2, #1
 80115a6:	4620      	mov	r0, r4
 80115a8:	f001 ff3e 	bl	8013428 <__lshift>
 80115ac:	4631      	mov	r1, r6
 80115ae:	4605      	mov	r5, r0
 80115b0:	f001 ffa6 	bl	8013500 <__mcmp>
 80115b4:	2800      	cmp	r0, #0
 80115b6:	dd6a      	ble.n	801168e <_strtod_l+0x8e6>
 80115b8:	9904      	ldr	r1, [sp, #16]
 80115ba:	4a55      	ldr	r2, [pc, #340]	; (8011710 <_strtod_l+0x968>)
 80115bc:	465b      	mov	r3, fp
 80115be:	2900      	cmp	r1, #0
 80115c0:	f000 8085 	beq.w	80116ce <_strtod_l+0x926>
 80115c4:	ea02 010b 	and.w	r1, r2, fp
 80115c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80115cc:	dc7f      	bgt.n	80116ce <_strtod_l+0x926>
 80115ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80115d2:	f77f aeaa 	ble.w	801132a <_strtod_l+0x582>
 80115d6:	4a4f      	ldr	r2, [pc, #316]	; (8011714 <_strtod_l+0x96c>)
 80115d8:	2300      	movs	r3, #0
 80115da:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80115de:	4650      	mov	r0, sl
 80115e0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80115e4:	4659      	mov	r1, fp
 80115e6:	f7ef f80f 	bl	8000608 <__aeabi_dmul>
 80115ea:	460b      	mov	r3, r1
 80115ec:	4303      	orrs	r3, r0
 80115ee:	bf08      	it	eq
 80115f0:	2322      	moveq	r3, #34	; 0x22
 80115f2:	4682      	mov	sl, r0
 80115f4:	468b      	mov	fp, r1
 80115f6:	bf08      	it	eq
 80115f8:	6023      	streq	r3, [r4, #0]
 80115fa:	e62b      	b.n	8011254 <_strtod_l+0x4ac>
 80115fc:	f04f 32ff 	mov.w	r2, #4294967295
 8011600:	fa02 f303 	lsl.w	r3, r2, r3
 8011604:	ea03 0a0a 	and.w	sl, r3, sl
 8011608:	e6de      	b.n	80113c8 <_strtod_l+0x620>
 801160a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801160e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011612:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011616:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801161a:	fa01 f308 	lsl.w	r3, r1, r8
 801161e:	930c      	str	r3, [sp, #48]	; 0x30
 8011620:	9111      	str	r1, [sp, #68]	; 0x44
 8011622:	e741      	b.n	80114a8 <_strtod_l+0x700>
 8011624:	2300      	movs	r3, #0
 8011626:	930c      	str	r3, [sp, #48]	; 0x30
 8011628:	2301      	movs	r3, #1
 801162a:	9311      	str	r3, [sp, #68]	; 0x44
 801162c:	e73c      	b.n	80114a8 <_strtod_l+0x700>
 801162e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011630:	4642      	mov	r2, r8
 8011632:	4620      	mov	r0, r4
 8011634:	f001 fef8 	bl	8013428 <__lshift>
 8011638:	901e      	str	r0, [sp, #120]	; 0x78
 801163a:	2800      	cmp	r0, #0
 801163c:	f47f af66 	bne.w	801150c <_strtod_l+0x764>
 8011640:	e5fe      	b.n	8011240 <_strtod_l+0x498>
 8011642:	465f      	mov	r7, fp
 8011644:	d16e      	bne.n	8011724 <_strtod_l+0x97c>
 8011646:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011648:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801164c:	b342      	cbz	r2, 80116a0 <_strtod_l+0x8f8>
 801164e:	4a32      	ldr	r2, [pc, #200]	; (8011718 <_strtod_l+0x970>)
 8011650:	4293      	cmp	r3, r2
 8011652:	d128      	bne.n	80116a6 <_strtod_l+0x8fe>
 8011654:	9b04      	ldr	r3, [sp, #16]
 8011656:	4650      	mov	r0, sl
 8011658:	b1eb      	cbz	r3, 8011696 <_strtod_l+0x8ee>
 801165a:	4a2d      	ldr	r2, [pc, #180]	; (8011710 <_strtod_l+0x968>)
 801165c:	403a      	ands	r2, r7
 801165e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011662:	f04f 31ff 	mov.w	r1, #4294967295
 8011666:	d819      	bhi.n	801169c <_strtod_l+0x8f4>
 8011668:	0d12      	lsrs	r2, r2, #20
 801166a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801166e:	fa01 f303 	lsl.w	r3, r1, r3
 8011672:	4298      	cmp	r0, r3
 8011674:	d117      	bne.n	80116a6 <_strtod_l+0x8fe>
 8011676:	4b29      	ldr	r3, [pc, #164]	; (801171c <_strtod_l+0x974>)
 8011678:	429f      	cmp	r7, r3
 801167a:	d102      	bne.n	8011682 <_strtod_l+0x8da>
 801167c:	3001      	adds	r0, #1
 801167e:	f43f addf 	beq.w	8011240 <_strtod_l+0x498>
 8011682:	4b23      	ldr	r3, [pc, #140]	; (8011710 <_strtod_l+0x968>)
 8011684:	403b      	ands	r3, r7
 8011686:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801168a:	f04f 0a00 	mov.w	sl, #0
 801168e:	9b04      	ldr	r3, [sp, #16]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d1a0      	bne.n	80115d6 <_strtod_l+0x82e>
 8011694:	e5de      	b.n	8011254 <_strtod_l+0x4ac>
 8011696:	f04f 33ff 	mov.w	r3, #4294967295
 801169a:	e7ea      	b.n	8011672 <_strtod_l+0x8ca>
 801169c:	460b      	mov	r3, r1
 801169e:	e7e8      	b.n	8011672 <_strtod_l+0x8ca>
 80116a0:	ea53 030a 	orrs.w	r3, r3, sl
 80116a4:	d088      	beq.n	80115b8 <_strtod_l+0x810>
 80116a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116a8:	b1db      	cbz	r3, 80116e2 <_strtod_l+0x93a>
 80116aa:	423b      	tst	r3, r7
 80116ac:	d0ef      	beq.n	801168e <_strtod_l+0x8e6>
 80116ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80116b0:	9a04      	ldr	r2, [sp, #16]
 80116b2:	4650      	mov	r0, sl
 80116b4:	4659      	mov	r1, fp
 80116b6:	b1c3      	cbz	r3, 80116ea <_strtod_l+0x942>
 80116b8:	f7ff fb5a 	bl	8010d70 <sulp>
 80116bc:	4602      	mov	r2, r0
 80116be:	460b      	mov	r3, r1
 80116c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80116c4:	f7ee fdea 	bl	800029c <__adddf3>
 80116c8:	4682      	mov	sl, r0
 80116ca:	468b      	mov	fp, r1
 80116cc:	e7df      	b.n	801168e <_strtod_l+0x8e6>
 80116ce:	4013      	ands	r3, r2
 80116d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80116d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80116d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80116dc:	f04f 3aff 	mov.w	sl, #4294967295
 80116e0:	e7d5      	b.n	801168e <_strtod_l+0x8e6>
 80116e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80116e4:	ea13 0f0a 	tst.w	r3, sl
 80116e8:	e7e0      	b.n	80116ac <_strtod_l+0x904>
 80116ea:	f7ff fb41 	bl	8010d70 <sulp>
 80116ee:	4602      	mov	r2, r0
 80116f0:	460b      	mov	r3, r1
 80116f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80116f6:	f7ee fdcf 	bl	8000298 <__aeabi_dsub>
 80116fa:	2200      	movs	r2, #0
 80116fc:	2300      	movs	r3, #0
 80116fe:	4682      	mov	sl, r0
 8011700:	468b      	mov	fp, r1
 8011702:	f7ef f9e9 	bl	8000ad8 <__aeabi_dcmpeq>
 8011706:	2800      	cmp	r0, #0
 8011708:	d0c1      	beq.n	801168e <_strtod_l+0x8e6>
 801170a:	e60e      	b.n	801132a <_strtod_l+0x582>
 801170c:	fffffc02 	.word	0xfffffc02
 8011710:	7ff00000 	.word	0x7ff00000
 8011714:	39500000 	.word	0x39500000
 8011718:	000fffff 	.word	0x000fffff
 801171c:	7fefffff 	.word	0x7fefffff
 8011720:	08016990 	.word	0x08016990
 8011724:	4631      	mov	r1, r6
 8011726:	4628      	mov	r0, r5
 8011728:	f002 f866 	bl	80137f8 <__ratio>
 801172c:	ec59 8b10 	vmov	r8, r9, d0
 8011730:	ee10 0a10 	vmov	r0, s0
 8011734:	2200      	movs	r2, #0
 8011736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801173a:	4649      	mov	r1, r9
 801173c:	f7ef f9e0 	bl	8000b00 <__aeabi_dcmple>
 8011740:	2800      	cmp	r0, #0
 8011742:	d07c      	beq.n	801183e <_strtod_l+0xa96>
 8011744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011746:	2b00      	cmp	r3, #0
 8011748:	d04c      	beq.n	80117e4 <_strtod_l+0xa3c>
 801174a:	4b95      	ldr	r3, [pc, #596]	; (80119a0 <_strtod_l+0xbf8>)
 801174c:	2200      	movs	r2, #0
 801174e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011752:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80119a0 <_strtod_l+0xbf8>
 8011756:	f04f 0800 	mov.w	r8, #0
 801175a:	4b92      	ldr	r3, [pc, #584]	; (80119a4 <_strtod_l+0xbfc>)
 801175c:	403b      	ands	r3, r7
 801175e:	9311      	str	r3, [sp, #68]	; 0x44
 8011760:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011762:	4b91      	ldr	r3, [pc, #580]	; (80119a8 <_strtod_l+0xc00>)
 8011764:	429a      	cmp	r2, r3
 8011766:	f040 80b2 	bne.w	80118ce <_strtod_l+0xb26>
 801176a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801176e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011772:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011776:	ec4b ab10 	vmov	d0, sl, fp
 801177a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801177e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011782:	f001 ff61 	bl	8013648 <__ulp>
 8011786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801178a:	ec53 2b10 	vmov	r2, r3, d0
 801178e:	f7ee ff3b 	bl	8000608 <__aeabi_dmul>
 8011792:	4652      	mov	r2, sl
 8011794:	465b      	mov	r3, fp
 8011796:	f7ee fd81 	bl	800029c <__adddf3>
 801179a:	460b      	mov	r3, r1
 801179c:	4981      	ldr	r1, [pc, #516]	; (80119a4 <_strtod_l+0xbfc>)
 801179e:	4a83      	ldr	r2, [pc, #524]	; (80119ac <_strtod_l+0xc04>)
 80117a0:	4019      	ands	r1, r3
 80117a2:	4291      	cmp	r1, r2
 80117a4:	4682      	mov	sl, r0
 80117a6:	d95e      	bls.n	8011866 <_strtod_l+0xabe>
 80117a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117aa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d103      	bne.n	80117ba <_strtod_l+0xa12>
 80117b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117b4:	3301      	adds	r3, #1
 80117b6:	f43f ad43 	beq.w	8011240 <_strtod_l+0x498>
 80117ba:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80119b8 <_strtod_l+0xc10>
 80117be:	f04f 3aff 	mov.w	sl, #4294967295
 80117c2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80117c4:	4620      	mov	r0, r4
 80117c6:	f001 fc13 	bl	8012ff0 <_Bfree>
 80117ca:	9907      	ldr	r1, [sp, #28]
 80117cc:	4620      	mov	r0, r4
 80117ce:	f001 fc0f 	bl	8012ff0 <_Bfree>
 80117d2:	4631      	mov	r1, r6
 80117d4:	4620      	mov	r0, r4
 80117d6:	f001 fc0b 	bl	8012ff0 <_Bfree>
 80117da:	4629      	mov	r1, r5
 80117dc:	4620      	mov	r0, r4
 80117de:	f001 fc07 	bl	8012ff0 <_Bfree>
 80117e2:	e613      	b.n	801140c <_strtod_l+0x664>
 80117e4:	f1ba 0f00 	cmp.w	sl, #0
 80117e8:	d11b      	bne.n	8011822 <_strtod_l+0xa7a>
 80117ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80117ee:	b9f3      	cbnz	r3, 801182e <_strtod_l+0xa86>
 80117f0:	4b6b      	ldr	r3, [pc, #428]	; (80119a0 <_strtod_l+0xbf8>)
 80117f2:	2200      	movs	r2, #0
 80117f4:	4640      	mov	r0, r8
 80117f6:	4649      	mov	r1, r9
 80117f8:	f7ef f978 	bl	8000aec <__aeabi_dcmplt>
 80117fc:	b9d0      	cbnz	r0, 8011834 <_strtod_l+0xa8c>
 80117fe:	4640      	mov	r0, r8
 8011800:	4649      	mov	r1, r9
 8011802:	4b6b      	ldr	r3, [pc, #428]	; (80119b0 <_strtod_l+0xc08>)
 8011804:	2200      	movs	r2, #0
 8011806:	f7ee feff 	bl	8000608 <__aeabi_dmul>
 801180a:	4680      	mov	r8, r0
 801180c:	4689      	mov	r9, r1
 801180e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011812:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011816:	931b      	str	r3, [sp, #108]	; 0x6c
 8011818:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801181c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011820:	e79b      	b.n	801175a <_strtod_l+0x9b2>
 8011822:	f1ba 0f01 	cmp.w	sl, #1
 8011826:	d102      	bne.n	801182e <_strtod_l+0xa86>
 8011828:	2f00      	cmp	r7, #0
 801182a:	f43f ad7e 	beq.w	801132a <_strtod_l+0x582>
 801182e:	4b61      	ldr	r3, [pc, #388]	; (80119b4 <_strtod_l+0xc0c>)
 8011830:	2200      	movs	r2, #0
 8011832:	e78c      	b.n	801174e <_strtod_l+0x9a6>
 8011834:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80119b0 <_strtod_l+0xc08>
 8011838:	f04f 0800 	mov.w	r8, #0
 801183c:	e7e7      	b.n	801180e <_strtod_l+0xa66>
 801183e:	4b5c      	ldr	r3, [pc, #368]	; (80119b0 <_strtod_l+0xc08>)
 8011840:	4640      	mov	r0, r8
 8011842:	4649      	mov	r1, r9
 8011844:	2200      	movs	r2, #0
 8011846:	f7ee fedf 	bl	8000608 <__aeabi_dmul>
 801184a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801184c:	4680      	mov	r8, r0
 801184e:	4689      	mov	r9, r1
 8011850:	b933      	cbnz	r3, 8011860 <_strtod_l+0xab8>
 8011852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011856:	9012      	str	r0, [sp, #72]	; 0x48
 8011858:	9313      	str	r3, [sp, #76]	; 0x4c
 801185a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801185e:	e7dd      	b.n	801181c <_strtod_l+0xa74>
 8011860:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8011864:	e7f9      	b.n	801185a <_strtod_l+0xab2>
 8011866:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801186a:	9b04      	ldr	r3, [sp, #16]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d1a8      	bne.n	80117c2 <_strtod_l+0xa1a>
 8011870:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011874:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011876:	0d1b      	lsrs	r3, r3, #20
 8011878:	051b      	lsls	r3, r3, #20
 801187a:	429a      	cmp	r2, r3
 801187c:	d1a1      	bne.n	80117c2 <_strtod_l+0xa1a>
 801187e:	4640      	mov	r0, r8
 8011880:	4649      	mov	r1, r9
 8011882:	f7ef fa21 	bl	8000cc8 <__aeabi_d2lz>
 8011886:	f7ee fe91 	bl	80005ac <__aeabi_l2d>
 801188a:	4602      	mov	r2, r0
 801188c:	460b      	mov	r3, r1
 801188e:	4640      	mov	r0, r8
 8011890:	4649      	mov	r1, r9
 8011892:	f7ee fd01 	bl	8000298 <__aeabi_dsub>
 8011896:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011898:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801189c:	ea43 030a 	orr.w	r3, r3, sl
 80118a0:	4313      	orrs	r3, r2
 80118a2:	4680      	mov	r8, r0
 80118a4:	4689      	mov	r9, r1
 80118a6:	d053      	beq.n	8011950 <_strtod_l+0xba8>
 80118a8:	a335      	add	r3, pc, #212	; (adr r3, 8011980 <_strtod_l+0xbd8>)
 80118aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ae:	f7ef f91d 	bl	8000aec <__aeabi_dcmplt>
 80118b2:	2800      	cmp	r0, #0
 80118b4:	f47f acce 	bne.w	8011254 <_strtod_l+0x4ac>
 80118b8:	a333      	add	r3, pc, #204	; (adr r3, 8011988 <_strtod_l+0xbe0>)
 80118ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118be:	4640      	mov	r0, r8
 80118c0:	4649      	mov	r1, r9
 80118c2:	f7ef f931 	bl	8000b28 <__aeabi_dcmpgt>
 80118c6:	2800      	cmp	r0, #0
 80118c8:	f43f af7b 	beq.w	80117c2 <_strtod_l+0xa1a>
 80118cc:	e4c2      	b.n	8011254 <_strtod_l+0x4ac>
 80118ce:	9b04      	ldr	r3, [sp, #16]
 80118d0:	b333      	cbz	r3, 8011920 <_strtod_l+0xb78>
 80118d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80118d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80118d8:	d822      	bhi.n	8011920 <_strtod_l+0xb78>
 80118da:	a32d      	add	r3, pc, #180	; (adr r3, 8011990 <_strtod_l+0xbe8>)
 80118dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e0:	4640      	mov	r0, r8
 80118e2:	4649      	mov	r1, r9
 80118e4:	f7ef f90c 	bl	8000b00 <__aeabi_dcmple>
 80118e8:	b1a0      	cbz	r0, 8011914 <_strtod_l+0xb6c>
 80118ea:	4649      	mov	r1, r9
 80118ec:	4640      	mov	r0, r8
 80118ee:	f7ef f963 	bl	8000bb8 <__aeabi_d2uiz>
 80118f2:	2801      	cmp	r0, #1
 80118f4:	bf38      	it	cc
 80118f6:	2001      	movcc	r0, #1
 80118f8:	f7ee fe0c 	bl	8000514 <__aeabi_ui2d>
 80118fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80118fe:	4680      	mov	r8, r0
 8011900:	4689      	mov	r9, r1
 8011902:	bb13      	cbnz	r3, 801194a <_strtod_l+0xba2>
 8011904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011908:	9014      	str	r0, [sp, #80]	; 0x50
 801190a:	9315      	str	r3, [sp, #84]	; 0x54
 801190c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011910:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011916:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011918:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801191c:	1a9b      	subs	r3, r3, r2
 801191e:	930d      	str	r3, [sp, #52]	; 0x34
 8011920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011924:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011928:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801192c:	f001 fe8c 	bl	8013648 <__ulp>
 8011930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011934:	ec53 2b10 	vmov	r2, r3, d0
 8011938:	f7ee fe66 	bl	8000608 <__aeabi_dmul>
 801193c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011940:	f7ee fcac 	bl	800029c <__adddf3>
 8011944:	4682      	mov	sl, r0
 8011946:	468b      	mov	fp, r1
 8011948:	e78f      	b.n	801186a <_strtod_l+0xac2>
 801194a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801194e:	e7dd      	b.n	801190c <_strtod_l+0xb64>
 8011950:	a311      	add	r3, pc, #68	; (adr r3, 8011998 <_strtod_l+0xbf0>)
 8011952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011956:	f7ef f8c9 	bl	8000aec <__aeabi_dcmplt>
 801195a:	e7b4      	b.n	80118c6 <_strtod_l+0xb1e>
 801195c:	2300      	movs	r3, #0
 801195e:	930e      	str	r3, [sp, #56]	; 0x38
 8011960:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011962:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011964:	6013      	str	r3, [r2, #0]
 8011966:	f7ff ba65 	b.w	8010e34 <_strtod_l+0x8c>
 801196a:	2b65      	cmp	r3, #101	; 0x65
 801196c:	f43f ab5d 	beq.w	801102a <_strtod_l+0x282>
 8011970:	2b45      	cmp	r3, #69	; 0x45
 8011972:	f43f ab5a 	beq.w	801102a <_strtod_l+0x282>
 8011976:	2201      	movs	r2, #1
 8011978:	f7ff bb92 	b.w	80110a0 <_strtod_l+0x2f8>
 801197c:	f3af 8000 	nop.w
 8011980:	94a03595 	.word	0x94a03595
 8011984:	3fdfffff 	.word	0x3fdfffff
 8011988:	35afe535 	.word	0x35afe535
 801198c:	3fe00000 	.word	0x3fe00000
 8011990:	ffc00000 	.word	0xffc00000
 8011994:	41dfffff 	.word	0x41dfffff
 8011998:	94a03595 	.word	0x94a03595
 801199c:	3fcfffff 	.word	0x3fcfffff
 80119a0:	3ff00000 	.word	0x3ff00000
 80119a4:	7ff00000 	.word	0x7ff00000
 80119a8:	7fe00000 	.word	0x7fe00000
 80119ac:	7c9fffff 	.word	0x7c9fffff
 80119b0:	3fe00000 	.word	0x3fe00000
 80119b4:	bff00000 	.word	0xbff00000
 80119b8:	7fefffff 	.word	0x7fefffff

080119bc <strtod>:
 80119bc:	460a      	mov	r2, r1
 80119be:	4601      	mov	r1, r0
 80119c0:	4802      	ldr	r0, [pc, #8]	; (80119cc <strtod+0x10>)
 80119c2:	4b03      	ldr	r3, [pc, #12]	; (80119d0 <strtod+0x14>)
 80119c4:	6800      	ldr	r0, [r0, #0]
 80119c6:	f7ff b9ef 	b.w	8010da8 <_strtod_l>
 80119ca:	bf00      	nop
 80119cc:	2000002c 	.word	0x2000002c
 80119d0:	20000094 	.word	0x20000094

080119d4 <strtok>:
 80119d4:	4b16      	ldr	r3, [pc, #88]	; (8011a30 <strtok+0x5c>)
 80119d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119d8:	681e      	ldr	r6, [r3, #0]
 80119da:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80119dc:	4605      	mov	r5, r0
 80119de:	b9fc      	cbnz	r4, 8011a20 <strtok+0x4c>
 80119e0:	2050      	movs	r0, #80	; 0x50
 80119e2:	9101      	str	r1, [sp, #4]
 80119e4:	f001 faaa 	bl	8012f3c <malloc>
 80119e8:	9901      	ldr	r1, [sp, #4]
 80119ea:	65b0      	str	r0, [r6, #88]	; 0x58
 80119ec:	4602      	mov	r2, r0
 80119ee:	b920      	cbnz	r0, 80119fa <strtok+0x26>
 80119f0:	4b10      	ldr	r3, [pc, #64]	; (8011a34 <strtok+0x60>)
 80119f2:	4811      	ldr	r0, [pc, #68]	; (8011a38 <strtok+0x64>)
 80119f4:	2157      	movs	r1, #87	; 0x57
 80119f6:	f000 f883 	bl	8011b00 <__assert_func>
 80119fa:	e9c0 4400 	strd	r4, r4, [r0]
 80119fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011a02:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011a06:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011a0a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011a0e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011a12:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011a16:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011a1a:	6184      	str	r4, [r0, #24]
 8011a1c:	7704      	strb	r4, [r0, #28]
 8011a1e:	6244      	str	r4, [r0, #36]	; 0x24
 8011a20:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8011a22:	2301      	movs	r3, #1
 8011a24:	4628      	mov	r0, r5
 8011a26:	b002      	add	sp, #8
 8011a28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a2c:	f000 b806 	b.w	8011a3c <__strtok_r>
 8011a30:	2000002c 	.word	0x2000002c
 8011a34:	080169b8 	.word	0x080169b8
 8011a38:	080169cf 	.word	0x080169cf

08011a3c <__strtok_r>:
 8011a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a3e:	b908      	cbnz	r0, 8011a44 <__strtok_r+0x8>
 8011a40:	6810      	ldr	r0, [r2, #0]
 8011a42:	b188      	cbz	r0, 8011a68 <__strtok_r+0x2c>
 8011a44:	4604      	mov	r4, r0
 8011a46:	4620      	mov	r0, r4
 8011a48:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011a4c:	460f      	mov	r7, r1
 8011a4e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011a52:	b91e      	cbnz	r6, 8011a5c <__strtok_r+0x20>
 8011a54:	b965      	cbnz	r5, 8011a70 <__strtok_r+0x34>
 8011a56:	6015      	str	r5, [r2, #0]
 8011a58:	4628      	mov	r0, r5
 8011a5a:	e005      	b.n	8011a68 <__strtok_r+0x2c>
 8011a5c:	42b5      	cmp	r5, r6
 8011a5e:	d1f6      	bne.n	8011a4e <__strtok_r+0x12>
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d1f0      	bne.n	8011a46 <__strtok_r+0xa>
 8011a64:	6014      	str	r4, [r2, #0]
 8011a66:	7003      	strb	r3, [r0, #0]
 8011a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a6a:	461c      	mov	r4, r3
 8011a6c:	e00c      	b.n	8011a88 <__strtok_r+0x4c>
 8011a6e:	b915      	cbnz	r5, 8011a76 <__strtok_r+0x3a>
 8011a70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011a74:	460e      	mov	r6, r1
 8011a76:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011a7a:	42ab      	cmp	r3, r5
 8011a7c:	d1f7      	bne.n	8011a6e <__strtok_r+0x32>
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d0f3      	beq.n	8011a6a <__strtok_r+0x2e>
 8011a82:	2300      	movs	r3, #0
 8011a84:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011a88:	6014      	str	r4, [r2, #0]
 8011a8a:	e7ed      	b.n	8011a68 <__strtok_r+0x2c>

08011a8c <_vsniprintf_r>:
 8011a8c:	b530      	push	{r4, r5, lr}
 8011a8e:	1e14      	subs	r4, r2, #0
 8011a90:	4605      	mov	r5, r0
 8011a92:	b09b      	sub	sp, #108	; 0x6c
 8011a94:	4618      	mov	r0, r3
 8011a96:	da05      	bge.n	8011aa4 <_vsniprintf_r+0x18>
 8011a98:	238b      	movs	r3, #139	; 0x8b
 8011a9a:	602b      	str	r3, [r5, #0]
 8011a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011aa0:	b01b      	add	sp, #108	; 0x6c
 8011aa2:	bd30      	pop	{r4, r5, pc}
 8011aa4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011aa8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011aac:	bf14      	ite	ne
 8011aae:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011ab2:	4623      	moveq	r3, r4
 8011ab4:	9302      	str	r3, [sp, #8]
 8011ab6:	9305      	str	r3, [sp, #20]
 8011ab8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011abc:	9100      	str	r1, [sp, #0]
 8011abe:	9104      	str	r1, [sp, #16]
 8011ac0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011ac4:	4602      	mov	r2, r0
 8011ac6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011ac8:	4669      	mov	r1, sp
 8011aca:	4628      	mov	r0, r5
 8011acc:	f002 f820 	bl	8013b10 <_svfiprintf_r>
 8011ad0:	1c43      	adds	r3, r0, #1
 8011ad2:	bfbc      	itt	lt
 8011ad4:	238b      	movlt	r3, #139	; 0x8b
 8011ad6:	602b      	strlt	r3, [r5, #0]
 8011ad8:	2c00      	cmp	r4, #0
 8011ada:	d0e1      	beq.n	8011aa0 <_vsniprintf_r+0x14>
 8011adc:	9b00      	ldr	r3, [sp, #0]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	701a      	strb	r2, [r3, #0]
 8011ae2:	e7dd      	b.n	8011aa0 <_vsniprintf_r+0x14>

08011ae4 <vsniprintf>:
 8011ae4:	b507      	push	{r0, r1, r2, lr}
 8011ae6:	9300      	str	r3, [sp, #0]
 8011ae8:	4613      	mov	r3, r2
 8011aea:	460a      	mov	r2, r1
 8011aec:	4601      	mov	r1, r0
 8011aee:	4803      	ldr	r0, [pc, #12]	; (8011afc <vsniprintf+0x18>)
 8011af0:	6800      	ldr	r0, [r0, #0]
 8011af2:	f7ff ffcb 	bl	8011a8c <_vsniprintf_r>
 8011af6:	b003      	add	sp, #12
 8011af8:	f85d fb04 	ldr.w	pc, [sp], #4
 8011afc:	2000002c 	.word	0x2000002c

08011b00 <__assert_func>:
 8011b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b02:	4614      	mov	r4, r2
 8011b04:	461a      	mov	r2, r3
 8011b06:	4b09      	ldr	r3, [pc, #36]	; (8011b2c <__assert_func+0x2c>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	4605      	mov	r5, r0
 8011b0c:	68d8      	ldr	r0, [r3, #12]
 8011b0e:	b14c      	cbz	r4, 8011b24 <__assert_func+0x24>
 8011b10:	4b07      	ldr	r3, [pc, #28]	; (8011b30 <__assert_func+0x30>)
 8011b12:	9100      	str	r1, [sp, #0]
 8011b14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011b18:	4906      	ldr	r1, [pc, #24]	; (8011b34 <__assert_func+0x34>)
 8011b1a:	462b      	mov	r3, r5
 8011b1c:	f000 fe88 	bl	8012830 <fiprintf>
 8011b20:	f002 fb4a 	bl	80141b8 <abort>
 8011b24:	4b04      	ldr	r3, [pc, #16]	; (8011b38 <__assert_func+0x38>)
 8011b26:	461c      	mov	r4, r3
 8011b28:	e7f3      	b.n	8011b12 <__assert_func+0x12>
 8011b2a:	bf00      	nop
 8011b2c:	2000002c 	.word	0x2000002c
 8011b30:	08016a30 	.word	0x08016a30
 8011b34:	08016a3d 	.word	0x08016a3d
 8011b38:	08016a6b 	.word	0x08016a6b

08011b3c <quorem>:
 8011b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b40:	6903      	ldr	r3, [r0, #16]
 8011b42:	690c      	ldr	r4, [r1, #16]
 8011b44:	42a3      	cmp	r3, r4
 8011b46:	4607      	mov	r7, r0
 8011b48:	f2c0 8081 	blt.w	8011c4e <quorem+0x112>
 8011b4c:	3c01      	subs	r4, #1
 8011b4e:	f101 0814 	add.w	r8, r1, #20
 8011b52:	f100 0514 	add.w	r5, r0, #20
 8011b56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011b5a:	9301      	str	r3, [sp, #4]
 8011b5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011b60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011b64:	3301      	adds	r3, #1
 8011b66:	429a      	cmp	r2, r3
 8011b68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011b6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011b70:	fbb2 f6f3 	udiv	r6, r2, r3
 8011b74:	d331      	bcc.n	8011bda <quorem+0x9e>
 8011b76:	f04f 0e00 	mov.w	lr, #0
 8011b7a:	4640      	mov	r0, r8
 8011b7c:	46ac      	mov	ip, r5
 8011b7e:	46f2      	mov	sl, lr
 8011b80:	f850 2b04 	ldr.w	r2, [r0], #4
 8011b84:	b293      	uxth	r3, r2
 8011b86:	fb06 e303 	mla	r3, r6, r3, lr
 8011b8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011b8e:	b29b      	uxth	r3, r3
 8011b90:	ebaa 0303 	sub.w	r3, sl, r3
 8011b94:	0c12      	lsrs	r2, r2, #16
 8011b96:	f8dc a000 	ldr.w	sl, [ip]
 8011b9a:	fb06 e202 	mla	r2, r6, r2, lr
 8011b9e:	fa13 f38a 	uxtah	r3, r3, sl
 8011ba2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011ba6:	fa1f fa82 	uxth.w	sl, r2
 8011baa:	f8dc 2000 	ldr.w	r2, [ip]
 8011bae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011bb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011bbc:	4581      	cmp	r9, r0
 8011bbe:	f84c 3b04 	str.w	r3, [ip], #4
 8011bc2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011bc6:	d2db      	bcs.n	8011b80 <quorem+0x44>
 8011bc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8011bcc:	b92b      	cbnz	r3, 8011bda <quorem+0x9e>
 8011bce:	9b01      	ldr	r3, [sp, #4]
 8011bd0:	3b04      	subs	r3, #4
 8011bd2:	429d      	cmp	r5, r3
 8011bd4:	461a      	mov	r2, r3
 8011bd6:	d32e      	bcc.n	8011c36 <quorem+0xfa>
 8011bd8:	613c      	str	r4, [r7, #16]
 8011bda:	4638      	mov	r0, r7
 8011bdc:	f001 fc90 	bl	8013500 <__mcmp>
 8011be0:	2800      	cmp	r0, #0
 8011be2:	db24      	blt.n	8011c2e <quorem+0xf2>
 8011be4:	3601      	adds	r6, #1
 8011be6:	4628      	mov	r0, r5
 8011be8:	f04f 0c00 	mov.w	ip, #0
 8011bec:	f858 2b04 	ldr.w	r2, [r8], #4
 8011bf0:	f8d0 e000 	ldr.w	lr, [r0]
 8011bf4:	b293      	uxth	r3, r2
 8011bf6:	ebac 0303 	sub.w	r3, ip, r3
 8011bfa:	0c12      	lsrs	r2, r2, #16
 8011bfc:	fa13 f38e 	uxtah	r3, r3, lr
 8011c00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011c04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011c08:	b29b      	uxth	r3, r3
 8011c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011c0e:	45c1      	cmp	r9, r8
 8011c10:	f840 3b04 	str.w	r3, [r0], #4
 8011c14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011c18:	d2e8      	bcs.n	8011bec <quorem+0xb0>
 8011c1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011c1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011c22:	b922      	cbnz	r2, 8011c2e <quorem+0xf2>
 8011c24:	3b04      	subs	r3, #4
 8011c26:	429d      	cmp	r5, r3
 8011c28:	461a      	mov	r2, r3
 8011c2a:	d30a      	bcc.n	8011c42 <quorem+0x106>
 8011c2c:	613c      	str	r4, [r7, #16]
 8011c2e:	4630      	mov	r0, r6
 8011c30:	b003      	add	sp, #12
 8011c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c36:	6812      	ldr	r2, [r2, #0]
 8011c38:	3b04      	subs	r3, #4
 8011c3a:	2a00      	cmp	r2, #0
 8011c3c:	d1cc      	bne.n	8011bd8 <quorem+0x9c>
 8011c3e:	3c01      	subs	r4, #1
 8011c40:	e7c7      	b.n	8011bd2 <quorem+0x96>
 8011c42:	6812      	ldr	r2, [r2, #0]
 8011c44:	3b04      	subs	r3, #4
 8011c46:	2a00      	cmp	r2, #0
 8011c48:	d1f0      	bne.n	8011c2c <quorem+0xf0>
 8011c4a:	3c01      	subs	r4, #1
 8011c4c:	e7eb      	b.n	8011c26 <quorem+0xea>
 8011c4e:	2000      	movs	r0, #0
 8011c50:	e7ee      	b.n	8011c30 <quorem+0xf4>
 8011c52:	0000      	movs	r0, r0
 8011c54:	0000      	movs	r0, r0
	...

08011c58 <_dtoa_r>:
 8011c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c5c:	ed2d 8b02 	vpush	{d8}
 8011c60:	ec57 6b10 	vmov	r6, r7, d0
 8011c64:	b095      	sub	sp, #84	; 0x54
 8011c66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011c68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011c6c:	9105      	str	r1, [sp, #20]
 8011c6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011c72:	4604      	mov	r4, r0
 8011c74:	9209      	str	r2, [sp, #36]	; 0x24
 8011c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c78:	b975      	cbnz	r5, 8011c98 <_dtoa_r+0x40>
 8011c7a:	2010      	movs	r0, #16
 8011c7c:	f001 f95e 	bl	8012f3c <malloc>
 8011c80:	4602      	mov	r2, r0
 8011c82:	6260      	str	r0, [r4, #36]	; 0x24
 8011c84:	b920      	cbnz	r0, 8011c90 <_dtoa_r+0x38>
 8011c86:	4bb2      	ldr	r3, [pc, #712]	; (8011f50 <_dtoa_r+0x2f8>)
 8011c88:	21ea      	movs	r1, #234	; 0xea
 8011c8a:	48b2      	ldr	r0, [pc, #712]	; (8011f54 <_dtoa_r+0x2fc>)
 8011c8c:	f7ff ff38 	bl	8011b00 <__assert_func>
 8011c90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011c94:	6005      	str	r5, [r0, #0]
 8011c96:	60c5      	str	r5, [r0, #12]
 8011c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c9a:	6819      	ldr	r1, [r3, #0]
 8011c9c:	b151      	cbz	r1, 8011cb4 <_dtoa_r+0x5c>
 8011c9e:	685a      	ldr	r2, [r3, #4]
 8011ca0:	604a      	str	r2, [r1, #4]
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	4093      	lsls	r3, r2
 8011ca6:	608b      	str	r3, [r1, #8]
 8011ca8:	4620      	mov	r0, r4
 8011caa:	f001 f9a1 	bl	8012ff0 <_Bfree>
 8011cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	601a      	str	r2, [r3, #0]
 8011cb4:	1e3b      	subs	r3, r7, #0
 8011cb6:	bfb9      	ittee	lt
 8011cb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011cbc:	9303      	strlt	r3, [sp, #12]
 8011cbe:	2300      	movge	r3, #0
 8011cc0:	f8c8 3000 	strge.w	r3, [r8]
 8011cc4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011cc8:	4ba3      	ldr	r3, [pc, #652]	; (8011f58 <_dtoa_r+0x300>)
 8011cca:	bfbc      	itt	lt
 8011ccc:	2201      	movlt	r2, #1
 8011cce:	f8c8 2000 	strlt.w	r2, [r8]
 8011cd2:	ea33 0309 	bics.w	r3, r3, r9
 8011cd6:	d11b      	bne.n	8011d10 <_dtoa_r+0xb8>
 8011cd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011cda:	f242 730f 	movw	r3, #9999	; 0x270f
 8011cde:	6013      	str	r3, [r2, #0]
 8011ce0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011ce4:	4333      	orrs	r3, r6
 8011ce6:	f000 857a 	beq.w	80127de <_dtoa_r+0xb86>
 8011cea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011cec:	b963      	cbnz	r3, 8011d08 <_dtoa_r+0xb0>
 8011cee:	4b9b      	ldr	r3, [pc, #620]	; (8011f5c <_dtoa_r+0x304>)
 8011cf0:	e024      	b.n	8011d3c <_dtoa_r+0xe4>
 8011cf2:	4b9b      	ldr	r3, [pc, #620]	; (8011f60 <_dtoa_r+0x308>)
 8011cf4:	9300      	str	r3, [sp, #0]
 8011cf6:	3308      	adds	r3, #8
 8011cf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011cfa:	6013      	str	r3, [r2, #0]
 8011cfc:	9800      	ldr	r0, [sp, #0]
 8011cfe:	b015      	add	sp, #84	; 0x54
 8011d00:	ecbd 8b02 	vpop	{d8}
 8011d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d08:	4b94      	ldr	r3, [pc, #592]	; (8011f5c <_dtoa_r+0x304>)
 8011d0a:	9300      	str	r3, [sp, #0]
 8011d0c:	3303      	adds	r3, #3
 8011d0e:	e7f3      	b.n	8011cf8 <_dtoa_r+0xa0>
 8011d10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011d14:	2200      	movs	r2, #0
 8011d16:	ec51 0b17 	vmov	r0, r1, d7
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011d20:	f7ee feda 	bl	8000ad8 <__aeabi_dcmpeq>
 8011d24:	4680      	mov	r8, r0
 8011d26:	b158      	cbz	r0, 8011d40 <_dtoa_r+0xe8>
 8011d28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	6013      	str	r3, [r2, #0]
 8011d2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	f000 8551 	beq.w	80127d8 <_dtoa_r+0xb80>
 8011d36:	488b      	ldr	r0, [pc, #556]	; (8011f64 <_dtoa_r+0x30c>)
 8011d38:	6018      	str	r0, [r3, #0]
 8011d3a:	1e43      	subs	r3, r0, #1
 8011d3c:	9300      	str	r3, [sp, #0]
 8011d3e:	e7dd      	b.n	8011cfc <_dtoa_r+0xa4>
 8011d40:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011d44:	aa12      	add	r2, sp, #72	; 0x48
 8011d46:	a913      	add	r1, sp, #76	; 0x4c
 8011d48:	4620      	mov	r0, r4
 8011d4a:	f001 fcf9 	bl	8013740 <__d2b>
 8011d4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011d52:	4683      	mov	fp, r0
 8011d54:	2d00      	cmp	r5, #0
 8011d56:	d07c      	beq.n	8011e52 <_dtoa_r+0x1fa>
 8011d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d5a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011d5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011d62:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8011d66:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011d6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011d6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011d72:	4b7d      	ldr	r3, [pc, #500]	; (8011f68 <_dtoa_r+0x310>)
 8011d74:	2200      	movs	r2, #0
 8011d76:	4630      	mov	r0, r6
 8011d78:	4639      	mov	r1, r7
 8011d7a:	f7ee fa8d 	bl	8000298 <__aeabi_dsub>
 8011d7e:	a36e      	add	r3, pc, #440	; (adr r3, 8011f38 <_dtoa_r+0x2e0>)
 8011d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d84:	f7ee fc40 	bl	8000608 <__aeabi_dmul>
 8011d88:	a36d      	add	r3, pc, #436	; (adr r3, 8011f40 <_dtoa_r+0x2e8>)
 8011d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d8e:	f7ee fa85 	bl	800029c <__adddf3>
 8011d92:	4606      	mov	r6, r0
 8011d94:	4628      	mov	r0, r5
 8011d96:	460f      	mov	r7, r1
 8011d98:	f7ee fbcc 	bl	8000534 <__aeabi_i2d>
 8011d9c:	a36a      	add	r3, pc, #424	; (adr r3, 8011f48 <_dtoa_r+0x2f0>)
 8011d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da2:	f7ee fc31 	bl	8000608 <__aeabi_dmul>
 8011da6:	4602      	mov	r2, r0
 8011da8:	460b      	mov	r3, r1
 8011daa:	4630      	mov	r0, r6
 8011dac:	4639      	mov	r1, r7
 8011dae:	f7ee fa75 	bl	800029c <__adddf3>
 8011db2:	4606      	mov	r6, r0
 8011db4:	460f      	mov	r7, r1
 8011db6:	f7ee fed7 	bl	8000b68 <__aeabi_d2iz>
 8011dba:	2200      	movs	r2, #0
 8011dbc:	4682      	mov	sl, r0
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	4630      	mov	r0, r6
 8011dc2:	4639      	mov	r1, r7
 8011dc4:	f7ee fe92 	bl	8000aec <__aeabi_dcmplt>
 8011dc8:	b148      	cbz	r0, 8011dde <_dtoa_r+0x186>
 8011dca:	4650      	mov	r0, sl
 8011dcc:	f7ee fbb2 	bl	8000534 <__aeabi_i2d>
 8011dd0:	4632      	mov	r2, r6
 8011dd2:	463b      	mov	r3, r7
 8011dd4:	f7ee fe80 	bl	8000ad8 <__aeabi_dcmpeq>
 8011dd8:	b908      	cbnz	r0, 8011dde <_dtoa_r+0x186>
 8011dda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011dde:	f1ba 0f16 	cmp.w	sl, #22
 8011de2:	d854      	bhi.n	8011e8e <_dtoa_r+0x236>
 8011de4:	4b61      	ldr	r3, [pc, #388]	; (8011f6c <_dtoa_r+0x314>)
 8011de6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011df2:	f7ee fe7b 	bl	8000aec <__aeabi_dcmplt>
 8011df6:	2800      	cmp	r0, #0
 8011df8:	d04b      	beq.n	8011e92 <_dtoa_r+0x23a>
 8011dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011dfe:	2300      	movs	r3, #0
 8011e00:	930e      	str	r3, [sp, #56]	; 0x38
 8011e02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011e04:	1b5d      	subs	r5, r3, r5
 8011e06:	1e6b      	subs	r3, r5, #1
 8011e08:	9304      	str	r3, [sp, #16]
 8011e0a:	bf43      	ittte	mi
 8011e0c:	2300      	movmi	r3, #0
 8011e0e:	f1c5 0801 	rsbmi	r8, r5, #1
 8011e12:	9304      	strmi	r3, [sp, #16]
 8011e14:	f04f 0800 	movpl.w	r8, #0
 8011e18:	f1ba 0f00 	cmp.w	sl, #0
 8011e1c:	db3b      	blt.n	8011e96 <_dtoa_r+0x23e>
 8011e1e:	9b04      	ldr	r3, [sp, #16]
 8011e20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8011e24:	4453      	add	r3, sl
 8011e26:	9304      	str	r3, [sp, #16]
 8011e28:	2300      	movs	r3, #0
 8011e2a:	9306      	str	r3, [sp, #24]
 8011e2c:	9b05      	ldr	r3, [sp, #20]
 8011e2e:	2b09      	cmp	r3, #9
 8011e30:	d869      	bhi.n	8011f06 <_dtoa_r+0x2ae>
 8011e32:	2b05      	cmp	r3, #5
 8011e34:	bfc4      	itt	gt
 8011e36:	3b04      	subgt	r3, #4
 8011e38:	9305      	strgt	r3, [sp, #20]
 8011e3a:	9b05      	ldr	r3, [sp, #20]
 8011e3c:	f1a3 0302 	sub.w	r3, r3, #2
 8011e40:	bfcc      	ite	gt
 8011e42:	2500      	movgt	r5, #0
 8011e44:	2501      	movle	r5, #1
 8011e46:	2b03      	cmp	r3, #3
 8011e48:	d869      	bhi.n	8011f1e <_dtoa_r+0x2c6>
 8011e4a:	e8df f003 	tbb	[pc, r3]
 8011e4e:	4e2c      	.short	0x4e2c
 8011e50:	5a4c      	.short	0x5a4c
 8011e52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8011e56:	441d      	add	r5, r3
 8011e58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011e5c:	2b20      	cmp	r3, #32
 8011e5e:	bfc1      	itttt	gt
 8011e60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011e64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011e68:	fa09 f303 	lslgt.w	r3, r9, r3
 8011e6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011e70:	bfda      	itte	le
 8011e72:	f1c3 0320 	rsble	r3, r3, #32
 8011e76:	fa06 f003 	lslle.w	r0, r6, r3
 8011e7a:	4318      	orrgt	r0, r3
 8011e7c:	f7ee fb4a 	bl	8000514 <__aeabi_ui2d>
 8011e80:	2301      	movs	r3, #1
 8011e82:	4606      	mov	r6, r0
 8011e84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011e88:	3d01      	subs	r5, #1
 8011e8a:	9310      	str	r3, [sp, #64]	; 0x40
 8011e8c:	e771      	b.n	8011d72 <_dtoa_r+0x11a>
 8011e8e:	2301      	movs	r3, #1
 8011e90:	e7b6      	b.n	8011e00 <_dtoa_r+0x1a8>
 8011e92:	900e      	str	r0, [sp, #56]	; 0x38
 8011e94:	e7b5      	b.n	8011e02 <_dtoa_r+0x1aa>
 8011e96:	f1ca 0300 	rsb	r3, sl, #0
 8011e9a:	9306      	str	r3, [sp, #24]
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	eba8 080a 	sub.w	r8, r8, sl
 8011ea2:	930d      	str	r3, [sp, #52]	; 0x34
 8011ea4:	e7c2      	b.n	8011e2c <_dtoa_r+0x1d4>
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	9308      	str	r3, [sp, #32]
 8011eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	dc39      	bgt.n	8011f24 <_dtoa_r+0x2cc>
 8011eb0:	f04f 0901 	mov.w	r9, #1
 8011eb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8011eb8:	464b      	mov	r3, r9
 8011eba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011ebe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	6042      	str	r2, [r0, #4]
 8011ec4:	2204      	movs	r2, #4
 8011ec6:	f102 0614 	add.w	r6, r2, #20
 8011eca:	429e      	cmp	r6, r3
 8011ecc:	6841      	ldr	r1, [r0, #4]
 8011ece:	d92f      	bls.n	8011f30 <_dtoa_r+0x2d8>
 8011ed0:	4620      	mov	r0, r4
 8011ed2:	f001 f84d 	bl	8012f70 <_Balloc>
 8011ed6:	9000      	str	r0, [sp, #0]
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	d14b      	bne.n	8011f74 <_dtoa_r+0x31c>
 8011edc:	4b24      	ldr	r3, [pc, #144]	; (8011f70 <_dtoa_r+0x318>)
 8011ede:	4602      	mov	r2, r0
 8011ee0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011ee4:	e6d1      	b.n	8011c8a <_dtoa_r+0x32>
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	e7de      	b.n	8011ea8 <_dtoa_r+0x250>
 8011eea:	2300      	movs	r3, #0
 8011eec:	9308      	str	r3, [sp, #32]
 8011eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ef0:	eb0a 0903 	add.w	r9, sl, r3
 8011ef4:	f109 0301 	add.w	r3, r9, #1
 8011ef8:	2b01      	cmp	r3, #1
 8011efa:	9301      	str	r3, [sp, #4]
 8011efc:	bfb8      	it	lt
 8011efe:	2301      	movlt	r3, #1
 8011f00:	e7dd      	b.n	8011ebe <_dtoa_r+0x266>
 8011f02:	2301      	movs	r3, #1
 8011f04:	e7f2      	b.n	8011eec <_dtoa_r+0x294>
 8011f06:	2501      	movs	r5, #1
 8011f08:	2300      	movs	r3, #0
 8011f0a:	9305      	str	r3, [sp, #20]
 8011f0c:	9508      	str	r5, [sp, #32]
 8011f0e:	f04f 39ff 	mov.w	r9, #4294967295
 8011f12:	2200      	movs	r2, #0
 8011f14:	f8cd 9004 	str.w	r9, [sp, #4]
 8011f18:	2312      	movs	r3, #18
 8011f1a:	9209      	str	r2, [sp, #36]	; 0x24
 8011f1c:	e7cf      	b.n	8011ebe <_dtoa_r+0x266>
 8011f1e:	2301      	movs	r3, #1
 8011f20:	9308      	str	r3, [sp, #32]
 8011f22:	e7f4      	b.n	8011f0e <_dtoa_r+0x2b6>
 8011f24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011f28:	f8cd 9004 	str.w	r9, [sp, #4]
 8011f2c:	464b      	mov	r3, r9
 8011f2e:	e7c6      	b.n	8011ebe <_dtoa_r+0x266>
 8011f30:	3101      	adds	r1, #1
 8011f32:	6041      	str	r1, [r0, #4]
 8011f34:	0052      	lsls	r2, r2, #1
 8011f36:	e7c6      	b.n	8011ec6 <_dtoa_r+0x26e>
 8011f38:	636f4361 	.word	0x636f4361
 8011f3c:	3fd287a7 	.word	0x3fd287a7
 8011f40:	8b60c8b3 	.word	0x8b60c8b3
 8011f44:	3fc68a28 	.word	0x3fc68a28
 8011f48:	509f79fb 	.word	0x509f79fb
 8011f4c:	3fd34413 	.word	0x3fd34413
 8011f50:	080169b8 	.word	0x080169b8
 8011f54:	08016a79 	.word	0x08016a79
 8011f58:	7ff00000 	.word	0x7ff00000
 8011f5c:	08016a75 	.word	0x08016a75
 8011f60:	08016a6c 	.word	0x08016a6c
 8011f64:	08016941 	.word	0x08016941
 8011f68:	3ff80000 	.word	0x3ff80000
 8011f6c:	08016bf0 	.word	0x08016bf0
 8011f70:	08016ad8 	.word	0x08016ad8
 8011f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f76:	9a00      	ldr	r2, [sp, #0]
 8011f78:	601a      	str	r2, [r3, #0]
 8011f7a:	9b01      	ldr	r3, [sp, #4]
 8011f7c:	2b0e      	cmp	r3, #14
 8011f7e:	f200 80ad 	bhi.w	80120dc <_dtoa_r+0x484>
 8011f82:	2d00      	cmp	r5, #0
 8011f84:	f000 80aa 	beq.w	80120dc <_dtoa_r+0x484>
 8011f88:	f1ba 0f00 	cmp.w	sl, #0
 8011f8c:	dd36      	ble.n	8011ffc <_dtoa_r+0x3a4>
 8011f8e:	4ac3      	ldr	r2, [pc, #780]	; (801229c <_dtoa_r+0x644>)
 8011f90:	f00a 030f 	and.w	r3, sl, #15
 8011f94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011f98:	ed93 7b00 	vldr	d7, [r3]
 8011f9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011fa0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8011fa4:	eeb0 8a47 	vmov.f32	s16, s14
 8011fa8:	eef0 8a67 	vmov.f32	s17, s15
 8011fac:	d016      	beq.n	8011fdc <_dtoa_r+0x384>
 8011fae:	4bbc      	ldr	r3, [pc, #752]	; (80122a0 <_dtoa_r+0x648>)
 8011fb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011fb8:	f7ee fc50 	bl	800085c <__aeabi_ddiv>
 8011fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fc0:	f007 070f 	and.w	r7, r7, #15
 8011fc4:	2503      	movs	r5, #3
 8011fc6:	4eb6      	ldr	r6, [pc, #728]	; (80122a0 <_dtoa_r+0x648>)
 8011fc8:	b957      	cbnz	r7, 8011fe0 <_dtoa_r+0x388>
 8011fca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fce:	ec53 2b18 	vmov	r2, r3, d8
 8011fd2:	f7ee fc43 	bl	800085c <__aeabi_ddiv>
 8011fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fda:	e029      	b.n	8012030 <_dtoa_r+0x3d8>
 8011fdc:	2502      	movs	r5, #2
 8011fde:	e7f2      	b.n	8011fc6 <_dtoa_r+0x36e>
 8011fe0:	07f9      	lsls	r1, r7, #31
 8011fe2:	d508      	bpl.n	8011ff6 <_dtoa_r+0x39e>
 8011fe4:	ec51 0b18 	vmov	r0, r1, d8
 8011fe8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011fec:	f7ee fb0c 	bl	8000608 <__aeabi_dmul>
 8011ff0:	ec41 0b18 	vmov	d8, r0, r1
 8011ff4:	3501      	adds	r5, #1
 8011ff6:	107f      	asrs	r7, r7, #1
 8011ff8:	3608      	adds	r6, #8
 8011ffa:	e7e5      	b.n	8011fc8 <_dtoa_r+0x370>
 8011ffc:	f000 80a6 	beq.w	801214c <_dtoa_r+0x4f4>
 8012000:	f1ca 0600 	rsb	r6, sl, #0
 8012004:	4ba5      	ldr	r3, [pc, #660]	; (801229c <_dtoa_r+0x644>)
 8012006:	4fa6      	ldr	r7, [pc, #664]	; (80122a0 <_dtoa_r+0x648>)
 8012008:	f006 020f 	and.w	r2, r6, #15
 801200c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012014:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012018:	f7ee faf6 	bl	8000608 <__aeabi_dmul>
 801201c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012020:	1136      	asrs	r6, r6, #4
 8012022:	2300      	movs	r3, #0
 8012024:	2502      	movs	r5, #2
 8012026:	2e00      	cmp	r6, #0
 8012028:	f040 8085 	bne.w	8012136 <_dtoa_r+0x4de>
 801202c:	2b00      	cmp	r3, #0
 801202e:	d1d2      	bne.n	8011fd6 <_dtoa_r+0x37e>
 8012030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012032:	2b00      	cmp	r3, #0
 8012034:	f000 808c 	beq.w	8012150 <_dtoa_r+0x4f8>
 8012038:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801203c:	4b99      	ldr	r3, [pc, #612]	; (80122a4 <_dtoa_r+0x64c>)
 801203e:	2200      	movs	r2, #0
 8012040:	4630      	mov	r0, r6
 8012042:	4639      	mov	r1, r7
 8012044:	f7ee fd52 	bl	8000aec <__aeabi_dcmplt>
 8012048:	2800      	cmp	r0, #0
 801204a:	f000 8081 	beq.w	8012150 <_dtoa_r+0x4f8>
 801204e:	9b01      	ldr	r3, [sp, #4]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d07d      	beq.n	8012150 <_dtoa_r+0x4f8>
 8012054:	f1b9 0f00 	cmp.w	r9, #0
 8012058:	dd3c      	ble.n	80120d4 <_dtoa_r+0x47c>
 801205a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801205e:	9307      	str	r3, [sp, #28]
 8012060:	2200      	movs	r2, #0
 8012062:	4b91      	ldr	r3, [pc, #580]	; (80122a8 <_dtoa_r+0x650>)
 8012064:	4630      	mov	r0, r6
 8012066:	4639      	mov	r1, r7
 8012068:	f7ee face 	bl	8000608 <__aeabi_dmul>
 801206c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012070:	3501      	adds	r5, #1
 8012072:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012076:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801207a:	4628      	mov	r0, r5
 801207c:	f7ee fa5a 	bl	8000534 <__aeabi_i2d>
 8012080:	4632      	mov	r2, r6
 8012082:	463b      	mov	r3, r7
 8012084:	f7ee fac0 	bl	8000608 <__aeabi_dmul>
 8012088:	4b88      	ldr	r3, [pc, #544]	; (80122ac <_dtoa_r+0x654>)
 801208a:	2200      	movs	r2, #0
 801208c:	f7ee f906 	bl	800029c <__adddf3>
 8012090:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012098:	9303      	str	r3, [sp, #12]
 801209a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801209c:	2b00      	cmp	r3, #0
 801209e:	d15c      	bne.n	801215a <_dtoa_r+0x502>
 80120a0:	4b83      	ldr	r3, [pc, #524]	; (80122b0 <_dtoa_r+0x658>)
 80120a2:	2200      	movs	r2, #0
 80120a4:	4630      	mov	r0, r6
 80120a6:	4639      	mov	r1, r7
 80120a8:	f7ee f8f6 	bl	8000298 <__aeabi_dsub>
 80120ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80120b0:	4606      	mov	r6, r0
 80120b2:	460f      	mov	r7, r1
 80120b4:	f7ee fd38 	bl	8000b28 <__aeabi_dcmpgt>
 80120b8:	2800      	cmp	r0, #0
 80120ba:	f040 8296 	bne.w	80125ea <_dtoa_r+0x992>
 80120be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80120c2:	4630      	mov	r0, r6
 80120c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80120c8:	4639      	mov	r1, r7
 80120ca:	f7ee fd0f 	bl	8000aec <__aeabi_dcmplt>
 80120ce:	2800      	cmp	r0, #0
 80120d0:	f040 8288 	bne.w	80125e4 <_dtoa_r+0x98c>
 80120d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80120d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80120dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80120de:	2b00      	cmp	r3, #0
 80120e0:	f2c0 8158 	blt.w	8012394 <_dtoa_r+0x73c>
 80120e4:	f1ba 0f0e 	cmp.w	sl, #14
 80120e8:	f300 8154 	bgt.w	8012394 <_dtoa_r+0x73c>
 80120ec:	4b6b      	ldr	r3, [pc, #428]	; (801229c <_dtoa_r+0x644>)
 80120ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80120f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80120f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	f280 80e3 	bge.w	80122c4 <_dtoa_r+0x66c>
 80120fe:	9b01      	ldr	r3, [sp, #4]
 8012100:	2b00      	cmp	r3, #0
 8012102:	f300 80df 	bgt.w	80122c4 <_dtoa_r+0x66c>
 8012106:	f040 826d 	bne.w	80125e4 <_dtoa_r+0x98c>
 801210a:	4b69      	ldr	r3, [pc, #420]	; (80122b0 <_dtoa_r+0x658>)
 801210c:	2200      	movs	r2, #0
 801210e:	4640      	mov	r0, r8
 8012110:	4649      	mov	r1, r9
 8012112:	f7ee fa79 	bl	8000608 <__aeabi_dmul>
 8012116:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801211a:	f7ee fcfb 	bl	8000b14 <__aeabi_dcmpge>
 801211e:	9e01      	ldr	r6, [sp, #4]
 8012120:	4637      	mov	r7, r6
 8012122:	2800      	cmp	r0, #0
 8012124:	f040 8243 	bne.w	80125ae <_dtoa_r+0x956>
 8012128:	9d00      	ldr	r5, [sp, #0]
 801212a:	2331      	movs	r3, #49	; 0x31
 801212c:	f805 3b01 	strb.w	r3, [r5], #1
 8012130:	f10a 0a01 	add.w	sl, sl, #1
 8012134:	e23f      	b.n	80125b6 <_dtoa_r+0x95e>
 8012136:	07f2      	lsls	r2, r6, #31
 8012138:	d505      	bpl.n	8012146 <_dtoa_r+0x4ee>
 801213a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801213e:	f7ee fa63 	bl	8000608 <__aeabi_dmul>
 8012142:	3501      	adds	r5, #1
 8012144:	2301      	movs	r3, #1
 8012146:	1076      	asrs	r6, r6, #1
 8012148:	3708      	adds	r7, #8
 801214a:	e76c      	b.n	8012026 <_dtoa_r+0x3ce>
 801214c:	2502      	movs	r5, #2
 801214e:	e76f      	b.n	8012030 <_dtoa_r+0x3d8>
 8012150:	9b01      	ldr	r3, [sp, #4]
 8012152:	f8cd a01c 	str.w	sl, [sp, #28]
 8012156:	930c      	str	r3, [sp, #48]	; 0x30
 8012158:	e78d      	b.n	8012076 <_dtoa_r+0x41e>
 801215a:	9900      	ldr	r1, [sp, #0]
 801215c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801215e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012160:	4b4e      	ldr	r3, [pc, #312]	; (801229c <_dtoa_r+0x644>)
 8012162:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012166:	4401      	add	r1, r0
 8012168:	9102      	str	r1, [sp, #8]
 801216a:	9908      	ldr	r1, [sp, #32]
 801216c:	eeb0 8a47 	vmov.f32	s16, s14
 8012170:	eef0 8a67 	vmov.f32	s17, s15
 8012174:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012178:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801217c:	2900      	cmp	r1, #0
 801217e:	d045      	beq.n	801220c <_dtoa_r+0x5b4>
 8012180:	494c      	ldr	r1, [pc, #304]	; (80122b4 <_dtoa_r+0x65c>)
 8012182:	2000      	movs	r0, #0
 8012184:	f7ee fb6a 	bl	800085c <__aeabi_ddiv>
 8012188:	ec53 2b18 	vmov	r2, r3, d8
 801218c:	f7ee f884 	bl	8000298 <__aeabi_dsub>
 8012190:	9d00      	ldr	r5, [sp, #0]
 8012192:	ec41 0b18 	vmov	d8, r0, r1
 8012196:	4639      	mov	r1, r7
 8012198:	4630      	mov	r0, r6
 801219a:	f7ee fce5 	bl	8000b68 <__aeabi_d2iz>
 801219e:	900c      	str	r0, [sp, #48]	; 0x30
 80121a0:	f7ee f9c8 	bl	8000534 <__aeabi_i2d>
 80121a4:	4602      	mov	r2, r0
 80121a6:	460b      	mov	r3, r1
 80121a8:	4630      	mov	r0, r6
 80121aa:	4639      	mov	r1, r7
 80121ac:	f7ee f874 	bl	8000298 <__aeabi_dsub>
 80121b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121b2:	3330      	adds	r3, #48	; 0x30
 80121b4:	f805 3b01 	strb.w	r3, [r5], #1
 80121b8:	ec53 2b18 	vmov	r2, r3, d8
 80121bc:	4606      	mov	r6, r0
 80121be:	460f      	mov	r7, r1
 80121c0:	f7ee fc94 	bl	8000aec <__aeabi_dcmplt>
 80121c4:	2800      	cmp	r0, #0
 80121c6:	d165      	bne.n	8012294 <_dtoa_r+0x63c>
 80121c8:	4632      	mov	r2, r6
 80121ca:	463b      	mov	r3, r7
 80121cc:	4935      	ldr	r1, [pc, #212]	; (80122a4 <_dtoa_r+0x64c>)
 80121ce:	2000      	movs	r0, #0
 80121d0:	f7ee f862 	bl	8000298 <__aeabi_dsub>
 80121d4:	ec53 2b18 	vmov	r2, r3, d8
 80121d8:	f7ee fc88 	bl	8000aec <__aeabi_dcmplt>
 80121dc:	2800      	cmp	r0, #0
 80121de:	f040 80b9 	bne.w	8012354 <_dtoa_r+0x6fc>
 80121e2:	9b02      	ldr	r3, [sp, #8]
 80121e4:	429d      	cmp	r5, r3
 80121e6:	f43f af75 	beq.w	80120d4 <_dtoa_r+0x47c>
 80121ea:	4b2f      	ldr	r3, [pc, #188]	; (80122a8 <_dtoa_r+0x650>)
 80121ec:	ec51 0b18 	vmov	r0, r1, d8
 80121f0:	2200      	movs	r2, #0
 80121f2:	f7ee fa09 	bl	8000608 <__aeabi_dmul>
 80121f6:	4b2c      	ldr	r3, [pc, #176]	; (80122a8 <_dtoa_r+0x650>)
 80121f8:	ec41 0b18 	vmov	d8, r0, r1
 80121fc:	2200      	movs	r2, #0
 80121fe:	4630      	mov	r0, r6
 8012200:	4639      	mov	r1, r7
 8012202:	f7ee fa01 	bl	8000608 <__aeabi_dmul>
 8012206:	4606      	mov	r6, r0
 8012208:	460f      	mov	r7, r1
 801220a:	e7c4      	b.n	8012196 <_dtoa_r+0x53e>
 801220c:	ec51 0b17 	vmov	r0, r1, d7
 8012210:	f7ee f9fa 	bl	8000608 <__aeabi_dmul>
 8012214:	9b02      	ldr	r3, [sp, #8]
 8012216:	9d00      	ldr	r5, [sp, #0]
 8012218:	930c      	str	r3, [sp, #48]	; 0x30
 801221a:	ec41 0b18 	vmov	d8, r0, r1
 801221e:	4639      	mov	r1, r7
 8012220:	4630      	mov	r0, r6
 8012222:	f7ee fca1 	bl	8000b68 <__aeabi_d2iz>
 8012226:	9011      	str	r0, [sp, #68]	; 0x44
 8012228:	f7ee f984 	bl	8000534 <__aeabi_i2d>
 801222c:	4602      	mov	r2, r0
 801222e:	460b      	mov	r3, r1
 8012230:	4630      	mov	r0, r6
 8012232:	4639      	mov	r1, r7
 8012234:	f7ee f830 	bl	8000298 <__aeabi_dsub>
 8012238:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801223a:	3330      	adds	r3, #48	; 0x30
 801223c:	f805 3b01 	strb.w	r3, [r5], #1
 8012240:	9b02      	ldr	r3, [sp, #8]
 8012242:	429d      	cmp	r5, r3
 8012244:	4606      	mov	r6, r0
 8012246:	460f      	mov	r7, r1
 8012248:	f04f 0200 	mov.w	r2, #0
 801224c:	d134      	bne.n	80122b8 <_dtoa_r+0x660>
 801224e:	4b19      	ldr	r3, [pc, #100]	; (80122b4 <_dtoa_r+0x65c>)
 8012250:	ec51 0b18 	vmov	r0, r1, d8
 8012254:	f7ee f822 	bl	800029c <__adddf3>
 8012258:	4602      	mov	r2, r0
 801225a:	460b      	mov	r3, r1
 801225c:	4630      	mov	r0, r6
 801225e:	4639      	mov	r1, r7
 8012260:	f7ee fc62 	bl	8000b28 <__aeabi_dcmpgt>
 8012264:	2800      	cmp	r0, #0
 8012266:	d175      	bne.n	8012354 <_dtoa_r+0x6fc>
 8012268:	ec53 2b18 	vmov	r2, r3, d8
 801226c:	4911      	ldr	r1, [pc, #68]	; (80122b4 <_dtoa_r+0x65c>)
 801226e:	2000      	movs	r0, #0
 8012270:	f7ee f812 	bl	8000298 <__aeabi_dsub>
 8012274:	4602      	mov	r2, r0
 8012276:	460b      	mov	r3, r1
 8012278:	4630      	mov	r0, r6
 801227a:	4639      	mov	r1, r7
 801227c:	f7ee fc36 	bl	8000aec <__aeabi_dcmplt>
 8012280:	2800      	cmp	r0, #0
 8012282:	f43f af27 	beq.w	80120d4 <_dtoa_r+0x47c>
 8012286:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012288:	1e6b      	subs	r3, r5, #1
 801228a:	930c      	str	r3, [sp, #48]	; 0x30
 801228c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012290:	2b30      	cmp	r3, #48	; 0x30
 8012292:	d0f8      	beq.n	8012286 <_dtoa_r+0x62e>
 8012294:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012298:	e04a      	b.n	8012330 <_dtoa_r+0x6d8>
 801229a:	bf00      	nop
 801229c:	08016bf0 	.word	0x08016bf0
 80122a0:	08016bc8 	.word	0x08016bc8
 80122a4:	3ff00000 	.word	0x3ff00000
 80122a8:	40240000 	.word	0x40240000
 80122ac:	401c0000 	.word	0x401c0000
 80122b0:	40140000 	.word	0x40140000
 80122b4:	3fe00000 	.word	0x3fe00000
 80122b8:	4baf      	ldr	r3, [pc, #700]	; (8012578 <_dtoa_r+0x920>)
 80122ba:	f7ee f9a5 	bl	8000608 <__aeabi_dmul>
 80122be:	4606      	mov	r6, r0
 80122c0:	460f      	mov	r7, r1
 80122c2:	e7ac      	b.n	801221e <_dtoa_r+0x5c6>
 80122c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80122c8:	9d00      	ldr	r5, [sp, #0]
 80122ca:	4642      	mov	r2, r8
 80122cc:	464b      	mov	r3, r9
 80122ce:	4630      	mov	r0, r6
 80122d0:	4639      	mov	r1, r7
 80122d2:	f7ee fac3 	bl	800085c <__aeabi_ddiv>
 80122d6:	f7ee fc47 	bl	8000b68 <__aeabi_d2iz>
 80122da:	9002      	str	r0, [sp, #8]
 80122dc:	f7ee f92a 	bl	8000534 <__aeabi_i2d>
 80122e0:	4642      	mov	r2, r8
 80122e2:	464b      	mov	r3, r9
 80122e4:	f7ee f990 	bl	8000608 <__aeabi_dmul>
 80122e8:	4602      	mov	r2, r0
 80122ea:	460b      	mov	r3, r1
 80122ec:	4630      	mov	r0, r6
 80122ee:	4639      	mov	r1, r7
 80122f0:	f7ed ffd2 	bl	8000298 <__aeabi_dsub>
 80122f4:	9e02      	ldr	r6, [sp, #8]
 80122f6:	9f01      	ldr	r7, [sp, #4]
 80122f8:	3630      	adds	r6, #48	; 0x30
 80122fa:	f805 6b01 	strb.w	r6, [r5], #1
 80122fe:	9e00      	ldr	r6, [sp, #0]
 8012300:	1bae      	subs	r6, r5, r6
 8012302:	42b7      	cmp	r7, r6
 8012304:	4602      	mov	r2, r0
 8012306:	460b      	mov	r3, r1
 8012308:	d137      	bne.n	801237a <_dtoa_r+0x722>
 801230a:	f7ed ffc7 	bl	800029c <__adddf3>
 801230e:	4642      	mov	r2, r8
 8012310:	464b      	mov	r3, r9
 8012312:	4606      	mov	r6, r0
 8012314:	460f      	mov	r7, r1
 8012316:	f7ee fc07 	bl	8000b28 <__aeabi_dcmpgt>
 801231a:	b9c8      	cbnz	r0, 8012350 <_dtoa_r+0x6f8>
 801231c:	4642      	mov	r2, r8
 801231e:	464b      	mov	r3, r9
 8012320:	4630      	mov	r0, r6
 8012322:	4639      	mov	r1, r7
 8012324:	f7ee fbd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8012328:	b110      	cbz	r0, 8012330 <_dtoa_r+0x6d8>
 801232a:	9b02      	ldr	r3, [sp, #8]
 801232c:	07d9      	lsls	r1, r3, #31
 801232e:	d40f      	bmi.n	8012350 <_dtoa_r+0x6f8>
 8012330:	4620      	mov	r0, r4
 8012332:	4659      	mov	r1, fp
 8012334:	f000 fe5c 	bl	8012ff0 <_Bfree>
 8012338:	2300      	movs	r3, #0
 801233a:	702b      	strb	r3, [r5, #0]
 801233c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801233e:	f10a 0001 	add.w	r0, sl, #1
 8012342:	6018      	str	r0, [r3, #0]
 8012344:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012346:	2b00      	cmp	r3, #0
 8012348:	f43f acd8 	beq.w	8011cfc <_dtoa_r+0xa4>
 801234c:	601d      	str	r5, [r3, #0]
 801234e:	e4d5      	b.n	8011cfc <_dtoa_r+0xa4>
 8012350:	f8cd a01c 	str.w	sl, [sp, #28]
 8012354:	462b      	mov	r3, r5
 8012356:	461d      	mov	r5, r3
 8012358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801235c:	2a39      	cmp	r2, #57	; 0x39
 801235e:	d108      	bne.n	8012372 <_dtoa_r+0x71a>
 8012360:	9a00      	ldr	r2, [sp, #0]
 8012362:	429a      	cmp	r2, r3
 8012364:	d1f7      	bne.n	8012356 <_dtoa_r+0x6fe>
 8012366:	9a07      	ldr	r2, [sp, #28]
 8012368:	9900      	ldr	r1, [sp, #0]
 801236a:	3201      	adds	r2, #1
 801236c:	9207      	str	r2, [sp, #28]
 801236e:	2230      	movs	r2, #48	; 0x30
 8012370:	700a      	strb	r2, [r1, #0]
 8012372:	781a      	ldrb	r2, [r3, #0]
 8012374:	3201      	adds	r2, #1
 8012376:	701a      	strb	r2, [r3, #0]
 8012378:	e78c      	b.n	8012294 <_dtoa_r+0x63c>
 801237a:	4b7f      	ldr	r3, [pc, #508]	; (8012578 <_dtoa_r+0x920>)
 801237c:	2200      	movs	r2, #0
 801237e:	f7ee f943 	bl	8000608 <__aeabi_dmul>
 8012382:	2200      	movs	r2, #0
 8012384:	2300      	movs	r3, #0
 8012386:	4606      	mov	r6, r0
 8012388:	460f      	mov	r7, r1
 801238a:	f7ee fba5 	bl	8000ad8 <__aeabi_dcmpeq>
 801238e:	2800      	cmp	r0, #0
 8012390:	d09b      	beq.n	80122ca <_dtoa_r+0x672>
 8012392:	e7cd      	b.n	8012330 <_dtoa_r+0x6d8>
 8012394:	9a08      	ldr	r2, [sp, #32]
 8012396:	2a00      	cmp	r2, #0
 8012398:	f000 80c4 	beq.w	8012524 <_dtoa_r+0x8cc>
 801239c:	9a05      	ldr	r2, [sp, #20]
 801239e:	2a01      	cmp	r2, #1
 80123a0:	f300 80a8 	bgt.w	80124f4 <_dtoa_r+0x89c>
 80123a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80123a6:	2a00      	cmp	r2, #0
 80123a8:	f000 80a0 	beq.w	80124ec <_dtoa_r+0x894>
 80123ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80123b0:	9e06      	ldr	r6, [sp, #24]
 80123b2:	4645      	mov	r5, r8
 80123b4:	9a04      	ldr	r2, [sp, #16]
 80123b6:	2101      	movs	r1, #1
 80123b8:	441a      	add	r2, r3
 80123ba:	4620      	mov	r0, r4
 80123bc:	4498      	add	r8, r3
 80123be:	9204      	str	r2, [sp, #16]
 80123c0:	f000 ff1c 	bl	80131fc <__i2b>
 80123c4:	4607      	mov	r7, r0
 80123c6:	2d00      	cmp	r5, #0
 80123c8:	dd0b      	ble.n	80123e2 <_dtoa_r+0x78a>
 80123ca:	9b04      	ldr	r3, [sp, #16]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	dd08      	ble.n	80123e2 <_dtoa_r+0x78a>
 80123d0:	42ab      	cmp	r3, r5
 80123d2:	9a04      	ldr	r2, [sp, #16]
 80123d4:	bfa8      	it	ge
 80123d6:	462b      	movge	r3, r5
 80123d8:	eba8 0803 	sub.w	r8, r8, r3
 80123dc:	1aed      	subs	r5, r5, r3
 80123de:	1ad3      	subs	r3, r2, r3
 80123e0:	9304      	str	r3, [sp, #16]
 80123e2:	9b06      	ldr	r3, [sp, #24]
 80123e4:	b1fb      	cbz	r3, 8012426 <_dtoa_r+0x7ce>
 80123e6:	9b08      	ldr	r3, [sp, #32]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	f000 809f 	beq.w	801252c <_dtoa_r+0x8d4>
 80123ee:	2e00      	cmp	r6, #0
 80123f0:	dd11      	ble.n	8012416 <_dtoa_r+0x7be>
 80123f2:	4639      	mov	r1, r7
 80123f4:	4632      	mov	r2, r6
 80123f6:	4620      	mov	r0, r4
 80123f8:	f000 ffbc 	bl	8013374 <__pow5mult>
 80123fc:	465a      	mov	r2, fp
 80123fe:	4601      	mov	r1, r0
 8012400:	4607      	mov	r7, r0
 8012402:	4620      	mov	r0, r4
 8012404:	f000 ff10 	bl	8013228 <__multiply>
 8012408:	4659      	mov	r1, fp
 801240a:	9007      	str	r0, [sp, #28]
 801240c:	4620      	mov	r0, r4
 801240e:	f000 fdef 	bl	8012ff0 <_Bfree>
 8012412:	9b07      	ldr	r3, [sp, #28]
 8012414:	469b      	mov	fp, r3
 8012416:	9b06      	ldr	r3, [sp, #24]
 8012418:	1b9a      	subs	r2, r3, r6
 801241a:	d004      	beq.n	8012426 <_dtoa_r+0x7ce>
 801241c:	4659      	mov	r1, fp
 801241e:	4620      	mov	r0, r4
 8012420:	f000 ffa8 	bl	8013374 <__pow5mult>
 8012424:	4683      	mov	fp, r0
 8012426:	2101      	movs	r1, #1
 8012428:	4620      	mov	r0, r4
 801242a:	f000 fee7 	bl	80131fc <__i2b>
 801242e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012430:	2b00      	cmp	r3, #0
 8012432:	4606      	mov	r6, r0
 8012434:	dd7c      	ble.n	8012530 <_dtoa_r+0x8d8>
 8012436:	461a      	mov	r2, r3
 8012438:	4601      	mov	r1, r0
 801243a:	4620      	mov	r0, r4
 801243c:	f000 ff9a 	bl	8013374 <__pow5mult>
 8012440:	9b05      	ldr	r3, [sp, #20]
 8012442:	2b01      	cmp	r3, #1
 8012444:	4606      	mov	r6, r0
 8012446:	dd76      	ble.n	8012536 <_dtoa_r+0x8de>
 8012448:	2300      	movs	r3, #0
 801244a:	9306      	str	r3, [sp, #24]
 801244c:	6933      	ldr	r3, [r6, #16]
 801244e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012452:	6918      	ldr	r0, [r3, #16]
 8012454:	f000 fe82 	bl	801315c <__hi0bits>
 8012458:	f1c0 0020 	rsb	r0, r0, #32
 801245c:	9b04      	ldr	r3, [sp, #16]
 801245e:	4418      	add	r0, r3
 8012460:	f010 001f 	ands.w	r0, r0, #31
 8012464:	f000 8086 	beq.w	8012574 <_dtoa_r+0x91c>
 8012468:	f1c0 0320 	rsb	r3, r0, #32
 801246c:	2b04      	cmp	r3, #4
 801246e:	dd7f      	ble.n	8012570 <_dtoa_r+0x918>
 8012470:	f1c0 001c 	rsb	r0, r0, #28
 8012474:	9b04      	ldr	r3, [sp, #16]
 8012476:	4403      	add	r3, r0
 8012478:	4480      	add	r8, r0
 801247a:	4405      	add	r5, r0
 801247c:	9304      	str	r3, [sp, #16]
 801247e:	f1b8 0f00 	cmp.w	r8, #0
 8012482:	dd05      	ble.n	8012490 <_dtoa_r+0x838>
 8012484:	4659      	mov	r1, fp
 8012486:	4642      	mov	r2, r8
 8012488:	4620      	mov	r0, r4
 801248a:	f000 ffcd 	bl	8013428 <__lshift>
 801248e:	4683      	mov	fp, r0
 8012490:	9b04      	ldr	r3, [sp, #16]
 8012492:	2b00      	cmp	r3, #0
 8012494:	dd05      	ble.n	80124a2 <_dtoa_r+0x84a>
 8012496:	4631      	mov	r1, r6
 8012498:	461a      	mov	r2, r3
 801249a:	4620      	mov	r0, r4
 801249c:	f000 ffc4 	bl	8013428 <__lshift>
 80124a0:	4606      	mov	r6, r0
 80124a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d069      	beq.n	801257c <_dtoa_r+0x924>
 80124a8:	4631      	mov	r1, r6
 80124aa:	4658      	mov	r0, fp
 80124ac:	f001 f828 	bl	8013500 <__mcmp>
 80124b0:	2800      	cmp	r0, #0
 80124b2:	da63      	bge.n	801257c <_dtoa_r+0x924>
 80124b4:	2300      	movs	r3, #0
 80124b6:	4659      	mov	r1, fp
 80124b8:	220a      	movs	r2, #10
 80124ba:	4620      	mov	r0, r4
 80124bc:	f000 fdba 	bl	8013034 <__multadd>
 80124c0:	9b08      	ldr	r3, [sp, #32]
 80124c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80124c6:	4683      	mov	fp, r0
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	f000 818f 	beq.w	80127ec <_dtoa_r+0xb94>
 80124ce:	4639      	mov	r1, r7
 80124d0:	2300      	movs	r3, #0
 80124d2:	220a      	movs	r2, #10
 80124d4:	4620      	mov	r0, r4
 80124d6:	f000 fdad 	bl	8013034 <__multadd>
 80124da:	f1b9 0f00 	cmp.w	r9, #0
 80124de:	4607      	mov	r7, r0
 80124e0:	f300 808e 	bgt.w	8012600 <_dtoa_r+0x9a8>
 80124e4:	9b05      	ldr	r3, [sp, #20]
 80124e6:	2b02      	cmp	r3, #2
 80124e8:	dc50      	bgt.n	801258c <_dtoa_r+0x934>
 80124ea:	e089      	b.n	8012600 <_dtoa_r+0x9a8>
 80124ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80124ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80124f2:	e75d      	b.n	80123b0 <_dtoa_r+0x758>
 80124f4:	9b01      	ldr	r3, [sp, #4]
 80124f6:	1e5e      	subs	r6, r3, #1
 80124f8:	9b06      	ldr	r3, [sp, #24]
 80124fa:	42b3      	cmp	r3, r6
 80124fc:	bfbf      	itttt	lt
 80124fe:	9b06      	ldrlt	r3, [sp, #24]
 8012500:	9606      	strlt	r6, [sp, #24]
 8012502:	1af2      	sublt	r2, r6, r3
 8012504:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012506:	bfb6      	itet	lt
 8012508:	189b      	addlt	r3, r3, r2
 801250a:	1b9e      	subge	r6, r3, r6
 801250c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801250e:	9b01      	ldr	r3, [sp, #4]
 8012510:	bfb8      	it	lt
 8012512:	2600      	movlt	r6, #0
 8012514:	2b00      	cmp	r3, #0
 8012516:	bfb5      	itete	lt
 8012518:	eba8 0503 	sublt.w	r5, r8, r3
 801251c:	9b01      	ldrge	r3, [sp, #4]
 801251e:	2300      	movlt	r3, #0
 8012520:	4645      	movge	r5, r8
 8012522:	e747      	b.n	80123b4 <_dtoa_r+0x75c>
 8012524:	9e06      	ldr	r6, [sp, #24]
 8012526:	9f08      	ldr	r7, [sp, #32]
 8012528:	4645      	mov	r5, r8
 801252a:	e74c      	b.n	80123c6 <_dtoa_r+0x76e>
 801252c:	9a06      	ldr	r2, [sp, #24]
 801252e:	e775      	b.n	801241c <_dtoa_r+0x7c4>
 8012530:	9b05      	ldr	r3, [sp, #20]
 8012532:	2b01      	cmp	r3, #1
 8012534:	dc18      	bgt.n	8012568 <_dtoa_r+0x910>
 8012536:	9b02      	ldr	r3, [sp, #8]
 8012538:	b9b3      	cbnz	r3, 8012568 <_dtoa_r+0x910>
 801253a:	9b03      	ldr	r3, [sp, #12]
 801253c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012540:	b9a3      	cbnz	r3, 801256c <_dtoa_r+0x914>
 8012542:	9b03      	ldr	r3, [sp, #12]
 8012544:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012548:	0d1b      	lsrs	r3, r3, #20
 801254a:	051b      	lsls	r3, r3, #20
 801254c:	b12b      	cbz	r3, 801255a <_dtoa_r+0x902>
 801254e:	9b04      	ldr	r3, [sp, #16]
 8012550:	3301      	adds	r3, #1
 8012552:	9304      	str	r3, [sp, #16]
 8012554:	f108 0801 	add.w	r8, r8, #1
 8012558:	2301      	movs	r3, #1
 801255a:	9306      	str	r3, [sp, #24]
 801255c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801255e:	2b00      	cmp	r3, #0
 8012560:	f47f af74 	bne.w	801244c <_dtoa_r+0x7f4>
 8012564:	2001      	movs	r0, #1
 8012566:	e779      	b.n	801245c <_dtoa_r+0x804>
 8012568:	2300      	movs	r3, #0
 801256a:	e7f6      	b.n	801255a <_dtoa_r+0x902>
 801256c:	9b02      	ldr	r3, [sp, #8]
 801256e:	e7f4      	b.n	801255a <_dtoa_r+0x902>
 8012570:	d085      	beq.n	801247e <_dtoa_r+0x826>
 8012572:	4618      	mov	r0, r3
 8012574:	301c      	adds	r0, #28
 8012576:	e77d      	b.n	8012474 <_dtoa_r+0x81c>
 8012578:	40240000 	.word	0x40240000
 801257c:	9b01      	ldr	r3, [sp, #4]
 801257e:	2b00      	cmp	r3, #0
 8012580:	dc38      	bgt.n	80125f4 <_dtoa_r+0x99c>
 8012582:	9b05      	ldr	r3, [sp, #20]
 8012584:	2b02      	cmp	r3, #2
 8012586:	dd35      	ble.n	80125f4 <_dtoa_r+0x99c>
 8012588:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801258c:	f1b9 0f00 	cmp.w	r9, #0
 8012590:	d10d      	bne.n	80125ae <_dtoa_r+0x956>
 8012592:	4631      	mov	r1, r6
 8012594:	464b      	mov	r3, r9
 8012596:	2205      	movs	r2, #5
 8012598:	4620      	mov	r0, r4
 801259a:	f000 fd4b 	bl	8013034 <__multadd>
 801259e:	4601      	mov	r1, r0
 80125a0:	4606      	mov	r6, r0
 80125a2:	4658      	mov	r0, fp
 80125a4:	f000 ffac 	bl	8013500 <__mcmp>
 80125a8:	2800      	cmp	r0, #0
 80125aa:	f73f adbd 	bgt.w	8012128 <_dtoa_r+0x4d0>
 80125ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125b0:	9d00      	ldr	r5, [sp, #0]
 80125b2:	ea6f 0a03 	mvn.w	sl, r3
 80125b6:	f04f 0800 	mov.w	r8, #0
 80125ba:	4631      	mov	r1, r6
 80125bc:	4620      	mov	r0, r4
 80125be:	f000 fd17 	bl	8012ff0 <_Bfree>
 80125c2:	2f00      	cmp	r7, #0
 80125c4:	f43f aeb4 	beq.w	8012330 <_dtoa_r+0x6d8>
 80125c8:	f1b8 0f00 	cmp.w	r8, #0
 80125cc:	d005      	beq.n	80125da <_dtoa_r+0x982>
 80125ce:	45b8      	cmp	r8, r7
 80125d0:	d003      	beq.n	80125da <_dtoa_r+0x982>
 80125d2:	4641      	mov	r1, r8
 80125d4:	4620      	mov	r0, r4
 80125d6:	f000 fd0b 	bl	8012ff0 <_Bfree>
 80125da:	4639      	mov	r1, r7
 80125dc:	4620      	mov	r0, r4
 80125de:	f000 fd07 	bl	8012ff0 <_Bfree>
 80125e2:	e6a5      	b.n	8012330 <_dtoa_r+0x6d8>
 80125e4:	2600      	movs	r6, #0
 80125e6:	4637      	mov	r7, r6
 80125e8:	e7e1      	b.n	80125ae <_dtoa_r+0x956>
 80125ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80125ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80125f0:	4637      	mov	r7, r6
 80125f2:	e599      	b.n	8012128 <_dtoa_r+0x4d0>
 80125f4:	9b08      	ldr	r3, [sp, #32]
 80125f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	f000 80fd 	beq.w	80127fa <_dtoa_r+0xba2>
 8012600:	2d00      	cmp	r5, #0
 8012602:	dd05      	ble.n	8012610 <_dtoa_r+0x9b8>
 8012604:	4639      	mov	r1, r7
 8012606:	462a      	mov	r2, r5
 8012608:	4620      	mov	r0, r4
 801260a:	f000 ff0d 	bl	8013428 <__lshift>
 801260e:	4607      	mov	r7, r0
 8012610:	9b06      	ldr	r3, [sp, #24]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d05c      	beq.n	80126d0 <_dtoa_r+0xa78>
 8012616:	6879      	ldr	r1, [r7, #4]
 8012618:	4620      	mov	r0, r4
 801261a:	f000 fca9 	bl	8012f70 <_Balloc>
 801261e:	4605      	mov	r5, r0
 8012620:	b928      	cbnz	r0, 801262e <_dtoa_r+0x9d6>
 8012622:	4b80      	ldr	r3, [pc, #512]	; (8012824 <_dtoa_r+0xbcc>)
 8012624:	4602      	mov	r2, r0
 8012626:	f240 21ea 	movw	r1, #746	; 0x2ea
 801262a:	f7ff bb2e 	b.w	8011c8a <_dtoa_r+0x32>
 801262e:	693a      	ldr	r2, [r7, #16]
 8012630:	3202      	adds	r2, #2
 8012632:	0092      	lsls	r2, r2, #2
 8012634:	f107 010c 	add.w	r1, r7, #12
 8012638:	300c      	adds	r0, #12
 801263a:	f7fd fe55 	bl	80102e8 <memcpy>
 801263e:	2201      	movs	r2, #1
 8012640:	4629      	mov	r1, r5
 8012642:	4620      	mov	r0, r4
 8012644:	f000 fef0 	bl	8013428 <__lshift>
 8012648:	9b00      	ldr	r3, [sp, #0]
 801264a:	3301      	adds	r3, #1
 801264c:	9301      	str	r3, [sp, #4]
 801264e:	9b00      	ldr	r3, [sp, #0]
 8012650:	444b      	add	r3, r9
 8012652:	9307      	str	r3, [sp, #28]
 8012654:	9b02      	ldr	r3, [sp, #8]
 8012656:	f003 0301 	and.w	r3, r3, #1
 801265a:	46b8      	mov	r8, r7
 801265c:	9306      	str	r3, [sp, #24]
 801265e:	4607      	mov	r7, r0
 8012660:	9b01      	ldr	r3, [sp, #4]
 8012662:	4631      	mov	r1, r6
 8012664:	3b01      	subs	r3, #1
 8012666:	4658      	mov	r0, fp
 8012668:	9302      	str	r3, [sp, #8]
 801266a:	f7ff fa67 	bl	8011b3c <quorem>
 801266e:	4603      	mov	r3, r0
 8012670:	3330      	adds	r3, #48	; 0x30
 8012672:	9004      	str	r0, [sp, #16]
 8012674:	4641      	mov	r1, r8
 8012676:	4658      	mov	r0, fp
 8012678:	9308      	str	r3, [sp, #32]
 801267a:	f000 ff41 	bl	8013500 <__mcmp>
 801267e:	463a      	mov	r2, r7
 8012680:	4681      	mov	r9, r0
 8012682:	4631      	mov	r1, r6
 8012684:	4620      	mov	r0, r4
 8012686:	f000 ff57 	bl	8013538 <__mdiff>
 801268a:	68c2      	ldr	r2, [r0, #12]
 801268c:	9b08      	ldr	r3, [sp, #32]
 801268e:	4605      	mov	r5, r0
 8012690:	bb02      	cbnz	r2, 80126d4 <_dtoa_r+0xa7c>
 8012692:	4601      	mov	r1, r0
 8012694:	4658      	mov	r0, fp
 8012696:	f000 ff33 	bl	8013500 <__mcmp>
 801269a:	9b08      	ldr	r3, [sp, #32]
 801269c:	4602      	mov	r2, r0
 801269e:	4629      	mov	r1, r5
 80126a0:	4620      	mov	r0, r4
 80126a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80126a6:	f000 fca3 	bl	8012ff0 <_Bfree>
 80126aa:	9b05      	ldr	r3, [sp, #20]
 80126ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126ae:	9d01      	ldr	r5, [sp, #4]
 80126b0:	ea43 0102 	orr.w	r1, r3, r2
 80126b4:	9b06      	ldr	r3, [sp, #24]
 80126b6:	430b      	orrs	r3, r1
 80126b8:	9b08      	ldr	r3, [sp, #32]
 80126ba:	d10d      	bne.n	80126d8 <_dtoa_r+0xa80>
 80126bc:	2b39      	cmp	r3, #57	; 0x39
 80126be:	d029      	beq.n	8012714 <_dtoa_r+0xabc>
 80126c0:	f1b9 0f00 	cmp.w	r9, #0
 80126c4:	dd01      	ble.n	80126ca <_dtoa_r+0xa72>
 80126c6:	9b04      	ldr	r3, [sp, #16]
 80126c8:	3331      	adds	r3, #49	; 0x31
 80126ca:	9a02      	ldr	r2, [sp, #8]
 80126cc:	7013      	strb	r3, [r2, #0]
 80126ce:	e774      	b.n	80125ba <_dtoa_r+0x962>
 80126d0:	4638      	mov	r0, r7
 80126d2:	e7b9      	b.n	8012648 <_dtoa_r+0x9f0>
 80126d4:	2201      	movs	r2, #1
 80126d6:	e7e2      	b.n	801269e <_dtoa_r+0xa46>
 80126d8:	f1b9 0f00 	cmp.w	r9, #0
 80126dc:	db06      	blt.n	80126ec <_dtoa_r+0xa94>
 80126de:	9905      	ldr	r1, [sp, #20]
 80126e0:	ea41 0909 	orr.w	r9, r1, r9
 80126e4:	9906      	ldr	r1, [sp, #24]
 80126e6:	ea59 0101 	orrs.w	r1, r9, r1
 80126ea:	d120      	bne.n	801272e <_dtoa_r+0xad6>
 80126ec:	2a00      	cmp	r2, #0
 80126ee:	ddec      	ble.n	80126ca <_dtoa_r+0xa72>
 80126f0:	4659      	mov	r1, fp
 80126f2:	2201      	movs	r2, #1
 80126f4:	4620      	mov	r0, r4
 80126f6:	9301      	str	r3, [sp, #4]
 80126f8:	f000 fe96 	bl	8013428 <__lshift>
 80126fc:	4631      	mov	r1, r6
 80126fe:	4683      	mov	fp, r0
 8012700:	f000 fefe 	bl	8013500 <__mcmp>
 8012704:	2800      	cmp	r0, #0
 8012706:	9b01      	ldr	r3, [sp, #4]
 8012708:	dc02      	bgt.n	8012710 <_dtoa_r+0xab8>
 801270a:	d1de      	bne.n	80126ca <_dtoa_r+0xa72>
 801270c:	07da      	lsls	r2, r3, #31
 801270e:	d5dc      	bpl.n	80126ca <_dtoa_r+0xa72>
 8012710:	2b39      	cmp	r3, #57	; 0x39
 8012712:	d1d8      	bne.n	80126c6 <_dtoa_r+0xa6e>
 8012714:	9a02      	ldr	r2, [sp, #8]
 8012716:	2339      	movs	r3, #57	; 0x39
 8012718:	7013      	strb	r3, [r2, #0]
 801271a:	462b      	mov	r3, r5
 801271c:	461d      	mov	r5, r3
 801271e:	3b01      	subs	r3, #1
 8012720:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012724:	2a39      	cmp	r2, #57	; 0x39
 8012726:	d050      	beq.n	80127ca <_dtoa_r+0xb72>
 8012728:	3201      	adds	r2, #1
 801272a:	701a      	strb	r2, [r3, #0]
 801272c:	e745      	b.n	80125ba <_dtoa_r+0x962>
 801272e:	2a00      	cmp	r2, #0
 8012730:	dd03      	ble.n	801273a <_dtoa_r+0xae2>
 8012732:	2b39      	cmp	r3, #57	; 0x39
 8012734:	d0ee      	beq.n	8012714 <_dtoa_r+0xabc>
 8012736:	3301      	adds	r3, #1
 8012738:	e7c7      	b.n	80126ca <_dtoa_r+0xa72>
 801273a:	9a01      	ldr	r2, [sp, #4]
 801273c:	9907      	ldr	r1, [sp, #28]
 801273e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012742:	428a      	cmp	r2, r1
 8012744:	d02a      	beq.n	801279c <_dtoa_r+0xb44>
 8012746:	4659      	mov	r1, fp
 8012748:	2300      	movs	r3, #0
 801274a:	220a      	movs	r2, #10
 801274c:	4620      	mov	r0, r4
 801274e:	f000 fc71 	bl	8013034 <__multadd>
 8012752:	45b8      	cmp	r8, r7
 8012754:	4683      	mov	fp, r0
 8012756:	f04f 0300 	mov.w	r3, #0
 801275a:	f04f 020a 	mov.w	r2, #10
 801275e:	4641      	mov	r1, r8
 8012760:	4620      	mov	r0, r4
 8012762:	d107      	bne.n	8012774 <_dtoa_r+0xb1c>
 8012764:	f000 fc66 	bl	8013034 <__multadd>
 8012768:	4680      	mov	r8, r0
 801276a:	4607      	mov	r7, r0
 801276c:	9b01      	ldr	r3, [sp, #4]
 801276e:	3301      	adds	r3, #1
 8012770:	9301      	str	r3, [sp, #4]
 8012772:	e775      	b.n	8012660 <_dtoa_r+0xa08>
 8012774:	f000 fc5e 	bl	8013034 <__multadd>
 8012778:	4639      	mov	r1, r7
 801277a:	4680      	mov	r8, r0
 801277c:	2300      	movs	r3, #0
 801277e:	220a      	movs	r2, #10
 8012780:	4620      	mov	r0, r4
 8012782:	f000 fc57 	bl	8013034 <__multadd>
 8012786:	4607      	mov	r7, r0
 8012788:	e7f0      	b.n	801276c <_dtoa_r+0xb14>
 801278a:	f1b9 0f00 	cmp.w	r9, #0
 801278e:	9a00      	ldr	r2, [sp, #0]
 8012790:	bfcc      	ite	gt
 8012792:	464d      	movgt	r5, r9
 8012794:	2501      	movle	r5, #1
 8012796:	4415      	add	r5, r2
 8012798:	f04f 0800 	mov.w	r8, #0
 801279c:	4659      	mov	r1, fp
 801279e:	2201      	movs	r2, #1
 80127a0:	4620      	mov	r0, r4
 80127a2:	9301      	str	r3, [sp, #4]
 80127a4:	f000 fe40 	bl	8013428 <__lshift>
 80127a8:	4631      	mov	r1, r6
 80127aa:	4683      	mov	fp, r0
 80127ac:	f000 fea8 	bl	8013500 <__mcmp>
 80127b0:	2800      	cmp	r0, #0
 80127b2:	dcb2      	bgt.n	801271a <_dtoa_r+0xac2>
 80127b4:	d102      	bne.n	80127bc <_dtoa_r+0xb64>
 80127b6:	9b01      	ldr	r3, [sp, #4]
 80127b8:	07db      	lsls	r3, r3, #31
 80127ba:	d4ae      	bmi.n	801271a <_dtoa_r+0xac2>
 80127bc:	462b      	mov	r3, r5
 80127be:	461d      	mov	r5, r3
 80127c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80127c4:	2a30      	cmp	r2, #48	; 0x30
 80127c6:	d0fa      	beq.n	80127be <_dtoa_r+0xb66>
 80127c8:	e6f7      	b.n	80125ba <_dtoa_r+0x962>
 80127ca:	9a00      	ldr	r2, [sp, #0]
 80127cc:	429a      	cmp	r2, r3
 80127ce:	d1a5      	bne.n	801271c <_dtoa_r+0xac4>
 80127d0:	f10a 0a01 	add.w	sl, sl, #1
 80127d4:	2331      	movs	r3, #49	; 0x31
 80127d6:	e779      	b.n	80126cc <_dtoa_r+0xa74>
 80127d8:	4b13      	ldr	r3, [pc, #76]	; (8012828 <_dtoa_r+0xbd0>)
 80127da:	f7ff baaf 	b.w	8011d3c <_dtoa_r+0xe4>
 80127de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	f47f aa86 	bne.w	8011cf2 <_dtoa_r+0x9a>
 80127e6:	4b11      	ldr	r3, [pc, #68]	; (801282c <_dtoa_r+0xbd4>)
 80127e8:	f7ff baa8 	b.w	8011d3c <_dtoa_r+0xe4>
 80127ec:	f1b9 0f00 	cmp.w	r9, #0
 80127f0:	dc03      	bgt.n	80127fa <_dtoa_r+0xba2>
 80127f2:	9b05      	ldr	r3, [sp, #20]
 80127f4:	2b02      	cmp	r3, #2
 80127f6:	f73f aec9 	bgt.w	801258c <_dtoa_r+0x934>
 80127fa:	9d00      	ldr	r5, [sp, #0]
 80127fc:	4631      	mov	r1, r6
 80127fe:	4658      	mov	r0, fp
 8012800:	f7ff f99c 	bl	8011b3c <quorem>
 8012804:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012808:	f805 3b01 	strb.w	r3, [r5], #1
 801280c:	9a00      	ldr	r2, [sp, #0]
 801280e:	1aaa      	subs	r2, r5, r2
 8012810:	4591      	cmp	r9, r2
 8012812:	ddba      	ble.n	801278a <_dtoa_r+0xb32>
 8012814:	4659      	mov	r1, fp
 8012816:	2300      	movs	r3, #0
 8012818:	220a      	movs	r2, #10
 801281a:	4620      	mov	r0, r4
 801281c:	f000 fc0a 	bl	8013034 <__multadd>
 8012820:	4683      	mov	fp, r0
 8012822:	e7eb      	b.n	80127fc <_dtoa_r+0xba4>
 8012824:	08016ad8 	.word	0x08016ad8
 8012828:	08016940 	.word	0x08016940
 801282c:	08016a6c 	.word	0x08016a6c

08012830 <fiprintf>:
 8012830:	b40e      	push	{r1, r2, r3}
 8012832:	b503      	push	{r0, r1, lr}
 8012834:	4601      	mov	r1, r0
 8012836:	ab03      	add	r3, sp, #12
 8012838:	4805      	ldr	r0, [pc, #20]	; (8012850 <fiprintf+0x20>)
 801283a:	f853 2b04 	ldr.w	r2, [r3], #4
 801283e:	6800      	ldr	r0, [r0, #0]
 8012840:	9301      	str	r3, [sp, #4]
 8012842:	f001 fa8f 	bl	8013d64 <_vfiprintf_r>
 8012846:	b002      	add	sp, #8
 8012848:	f85d eb04 	ldr.w	lr, [sp], #4
 801284c:	b003      	add	sp, #12
 801284e:	4770      	bx	lr
 8012850:	2000002c 	.word	0x2000002c

08012854 <rshift>:
 8012854:	6903      	ldr	r3, [r0, #16]
 8012856:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801285a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801285e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012862:	f100 0414 	add.w	r4, r0, #20
 8012866:	dd45      	ble.n	80128f4 <rshift+0xa0>
 8012868:	f011 011f 	ands.w	r1, r1, #31
 801286c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012870:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012874:	d10c      	bne.n	8012890 <rshift+0x3c>
 8012876:	f100 0710 	add.w	r7, r0, #16
 801287a:	4629      	mov	r1, r5
 801287c:	42b1      	cmp	r1, r6
 801287e:	d334      	bcc.n	80128ea <rshift+0x96>
 8012880:	1a9b      	subs	r3, r3, r2
 8012882:	009b      	lsls	r3, r3, #2
 8012884:	1eea      	subs	r2, r5, #3
 8012886:	4296      	cmp	r6, r2
 8012888:	bf38      	it	cc
 801288a:	2300      	movcc	r3, #0
 801288c:	4423      	add	r3, r4
 801288e:	e015      	b.n	80128bc <rshift+0x68>
 8012890:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012894:	f1c1 0820 	rsb	r8, r1, #32
 8012898:	40cf      	lsrs	r7, r1
 801289a:	f105 0e04 	add.w	lr, r5, #4
 801289e:	46a1      	mov	r9, r4
 80128a0:	4576      	cmp	r6, lr
 80128a2:	46f4      	mov	ip, lr
 80128a4:	d815      	bhi.n	80128d2 <rshift+0x7e>
 80128a6:	1a9b      	subs	r3, r3, r2
 80128a8:	009a      	lsls	r2, r3, #2
 80128aa:	3a04      	subs	r2, #4
 80128ac:	3501      	adds	r5, #1
 80128ae:	42ae      	cmp	r6, r5
 80128b0:	bf38      	it	cc
 80128b2:	2200      	movcc	r2, #0
 80128b4:	18a3      	adds	r3, r4, r2
 80128b6:	50a7      	str	r7, [r4, r2]
 80128b8:	b107      	cbz	r7, 80128bc <rshift+0x68>
 80128ba:	3304      	adds	r3, #4
 80128bc:	1b1a      	subs	r2, r3, r4
 80128be:	42a3      	cmp	r3, r4
 80128c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80128c4:	bf08      	it	eq
 80128c6:	2300      	moveq	r3, #0
 80128c8:	6102      	str	r2, [r0, #16]
 80128ca:	bf08      	it	eq
 80128cc:	6143      	streq	r3, [r0, #20]
 80128ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128d2:	f8dc c000 	ldr.w	ip, [ip]
 80128d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80128da:	ea4c 0707 	orr.w	r7, ip, r7
 80128de:	f849 7b04 	str.w	r7, [r9], #4
 80128e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80128e6:	40cf      	lsrs	r7, r1
 80128e8:	e7da      	b.n	80128a0 <rshift+0x4c>
 80128ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80128ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80128f2:	e7c3      	b.n	801287c <rshift+0x28>
 80128f4:	4623      	mov	r3, r4
 80128f6:	e7e1      	b.n	80128bc <rshift+0x68>

080128f8 <__hexdig_fun>:
 80128f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80128fc:	2b09      	cmp	r3, #9
 80128fe:	d802      	bhi.n	8012906 <__hexdig_fun+0xe>
 8012900:	3820      	subs	r0, #32
 8012902:	b2c0      	uxtb	r0, r0
 8012904:	4770      	bx	lr
 8012906:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801290a:	2b05      	cmp	r3, #5
 801290c:	d801      	bhi.n	8012912 <__hexdig_fun+0x1a>
 801290e:	3847      	subs	r0, #71	; 0x47
 8012910:	e7f7      	b.n	8012902 <__hexdig_fun+0xa>
 8012912:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012916:	2b05      	cmp	r3, #5
 8012918:	d801      	bhi.n	801291e <__hexdig_fun+0x26>
 801291a:	3827      	subs	r0, #39	; 0x27
 801291c:	e7f1      	b.n	8012902 <__hexdig_fun+0xa>
 801291e:	2000      	movs	r0, #0
 8012920:	4770      	bx	lr
	...

08012924 <__gethex>:
 8012924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012928:	ed2d 8b02 	vpush	{d8}
 801292c:	b089      	sub	sp, #36	; 0x24
 801292e:	ee08 0a10 	vmov	s16, r0
 8012932:	9304      	str	r3, [sp, #16]
 8012934:	4bbc      	ldr	r3, [pc, #752]	; (8012c28 <__gethex+0x304>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	9301      	str	r3, [sp, #4]
 801293a:	4618      	mov	r0, r3
 801293c:	468b      	mov	fp, r1
 801293e:	4690      	mov	r8, r2
 8012940:	f7ed fc4e 	bl	80001e0 <strlen>
 8012944:	9b01      	ldr	r3, [sp, #4]
 8012946:	f8db 2000 	ldr.w	r2, [fp]
 801294a:	4403      	add	r3, r0
 801294c:	4682      	mov	sl, r0
 801294e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012952:	9305      	str	r3, [sp, #20]
 8012954:	1c93      	adds	r3, r2, #2
 8012956:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801295a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801295e:	32fe      	adds	r2, #254	; 0xfe
 8012960:	18d1      	adds	r1, r2, r3
 8012962:	461f      	mov	r7, r3
 8012964:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012968:	9100      	str	r1, [sp, #0]
 801296a:	2830      	cmp	r0, #48	; 0x30
 801296c:	d0f8      	beq.n	8012960 <__gethex+0x3c>
 801296e:	f7ff ffc3 	bl	80128f8 <__hexdig_fun>
 8012972:	4604      	mov	r4, r0
 8012974:	2800      	cmp	r0, #0
 8012976:	d13a      	bne.n	80129ee <__gethex+0xca>
 8012978:	9901      	ldr	r1, [sp, #4]
 801297a:	4652      	mov	r2, sl
 801297c:	4638      	mov	r0, r7
 801297e:	f001 fb3b 	bl	8013ff8 <strncmp>
 8012982:	4605      	mov	r5, r0
 8012984:	2800      	cmp	r0, #0
 8012986:	d168      	bne.n	8012a5a <__gethex+0x136>
 8012988:	f817 000a 	ldrb.w	r0, [r7, sl]
 801298c:	eb07 060a 	add.w	r6, r7, sl
 8012990:	f7ff ffb2 	bl	80128f8 <__hexdig_fun>
 8012994:	2800      	cmp	r0, #0
 8012996:	d062      	beq.n	8012a5e <__gethex+0x13a>
 8012998:	4633      	mov	r3, r6
 801299a:	7818      	ldrb	r0, [r3, #0]
 801299c:	2830      	cmp	r0, #48	; 0x30
 801299e:	461f      	mov	r7, r3
 80129a0:	f103 0301 	add.w	r3, r3, #1
 80129a4:	d0f9      	beq.n	801299a <__gethex+0x76>
 80129a6:	f7ff ffa7 	bl	80128f8 <__hexdig_fun>
 80129aa:	2301      	movs	r3, #1
 80129ac:	fab0 f480 	clz	r4, r0
 80129b0:	0964      	lsrs	r4, r4, #5
 80129b2:	4635      	mov	r5, r6
 80129b4:	9300      	str	r3, [sp, #0]
 80129b6:	463a      	mov	r2, r7
 80129b8:	4616      	mov	r6, r2
 80129ba:	3201      	adds	r2, #1
 80129bc:	7830      	ldrb	r0, [r6, #0]
 80129be:	f7ff ff9b 	bl	80128f8 <__hexdig_fun>
 80129c2:	2800      	cmp	r0, #0
 80129c4:	d1f8      	bne.n	80129b8 <__gethex+0x94>
 80129c6:	9901      	ldr	r1, [sp, #4]
 80129c8:	4652      	mov	r2, sl
 80129ca:	4630      	mov	r0, r6
 80129cc:	f001 fb14 	bl	8013ff8 <strncmp>
 80129d0:	b980      	cbnz	r0, 80129f4 <__gethex+0xd0>
 80129d2:	b94d      	cbnz	r5, 80129e8 <__gethex+0xc4>
 80129d4:	eb06 050a 	add.w	r5, r6, sl
 80129d8:	462a      	mov	r2, r5
 80129da:	4616      	mov	r6, r2
 80129dc:	3201      	adds	r2, #1
 80129de:	7830      	ldrb	r0, [r6, #0]
 80129e0:	f7ff ff8a 	bl	80128f8 <__hexdig_fun>
 80129e4:	2800      	cmp	r0, #0
 80129e6:	d1f8      	bne.n	80129da <__gethex+0xb6>
 80129e8:	1bad      	subs	r5, r5, r6
 80129ea:	00ad      	lsls	r5, r5, #2
 80129ec:	e004      	b.n	80129f8 <__gethex+0xd4>
 80129ee:	2400      	movs	r4, #0
 80129f0:	4625      	mov	r5, r4
 80129f2:	e7e0      	b.n	80129b6 <__gethex+0x92>
 80129f4:	2d00      	cmp	r5, #0
 80129f6:	d1f7      	bne.n	80129e8 <__gethex+0xc4>
 80129f8:	7833      	ldrb	r3, [r6, #0]
 80129fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80129fe:	2b50      	cmp	r3, #80	; 0x50
 8012a00:	d13b      	bne.n	8012a7a <__gethex+0x156>
 8012a02:	7873      	ldrb	r3, [r6, #1]
 8012a04:	2b2b      	cmp	r3, #43	; 0x2b
 8012a06:	d02c      	beq.n	8012a62 <__gethex+0x13e>
 8012a08:	2b2d      	cmp	r3, #45	; 0x2d
 8012a0a:	d02e      	beq.n	8012a6a <__gethex+0x146>
 8012a0c:	1c71      	adds	r1, r6, #1
 8012a0e:	f04f 0900 	mov.w	r9, #0
 8012a12:	7808      	ldrb	r0, [r1, #0]
 8012a14:	f7ff ff70 	bl	80128f8 <__hexdig_fun>
 8012a18:	1e43      	subs	r3, r0, #1
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	2b18      	cmp	r3, #24
 8012a1e:	d82c      	bhi.n	8012a7a <__gethex+0x156>
 8012a20:	f1a0 0210 	sub.w	r2, r0, #16
 8012a24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012a28:	f7ff ff66 	bl	80128f8 <__hexdig_fun>
 8012a2c:	1e43      	subs	r3, r0, #1
 8012a2e:	b2db      	uxtb	r3, r3
 8012a30:	2b18      	cmp	r3, #24
 8012a32:	d91d      	bls.n	8012a70 <__gethex+0x14c>
 8012a34:	f1b9 0f00 	cmp.w	r9, #0
 8012a38:	d000      	beq.n	8012a3c <__gethex+0x118>
 8012a3a:	4252      	negs	r2, r2
 8012a3c:	4415      	add	r5, r2
 8012a3e:	f8cb 1000 	str.w	r1, [fp]
 8012a42:	b1e4      	cbz	r4, 8012a7e <__gethex+0x15a>
 8012a44:	9b00      	ldr	r3, [sp, #0]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	bf14      	ite	ne
 8012a4a:	2700      	movne	r7, #0
 8012a4c:	2706      	moveq	r7, #6
 8012a4e:	4638      	mov	r0, r7
 8012a50:	b009      	add	sp, #36	; 0x24
 8012a52:	ecbd 8b02 	vpop	{d8}
 8012a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a5a:	463e      	mov	r6, r7
 8012a5c:	4625      	mov	r5, r4
 8012a5e:	2401      	movs	r4, #1
 8012a60:	e7ca      	b.n	80129f8 <__gethex+0xd4>
 8012a62:	f04f 0900 	mov.w	r9, #0
 8012a66:	1cb1      	adds	r1, r6, #2
 8012a68:	e7d3      	b.n	8012a12 <__gethex+0xee>
 8012a6a:	f04f 0901 	mov.w	r9, #1
 8012a6e:	e7fa      	b.n	8012a66 <__gethex+0x142>
 8012a70:	230a      	movs	r3, #10
 8012a72:	fb03 0202 	mla	r2, r3, r2, r0
 8012a76:	3a10      	subs	r2, #16
 8012a78:	e7d4      	b.n	8012a24 <__gethex+0x100>
 8012a7a:	4631      	mov	r1, r6
 8012a7c:	e7df      	b.n	8012a3e <__gethex+0x11a>
 8012a7e:	1bf3      	subs	r3, r6, r7
 8012a80:	3b01      	subs	r3, #1
 8012a82:	4621      	mov	r1, r4
 8012a84:	2b07      	cmp	r3, #7
 8012a86:	dc0b      	bgt.n	8012aa0 <__gethex+0x17c>
 8012a88:	ee18 0a10 	vmov	r0, s16
 8012a8c:	f000 fa70 	bl	8012f70 <_Balloc>
 8012a90:	4604      	mov	r4, r0
 8012a92:	b940      	cbnz	r0, 8012aa6 <__gethex+0x182>
 8012a94:	4b65      	ldr	r3, [pc, #404]	; (8012c2c <__gethex+0x308>)
 8012a96:	4602      	mov	r2, r0
 8012a98:	21de      	movs	r1, #222	; 0xde
 8012a9a:	4865      	ldr	r0, [pc, #404]	; (8012c30 <__gethex+0x30c>)
 8012a9c:	f7ff f830 	bl	8011b00 <__assert_func>
 8012aa0:	3101      	adds	r1, #1
 8012aa2:	105b      	asrs	r3, r3, #1
 8012aa4:	e7ee      	b.n	8012a84 <__gethex+0x160>
 8012aa6:	f100 0914 	add.w	r9, r0, #20
 8012aaa:	f04f 0b00 	mov.w	fp, #0
 8012aae:	f1ca 0301 	rsb	r3, sl, #1
 8012ab2:	f8cd 9008 	str.w	r9, [sp, #8]
 8012ab6:	f8cd b000 	str.w	fp, [sp]
 8012aba:	9306      	str	r3, [sp, #24]
 8012abc:	42b7      	cmp	r7, r6
 8012abe:	d340      	bcc.n	8012b42 <__gethex+0x21e>
 8012ac0:	9802      	ldr	r0, [sp, #8]
 8012ac2:	9b00      	ldr	r3, [sp, #0]
 8012ac4:	f840 3b04 	str.w	r3, [r0], #4
 8012ac8:	eba0 0009 	sub.w	r0, r0, r9
 8012acc:	1080      	asrs	r0, r0, #2
 8012ace:	0146      	lsls	r6, r0, #5
 8012ad0:	6120      	str	r0, [r4, #16]
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f000 fb42 	bl	801315c <__hi0bits>
 8012ad8:	1a30      	subs	r0, r6, r0
 8012ada:	f8d8 6000 	ldr.w	r6, [r8]
 8012ade:	42b0      	cmp	r0, r6
 8012ae0:	dd63      	ble.n	8012baa <__gethex+0x286>
 8012ae2:	1b87      	subs	r7, r0, r6
 8012ae4:	4639      	mov	r1, r7
 8012ae6:	4620      	mov	r0, r4
 8012ae8:	f000 fedc 	bl	80138a4 <__any_on>
 8012aec:	4682      	mov	sl, r0
 8012aee:	b1a8      	cbz	r0, 8012b1c <__gethex+0x1f8>
 8012af0:	1e7b      	subs	r3, r7, #1
 8012af2:	1159      	asrs	r1, r3, #5
 8012af4:	f003 021f 	and.w	r2, r3, #31
 8012af8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012afc:	f04f 0a01 	mov.w	sl, #1
 8012b00:	fa0a f202 	lsl.w	r2, sl, r2
 8012b04:	420a      	tst	r2, r1
 8012b06:	d009      	beq.n	8012b1c <__gethex+0x1f8>
 8012b08:	4553      	cmp	r3, sl
 8012b0a:	dd05      	ble.n	8012b18 <__gethex+0x1f4>
 8012b0c:	1eb9      	subs	r1, r7, #2
 8012b0e:	4620      	mov	r0, r4
 8012b10:	f000 fec8 	bl	80138a4 <__any_on>
 8012b14:	2800      	cmp	r0, #0
 8012b16:	d145      	bne.n	8012ba4 <__gethex+0x280>
 8012b18:	f04f 0a02 	mov.w	sl, #2
 8012b1c:	4639      	mov	r1, r7
 8012b1e:	4620      	mov	r0, r4
 8012b20:	f7ff fe98 	bl	8012854 <rshift>
 8012b24:	443d      	add	r5, r7
 8012b26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012b2a:	42ab      	cmp	r3, r5
 8012b2c:	da4c      	bge.n	8012bc8 <__gethex+0x2a4>
 8012b2e:	ee18 0a10 	vmov	r0, s16
 8012b32:	4621      	mov	r1, r4
 8012b34:	f000 fa5c 	bl	8012ff0 <_Bfree>
 8012b38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	6013      	str	r3, [r2, #0]
 8012b3e:	27a3      	movs	r7, #163	; 0xa3
 8012b40:	e785      	b.n	8012a4e <__gethex+0x12a>
 8012b42:	1e73      	subs	r3, r6, #1
 8012b44:	9a05      	ldr	r2, [sp, #20]
 8012b46:	9303      	str	r3, [sp, #12]
 8012b48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012b4c:	4293      	cmp	r3, r2
 8012b4e:	d019      	beq.n	8012b84 <__gethex+0x260>
 8012b50:	f1bb 0f20 	cmp.w	fp, #32
 8012b54:	d107      	bne.n	8012b66 <__gethex+0x242>
 8012b56:	9b02      	ldr	r3, [sp, #8]
 8012b58:	9a00      	ldr	r2, [sp, #0]
 8012b5a:	f843 2b04 	str.w	r2, [r3], #4
 8012b5e:	9302      	str	r3, [sp, #8]
 8012b60:	2300      	movs	r3, #0
 8012b62:	9300      	str	r3, [sp, #0]
 8012b64:	469b      	mov	fp, r3
 8012b66:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012b6a:	f7ff fec5 	bl	80128f8 <__hexdig_fun>
 8012b6e:	9b00      	ldr	r3, [sp, #0]
 8012b70:	f000 000f 	and.w	r0, r0, #15
 8012b74:	fa00 f00b 	lsl.w	r0, r0, fp
 8012b78:	4303      	orrs	r3, r0
 8012b7a:	9300      	str	r3, [sp, #0]
 8012b7c:	f10b 0b04 	add.w	fp, fp, #4
 8012b80:	9b03      	ldr	r3, [sp, #12]
 8012b82:	e00d      	b.n	8012ba0 <__gethex+0x27c>
 8012b84:	9b03      	ldr	r3, [sp, #12]
 8012b86:	9a06      	ldr	r2, [sp, #24]
 8012b88:	4413      	add	r3, r2
 8012b8a:	42bb      	cmp	r3, r7
 8012b8c:	d3e0      	bcc.n	8012b50 <__gethex+0x22c>
 8012b8e:	4618      	mov	r0, r3
 8012b90:	9901      	ldr	r1, [sp, #4]
 8012b92:	9307      	str	r3, [sp, #28]
 8012b94:	4652      	mov	r2, sl
 8012b96:	f001 fa2f 	bl	8013ff8 <strncmp>
 8012b9a:	9b07      	ldr	r3, [sp, #28]
 8012b9c:	2800      	cmp	r0, #0
 8012b9e:	d1d7      	bne.n	8012b50 <__gethex+0x22c>
 8012ba0:	461e      	mov	r6, r3
 8012ba2:	e78b      	b.n	8012abc <__gethex+0x198>
 8012ba4:	f04f 0a03 	mov.w	sl, #3
 8012ba8:	e7b8      	b.n	8012b1c <__gethex+0x1f8>
 8012baa:	da0a      	bge.n	8012bc2 <__gethex+0x29e>
 8012bac:	1a37      	subs	r7, r6, r0
 8012bae:	4621      	mov	r1, r4
 8012bb0:	ee18 0a10 	vmov	r0, s16
 8012bb4:	463a      	mov	r2, r7
 8012bb6:	f000 fc37 	bl	8013428 <__lshift>
 8012bba:	1bed      	subs	r5, r5, r7
 8012bbc:	4604      	mov	r4, r0
 8012bbe:	f100 0914 	add.w	r9, r0, #20
 8012bc2:	f04f 0a00 	mov.w	sl, #0
 8012bc6:	e7ae      	b.n	8012b26 <__gethex+0x202>
 8012bc8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012bcc:	42a8      	cmp	r0, r5
 8012bce:	dd72      	ble.n	8012cb6 <__gethex+0x392>
 8012bd0:	1b45      	subs	r5, r0, r5
 8012bd2:	42ae      	cmp	r6, r5
 8012bd4:	dc36      	bgt.n	8012c44 <__gethex+0x320>
 8012bd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012bda:	2b02      	cmp	r3, #2
 8012bdc:	d02a      	beq.n	8012c34 <__gethex+0x310>
 8012bde:	2b03      	cmp	r3, #3
 8012be0:	d02c      	beq.n	8012c3c <__gethex+0x318>
 8012be2:	2b01      	cmp	r3, #1
 8012be4:	d115      	bne.n	8012c12 <__gethex+0x2ee>
 8012be6:	42ae      	cmp	r6, r5
 8012be8:	d113      	bne.n	8012c12 <__gethex+0x2ee>
 8012bea:	2e01      	cmp	r6, #1
 8012bec:	d10b      	bne.n	8012c06 <__gethex+0x2e2>
 8012bee:	9a04      	ldr	r2, [sp, #16]
 8012bf0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012bf4:	6013      	str	r3, [r2, #0]
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	6123      	str	r3, [r4, #16]
 8012bfa:	f8c9 3000 	str.w	r3, [r9]
 8012bfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012c00:	2762      	movs	r7, #98	; 0x62
 8012c02:	601c      	str	r4, [r3, #0]
 8012c04:	e723      	b.n	8012a4e <__gethex+0x12a>
 8012c06:	1e71      	subs	r1, r6, #1
 8012c08:	4620      	mov	r0, r4
 8012c0a:	f000 fe4b 	bl	80138a4 <__any_on>
 8012c0e:	2800      	cmp	r0, #0
 8012c10:	d1ed      	bne.n	8012bee <__gethex+0x2ca>
 8012c12:	ee18 0a10 	vmov	r0, s16
 8012c16:	4621      	mov	r1, r4
 8012c18:	f000 f9ea 	bl	8012ff0 <_Bfree>
 8012c1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012c1e:	2300      	movs	r3, #0
 8012c20:	6013      	str	r3, [r2, #0]
 8012c22:	2750      	movs	r7, #80	; 0x50
 8012c24:	e713      	b.n	8012a4e <__gethex+0x12a>
 8012c26:	bf00      	nop
 8012c28:	08016b54 	.word	0x08016b54
 8012c2c:	08016ad8 	.word	0x08016ad8
 8012c30:	08016ae9 	.word	0x08016ae9
 8012c34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d1eb      	bne.n	8012c12 <__gethex+0x2ee>
 8012c3a:	e7d8      	b.n	8012bee <__gethex+0x2ca>
 8012c3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d1d5      	bne.n	8012bee <__gethex+0x2ca>
 8012c42:	e7e6      	b.n	8012c12 <__gethex+0x2ee>
 8012c44:	1e6f      	subs	r7, r5, #1
 8012c46:	f1ba 0f00 	cmp.w	sl, #0
 8012c4a:	d131      	bne.n	8012cb0 <__gethex+0x38c>
 8012c4c:	b127      	cbz	r7, 8012c58 <__gethex+0x334>
 8012c4e:	4639      	mov	r1, r7
 8012c50:	4620      	mov	r0, r4
 8012c52:	f000 fe27 	bl	80138a4 <__any_on>
 8012c56:	4682      	mov	sl, r0
 8012c58:	117b      	asrs	r3, r7, #5
 8012c5a:	2101      	movs	r1, #1
 8012c5c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012c60:	f007 071f 	and.w	r7, r7, #31
 8012c64:	fa01 f707 	lsl.w	r7, r1, r7
 8012c68:	421f      	tst	r7, r3
 8012c6a:	4629      	mov	r1, r5
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	bf18      	it	ne
 8012c70:	f04a 0a02 	orrne.w	sl, sl, #2
 8012c74:	1b76      	subs	r6, r6, r5
 8012c76:	f7ff fded 	bl	8012854 <rshift>
 8012c7a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012c7e:	2702      	movs	r7, #2
 8012c80:	f1ba 0f00 	cmp.w	sl, #0
 8012c84:	d048      	beq.n	8012d18 <__gethex+0x3f4>
 8012c86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012c8a:	2b02      	cmp	r3, #2
 8012c8c:	d015      	beq.n	8012cba <__gethex+0x396>
 8012c8e:	2b03      	cmp	r3, #3
 8012c90:	d017      	beq.n	8012cc2 <__gethex+0x39e>
 8012c92:	2b01      	cmp	r3, #1
 8012c94:	d109      	bne.n	8012caa <__gethex+0x386>
 8012c96:	f01a 0f02 	tst.w	sl, #2
 8012c9a:	d006      	beq.n	8012caa <__gethex+0x386>
 8012c9c:	f8d9 0000 	ldr.w	r0, [r9]
 8012ca0:	ea4a 0a00 	orr.w	sl, sl, r0
 8012ca4:	f01a 0f01 	tst.w	sl, #1
 8012ca8:	d10e      	bne.n	8012cc8 <__gethex+0x3a4>
 8012caa:	f047 0710 	orr.w	r7, r7, #16
 8012cae:	e033      	b.n	8012d18 <__gethex+0x3f4>
 8012cb0:	f04f 0a01 	mov.w	sl, #1
 8012cb4:	e7d0      	b.n	8012c58 <__gethex+0x334>
 8012cb6:	2701      	movs	r7, #1
 8012cb8:	e7e2      	b.n	8012c80 <__gethex+0x35c>
 8012cba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012cbc:	f1c3 0301 	rsb	r3, r3, #1
 8012cc0:	9315      	str	r3, [sp, #84]	; 0x54
 8012cc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d0f0      	beq.n	8012caa <__gethex+0x386>
 8012cc8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012ccc:	f104 0314 	add.w	r3, r4, #20
 8012cd0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012cd4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012cd8:	f04f 0c00 	mov.w	ip, #0
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ce2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012ce6:	d01c      	beq.n	8012d22 <__gethex+0x3fe>
 8012ce8:	3201      	adds	r2, #1
 8012cea:	6002      	str	r2, [r0, #0]
 8012cec:	2f02      	cmp	r7, #2
 8012cee:	f104 0314 	add.w	r3, r4, #20
 8012cf2:	d13f      	bne.n	8012d74 <__gethex+0x450>
 8012cf4:	f8d8 2000 	ldr.w	r2, [r8]
 8012cf8:	3a01      	subs	r2, #1
 8012cfa:	42b2      	cmp	r2, r6
 8012cfc:	d10a      	bne.n	8012d14 <__gethex+0x3f0>
 8012cfe:	1171      	asrs	r1, r6, #5
 8012d00:	2201      	movs	r2, #1
 8012d02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012d06:	f006 061f 	and.w	r6, r6, #31
 8012d0a:	fa02 f606 	lsl.w	r6, r2, r6
 8012d0e:	421e      	tst	r6, r3
 8012d10:	bf18      	it	ne
 8012d12:	4617      	movne	r7, r2
 8012d14:	f047 0720 	orr.w	r7, r7, #32
 8012d18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012d1a:	601c      	str	r4, [r3, #0]
 8012d1c:	9b04      	ldr	r3, [sp, #16]
 8012d1e:	601d      	str	r5, [r3, #0]
 8012d20:	e695      	b.n	8012a4e <__gethex+0x12a>
 8012d22:	4299      	cmp	r1, r3
 8012d24:	f843 cc04 	str.w	ip, [r3, #-4]
 8012d28:	d8d8      	bhi.n	8012cdc <__gethex+0x3b8>
 8012d2a:	68a3      	ldr	r3, [r4, #8]
 8012d2c:	459b      	cmp	fp, r3
 8012d2e:	db19      	blt.n	8012d64 <__gethex+0x440>
 8012d30:	6861      	ldr	r1, [r4, #4]
 8012d32:	ee18 0a10 	vmov	r0, s16
 8012d36:	3101      	adds	r1, #1
 8012d38:	f000 f91a 	bl	8012f70 <_Balloc>
 8012d3c:	4681      	mov	r9, r0
 8012d3e:	b918      	cbnz	r0, 8012d48 <__gethex+0x424>
 8012d40:	4b1a      	ldr	r3, [pc, #104]	; (8012dac <__gethex+0x488>)
 8012d42:	4602      	mov	r2, r0
 8012d44:	2184      	movs	r1, #132	; 0x84
 8012d46:	e6a8      	b.n	8012a9a <__gethex+0x176>
 8012d48:	6922      	ldr	r2, [r4, #16]
 8012d4a:	3202      	adds	r2, #2
 8012d4c:	f104 010c 	add.w	r1, r4, #12
 8012d50:	0092      	lsls	r2, r2, #2
 8012d52:	300c      	adds	r0, #12
 8012d54:	f7fd fac8 	bl	80102e8 <memcpy>
 8012d58:	4621      	mov	r1, r4
 8012d5a:	ee18 0a10 	vmov	r0, s16
 8012d5e:	f000 f947 	bl	8012ff0 <_Bfree>
 8012d62:	464c      	mov	r4, r9
 8012d64:	6923      	ldr	r3, [r4, #16]
 8012d66:	1c5a      	adds	r2, r3, #1
 8012d68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012d6c:	6122      	str	r2, [r4, #16]
 8012d6e:	2201      	movs	r2, #1
 8012d70:	615a      	str	r2, [r3, #20]
 8012d72:	e7bb      	b.n	8012cec <__gethex+0x3c8>
 8012d74:	6922      	ldr	r2, [r4, #16]
 8012d76:	455a      	cmp	r2, fp
 8012d78:	dd0b      	ble.n	8012d92 <__gethex+0x46e>
 8012d7a:	2101      	movs	r1, #1
 8012d7c:	4620      	mov	r0, r4
 8012d7e:	f7ff fd69 	bl	8012854 <rshift>
 8012d82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012d86:	3501      	adds	r5, #1
 8012d88:	42ab      	cmp	r3, r5
 8012d8a:	f6ff aed0 	blt.w	8012b2e <__gethex+0x20a>
 8012d8e:	2701      	movs	r7, #1
 8012d90:	e7c0      	b.n	8012d14 <__gethex+0x3f0>
 8012d92:	f016 061f 	ands.w	r6, r6, #31
 8012d96:	d0fa      	beq.n	8012d8e <__gethex+0x46a>
 8012d98:	449a      	add	sl, r3
 8012d9a:	f1c6 0620 	rsb	r6, r6, #32
 8012d9e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012da2:	f000 f9db 	bl	801315c <__hi0bits>
 8012da6:	42b0      	cmp	r0, r6
 8012da8:	dbe7      	blt.n	8012d7a <__gethex+0x456>
 8012daa:	e7f0      	b.n	8012d8e <__gethex+0x46a>
 8012dac:	08016ad8 	.word	0x08016ad8

08012db0 <L_shift>:
 8012db0:	f1c2 0208 	rsb	r2, r2, #8
 8012db4:	0092      	lsls	r2, r2, #2
 8012db6:	b570      	push	{r4, r5, r6, lr}
 8012db8:	f1c2 0620 	rsb	r6, r2, #32
 8012dbc:	6843      	ldr	r3, [r0, #4]
 8012dbe:	6804      	ldr	r4, [r0, #0]
 8012dc0:	fa03 f506 	lsl.w	r5, r3, r6
 8012dc4:	432c      	orrs	r4, r5
 8012dc6:	40d3      	lsrs	r3, r2
 8012dc8:	6004      	str	r4, [r0, #0]
 8012dca:	f840 3f04 	str.w	r3, [r0, #4]!
 8012dce:	4288      	cmp	r0, r1
 8012dd0:	d3f4      	bcc.n	8012dbc <L_shift+0xc>
 8012dd2:	bd70      	pop	{r4, r5, r6, pc}

08012dd4 <__match>:
 8012dd4:	b530      	push	{r4, r5, lr}
 8012dd6:	6803      	ldr	r3, [r0, #0]
 8012dd8:	3301      	adds	r3, #1
 8012dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012dde:	b914      	cbnz	r4, 8012de6 <__match+0x12>
 8012de0:	6003      	str	r3, [r0, #0]
 8012de2:	2001      	movs	r0, #1
 8012de4:	bd30      	pop	{r4, r5, pc}
 8012de6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012dea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012dee:	2d19      	cmp	r5, #25
 8012df0:	bf98      	it	ls
 8012df2:	3220      	addls	r2, #32
 8012df4:	42a2      	cmp	r2, r4
 8012df6:	d0f0      	beq.n	8012dda <__match+0x6>
 8012df8:	2000      	movs	r0, #0
 8012dfa:	e7f3      	b.n	8012de4 <__match+0x10>

08012dfc <__hexnan>:
 8012dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e00:	680b      	ldr	r3, [r1, #0]
 8012e02:	6801      	ldr	r1, [r0, #0]
 8012e04:	115e      	asrs	r6, r3, #5
 8012e06:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012e0a:	f013 031f 	ands.w	r3, r3, #31
 8012e0e:	b087      	sub	sp, #28
 8012e10:	bf18      	it	ne
 8012e12:	3604      	addne	r6, #4
 8012e14:	2500      	movs	r5, #0
 8012e16:	1f37      	subs	r7, r6, #4
 8012e18:	4682      	mov	sl, r0
 8012e1a:	4690      	mov	r8, r2
 8012e1c:	9301      	str	r3, [sp, #4]
 8012e1e:	f846 5c04 	str.w	r5, [r6, #-4]
 8012e22:	46b9      	mov	r9, r7
 8012e24:	463c      	mov	r4, r7
 8012e26:	9502      	str	r5, [sp, #8]
 8012e28:	46ab      	mov	fp, r5
 8012e2a:	784a      	ldrb	r2, [r1, #1]
 8012e2c:	1c4b      	adds	r3, r1, #1
 8012e2e:	9303      	str	r3, [sp, #12]
 8012e30:	b342      	cbz	r2, 8012e84 <__hexnan+0x88>
 8012e32:	4610      	mov	r0, r2
 8012e34:	9105      	str	r1, [sp, #20]
 8012e36:	9204      	str	r2, [sp, #16]
 8012e38:	f7ff fd5e 	bl	80128f8 <__hexdig_fun>
 8012e3c:	2800      	cmp	r0, #0
 8012e3e:	d14f      	bne.n	8012ee0 <__hexnan+0xe4>
 8012e40:	9a04      	ldr	r2, [sp, #16]
 8012e42:	9905      	ldr	r1, [sp, #20]
 8012e44:	2a20      	cmp	r2, #32
 8012e46:	d818      	bhi.n	8012e7a <__hexnan+0x7e>
 8012e48:	9b02      	ldr	r3, [sp, #8]
 8012e4a:	459b      	cmp	fp, r3
 8012e4c:	dd13      	ble.n	8012e76 <__hexnan+0x7a>
 8012e4e:	454c      	cmp	r4, r9
 8012e50:	d206      	bcs.n	8012e60 <__hexnan+0x64>
 8012e52:	2d07      	cmp	r5, #7
 8012e54:	dc04      	bgt.n	8012e60 <__hexnan+0x64>
 8012e56:	462a      	mov	r2, r5
 8012e58:	4649      	mov	r1, r9
 8012e5a:	4620      	mov	r0, r4
 8012e5c:	f7ff ffa8 	bl	8012db0 <L_shift>
 8012e60:	4544      	cmp	r4, r8
 8012e62:	d950      	bls.n	8012f06 <__hexnan+0x10a>
 8012e64:	2300      	movs	r3, #0
 8012e66:	f1a4 0904 	sub.w	r9, r4, #4
 8012e6a:	f844 3c04 	str.w	r3, [r4, #-4]
 8012e6e:	f8cd b008 	str.w	fp, [sp, #8]
 8012e72:	464c      	mov	r4, r9
 8012e74:	461d      	mov	r5, r3
 8012e76:	9903      	ldr	r1, [sp, #12]
 8012e78:	e7d7      	b.n	8012e2a <__hexnan+0x2e>
 8012e7a:	2a29      	cmp	r2, #41	; 0x29
 8012e7c:	d156      	bne.n	8012f2c <__hexnan+0x130>
 8012e7e:	3102      	adds	r1, #2
 8012e80:	f8ca 1000 	str.w	r1, [sl]
 8012e84:	f1bb 0f00 	cmp.w	fp, #0
 8012e88:	d050      	beq.n	8012f2c <__hexnan+0x130>
 8012e8a:	454c      	cmp	r4, r9
 8012e8c:	d206      	bcs.n	8012e9c <__hexnan+0xa0>
 8012e8e:	2d07      	cmp	r5, #7
 8012e90:	dc04      	bgt.n	8012e9c <__hexnan+0xa0>
 8012e92:	462a      	mov	r2, r5
 8012e94:	4649      	mov	r1, r9
 8012e96:	4620      	mov	r0, r4
 8012e98:	f7ff ff8a 	bl	8012db0 <L_shift>
 8012e9c:	4544      	cmp	r4, r8
 8012e9e:	d934      	bls.n	8012f0a <__hexnan+0x10e>
 8012ea0:	f1a8 0204 	sub.w	r2, r8, #4
 8012ea4:	4623      	mov	r3, r4
 8012ea6:	f853 1b04 	ldr.w	r1, [r3], #4
 8012eaa:	f842 1f04 	str.w	r1, [r2, #4]!
 8012eae:	429f      	cmp	r7, r3
 8012eb0:	d2f9      	bcs.n	8012ea6 <__hexnan+0xaa>
 8012eb2:	1b3b      	subs	r3, r7, r4
 8012eb4:	f023 0303 	bic.w	r3, r3, #3
 8012eb8:	3304      	adds	r3, #4
 8012eba:	3401      	adds	r4, #1
 8012ebc:	3e03      	subs	r6, #3
 8012ebe:	42b4      	cmp	r4, r6
 8012ec0:	bf88      	it	hi
 8012ec2:	2304      	movhi	r3, #4
 8012ec4:	4443      	add	r3, r8
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	f843 2b04 	str.w	r2, [r3], #4
 8012ecc:	429f      	cmp	r7, r3
 8012ece:	d2fb      	bcs.n	8012ec8 <__hexnan+0xcc>
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	b91b      	cbnz	r3, 8012edc <__hexnan+0xe0>
 8012ed4:	4547      	cmp	r7, r8
 8012ed6:	d127      	bne.n	8012f28 <__hexnan+0x12c>
 8012ed8:	2301      	movs	r3, #1
 8012eda:	603b      	str	r3, [r7, #0]
 8012edc:	2005      	movs	r0, #5
 8012ede:	e026      	b.n	8012f2e <__hexnan+0x132>
 8012ee0:	3501      	adds	r5, #1
 8012ee2:	2d08      	cmp	r5, #8
 8012ee4:	f10b 0b01 	add.w	fp, fp, #1
 8012ee8:	dd06      	ble.n	8012ef8 <__hexnan+0xfc>
 8012eea:	4544      	cmp	r4, r8
 8012eec:	d9c3      	bls.n	8012e76 <__hexnan+0x7a>
 8012eee:	2300      	movs	r3, #0
 8012ef0:	f844 3c04 	str.w	r3, [r4, #-4]
 8012ef4:	2501      	movs	r5, #1
 8012ef6:	3c04      	subs	r4, #4
 8012ef8:	6822      	ldr	r2, [r4, #0]
 8012efa:	f000 000f 	and.w	r0, r0, #15
 8012efe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012f02:	6022      	str	r2, [r4, #0]
 8012f04:	e7b7      	b.n	8012e76 <__hexnan+0x7a>
 8012f06:	2508      	movs	r5, #8
 8012f08:	e7b5      	b.n	8012e76 <__hexnan+0x7a>
 8012f0a:	9b01      	ldr	r3, [sp, #4]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d0df      	beq.n	8012ed0 <__hexnan+0xd4>
 8012f10:	f04f 32ff 	mov.w	r2, #4294967295
 8012f14:	f1c3 0320 	rsb	r3, r3, #32
 8012f18:	fa22 f303 	lsr.w	r3, r2, r3
 8012f1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012f20:	401a      	ands	r2, r3
 8012f22:	f846 2c04 	str.w	r2, [r6, #-4]
 8012f26:	e7d3      	b.n	8012ed0 <__hexnan+0xd4>
 8012f28:	3f04      	subs	r7, #4
 8012f2a:	e7d1      	b.n	8012ed0 <__hexnan+0xd4>
 8012f2c:	2004      	movs	r0, #4
 8012f2e:	b007      	add	sp, #28
 8012f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012f34 <_localeconv_r>:
 8012f34:	4800      	ldr	r0, [pc, #0]	; (8012f38 <_localeconv_r+0x4>)
 8012f36:	4770      	bx	lr
 8012f38:	20000184 	.word	0x20000184

08012f3c <malloc>:
 8012f3c:	4b02      	ldr	r3, [pc, #8]	; (8012f48 <malloc+0xc>)
 8012f3e:	4601      	mov	r1, r0
 8012f40:	6818      	ldr	r0, [r3, #0]
 8012f42:	f000 bd2f 	b.w	80139a4 <_malloc_r>
 8012f46:	bf00      	nop
 8012f48:	2000002c 	.word	0x2000002c

08012f4c <__ascii_mbtowc>:
 8012f4c:	b082      	sub	sp, #8
 8012f4e:	b901      	cbnz	r1, 8012f52 <__ascii_mbtowc+0x6>
 8012f50:	a901      	add	r1, sp, #4
 8012f52:	b142      	cbz	r2, 8012f66 <__ascii_mbtowc+0x1a>
 8012f54:	b14b      	cbz	r3, 8012f6a <__ascii_mbtowc+0x1e>
 8012f56:	7813      	ldrb	r3, [r2, #0]
 8012f58:	600b      	str	r3, [r1, #0]
 8012f5a:	7812      	ldrb	r2, [r2, #0]
 8012f5c:	1e10      	subs	r0, r2, #0
 8012f5e:	bf18      	it	ne
 8012f60:	2001      	movne	r0, #1
 8012f62:	b002      	add	sp, #8
 8012f64:	4770      	bx	lr
 8012f66:	4610      	mov	r0, r2
 8012f68:	e7fb      	b.n	8012f62 <__ascii_mbtowc+0x16>
 8012f6a:	f06f 0001 	mvn.w	r0, #1
 8012f6e:	e7f8      	b.n	8012f62 <__ascii_mbtowc+0x16>

08012f70 <_Balloc>:
 8012f70:	b570      	push	{r4, r5, r6, lr}
 8012f72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012f74:	4604      	mov	r4, r0
 8012f76:	460d      	mov	r5, r1
 8012f78:	b976      	cbnz	r6, 8012f98 <_Balloc+0x28>
 8012f7a:	2010      	movs	r0, #16
 8012f7c:	f7ff ffde 	bl	8012f3c <malloc>
 8012f80:	4602      	mov	r2, r0
 8012f82:	6260      	str	r0, [r4, #36]	; 0x24
 8012f84:	b920      	cbnz	r0, 8012f90 <_Balloc+0x20>
 8012f86:	4b18      	ldr	r3, [pc, #96]	; (8012fe8 <_Balloc+0x78>)
 8012f88:	4818      	ldr	r0, [pc, #96]	; (8012fec <_Balloc+0x7c>)
 8012f8a:	2166      	movs	r1, #102	; 0x66
 8012f8c:	f7fe fdb8 	bl	8011b00 <__assert_func>
 8012f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012f94:	6006      	str	r6, [r0, #0]
 8012f96:	60c6      	str	r6, [r0, #12]
 8012f98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012f9a:	68f3      	ldr	r3, [r6, #12]
 8012f9c:	b183      	cbz	r3, 8012fc0 <_Balloc+0x50>
 8012f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012fa0:	68db      	ldr	r3, [r3, #12]
 8012fa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012fa6:	b9b8      	cbnz	r0, 8012fd8 <_Balloc+0x68>
 8012fa8:	2101      	movs	r1, #1
 8012faa:	fa01 f605 	lsl.w	r6, r1, r5
 8012fae:	1d72      	adds	r2, r6, #5
 8012fb0:	0092      	lsls	r2, r2, #2
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	f000 fc97 	bl	80138e6 <_calloc_r>
 8012fb8:	b160      	cbz	r0, 8012fd4 <_Balloc+0x64>
 8012fba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012fbe:	e00e      	b.n	8012fde <_Balloc+0x6e>
 8012fc0:	2221      	movs	r2, #33	; 0x21
 8012fc2:	2104      	movs	r1, #4
 8012fc4:	4620      	mov	r0, r4
 8012fc6:	f000 fc8e 	bl	80138e6 <_calloc_r>
 8012fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012fcc:	60f0      	str	r0, [r6, #12]
 8012fce:	68db      	ldr	r3, [r3, #12]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d1e4      	bne.n	8012f9e <_Balloc+0x2e>
 8012fd4:	2000      	movs	r0, #0
 8012fd6:	bd70      	pop	{r4, r5, r6, pc}
 8012fd8:	6802      	ldr	r2, [r0, #0]
 8012fda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012fde:	2300      	movs	r3, #0
 8012fe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012fe4:	e7f7      	b.n	8012fd6 <_Balloc+0x66>
 8012fe6:	bf00      	nop
 8012fe8:	080169b8 	.word	0x080169b8
 8012fec:	08016b68 	.word	0x08016b68

08012ff0 <_Bfree>:
 8012ff0:	b570      	push	{r4, r5, r6, lr}
 8012ff2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012ff4:	4605      	mov	r5, r0
 8012ff6:	460c      	mov	r4, r1
 8012ff8:	b976      	cbnz	r6, 8013018 <_Bfree+0x28>
 8012ffa:	2010      	movs	r0, #16
 8012ffc:	f7ff ff9e 	bl	8012f3c <malloc>
 8013000:	4602      	mov	r2, r0
 8013002:	6268      	str	r0, [r5, #36]	; 0x24
 8013004:	b920      	cbnz	r0, 8013010 <_Bfree+0x20>
 8013006:	4b09      	ldr	r3, [pc, #36]	; (801302c <_Bfree+0x3c>)
 8013008:	4809      	ldr	r0, [pc, #36]	; (8013030 <_Bfree+0x40>)
 801300a:	218a      	movs	r1, #138	; 0x8a
 801300c:	f7fe fd78 	bl	8011b00 <__assert_func>
 8013010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013014:	6006      	str	r6, [r0, #0]
 8013016:	60c6      	str	r6, [r0, #12]
 8013018:	b13c      	cbz	r4, 801302a <_Bfree+0x3a>
 801301a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801301c:	6862      	ldr	r2, [r4, #4]
 801301e:	68db      	ldr	r3, [r3, #12]
 8013020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013024:	6021      	str	r1, [r4, #0]
 8013026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801302a:	bd70      	pop	{r4, r5, r6, pc}
 801302c:	080169b8 	.word	0x080169b8
 8013030:	08016b68 	.word	0x08016b68

08013034 <__multadd>:
 8013034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013038:	690e      	ldr	r6, [r1, #16]
 801303a:	4607      	mov	r7, r0
 801303c:	4698      	mov	r8, r3
 801303e:	460c      	mov	r4, r1
 8013040:	f101 0014 	add.w	r0, r1, #20
 8013044:	2300      	movs	r3, #0
 8013046:	6805      	ldr	r5, [r0, #0]
 8013048:	b2a9      	uxth	r1, r5
 801304a:	fb02 8101 	mla	r1, r2, r1, r8
 801304e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013052:	0c2d      	lsrs	r5, r5, #16
 8013054:	fb02 c505 	mla	r5, r2, r5, ip
 8013058:	b289      	uxth	r1, r1
 801305a:	3301      	adds	r3, #1
 801305c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013060:	429e      	cmp	r6, r3
 8013062:	f840 1b04 	str.w	r1, [r0], #4
 8013066:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801306a:	dcec      	bgt.n	8013046 <__multadd+0x12>
 801306c:	f1b8 0f00 	cmp.w	r8, #0
 8013070:	d022      	beq.n	80130b8 <__multadd+0x84>
 8013072:	68a3      	ldr	r3, [r4, #8]
 8013074:	42b3      	cmp	r3, r6
 8013076:	dc19      	bgt.n	80130ac <__multadd+0x78>
 8013078:	6861      	ldr	r1, [r4, #4]
 801307a:	4638      	mov	r0, r7
 801307c:	3101      	adds	r1, #1
 801307e:	f7ff ff77 	bl	8012f70 <_Balloc>
 8013082:	4605      	mov	r5, r0
 8013084:	b928      	cbnz	r0, 8013092 <__multadd+0x5e>
 8013086:	4602      	mov	r2, r0
 8013088:	4b0d      	ldr	r3, [pc, #52]	; (80130c0 <__multadd+0x8c>)
 801308a:	480e      	ldr	r0, [pc, #56]	; (80130c4 <__multadd+0x90>)
 801308c:	21b5      	movs	r1, #181	; 0xb5
 801308e:	f7fe fd37 	bl	8011b00 <__assert_func>
 8013092:	6922      	ldr	r2, [r4, #16]
 8013094:	3202      	adds	r2, #2
 8013096:	f104 010c 	add.w	r1, r4, #12
 801309a:	0092      	lsls	r2, r2, #2
 801309c:	300c      	adds	r0, #12
 801309e:	f7fd f923 	bl	80102e8 <memcpy>
 80130a2:	4621      	mov	r1, r4
 80130a4:	4638      	mov	r0, r7
 80130a6:	f7ff ffa3 	bl	8012ff0 <_Bfree>
 80130aa:	462c      	mov	r4, r5
 80130ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80130b0:	3601      	adds	r6, #1
 80130b2:	f8c3 8014 	str.w	r8, [r3, #20]
 80130b6:	6126      	str	r6, [r4, #16]
 80130b8:	4620      	mov	r0, r4
 80130ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130be:	bf00      	nop
 80130c0:	08016ad8 	.word	0x08016ad8
 80130c4:	08016b68 	.word	0x08016b68

080130c8 <__s2b>:
 80130c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130cc:	460c      	mov	r4, r1
 80130ce:	4615      	mov	r5, r2
 80130d0:	461f      	mov	r7, r3
 80130d2:	2209      	movs	r2, #9
 80130d4:	3308      	adds	r3, #8
 80130d6:	4606      	mov	r6, r0
 80130d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80130dc:	2100      	movs	r1, #0
 80130de:	2201      	movs	r2, #1
 80130e0:	429a      	cmp	r2, r3
 80130e2:	db09      	blt.n	80130f8 <__s2b+0x30>
 80130e4:	4630      	mov	r0, r6
 80130e6:	f7ff ff43 	bl	8012f70 <_Balloc>
 80130ea:	b940      	cbnz	r0, 80130fe <__s2b+0x36>
 80130ec:	4602      	mov	r2, r0
 80130ee:	4b19      	ldr	r3, [pc, #100]	; (8013154 <__s2b+0x8c>)
 80130f0:	4819      	ldr	r0, [pc, #100]	; (8013158 <__s2b+0x90>)
 80130f2:	21ce      	movs	r1, #206	; 0xce
 80130f4:	f7fe fd04 	bl	8011b00 <__assert_func>
 80130f8:	0052      	lsls	r2, r2, #1
 80130fa:	3101      	adds	r1, #1
 80130fc:	e7f0      	b.n	80130e0 <__s2b+0x18>
 80130fe:	9b08      	ldr	r3, [sp, #32]
 8013100:	6143      	str	r3, [r0, #20]
 8013102:	2d09      	cmp	r5, #9
 8013104:	f04f 0301 	mov.w	r3, #1
 8013108:	6103      	str	r3, [r0, #16]
 801310a:	dd16      	ble.n	801313a <__s2b+0x72>
 801310c:	f104 0909 	add.w	r9, r4, #9
 8013110:	46c8      	mov	r8, r9
 8013112:	442c      	add	r4, r5
 8013114:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013118:	4601      	mov	r1, r0
 801311a:	3b30      	subs	r3, #48	; 0x30
 801311c:	220a      	movs	r2, #10
 801311e:	4630      	mov	r0, r6
 8013120:	f7ff ff88 	bl	8013034 <__multadd>
 8013124:	45a0      	cmp	r8, r4
 8013126:	d1f5      	bne.n	8013114 <__s2b+0x4c>
 8013128:	f1a5 0408 	sub.w	r4, r5, #8
 801312c:	444c      	add	r4, r9
 801312e:	1b2d      	subs	r5, r5, r4
 8013130:	1963      	adds	r3, r4, r5
 8013132:	42bb      	cmp	r3, r7
 8013134:	db04      	blt.n	8013140 <__s2b+0x78>
 8013136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801313a:	340a      	adds	r4, #10
 801313c:	2509      	movs	r5, #9
 801313e:	e7f6      	b.n	801312e <__s2b+0x66>
 8013140:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013144:	4601      	mov	r1, r0
 8013146:	3b30      	subs	r3, #48	; 0x30
 8013148:	220a      	movs	r2, #10
 801314a:	4630      	mov	r0, r6
 801314c:	f7ff ff72 	bl	8013034 <__multadd>
 8013150:	e7ee      	b.n	8013130 <__s2b+0x68>
 8013152:	bf00      	nop
 8013154:	08016ad8 	.word	0x08016ad8
 8013158:	08016b68 	.word	0x08016b68

0801315c <__hi0bits>:
 801315c:	0c03      	lsrs	r3, r0, #16
 801315e:	041b      	lsls	r3, r3, #16
 8013160:	b9d3      	cbnz	r3, 8013198 <__hi0bits+0x3c>
 8013162:	0400      	lsls	r0, r0, #16
 8013164:	2310      	movs	r3, #16
 8013166:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801316a:	bf04      	itt	eq
 801316c:	0200      	lsleq	r0, r0, #8
 801316e:	3308      	addeq	r3, #8
 8013170:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013174:	bf04      	itt	eq
 8013176:	0100      	lsleq	r0, r0, #4
 8013178:	3304      	addeq	r3, #4
 801317a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801317e:	bf04      	itt	eq
 8013180:	0080      	lsleq	r0, r0, #2
 8013182:	3302      	addeq	r3, #2
 8013184:	2800      	cmp	r0, #0
 8013186:	db05      	blt.n	8013194 <__hi0bits+0x38>
 8013188:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801318c:	f103 0301 	add.w	r3, r3, #1
 8013190:	bf08      	it	eq
 8013192:	2320      	moveq	r3, #32
 8013194:	4618      	mov	r0, r3
 8013196:	4770      	bx	lr
 8013198:	2300      	movs	r3, #0
 801319a:	e7e4      	b.n	8013166 <__hi0bits+0xa>

0801319c <__lo0bits>:
 801319c:	6803      	ldr	r3, [r0, #0]
 801319e:	f013 0207 	ands.w	r2, r3, #7
 80131a2:	4601      	mov	r1, r0
 80131a4:	d00b      	beq.n	80131be <__lo0bits+0x22>
 80131a6:	07da      	lsls	r2, r3, #31
 80131a8:	d424      	bmi.n	80131f4 <__lo0bits+0x58>
 80131aa:	0798      	lsls	r0, r3, #30
 80131ac:	bf49      	itett	mi
 80131ae:	085b      	lsrmi	r3, r3, #1
 80131b0:	089b      	lsrpl	r3, r3, #2
 80131b2:	2001      	movmi	r0, #1
 80131b4:	600b      	strmi	r3, [r1, #0]
 80131b6:	bf5c      	itt	pl
 80131b8:	600b      	strpl	r3, [r1, #0]
 80131ba:	2002      	movpl	r0, #2
 80131bc:	4770      	bx	lr
 80131be:	b298      	uxth	r0, r3
 80131c0:	b9b0      	cbnz	r0, 80131f0 <__lo0bits+0x54>
 80131c2:	0c1b      	lsrs	r3, r3, #16
 80131c4:	2010      	movs	r0, #16
 80131c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80131ca:	bf04      	itt	eq
 80131cc:	0a1b      	lsreq	r3, r3, #8
 80131ce:	3008      	addeq	r0, #8
 80131d0:	071a      	lsls	r2, r3, #28
 80131d2:	bf04      	itt	eq
 80131d4:	091b      	lsreq	r3, r3, #4
 80131d6:	3004      	addeq	r0, #4
 80131d8:	079a      	lsls	r2, r3, #30
 80131da:	bf04      	itt	eq
 80131dc:	089b      	lsreq	r3, r3, #2
 80131de:	3002      	addeq	r0, #2
 80131e0:	07da      	lsls	r2, r3, #31
 80131e2:	d403      	bmi.n	80131ec <__lo0bits+0x50>
 80131e4:	085b      	lsrs	r3, r3, #1
 80131e6:	f100 0001 	add.w	r0, r0, #1
 80131ea:	d005      	beq.n	80131f8 <__lo0bits+0x5c>
 80131ec:	600b      	str	r3, [r1, #0]
 80131ee:	4770      	bx	lr
 80131f0:	4610      	mov	r0, r2
 80131f2:	e7e8      	b.n	80131c6 <__lo0bits+0x2a>
 80131f4:	2000      	movs	r0, #0
 80131f6:	4770      	bx	lr
 80131f8:	2020      	movs	r0, #32
 80131fa:	4770      	bx	lr

080131fc <__i2b>:
 80131fc:	b510      	push	{r4, lr}
 80131fe:	460c      	mov	r4, r1
 8013200:	2101      	movs	r1, #1
 8013202:	f7ff feb5 	bl	8012f70 <_Balloc>
 8013206:	4602      	mov	r2, r0
 8013208:	b928      	cbnz	r0, 8013216 <__i2b+0x1a>
 801320a:	4b05      	ldr	r3, [pc, #20]	; (8013220 <__i2b+0x24>)
 801320c:	4805      	ldr	r0, [pc, #20]	; (8013224 <__i2b+0x28>)
 801320e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013212:	f7fe fc75 	bl	8011b00 <__assert_func>
 8013216:	2301      	movs	r3, #1
 8013218:	6144      	str	r4, [r0, #20]
 801321a:	6103      	str	r3, [r0, #16]
 801321c:	bd10      	pop	{r4, pc}
 801321e:	bf00      	nop
 8013220:	08016ad8 	.word	0x08016ad8
 8013224:	08016b68 	.word	0x08016b68

08013228 <__multiply>:
 8013228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801322c:	4614      	mov	r4, r2
 801322e:	690a      	ldr	r2, [r1, #16]
 8013230:	6923      	ldr	r3, [r4, #16]
 8013232:	429a      	cmp	r2, r3
 8013234:	bfb8      	it	lt
 8013236:	460b      	movlt	r3, r1
 8013238:	460d      	mov	r5, r1
 801323a:	bfbc      	itt	lt
 801323c:	4625      	movlt	r5, r4
 801323e:	461c      	movlt	r4, r3
 8013240:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013244:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013248:	68ab      	ldr	r3, [r5, #8]
 801324a:	6869      	ldr	r1, [r5, #4]
 801324c:	eb0a 0709 	add.w	r7, sl, r9
 8013250:	42bb      	cmp	r3, r7
 8013252:	b085      	sub	sp, #20
 8013254:	bfb8      	it	lt
 8013256:	3101      	addlt	r1, #1
 8013258:	f7ff fe8a 	bl	8012f70 <_Balloc>
 801325c:	b930      	cbnz	r0, 801326c <__multiply+0x44>
 801325e:	4602      	mov	r2, r0
 8013260:	4b42      	ldr	r3, [pc, #264]	; (801336c <__multiply+0x144>)
 8013262:	4843      	ldr	r0, [pc, #268]	; (8013370 <__multiply+0x148>)
 8013264:	f240 115d 	movw	r1, #349	; 0x15d
 8013268:	f7fe fc4a 	bl	8011b00 <__assert_func>
 801326c:	f100 0614 	add.w	r6, r0, #20
 8013270:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013274:	4633      	mov	r3, r6
 8013276:	2200      	movs	r2, #0
 8013278:	4543      	cmp	r3, r8
 801327a:	d31e      	bcc.n	80132ba <__multiply+0x92>
 801327c:	f105 0c14 	add.w	ip, r5, #20
 8013280:	f104 0314 	add.w	r3, r4, #20
 8013284:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013288:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801328c:	9202      	str	r2, [sp, #8]
 801328e:	ebac 0205 	sub.w	r2, ip, r5
 8013292:	3a15      	subs	r2, #21
 8013294:	f022 0203 	bic.w	r2, r2, #3
 8013298:	3204      	adds	r2, #4
 801329a:	f105 0115 	add.w	r1, r5, #21
 801329e:	458c      	cmp	ip, r1
 80132a0:	bf38      	it	cc
 80132a2:	2204      	movcc	r2, #4
 80132a4:	9201      	str	r2, [sp, #4]
 80132a6:	9a02      	ldr	r2, [sp, #8]
 80132a8:	9303      	str	r3, [sp, #12]
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d808      	bhi.n	80132c0 <__multiply+0x98>
 80132ae:	2f00      	cmp	r7, #0
 80132b0:	dc55      	bgt.n	801335e <__multiply+0x136>
 80132b2:	6107      	str	r7, [r0, #16]
 80132b4:	b005      	add	sp, #20
 80132b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132ba:	f843 2b04 	str.w	r2, [r3], #4
 80132be:	e7db      	b.n	8013278 <__multiply+0x50>
 80132c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80132c4:	f1ba 0f00 	cmp.w	sl, #0
 80132c8:	d020      	beq.n	801330c <__multiply+0xe4>
 80132ca:	f105 0e14 	add.w	lr, r5, #20
 80132ce:	46b1      	mov	r9, r6
 80132d0:	2200      	movs	r2, #0
 80132d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80132d6:	f8d9 b000 	ldr.w	fp, [r9]
 80132da:	b2a1      	uxth	r1, r4
 80132dc:	fa1f fb8b 	uxth.w	fp, fp
 80132e0:	fb0a b101 	mla	r1, sl, r1, fp
 80132e4:	4411      	add	r1, r2
 80132e6:	f8d9 2000 	ldr.w	r2, [r9]
 80132ea:	0c24      	lsrs	r4, r4, #16
 80132ec:	0c12      	lsrs	r2, r2, #16
 80132ee:	fb0a 2404 	mla	r4, sl, r4, r2
 80132f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80132f6:	b289      	uxth	r1, r1
 80132f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80132fc:	45f4      	cmp	ip, lr
 80132fe:	f849 1b04 	str.w	r1, [r9], #4
 8013302:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013306:	d8e4      	bhi.n	80132d2 <__multiply+0xaa>
 8013308:	9901      	ldr	r1, [sp, #4]
 801330a:	5072      	str	r2, [r6, r1]
 801330c:	9a03      	ldr	r2, [sp, #12]
 801330e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013312:	3304      	adds	r3, #4
 8013314:	f1b9 0f00 	cmp.w	r9, #0
 8013318:	d01f      	beq.n	801335a <__multiply+0x132>
 801331a:	6834      	ldr	r4, [r6, #0]
 801331c:	f105 0114 	add.w	r1, r5, #20
 8013320:	46b6      	mov	lr, r6
 8013322:	f04f 0a00 	mov.w	sl, #0
 8013326:	880a      	ldrh	r2, [r1, #0]
 8013328:	f8be b002 	ldrh.w	fp, [lr, #2]
 801332c:	fb09 b202 	mla	r2, r9, r2, fp
 8013330:	4492      	add	sl, r2
 8013332:	b2a4      	uxth	r4, r4
 8013334:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013338:	f84e 4b04 	str.w	r4, [lr], #4
 801333c:	f851 4b04 	ldr.w	r4, [r1], #4
 8013340:	f8be 2000 	ldrh.w	r2, [lr]
 8013344:	0c24      	lsrs	r4, r4, #16
 8013346:	fb09 2404 	mla	r4, r9, r4, r2
 801334a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801334e:	458c      	cmp	ip, r1
 8013350:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013354:	d8e7      	bhi.n	8013326 <__multiply+0xfe>
 8013356:	9a01      	ldr	r2, [sp, #4]
 8013358:	50b4      	str	r4, [r6, r2]
 801335a:	3604      	adds	r6, #4
 801335c:	e7a3      	b.n	80132a6 <__multiply+0x7e>
 801335e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013362:	2b00      	cmp	r3, #0
 8013364:	d1a5      	bne.n	80132b2 <__multiply+0x8a>
 8013366:	3f01      	subs	r7, #1
 8013368:	e7a1      	b.n	80132ae <__multiply+0x86>
 801336a:	bf00      	nop
 801336c:	08016ad8 	.word	0x08016ad8
 8013370:	08016b68 	.word	0x08016b68

08013374 <__pow5mult>:
 8013374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013378:	4615      	mov	r5, r2
 801337a:	f012 0203 	ands.w	r2, r2, #3
 801337e:	4606      	mov	r6, r0
 8013380:	460f      	mov	r7, r1
 8013382:	d007      	beq.n	8013394 <__pow5mult+0x20>
 8013384:	4c25      	ldr	r4, [pc, #148]	; (801341c <__pow5mult+0xa8>)
 8013386:	3a01      	subs	r2, #1
 8013388:	2300      	movs	r3, #0
 801338a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801338e:	f7ff fe51 	bl	8013034 <__multadd>
 8013392:	4607      	mov	r7, r0
 8013394:	10ad      	asrs	r5, r5, #2
 8013396:	d03d      	beq.n	8013414 <__pow5mult+0xa0>
 8013398:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801339a:	b97c      	cbnz	r4, 80133bc <__pow5mult+0x48>
 801339c:	2010      	movs	r0, #16
 801339e:	f7ff fdcd 	bl	8012f3c <malloc>
 80133a2:	4602      	mov	r2, r0
 80133a4:	6270      	str	r0, [r6, #36]	; 0x24
 80133a6:	b928      	cbnz	r0, 80133b4 <__pow5mult+0x40>
 80133a8:	4b1d      	ldr	r3, [pc, #116]	; (8013420 <__pow5mult+0xac>)
 80133aa:	481e      	ldr	r0, [pc, #120]	; (8013424 <__pow5mult+0xb0>)
 80133ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80133b0:	f7fe fba6 	bl	8011b00 <__assert_func>
 80133b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80133b8:	6004      	str	r4, [r0, #0]
 80133ba:	60c4      	str	r4, [r0, #12]
 80133bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80133c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80133c4:	b94c      	cbnz	r4, 80133da <__pow5mult+0x66>
 80133c6:	f240 2171 	movw	r1, #625	; 0x271
 80133ca:	4630      	mov	r0, r6
 80133cc:	f7ff ff16 	bl	80131fc <__i2b>
 80133d0:	2300      	movs	r3, #0
 80133d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80133d6:	4604      	mov	r4, r0
 80133d8:	6003      	str	r3, [r0, #0]
 80133da:	f04f 0900 	mov.w	r9, #0
 80133de:	07eb      	lsls	r3, r5, #31
 80133e0:	d50a      	bpl.n	80133f8 <__pow5mult+0x84>
 80133e2:	4639      	mov	r1, r7
 80133e4:	4622      	mov	r2, r4
 80133e6:	4630      	mov	r0, r6
 80133e8:	f7ff ff1e 	bl	8013228 <__multiply>
 80133ec:	4639      	mov	r1, r7
 80133ee:	4680      	mov	r8, r0
 80133f0:	4630      	mov	r0, r6
 80133f2:	f7ff fdfd 	bl	8012ff0 <_Bfree>
 80133f6:	4647      	mov	r7, r8
 80133f8:	106d      	asrs	r5, r5, #1
 80133fa:	d00b      	beq.n	8013414 <__pow5mult+0xa0>
 80133fc:	6820      	ldr	r0, [r4, #0]
 80133fe:	b938      	cbnz	r0, 8013410 <__pow5mult+0x9c>
 8013400:	4622      	mov	r2, r4
 8013402:	4621      	mov	r1, r4
 8013404:	4630      	mov	r0, r6
 8013406:	f7ff ff0f 	bl	8013228 <__multiply>
 801340a:	6020      	str	r0, [r4, #0]
 801340c:	f8c0 9000 	str.w	r9, [r0]
 8013410:	4604      	mov	r4, r0
 8013412:	e7e4      	b.n	80133de <__pow5mult+0x6a>
 8013414:	4638      	mov	r0, r7
 8013416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801341a:	bf00      	nop
 801341c:	08016cb8 	.word	0x08016cb8
 8013420:	080169b8 	.word	0x080169b8
 8013424:	08016b68 	.word	0x08016b68

08013428 <__lshift>:
 8013428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801342c:	460c      	mov	r4, r1
 801342e:	6849      	ldr	r1, [r1, #4]
 8013430:	6923      	ldr	r3, [r4, #16]
 8013432:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013436:	68a3      	ldr	r3, [r4, #8]
 8013438:	4607      	mov	r7, r0
 801343a:	4691      	mov	r9, r2
 801343c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013440:	f108 0601 	add.w	r6, r8, #1
 8013444:	42b3      	cmp	r3, r6
 8013446:	db0b      	blt.n	8013460 <__lshift+0x38>
 8013448:	4638      	mov	r0, r7
 801344a:	f7ff fd91 	bl	8012f70 <_Balloc>
 801344e:	4605      	mov	r5, r0
 8013450:	b948      	cbnz	r0, 8013466 <__lshift+0x3e>
 8013452:	4602      	mov	r2, r0
 8013454:	4b28      	ldr	r3, [pc, #160]	; (80134f8 <__lshift+0xd0>)
 8013456:	4829      	ldr	r0, [pc, #164]	; (80134fc <__lshift+0xd4>)
 8013458:	f240 11d9 	movw	r1, #473	; 0x1d9
 801345c:	f7fe fb50 	bl	8011b00 <__assert_func>
 8013460:	3101      	adds	r1, #1
 8013462:	005b      	lsls	r3, r3, #1
 8013464:	e7ee      	b.n	8013444 <__lshift+0x1c>
 8013466:	2300      	movs	r3, #0
 8013468:	f100 0114 	add.w	r1, r0, #20
 801346c:	f100 0210 	add.w	r2, r0, #16
 8013470:	4618      	mov	r0, r3
 8013472:	4553      	cmp	r3, sl
 8013474:	db33      	blt.n	80134de <__lshift+0xb6>
 8013476:	6920      	ldr	r0, [r4, #16]
 8013478:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801347c:	f104 0314 	add.w	r3, r4, #20
 8013480:	f019 091f 	ands.w	r9, r9, #31
 8013484:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013488:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801348c:	d02b      	beq.n	80134e6 <__lshift+0xbe>
 801348e:	f1c9 0e20 	rsb	lr, r9, #32
 8013492:	468a      	mov	sl, r1
 8013494:	2200      	movs	r2, #0
 8013496:	6818      	ldr	r0, [r3, #0]
 8013498:	fa00 f009 	lsl.w	r0, r0, r9
 801349c:	4302      	orrs	r2, r0
 801349e:	f84a 2b04 	str.w	r2, [sl], #4
 80134a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80134a6:	459c      	cmp	ip, r3
 80134a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80134ac:	d8f3      	bhi.n	8013496 <__lshift+0x6e>
 80134ae:	ebac 0304 	sub.w	r3, ip, r4
 80134b2:	3b15      	subs	r3, #21
 80134b4:	f023 0303 	bic.w	r3, r3, #3
 80134b8:	3304      	adds	r3, #4
 80134ba:	f104 0015 	add.w	r0, r4, #21
 80134be:	4584      	cmp	ip, r0
 80134c0:	bf38      	it	cc
 80134c2:	2304      	movcc	r3, #4
 80134c4:	50ca      	str	r2, [r1, r3]
 80134c6:	b10a      	cbz	r2, 80134cc <__lshift+0xa4>
 80134c8:	f108 0602 	add.w	r6, r8, #2
 80134cc:	3e01      	subs	r6, #1
 80134ce:	4638      	mov	r0, r7
 80134d0:	612e      	str	r6, [r5, #16]
 80134d2:	4621      	mov	r1, r4
 80134d4:	f7ff fd8c 	bl	8012ff0 <_Bfree>
 80134d8:	4628      	mov	r0, r5
 80134da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134de:	f842 0f04 	str.w	r0, [r2, #4]!
 80134e2:	3301      	adds	r3, #1
 80134e4:	e7c5      	b.n	8013472 <__lshift+0x4a>
 80134e6:	3904      	subs	r1, #4
 80134e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80134ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80134f0:	459c      	cmp	ip, r3
 80134f2:	d8f9      	bhi.n	80134e8 <__lshift+0xc0>
 80134f4:	e7ea      	b.n	80134cc <__lshift+0xa4>
 80134f6:	bf00      	nop
 80134f8:	08016ad8 	.word	0x08016ad8
 80134fc:	08016b68 	.word	0x08016b68

08013500 <__mcmp>:
 8013500:	b530      	push	{r4, r5, lr}
 8013502:	6902      	ldr	r2, [r0, #16]
 8013504:	690c      	ldr	r4, [r1, #16]
 8013506:	1b12      	subs	r2, r2, r4
 8013508:	d10e      	bne.n	8013528 <__mcmp+0x28>
 801350a:	f100 0314 	add.w	r3, r0, #20
 801350e:	3114      	adds	r1, #20
 8013510:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013514:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013518:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801351c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013520:	42a5      	cmp	r5, r4
 8013522:	d003      	beq.n	801352c <__mcmp+0x2c>
 8013524:	d305      	bcc.n	8013532 <__mcmp+0x32>
 8013526:	2201      	movs	r2, #1
 8013528:	4610      	mov	r0, r2
 801352a:	bd30      	pop	{r4, r5, pc}
 801352c:	4283      	cmp	r3, r0
 801352e:	d3f3      	bcc.n	8013518 <__mcmp+0x18>
 8013530:	e7fa      	b.n	8013528 <__mcmp+0x28>
 8013532:	f04f 32ff 	mov.w	r2, #4294967295
 8013536:	e7f7      	b.n	8013528 <__mcmp+0x28>

08013538 <__mdiff>:
 8013538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801353c:	460c      	mov	r4, r1
 801353e:	4606      	mov	r6, r0
 8013540:	4611      	mov	r1, r2
 8013542:	4620      	mov	r0, r4
 8013544:	4617      	mov	r7, r2
 8013546:	f7ff ffdb 	bl	8013500 <__mcmp>
 801354a:	1e05      	subs	r5, r0, #0
 801354c:	d110      	bne.n	8013570 <__mdiff+0x38>
 801354e:	4629      	mov	r1, r5
 8013550:	4630      	mov	r0, r6
 8013552:	f7ff fd0d 	bl	8012f70 <_Balloc>
 8013556:	b930      	cbnz	r0, 8013566 <__mdiff+0x2e>
 8013558:	4b39      	ldr	r3, [pc, #228]	; (8013640 <__mdiff+0x108>)
 801355a:	4602      	mov	r2, r0
 801355c:	f240 2132 	movw	r1, #562	; 0x232
 8013560:	4838      	ldr	r0, [pc, #224]	; (8013644 <__mdiff+0x10c>)
 8013562:	f7fe facd 	bl	8011b00 <__assert_func>
 8013566:	2301      	movs	r3, #1
 8013568:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801356c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013570:	bfa4      	itt	ge
 8013572:	463b      	movge	r3, r7
 8013574:	4627      	movge	r7, r4
 8013576:	4630      	mov	r0, r6
 8013578:	6879      	ldr	r1, [r7, #4]
 801357a:	bfa6      	itte	ge
 801357c:	461c      	movge	r4, r3
 801357e:	2500      	movge	r5, #0
 8013580:	2501      	movlt	r5, #1
 8013582:	f7ff fcf5 	bl	8012f70 <_Balloc>
 8013586:	b920      	cbnz	r0, 8013592 <__mdiff+0x5a>
 8013588:	4b2d      	ldr	r3, [pc, #180]	; (8013640 <__mdiff+0x108>)
 801358a:	4602      	mov	r2, r0
 801358c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013590:	e7e6      	b.n	8013560 <__mdiff+0x28>
 8013592:	693e      	ldr	r6, [r7, #16]
 8013594:	60c5      	str	r5, [r0, #12]
 8013596:	6925      	ldr	r5, [r4, #16]
 8013598:	f107 0114 	add.w	r1, r7, #20
 801359c:	f104 0914 	add.w	r9, r4, #20
 80135a0:	f100 0e14 	add.w	lr, r0, #20
 80135a4:	f107 0210 	add.w	r2, r7, #16
 80135a8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80135ac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80135b0:	46f2      	mov	sl, lr
 80135b2:	2700      	movs	r7, #0
 80135b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80135b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80135bc:	fa1f f883 	uxth.w	r8, r3
 80135c0:	fa17 f78b 	uxtah	r7, r7, fp
 80135c4:	0c1b      	lsrs	r3, r3, #16
 80135c6:	eba7 0808 	sub.w	r8, r7, r8
 80135ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80135ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80135d2:	fa1f f888 	uxth.w	r8, r8
 80135d6:	141f      	asrs	r7, r3, #16
 80135d8:	454d      	cmp	r5, r9
 80135da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80135de:	f84a 3b04 	str.w	r3, [sl], #4
 80135e2:	d8e7      	bhi.n	80135b4 <__mdiff+0x7c>
 80135e4:	1b2b      	subs	r3, r5, r4
 80135e6:	3b15      	subs	r3, #21
 80135e8:	f023 0303 	bic.w	r3, r3, #3
 80135ec:	3304      	adds	r3, #4
 80135ee:	3415      	adds	r4, #21
 80135f0:	42a5      	cmp	r5, r4
 80135f2:	bf38      	it	cc
 80135f4:	2304      	movcc	r3, #4
 80135f6:	4419      	add	r1, r3
 80135f8:	4473      	add	r3, lr
 80135fa:	469e      	mov	lr, r3
 80135fc:	460d      	mov	r5, r1
 80135fe:	4565      	cmp	r5, ip
 8013600:	d30e      	bcc.n	8013620 <__mdiff+0xe8>
 8013602:	f10c 0203 	add.w	r2, ip, #3
 8013606:	1a52      	subs	r2, r2, r1
 8013608:	f022 0203 	bic.w	r2, r2, #3
 801360c:	3903      	subs	r1, #3
 801360e:	458c      	cmp	ip, r1
 8013610:	bf38      	it	cc
 8013612:	2200      	movcc	r2, #0
 8013614:	441a      	add	r2, r3
 8013616:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801361a:	b17b      	cbz	r3, 801363c <__mdiff+0x104>
 801361c:	6106      	str	r6, [r0, #16]
 801361e:	e7a5      	b.n	801356c <__mdiff+0x34>
 8013620:	f855 8b04 	ldr.w	r8, [r5], #4
 8013624:	fa17 f488 	uxtah	r4, r7, r8
 8013628:	1422      	asrs	r2, r4, #16
 801362a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801362e:	b2a4      	uxth	r4, r4
 8013630:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013634:	f84e 4b04 	str.w	r4, [lr], #4
 8013638:	1417      	asrs	r7, r2, #16
 801363a:	e7e0      	b.n	80135fe <__mdiff+0xc6>
 801363c:	3e01      	subs	r6, #1
 801363e:	e7ea      	b.n	8013616 <__mdiff+0xde>
 8013640:	08016ad8 	.word	0x08016ad8
 8013644:	08016b68 	.word	0x08016b68

08013648 <__ulp>:
 8013648:	b082      	sub	sp, #8
 801364a:	ed8d 0b00 	vstr	d0, [sp]
 801364e:	9b01      	ldr	r3, [sp, #4]
 8013650:	4912      	ldr	r1, [pc, #72]	; (801369c <__ulp+0x54>)
 8013652:	4019      	ands	r1, r3
 8013654:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013658:	2900      	cmp	r1, #0
 801365a:	dd05      	ble.n	8013668 <__ulp+0x20>
 801365c:	2200      	movs	r2, #0
 801365e:	460b      	mov	r3, r1
 8013660:	ec43 2b10 	vmov	d0, r2, r3
 8013664:	b002      	add	sp, #8
 8013666:	4770      	bx	lr
 8013668:	4249      	negs	r1, r1
 801366a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801366e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013672:	f04f 0200 	mov.w	r2, #0
 8013676:	f04f 0300 	mov.w	r3, #0
 801367a:	da04      	bge.n	8013686 <__ulp+0x3e>
 801367c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013680:	fa41 f300 	asr.w	r3, r1, r0
 8013684:	e7ec      	b.n	8013660 <__ulp+0x18>
 8013686:	f1a0 0114 	sub.w	r1, r0, #20
 801368a:	291e      	cmp	r1, #30
 801368c:	bfda      	itte	le
 801368e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013692:	fa20 f101 	lsrle.w	r1, r0, r1
 8013696:	2101      	movgt	r1, #1
 8013698:	460a      	mov	r2, r1
 801369a:	e7e1      	b.n	8013660 <__ulp+0x18>
 801369c:	7ff00000 	.word	0x7ff00000

080136a0 <__b2d>:
 80136a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136a2:	6905      	ldr	r5, [r0, #16]
 80136a4:	f100 0714 	add.w	r7, r0, #20
 80136a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80136ac:	1f2e      	subs	r6, r5, #4
 80136ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80136b2:	4620      	mov	r0, r4
 80136b4:	f7ff fd52 	bl	801315c <__hi0bits>
 80136b8:	f1c0 0320 	rsb	r3, r0, #32
 80136bc:	280a      	cmp	r0, #10
 80136be:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801373c <__b2d+0x9c>
 80136c2:	600b      	str	r3, [r1, #0]
 80136c4:	dc14      	bgt.n	80136f0 <__b2d+0x50>
 80136c6:	f1c0 0e0b 	rsb	lr, r0, #11
 80136ca:	fa24 f10e 	lsr.w	r1, r4, lr
 80136ce:	42b7      	cmp	r7, r6
 80136d0:	ea41 030c 	orr.w	r3, r1, ip
 80136d4:	bf34      	ite	cc
 80136d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80136da:	2100      	movcs	r1, #0
 80136dc:	3015      	adds	r0, #21
 80136de:	fa04 f000 	lsl.w	r0, r4, r0
 80136e2:	fa21 f10e 	lsr.w	r1, r1, lr
 80136e6:	ea40 0201 	orr.w	r2, r0, r1
 80136ea:	ec43 2b10 	vmov	d0, r2, r3
 80136ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136f0:	42b7      	cmp	r7, r6
 80136f2:	bf3a      	itte	cc
 80136f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80136f8:	f1a5 0608 	subcc.w	r6, r5, #8
 80136fc:	2100      	movcs	r1, #0
 80136fe:	380b      	subs	r0, #11
 8013700:	d017      	beq.n	8013732 <__b2d+0x92>
 8013702:	f1c0 0c20 	rsb	ip, r0, #32
 8013706:	fa04 f500 	lsl.w	r5, r4, r0
 801370a:	42be      	cmp	r6, r7
 801370c:	fa21 f40c 	lsr.w	r4, r1, ip
 8013710:	ea45 0504 	orr.w	r5, r5, r4
 8013714:	bf8c      	ite	hi
 8013716:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801371a:	2400      	movls	r4, #0
 801371c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013720:	fa01 f000 	lsl.w	r0, r1, r0
 8013724:	fa24 f40c 	lsr.w	r4, r4, ip
 8013728:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801372c:	ea40 0204 	orr.w	r2, r0, r4
 8013730:	e7db      	b.n	80136ea <__b2d+0x4a>
 8013732:	ea44 030c 	orr.w	r3, r4, ip
 8013736:	460a      	mov	r2, r1
 8013738:	e7d7      	b.n	80136ea <__b2d+0x4a>
 801373a:	bf00      	nop
 801373c:	3ff00000 	.word	0x3ff00000

08013740 <__d2b>:
 8013740:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013744:	4689      	mov	r9, r1
 8013746:	2101      	movs	r1, #1
 8013748:	ec57 6b10 	vmov	r6, r7, d0
 801374c:	4690      	mov	r8, r2
 801374e:	f7ff fc0f 	bl	8012f70 <_Balloc>
 8013752:	4604      	mov	r4, r0
 8013754:	b930      	cbnz	r0, 8013764 <__d2b+0x24>
 8013756:	4602      	mov	r2, r0
 8013758:	4b25      	ldr	r3, [pc, #148]	; (80137f0 <__d2b+0xb0>)
 801375a:	4826      	ldr	r0, [pc, #152]	; (80137f4 <__d2b+0xb4>)
 801375c:	f240 310a 	movw	r1, #778	; 0x30a
 8013760:	f7fe f9ce 	bl	8011b00 <__assert_func>
 8013764:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013768:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801376c:	bb35      	cbnz	r5, 80137bc <__d2b+0x7c>
 801376e:	2e00      	cmp	r6, #0
 8013770:	9301      	str	r3, [sp, #4]
 8013772:	d028      	beq.n	80137c6 <__d2b+0x86>
 8013774:	4668      	mov	r0, sp
 8013776:	9600      	str	r6, [sp, #0]
 8013778:	f7ff fd10 	bl	801319c <__lo0bits>
 801377c:	9900      	ldr	r1, [sp, #0]
 801377e:	b300      	cbz	r0, 80137c2 <__d2b+0x82>
 8013780:	9a01      	ldr	r2, [sp, #4]
 8013782:	f1c0 0320 	rsb	r3, r0, #32
 8013786:	fa02 f303 	lsl.w	r3, r2, r3
 801378a:	430b      	orrs	r3, r1
 801378c:	40c2      	lsrs	r2, r0
 801378e:	6163      	str	r3, [r4, #20]
 8013790:	9201      	str	r2, [sp, #4]
 8013792:	9b01      	ldr	r3, [sp, #4]
 8013794:	61a3      	str	r3, [r4, #24]
 8013796:	2b00      	cmp	r3, #0
 8013798:	bf14      	ite	ne
 801379a:	2202      	movne	r2, #2
 801379c:	2201      	moveq	r2, #1
 801379e:	6122      	str	r2, [r4, #16]
 80137a0:	b1d5      	cbz	r5, 80137d8 <__d2b+0x98>
 80137a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80137a6:	4405      	add	r5, r0
 80137a8:	f8c9 5000 	str.w	r5, [r9]
 80137ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80137b0:	f8c8 0000 	str.w	r0, [r8]
 80137b4:	4620      	mov	r0, r4
 80137b6:	b003      	add	sp, #12
 80137b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80137c0:	e7d5      	b.n	801376e <__d2b+0x2e>
 80137c2:	6161      	str	r1, [r4, #20]
 80137c4:	e7e5      	b.n	8013792 <__d2b+0x52>
 80137c6:	a801      	add	r0, sp, #4
 80137c8:	f7ff fce8 	bl	801319c <__lo0bits>
 80137cc:	9b01      	ldr	r3, [sp, #4]
 80137ce:	6163      	str	r3, [r4, #20]
 80137d0:	2201      	movs	r2, #1
 80137d2:	6122      	str	r2, [r4, #16]
 80137d4:	3020      	adds	r0, #32
 80137d6:	e7e3      	b.n	80137a0 <__d2b+0x60>
 80137d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80137dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80137e0:	f8c9 0000 	str.w	r0, [r9]
 80137e4:	6918      	ldr	r0, [r3, #16]
 80137e6:	f7ff fcb9 	bl	801315c <__hi0bits>
 80137ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80137ee:	e7df      	b.n	80137b0 <__d2b+0x70>
 80137f0:	08016ad8 	.word	0x08016ad8
 80137f4:	08016b68 	.word	0x08016b68

080137f8 <__ratio>:
 80137f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137fc:	4688      	mov	r8, r1
 80137fe:	4669      	mov	r1, sp
 8013800:	4681      	mov	r9, r0
 8013802:	f7ff ff4d 	bl	80136a0 <__b2d>
 8013806:	a901      	add	r1, sp, #4
 8013808:	4640      	mov	r0, r8
 801380a:	ec55 4b10 	vmov	r4, r5, d0
 801380e:	f7ff ff47 	bl	80136a0 <__b2d>
 8013812:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013816:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801381a:	eba3 0c02 	sub.w	ip, r3, r2
 801381e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013822:	1a9b      	subs	r3, r3, r2
 8013824:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013828:	ec51 0b10 	vmov	r0, r1, d0
 801382c:	2b00      	cmp	r3, #0
 801382e:	bfd6      	itet	le
 8013830:	460a      	movle	r2, r1
 8013832:	462a      	movgt	r2, r5
 8013834:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013838:	468b      	mov	fp, r1
 801383a:	462f      	mov	r7, r5
 801383c:	bfd4      	ite	le
 801383e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013842:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013846:	4620      	mov	r0, r4
 8013848:	ee10 2a10 	vmov	r2, s0
 801384c:	465b      	mov	r3, fp
 801384e:	4639      	mov	r1, r7
 8013850:	f7ed f804 	bl	800085c <__aeabi_ddiv>
 8013854:	ec41 0b10 	vmov	d0, r0, r1
 8013858:	b003      	add	sp, #12
 801385a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801385e <__copybits>:
 801385e:	3901      	subs	r1, #1
 8013860:	b570      	push	{r4, r5, r6, lr}
 8013862:	1149      	asrs	r1, r1, #5
 8013864:	6914      	ldr	r4, [r2, #16]
 8013866:	3101      	adds	r1, #1
 8013868:	f102 0314 	add.w	r3, r2, #20
 801386c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013870:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013874:	1f05      	subs	r5, r0, #4
 8013876:	42a3      	cmp	r3, r4
 8013878:	d30c      	bcc.n	8013894 <__copybits+0x36>
 801387a:	1aa3      	subs	r3, r4, r2
 801387c:	3b11      	subs	r3, #17
 801387e:	f023 0303 	bic.w	r3, r3, #3
 8013882:	3211      	adds	r2, #17
 8013884:	42a2      	cmp	r2, r4
 8013886:	bf88      	it	hi
 8013888:	2300      	movhi	r3, #0
 801388a:	4418      	add	r0, r3
 801388c:	2300      	movs	r3, #0
 801388e:	4288      	cmp	r0, r1
 8013890:	d305      	bcc.n	801389e <__copybits+0x40>
 8013892:	bd70      	pop	{r4, r5, r6, pc}
 8013894:	f853 6b04 	ldr.w	r6, [r3], #4
 8013898:	f845 6f04 	str.w	r6, [r5, #4]!
 801389c:	e7eb      	b.n	8013876 <__copybits+0x18>
 801389e:	f840 3b04 	str.w	r3, [r0], #4
 80138a2:	e7f4      	b.n	801388e <__copybits+0x30>

080138a4 <__any_on>:
 80138a4:	f100 0214 	add.w	r2, r0, #20
 80138a8:	6900      	ldr	r0, [r0, #16]
 80138aa:	114b      	asrs	r3, r1, #5
 80138ac:	4298      	cmp	r0, r3
 80138ae:	b510      	push	{r4, lr}
 80138b0:	db11      	blt.n	80138d6 <__any_on+0x32>
 80138b2:	dd0a      	ble.n	80138ca <__any_on+0x26>
 80138b4:	f011 011f 	ands.w	r1, r1, #31
 80138b8:	d007      	beq.n	80138ca <__any_on+0x26>
 80138ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80138be:	fa24 f001 	lsr.w	r0, r4, r1
 80138c2:	fa00 f101 	lsl.w	r1, r0, r1
 80138c6:	428c      	cmp	r4, r1
 80138c8:	d10b      	bne.n	80138e2 <__any_on+0x3e>
 80138ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80138ce:	4293      	cmp	r3, r2
 80138d0:	d803      	bhi.n	80138da <__any_on+0x36>
 80138d2:	2000      	movs	r0, #0
 80138d4:	bd10      	pop	{r4, pc}
 80138d6:	4603      	mov	r3, r0
 80138d8:	e7f7      	b.n	80138ca <__any_on+0x26>
 80138da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80138de:	2900      	cmp	r1, #0
 80138e0:	d0f5      	beq.n	80138ce <__any_on+0x2a>
 80138e2:	2001      	movs	r0, #1
 80138e4:	e7f6      	b.n	80138d4 <__any_on+0x30>

080138e6 <_calloc_r>:
 80138e6:	b513      	push	{r0, r1, r4, lr}
 80138e8:	434a      	muls	r2, r1
 80138ea:	4611      	mov	r1, r2
 80138ec:	9201      	str	r2, [sp, #4]
 80138ee:	f000 f859 	bl	80139a4 <_malloc_r>
 80138f2:	4604      	mov	r4, r0
 80138f4:	b118      	cbz	r0, 80138fe <_calloc_r+0x18>
 80138f6:	9a01      	ldr	r2, [sp, #4]
 80138f8:	2100      	movs	r1, #0
 80138fa:	f7fc fd03 	bl	8010304 <memset>
 80138fe:	4620      	mov	r0, r4
 8013900:	b002      	add	sp, #8
 8013902:	bd10      	pop	{r4, pc}

08013904 <_free_r>:
 8013904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013906:	2900      	cmp	r1, #0
 8013908:	d048      	beq.n	801399c <_free_r+0x98>
 801390a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801390e:	9001      	str	r0, [sp, #4]
 8013910:	2b00      	cmp	r3, #0
 8013912:	f1a1 0404 	sub.w	r4, r1, #4
 8013916:	bfb8      	it	lt
 8013918:	18e4      	addlt	r4, r4, r3
 801391a:	f000 fe8d 	bl	8014638 <__malloc_lock>
 801391e:	4a20      	ldr	r2, [pc, #128]	; (80139a0 <_free_r+0x9c>)
 8013920:	9801      	ldr	r0, [sp, #4]
 8013922:	6813      	ldr	r3, [r2, #0]
 8013924:	4615      	mov	r5, r2
 8013926:	b933      	cbnz	r3, 8013936 <_free_r+0x32>
 8013928:	6063      	str	r3, [r4, #4]
 801392a:	6014      	str	r4, [r2, #0]
 801392c:	b003      	add	sp, #12
 801392e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013932:	f000 be87 	b.w	8014644 <__malloc_unlock>
 8013936:	42a3      	cmp	r3, r4
 8013938:	d90b      	bls.n	8013952 <_free_r+0x4e>
 801393a:	6821      	ldr	r1, [r4, #0]
 801393c:	1862      	adds	r2, r4, r1
 801393e:	4293      	cmp	r3, r2
 8013940:	bf04      	itt	eq
 8013942:	681a      	ldreq	r2, [r3, #0]
 8013944:	685b      	ldreq	r3, [r3, #4]
 8013946:	6063      	str	r3, [r4, #4]
 8013948:	bf04      	itt	eq
 801394a:	1852      	addeq	r2, r2, r1
 801394c:	6022      	streq	r2, [r4, #0]
 801394e:	602c      	str	r4, [r5, #0]
 8013950:	e7ec      	b.n	801392c <_free_r+0x28>
 8013952:	461a      	mov	r2, r3
 8013954:	685b      	ldr	r3, [r3, #4]
 8013956:	b10b      	cbz	r3, 801395c <_free_r+0x58>
 8013958:	42a3      	cmp	r3, r4
 801395a:	d9fa      	bls.n	8013952 <_free_r+0x4e>
 801395c:	6811      	ldr	r1, [r2, #0]
 801395e:	1855      	adds	r5, r2, r1
 8013960:	42a5      	cmp	r5, r4
 8013962:	d10b      	bne.n	801397c <_free_r+0x78>
 8013964:	6824      	ldr	r4, [r4, #0]
 8013966:	4421      	add	r1, r4
 8013968:	1854      	adds	r4, r2, r1
 801396a:	42a3      	cmp	r3, r4
 801396c:	6011      	str	r1, [r2, #0]
 801396e:	d1dd      	bne.n	801392c <_free_r+0x28>
 8013970:	681c      	ldr	r4, [r3, #0]
 8013972:	685b      	ldr	r3, [r3, #4]
 8013974:	6053      	str	r3, [r2, #4]
 8013976:	4421      	add	r1, r4
 8013978:	6011      	str	r1, [r2, #0]
 801397a:	e7d7      	b.n	801392c <_free_r+0x28>
 801397c:	d902      	bls.n	8013984 <_free_r+0x80>
 801397e:	230c      	movs	r3, #12
 8013980:	6003      	str	r3, [r0, #0]
 8013982:	e7d3      	b.n	801392c <_free_r+0x28>
 8013984:	6825      	ldr	r5, [r4, #0]
 8013986:	1961      	adds	r1, r4, r5
 8013988:	428b      	cmp	r3, r1
 801398a:	bf04      	itt	eq
 801398c:	6819      	ldreq	r1, [r3, #0]
 801398e:	685b      	ldreq	r3, [r3, #4]
 8013990:	6063      	str	r3, [r4, #4]
 8013992:	bf04      	itt	eq
 8013994:	1949      	addeq	r1, r1, r5
 8013996:	6021      	streq	r1, [r4, #0]
 8013998:	6054      	str	r4, [r2, #4]
 801399a:	e7c7      	b.n	801392c <_free_r+0x28>
 801399c:	b003      	add	sp, #12
 801399e:	bd30      	pop	{r4, r5, pc}
 80139a0:	200072e8 	.word	0x200072e8

080139a4 <_malloc_r>:
 80139a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139a6:	1ccd      	adds	r5, r1, #3
 80139a8:	f025 0503 	bic.w	r5, r5, #3
 80139ac:	3508      	adds	r5, #8
 80139ae:	2d0c      	cmp	r5, #12
 80139b0:	bf38      	it	cc
 80139b2:	250c      	movcc	r5, #12
 80139b4:	2d00      	cmp	r5, #0
 80139b6:	4606      	mov	r6, r0
 80139b8:	db01      	blt.n	80139be <_malloc_r+0x1a>
 80139ba:	42a9      	cmp	r1, r5
 80139bc:	d903      	bls.n	80139c6 <_malloc_r+0x22>
 80139be:	230c      	movs	r3, #12
 80139c0:	6033      	str	r3, [r6, #0]
 80139c2:	2000      	movs	r0, #0
 80139c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139c6:	f000 fe37 	bl	8014638 <__malloc_lock>
 80139ca:	4921      	ldr	r1, [pc, #132]	; (8013a50 <_malloc_r+0xac>)
 80139cc:	680a      	ldr	r2, [r1, #0]
 80139ce:	4614      	mov	r4, r2
 80139d0:	b99c      	cbnz	r4, 80139fa <_malloc_r+0x56>
 80139d2:	4f20      	ldr	r7, [pc, #128]	; (8013a54 <_malloc_r+0xb0>)
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	b923      	cbnz	r3, 80139e2 <_malloc_r+0x3e>
 80139d8:	4621      	mov	r1, r4
 80139da:	4630      	mov	r0, r6
 80139dc:	f000 fafc 	bl	8013fd8 <_sbrk_r>
 80139e0:	6038      	str	r0, [r7, #0]
 80139e2:	4629      	mov	r1, r5
 80139e4:	4630      	mov	r0, r6
 80139e6:	f000 faf7 	bl	8013fd8 <_sbrk_r>
 80139ea:	1c43      	adds	r3, r0, #1
 80139ec:	d123      	bne.n	8013a36 <_malloc_r+0x92>
 80139ee:	230c      	movs	r3, #12
 80139f0:	6033      	str	r3, [r6, #0]
 80139f2:	4630      	mov	r0, r6
 80139f4:	f000 fe26 	bl	8014644 <__malloc_unlock>
 80139f8:	e7e3      	b.n	80139c2 <_malloc_r+0x1e>
 80139fa:	6823      	ldr	r3, [r4, #0]
 80139fc:	1b5b      	subs	r3, r3, r5
 80139fe:	d417      	bmi.n	8013a30 <_malloc_r+0x8c>
 8013a00:	2b0b      	cmp	r3, #11
 8013a02:	d903      	bls.n	8013a0c <_malloc_r+0x68>
 8013a04:	6023      	str	r3, [r4, #0]
 8013a06:	441c      	add	r4, r3
 8013a08:	6025      	str	r5, [r4, #0]
 8013a0a:	e004      	b.n	8013a16 <_malloc_r+0x72>
 8013a0c:	6863      	ldr	r3, [r4, #4]
 8013a0e:	42a2      	cmp	r2, r4
 8013a10:	bf0c      	ite	eq
 8013a12:	600b      	streq	r3, [r1, #0]
 8013a14:	6053      	strne	r3, [r2, #4]
 8013a16:	4630      	mov	r0, r6
 8013a18:	f000 fe14 	bl	8014644 <__malloc_unlock>
 8013a1c:	f104 000b 	add.w	r0, r4, #11
 8013a20:	1d23      	adds	r3, r4, #4
 8013a22:	f020 0007 	bic.w	r0, r0, #7
 8013a26:	1ac2      	subs	r2, r0, r3
 8013a28:	d0cc      	beq.n	80139c4 <_malloc_r+0x20>
 8013a2a:	1a1b      	subs	r3, r3, r0
 8013a2c:	50a3      	str	r3, [r4, r2]
 8013a2e:	e7c9      	b.n	80139c4 <_malloc_r+0x20>
 8013a30:	4622      	mov	r2, r4
 8013a32:	6864      	ldr	r4, [r4, #4]
 8013a34:	e7cc      	b.n	80139d0 <_malloc_r+0x2c>
 8013a36:	1cc4      	adds	r4, r0, #3
 8013a38:	f024 0403 	bic.w	r4, r4, #3
 8013a3c:	42a0      	cmp	r0, r4
 8013a3e:	d0e3      	beq.n	8013a08 <_malloc_r+0x64>
 8013a40:	1a21      	subs	r1, r4, r0
 8013a42:	4630      	mov	r0, r6
 8013a44:	f000 fac8 	bl	8013fd8 <_sbrk_r>
 8013a48:	3001      	adds	r0, #1
 8013a4a:	d1dd      	bne.n	8013a08 <_malloc_r+0x64>
 8013a4c:	e7cf      	b.n	80139ee <_malloc_r+0x4a>
 8013a4e:	bf00      	nop
 8013a50:	200072e8 	.word	0x200072e8
 8013a54:	200072ec 	.word	0x200072ec

08013a58 <__ssputs_r>:
 8013a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a5c:	688e      	ldr	r6, [r1, #8]
 8013a5e:	429e      	cmp	r6, r3
 8013a60:	4682      	mov	sl, r0
 8013a62:	460c      	mov	r4, r1
 8013a64:	4690      	mov	r8, r2
 8013a66:	461f      	mov	r7, r3
 8013a68:	d838      	bhi.n	8013adc <__ssputs_r+0x84>
 8013a6a:	898a      	ldrh	r2, [r1, #12]
 8013a6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013a70:	d032      	beq.n	8013ad8 <__ssputs_r+0x80>
 8013a72:	6825      	ldr	r5, [r4, #0]
 8013a74:	6909      	ldr	r1, [r1, #16]
 8013a76:	eba5 0901 	sub.w	r9, r5, r1
 8013a7a:	6965      	ldr	r5, [r4, #20]
 8013a7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013a84:	3301      	adds	r3, #1
 8013a86:	444b      	add	r3, r9
 8013a88:	106d      	asrs	r5, r5, #1
 8013a8a:	429d      	cmp	r5, r3
 8013a8c:	bf38      	it	cc
 8013a8e:	461d      	movcc	r5, r3
 8013a90:	0553      	lsls	r3, r2, #21
 8013a92:	d531      	bpl.n	8013af8 <__ssputs_r+0xa0>
 8013a94:	4629      	mov	r1, r5
 8013a96:	f7ff ff85 	bl	80139a4 <_malloc_r>
 8013a9a:	4606      	mov	r6, r0
 8013a9c:	b950      	cbnz	r0, 8013ab4 <__ssputs_r+0x5c>
 8013a9e:	230c      	movs	r3, #12
 8013aa0:	f8ca 3000 	str.w	r3, [sl]
 8013aa4:	89a3      	ldrh	r3, [r4, #12]
 8013aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013aaa:	81a3      	strh	r3, [r4, #12]
 8013aac:	f04f 30ff 	mov.w	r0, #4294967295
 8013ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ab4:	6921      	ldr	r1, [r4, #16]
 8013ab6:	464a      	mov	r2, r9
 8013ab8:	f7fc fc16 	bl	80102e8 <memcpy>
 8013abc:	89a3      	ldrh	r3, [r4, #12]
 8013abe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ac6:	81a3      	strh	r3, [r4, #12]
 8013ac8:	6126      	str	r6, [r4, #16]
 8013aca:	6165      	str	r5, [r4, #20]
 8013acc:	444e      	add	r6, r9
 8013ace:	eba5 0509 	sub.w	r5, r5, r9
 8013ad2:	6026      	str	r6, [r4, #0]
 8013ad4:	60a5      	str	r5, [r4, #8]
 8013ad6:	463e      	mov	r6, r7
 8013ad8:	42be      	cmp	r6, r7
 8013ada:	d900      	bls.n	8013ade <__ssputs_r+0x86>
 8013adc:	463e      	mov	r6, r7
 8013ade:	4632      	mov	r2, r6
 8013ae0:	6820      	ldr	r0, [r4, #0]
 8013ae2:	4641      	mov	r1, r8
 8013ae4:	f000 fd8e 	bl	8014604 <memmove>
 8013ae8:	68a3      	ldr	r3, [r4, #8]
 8013aea:	6822      	ldr	r2, [r4, #0]
 8013aec:	1b9b      	subs	r3, r3, r6
 8013aee:	4432      	add	r2, r6
 8013af0:	60a3      	str	r3, [r4, #8]
 8013af2:	6022      	str	r2, [r4, #0]
 8013af4:	2000      	movs	r0, #0
 8013af6:	e7db      	b.n	8013ab0 <__ssputs_r+0x58>
 8013af8:	462a      	mov	r2, r5
 8013afa:	f000 fda9 	bl	8014650 <_realloc_r>
 8013afe:	4606      	mov	r6, r0
 8013b00:	2800      	cmp	r0, #0
 8013b02:	d1e1      	bne.n	8013ac8 <__ssputs_r+0x70>
 8013b04:	6921      	ldr	r1, [r4, #16]
 8013b06:	4650      	mov	r0, sl
 8013b08:	f7ff fefc 	bl	8013904 <_free_r>
 8013b0c:	e7c7      	b.n	8013a9e <__ssputs_r+0x46>
	...

08013b10 <_svfiprintf_r>:
 8013b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b14:	4698      	mov	r8, r3
 8013b16:	898b      	ldrh	r3, [r1, #12]
 8013b18:	061b      	lsls	r3, r3, #24
 8013b1a:	b09d      	sub	sp, #116	; 0x74
 8013b1c:	4607      	mov	r7, r0
 8013b1e:	460d      	mov	r5, r1
 8013b20:	4614      	mov	r4, r2
 8013b22:	d50e      	bpl.n	8013b42 <_svfiprintf_r+0x32>
 8013b24:	690b      	ldr	r3, [r1, #16]
 8013b26:	b963      	cbnz	r3, 8013b42 <_svfiprintf_r+0x32>
 8013b28:	2140      	movs	r1, #64	; 0x40
 8013b2a:	f7ff ff3b 	bl	80139a4 <_malloc_r>
 8013b2e:	6028      	str	r0, [r5, #0]
 8013b30:	6128      	str	r0, [r5, #16]
 8013b32:	b920      	cbnz	r0, 8013b3e <_svfiprintf_r+0x2e>
 8013b34:	230c      	movs	r3, #12
 8013b36:	603b      	str	r3, [r7, #0]
 8013b38:	f04f 30ff 	mov.w	r0, #4294967295
 8013b3c:	e0d1      	b.n	8013ce2 <_svfiprintf_r+0x1d2>
 8013b3e:	2340      	movs	r3, #64	; 0x40
 8013b40:	616b      	str	r3, [r5, #20]
 8013b42:	2300      	movs	r3, #0
 8013b44:	9309      	str	r3, [sp, #36]	; 0x24
 8013b46:	2320      	movs	r3, #32
 8013b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b50:	2330      	movs	r3, #48	; 0x30
 8013b52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013cfc <_svfiprintf_r+0x1ec>
 8013b56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b5a:	f04f 0901 	mov.w	r9, #1
 8013b5e:	4623      	mov	r3, r4
 8013b60:	469a      	mov	sl, r3
 8013b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b66:	b10a      	cbz	r2, 8013b6c <_svfiprintf_r+0x5c>
 8013b68:	2a25      	cmp	r2, #37	; 0x25
 8013b6a:	d1f9      	bne.n	8013b60 <_svfiprintf_r+0x50>
 8013b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8013b70:	d00b      	beq.n	8013b8a <_svfiprintf_r+0x7a>
 8013b72:	465b      	mov	r3, fp
 8013b74:	4622      	mov	r2, r4
 8013b76:	4629      	mov	r1, r5
 8013b78:	4638      	mov	r0, r7
 8013b7a:	f7ff ff6d 	bl	8013a58 <__ssputs_r>
 8013b7e:	3001      	adds	r0, #1
 8013b80:	f000 80aa 	beq.w	8013cd8 <_svfiprintf_r+0x1c8>
 8013b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b86:	445a      	add	r2, fp
 8013b88:	9209      	str	r2, [sp, #36]	; 0x24
 8013b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	f000 80a2 	beq.w	8013cd8 <_svfiprintf_r+0x1c8>
 8013b94:	2300      	movs	r3, #0
 8013b96:	f04f 32ff 	mov.w	r2, #4294967295
 8013b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b9e:	f10a 0a01 	add.w	sl, sl, #1
 8013ba2:	9304      	str	r3, [sp, #16]
 8013ba4:	9307      	str	r3, [sp, #28]
 8013ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013baa:	931a      	str	r3, [sp, #104]	; 0x68
 8013bac:	4654      	mov	r4, sl
 8013bae:	2205      	movs	r2, #5
 8013bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bb4:	4851      	ldr	r0, [pc, #324]	; (8013cfc <_svfiprintf_r+0x1ec>)
 8013bb6:	f7ec fb1b 	bl	80001f0 <memchr>
 8013bba:	9a04      	ldr	r2, [sp, #16]
 8013bbc:	b9d8      	cbnz	r0, 8013bf6 <_svfiprintf_r+0xe6>
 8013bbe:	06d0      	lsls	r0, r2, #27
 8013bc0:	bf44      	itt	mi
 8013bc2:	2320      	movmi	r3, #32
 8013bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013bc8:	0711      	lsls	r1, r2, #28
 8013bca:	bf44      	itt	mi
 8013bcc:	232b      	movmi	r3, #43	; 0x2b
 8013bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8013bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8013bd8:	d015      	beq.n	8013c06 <_svfiprintf_r+0xf6>
 8013bda:	9a07      	ldr	r2, [sp, #28]
 8013bdc:	4654      	mov	r4, sl
 8013bde:	2000      	movs	r0, #0
 8013be0:	f04f 0c0a 	mov.w	ip, #10
 8013be4:	4621      	mov	r1, r4
 8013be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013bea:	3b30      	subs	r3, #48	; 0x30
 8013bec:	2b09      	cmp	r3, #9
 8013bee:	d94e      	bls.n	8013c8e <_svfiprintf_r+0x17e>
 8013bf0:	b1b0      	cbz	r0, 8013c20 <_svfiprintf_r+0x110>
 8013bf2:	9207      	str	r2, [sp, #28]
 8013bf4:	e014      	b.n	8013c20 <_svfiprintf_r+0x110>
 8013bf6:	eba0 0308 	sub.w	r3, r0, r8
 8013bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8013bfe:	4313      	orrs	r3, r2
 8013c00:	9304      	str	r3, [sp, #16]
 8013c02:	46a2      	mov	sl, r4
 8013c04:	e7d2      	b.n	8013bac <_svfiprintf_r+0x9c>
 8013c06:	9b03      	ldr	r3, [sp, #12]
 8013c08:	1d19      	adds	r1, r3, #4
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	9103      	str	r1, [sp, #12]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	bfbb      	ittet	lt
 8013c12:	425b      	neglt	r3, r3
 8013c14:	f042 0202 	orrlt.w	r2, r2, #2
 8013c18:	9307      	strge	r3, [sp, #28]
 8013c1a:	9307      	strlt	r3, [sp, #28]
 8013c1c:	bfb8      	it	lt
 8013c1e:	9204      	strlt	r2, [sp, #16]
 8013c20:	7823      	ldrb	r3, [r4, #0]
 8013c22:	2b2e      	cmp	r3, #46	; 0x2e
 8013c24:	d10c      	bne.n	8013c40 <_svfiprintf_r+0x130>
 8013c26:	7863      	ldrb	r3, [r4, #1]
 8013c28:	2b2a      	cmp	r3, #42	; 0x2a
 8013c2a:	d135      	bne.n	8013c98 <_svfiprintf_r+0x188>
 8013c2c:	9b03      	ldr	r3, [sp, #12]
 8013c2e:	1d1a      	adds	r2, r3, #4
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	9203      	str	r2, [sp, #12]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	bfb8      	it	lt
 8013c38:	f04f 33ff 	movlt.w	r3, #4294967295
 8013c3c:	3402      	adds	r4, #2
 8013c3e:	9305      	str	r3, [sp, #20]
 8013c40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013d0c <_svfiprintf_r+0x1fc>
 8013c44:	7821      	ldrb	r1, [r4, #0]
 8013c46:	2203      	movs	r2, #3
 8013c48:	4650      	mov	r0, sl
 8013c4a:	f7ec fad1 	bl	80001f0 <memchr>
 8013c4e:	b140      	cbz	r0, 8013c62 <_svfiprintf_r+0x152>
 8013c50:	2340      	movs	r3, #64	; 0x40
 8013c52:	eba0 000a 	sub.w	r0, r0, sl
 8013c56:	fa03 f000 	lsl.w	r0, r3, r0
 8013c5a:	9b04      	ldr	r3, [sp, #16]
 8013c5c:	4303      	orrs	r3, r0
 8013c5e:	3401      	adds	r4, #1
 8013c60:	9304      	str	r3, [sp, #16]
 8013c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c66:	4826      	ldr	r0, [pc, #152]	; (8013d00 <_svfiprintf_r+0x1f0>)
 8013c68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c6c:	2206      	movs	r2, #6
 8013c6e:	f7ec fabf 	bl	80001f0 <memchr>
 8013c72:	2800      	cmp	r0, #0
 8013c74:	d038      	beq.n	8013ce8 <_svfiprintf_r+0x1d8>
 8013c76:	4b23      	ldr	r3, [pc, #140]	; (8013d04 <_svfiprintf_r+0x1f4>)
 8013c78:	bb1b      	cbnz	r3, 8013cc2 <_svfiprintf_r+0x1b2>
 8013c7a:	9b03      	ldr	r3, [sp, #12]
 8013c7c:	3307      	adds	r3, #7
 8013c7e:	f023 0307 	bic.w	r3, r3, #7
 8013c82:	3308      	adds	r3, #8
 8013c84:	9303      	str	r3, [sp, #12]
 8013c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c88:	4433      	add	r3, r6
 8013c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8013c8c:	e767      	b.n	8013b5e <_svfiprintf_r+0x4e>
 8013c8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c92:	460c      	mov	r4, r1
 8013c94:	2001      	movs	r0, #1
 8013c96:	e7a5      	b.n	8013be4 <_svfiprintf_r+0xd4>
 8013c98:	2300      	movs	r3, #0
 8013c9a:	3401      	adds	r4, #1
 8013c9c:	9305      	str	r3, [sp, #20]
 8013c9e:	4619      	mov	r1, r3
 8013ca0:	f04f 0c0a 	mov.w	ip, #10
 8013ca4:	4620      	mov	r0, r4
 8013ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013caa:	3a30      	subs	r2, #48	; 0x30
 8013cac:	2a09      	cmp	r2, #9
 8013cae:	d903      	bls.n	8013cb8 <_svfiprintf_r+0x1a8>
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d0c5      	beq.n	8013c40 <_svfiprintf_r+0x130>
 8013cb4:	9105      	str	r1, [sp, #20]
 8013cb6:	e7c3      	b.n	8013c40 <_svfiprintf_r+0x130>
 8013cb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8013cbc:	4604      	mov	r4, r0
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	e7f0      	b.n	8013ca4 <_svfiprintf_r+0x194>
 8013cc2:	ab03      	add	r3, sp, #12
 8013cc4:	9300      	str	r3, [sp, #0]
 8013cc6:	462a      	mov	r2, r5
 8013cc8:	4b0f      	ldr	r3, [pc, #60]	; (8013d08 <_svfiprintf_r+0x1f8>)
 8013cca:	a904      	add	r1, sp, #16
 8013ccc:	4638      	mov	r0, r7
 8013cce:	f7fc fbc1 	bl	8010454 <_printf_float>
 8013cd2:	1c42      	adds	r2, r0, #1
 8013cd4:	4606      	mov	r6, r0
 8013cd6:	d1d6      	bne.n	8013c86 <_svfiprintf_r+0x176>
 8013cd8:	89ab      	ldrh	r3, [r5, #12]
 8013cda:	065b      	lsls	r3, r3, #25
 8013cdc:	f53f af2c 	bmi.w	8013b38 <_svfiprintf_r+0x28>
 8013ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ce2:	b01d      	add	sp, #116	; 0x74
 8013ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ce8:	ab03      	add	r3, sp, #12
 8013cea:	9300      	str	r3, [sp, #0]
 8013cec:	462a      	mov	r2, r5
 8013cee:	4b06      	ldr	r3, [pc, #24]	; (8013d08 <_svfiprintf_r+0x1f8>)
 8013cf0:	a904      	add	r1, sp, #16
 8013cf2:	4638      	mov	r0, r7
 8013cf4:	f7fc fe52 	bl	801099c <_printf_i>
 8013cf8:	e7eb      	b.n	8013cd2 <_svfiprintf_r+0x1c2>
 8013cfa:	bf00      	nop
 8013cfc:	08016cc4 	.word	0x08016cc4
 8013d00:	08016cce 	.word	0x08016cce
 8013d04:	08010455 	.word	0x08010455
 8013d08:	08013a59 	.word	0x08013a59
 8013d0c:	08016cca 	.word	0x08016cca

08013d10 <__sfputc_r>:
 8013d10:	6893      	ldr	r3, [r2, #8]
 8013d12:	3b01      	subs	r3, #1
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	b410      	push	{r4}
 8013d18:	6093      	str	r3, [r2, #8]
 8013d1a:	da08      	bge.n	8013d2e <__sfputc_r+0x1e>
 8013d1c:	6994      	ldr	r4, [r2, #24]
 8013d1e:	42a3      	cmp	r3, r4
 8013d20:	db01      	blt.n	8013d26 <__sfputc_r+0x16>
 8013d22:	290a      	cmp	r1, #10
 8013d24:	d103      	bne.n	8013d2e <__sfputc_r+0x1e>
 8013d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d2a:	f000 b977 	b.w	801401c <__swbuf_r>
 8013d2e:	6813      	ldr	r3, [r2, #0]
 8013d30:	1c58      	adds	r0, r3, #1
 8013d32:	6010      	str	r0, [r2, #0]
 8013d34:	7019      	strb	r1, [r3, #0]
 8013d36:	4608      	mov	r0, r1
 8013d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d3c:	4770      	bx	lr

08013d3e <__sfputs_r>:
 8013d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d40:	4606      	mov	r6, r0
 8013d42:	460f      	mov	r7, r1
 8013d44:	4614      	mov	r4, r2
 8013d46:	18d5      	adds	r5, r2, r3
 8013d48:	42ac      	cmp	r4, r5
 8013d4a:	d101      	bne.n	8013d50 <__sfputs_r+0x12>
 8013d4c:	2000      	movs	r0, #0
 8013d4e:	e007      	b.n	8013d60 <__sfputs_r+0x22>
 8013d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d54:	463a      	mov	r2, r7
 8013d56:	4630      	mov	r0, r6
 8013d58:	f7ff ffda 	bl	8013d10 <__sfputc_r>
 8013d5c:	1c43      	adds	r3, r0, #1
 8013d5e:	d1f3      	bne.n	8013d48 <__sfputs_r+0xa>
 8013d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013d64 <_vfiprintf_r>:
 8013d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d68:	460d      	mov	r5, r1
 8013d6a:	b09d      	sub	sp, #116	; 0x74
 8013d6c:	4614      	mov	r4, r2
 8013d6e:	4698      	mov	r8, r3
 8013d70:	4606      	mov	r6, r0
 8013d72:	b118      	cbz	r0, 8013d7c <_vfiprintf_r+0x18>
 8013d74:	6983      	ldr	r3, [r0, #24]
 8013d76:	b90b      	cbnz	r3, 8013d7c <_vfiprintf_r+0x18>
 8013d78:	f000 fb40 	bl	80143fc <__sinit>
 8013d7c:	4b89      	ldr	r3, [pc, #548]	; (8013fa4 <_vfiprintf_r+0x240>)
 8013d7e:	429d      	cmp	r5, r3
 8013d80:	d11b      	bne.n	8013dba <_vfiprintf_r+0x56>
 8013d82:	6875      	ldr	r5, [r6, #4]
 8013d84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d86:	07d9      	lsls	r1, r3, #31
 8013d88:	d405      	bmi.n	8013d96 <_vfiprintf_r+0x32>
 8013d8a:	89ab      	ldrh	r3, [r5, #12]
 8013d8c:	059a      	lsls	r2, r3, #22
 8013d8e:	d402      	bmi.n	8013d96 <_vfiprintf_r+0x32>
 8013d90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d92:	f000 fbd1 	bl	8014538 <__retarget_lock_acquire_recursive>
 8013d96:	89ab      	ldrh	r3, [r5, #12]
 8013d98:	071b      	lsls	r3, r3, #28
 8013d9a:	d501      	bpl.n	8013da0 <_vfiprintf_r+0x3c>
 8013d9c:	692b      	ldr	r3, [r5, #16]
 8013d9e:	b9eb      	cbnz	r3, 8013ddc <_vfiprintf_r+0x78>
 8013da0:	4629      	mov	r1, r5
 8013da2:	4630      	mov	r0, r6
 8013da4:	f000 f99a 	bl	80140dc <__swsetup_r>
 8013da8:	b1c0      	cbz	r0, 8013ddc <_vfiprintf_r+0x78>
 8013daa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013dac:	07dc      	lsls	r4, r3, #31
 8013dae:	d50e      	bpl.n	8013dce <_vfiprintf_r+0x6a>
 8013db0:	f04f 30ff 	mov.w	r0, #4294967295
 8013db4:	b01d      	add	sp, #116	; 0x74
 8013db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dba:	4b7b      	ldr	r3, [pc, #492]	; (8013fa8 <_vfiprintf_r+0x244>)
 8013dbc:	429d      	cmp	r5, r3
 8013dbe:	d101      	bne.n	8013dc4 <_vfiprintf_r+0x60>
 8013dc0:	68b5      	ldr	r5, [r6, #8]
 8013dc2:	e7df      	b.n	8013d84 <_vfiprintf_r+0x20>
 8013dc4:	4b79      	ldr	r3, [pc, #484]	; (8013fac <_vfiprintf_r+0x248>)
 8013dc6:	429d      	cmp	r5, r3
 8013dc8:	bf08      	it	eq
 8013dca:	68f5      	ldreq	r5, [r6, #12]
 8013dcc:	e7da      	b.n	8013d84 <_vfiprintf_r+0x20>
 8013dce:	89ab      	ldrh	r3, [r5, #12]
 8013dd0:	0598      	lsls	r0, r3, #22
 8013dd2:	d4ed      	bmi.n	8013db0 <_vfiprintf_r+0x4c>
 8013dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013dd6:	f000 fbb0 	bl	801453a <__retarget_lock_release_recursive>
 8013dda:	e7e9      	b.n	8013db0 <_vfiprintf_r+0x4c>
 8013ddc:	2300      	movs	r3, #0
 8013dde:	9309      	str	r3, [sp, #36]	; 0x24
 8013de0:	2320      	movs	r3, #32
 8013de2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013de6:	f8cd 800c 	str.w	r8, [sp, #12]
 8013dea:	2330      	movs	r3, #48	; 0x30
 8013dec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013fb0 <_vfiprintf_r+0x24c>
 8013df0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013df4:	f04f 0901 	mov.w	r9, #1
 8013df8:	4623      	mov	r3, r4
 8013dfa:	469a      	mov	sl, r3
 8013dfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e00:	b10a      	cbz	r2, 8013e06 <_vfiprintf_r+0xa2>
 8013e02:	2a25      	cmp	r2, #37	; 0x25
 8013e04:	d1f9      	bne.n	8013dfa <_vfiprintf_r+0x96>
 8013e06:	ebba 0b04 	subs.w	fp, sl, r4
 8013e0a:	d00b      	beq.n	8013e24 <_vfiprintf_r+0xc0>
 8013e0c:	465b      	mov	r3, fp
 8013e0e:	4622      	mov	r2, r4
 8013e10:	4629      	mov	r1, r5
 8013e12:	4630      	mov	r0, r6
 8013e14:	f7ff ff93 	bl	8013d3e <__sfputs_r>
 8013e18:	3001      	adds	r0, #1
 8013e1a:	f000 80aa 	beq.w	8013f72 <_vfiprintf_r+0x20e>
 8013e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e20:	445a      	add	r2, fp
 8013e22:	9209      	str	r2, [sp, #36]	; 0x24
 8013e24:	f89a 3000 	ldrb.w	r3, [sl]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	f000 80a2 	beq.w	8013f72 <_vfiprintf_r+0x20e>
 8013e2e:	2300      	movs	r3, #0
 8013e30:	f04f 32ff 	mov.w	r2, #4294967295
 8013e34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e38:	f10a 0a01 	add.w	sl, sl, #1
 8013e3c:	9304      	str	r3, [sp, #16]
 8013e3e:	9307      	str	r3, [sp, #28]
 8013e40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e44:	931a      	str	r3, [sp, #104]	; 0x68
 8013e46:	4654      	mov	r4, sl
 8013e48:	2205      	movs	r2, #5
 8013e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e4e:	4858      	ldr	r0, [pc, #352]	; (8013fb0 <_vfiprintf_r+0x24c>)
 8013e50:	f7ec f9ce 	bl	80001f0 <memchr>
 8013e54:	9a04      	ldr	r2, [sp, #16]
 8013e56:	b9d8      	cbnz	r0, 8013e90 <_vfiprintf_r+0x12c>
 8013e58:	06d1      	lsls	r1, r2, #27
 8013e5a:	bf44      	itt	mi
 8013e5c:	2320      	movmi	r3, #32
 8013e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e62:	0713      	lsls	r3, r2, #28
 8013e64:	bf44      	itt	mi
 8013e66:	232b      	movmi	r3, #43	; 0x2b
 8013e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8013e70:	2b2a      	cmp	r3, #42	; 0x2a
 8013e72:	d015      	beq.n	8013ea0 <_vfiprintf_r+0x13c>
 8013e74:	9a07      	ldr	r2, [sp, #28]
 8013e76:	4654      	mov	r4, sl
 8013e78:	2000      	movs	r0, #0
 8013e7a:	f04f 0c0a 	mov.w	ip, #10
 8013e7e:	4621      	mov	r1, r4
 8013e80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e84:	3b30      	subs	r3, #48	; 0x30
 8013e86:	2b09      	cmp	r3, #9
 8013e88:	d94e      	bls.n	8013f28 <_vfiprintf_r+0x1c4>
 8013e8a:	b1b0      	cbz	r0, 8013eba <_vfiprintf_r+0x156>
 8013e8c:	9207      	str	r2, [sp, #28]
 8013e8e:	e014      	b.n	8013eba <_vfiprintf_r+0x156>
 8013e90:	eba0 0308 	sub.w	r3, r0, r8
 8013e94:	fa09 f303 	lsl.w	r3, r9, r3
 8013e98:	4313      	orrs	r3, r2
 8013e9a:	9304      	str	r3, [sp, #16]
 8013e9c:	46a2      	mov	sl, r4
 8013e9e:	e7d2      	b.n	8013e46 <_vfiprintf_r+0xe2>
 8013ea0:	9b03      	ldr	r3, [sp, #12]
 8013ea2:	1d19      	adds	r1, r3, #4
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	9103      	str	r1, [sp, #12]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	bfbb      	ittet	lt
 8013eac:	425b      	neglt	r3, r3
 8013eae:	f042 0202 	orrlt.w	r2, r2, #2
 8013eb2:	9307      	strge	r3, [sp, #28]
 8013eb4:	9307      	strlt	r3, [sp, #28]
 8013eb6:	bfb8      	it	lt
 8013eb8:	9204      	strlt	r2, [sp, #16]
 8013eba:	7823      	ldrb	r3, [r4, #0]
 8013ebc:	2b2e      	cmp	r3, #46	; 0x2e
 8013ebe:	d10c      	bne.n	8013eda <_vfiprintf_r+0x176>
 8013ec0:	7863      	ldrb	r3, [r4, #1]
 8013ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8013ec4:	d135      	bne.n	8013f32 <_vfiprintf_r+0x1ce>
 8013ec6:	9b03      	ldr	r3, [sp, #12]
 8013ec8:	1d1a      	adds	r2, r3, #4
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	9203      	str	r2, [sp, #12]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	bfb8      	it	lt
 8013ed2:	f04f 33ff 	movlt.w	r3, #4294967295
 8013ed6:	3402      	adds	r4, #2
 8013ed8:	9305      	str	r3, [sp, #20]
 8013eda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013fc0 <_vfiprintf_r+0x25c>
 8013ede:	7821      	ldrb	r1, [r4, #0]
 8013ee0:	2203      	movs	r2, #3
 8013ee2:	4650      	mov	r0, sl
 8013ee4:	f7ec f984 	bl	80001f0 <memchr>
 8013ee8:	b140      	cbz	r0, 8013efc <_vfiprintf_r+0x198>
 8013eea:	2340      	movs	r3, #64	; 0x40
 8013eec:	eba0 000a 	sub.w	r0, r0, sl
 8013ef0:	fa03 f000 	lsl.w	r0, r3, r0
 8013ef4:	9b04      	ldr	r3, [sp, #16]
 8013ef6:	4303      	orrs	r3, r0
 8013ef8:	3401      	adds	r4, #1
 8013efa:	9304      	str	r3, [sp, #16]
 8013efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f00:	482c      	ldr	r0, [pc, #176]	; (8013fb4 <_vfiprintf_r+0x250>)
 8013f02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f06:	2206      	movs	r2, #6
 8013f08:	f7ec f972 	bl	80001f0 <memchr>
 8013f0c:	2800      	cmp	r0, #0
 8013f0e:	d03f      	beq.n	8013f90 <_vfiprintf_r+0x22c>
 8013f10:	4b29      	ldr	r3, [pc, #164]	; (8013fb8 <_vfiprintf_r+0x254>)
 8013f12:	bb1b      	cbnz	r3, 8013f5c <_vfiprintf_r+0x1f8>
 8013f14:	9b03      	ldr	r3, [sp, #12]
 8013f16:	3307      	adds	r3, #7
 8013f18:	f023 0307 	bic.w	r3, r3, #7
 8013f1c:	3308      	adds	r3, #8
 8013f1e:	9303      	str	r3, [sp, #12]
 8013f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f22:	443b      	add	r3, r7
 8013f24:	9309      	str	r3, [sp, #36]	; 0x24
 8013f26:	e767      	b.n	8013df8 <_vfiprintf_r+0x94>
 8013f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f2c:	460c      	mov	r4, r1
 8013f2e:	2001      	movs	r0, #1
 8013f30:	e7a5      	b.n	8013e7e <_vfiprintf_r+0x11a>
 8013f32:	2300      	movs	r3, #0
 8013f34:	3401      	adds	r4, #1
 8013f36:	9305      	str	r3, [sp, #20]
 8013f38:	4619      	mov	r1, r3
 8013f3a:	f04f 0c0a 	mov.w	ip, #10
 8013f3e:	4620      	mov	r0, r4
 8013f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f44:	3a30      	subs	r2, #48	; 0x30
 8013f46:	2a09      	cmp	r2, #9
 8013f48:	d903      	bls.n	8013f52 <_vfiprintf_r+0x1ee>
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d0c5      	beq.n	8013eda <_vfiprintf_r+0x176>
 8013f4e:	9105      	str	r1, [sp, #20]
 8013f50:	e7c3      	b.n	8013eda <_vfiprintf_r+0x176>
 8013f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f56:	4604      	mov	r4, r0
 8013f58:	2301      	movs	r3, #1
 8013f5a:	e7f0      	b.n	8013f3e <_vfiprintf_r+0x1da>
 8013f5c:	ab03      	add	r3, sp, #12
 8013f5e:	9300      	str	r3, [sp, #0]
 8013f60:	462a      	mov	r2, r5
 8013f62:	4b16      	ldr	r3, [pc, #88]	; (8013fbc <_vfiprintf_r+0x258>)
 8013f64:	a904      	add	r1, sp, #16
 8013f66:	4630      	mov	r0, r6
 8013f68:	f7fc fa74 	bl	8010454 <_printf_float>
 8013f6c:	4607      	mov	r7, r0
 8013f6e:	1c78      	adds	r0, r7, #1
 8013f70:	d1d6      	bne.n	8013f20 <_vfiprintf_r+0x1bc>
 8013f72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013f74:	07d9      	lsls	r1, r3, #31
 8013f76:	d405      	bmi.n	8013f84 <_vfiprintf_r+0x220>
 8013f78:	89ab      	ldrh	r3, [r5, #12]
 8013f7a:	059a      	lsls	r2, r3, #22
 8013f7c:	d402      	bmi.n	8013f84 <_vfiprintf_r+0x220>
 8013f7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f80:	f000 fadb 	bl	801453a <__retarget_lock_release_recursive>
 8013f84:	89ab      	ldrh	r3, [r5, #12]
 8013f86:	065b      	lsls	r3, r3, #25
 8013f88:	f53f af12 	bmi.w	8013db0 <_vfiprintf_r+0x4c>
 8013f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f8e:	e711      	b.n	8013db4 <_vfiprintf_r+0x50>
 8013f90:	ab03      	add	r3, sp, #12
 8013f92:	9300      	str	r3, [sp, #0]
 8013f94:	462a      	mov	r2, r5
 8013f96:	4b09      	ldr	r3, [pc, #36]	; (8013fbc <_vfiprintf_r+0x258>)
 8013f98:	a904      	add	r1, sp, #16
 8013f9a:	4630      	mov	r0, r6
 8013f9c:	f7fc fcfe 	bl	801099c <_printf_i>
 8013fa0:	e7e4      	b.n	8013f6c <_vfiprintf_r+0x208>
 8013fa2:	bf00      	nop
 8013fa4:	08016df8 	.word	0x08016df8
 8013fa8:	08016e18 	.word	0x08016e18
 8013fac:	08016dd8 	.word	0x08016dd8
 8013fb0:	08016cc4 	.word	0x08016cc4
 8013fb4:	08016cce 	.word	0x08016cce
 8013fb8:	08010455 	.word	0x08010455
 8013fbc:	08013d3f 	.word	0x08013d3f
 8013fc0:	08016cca 	.word	0x08016cca
 8013fc4:	00000000 	.word	0x00000000

08013fc8 <nan>:
 8013fc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013fd0 <nan+0x8>
 8013fcc:	4770      	bx	lr
 8013fce:	bf00      	nop
 8013fd0:	00000000 	.word	0x00000000
 8013fd4:	7ff80000 	.word	0x7ff80000

08013fd8 <_sbrk_r>:
 8013fd8:	b538      	push	{r3, r4, r5, lr}
 8013fda:	4d06      	ldr	r5, [pc, #24]	; (8013ff4 <_sbrk_r+0x1c>)
 8013fdc:	2300      	movs	r3, #0
 8013fde:	4604      	mov	r4, r0
 8013fe0:	4608      	mov	r0, r1
 8013fe2:	602b      	str	r3, [r5, #0]
 8013fe4:	f7f0 f924 	bl	8004230 <_sbrk>
 8013fe8:	1c43      	adds	r3, r0, #1
 8013fea:	d102      	bne.n	8013ff2 <_sbrk_r+0x1a>
 8013fec:	682b      	ldr	r3, [r5, #0]
 8013fee:	b103      	cbz	r3, 8013ff2 <_sbrk_r+0x1a>
 8013ff0:	6023      	str	r3, [r4, #0]
 8013ff2:	bd38      	pop	{r3, r4, r5, pc}
 8013ff4:	20009454 	.word	0x20009454

08013ff8 <strncmp>:
 8013ff8:	b510      	push	{r4, lr}
 8013ffa:	b16a      	cbz	r2, 8014018 <strncmp+0x20>
 8013ffc:	3901      	subs	r1, #1
 8013ffe:	1884      	adds	r4, r0, r2
 8014000:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014004:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014008:	4293      	cmp	r3, r2
 801400a:	d103      	bne.n	8014014 <strncmp+0x1c>
 801400c:	42a0      	cmp	r0, r4
 801400e:	d001      	beq.n	8014014 <strncmp+0x1c>
 8014010:	2b00      	cmp	r3, #0
 8014012:	d1f5      	bne.n	8014000 <strncmp+0x8>
 8014014:	1a98      	subs	r0, r3, r2
 8014016:	bd10      	pop	{r4, pc}
 8014018:	4610      	mov	r0, r2
 801401a:	e7fc      	b.n	8014016 <strncmp+0x1e>

0801401c <__swbuf_r>:
 801401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801401e:	460e      	mov	r6, r1
 8014020:	4614      	mov	r4, r2
 8014022:	4605      	mov	r5, r0
 8014024:	b118      	cbz	r0, 801402e <__swbuf_r+0x12>
 8014026:	6983      	ldr	r3, [r0, #24]
 8014028:	b90b      	cbnz	r3, 801402e <__swbuf_r+0x12>
 801402a:	f000 f9e7 	bl	80143fc <__sinit>
 801402e:	4b21      	ldr	r3, [pc, #132]	; (80140b4 <__swbuf_r+0x98>)
 8014030:	429c      	cmp	r4, r3
 8014032:	d12b      	bne.n	801408c <__swbuf_r+0x70>
 8014034:	686c      	ldr	r4, [r5, #4]
 8014036:	69a3      	ldr	r3, [r4, #24]
 8014038:	60a3      	str	r3, [r4, #8]
 801403a:	89a3      	ldrh	r3, [r4, #12]
 801403c:	071a      	lsls	r2, r3, #28
 801403e:	d52f      	bpl.n	80140a0 <__swbuf_r+0x84>
 8014040:	6923      	ldr	r3, [r4, #16]
 8014042:	b36b      	cbz	r3, 80140a0 <__swbuf_r+0x84>
 8014044:	6923      	ldr	r3, [r4, #16]
 8014046:	6820      	ldr	r0, [r4, #0]
 8014048:	1ac0      	subs	r0, r0, r3
 801404a:	6963      	ldr	r3, [r4, #20]
 801404c:	b2f6      	uxtb	r6, r6
 801404e:	4283      	cmp	r3, r0
 8014050:	4637      	mov	r7, r6
 8014052:	dc04      	bgt.n	801405e <__swbuf_r+0x42>
 8014054:	4621      	mov	r1, r4
 8014056:	4628      	mov	r0, r5
 8014058:	f000 f93c 	bl	80142d4 <_fflush_r>
 801405c:	bb30      	cbnz	r0, 80140ac <__swbuf_r+0x90>
 801405e:	68a3      	ldr	r3, [r4, #8]
 8014060:	3b01      	subs	r3, #1
 8014062:	60a3      	str	r3, [r4, #8]
 8014064:	6823      	ldr	r3, [r4, #0]
 8014066:	1c5a      	adds	r2, r3, #1
 8014068:	6022      	str	r2, [r4, #0]
 801406a:	701e      	strb	r6, [r3, #0]
 801406c:	6963      	ldr	r3, [r4, #20]
 801406e:	3001      	adds	r0, #1
 8014070:	4283      	cmp	r3, r0
 8014072:	d004      	beq.n	801407e <__swbuf_r+0x62>
 8014074:	89a3      	ldrh	r3, [r4, #12]
 8014076:	07db      	lsls	r3, r3, #31
 8014078:	d506      	bpl.n	8014088 <__swbuf_r+0x6c>
 801407a:	2e0a      	cmp	r6, #10
 801407c:	d104      	bne.n	8014088 <__swbuf_r+0x6c>
 801407e:	4621      	mov	r1, r4
 8014080:	4628      	mov	r0, r5
 8014082:	f000 f927 	bl	80142d4 <_fflush_r>
 8014086:	b988      	cbnz	r0, 80140ac <__swbuf_r+0x90>
 8014088:	4638      	mov	r0, r7
 801408a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801408c:	4b0a      	ldr	r3, [pc, #40]	; (80140b8 <__swbuf_r+0x9c>)
 801408e:	429c      	cmp	r4, r3
 8014090:	d101      	bne.n	8014096 <__swbuf_r+0x7a>
 8014092:	68ac      	ldr	r4, [r5, #8]
 8014094:	e7cf      	b.n	8014036 <__swbuf_r+0x1a>
 8014096:	4b09      	ldr	r3, [pc, #36]	; (80140bc <__swbuf_r+0xa0>)
 8014098:	429c      	cmp	r4, r3
 801409a:	bf08      	it	eq
 801409c:	68ec      	ldreq	r4, [r5, #12]
 801409e:	e7ca      	b.n	8014036 <__swbuf_r+0x1a>
 80140a0:	4621      	mov	r1, r4
 80140a2:	4628      	mov	r0, r5
 80140a4:	f000 f81a 	bl	80140dc <__swsetup_r>
 80140a8:	2800      	cmp	r0, #0
 80140aa:	d0cb      	beq.n	8014044 <__swbuf_r+0x28>
 80140ac:	f04f 37ff 	mov.w	r7, #4294967295
 80140b0:	e7ea      	b.n	8014088 <__swbuf_r+0x6c>
 80140b2:	bf00      	nop
 80140b4:	08016df8 	.word	0x08016df8
 80140b8:	08016e18 	.word	0x08016e18
 80140bc:	08016dd8 	.word	0x08016dd8

080140c0 <__ascii_wctomb>:
 80140c0:	b149      	cbz	r1, 80140d6 <__ascii_wctomb+0x16>
 80140c2:	2aff      	cmp	r2, #255	; 0xff
 80140c4:	bf85      	ittet	hi
 80140c6:	238a      	movhi	r3, #138	; 0x8a
 80140c8:	6003      	strhi	r3, [r0, #0]
 80140ca:	700a      	strbls	r2, [r1, #0]
 80140cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80140d0:	bf98      	it	ls
 80140d2:	2001      	movls	r0, #1
 80140d4:	4770      	bx	lr
 80140d6:	4608      	mov	r0, r1
 80140d8:	4770      	bx	lr
	...

080140dc <__swsetup_r>:
 80140dc:	4b32      	ldr	r3, [pc, #200]	; (80141a8 <__swsetup_r+0xcc>)
 80140de:	b570      	push	{r4, r5, r6, lr}
 80140e0:	681d      	ldr	r5, [r3, #0]
 80140e2:	4606      	mov	r6, r0
 80140e4:	460c      	mov	r4, r1
 80140e6:	b125      	cbz	r5, 80140f2 <__swsetup_r+0x16>
 80140e8:	69ab      	ldr	r3, [r5, #24]
 80140ea:	b913      	cbnz	r3, 80140f2 <__swsetup_r+0x16>
 80140ec:	4628      	mov	r0, r5
 80140ee:	f000 f985 	bl	80143fc <__sinit>
 80140f2:	4b2e      	ldr	r3, [pc, #184]	; (80141ac <__swsetup_r+0xd0>)
 80140f4:	429c      	cmp	r4, r3
 80140f6:	d10f      	bne.n	8014118 <__swsetup_r+0x3c>
 80140f8:	686c      	ldr	r4, [r5, #4]
 80140fa:	89a3      	ldrh	r3, [r4, #12]
 80140fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014100:	0719      	lsls	r1, r3, #28
 8014102:	d42c      	bmi.n	801415e <__swsetup_r+0x82>
 8014104:	06dd      	lsls	r5, r3, #27
 8014106:	d411      	bmi.n	801412c <__swsetup_r+0x50>
 8014108:	2309      	movs	r3, #9
 801410a:	6033      	str	r3, [r6, #0]
 801410c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014110:	81a3      	strh	r3, [r4, #12]
 8014112:	f04f 30ff 	mov.w	r0, #4294967295
 8014116:	e03e      	b.n	8014196 <__swsetup_r+0xba>
 8014118:	4b25      	ldr	r3, [pc, #148]	; (80141b0 <__swsetup_r+0xd4>)
 801411a:	429c      	cmp	r4, r3
 801411c:	d101      	bne.n	8014122 <__swsetup_r+0x46>
 801411e:	68ac      	ldr	r4, [r5, #8]
 8014120:	e7eb      	b.n	80140fa <__swsetup_r+0x1e>
 8014122:	4b24      	ldr	r3, [pc, #144]	; (80141b4 <__swsetup_r+0xd8>)
 8014124:	429c      	cmp	r4, r3
 8014126:	bf08      	it	eq
 8014128:	68ec      	ldreq	r4, [r5, #12]
 801412a:	e7e6      	b.n	80140fa <__swsetup_r+0x1e>
 801412c:	0758      	lsls	r0, r3, #29
 801412e:	d512      	bpl.n	8014156 <__swsetup_r+0x7a>
 8014130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014132:	b141      	cbz	r1, 8014146 <__swsetup_r+0x6a>
 8014134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014138:	4299      	cmp	r1, r3
 801413a:	d002      	beq.n	8014142 <__swsetup_r+0x66>
 801413c:	4630      	mov	r0, r6
 801413e:	f7ff fbe1 	bl	8013904 <_free_r>
 8014142:	2300      	movs	r3, #0
 8014144:	6363      	str	r3, [r4, #52]	; 0x34
 8014146:	89a3      	ldrh	r3, [r4, #12]
 8014148:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801414c:	81a3      	strh	r3, [r4, #12]
 801414e:	2300      	movs	r3, #0
 8014150:	6063      	str	r3, [r4, #4]
 8014152:	6923      	ldr	r3, [r4, #16]
 8014154:	6023      	str	r3, [r4, #0]
 8014156:	89a3      	ldrh	r3, [r4, #12]
 8014158:	f043 0308 	orr.w	r3, r3, #8
 801415c:	81a3      	strh	r3, [r4, #12]
 801415e:	6923      	ldr	r3, [r4, #16]
 8014160:	b94b      	cbnz	r3, 8014176 <__swsetup_r+0x9a>
 8014162:	89a3      	ldrh	r3, [r4, #12]
 8014164:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801416c:	d003      	beq.n	8014176 <__swsetup_r+0x9a>
 801416e:	4621      	mov	r1, r4
 8014170:	4630      	mov	r0, r6
 8014172:	f000 fa07 	bl	8014584 <__smakebuf_r>
 8014176:	89a0      	ldrh	r0, [r4, #12]
 8014178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801417c:	f010 0301 	ands.w	r3, r0, #1
 8014180:	d00a      	beq.n	8014198 <__swsetup_r+0xbc>
 8014182:	2300      	movs	r3, #0
 8014184:	60a3      	str	r3, [r4, #8]
 8014186:	6963      	ldr	r3, [r4, #20]
 8014188:	425b      	negs	r3, r3
 801418a:	61a3      	str	r3, [r4, #24]
 801418c:	6923      	ldr	r3, [r4, #16]
 801418e:	b943      	cbnz	r3, 80141a2 <__swsetup_r+0xc6>
 8014190:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014194:	d1ba      	bne.n	801410c <__swsetup_r+0x30>
 8014196:	bd70      	pop	{r4, r5, r6, pc}
 8014198:	0781      	lsls	r1, r0, #30
 801419a:	bf58      	it	pl
 801419c:	6963      	ldrpl	r3, [r4, #20]
 801419e:	60a3      	str	r3, [r4, #8]
 80141a0:	e7f4      	b.n	801418c <__swsetup_r+0xb0>
 80141a2:	2000      	movs	r0, #0
 80141a4:	e7f7      	b.n	8014196 <__swsetup_r+0xba>
 80141a6:	bf00      	nop
 80141a8:	2000002c 	.word	0x2000002c
 80141ac:	08016df8 	.word	0x08016df8
 80141b0:	08016e18 	.word	0x08016e18
 80141b4:	08016dd8 	.word	0x08016dd8

080141b8 <abort>:
 80141b8:	b508      	push	{r3, lr}
 80141ba:	2006      	movs	r0, #6
 80141bc:	f000 fa96 	bl	80146ec <raise>
 80141c0:	2001      	movs	r0, #1
 80141c2:	f7ef ffbd 	bl	8004140 <_exit>
	...

080141c8 <__sflush_r>:
 80141c8:	898a      	ldrh	r2, [r1, #12]
 80141ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141ce:	4605      	mov	r5, r0
 80141d0:	0710      	lsls	r0, r2, #28
 80141d2:	460c      	mov	r4, r1
 80141d4:	d458      	bmi.n	8014288 <__sflush_r+0xc0>
 80141d6:	684b      	ldr	r3, [r1, #4]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	dc05      	bgt.n	80141e8 <__sflush_r+0x20>
 80141dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80141de:	2b00      	cmp	r3, #0
 80141e0:	dc02      	bgt.n	80141e8 <__sflush_r+0x20>
 80141e2:	2000      	movs	r0, #0
 80141e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80141ea:	2e00      	cmp	r6, #0
 80141ec:	d0f9      	beq.n	80141e2 <__sflush_r+0x1a>
 80141ee:	2300      	movs	r3, #0
 80141f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80141f4:	682f      	ldr	r7, [r5, #0]
 80141f6:	602b      	str	r3, [r5, #0]
 80141f8:	d032      	beq.n	8014260 <__sflush_r+0x98>
 80141fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80141fc:	89a3      	ldrh	r3, [r4, #12]
 80141fe:	075a      	lsls	r2, r3, #29
 8014200:	d505      	bpl.n	801420e <__sflush_r+0x46>
 8014202:	6863      	ldr	r3, [r4, #4]
 8014204:	1ac0      	subs	r0, r0, r3
 8014206:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014208:	b10b      	cbz	r3, 801420e <__sflush_r+0x46>
 801420a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801420c:	1ac0      	subs	r0, r0, r3
 801420e:	2300      	movs	r3, #0
 8014210:	4602      	mov	r2, r0
 8014212:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014214:	6a21      	ldr	r1, [r4, #32]
 8014216:	4628      	mov	r0, r5
 8014218:	47b0      	blx	r6
 801421a:	1c43      	adds	r3, r0, #1
 801421c:	89a3      	ldrh	r3, [r4, #12]
 801421e:	d106      	bne.n	801422e <__sflush_r+0x66>
 8014220:	6829      	ldr	r1, [r5, #0]
 8014222:	291d      	cmp	r1, #29
 8014224:	d82c      	bhi.n	8014280 <__sflush_r+0xb8>
 8014226:	4a2a      	ldr	r2, [pc, #168]	; (80142d0 <__sflush_r+0x108>)
 8014228:	40ca      	lsrs	r2, r1
 801422a:	07d6      	lsls	r6, r2, #31
 801422c:	d528      	bpl.n	8014280 <__sflush_r+0xb8>
 801422e:	2200      	movs	r2, #0
 8014230:	6062      	str	r2, [r4, #4]
 8014232:	04d9      	lsls	r1, r3, #19
 8014234:	6922      	ldr	r2, [r4, #16]
 8014236:	6022      	str	r2, [r4, #0]
 8014238:	d504      	bpl.n	8014244 <__sflush_r+0x7c>
 801423a:	1c42      	adds	r2, r0, #1
 801423c:	d101      	bne.n	8014242 <__sflush_r+0x7a>
 801423e:	682b      	ldr	r3, [r5, #0]
 8014240:	b903      	cbnz	r3, 8014244 <__sflush_r+0x7c>
 8014242:	6560      	str	r0, [r4, #84]	; 0x54
 8014244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014246:	602f      	str	r7, [r5, #0]
 8014248:	2900      	cmp	r1, #0
 801424a:	d0ca      	beq.n	80141e2 <__sflush_r+0x1a>
 801424c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014250:	4299      	cmp	r1, r3
 8014252:	d002      	beq.n	801425a <__sflush_r+0x92>
 8014254:	4628      	mov	r0, r5
 8014256:	f7ff fb55 	bl	8013904 <_free_r>
 801425a:	2000      	movs	r0, #0
 801425c:	6360      	str	r0, [r4, #52]	; 0x34
 801425e:	e7c1      	b.n	80141e4 <__sflush_r+0x1c>
 8014260:	6a21      	ldr	r1, [r4, #32]
 8014262:	2301      	movs	r3, #1
 8014264:	4628      	mov	r0, r5
 8014266:	47b0      	blx	r6
 8014268:	1c41      	adds	r1, r0, #1
 801426a:	d1c7      	bne.n	80141fc <__sflush_r+0x34>
 801426c:	682b      	ldr	r3, [r5, #0]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d0c4      	beq.n	80141fc <__sflush_r+0x34>
 8014272:	2b1d      	cmp	r3, #29
 8014274:	d001      	beq.n	801427a <__sflush_r+0xb2>
 8014276:	2b16      	cmp	r3, #22
 8014278:	d101      	bne.n	801427e <__sflush_r+0xb6>
 801427a:	602f      	str	r7, [r5, #0]
 801427c:	e7b1      	b.n	80141e2 <__sflush_r+0x1a>
 801427e:	89a3      	ldrh	r3, [r4, #12]
 8014280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014284:	81a3      	strh	r3, [r4, #12]
 8014286:	e7ad      	b.n	80141e4 <__sflush_r+0x1c>
 8014288:	690f      	ldr	r7, [r1, #16]
 801428a:	2f00      	cmp	r7, #0
 801428c:	d0a9      	beq.n	80141e2 <__sflush_r+0x1a>
 801428e:	0793      	lsls	r3, r2, #30
 8014290:	680e      	ldr	r6, [r1, #0]
 8014292:	bf08      	it	eq
 8014294:	694b      	ldreq	r3, [r1, #20]
 8014296:	600f      	str	r7, [r1, #0]
 8014298:	bf18      	it	ne
 801429a:	2300      	movne	r3, #0
 801429c:	eba6 0807 	sub.w	r8, r6, r7
 80142a0:	608b      	str	r3, [r1, #8]
 80142a2:	f1b8 0f00 	cmp.w	r8, #0
 80142a6:	dd9c      	ble.n	80141e2 <__sflush_r+0x1a>
 80142a8:	6a21      	ldr	r1, [r4, #32]
 80142aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80142ac:	4643      	mov	r3, r8
 80142ae:	463a      	mov	r2, r7
 80142b0:	4628      	mov	r0, r5
 80142b2:	47b0      	blx	r6
 80142b4:	2800      	cmp	r0, #0
 80142b6:	dc06      	bgt.n	80142c6 <__sflush_r+0xfe>
 80142b8:	89a3      	ldrh	r3, [r4, #12]
 80142ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142be:	81a3      	strh	r3, [r4, #12]
 80142c0:	f04f 30ff 	mov.w	r0, #4294967295
 80142c4:	e78e      	b.n	80141e4 <__sflush_r+0x1c>
 80142c6:	4407      	add	r7, r0
 80142c8:	eba8 0800 	sub.w	r8, r8, r0
 80142cc:	e7e9      	b.n	80142a2 <__sflush_r+0xda>
 80142ce:	bf00      	nop
 80142d0:	20400001 	.word	0x20400001

080142d4 <_fflush_r>:
 80142d4:	b538      	push	{r3, r4, r5, lr}
 80142d6:	690b      	ldr	r3, [r1, #16]
 80142d8:	4605      	mov	r5, r0
 80142da:	460c      	mov	r4, r1
 80142dc:	b913      	cbnz	r3, 80142e4 <_fflush_r+0x10>
 80142de:	2500      	movs	r5, #0
 80142e0:	4628      	mov	r0, r5
 80142e2:	bd38      	pop	{r3, r4, r5, pc}
 80142e4:	b118      	cbz	r0, 80142ee <_fflush_r+0x1a>
 80142e6:	6983      	ldr	r3, [r0, #24]
 80142e8:	b90b      	cbnz	r3, 80142ee <_fflush_r+0x1a>
 80142ea:	f000 f887 	bl	80143fc <__sinit>
 80142ee:	4b14      	ldr	r3, [pc, #80]	; (8014340 <_fflush_r+0x6c>)
 80142f0:	429c      	cmp	r4, r3
 80142f2:	d11b      	bne.n	801432c <_fflush_r+0x58>
 80142f4:	686c      	ldr	r4, [r5, #4]
 80142f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d0ef      	beq.n	80142de <_fflush_r+0xa>
 80142fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014300:	07d0      	lsls	r0, r2, #31
 8014302:	d404      	bmi.n	801430e <_fflush_r+0x3a>
 8014304:	0599      	lsls	r1, r3, #22
 8014306:	d402      	bmi.n	801430e <_fflush_r+0x3a>
 8014308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801430a:	f000 f915 	bl	8014538 <__retarget_lock_acquire_recursive>
 801430e:	4628      	mov	r0, r5
 8014310:	4621      	mov	r1, r4
 8014312:	f7ff ff59 	bl	80141c8 <__sflush_r>
 8014316:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014318:	07da      	lsls	r2, r3, #31
 801431a:	4605      	mov	r5, r0
 801431c:	d4e0      	bmi.n	80142e0 <_fflush_r+0xc>
 801431e:	89a3      	ldrh	r3, [r4, #12]
 8014320:	059b      	lsls	r3, r3, #22
 8014322:	d4dd      	bmi.n	80142e0 <_fflush_r+0xc>
 8014324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014326:	f000 f908 	bl	801453a <__retarget_lock_release_recursive>
 801432a:	e7d9      	b.n	80142e0 <_fflush_r+0xc>
 801432c:	4b05      	ldr	r3, [pc, #20]	; (8014344 <_fflush_r+0x70>)
 801432e:	429c      	cmp	r4, r3
 8014330:	d101      	bne.n	8014336 <_fflush_r+0x62>
 8014332:	68ac      	ldr	r4, [r5, #8]
 8014334:	e7df      	b.n	80142f6 <_fflush_r+0x22>
 8014336:	4b04      	ldr	r3, [pc, #16]	; (8014348 <_fflush_r+0x74>)
 8014338:	429c      	cmp	r4, r3
 801433a:	bf08      	it	eq
 801433c:	68ec      	ldreq	r4, [r5, #12]
 801433e:	e7da      	b.n	80142f6 <_fflush_r+0x22>
 8014340:	08016df8 	.word	0x08016df8
 8014344:	08016e18 	.word	0x08016e18
 8014348:	08016dd8 	.word	0x08016dd8

0801434c <std>:
 801434c:	2300      	movs	r3, #0
 801434e:	b510      	push	{r4, lr}
 8014350:	4604      	mov	r4, r0
 8014352:	e9c0 3300 	strd	r3, r3, [r0]
 8014356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801435a:	6083      	str	r3, [r0, #8]
 801435c:	8181      	strh	r1, [r0, #12]
 801435e:	6643      	str	r3, [r0, #100]	; 0x64
 8014360:	81c2      	strh	r2, [r0, #14]
 8014362:	6183      	str	r3, [r0, #24]
 8014364:	4619      	mov	r1, r3
 8014366:	2208      	movs	r2, #8
 8014368:	305c      	adds	r0, #92	; 0x5c
 801436a:	f7fb ffcb 	bl	8010304 <memset>
 801436e:	4b05      	ldr	r3, [pc, #20]	; (8014384 <std+0x38>)
 8014370:	6263      	str	r3, [r4, #36]	; 0x24
 8014372:	4b05      	ldr	r3, [pc, #20]	; (8014388 <std+0x3c>)
 8014374:	62a3      	str	r3, [r4, #40]	; 0x28
 8014376:	4b05      	ldr	r3, [pc, #20]	; (801438c <std+0x40>)
 8014378:	62e3      	str	r3, [r4, #44]	; 0x2c
 801437a:	4b05      	ldr	r3, [pc, #20]	; (8014390 <std+0x44>)
 801437c:	6224      	str	r4, [r4, #32]
 801437e:	6323      	str	r3, [r4, #48]	; 0x30
 8014380:	bd10      	pop	{r4, pc}
 8014382:	bf00      	nop
 8014384:	08014725 	.word	0x08014725
 8014388:	08014747 	.word	0x08014747
 801438c:	0801477f 	.word	0x0801477f
 8014390:	080147a3 	.word	0x080147a3

08014394 <_cleanup_r>:
 8014394:	4901      	ldr	r1, [pc, #4]	; (801439c <_cleanup_r+0x8>)
 8014396:	f000 b8af 	b.w	80144f8 <_fwalk_reent>
 801439a:	bf00      	nop
 801439c:	080142d5 	.word	0x080142d5

080143a0 <__sfmoreglue>:
 80143a0:	b570      	push	{r4, r5, r6, lr}
 80143a2:	1e4a      	subs	r2, r1, #1
 80143a4:	2568      	movs	r5, #104	; 0x68
 80143a6:	4355      	muls	r5, r2
 80143a8:	460e      	mov	r6, r1
 80143aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80143ae:	f7ff faf9 	bl	80139a4 <_malloc_r>
 80143b2:	4604      	mov	r4, r0
 80143b4:	b140      	cbz	r0, 80143c8 <__sfmoreglue+0x28>
 80143b6:	2100      	movs	r1, #0
 80143b8:	e9c0 1600 	strd	r1, r6, [r0]
 80143bc:	300c      	adds	r0, #12
 80143be:	60a0      	str	r0, [r4, #8]
 80143c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80143c4:	f7fb ff9e 	bl	8010304 <memset>
 80143c8:	4620      	mov	r0, r4
 80143ca:	bd70      	pop	{r4, r5, r6, pc}

080143cc <__sfp_lock_acquire>:
 80143cc:	4801      	ldr	r0, [pc, #4]	; (80143d4 <__sfp_lock_acquire+0x8>)
 80143ce:	f000 b8b3 	b.w	8014538 <__retarget_lock_acquire_recursive>
 80143d2:	bf00      	nop
 80143d4:	20009450 	.word	0x20009450

080143d8 <__sfp_lock_release>:
 80143d8:	4801      	ldr	r0, [pc, #4]	; (80143e0 <__sfp_lock_release+0x8>)
 80143da:	f000 b8ae 	b.w	801453a <__retarget_lock_release_recursive>
 80143de:	bf00      	nop
 80143e0:	20009450 	.word	0x20009450

080143e4 <__sinit_lock_acquire>:
 80143e4:	4801      	ldr	r0, [pc, #4]	; (80143ec <__sinit_lock_acquire+0x8>)
 80143e6:	f000 b8a7 	b.w	8014538 <__retarget_lock_acquire_recursive>
 80143ea:	bf00      	nop
 80143ec:	2000944b 	.word	0x2000944b

080143f0 <__sinit_lock_release>:
 80143f0:	4801      	ldr	r0, [pc, #4]	; (80143f8 <__sinit_lock_release+0x8>)
 80143f2:	f000 b8a2 	b.w	801453a <__retarget_lock_release_recursive>
 80143f6:	bf00      	nop
 80143f8:	2000944b 	.word	0x2000944b

080143fc <__sinit>:
 80143fc:	b510      	push	{r4, lr}
 80143fe:	4604      	mov	r4, r0
 8014400:	f7ff fff0 	bl	80143e4 <__sinit_lock_acquire>
 8014404:	69a3      	ldr	r3, [r4, #24]
 8014406:	b11b      	cbz	r3, 8014410 <__sinit+0x14>
 8014408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801440c:	f7ff bff0 	b.w	80143f0 <__sinit_lock_release>
 8014410:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014414:	6523      	str	r3, [r4, #80]	; 0x50
 8014416:	4b13      	ldr	r3, [pc, #76]	; (8014464 <__sinit+0x68>)
 8014418:	4a13      	ldr	r2, [pc, #76]	; (8014468 <__sinit+0x6c>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	62a2      	str	r2, [r4, #40]	; 0x28
 801441e:	42a3      	cmp	r3, r4
 8014420:	bf04      	itt	eq
 8014422:	2301      	moveq	r3, #1
 8014424:	61a3      	streq	r3, [r4, #24]
 8014426:	4620      	mov	r0, r4
 8014428:	f000 f820 	bl	801446c <__sfp>
 801442c:	6060      	str	r0, [r4, #4]
 801442e:	4620      	mov	r0, r4
 8014430:	f000 f81c 	bl	801446c <__sfp>
 8014434:	60a0      	str	r0, [r4, #8]
 8014436:	4620      	mov	r0, r4
 8014438:	f000 f818 	bl	801446c <__sfp>
 801443c:	2200      	movs	r2, #0
 801443e:	60e0      	str	r0, [r4, #12]
 8014440:	2104      	movs	r1, #4
 8014442:	6860      	ldr	r0, [r4, #4]
 8014444:	f7ff ff82 	bl	801434c <std>
 8014448:	68a0      	ldr	r0, [r4, #8]
 801444a:	2201      	movs	r2, #1
 801444c:	2109      	movs	r1, #9
 801444e:	f7ff ff7d 	bl	801434c <std>
 8014452:	68e0      	ldr	r0, [r4, #12]
 8014454:	2202      	movs	r2, #2
 8014456:	2112      	movs	r1, #18
 8014458:	f7ff ff78 	bl	801434c <std>
 801445c:	2301      	movs	r3, #1
 801445e:	61a3      	str	r3, [r4, #24]
 8014460:	e7d2      	b.n	8014408 <__sinit+0xc>
 8014462:	bf00      	nop
 8014464:	0801692c 	.word	0x0801692c
 8014468:	08014395 	.word	0x08014395

0801446c <__sfp>:
 801446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801446e:	4607      	mov	r7, r0
 8014470:	f7ff ffac 	bl	80143cc <__sfp_lock_acquire>
 8014474:	4b1e      	ldr	r3, [pc, #120]	; (80144f0 <__sfp+0x84>)
 8014476:	681e      	ldr	r6, [r3, #0]
 8014478:	69b3      	ldr	r3, [r6, #24]
 801447a:	b913      	cbnz	r3, 8014482 <__sfp+0x16>
 801447c:	4630      	mov	r0, r6
 801447e:	f7ff ffbd 	bl	80143fc <__sinit>
 8014482:	3648      	adds	r6, #72	; 0x48
 8014484:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014488:	3b01      	subs	r3, #1
 801448a:	d503      	bpl.n	8014494 <__sfp+0x28>
 801448c:	6833      	ldr	r3, [r6, #0]
 801448e:	b30b      	cbz	r3, 80144d4 <__sfp+0x68>
 8014490:	6836      	ldr	r6, [r6, #0]
 8014492:	e7f7      	b.n	8014484 <__sfp+0x18>
 8014494:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014498:	b9d5      	cbnz	r5, 80144d0 <__sfp+0x64>
 801449a:	4b16      	ldr	r3, [pc, #88]	; (80144f4 <__sfp+0x88>)
 801449c:	60e3      	str	r3, [r4, #12]
 801449e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80144a2:	6665      	str	r5, [r4, #100]	; 0x64
 80144a4:	f000 f847 	bl	8014536 <__retarget_lock_init_recursive>
 80144a8:	f7ff ff96 	bl	80143d8 <__sfp_lock_release>
 80144ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80144b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80144b4:	6025      	str	r5, [r4, #0]
 80144b6:	61a5      	str	r5, [r4, #24]
 80144b8:	2208      	movs	r2, #8
 80144ba:	4629      	mov	r1, r5
 80144bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80144c0:	f7fb ff20 	bl	8010304 <memset>
 80144c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80144c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80144cc:	4620      	mov	r0, r4
 80144ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144d0:	3468      	adds	r4, #104	; 0x68
 80144d2:	e7d9      	b.n	8014488 <__sfp+0x1c>
 80144d4:	2104      	movs	r1, #4
 80144d6:	4638      	mov	r0, r7
 80144d8:	f7ff ff62 	bl	80143a0 <__sfmoreglue>
 80144dc:	4604      	mov	r4, r0
 80144de:	6030      	str	r0, [r6, #0]
 80144e0:	2800      	cmp	r0, #0
 80144e2:	d1d5      	bne.n	8014490 <__sfp+0x24>
 80144e4:	f7ff ff78 	bl	80143d8 <__sfp_lock_release>
 80144e8:	230c      	movs	r3, #12
 80144ea:	603b      	str	r3, [r7, #0]
 80144ec:	e7ee      	b.n	80144cc <__sfp+0x60>
 80144ee:	bf00      	nop
 80144f0:	0801692c 	.word	0x0801692c
 80144f4:	ffff0001 	.word	0xffff0001

080144f8 <_fwalk_reent>:
 80144f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144fc:	4606      	mov	r6, r0
 80144fe:	4688      	mov	r8, r1
 8014500:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014504:	2700      	movs	r7, #0
 8014506:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801450a:	f1b9 0901 	subs.w	r9, r9, #1
 801450e:	d505      	bpl.n	801451c <_fwalk_reent+0x24>
 8014510:	6824      	ldr	r4, [r4, #0]
 8014512:	2c00      	cmp	r4, #0
 8014514:	d1f7      	bne.n	8014506 <_fwalk_reent+0xe>
 8014516:	4638      	mov	r0, r7
 8014518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801451c:	89ab      	ldrh	r3, [r5, #12]
 801451e:	2b01      	cmp	r3, #1
 8014520:	d907      	bls.n	8014532 <_fwalk_reent+0x3a>
 8014522:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014526:	3301      	adds	r3, #1
 8014528:	d003      	beq.n	8014532 <_fwalk_reent+0x3a>
 801452a:	4629      	mov	r1, r5
 801452c:	4630      	mov	r0, r6
 801452e:	47c0      	blx	r8
 8014530:	4307      	orrs	r7, r0
 8014532:	3568      	adds	r5, #104	; 0x68
 8014534:	e7e9      	b.n	801450a <_fwalk_reent+0x12>

08014536 <__retarget_lock_init_recursive>:
 8014536:	4770      	bx	lr

08014538 <__retarget_lock_acquire_recursive>:
 8014538:	4770      	bx	lr

0801453a <__retarget_lock_release_recursive>:
 801453a:	4770      	bx	lr

0801453c <__swhatbuf_r>:
 801453c:	b570      	push	{r4, r5, r6, lr}
 801453e:	460e      	mov	r6, r1
 8014540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014544:	2900      	cmp	r1, #0
 8014546:	b096      	sub	sp, #88	; 0x58
 8014548:	4614      	mov	r4, r2
 801454a:	461d      	mov	r5, r3
 801454c:	da07      	bge.n	801455e <__swhatbuf_r+0x22>
 801454e:	2300      	movs	r3, #0
 8014550:	602b      	str	r3, [r5, #0]
 8014552:	89b3      	ldrh	r3, [r6, #12]
 8014554:	061a      	lsls	r2, r3, #24
 8014556:	d410      	bmi.n	801457a <__swhatbuf_r+0x3e>
 8014558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801455c:	e00e      	b.n	801457c <__swhatbuf_r+0x40>
 801455e:	466a      	mov	r2, sp
 8014560:	f000 f946 	bl	80147f0 <_fstat_r>
 8014564:	2800      	cmp	r0, #0
 8014566:	dbf2      	blt.n	801454e <__swhatbuf_r+0x12>
 8014568:	9a01      	ldr	r2, [sp, #4]
 801456a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801456e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014572:	425a      	negs	r2, r3
 8014574:	415a      	adcs	r2, r3
 8014576:	602a      	str	r2, [r5, #0]
 8014578:	e7ee      	b.n	8014558 <__swhatbuf_r+0x1c>
 801457a:	2340      	movs	r3, #64	; 0x40
 801457c:	2000      	movs	r0, #0
 801457e:	6023      	str	r3, [r4, #0]
 8014580:	b016      	add	sp, #88	; 0x58
 8014582:	bd70      	pop	{r4, r5, r6, pc}

08014584 <__smakebuf_r>:
 8014584:	898b      	ldrh	r3, [r1, #12]
 8014586:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014588:	079d      	lsls	r5, r3, #30
 801458a:	4606      	mov	r6, r0
 801458c:	460c      	mov	r4, r1
 801458e:	d507      	bpl.n	80145a0 <__smakebuf_r+0x1c>
 8014590:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014594:	6023      	str	r3, [r4, #0]
 8014596:	6123      	str	r3, [r4, #16]
 8014598:	2301      	movs	r3, #1
 801459a:	6163      	str	r3, [r4, #20]
 801459c:	b002      	add	sp, #8
 801459e:	bd70      	pop	{r4, r5, r6, pc}
 80145a0:	ab01      	add	r3, sp, #4
 80145a2:	466a      	mov	r2, sp
 80145a4:	f7ff ffca 	bl	801453c <__swhatbuf_r>
 80145a8:	9900      	ldr	r1, [sp, #0]
 80145aa:	4605      	mov	r5, r0
 80145ac:	4630      	mov	r0, r6
 80145ae:	f7ff f9f9 	bl	80139a4 <_malloc_r>
 80145b2:	b948      	cbnz	r0, 80145c8 <__smakebuf_r+0x44>
 80145b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145b8:	059a      	lsls	r2, r3, #22
 80145ba:	d4ef      	bmi.n	801459c <__smakebuf_r+0x18>
 80145bc:	f023 0303 	bic.w	r3, r3, #3
 80145c0:	f043 0302 	orr.w	r3, r3, #2
 80145c4:	81a3      	strh	r3, [r4, #12]
 80145c6:	e7e3      	b.n	8014590 <__smakebuf_r+0xc>
 80145c8:	4b0d      	ldr	r3, [pc, #52]	; (8014600 <__smakebuf_r+0x7c>)
 80145ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80145cc:	89a3      	ldrh	r3, [r4, #12]
 80145ce:	6020      	str	r0, [r4, #0]
 80145d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145d4:	81a3      	strh	r3, [r4, #12]
 80145d6:	9b00      	ldr	r3, [sp, #0]
 80145d8:	6163      	str	r3, [r4, #20]
 80145da:	9b01      	ldr	r3, [sp, #4]
 80145dc:	6120      	str	r0, [r4, #16]
 80145de:	b15b      	cbz	r3, 80145f8 <__smakebuf_r+0x74>
 80145e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145e4:	4630      	mov	r0, r6
 80145e6:	f000 f915 	bl	8014814 <_isatty_r>
 80145ea:	b128      	cbz	r0, 80145f8 <__smakebuf_r+0x74>
 80145ec:	89a3      	ldrh	r3, [r4, #12]
 80145ee:	f023 0303 	bic.w	r3, r3, #3
 80145f2:	f043 0301 	orr.w	r3, r3, #1
 80145f6:	81a3      	strh	r3, [r4, #12]
 80145f8:	89a0      	ldrh	r0, [r4, #12]
 80145fa:	4305      	orrs	r5, r0
 80145fc:	81a5      	strh	r5, [r4, #12]
 80145fe:	e7cd      	b.n	801459c <__smakebuf_r+0x18>
 8014600:	08014395 	.word	0x08014395

08014604 <memmove>:
 8014604:	4288      	cmp	r0, r1
 8014606:	b510      	push	{r4, lr}
 8014608:	eb01 0402 	add.w	r4, r1, r2
 801460c:	d902      	bls.n	8014614 <memmove+0x10>
 801460e:	4284      	cmp	r4, r0
 8014610:	4623      	mov	r3, r4
 8014612:	d807      	bhi.n	8014624 <memmove+0x20>
 8014614:	1e43      	subs	r3, r0, #1
 8014616:	42a1      	cmp	r1, r4
 8014618:	d008      	beq.n	801462c <memmove+0x28>
 801461a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801461e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014622:	e7f8      	b.n	8014616 <memmove+0x12>
 8014624:	4402      	add	r2, r0
 8014626:	4601      	mov	r1, r0
 8014628:	428a      	cmp	r2, r1
 801462a:	d100      	bne.n	801462e <memmove+0x2a>
 801462c:	bd10      	pop	{r4, pc}
 801462e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014636:	e7f7      	b.n	8014628 <memmove+0x24>

08014638 <__malloc_lock>:
 8014638:	4801      	ldr	r0, [pc, #4]	; (8014640 <__malloc_lock+0x8>)
 801463a:	f7ff bf7d 	b.w	8014538 <__retarget_lock_acquire_recursive>
 801463e:	bf00      	nop
 8014640:	2000944c 	.word	0x2000944c

08014644 <__malloc_unlock>:
 8014644:	4801      	ldr	r0, [pc, #4]	; (801464c <__malloc_unlock+0x8>)
 8014646:	f7ff bf78 	b.w	801453a <__retarget_lock_release_recursive>
 801464a:	bf00      	nop
 801464c:	2000944c 	.word	0x2000944c

08014650 <_realloc_r>:
 8014650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014652:	4607      	mov	r7, r0
 8014654:	4614      	mov	r4, r2
 8014656:	460e      	mov	r6, r1
 8014658:	b921      	cbnz	r1, 8014664 <_realloc_r+0x14>
 801465a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801465e:	4611      	mov	r1, r2
 8014660:	f7ff b9a0 	b.w	80139a4 <_malloc_r>
 8014664:	b922      	cbnz	r2, 8014670 <_realloc_r+0x20>
 8014666:	f7ff f94d 	bl	8013904 <_free_r>
 801466a:	4625      	mov	r5, r4
 801466c:	4628      	mov	r0, r5
 801466e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014670:	f000 f8f2 	bl	8014858 <_malloc_usable_size_r>
 8014674:	42a0      	cmp	r0, r4
 8014676:	d20f      	bcs.n	8014698 <_realloc_r+0x48>
 8014678:	4621      	mov	r1, r4
 801467a:	4638      	mov	r0, r7
 801467c:	f7ff f992 	bl	80139a4 <_malloc_r>
 8014680:	4605      	mov	r5, r0
 8014682:	2800      	cmp	r0, #0
 8014684:	d0f2      	beq.n	801466c <_realloc_r+0x1c>
 8014686:	4631      	mov	r1, r6
 8014688:	4622      	mov	r2, r4
 801468a:	f7fb fe2d 	bl	80102e8 <memcpy>
 801468e:	4631      	mov	r1, r6
 8014690:	4638      	mov	r0, r7
 8014692:	f7ff f937 	bl	8013904 <_free_r>
 8014696:	e7e9      	b.n	801466c <_realloc_r+0x1c>
 8014698:	4635      	mov	r5, r6
 801469a:	e7e7      	b.n	801466c <_realloc_r+0x1c>

0801469c <_raise_r>:
 801469c:	291f      	cmp	r1, #31
 801469e:	b538      	push	{r3, r4, r5, lr}
 80146a0:	4604      	mov	r4, r0
 80146a2:	460d      	mov	r5, r1
 80146a4:	d904      	bls.n	80146b0 <_raise_r+0x14>
 80146a6:	2316      	movs	r3, #22
 80146a8:	6003      	str	r3, [r0, #0]
 80146aa:	f04f 30ff 	mov.w	r0, #4294967295
 80146ae:	bd38      	pop	{r3, r4, r5, pc}
 80146b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80146b2:	b112      	cbz	r2, 80146ba <_raise_r+0x1e>
 80146b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80146b8:	b94b      	cbnz	r3, 80146ce <_raise_r+0x32>
 80146ba:	4620      	mov	r0, r4
 80146bc:	f000 f830 	bl	8014720 <_getpid_r>
 80146c0:	462a      	mov	r2, r5
 80146c2:	4601      	mov	r1, r0
 80146c4:	4620      	mov	r0, r4
 80146c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80146ca:	f000 b817 	b.w	80146fc <_kill_r>
 80146ce:	2b01      	cmp	r3, #1
 80146d0:	d00a      	beq.n	80146e8 <_raise_r+0x4c>
 80146d2:	1c59      	adds	r1, r3, #1
 80146d4:	d103      	bne.n	80146de <_raise_r+0x42>
 80146d6:	2316      	movs	r3, #22
 80146d8:	6003      	str	r3, [r0, #0]
 80146da:	2001      	movs	r0, #1
 80146dc:	e7e7      	b.n	80146ae <_raise_r+0x12>
 80146de:	2400      	movs	r4, #0
 80146e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80146e4:	4628      	mov	r0, r5
 80146e6:	4798      	blx	r3
 80146e8:	2000      	movs	r0, #0
 80146ea:	e7e0      	b.n	80146ae <_raise_r+0x12>

080146ec <raise>:
 80146ec:	4b02      	ldr	r3, [pc, #8]	; (80146f8 <raise+0xc>)
 80146ee:	4601      	mov	r1, r0
 80146f0:	6818      	ldr	r0, [r3, #0]
 80146f2:	f7ff bfd3 	b.w	801469c <_raise_r>
 80146f6:	bf00      	nop
 80146f8:	2000002c 	.word	0x2000002c

080146fc <_kill_r>:
 80146fc:	b538      	push	{r3, r4, r5, lr}
 80146fe:	4d07      	ldr	r5, [pc, #28]	; (801471c <_kill_r+0x20>)
 8014700:	2300      	movs	r3, #0
 8014702:	4604      	mov	r4, r0
 8014704:	4608      	mov	r0, r1
 8014706:	4611      	mov	r1, r2
 8014708:	602b      	str	r3, [r5, #0]
 801470a:	f7ef fd09 	bl	8004120 <_kill>
 801470e:	1c43      	adds	r3, r0, #1
 8014710:	d102      	bne.n	8014718 <_kill_r+0x1c>
 8014712:	682b      	ldr	r3, [r5, #0]
 8014714:	b103      	cbz	r3, 8014718 <_kill_r+0x1c>
 8014716:	6023      	str	r3, [r4, #0]
 8014718:	bd38      	pop	{r3, r4, r5, pc}
 801471a:	bf00      	nop
 801471c:	20009454 	.word	0x20009454

08014720 <_getpid_r>:
 8014720:	f7ef bcf6 	b.w	8004110 <_getpid>

08014724 <__sread>:
 8014724:	b510      	push	{r4, lr}
 8014726:	460c      	mov	r4, r1
 8014728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801472c:	f000 f89c 	bl	8014868 <_read_r>
 8014730:	2800      	cmp	r0, #0
 8014732:	bfab      	itete	ge
 8014734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014736:	89a3      	ldrhlt	r3, [r4, #12]
 8014738:	181b      	addge	r3, r3, r0
 801473a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801473e:	bfac      	ite	ge
 8014740:	6563      	strge	r3, [r4, #84]	; 0x54
 8014742:	81a3      	strhlt	r3, [r4, #12]
 8014744:	bd10      	pop	{r4, pc}

08014746 <__swrite>:
 8014746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801474a:	461f      	mov	r7, r3
 801474c:	898b      	ldrh	r3, [r1, #12]
 801474e:	05db      	lsls	r3, r3, #23
 8014750:	4605      	mov	r5, r0
 8014752:	460c      	mov	r4, r1
 8014754:	4616      	mov	r6, r2
 8014756:	d505      	bpl.n	8014764 <__swrite+0x1e>
 8014758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801475c:	2302      	movs	r3, #2
 801475e:	2200      	movs	r2, #0
 8014760:	f000 f868 	bl	8014834 <_lseek_r>
 8014764:	89a3      	ldrh	r3, [r4, #12]
 8014766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801476a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801476e:	81a3      	strh	r3, [r4, #12]
 8014770:	4632      	mov	r2, r6
 8014772:	463b      	mov	r3, r7
 8014774:	4628      	mov	r0, r5
 8014776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801477a:	f000 b817 	b.w	80147ac <_write_r>

0801477e <__sseek>:
 801477e:	b510      	push	{r4, lr}
 8014780:	460c      	mov	r4, r1
 8014782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014786:	f000 f855 	bl	8014834 <_lseek_r>
 801478a:	1c43      	adds	r3, r0, #1
 801478c:	89a3      	ldrh	r3, [r4, #12]
 801478e:	bf15      	itete	ne
 8014790:	6560      	strne	r0, [r4, #84]	; 0x54
 8014792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801479a:	81a3      	strheq	r3, [r4, #12]
 801479c:	bf18      	it	ne
 801479e:	81a3      	strhne	r3, [r4, #12]
 80147a0:	bd10      	pop	{r4, pc}

080147a2 <__sclose>:
 80147a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147a6:	f000 b813 	b.w	80147d0 <_close_r>
	...

080147ac <_write_r>:
 80147ac:	b538      	push	{r3, r4, r5, lr}
 80147ae:	4d07      	ldr	r5, [pc, #28]	; (80147cc <_write_r+0x20>)
 80147b0:	4604      	mov	r4, r0
 80147b2:	4608      	mov	r0, r1
 80147b4:	4611      	mov	r1, r2
 80147b6:	2200      	movs	r2, #0
 80147b8:	602a      	str	r2, [r5, #0]
 80147ba:	461a      	mov	r2, r3
 80147bc:	f7ef fce7 	bl	800418e <_write>
 80147c0:	1c43      	adds	r3, r0, #1
 80147c2:	d102      	bne.n	80147ca <_write_r+0x1e>
 80147c4:	682b      	ldr	r3, [r5, #0]
 80147c6:	b103      	cbz	r3, 80147ca <_write_r+0x1e>
 80147c8:	6023      	str	r3, [r4, #0]
 80147ca:	bd38      	pop	{r3, r4, r5, pc}
 80147cc:	20009454 	.word	0x20009454

080147d0 <_close_r>:
 80147d0:	b538      	push	{r3, r4, r5, lr}
 80147d2:	4d06      	ldr	r5, [pc, #24]	; (80147ec <_close_r+0x1c>)
 80147d4:	2300      	movs	r3, #0
 80147d6:	4604      	mov	r4, r0
 80147d8:	4608      	mov	r0, r1
 80147da:	602b      	str	r3, [r5, #0]
 80147dc:	f7ef fcf3 	bl	80041c6 <_close>
 80147e0:	1c43      	adds	r3, r0, #1
 80147e2:	d102      	bne.n	80147ea <_close_r+0x1a>
 80147e4:	682b      	ldr	r3, [r5, #0]
 80147e6:	b103      	cbz	r3, 80147ea <_close_r+0x1a>
 80147e8:	6023      	str	r3, [r4, #0]
 80147ea:	bd38      	pop	{r3, r4, r5, pc}
 80147ec:	20009454 	.word	0x20009454

080147f0 <_fstat_r>:
 80147f0:	b538      	push	{r3, r4, r5, lr}
 80147f2:	4d07      	ldr	r5, [pc, #28]	; (8014810 <_fstat_r+0x20>)
 80147f4:	2300      	movs	r3, #0
 80147f6:	4604      	mov	r4, r0
 80147f8:	4608      	mov	r0, r1
 80147fa:	4611      	mov	r1, r2
 80147fc:	602b      	str	r3, [r5, #0]
 80147fe:	f7ef fcee 	bl	80041de <_fstat>
 8014802:	1c43      	adds	r3, r0, #1
 8014804:	d102      	bne.n	801480c <_fstat_r+0x1c>
 8014806:	682b      	ldr	r3, [r5, #0]
 8014808:	b103      	cbz	r3, 801480c <_fstat_r+0x1c>
 801480a:	6023      	str	r3, [r4, #0]
 801480c:	bd38      	pop	{r3, r4, r5, pc}
 801480e:	bf00      	nop
 8014810:	20009454 	.word	0x20009454

08014814 <_isatty_r>:
 8014814:	b538      	push	{r3, r4, r5, lr}
 8014816:	4d06      	ldr	r5, [pc, #24]	; (8014830 <_isatty_r+0x1c>)
 8014818:	2300      	movs	r3, #0
 801481a:	4604      	mov	r4, r0
 801481c:	4608      	mov	r0, r1
 801481e:	602b      	str	r3, [r5, #0]
 8014820:	f7ef fced 	bl	80041fe <_isatty>
 8014824:	1c43      	adds	r3, r0, #1
 8014826:	d102      	bne.n	801482e <_isatty_r+0x1a>
 8014828:	682b      	ldr	r3, [r5, #0]
 801482a:	b103      	cbz	r3, 801482e <_isatty_r+0x1a>
 801482c:	6023      	str	r3, [r4, #0]
 801482e:	bd38      	pop	{r3, r4, r5, pc}
 8014830:	20009454 	.word	0x20009454

08014834 <_lseek_r>:
 8014834:	b538      	push	{r3, r4, r5, lr}
 8014836:	4d07      	ldr	r5, [pc, #28]	; (8014854 <_lseek_r+0x20>)
 8014838:	4604      	mov	r4, r0
 801483a:	4608      	mov	r0, r1
 801483c:	4611      	mov	r1, r2
 801483e:	2200      	movs	r2, #0
 8014840:	602a      	str	r2, [r5, #0]
 8014842:	461a      	mov	r2, r3
 8014844:	f7ef fce6 	bl	8004214 <_lseek>
 8014848:	1c43      	adds	r3, r0, #1
 801484a:	d102      	bne.n	8014852 <_lseek_r+0x1e>
 801484c:	682b      	ldr	r3, [r5, #0]
 801484e:	b103      	cbz	r3, 8014852 <_lseek_r+0x1e>
 8014850:	6023      	str	r3, [r4, #0]
 8014852:	bd38      	pop	{r3, r4, r5, pc}
 8014854:	20009454 	.word	0x20009454

08014858 <_malloc_usable_size_r>:
 8014858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801485c:	1f18      	subs	r0, r3, #4
 801485e:	2b00      	cmp	r3, #0
 8014860:	bfbc      	itt	lt
 8014862:	580b      	ldrlt	r3, [r1, r0]
 8014864:	18c0      	addlt	r0, r0, r3
 8014866:	4770      	bx	lr

08014868 <_read_r>:
 8014868:	b538      	push	{r3, r4, r5, lr}
 801486a:	4d07      	ldr	r5, [pc, #28]	; (8014888 <_read_r+0x20>)
 801486c:	4604      	mov	r4, r0
 801486e:	4608      	mov	r0, r1
 8014870:	4611      	mov	r1, r2
 8014872:	2200      	movs	r2, #0
 8014874:	602a      	str	r2, [r5, #0]
 8014876:	461a      	mov	r2, r3
 8014878:	f7ef fc6c 	bl	8004154 <_read>
 801487c:	1c43      	adds	r3, r0, #1
 801487e:	d102      	bne.n	8014886 <_read_r+0x1e>
 8014880:	682b      	ldr	r3, [r5, #0]
 8014882:	b103      	cbz	r3, 8014886 <_read_r+0x1e>
 8014884:	6023      	str	r3, [r4, #0]
 8014886:	bd38      	pop	{r3, r4, r5, pc}
 8014888:	20009454 	.word	0x20009454
 801488c:	00000000 	.word	0x00000000

08014890 <cos>:
 8014890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014892:	ec53 2b10 	vmov	r2, r3, d0
 8014896:	4824      	ldr	r0, [pc, #144]	; (8014928 <cos+0x98>)
 8014898:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801489c:	4281      	cmp	r1, r0
 801489e:	dc06      	bgt.n	80148ae <cos+0x1e>
 80148a0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8014920 <cos+0x90>
 80148a4:	f000 fe24 	bl	80154f0 <__kernel_cos>
 80148a8:	ec51 0b10 	vmov	r0, r1, d0
 80148ac:	e007      	b.n	80148be <cos+0x2e>
 80148ae:	481f      	ldr	r0, [pc, #124]	; (801492c <cos+0x9c>)
 80148b0:	4281      	cmp	r1, r0
 80148b2:	dd09      	ble.n	80148c8 <cos+0x38>
 80148b4:	ee10 0a10 	vmov	r0, s0
 80148b8:	4619      	mov	r1, r3
 80148ba:	f7eb fced 	bl	8000298 <__aeabi_dsub>
 80148be:	ec41 0b10 	vmov	d0, r0, r1
 80148c2:	b005      	add	sp, #20
 80148c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80148c8:	4668      	mov	r0, sp
 80148ca:	f000 fb51 	bl	8014f70 <__ieee754_rem_pio2>
 80148ce:	f000 0003 	and.w	r0, r0, #3
 80148d2:	2801      	cmp	r0, #1
 80148d4:	d007      	beq.n	80148e6 <cos+0x56>
 80148d6:	2802      	cmp	r0, #2
 80148d8:	d012      	beq.n	8014900 <cos+0x70>
 80148da:	b9c0      	cbnz	r0, 801490e <cos+0x7e>
 80148dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80148e0:	ed9d 0b00 	vldr	d0, [sp]
 80148e4:	e7de      	b.n	80148a4 <cos+0x14>
 80148e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80148ea:	ed9d 0b00 	vldr	d0, [sp]
 80148ee:	f001 fa07 	bl	8015d00 <__kernel_sin>
 80148f2:	ec53 2b10 	vmov	r2, r3, d0
 80148f6:	ee10 0a10 	vmov	r0, s0
 80148fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80148fe:	e7de      	b.n	80148be <cos+0x2e>
 8014900:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014904:	ed9d 0b00 	vldr	d0, [sp]
 8014908:	f000 fdf2 	bl	80154f0 <__kernel_cos>
 801490c:	e7f1      	b.n	80148f2 <cos+0x62>
 801490e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014912:	ed9d 0b00 	vldr	d0, [sp]
 8014916:	2001      	movs	r0, #1
 8014918:	f001 f9f2 	bl	8015d00 <__kernel_sin>
 801491c:	e7c4      	b.n	80148a8 <cos+0x18>
 801491e:	bf00      	nop
	...
 8014928:	3fe921fb 	.word	0x3fe921fb
 801492c:	7fefffff 	.word	0x7fefffff

08014930 <sin>:
 8014930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014932:	ec53 2b10 	vmov	r2, r3, d0
 8014936:	4826      	ldr	r0, [pc, #152]	; (80149d0 <sin+0xa0>)
 8014938:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801493c:	4281      	cmp	r1, r0
 801493e:	dc07      	bgt.n	8014950 <sin+0x20>
 8014940:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80149c8 <sin+0x98>
 8014944:	2000      	movs	r0, #0
 8014946:	f001 f9db 	bl	8015d00 <__kernel_sin>
 801494a:	ec51 0b10 	vmov	r0, r1, d0
 801494e:	e007      	b.n	8014960 <sin+0x30>
 8014950:	4820      	ldr	r0, [pc, #128]	; (80149d4 <sin+0xa4>)
 8014952:	4281      	cmp	r1, r0
 8014954:	dd09      	ble.n	801496a <sin+0x3a>
 8014956:	ee10 0a10 	vmov	r0, s0
 801495a:	4619      	mov	r1, r3
 801495c:	f7eb fc9c 	bl	8000298 <__aeabi_dsub>
 8014960:	ec41 0b10 	vmov	d0, r0, r1
 8014964:	b005      	add	sp, #20
 8014966:	f85d fb04 	ldr.w	pc, [sp], #4
 801496a:	4668      	mov	r0, sp
 801496c:	f000 fb00 	bl	8014f70 <__ieee754_rem_pio2>
 8014970:	f000 0003 	and.w	r0, r0, #3
 8014974:	2801      	cmp	r0, #1
 8014976:	d008      	beq.n	801498a <sin+0x5a>
 8014978:	2802      	cmp	r0, #2
 801497a:	d00d      	beq.n	8014998 <sin+0x68>
 801497c:	b9d0      	cbnz	r0, 80149b4 <sin+0x84>
 801497e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014982:	ed9d 0b00 	vldr	d0, [sp]
 8014986:	2001      	movs	r0, #1
 8014988:	e7dd      	b.n	8014946 <sin+0x16>
 801498a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801498e:	ed9d 0b00 	vldr	d0, [sp]
 8014992:	f000 fdad 	bl	80154f0 <__kernel_cos>
 8014996:	e7d8      	b.n	801494a <sin+0x1a>
 8014998:	ed9d 1b02 	vldr	d1, [sp, #8]
 801499c:	ed9d 0b00 	vldr	d0, [sp]
 80149a0:	2001      	movs	r0, #1
 80149a2:	f001 f9ad 	bl	8015d00 <__kernel_sin>
 80149a6:	ec53 2b10 	vmov	r2, r3, d0
 80149aa:	ee10 0a10 	vmov	r0, s0
 80149ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80149b2:	e7d5      	b.n	8014960 <sin+0x30>
 80149b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80149b8:	ed9d 0b00 	vldr	d0, [sp]
 80149bc:	f000 fd98 	bl	80154f0 <__kernel_cos>
 80149c0:	e7f1      	b.n	80149a6 <sin+0x76>
 80149c2:	bf00      	nop
 80149c4:	f3af 8000 	nop.w
	...
 80149d0:	3fe921fb 	.word	0x3fe921fb
 80149d4:	7fefffff 	.word	0x7fefffff

080149d8 <trunc>:
 80149d8:	ec51 0b10 	vmov	r0, r1, d0
 80149dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80149e0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80149e4:	2b13      	cmp	r3, #19
 80149e6:	b5d0      	push	{r4, r6, r7, lr}
 80149e8:	460c      	mov	r4, r1
 80149ea:	dc10      	bgt.n	8014a0e <trunc+0x36>
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	bfa5      	ittet	ge
 80149f0:	4a11      	ldrge	r2, [pc, #68]	; (8014a38 <trunc+0x60>)
 80149f2:	fa42 f303 	asrge.w	r3, r2, r3
 80149f6:	2100      	movlt	r1, #0
 80149f8:	2100      	movge	r1, #0
 80149fa:	bfb9      	ittee	lt
 80149fc:	2000      	movlt	r0, #0
 80149fe:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8014a02:	2000      	movge	r0, #0
 8014a04:	ea24 0103 	bicge.w	r1, r4, r3
 8014a08:	ec41 0b10 	vmov	d0, r0, r1
 8014a0c:	bdd0      	pop	{r4, r6, r7, pc}
 8014a0e:	2b33      	cmp	r3, #51	; 0x33
 8014a10:	dd08      	ble.n	8014a24 <trunc+0x4c>
 8014a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014a16:	d1f7      	bne.n	8014a08 <trunc+0x30>
 8014a18:	ee10 2a10 	vmov	r2, s0
 8014a1c:	460b      	mov	r3, r1
 8014a1e:	f7eb fc3d 	bl	800029c <__adddf3>
 8014a22:	e7f1      	b.n	8014a08 <trunc+0x30>
 8014a24:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8014a28:	f04f 33ff 	mov.w	r3, #4294967295
 8014a2c:	fa23 f202 	lsr.w	r2, r3, r2
 8014a30:	ea20 0602 	bic.w	r6, r0, r2
 8014a34:	4630      	mov	r0, r6
 8014a36:	e7e7      	b.n	8014a08 <trunc+0x30>
 8014a38:	000fffff 	.word	0x000fffff

08014a3c <acos>:
 8014a3c:	b538      	push	{r3, r4, r5, lr}
 8014a3e:	ed2d 8b02 	vpush	{d8}
 8014a42:	ec55 4b10 	vmov	r4, r5, d0
 8014a46:	f000 f833 	bl	8014ab0 <__ieee754_acos>
 8014a4a:	4b16      	ldr	r3, [pc, #88]	; (8014aa4 <acos+0x68>)
 8014a4c:	eeb0 8a40 	vmov.f32	s16, s0
 8014a50:	eef0 8a60 	vmov.f32	s17, s1
 8014a54:	f993 3000 	ldrsb.w	r3, [r3]
 8014a58:	3301      	adds	r3, #1
 8014a5a:	d01c      	beq.n	8014a96 <acos+0x5a>
 8014a5c:	4622      	mov	r2, r4
 8014a5e:	462b      	mov	r3, r5
 8014a60:	4620      	mov	r0, r4
 8014a62:	4629      	mov	r1, r5
 8014a64:	f7ec f86a 	bl	8000b3c <__aeabi_dcmpun>
 8014a68:	b9a8      	cbnz	r0, 8014a96 <acos+0x5a>
 8014a6a:	ec45 4b10 	vmov	d0, r4, r5
 8014a6e:	f001 fa05 	bl	8015e7c <fabs>
 8014a72:	4b0d      	ldr	r3, [pc, #52]	; (8014aa8 <acos+0x6c>)
 8014a74:	ec51 0b10 	vmov	r0, r1, d0
 8014a78:	2200      	movs	r2, #0
 8014a7a:	f7ec f855 	bl	8000b28 <__aeabi_dcmpgt>
 8014a7e:	b150      	cbz	r0, 8014a96 <acos+0x5a>
 8014a80:	f7fb fc08 	bl	8010294 <__errno>
 8014a84:	ecbd 8b02 	vpop	{d8}
 8014a88:	2321      	movs	r3, #33	; 0x21
 8014a8a:	6003      	str	r3, [r0, #0]
 8014a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a90:	4806      	ldr	r0, [pc, #24]	; (8014aac <acos+0x70>)
 8014a92:	f7ff ba99 	b.w	8013fc8 <nan>
 8014a96:	eeb0 0a48 	vmov.f32	s0, s16
 8014a9a:	eef0 0a68 	vmov.f32	s1, s17
 8014a9e:	ecbd 8b02 	vpop	{d8}
 8014aa2:	bd38      	pop	{r3, r4, r5, pc}
 8014aa4:	20000200 	.word	0x20000200
 8014aa8:	3ff00000 	.word	0x3ff00000
 8014aac:	08016a6b 	.word	0x08016a6b

08014ab0 <__ieee754_acos>:
 8014ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab4:	ec55 4b10 	vmov	r4, r5, d0
 8014ab8:	49b7      	ldr	r1, [pc, #732]	; (8014d98 <__ieee754_acos+0x2e8>)
 8014aba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014abe:	428b      	cmp	r3, r1
 8014ac0:	dd1b      	ble.n	8014afa <__ieee754_acos+0x4a>
 8014ac2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8014ac6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014aca:	4323      	orrs	r3, r4
 8014acc:	d106      	bne.n	8014adc <__ieee754_acos+0x2c>
 8014ace:	2d00      	cmp	r5, #0
 8014ad0:	f300 8211 	bgt.w	8014ef6 <__ieee754_acos+0x446>
 8014ad4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8014d30 <__ieee754_acos+0x280>
 8014ad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014adc:	ee10 2a10 	vmov	r2, s0
 8014ae0:	462b      	mov	r3, r5
 8014ae2:	ee10 0a10 	vmov	r0, s0
 8014ae6:	4629      	mov	r1, r5
 8014ae8:	f7eb fbd6 	bl	8000298 <__aeabi_dsub>
 8014aec:	4602      	mov	r2, r0
 8014aee:	460b      	mov	r3, r1
 8014af0:	f7eb feb4 	bl	800085c <__aeabi_ddiv>
 8014af4:	ec41 0b10 	vmov	d0, r0, r1
 8014af8:	e7ee      	b.n	8014ad8 <__ieee754_acos+0x28>
 8014afa:	49a8      	ldr	r1, [pc, #672]	; (8014d9c <__ieee754_acos+0x2ec>)
 8014afc:	428b      	cmp	r3, r1
 8014afe:	f300 8087 	bgt.w	8014c10 <__ieee754_acos+0x160>
 8014b02:	4aa7      	ldr	r2, [pc, #668]	; (8014da0 <__ieee754_acos+0x2f0>)
 8014b04:	4293      	cmp	r3, r2
 8014b06:	f340 81f9 	ble.w	8014efc <__ieee754_acos+0x44c>
 8014b0a:	ee10 2a10 	vmov	r2, s0
 8014b0e:	ee10 0a10 	vmov	r0, s0
 8014b12:	462b      	mov	r3, r5
 8014b14:	4629      	mov	r1, r5
 8014b16:	f7eb fd77 	bl	8000608 <__aeabi_dmul>
 8014b1a:	a387      	add	r3, pc, #540	; (adr r3, 8014d38 <__ieee754_acos+0x288>)
 8014b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b20:	4606      	mov	r6, r0
 8014b22:	460f      	mov	r7, r1
 8014b24:	f7eb fd70 	bl	8000608 <__aeabi_dmul>
 8014b28:	a385      	add	r3, pc, #532	; (adr r3, 8014d40 <__ieee754_acos+0x290>)
 8014b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b2e:	f7eb fbb5 	bl	800029c <__adddf3>
 8014b32:	4632      	mov	r2, r6
 8014b34:	463b      	mov	r3, r7
 8014b36:	f7eb fd67 	bl	8000608 <__aeabi_dmul>
 8014b3a:	a383      	add	r3, pc, #524	; (adr r3, 8014d48 <__ieee754_acos+0x298>)
 8014b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b40:	f7eb fbaa 	bl	8000298 <__aeabi_dsub>
 8014b44:	4632      	mov	r2, r6
 8014b46:	463b      	mov	r3, r7
 8014b48:	f7eb fd5e 	bl	8000608 <__aeabi_dmul>
 8014b4c:	a380      	add	r3, pc, #512	; (adr r3, 8014d50 <__ieee754_acos+0x2a0>)
 8014b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b52:	f7eb fba3 	bl	800029c <__adddf3>
 8014b56:	4632      	mov	r2, r6
 8014b58:	463b      	mov	r3, r7
 8014b5a:	f7eb fd55 	bl	8000608 <__aeabi_dmul>
 8014b5e:	a37e      	add	r3, pc, #504	; (adr r3, 8014d58 <__ieee754_acos+0x2a8>)
 8014b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b64:	f7eb fb98 	bl	8000298 <__aeabi_dsub>
 8014b68:	4632      	mov	r2, r6
 8014b6a:	463b      	mov	r3, r7
 8014b6c:	f7eb fd4c 	bl	8000608 <__aeabi_dmul>
 8014b70:	a37b      	add	r3, pc, #492	; (adr r3, 8014d60 <__ieee754_acos+0x2b0>)
 8014b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b76:	f7eb fb91 	bl	800029c <__adddf3>
 8014b7a:	4632      	mov	r2, r6
 8014b7c:	463b      	mov	r3, r7
 8014b7e:	f7eb fd43 	bl	8000608 <__aeabi_dmul>
 8014b82:	a379      	add	r3, pc, #484	; (adr r3, 8014d68 <__ieee754_acos+0x2b8>)
 8014b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b88:	4680      	mov	r8, r0
 8014b8a:	4689      	mov	r9, r1
 8014b8c:	4630      	mov	r0, r6
 8014b8e:	4639      	mov	r1, r7
 8014b90:	f7eb fd3a 	bl	8000608 <__aeabi_dmul>
 8014b94:	a376      	add	r3, pc, #472	; (adr r3, 8014d70 <__ieee754_acos+0x2c0>)
 8014b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b9a:	f7eb fb7d 	bl	8000298 <__aeabi_dsub>
 8014b9e:	4632      	mov	r2, r6
 8014ba0:	463b      	mov	r3, r7
 8014ba2:	f7eb fd31 	bl	8000608 <__aeabi_dmul>
 8014ba6:	a374      	add	r3, pc, #464	; (adr r3, 8014d78 <__ieee754_acos+0x2c8>)
 8014ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bac:	f7eb fb76 	bl	800029c <__adddf3>
 8014bb0:	4632      	mov	r2, r6
 8014bb2:	463b      	mov	r3, r7
 8014bb4:	f7eb fd28 	bl	8000608 <__aeabi_dmul>
 8014bb8:	a371      	add	r3, pc, #452	; (adr r3, 8014d80 <__ieee754_acos+0x2d0>)
 8014bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bbe:	f7eb fb6b 	bl	8000298 <__aeabi_dsub>
 8014bc2:	4632      	mov	r2, r6
 8014bc4:	463b      	mov	r3, r7
 8014bc6:	f7eb fd1f 	bl	8000608 <__aeabi_dmul>
 8014bca:	4b76      	ldr	r3, [pc, #472]	; (8014da4 <__ieee754_acos+0x2f4>)
 8014bcc:	2200      	movs	r2, #0
 8014bce:	f7eb fb65 	bl	800029c <__adddf3>
 8014bd2:	4602      	mov	r2, r0
 8014bd4:	460b      	mov	r3, r1
 8014bd6:	4640      	mov	r0, r8
 8014bd8:	4649      	mov	r1, r9
 8014bda:	f7eb fe3f 	bl	800085c <__aeabi_ddiv>
 8014bde:	4622      	mov	r2, r4
 8014be0:	462b      	mov	r3, r5
 8014be2:	f7eb fd11 	bl	8000608 <__aeabi_dmul>
 8014be6:	4602      	mov	r2, r0
 8014be8:	460b      	mov	r3, r1
 8014bea:	a167      	add	r1, pc, #412	; (adr r1, 8014d88 <__ieee754_acos+0x2d8>)
 8014bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014bf0:	f7eb fb52 	bl	8000298 <__aeabi_dsub>
 8014bf4:	4602      	mov	r2, r0
 8014bf6:	460b      	mov	r3, r1
 8014bf8:	4620      	mov	r0, r4
 8014bfa:	4629      	mov	r1, r5
 8014bfc:	f7eb fb4c 	bl	8000298 <__aeabi_dsub>
 8014c00:	4602      	mov	r2, r0
 8014c02:	460b      	mov	r3, r1
 8014c04:	a162      	add	r1, pc, #392	; (adr r1, 8014d90 <__ieee754_acos+0x2e0>)
 8014c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c0a:	f7eb fb45 	bl	8000298 <__aeabi_dsub>
 8014c0e:	e771      	b.n	8014af4 <__ieee754_acos+0x44>
 8014c10:	2d00      	cmp	r5, #0
 8014c12:	f280 80cb 	bge.w	8014dac <__ieee754_acos+0x2fc>
 8014c16:	ee10 0a10 	vmov	r0, s0
 8014c1a:	4b62      	ldr	r3, [pc, #392]	; (8014da4 <__ieee754_acos+0x2f4>)
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	4629      	mov	r1, r5
 8014c20:	f7eb fb3c 	bl	800029c <__adddf3>
 8014c24:	4b60      	ldr	r3, [pc, #384]	; (8014da8 <__ieee754_acos+0x2f8>)
 8014c26:	2200      	movs	r2, #0
 8014c28:	f7eb fcee 	bl	8000608 <__aeabi_dmul>
 8014c2c:	a342      	add	r3, pc, #264	; (adr r3, 8014d38 <__ieee754_acos+0x288>)
 8014c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c32:	4604      	mov	r4, r0
 8014c34:	460d      	mov	r5, r1
 8014c36:	f7eb fce7 	bl	8000608 <__aeabi_dmul>
 8014c3a:	a341      	add	r3, pc, #260	; (adr r3, 8014d40 <__ieee754_acos+0x290>)
 8014c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c40:	f7eb fb2c 	bl	800029c <__adddf3>
 8014c44:	4622      	mov	r2, r4
 8014c46:	462b      	mov	r3, r5
 8014c48:	f7eb fcde 	bl	8000608 <__aeabi_dmul>
 8014c4c:	a33e      	add	r3, pc, #248	; (adr r3, 8014d48 <__ieee754_acos+0x298>)
 8014c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c52:	f7eb fb21 	bl	8000298 <__aeabi_dsub>
 8014c56:	4622      	mov	r2, r4
 8014c58:	462b      	mov	r3, r5
 8014c5a:	f7eb fcd5 	bl	8000608 <__aeabi_dmul>
 8014c5e:	a33c      	add	r3, pc, #240	; (adr r3, 8014d50 <__ieee754_acos+0x2a0>)
 8014c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c64:	f7eb fb1a 	bl	800029c <__adddf3>
 8014c68:	4622      	mov	r2, r4
 8014c6a:	462b      	mov	r3, r5
 8014c6c:	f7eb fccc 	bl	8000608 <__aeabi_dmul>
 8014c70:	a339      	add	r3, pc, #228	; (adr r3, 8014d58 <__ieee754_acos+0x2a8>)
 8014c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c76:	f7eb fb0f 	bl	8000298 <__aeabi_dsub>
 8014c7a:	4622      	mov	r2, r4
 8014c7c:	462b      	mov	r3, r5
 8014c7e:	f7eb fcc3 	bl	8000608 <__aeabi_dmul>
 8014c82:	a337      	add	r3, pc, #220	; (adr r3, 8014d60 <__ieee754_acos+0x2b0>)
 8014c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c88:	f7eb fb08 	bl	800029c <__adddf3>
 8014c8c:	4622      	mov	r2, r4
 8014c8e:	462b      	mov	r3, r5
 8014c90:	f7eb fcba 	bl	8000608 <__aeabi_dmul>
 8014c94:	ec45 4b10 	vmov	d0, r4, r5
 8014c98:	4680      	mov	r8, r0
 8014c9a:	4689      	mov	r9, r1
 8014c9c:	f000 fb72 	bl	8015384 <__ieee754_sqrt>
 8014ca0:	a331      	add	r3, pc, #196	; (adr r3, 8014d68 <__ieee754_acos+0x2b8>)
 8014ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca6:	4620      	mov	r0, r4
 8014ca8:	4629      	mov	r1, r5
 8014caa:	ec57 6b10 	vmov	r6, r7, d0
 8014cae:	f7eb fcab 	bl	8000608 <__aeabi_dmul>
 8014cb2:	a32f      	add	r3, pc, #188	; (adr r3, 8014d70 <__ieee754_acos+0x2c0>)
 8014cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb8:	f7eb faee 	bl	8000298 <__aeabi_dsub>
 8014cbc:	4622      	mov	r2, r4
 8014cbe:	462b      	mov	r3, r5
 8014cc0:	f7eb fca2 	bl	8000608 <__aeabi_dmul>
 8014cc4:	a32c      	add	r3, pc, #176	; (adr r3, 8014d78 <__ieee754_acos+0x2c8>)
 8014cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cca:	f7eb fae7 	bl	800029c <__adddf3>
 8014cce:	4622      	mov	r2, r4
 8014cd0:	462b      	mov	r3, r5
 8014cd2:	f7eb fc99 	bl	8000608 <__aeabi_dmul>
 8014cd6:	a32a      	add	r3, pc, #168	; (adr r3, 8014d80 <__ieee754_acos+0x2d0>)
 8014cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cdc:	f7eb fadc 	bl	8000298 <__aeabi_dsub>
 8014ce0:	4622      	mov	r2, r4
 8014ce2:	462b      	mov	r3, r5
 8014ce4:	f7eb fc90 	bl	8000608 <__aeabi_dmul>
 8014ce8:	4b2e      	ldr	r3, [pc, #184]	; (8014da4 <__ieee754_acos+0x2f4>)
 8014cea:	2200      	movs	r2, #0
 8014cec:	f7eb fad6 	bl	800029c <__adddf3>
 8014cf0:	4602      	mov	r2, r0
 8014cf2:	460b      	mov	r3, r1
 8014cf4:	4640      	mov	r0, r8
 8014cf6:	4649      	mov	r1, r9
 8014cf8:	f7eb fdb0 	bl	800085c <__aeabi_ddiv>
 8014cfc:	4632      	mov	r2, r6
 8014cfe:	463b      	mov	r3, r7
 8014d00:	f7eb fc82 	bl	8000608 <__aeabi_dmul>
 8014d04:	a320      	add	r3, pc, #128	; (adr r3, 8014d88 <__ieee754_acos+0x2d8>)
 8014d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d0a:	f7eb fac5 	bl	8000298 <__aeabi_dsub>
 8014d0e:	4632      	mov	r2, r6
 8014d10:	463b      	mov	r3, r7
 8014d12:	f7eb fac3 	bl	800029c <__adddf3>
 8014d16:	4602      	mov	r2, r0
 8014d18:	460b      	mov	r3, r1
 8014d1a:	f7eb fabf 	bl	800029c <__adddf3>
 8014d1e:	4602      	mov	r2, r0
 8014d20:	460b      	mov	r3, r1
 8014d22:	a103      	add	r1, pc, #12	; (adr r1, 8014d30 <__ieee754_acos+0x280>)
 8014d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d28:	e76f      	b.n	8014c0a <__ieee754_acos+0x15a>
 8014d2a:	bf00      	nop
 8014d2c:	f3af 8000 	nop.w
 8014d30:	54442d18 	.word	0x54442d18
 8014d34:	400921fb 	.word	0x400921fb
 8014d38:	0dfdf709 	.word	0x0dfdf709
 8014d3c:	3f023de1 	.word	0x3f023de1
 8014d40:	7501b288 	.word	0x7501b288
 8014d44:	3f49efe0 	.word	0x3f49efe0
 8014d48:	b5688f3b 	.word	0xb5688f3b
 8014d4c:	3fa48228 	.word	0x3fa48228
 8014d50:	0e884455 	.word	0x0e884455
 8014d54:	3fc9c155 	.word	0x3fc9c155
 8014d58:	03eb6f7d 	.word	0x03eb6f7d
 8014d5c:	3fd4d612 	.word	0x3fd4d612
 8014d60:	55555555 	.word	0x55555555
 8014d64:	3fc55555 	.word	0x3fc55555
 8014d68:	b12e9282 	.word	0xb12e9282
 8014d6c:	3fb3b8c5 	.word	0x3fb3b8c5
 8014d70:	1b8d0159 	.word	0x1b8d0159
 8014d74:	3fe6066c 	.word	0x3fe6066c
 8014d78:	9c598ac8 	.word	0x9c598ac8
 8014d7c:	40002ae5 	.word	0x40002ae5
 8014d80:	1c8a2d4b 	.word	0x1c8a2d4b
 8014d84:	40033a27 	.word	0x40033a27
 8014d88:	33145c07 	.word	0x33145c07
 8014d8c:	3c91a626 	.word	0x3c91a626
 8014d90:	54442d18 	.word	0x54442d18
 8014d94:	3ff921fb 	.word	0x3ff921fb
 8014d98:	3fefffff 	.word	0x3fefffff
 8014d9c:	3fdfffff 	.word	0x3fdfffff
 8014da0:	3c600000 	.word	0x3c600000
 8014da4:	3ff00000 	.word	0x3ff00000
 8014da8:	3fe00000 	.word	0x3fe00000
 8014dac:	ee10 2a10 	vmov	r2, s0
 8014db0:	462b      	mov	r3, r5
 8014db2:	496d      	ldr	r1, [pc, #436]	; (8014f68 <__ieee754_acos+0x4b8>)
 8014db4:	2000      	movs	r0, #0
 8014db6:	f7eb fa6f 	bl	8000298 <__aeabi_dsub>
 8014dba:	4b6c      	ldr	r3, [pc, #432]	; (8014f6c <__ieee754_acos+0x4bc>)
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	f7eb fc23 	bl	8000608 <__aeabi_dmul>
 8014dc2:	4604      	mov	r4, r0
 8014dc4:	460d      	mov	r5, r1
 8014dc6:	ec45 4b10 	vmov	d0, r4, r5
 8014dca:	f000 fadb 	bl	8015384 <__ieee754_sqrt>
 8014dce:	a34e      	add	r3, pc, #312	; (adr r3, 8014f08 <__ieee754_acos+0x458>)
 8014dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd4:	4620      	mov	r0, r4
 8014dd6:	4629      	mov	r1, r5
 8014dd8:	ec59 8b10 	vmov	r8, r9, d0
 8014ddc:	f7eb fc14 	bl	8000608 <__aeabi_dmul>
 8014de0:	a34b      	add	r3, pc, #300	; (adr r3, 8014f10 <__ieee754_acos+0x460>)
 8014de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014de6:	f7eb fa59 	bl	800029c <__adddf3>
 8014dea:	4622      	mov	r2, r4
 8014dec:	462b      	mov	r3, r5
 8014dee:	f7eb fc0b 	bl	8000608 <__aeabi_dmul>
 8014df2:	a349      	add	r3, pc, #292	; (adr r3, 8014f18 <__ieee754_acos+0x468>)
 8014df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014df8:	f7eb fa4e 	bl	8000298 <__aeabi_dsub>
 8014dfc:	4622      	mov	r2, r4
 8014dfe:	462b      	mov	r3, r5
 8014e00:	f7eb fc02 	bl	8000608 <__aeabi_dmul>
 8014e04:	a346      	add	r3, pc, #280	; (adr r3, 8014f20 <__ieee754_acos+0x470>)
 8014e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e0a:	f7eb fa47 	bl	800029c <__adddf3>
 8014e0e:	4622      	mov	r2, r4
 8014e10:	462b      	mov	r3, r5
 8014e12:	f7eb fbf9 	bl	8000608 <__aeabi_dmul>
 8014e16:	a344      	add	r3, pc, #272	; (adr r3, 8014f28 <__ieee754_acos+0x478>)
 8014e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e1c:	f7eb fa3c 	bl	8000298 <__aeabi_dsub>
 8014e20:	4622      	mov	r2, r4
 8014e22:	462b      	mov	r3, r5
 8014e24:	f7eb fbf0 	bl	8000608 <__aeabi_dmul>
 8014e28:	a341      	add	r3, pc, #260	; (adr r3, 8014f30 <__ieee754_acos+0x480>)
 8014e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e2e:	f7eb fa35 	bl	800029c <__adddf3>
 8014e32:	4622      	mov	r2, r4
 8014e34:	462b      	mov	r3, r5
 8014e36:	f7eb fbe7 	bl	8000608 <__aeabi_dmul>
 8014e3a:	a33f      	add	r3, pc, #252	; (adr r3, 8014f38 <__ieee754_acos+0x488>)
 8014e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e40:	4682      	mov	sl, r0
 8014e42:	468b      	mov	fp, r1
 8014e44:	4620      	mov	r0, r4
 8014e46:	4629      	mov	r1, r5
 8014e48:	f7eb fbde 	bl	8000608 <__aeabi_dmul>
 8014e4c:	a33c      	add	r3, pc, #240	; (adr r3, 8014f40 <__ieee754_acos+0x490>)
 8014e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e52:	f7eb fa21 	bl	8000298 <__aeabi_dsub>
 8014e56:	4622      	mov	r2, r4
 8014e58:	462b      	mov	r3, r5
 8014e5a:	f7eb fbd5 	bl	8000608 <__aeabi_dmul>
 8014e5e:	a33a      	add	r3, pc, #232	; (adr r3, 8014f48 <__ieee754_acos+0x498>)
 8014e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e64:	f7eb fa1a 	bl	800029c <__adddf3>
 8014e68:	4622      	mov	r2, r4
 8014e6a:	462b      	mov	r3, r5
 8014e6c:	f7eb fbcc 	bl	8000608 <__aeabi_dmul>
 8014e70:	a337      	add	r3, pc, #220	; (adr r3, 8014f50 <__ieee754_acos+0x4a0>)
 8014e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e76:	f7eb fa0f 	bl	8000298 <__aeabi_dsub>
 8014e7a:	4622      	mov	r2, r4
 8014e7c:	462b      	mov	r3, r5
 8014e7e:	f7eb fbc3 	bl	8000608 <__aeabi_dmul>
 8014e82:	4b39      	ldr	r3, [pc, #228]	; (8014f68 <__ieee754_acos+0x4b8>)
 8014e84:	2200      	movs	r2, #0
 8014e86:	f7eb fa09 	bl	800029c <__adddf3>
 8014e8a:	4602      	mov	r2, r0
 8014e8c:	460b      	mov	r3, r1
 8014e8e:	4650      	mov	r0, sl
 8014e90:	4659      	mov	r1, fp
 8014e92:	f7eb fce3 	bl	800085c <__aeabi_ddiv>
 8014e96:	4642      	mov	r2, r8
 8014e98:	464b      	mov	r3, r9
 8014e9a:	f7eb fbb5 	bl	8000608 <__aeabi_dmul>
 8014e9e:	2600      	movs	r6, #0
 8014ea0:	4682      	mov	sl, r0
 8014ea2:	468b      	mov	fp, r1
 8014ea4:	4632      	mov	r2, r6
 8014ea6:	464b      	mov	r3, r9
 8014ea8:	4630      	mov	r0, r6
 8014eaa:	4649      	mov	r1, r9
 8014eac:	f7eb fbac 	bl	8000608 <__aeabi_dmul>
 8014eb0:	4602      	mov	r2, r0
 8014eb2:	460b      	mov	r3, r1
 8014eb4:	4620      	mov	r0, r4
 8014eb6:	4629      	mov	r1, r5
 8014eb8:	f7eb f9ee 	bl	8000298 <__aeabi_dsub>
 8014ebc:	4632      	mov	r2, r6
 8014ebe:	4604      	mov	r4, r0
 8014ec0:	460d      	mov	r5, r1
 8014ec2:	464b      	mov	r3, r9
 8014ec4:	4640      	mov	r0, r8
 8014ec6:	4649      	mov	r1, r9
 8014ec8:	f7eb f9e8 	bl	800029c <__adddf3>
 8014ecc:	4602      	mov	r2, r0
 8014ece:	460b      	mov	r3, r1
 8014ed0:	4620      	mov	r0, r4
 8014ed2:	4629      	mov	r1, r5
 8014ed4:	f7eb fcc2 	bl	800085c <__aeabi_ddiv>
 8014ed8:	4602      	mov	r2, r0
 8014eda:	460b      	mov	r3, r1
 8014edc:	4650      	mov	r0, sl
 8014ede:	4659      	mov	r1, fp
 8014ee0:	f7eb f9dc 	bl	800029c <__adddf3>
 8014ee4:	4632      	mov	r2, r6
 8014ee6:	464b      	mov	r3, r9
 8014ee8:	f7eb f9d8 	bl	800029c <__adddf3>
 8014eec:	4602      	mov	r2, r0
 8014eee:	460b      	mov	r3, r1
 8014ef0:	f7eb f9d4 	bl	800029c <__adddf3>
 8014ef4:	e5fe      	b.n	8014af4 <__ieee754_acos+0x44>
 8014ef6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8014f58 <__ieee754_acos+0x4a8>
 8014efa:	e5ed      	b.n	8014ad8 <__ieee754_acos+0x28>
 8014efc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8014f60 <__ieee754_acos+0x4b0>
 8014f00:	e5ea      	b.n	8014ad8 <__ieee754_acos+0x28>
 8014f02:	bf00      	nop
 8014f04:	f3af 8000 	nop.w
 8014f08:	0dfdf709 	.word	0x0dfdf709
 8014f0c:	3f023de1 	.word	0x3f023de1
 8014f10:	7501b288 	.word	0x7501b288
 8014f14:	3f49efe0 	.word	0x3f49efe0
 8014f18:	b5688f3b 	.word	0xb5688f3b
 8014f1c:	3fa48228 	.word	0x3fa48228
 8014f20:	0e884455 	.word	0x0e884455
 8014f24:	3fc9c155 	.word	0x3fc9c155
 8014f28:	03eb6f7d 	.word	0x03eb6f7d
 8014f2c:	3fd4d612 	.word	0x3fd4d612
 8014f30:	55555555 	.word	0x55555555
 8014f34:	3fc55555 	.word	0x3fc55555
 8014f38:	b12e9282 	.word	0xb12e9282
 8014f3c:	3fb3b8c5 	.word	0x3fb3b8c5
 8014f40:	1b8d0159 	.word	0x1b8d0159
 8014f44:	3fe6066c 	.word	0x3fe6066c
 8014f48:	9c598ac8 	.word	0x9c598ac8
 8014f4c:	40002ae5 	.word	0x40002ae5
 8014f50:	1c8a2d4b 	.word	0x1c8a2d4b
 8014f54:	40033a27 	.word	0x40033a27
	...
 8014f60:	54442d18 	.word	0x54442d18
 8014f64:	3ff921fb 	.word	0x3ff921fb
 8014f68:	3ff00000 	.word	0x3ff00000
 8014f6c:	3fe00000 	.word	0x3fe00000

08014f70 <__ieee754_rem_pio2>:
 8014f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f74:	ed2d 8b02 	vpush	{d8}
 8014f78:	ec55 4b10 	vmov	r4, r5, d0
 8014f7c:	4bca      	ldr	r3, [pc, #808]	; (80152a8 <__ieee754_rem_pio2+0x338>)
 8014f7e:	b08b      	sub	sp, #44	; 0x2c
 8014f80:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8014f84:	4598      	cmp	r8, r3
 8014f86:	4682      	mov	sl, r0
 8014f88:	9502      	str	r5, [sp, #8]
 8014f8a:	dc08      	bgt.n	8014f9e <__ieee754_rem_pio2+0x2e>
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	2300      	movs	r3, #0
 8014f90:	ed80 0b00 	vstr	d0, [r0]
 8014f94:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014f98:	f04f 0b00 	mov.w	fp, #0
 8014f9c:	e028      	b.n	8014ff0 <__ieee754_rem_pio2+0x80>
 8014f9e:	4bc3      	ldr	r3, [pc, #780]	; (80152ac <__ieee754_rem_pio2+0x33c>)
 8014fa0:	4598      	cmp	r8, r3
 8014fa2:	dc78      	bgt.n	8015096 <__ieee754_rem_pio2+0x126>
 8014fa4:	9b02      	ldr	r3, [sp, #8]
 8014fa6:	4ec2      	ldr	r6, [pc, #776]	; (80152b0 <__ieee754_rem_pio2+0x340>)
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	ee10 0a10 	vmov	r0, s0
 8014fae:	a3b0      	add	r3, pc, #704	; (adr r3, 8015270 <__ieee754_rem_pio2+0x300>)
 8014fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fb4:	4629      	mov	r1, r5
 8014fb6:	dd39      	ble.n	801502c <__ieee754_rem_pio2+0xbc>
 8014fb8:	f7eb f96e 	bl	8000298 <__aeabi_dsub>
 8014fbc:	45b0      	cmp	r8, r6
 8014fbe:	4604      	mov	r4, r0
 8014fc0:	460d      	mov	r5, r1
 8014fc2:	d01b      	beq.n	8014ffc <__ieee754_rem_pio2+0x8c>
 8014fc4:	a3ac      	add	r3, pc, #688	; (adr r3, 8015278 <__ieee754_rem_pio2+0x308>)
 8014fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fca:	f7eb f965 	bl	8000298 <__aeabi_dsub>
 8014fce:	4602      	mov	r2, r0
 8014fd0:	460b      	mov	r3, r1
 8014fd2:	e9ca 2300 	strd	r2, r3, [sl]
 8014fd6:	4620      	mov	r0, r4
 8014fd8:	4629      	mov	r1, r5
 8014fda:	f7eb f95d 	bl	8000298 <__aeabi_dsub>
 8014fde:	a3a6      	add	r3, pc, #664	; (adr r3, 8015278 <__ieee754_rem_pio2+0x308>)
 8014fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fe4:	f7eb f958 	bl	8000298 <__aeabi_dsub>
 8014fe8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014fec:	f04f 0b01 	mov.w	fp, #1
 8014ff0:	4658      	mov	r0, fp
 8014ff2:	b00b      	add	sp, #44	; 0x2c
 8014ff4:	ecbd 8b02 	vpop	{d8}
 8014ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ffc:	a3a0      	add	r3, pc, #640	; (adr r3, 8015280 <__ieee754_rem_pio2+0x310>)
 8014ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015002:	f7eb f949 	bl	8000298 <__aeabi_dsub>
 8015006:	a3a0      	add	r3, pc, #640	; (adr r3, 8015288 <__ieee754_rem_pio2+0x318>)
 8015008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801500c:	4604      	mov	r4, r0
 801500e:	460d      	mov	r5, r1
 8015010:	f7eb f942 	bl	8000298 <__aeabi_dsub>
 8015014:	4602      	mov	r2, r0
 8015016:	460b      	mov	r3, r1
 8015018:	e9ca 2300 	strd	r2, r3, [sl]
 801501c:	4620      	mov	r0, r4
 801501e:	4629      	mov	r1, r5
 8015020:	f7eb f93a 	bl	8000298 <__aeabi_dsub>
 8015024:	a398      	add	r3, pc, #608	; (adr r3, 8015288 <__ieee754_rem_pio2+0x318>)
 8015026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801502a:	e7db      	b.n	8014fe4 <__ieee754_rem_pio2+0x74>
 801502c:	f7eb f936 	bl	800029c <__adddf3>
 8015030:	45b0      	cmp	r8, r6
 8015032:	4604      	mov	r4, r0
 8015034:	460d      	mov	r5, r1
 8015036:	d016      	beq.n	8015066 <__ieee754_rem_pio2+0xf6>
 8015038:	a38f      	add	r3, pc, #572	; (adr r3, 8015278 <__ieee754_rem_pio2+0x308>)
 801503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801503e:	f7eb f92d 	bl	800029c <__adddf3>
 8015042:	4602      	mov	r2, r0
 8015044:	460b      	mov	r3, r1
 8015046:	e9ca 2300 	strd	r2, r3, [sl]
 801504a:	4620      	mov	r0, r4
 801504c:	4629      	mov	r1, r5
 801504e:	f7eb f923 	bl	8000298 <__aeabi_dsub>
 8015052:	a389      	add	r3, pc, #548	; (adr r3, 8015278 <__ieee754_rem_pio2+0x308>)
 8015054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015058:	f7eb f920 	bl	800029c <__adddf3>
 801505c:	f04f 3bff 	mov.w	fp, #4294967295
 8015060:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015064:	e7c4      	b.n	8014ff0 <__ieee754_rem_pio2+0x80>
 8015066:	a386      	add	r3, pc, #536	; (adr r3, 8015280 <__ieee754_rem_pio2+0x310>)
 8015068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801506c:	f7eb f916 	bl	800029c <__adddf3>
 8015070:	a385      	add	r3, pc, #532	; (adr r3, 8015288 <__ieee754_rem_pio2+0x318>)
 8015072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015076:	4604      	mov	r4, r0
 8015078:	460d      	mov	r5, r1
 801507a:	f7eb f90f 	bl	800029c <__adddf3>
 801507e:	4602      	mov	r2, r0
 8015080:	460b      	mov	r3, r1
 8015082:	e9ca 2300 	strd	r2, r3, [sl]
 8015086:	4620      	mov	r0, r4
 8015088:	4629      	mov	r1, r5
 801508a:	f7eb f905 	bl	8000298 <__aeabi_dsub>
 801508e:	a37e      	add	r3, pc, #504	; (adr r3, 8015288 <__ieee754_rem_pio2+0x318>)
 8015090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015094:	e7e0      	b.n	8015058 <__ieee754_rem_pio2+0xe8>
 8015096:	4b87      	ldr	r3, [pc, #540]	; (80152b4 <__ieee754_rem_pio2+0x344>)
 8015098:	4598      	cmp	r8, r3
 801509a:	f300 80d9 	bgt.w	8015250 <__ieee754_rem_pio2+0x2e0>
 801509e:	f000 feed 	bl	8015e7c <fabs>
 80150a2:	ec55 4b10 	vmov	r4, r5, d0
 80150a6:	ee10 0a10 	vmov	r0, s0
 80150aa:	a379      	add	r3, pc, #484	; (adr r3, 8015290 <__ieee754_rem_pio2+0x320>)
 80150ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150b0:	4629      	mov	r1, r5
 80150b2:	f7eb faa9 	bl	8000608 <__aeabi_dmul>
 80150b6:	4b80      	ldr	r3, [pc, #512]	; (80152b8 <__ieee754_rem_pio2+0x348>)
 80150b8:	2200      	movs	r2, #0
 80150ba:	f7eb f8ef 	bl	800029c <__adddf3>
 80150be:	f7eb fd53 	bl	8000b68 <__aeabi_d2iz>
 80150c2:	4683      	mov	fp, r0
 80150c4:	f7eb fa36 	bl	8000534 <__aeabi_i2d>
 80150c8:	4602      	mov	r2, r0
 80150ca:	460b      	mov	r3, r1
 80150cc:	ec43 2b18 	vmov	d8, r2, r3
 80150d0:	a367      	add	r3, pc, #412	; (adr r3, 8015270 <__ieee754_rem_pio2+0x300>)
 80150d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150d6:	f7eb fa97 	bl	8000608 <__aeabi_dmul>
 80150da:	4602      	mov	r2, r0
 80150dc:	460b      	mov	r3, r1
 80150de:	4620      	mov	r0, r4
 80150e0:	4629      	mov	r1, r5
 80150e2:	f7eb f8d9 	bl	8000298 <__aeabi_dsub>
 80150e6:	a364      	add	r3, pc, #400	; (adr r3, 8015278 <__ieee754_rem_pio2+0x308>)
 80150e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150ec:	4606      	mov	r6, r0
 80150ee:	460f      	mov	r7, r1
 80150f0:	ec51 0b18 	vmov	r0, r1, d8
 80150f4:	f7eb fa88 	bl	8000608 <__aeabi_dmul>
 80150f8:	f1bb 0f1f 	cmp.w	fp, #31
 80150fc:	4604      	mov	r4, r0
 80150fe:	460d      	mov	r5, r1
 8015100:	dc0d      	bgt.n	801511e <__ieee754_rem_pio2+0x1ae>
 8015102:	4b6e      	ldr	r3, [pc, #440]	; (80152bc <__ieee754_rem_pio2+0x34c>)
 8015104:	f10b 32ff 	add.w	r2, fp, #4294967295
 8015108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801510c:	4543      	cmp	r3, r8
 801510e:	d006      	beq.n	801511e <__ieee754_rem_pio2+0x1ae>
 8015110:	4622      	mov	r2, r4
 8015112:	462b      	mov	r3, r5
 8015114:	4630      	mov	r0, r6
 8015116:	4639      	mov	r1, r7
 8015118:	f7eb f8be 	bl	8000298 <__aeabi_dsub>
 801511c:	e00f      	b.n	801513e <__ieee754_rem_pio2+0x1ce>
 801511e:	462b      	mov	r3, r5
 8015120:	4622      	mov	r2, r4
 8015122:	4630      	mov	r0, r6
 8015124:	4639      	mov	r1, r7
 8015126:	f7eb f8b7 	bl	8000298 <__aeabi_dsub>
 801512a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801512e:	9303      	str	r3, [sp, #12]
 8015130:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015134:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8015138:	f1b8 0f10 	cmp.w	r8, #16
 801513c:	dc02      	bgt.n	8015144 <__ieee754_rem_pio2+0x1d4>
 801513e:	e9ca 0100 	strd	r0, r1, [sl]
 8015142:	e039      	b.n	80151b8 <__ieee754_rem_pio2+0x248>
 8015144:	a34e      	add	r3, pc, #312	; (adr r3, 8015280 <__ieee754_rem_pio2+0x310>)
 8015146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801514a:	ec51 0b18 	vmov	r0, r1, d8
 801514e:	f7eb fa5b 	bl	8000608 <__aeabi_dmul>
 8015152:	4604      	mov	r4, r0
 8015154:	460d      	mov	r5, r1
 8015156:	4602      	mov	r2, r0
 8015158:	460b      	mov	r3, r1
 801515a:	4630      	mov	r0, r6
 801515c:	4639      	mov	r1, r7
 801515e:	f7eb f89b 	bl	8000298 <__aeabi_dsub>
 8015162:	4602      	mov	r2, r0
 8015164:	460b      	mov	r3, r1
 8015166:	4680      	mov	r8, r0
 8015168:	4689      	mov	r9, r1
 801516a:	4630      	mov	r0, r6
 801516c:	4639      	mov	r1, r7
 801516e:	f7eb f893 	bl	8000298 <__aeabi_dsub>
 8015172:	4622      	mov	r2, r4
 8015174:	462b      	mov	r3, r5
 8015176:	f7eb f88f 	bl	8000298 <__aeabi_dsub>
 801517a:	a343      	add	r3, pc, #268	; (adr r3, 8015288 <__ieee754_rem_pio2+0x318>)
 801517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015180:	4604      	mov	r4, r0
 8015182:	460d      	mov	r5, r1
 8015184:	ec51 0b18 	vmov	r0, r1, d8
 8015188:	f7eb fa3e 	bl	8000608 <__aeabi_dmul>
 801518c:	4622      	mov	r2, r4
 801518e:	462b      	mov	r3, r5
 8015190:	f7eb f882 	bl	8000298 <__aeabi_dsub>
 8015194:	4602      	mov	r2, r0
 8015196:	460b      	mov	r3, r1
 8015198:	4604      	mov	r4, r0
 801519a:	460d      	mov	r5, r1
 801519c:	4640      	mov	r0, r8
 801519e:	4649      	mov	r1, r9
 80151a0:	f7eb f87a 	bl	8000298 <__aeabi_dsub>
 80151a4:	9a03      	ldr	r2, [sp, #12]
 80151a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80151aa:	1ad3      	subs	r3, r2, r3
 80151ac:	2b31      	cmp	r3, #49	; 0x31
 80151ae:	dc24      	bgt.n	80151fa <__ieee754_rem_pio2+0x28a>
 80151b0:	e9ca 0100 	strd	r0, r1, [sl]
 80151b4:	4646      	mov	r6, r8
 80151b6:	464f      	mov	r7, r9
 80151b8:	e9da 8900 	ldrd	r8, r9, [sl]
 80151bc:	4630      	mov	r0, r6
 80151be:	4642      	mov	r2, r8
 80151c0:	464b      	mov	r3, r9
 80151c2:	4639      	mov	r1, r7
 80151c4:	f7eb f868 	bl	8000298 <__aeabi_dsub>
 80151c8:	462b      	mov	r3, r5
 80151ca:	4622      	mov	r2, r4
 80151cc:	f7eb f864 	bl	8000298 <__aeabi_dsub>
 80151d0:	9b02      	ldr	r3, [sp, #8]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80151d8:	f6bf af0a 	bge.w	8014ff0 <__ieee754_rem_pio2+0x80>
 80151dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80151e0:	f8ca 3004 	str.w	r3, [sl, #4]
 80151e4:	f8ca 8000 	str.w	r8, [sl]
 80151e8:	f8ca 0008 	str.w	r0, [sl, #8]
 80151ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80151f0:	f8ca 300c 	str.w	r3, [sl, #12]
 80151f4:	f1cb 0b00 	rsb	fp, fp, #0
 80151f8:	e6fa      	b.n	8014ff0 <__ieee754_rem_pio2+0x80>
 80151fa:	a327      	add	r3, pc, #156	; (adr r3, 8015298 <__ieee754_rem_pio2+0x328>)
 80151fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015200:	ec51 0b18 	vmov	r0, r1, d8
 8015204:	f7eb fa00 	bl	8000608 <__aeabi_dmul>
 8015208:	4604      	mov	r4, r0
 801520a:	460d      	mov	r5, r1
 801520c:	4602      	mov	r2, r0
 801520e:	460b      	mov	r3, r1
 8015210:	4640      	mov	r0, r8
 8015212:	4649      	mov	r1, r9
 8015214:	f7eb f840 	bl	8000298 <__aeabi_dsub>
 8015218:	4602      	mov	r2, r0
 801521a:	460b      	mov	r3, r1
 801521c:	4606      	mov	r6, r0
 801521e:	460f      	mov	r7, r1
 8015220:	4640      	mov	r0, r8
 8015222:	4649      	mov	r1, r9
 8015224:	f7eb f838 	bl	8000298 <__aeabi_dsub>
 8015228:	4622      	mov	r2, r4
 801522a:	462b      	mov	r3, r5
 801522c:	f7eb f834 	bl	8000298 <__aeabi_dsub>
 8015230:	a31b      	add	r3, pc, #108	; (adr r3, 80152a0 <__ieee754_rem_pio2+0x330>)
 8015232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015236:	4604      	mov	r4, r0
 8015238:	460d      	mov	r5, r1
 801523a:	ec51 0b18 	vmov	r0, r1, d8
 801523e:	f7eb f9e3 	bl	8000608 <__aeabi_dmul>
 8015242:	4622      	mov	r2, r4
 8015244:	462b      	mov	r3, r5
 8015246:	f7eb f827 	bl	8000298 <__aeabi_dsub>
 801524a:	4604      	mov	r4, r0
 801524c:	460d      	mov	r5, r1
 801524e:	e75f      	b.n	8015110 <__ieee754_rem_pio2+0x1a0>
 8015250:	4b1b      	ldr	r3, [pc, #108]	; (80152c0 <__ieee754_rem_pio2+0x350>)
 8015252:	4598      	cmp	r8, r3
 8015254:	dd36      	ble.n	80152c4 <__ieee754_rem_pio2+0x354>
 8015256:	ee10 2a10 	vmov	r2, s0
 801525a:	462b      	mov	r3, r5
 801525c:	4620      	mov	r0, r4
 801525e:	4629      	mov	r1, r5
 8015260:	f7eb f81a 	bl	8000298 <__aeabi_dsub>
 8015264:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015268:	e9ca 0100 	strd	r0, r1, [sl]
 801526c:	e694      	b.n	8014f98 <__ieee754_rem_pio2+0x28>
 801526e:	bf00      	nop
 8015270:	54400000 	.word	0x54400000
 8015274:	3ff921fb 	.word	0x3ff921fb
 8015278:	1a626331 	.word	0x1a626331
 801527c:	3dd0b461 	.word	0x3dd0b461
 8015280:	1a600000 	.word	0x1a600000
 8015284:	3dd0b461 	.word	0x3dd0b461
 8015288:	2e037073 	.word	0x2e037073
 801528c:	3ba3198a 	.word	0x3ba3198a
 8015290:	6dc9c883 	.word	0x6dc9c883
 8015294:	3fe45f30 	.word	0x3fe45f30
 8015298:	2e000000 	.word	0x2e000000
 801529c:	3ba3198a 	.word	0x3ba3198a
 80152a0:	252049c1 	.word	0x252049c1
 80152a4:	397b839a 	.word	0x397b839a
 80152a8:	3fe921fb 	.word	0x3fe921fb
 80152ac:	4002d97b 	.word	0x4002d97b
 80152b0:	3ff921fb 	.word	0x3ff921fb
 80152b4:	413921fb 	.word	0x413921fb
 80152b8:	3fe00000 	.word	0x3fe00000
 80152bc:	08016e38 	.word	0x08016e38
 80152c0:	7fefffff 	.word	0x7fefffff
 80152c4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80152c8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80152cc:	ee10 0a10 	vmov	r0, s0
 80152d0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80152d4:	ee10 6a10 	vmov	r6, s0
 80152d8:	460f      	mov	r7, r1
 80152da:	f7eb fc45 	bl	8000b68 <__aeabi_d2iz>
 80152de:	f7eb f929 	bl	8000534 <__aeabi_i2d>
 80152e2:	4602      	mov	r2, r0
 80152e4:	460b      	mov	r3, r1
 80152e6:	4630      	mov	r0, r6
 80152e8:	4639      	mov	r1, r7
 80152ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80152ee:	f7ea ffd3 	bl	8000298 <__aeabi_dsub>
 80152f2:	4b22      	ldr	r3, [pc, #136]	; (801537c <__ieee754_rem_pio2+0x40c>)
 80152f4:	2200      	movs	r2, #0
 80152f6:	f7eb f987 	bl	8000608 <__aeabi_dmul>
 80152fa:	460f      	mov	r7, r1
 80152fc:	4606      	mov	r6, r0
 80152fe:	f7eb fc33 	bl	8000b68 <__aeabi_d2iz>
 8015302:	f7eb f917 	bl	8000534 <__aeabi_i2d>
 8015306:	4602      	mov	r2, r0
 8015308:	460b      	mov	r3, r1
 801530a:	4630      	mov	r0, r6
 801530c:	4639      	mov	r1, r7
 801530e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015312:	f7ea ffc1 	bl	8000298 <__aeabi_dsub>
 8015316:	4b19      	ldr	r3, [pc, #100]	; (801537c <__ieee754_rem_pio2+0x40c>)
 8015318:	2200      	movs	r2, #0
 801531a:	f7eb f975 	bl	8000608 <__aeabi_dmul>
 801531e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015322:	ad04      	add	r5, sp, #16
 8015324:	f04f 0803 	mov.w	r8, #3
 8015328:	46a9      	mov	r9, r5
 801532a:	2600      	movs	r6, #0
 801532c:	2700      	movs	r7, #0
 801532e:	4632      	mov	r2, r6
 8015330:	463b      	mov	r3, r7
 8015332:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8015336:	46c3      	mov	fp, r8
 8015338:	3d08      	subs	r5, #8
 801533a:	f108 38ff 	add.w	r8, r8, #4294967295
 801533e:	f7eb fbcb 	bl	8000ad8 <__aeabi_dcmpeq>
 8015342:	2800      	cmp	r0, #0
 8015344:	d1f3      	bne.n	801532e <__ieee754_rem_pio2+0x3be>
 8015346:	4b0e      	ldr	r3, [pc, #56]	; (8015380 <__ieee754_rem_pio2+0x410>)
 8015348:	9301      	str	r3, [sp, #4]
 801534a:	2302      	movs	r3, #2
 801534c:	9300      	str	r3, [sp, #0]
 801534e:	4622      	mov	r2, r4
 8015350:	465b      	mov	r3, fp
 8015352:	4651      	mov	r1, sl
 8015354:	4648      	mov	r0, r9
 8015356:	f000 f993 	bl	8015680 <__kernel_rem_pio2>
 801535a:	9b02      	ldr	r3, [sp, #8]
 801535c:	2b00      	cmp	r3, #0
 801535e:	4683      	mov	fp, r0
 8015360:	f6bf ae46 	bge.w	8014ff0 <__ieee754_rem_pio2+0x80>
 8015364:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015368:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801536c:	f8ca 3004 	str.w	r3, [sl, #4]
 8015370:	f8da 300c 	ldr.w	r3, [sl, #12]
 8015374:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015378:	e73a      	b.n	80151f0 <__ieee754_rem_pio2+0x280>
 801537a:	bf00      	nop
 801537c:	41700000 	.word	0x41700000
 8015380:	08016eb8 	.word	0x08016eb8

08015384 <__ieee754_sqrt>:
 8015384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015388:	ec55 4b10 	vmov	r4, r5, d0
 801538c:	4e56      	ldr	r6, [pc, #344]	; (80154e8 <__ieee754_sqrt+0x164>)
 801538e:	43ae      	bics	r6, r5
 8015390:	ee10 0a10 	vmov	r0, s0
 8015394:	ee10 3a10 	vmov	r3, s0
 8015398:	4629      	mov	r1, r5
 801539a:	462a      	mov	r2, r5
 801539c:	d110      	bne.n	80153c0 <__ieee754_sqrt+0x3c>
 801539e:	ee10 2a10 	vmov	r2, s0
 80153a2:	462b      	mov	r3, r5
 80153a4:	f7eb f930 	bl	8000608 <__aeabi_dmul>
 80153a8:	4602      	mov	r2, r0
 80153aa:	460b      	mov	r3, r1
 80153ac:	4620      	mov	r0, r4
 80153ae:	4629      	mov	r1, r5
 80153b0:	f7ea ff74 	bl	800029c <__adddf3>
 80153b4:	4604      	mov	r4, r0
 80153b6:	460d      	mov	r5, r1
 80153b8:	ec45 4b10 	vmov	d0, r4, r5
 80153bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153c0:	2d00      	cmp	r5, #0
 80153c2:	dc10      	bgt.n	80153e6 <__ieee754_sqrt+0x62>
 80153c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80153c8:	4330      	orrs	r0, r6
 80153ca:	d0f5      	beq.n	80153b8 <__ieee754_sqrt+0x34>
 80153cc:	b15d      	cbz	r5, 80153e6 <__ieee754_sqrt+0x62>
 80153ce:	ee10 2a10 	vmov	r2, s0
 80153d2:	462b      	mov	r3, r5
 80153d4:	ee10 0a10 	vmov	r0, s0
 80153d8:	f7ea ff5e 	bl	8000298 <__aeabi_dsub>
 80153dc:	4602      	mov	r2, r0
 80153de:	460b      	mov	r3, r1
 80153e0:	f7eb fa3c 	bl	800085c <__aeabi_ddiv>
 80153e4:	e7e6      	b.n	80153b4 <__ieee754_sqrt+0x30>
 80153e6:	1509      	asrs	r1, r1, #20
 80153e8:	d076      	beq.n	80154d8 <__ieee754_sqrt+0x154>
 80153ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80153ee:	07ce      	lsls	r6, r1, #31
 80153f0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80153f4:	bf5e      	ittt	pl
 80153f6:	0fda      	lsrpl	r2, r3, #31
 80153f8:	005b      	lslpl	r3, r3, #1
 80153fa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80153fe:	0fda      	lsrs	r2, r3, #31
 8015400:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8015404:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8015408:	2000      	movs	r0, #0
 801540a:	106d      	asrs	r5, r5, #1
 801540c:	005b      	lsls	r3, r3, #1
 801540e:	f04f 0e16 	mov.w	lr, #22
 8015412:	4684      	mov	ip, r0
 8015414:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015418:	eb0c 0401 	add.w	r4, ip, r1
 801541c:	4294      	cmp	r4, r2
 801541e:	bfde      	ittt	le
 8015420:	1b12      	suble	r2, r2, r4
 8015422:	eb04 0c01 	addle.w	ip, r4, r1
 8015426:	1840      	addle	r0, r0, r1
 8015428:	0052      	lsls	r2, r2, #1
 801542a:	f1be 0e01 	subs.w	lr, lr, #1
 801542e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015432:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015436:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801543a:	d1ed      	bne.n	8015418 <__ieee754_sqrt+0x94>
 801543c:	4671      	mov	r1, lr
 801543e:	2720      	movs	r7, #32
 8015440:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015444:	4562      	cmp	r2, ip
 8015446:	eb04 060e 	add.w	r6, r4, lr
 801544a:	dc02      	bgt.n	8015452 <__ieee754_sqrt+0xce>
 801544c:	d113      	bne.n	8015476 <__ieee754_sqrt+0xf2>
 801544e:	429e      	cmp	r6, r3
 8015450:	d811      	bhi.n	8015476 <__ieee754_sqrt+0xf2>
 8015452:	2e00      	cmp	r6, #0
 8015454:	eb06 0e04 	add.w	lr, r6, r4
 8015458:	da43      	bge.n	80154e2 <__ieee754_sqrt+0x15e>
 801545a:	f1be 0f00 	cmp.w	lr, #0
 801545e:	db40      	blt.n	80154e2 <__ieee754_sqrt+0x15e>
 8015460:	f10c 0801 	add.w	r8, ip, #1
 8015464:	eba2 020c 	sub.w	r2, r2, ip
 8015468:	429e      	cmp	r6, r3
 801546a:	bf88      	it	hi
 801546c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015470:	1b9b      	subs	r3, r3, r6
 8015472:	4421      	add	r1, r4
 8015474:	46c4      	mov	ip, r8
 8015476:	0052      	lsls	r2, r2, #1
 8015478:	3f01      	subs	r7, #1
 801547a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801547e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015482:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015486:	d1dd      	bne.n	8015444 <__ieee754_sqrt+0xc0>
 8015488:	4313      	orrs	r3, r2
 801548a:	d006      	beq.n	801549a <__ieee754_sqrt+0x116>
 801548c:	1c4c      	adds	r4, r1, #1
 801548e:	bf13      	iteet	ne
 8015490:	3101      	addne	r1, #1
 8015492:	3001      	addeq	r0, #1
 8015494:	4639      	moveq	r1, r7
 8015496:	f021 0101 	bicne.w	r1, r1, #1
 801549a:	1043      	asrs	r3, r0, #1
 801549c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80154a0:	0849      	lsrs	r1, r1, #1
 80154a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80154a6:	07c2      	lsls	r2, r0, #31
 80154a8:	bf48      	it	mi
 80154aa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80154ae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80154b2:	460c      	mov	r4, r1
 80154b4:	463d      	mov	r5, r7
 80154b6:	e77f      	b.n	80153b8 <__ieee754_sqrt+0x34>
 80154b8:	0ada      	lsrs	r2, r3, #11
 80154ba:	3815      	subs	r0, #21
 80154bc:	055b      	lsls	r3, r3, #21
 80154be:	2a00      	cmp	r2, #0
 80154c0:	d0fa      	beq.n	80154b8 <__ieee754_sqrt+0x134>
 80154c2:	02d7      	lsls	r7, r2, #11
 80154c4:	d50a      	bpl.n	80154dc <__ieee754_sqrt+0x158>
 80154c6:	f1c1 0420 	rsb	r4, r1, #32
 80154ca:	fa23 f404 	lsr.w	r4, r3, r4
 80154ce:	1e4d      	subs	r5, r1, #1
 80154d0:	408b      	lsls	r3, r1
 80154d2:	4322      	orrs	r2, r4
 80154d4:	1b41      	subs	r1, r0, r5
 80154d6:	e788      	b.n	80153ea <__ieee754_sqrt+0x66>
 80154d8:	4608      	mov	r0, r1
 80154da:	e7f0      	b.n	80154be <__ieee754_sqrt+0x13a>
 80154dc:	0052      	lsls	r2, r2, #1
 80154de:	3101      	adds	r1, #1
 80154e0:	e7ef      	b.n	80154c2 <__ieee754_sqrt+0x13e>
 80154e2:	46e0      	mov	r8, ip
 80154e4:	e7be      	b.n	8015464 <__ieee754_sqrt+0xe0>
 80154e6:	bf00      	nop
 80154e8:	7ff00000 	.word	0x7ff00000
 80154ec:	00000000 	.word	0x00000000

080154f0 <__kernel_cos>:
 80154f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154f4:	ec57 6b10 	vmov	r6, r7, d0
 80154f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80154fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8015500:	ed8d 1b00 	vstr	d1, [sp]
 8015504:	da07      	bge.n	8015516 <__kernel_cos+0x26>
 8015506:	ee10 0a10 	vmov	r0, s0
 801550a:	4639      	mov	r1, r7
 801550c:	f7eb fb2c 	bl	8000b68 <__aeabi_d2iz>
 8015510:	2800      	cmp	r0, #0
 8015512:	f000 8088 	beq.w	8015626 <__kernel_cos+0x136>
 8015516:	4632      	mov	r2, r6
 8015518:	463b      	mov	r3, r7
 801551a:	4630      	mov	r0, r6
 801551c:	4639      	mov	r1, r7
 801551e:	f7eb f873 	bl	8000608 <__aeabi_dmul>
 8015522:	4b51      	ldr	r3, [pc, #324]	; (8015668 <__kernel_cos+0x178>)
 8015524:	2200      	movs	r2, #0
 8015526:	4604      	mov	r4, r0
 8015528:	460d      	mov	r5, r1
 801552a:	f7eb f86d 	bl	8000608 <__aeabi_dmul>
 801552e:	a340      	add	r3, pc, #256	; (adr r3, 8015630 <__kernel_cos+0x140>)
 8015530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015534:	4682      	mov	sl, r0
 8015536:	468b      	mov	fp, r1
 8015538:	4620      	mov	r0, r4
 801553a:	4629      	mov	r1, r5
 801553c:	f7eb f864 	bl	8000608 <__aeabi_dmul>
 8015540:	a33d      	add	r3, pc, #244	; (adr r3, 8015638 <__kernel_cos+0x148>)
 8015542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015546:	f7ea fea9 	bl	800029c <__adddf3>
 801554a:	4622      	mov	r2, r4
 801554c:	462b      	mov	r3, r5
 801554e:	f7eb f85b 	bl	8000608 <__aeabi_dmul>
 8015552:	a33b      	add	r3, pc, #236	; (adr r3, 8015640 <__kernel_cos+0x150>)
 8015554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015558:	f7ea fe9e 	bl	8000298 <__aeabi_dsub>
 801555c:	4622      	mov	r2, r4
 801555e:	462b      	mov	r3, r5
 8015560:	f7eb f852 	bl	8000608 <__aeabi_dmul>
 8015564:	a338      	add	r3, pc, #224	; (adr r3, 8015648 <__kernel_cos+0x158>)
 8015566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801556a:	f7ea fe97 	bl	800029c <__adddf3>
 801556e:	4622      	mov	r2, r4
 8015570:	462b      	mov	r3, r5
 8015572:	f7eb f849 	bl	8000608 <__aeabi_dmul>
 8015576:	a336      	add	r3, pc, #216	; (adr r3, 8015650 <__kernel_cos+0x160>)
 8015578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801557c:	f7ea fe8c 	bl	8000298 <__aeabi_dsub>
 8015580:	4622      	mov	r2, r4
 8015582:	462b      	mov	r3, r5
 8015584:	f7eb f840 	bl	8000608 <__aeabi_dmul>
 8015588:	a333      	add	r3, pc, #204	; (adr r3, 8015658 <__kernel_cos+0x168>)
 801558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801558e:	f7ea fe85 	bl	800029c <__adddf3>
 8015592:	4622      	mov	r2, r4
 8015594:	462b      	mov	r3, r5
 8015596:	f7eb f837 	bl	8000608 <__aeabi_dmul>
 801559a:	4622      	mov	r2, r4
 801559c:	462b      	mov	r3, r5
 801559e:	f7eb f833 	bl	8000608 <__aeabi_dmul>
 80155a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80155a6:	4604      	mov	r4, r0
 80155a8:	460d      	mov	r5, r1
 80155aa:	4630      	mov	r0, r6
 80155ac:	4639      	mov	r1, r7
 80155ae:	f7eb f82b 	bl	8000608 <__aeabi_dmul>
 80155b2:	460b      	mov	r3, r1
 80155b4:	4602      	mov	r2, r0
 80155b6:	4629      	mov	r1, r5
 80155b8:	4620      	mov	r0, r4
 80155ba:	f7ea fe6d 	bl	8000298 <__aeabi_dsub>
 80155be:	4b2b      	ldr	r3, [pc, #172]	; (801566c <__kernel_cos+0x17c>)
 80155c0:	4598      	cmp	r8, r3
 80155c2:	4606      	mov	r6, r0
 80155c4:	460f      	mov	r7, r1
 80155c6:	dc10      	bgt.n	80155ea <__kernel_cos+0xfa>
 80155c8:	4602      	mov	r2, r0
 80155ca:	460b      	mov	r3, r1
 80155cc:	4650      	mov	r0, sl
 80155ce:	4659      	mov	r1, fp
 80155d0:	f7ea fe62 	bl	8000298 <__aeabi_dsub>
 80155d4:	460b      	mov	r3, r1
 80155d6:	4926      	ldr	r1, [pc, #152]	; (8015670 <__kernel_cos+0x180>)
 80155d8:	4602      	mov	r2, r0
 80155da:	2000      	movs	r0, #0
 80155dc:	f7ea fe5c 	bl	8000298 <__aeabi_dsub>
 80155e0:	ec41 0b10 	vmov	d0, r0, r1
 80155e4:	b003      	add	sp, #12
 80155e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ea:	4b22      	ldr	r3, [pc, #136]	; (8015674 <__kernel_cos+0x184>)
 80155ec:	4920      	ldr	r1, [pc, #128]	; (8015670 <__kernel_cos+0x180>)
 80155ee:	4598      	cmp	r8, r3
 80155f0:	bfcc      	ite	gt
 80155f2:	4d21      	ldrgt	r5, [pc, #132]	; (8015678 <__kernel_cos+0x188>)
 80155f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80155f8:	2400      	movs	r4, #0
 80155fa:	4622      	mov	r2, r4
 80155fc:	462b      	mov	r3, r5
 80155fe:	2000      	movs	r0, #0
 8015600:	f7ea fe4a 	bl	8000298 <__aeabi_dsub>
 8015604:	4622      	mov	r2, r4
 8015606:	4680      	mov	r8, r0
 8015608:	4689      	mov	r9, r1
 801560a:	462b      	mov	r3, r5
 801560c:	4650      	mov	r0, sl
 801560e:	4659      	mov	r1, fp
 8015610:	f7ea fe42 	bl	8000298 <__aeabi_dsub>
 8015614:	4632      	mov	r2, r6
 8015616:	463b      	mov	r3, r7
 8015618:	f7ea fe3e 	bl	8000298 <__aeabi_dsub>
 801561c:	4602      	mov	r2, r0
 801561e:	460b      	mov	r3, r1
 8015620:	4640      	mov	r0, r8
 8015622:	4649      	mov	r1, r9
 8015624:	e7da      	b.n	80155dc <__kernel_cos+0xec>
 8015626:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8015660 <__kernel_cos+0x170>
 801562a:	e7db      	b.n	80155e4 <__kernel_cos+0xf4>
 801562c:	f3af 8000 	nop.w
 8015630:	be8838d4 	.word	0xbe8838d4
 8015634:	bda8fae9 	.word	0xbda8fae9
 8015638:	bdb4b1c4 	.word	0xbdb4b1c4
 801563c:	3e21ee9e 	.word	0x3e21ee9e
 8015640:	809c52ad 	.word	0x809c52ad
 8015644:	3e927e4f 	.word	0x3e927e4f
 8015648:	19cb1590 	.word	0x19cb1590
 801564c:	3efa01a0 	.word	0x3efa01a0
 8015650:	16c15177 	.word	0x16c15177
 8015654:	3f56c16c 	.word	0x3f56c16c
 8015658:	5555554c 	.word	0x5555554c
 801565c:	3fa55555 	.word	0x3fa55555
 8015660:	00000000 	.word	0x00000000
 8015664:	3ff00000 	.word	0x3ff00000
 8015668:	3fe00000 	.word	0x3fe00000
 801566c:	3fd33332 	.word	0x3fd33332
 8015670:	3ff00000 	.word	0x3ff00000
 8015674:	3fe90000 	.word	0x3fe90000
 8015678:	3fd20000 	.word	0x3fd20000
 801567c:	00000000 	.word	0x00000000

08015680 <__kernel_rem_pio2>:
 8015680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015684:	ed2d 8b02 	vpush	{d8}
 8015688:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801568c:	f112 0f14 	cmn.w	r2, #20
 8015690:	9308      	str	r3, [sp, #32]
 8015692:	9101      	str	r1, [sp, #4]
 8015694:	4bc6      	ldr	r3, [pc, #792]	; (80159b0 <__kernel_rem_pio2+0x330>)
 8015696:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8015698:	9009      	str	r0, [sp, #36]	; 0x24
 801569a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801569e:	9304      	str	r3, [sp, #16]
 80156a0:	9b08      	ldr	r3, [sp, #32]
 80156a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80156a6:	bfa8      	it	ge
 80156a8:	1ed4      	subge	r4, r2, #3
 80156aa:	9306      	str	r3, [sp, #24]
 80156ac:	bfb2      	itee	lt
 80156ae:	2400      	movlt	r4, #0
 80156b0:	2318      	movge	r3, #24
 80156b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80156b6:	f06f 0317 	mvn.w	r3, #23
 80156ba:	fb04 3303 	mla	r3, r4, r3, r3
 80156be:	eb03 0a02 	add.w	sl, r3, r2
 80156c2:	9b04      	ldr	r3, [sp, #16]
 80156c4:	9a06      	ldr	r2, [sp, #24]
 80156c6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80159a0 <__kernel_rem_pio2+0x320>
 80156ca:	eb03 0802 	add.w	r8, r3, r2
 80156ce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80156d0:	1aa7      	subs	r7, r4, r2
 80156d2:	ae20      	add	r6, sp, #128	; 0x80
 80156d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80156d8:	2500      	movs	r5, #0
 80156da:	4545      	cmp	r5, r8
 80156dc:	dd18      	ble.n	8015710 <__kernel_rem_pio2+0x90>
 80156de:	9b08      	ldr	r3, [sp, #32]
 80156e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80156e4:	aa20      	add	r2, sp, #128	; 0x80
 80156e6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80159a0 <__kernel_rem_pio2+0x320>
 80156ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80156ee:	f1c3 0301 	rsb	r3, r3, #1
 80156f2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80156f6:	9307      	str	r3, [sp, #28]
 80156f8:	9b07      	ldr	r3, [sp, #28]
 80156fa:	9a04      	ldr	r2, [sp, #16]
 80156fc:	4443      	add	r3, r8
 80156fe:	429a      	cmp	r2, r3
 8015700:	db2f      	blt.n	8015762 <__kernel_rem_pio2+0xe2>
 8015702:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015706:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801570a:	462f      	mov	r7, r5
 801570c:	2600      	movs	r6, #0
 801570e:	e01b      	b.n	8015748 <__kernel_rem_pio2+0xc8>
 8015710:	42ef      	cmn	r7, r5
 8015712:	d407      	bmi.n	8015724 <__kernel_rem_pio2+0xa4>
 8015714:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8015718:	f7ea ff0c 	bl	8000534 <__aeabi_i2d>
 801571c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015720:	3501      	adds	r5, #1
 8015722:	e7da      	b.n	80156da <__kernel_rem_pio2+0x5a>
 8015724:	ec51 0b18 	vmov	r0, r1, d8
 8015728:	e7f8      	b.n	801571c <__kernel_rem_pio2+0x9c>
 801572a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801572e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8015732:	f7ea ff69 	bl	8000608 <__aeabi_dmul>
 8015736:	4602      	mov	r2, r0
 8015738:	460b      	mov	r3, r1
 801573a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801573e:	f7ea fdad 	bl	800029c <__adddf3>
 8015742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015746:	3601      	adds	r6, #1
 8015748:	9b06      	ldr	r3, [sp, #24]
 801574a:	429e      	cmp	r6, r3
 801574c:	f1a7 0708 	sub.w	r7, r7, #8
 8015750:	ddeb      	ble.n	801572a <__kernel_rem_pio2+0xaa>
 8015752:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015756:	3508      	adds	r5, #8
 8015758:	ecab 7b02 	vstmia	fp!, {d7}
 801575c:	f108 0801 	add.w	r8, r8, #1
 8015760:	e7ca      	b.n	80156f8 <__kernel_rem_pio2+0x78>
 8015762:	9b04      	ldr	r3, [sp, #16]
 8015764:	aa0c      	add	r2, sp, #48	; 0x30
 8015766:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801576a:	930b      	str	r3, [sp, #44]	; 0x2c
 801576c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801576e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015772:	9c04      	ldr	r4, [sp, #16]
 8015774:	930a      	str	r3, [sp, #40]	; 0x28
 8015776:	ab98      	add	r3, sp, #608	; 0x260
 8015778:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801577c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8015780:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8015784:	f8cd b008 	str.w	fp, [sp, #8]
 8015788:	4625      	mov	r5, r4
 801578a:	2d00      	cmp	r5, #0
 801578c:	dc78      	bgt.n	8015880 <__kernel_rem_pio2+0x200>
 801578e:	ec47 6b10 	vmov	d0, r6, r7
 8015792:	4650      	mov	r0, sl
 8015794:	f000 fbfc 	bl	8015f90 <scalbn>
 8015798:	ec57 6b10 	vmov	r6, r7, d0
 801579c:	2200      	movs	r2, #0
 801579e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80157a2:	ee10 0a10 	vmov	r0, s0
 80157a6:	4639      	mov	r1, r7
 80157a8:	f7ea ff2e 	bl	8000608 <__aeabi_dmul>
 80157ac:	ec41 0b10 	vmov	d0, r0, r1
 80157b0:	f000 fb6e 	bl	8015e90 <floor>
 80157b4:	4b7f      	ldr	r3, [pc, #508]	; (80159b4 <__kernel_rem_pio2+0x334>)
 80157b6:	ec51 0b10 	vmov	r0, r1, d0
 80157ba:	2200      	movs	r2, #0
 80157bc:	f7ea ff24 	bl	8000608 <__aeabi_dmul>
 80157c0:	4602      	mov	r2, r0
 80157c2:	460b      	mov	r3, r1
 80157c4:	4630      	mov	r0, r6
 80157c6:	4639      	mov	r1, r7
 80157c8:	f7ea fd66 	bl	8000298 <__aeabi_dsub>
 80157cc:	460f      	mov	r7, r1
 80157ce:	4606      	mov	r6, r0
 80157d0:	f7eb f9ca 	bl	8000b68 <__aeabi_d2iz>
 80157d4:	9007      	str	r0, [sp, #28]
 80157d6:	f7ea fead 	bl	8000534 <__aeabi_i2d>
 80157da:	4602      	mov	r2, r0
 80157dc:	460b      	mov	r3, r1
 80157de:	4630      	mov	r0, r6
 80157e0:	4639      	mov	r1, r7
 80157e2:	f7ea fd59 	bl	8000298 <__aeabi_dsub>
 80157e6:	f1ba 0f00 	cmp.w	sl, #0
 80157ea:	4606      	mov	r6, r0
 80157ec:	460f      	mov	r7, r1
 80157ee:	dd70      	ble.n	80158d2 <__kernel_rem_pio2+0x252>
 80157f0:	1e62      	subs	r2, r4, #1
 80157f2:	ab0c      	add	r3, sp, #48	; 0x30
 80157f4:	9d07      	ldr	r5, [sp, #28]
 80157f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80157fa:	f1ca 0118 	rsb	r1, sl, #24
 80157fe:	fa40 f301 	asr.w	r3, r0, r1
 8015802:	441d      	add	r5, r3
 8015804:	408b      	lsls	r3, r1
 8015806:	1ac0      	subs	r0, r0, r3
 8015808:	ab0c      	add	r3, sp, #48	; 0x30
 801580a:	9507      	str	r5, [sp, #28]
 801580c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8015810:	f1ca 0317 	rsb	r3, sl, #23
 8015814:	fa40 f303 	asr.w	r3, r0, r3
 8015818:	9302      	str	r3, [sp, #8]
 801581a:	9b02      	ldr	r3, [sp, #8]
 801581c:	2b00      	cmp	r3, #0
 801581e:	dd66      	ble.n	80158ee <__kernel_rem_pio2+0x26e>
 8015820:	9b07      	ldr	r3, [sp, #28]
 8015822:	2200      	movs	r2, #0
 8015824:	3301      	adds	r3, #1
 8015826:	9307      	str	r3, [sp, #28]
 8015828:	4615      	mov	r5, r2
 801582a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801582e:	4294      	cmp	r4, r2
 8015830:	f300 8099 	bgt.w	8015966 <__kernel_rem_pio2+0x2e6>
 8015834:	f1ba 0f00 	cmp.w	sl, #0
 8015838:	dd07      	ble.n	801584a <__kernel_rem_pio2+0x1ca>
 801583a:	f1ba 0f01 	cmp.w	sl, #1
 801583e:	f000 80a5 	beq.w	801598c <__kernel_rem_pio2+0x30c>
 8015842:	f1ba 0f02 	cmp.w	sl, #2
 8015846:	f000 80c1 	beq.w	80159cc <__kernel_rem_pio2+0x34c>
 801584a:	9b02      	ldr	r3, [sp, #8]
 801584c:	2b02      	cmp	r3, #2
 801584e:	d14e      	bne.n	80158ee <__kernel_rem_pio2+0x26e>
 8015850:	4632      	mov	r2, r6
 8015852:	463b      	mov	r3, r7
 8015854:	4958      	ldr	r1, [pc, #352]	; (80159b8 <__kernel_rem_pio2+0x338>)
 8015856:	2000      	movs	r0, #0
 8015858:	f7ea fd1e 	bl	8000298 <__aeabi_dsub>
 801585c:	4606      	mov	r6, r0
 801585e:	460f      	mov	r7, r1
 8015860:	2d00      	cmp	r5, #0
 8015862:	d044      	beq.n	80158ee <__kernel_rem_pio2+0x26e>
 8015864:	4650      	mov	r0, sl
 8015866:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80159a8 <__kernel_rem_pio2+0x328>
 801586a:	f000 fb91 	bl	8015f90 <scalbn>
 801586e:	4630      	mov	r0, r6
 8015870:	4639      	mov	r1, r7
 8015872:	ec53 2b10 	vmov	r2, r3, d0
 8015876:	f7ea fd0f 	bl	8000298 <__aeabi_dsub>
 801587a:	4606      	mov	r6, r0
 801587c:	460f      	mov	r7, r1
 801587e:	e036      	b.n	80158ee <__kernel_rem_pio2+0x26e>
 8015880:	4b4e      	ldr	r3, [pc, #312]	; (80159bc <__kernel_rem_pio2+0x33c>)
 8015882:	2200      	movs	r2, #0
 8015884:	4630      	mov	r0, r6
 8015886:	4639      	mov	r1, r7
 8015888:	f7ea febe 	bl	8000608 <__aeabi_dmul>
 801588c:	f7eb f96c 	bl	8000b68 <__aeabi_d2iz>
 8015890:	f7ea fe50 	bl	8000534 <__aeabi_i2d>
 8015894:	4b4a      	ldr	r3, [pc, #296]	; (80159c0 <__kernel_rem_pio2+0x340>)
 8015896:	2200      	movs	r2, #0
 8015898:	4680      	mov	r8, r0
 801589a:	4689      	mov	r9, r1
 801589c:	f7ea feb4 	bl	8000608 <__aeabi_dmul>
 80158a0:	4602      	mov	r2, r0
 80158a2:	460b      	mov	r3, r1
 80158a4:	4630      	mov	r0, r6
 80158a6:	4639      	mov	r1, r7
 80158a8:	f7ea fcf6 	bl	8000298 <__aeabi_dsub>
 80158ac:	f7eb f95c 	bl	8000b68 <__aeabi_d2iz>
 80158b0:	9b02      	ldr	r3, [sp, #8]
 80158b2:	f843 0b04 	str.w	r0, [r3], #4
 80158b6:	3d01      	subs	r5, #1
 80158b8:	9302      	str	r3, [sp, #8]
 80158ba:	ab70      	add	r3, sp, #448	; 0x1c0
 80158bc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80158c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c4:	4640      	mov	r0, r8
 80158c6:	4649      	mov	r1, r9
 80158c8:	f7ea fce8 	bl	800029c <__adddf3>
 80158cc:	4606      	mov	r6, r0
 80158ce:	460f      	mov	r7, r1
 80158d0:	e75b      	b.n	801578a <__kernel_rem_pio2+0x10a>
 80158d2:	d105      	bne.n	80158e0 <__kernel_rem_pio2+0x260>
 80158d4:	1e63      	subs	r3, r4, #1
 80158d6:	aa0c      	add	r2, sp, #48	; 0x30
 80158d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80158dc:	15c3      	asrs	r3, r0, #23
 80158de:	e79b      	b.n	8015818 <__kernel_rem_pio2+0x198>
 80158e0:	4b38      	ldr	r3, [pc, #224]	; (80159c4 <__kernel_rem_pio2+0x344>)
 80158e2:	2200      	movs	r2, #0
 80158e4:	f7eb f916 	bl	8000b14 <__aeabi_dcmpge>
 80158e8:	2800      	cmp	r0, #0
 80158ea:	d139      	bne.n	8015960 <__kernel_rem_pio2+0x2e0>
 80158ec:	9002      	str	r0, [sp, #8]
 80158ee:	2200      	movs	r2, #0
 80158f0:	2300      	movs	r3, #0
 80158f2:	4630      	mov	r0, r6
 80158f4:	4639      	mov	r1, r7
 80158f6:	f7eb f8ef 	bl	8000ad8 <__aeabi_dcmpeq>
 80158fa:	2800      	cmp	r0, #0
 80158fc:	f000 80b4 	beq.w	8015a68 <__kernel_rem_pio2+0x3e8>
 8015900:	f104 3bff 	add.w	fp, r4, #4294967295
 8015904:	465b      	mov	r3, fp
 8015906:	2200      	movs	r2, #0
 8015908:	9904      	ldr	r1, [sp, #16]
 801590a:	428b      	cmp	r3, r1
 801590c:	da65      	bge.n	80159da <__kernel_rem_pio2+0x35a>
 801590e:	2a00      	cmp	r2, #0
 8015910:	d07b      	beq.n	8015a0a <__kernel_rem_pio2+0x38a>
 8015912:	ab0c      	add	r3, sp, #48	; 0x30
 8015914:	f1aa 0a18 	sub.w	sl, sl, #24
 8015918:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801591c:	2b00      	cmp	r3, #0
 801591e:	f000 80a0 	beq.w	8015a62 <__kernel_rem_pio2+0x3e2>
 8015922:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80159a8 <__kernel_rem_pio2+0x328>
 8015926:	4650      	mov	r0, sl
 8015928:	f000 fb32 	bl	8015f90 <scalbn>
 801592c:	4f23      	ldr	r7, [pc, #140]	; (80159bc <__kernel_rem_pio2+0x33c>)
 801592e:	ec55 4b10 	vmov	r4, r5, d0
 8015932:	46d8      	mov	r8, fp
 8015934:	2600      	movs	r6, #0
 8015936:	f1b8 0f00 	cmp.w	r8, #0
 801593a:	f280 80cf 	bge.w	8015adc <__kernel_rem_pio2+0x45c>
 801593e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80159a0 <__kernel_rem_pio2+0x320>
 8015942:	465f      	mov	r7, fp
 8015944:	f04f 0800 	mov.w	r8, #0
 8015948:	2f00      	cmp	r7, #0
 801594a:	f2c0 80fd 	blt.w	8015b48 <__kernel_rem_pio2+0x4c8>
 801594e:	ab70      	add	r3, sp, #448	; 0x1c0
 8015950:	f8df a074 	ldr.w	sl, [pc, #116]	; 80159c8 <__kernel_rem_pio2+0x348>
 8015954:	ec55 4b18 	vmov	r4, r5, d8
 8015958:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801595c:	2600      	movs	r6, #0
 801595e:	e0e5      	b.n	8015b2c <__kernel_rem_pio2+0x4ac>
 8015960:	2302      	movs	r3, #2
 8015962:	9302      	str	r3, [sp, #8]
 8015964:	e75c      	b.n	8015820 <__kernel_rem_pio2+0x1a0>
 8015966:	f8db 3000 	ldr.w	r3, [fp]
 801596a:	b955      	cbnz	r5, 8015982 <__kernel_rem_pio2+0x302>
 801596c:	b123      	cbz	r3, 8015978 <__kernel_rem_pio2+0x2f8>
 801596e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8015972:	f8cb 3000 	str.w	r3, [fp]
 8015976:	2301      	movs	r3, #1
 8015978:	3201      	adds	r2, #1
 801597a:	f10b 0b04 	add.w	fp, fp, #4
 801597e:	461d      	mov	r5, r3
 8015980:	e755      	b.n	801582e <__kernel_rem_pio2+0x1ae>
 8015982:	1acb      	subs	r3, r1, r3
 8015984:	f8cb 3000 	str.w	r3, [fp]
 8015988:	462b      	mov	r3, r5
 801598a:	e7f5      	b.n	8015978 <__kernel_rem_pio2+0x2f8>
 801598c:	1e62      	subs	r2, r4, #1
 801598e:	ab0c      	add	r3, sp, #48	; 0x30
 8015990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015994:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015998:	a90c      	add	r1, sp, #48	; 0x30
 801599a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801599e:	e754      	b.n	801584a <__kernel_rem_pio2+0x1ca>
	...
 80159ac:	3ff00000 	.word	0x3ff00000
 80159b0:	08017000 	.word	0x08017000
 80159b4:	40200000 	.word	0x40200000
 80159b8:	3ff00000 	.word	0x3ff00000
 80159bc:	3e700000 	.word	0x3e700000
 80159c0:	41700000 	.word	0x41700000
 80159c4:	3fe00000 	.word	0x3fe00000
 80159c8:	08016fc0 	.word	0x08016fc0
 80159cc:	1e62      	subs	r2, r4, #1
 80159ce:	ab0c      	add	r3, sp, #48	; 0x30
 80159d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80159d8:	e7de      	b.n	8015998 <__kernel_rem_pio2+0x318>
 80159da:	a90c      	add	r1, sp, #48	; 0x30
 80159dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80159e0:	3b01      	subs	r3, #1
 80159e2:	430a      	orrs	r2, r1
 80159e4:	e790      	b.n	8015908 <__kernel_rem_pio2+0x288>
 80159e6:	3301      	adds	r3, #1
 80159e8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80159ec:	2900      	cmp	r1, #0
 80159ee:	d0fa      	beq.n	80159e6 <__kernel_rem_pio2+0x366>
 80159f0:	9a08      	ldr	r2, [sp, #32]
 80159f2:	18e3      	adds	r3, r4, r3
 80159f4:	18a6      	adds	r6, r4, r2
 80159f6:	aa20      	add	r2, sp, #128	; 0x80
 80159f8:	1c65      	adds	r5, r4, #1
 80159fa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80159fe:	9302      	str	r3, [sp, #8]
 8015a00:	9b02      	ldr	r3, [sp, #8]
 8015a02:	42ab      	cmp	r3, r5
 8015a04:	da04      	bge.n	8015a10 <__kernel_rem_pio2+0x390>
 8015a06:	461c      	mov	r4, r3
 8015a08:	e6b5      	b.n	8015776 <__kernel_rem_pio2+0xf6>
 8015a0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015a0c:	2301      	movs	r3, #1
 8015a0e:	e7eb      	b.n	80159e8 <__kernel_rem_pio2+0x368>
 8015a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015a16:	f7ea fd8d 	bl	8000534 <__aeabi_i2d>
 8015a1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a20:	46b3      	mov	fp, r6
 8015a22:	461c      	mov	r4, r3
 8015a24:	2700      	movs	r7, #0
 8015a26:	f04f 0800 	mov.w	r8, #0
 8015a2a:	f04f 0900 	mov.w	r9, #0
 8015a2e:	9b06      	ldr	r3, [sp, #24]
 8015a30:	429f      	cmp	r7, r3
 8015a32:	dd06      	ble.n	8015a42 <__kernel_rem_pio2+0x3c2>
 8015a34:	ab70      	add	r3, sp, #448	; 0x1c0
 8015a36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015a3a:	e9c3 8900 	strd	r8, r9, [r3]
 8015a3e:	3501      	adds	r5, #1
 8015a40:	e7de      	b.n	8015a00 <__kernel_rem_pio2+0x380>
 8015a42:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8015a46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8015a4a:	f7ea fddd 	bl	8000608 <__aeabi_dmul>
 8015a4e:	4602      	mov	r2, r0
 8015a50:	460b      	mov	r3, r1
 8015a52:	4640      	mov	r0, r8
 8015a54:	4649      	mov	r1, r9
 8015a56:	f7ea fc21 	bl	800029c <__adddf3>
 8015a5a:	3701      	adds	r7, #1
 8015a5c:	4680      	mov	r8, r0
 8015a5e:	4689      	mov	r9, r1
 8015a60:	e7e5      	b.n	8015a2e <__kernel_rem_pio2+0x3ae>
 8015a62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015a66:	e754      	b.n	8015912 <__kernel_rem_pio2+0x292>
 8015a68:	ec47 6b10 	vmov	d0, r6, r7
 8015a6c:	f1ca 0000 	rsb	r0, sl, #0
 8015a70:	f000 fa8e 	bl	8015f90 <scalbn>
 8015a74:	ec57 6b10 	vmov	r6, r7, d0
 8015a78:	4b9f      	ldr	r3, [pc, #636]	; (8015cf8 <__kernel_rem_pio2+0x678>)
 8015a7a:	ee10 0a10 	vmov	r0, s0
 8015a7e:	2200      	movs	r2, #0
 8015a80:	4639      	mov	r1, r7
 8015a82:	f7eb f847 	bl	8000b14 <__aeabi_dcmpge>
 8015a86:	b300      	cbz	r0, 8015aca <__kernel_rem_pio2+0x44a>
 8015a88:	4b9c      	ldr	r3, [pc, #624]	; (8015cfc <__kernel_rem_pio2+0x67c>)
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	4630      	mov	r0, r6
 8015a8e:	4639      	mov	r1, r7
 8015a90:	f7ea fdba 	bl	8000608 <__aeabi_dmul>
 8015a94:	f7eb f868 	bl	8000b68 <__aeabi_d2iz>
 8015a98:	4605      	mov	r5, r0
 8015a9a:	f7ea fd4b 	bl	8000534 <__aeabi_i2d>
 8015a9e:	4b96      	ldr	r3, [pc, #600]	; (8015cf8 <__kernel_rem_pio2+0x678>)
 8015aa0:	2200      	movs	r2, #0
 8015aa2:	f7ea fdb1 	bl	8000608 <__aeabi_dmul>
 8015aa6:	460b      	mov	r3, r1
 8015aa8:	4602      	mov	r2, r0
 8015aaa:	4639      	mov	r1, r7
 8015aac:	4630      	mov	r0, r6
 8015aae:	f7ea fbf3 	bl	8000298 <__aeabi_dsub>
 8015ab2:	f7eb f859 	bl	8000b68 <__aeabi_d2iz>
 8015ab6:	f104 0b01 	add.w	fp, r4, #1
 8015aba:	ab0c      	add	r3, sp, #48	; 0x30
 8015abc:	f10a 0a18 	add.w	sl, sl, #24
 8015ac0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8015ac4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8015ac8:	e72b      	b.n	8015922 <__kernel_rem_pio2+0x2a2>
 8015aca:	4630      	mov	r0, r6
 8015acc:	4639      	mov	r1, r7
 8015ace:	f7eb f84b 	bl	8000b68 <__aeabi_d2iz>
 8015ad2:	ab0c      	add	r3, sp, #48	; 0x30
 8015ad4:	46a3      	mov	fp, r4
 8015ad6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8015ada:	e722      	b.n	8015922 <__kernel_rem_pio2+0x2a2>
 8015adc:	ab70      	add	r3, sp, #448	; 0x1c0
 8015ade:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8015ae2:	ab0c      	add	r3, sp, #48	; 0x30
 8015ae4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8015ae8:	f7ea fd24 	bl	8000534 <__aeabi_i2d>
 8015aec:	4622      	mov	r2, r4
 8015aee:	462b      	mov	r3, r5
 8015af0:	f7ea fd8a 	bl	8000608 <__aeabi_dmul>
 8015af4:	4632      	mov	r2, r6
 8015af6:	e9c9 0100 	strd	r0, r1, [r9]
 8015afa:	463b      	mov	r3, r7
 8015afc:	4620      	mov	r0, r4
 8015afe:	4629      	mov	r1, r5
 8015b00:	f7ea fd82 	bl	8000608 <__aeabi_dmul>
 8015b04:	f108 38ff 	add.w	r8, r8, #4294967295
 8015b08:	4604      	mov	r4, r0
 8015b0a:	460d      	mov	r5, r1
 8015b0c:	e713      	b.n	8015936 <__kernel_rem_pio2+0x2b6>
 8015b0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8015b12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8015b16:	f7ea fd77 	bl	8000608 <__aeabi_dmul>
 8015b1a:	4602      	mov	r2, r0
 8015b1c:	460b      	mov	r3, r1
 8015b1e:	4620      	mov	r0, r4
 8015b20:	4629      	mov	r1, r5
 8015b22:	f7ea fbbb 	bl	800029c <__adddf3>
 8015b26:	3601      	adds	r6, #1
 8015b28:	4604      	mov	r4, r0
 8015b2a:	460d      	mov	r5, r1
 8015b2c:	9b04      	ldr	r3, [sp, #16]
 8015b2e:	429e      	cmp	r6, r3
 8015b30:	dc01      	bgt.n	8015b36 <__kernel_rem_pio2+0x4b6>
 8015b32:	45b0      	cmp	r8, r6
 8015b34:	daeb      	bge.n	8015b0e <__kernel_rem_pio2+0x48e>
 8015b36:	ab48      	add	r3, sp, #288	; 0x120
 8015b38:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015b3c:	e9c3 4500 	strd	r4, r5, [r3]
 8015b40:	3f01      	subs	r7, #1
 8015b42:	f108 0801 	add.w	r8, r8, #1
 8015b46:	e6ff      	b.n	8015948 <__kernel_rem_pio2+0x2c8>
 8015b48:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8015b4a:	2b02      	cmp	r3, #2
 8015b4c:	dc0b      	bgt.n	8015b66 <__kernel_rem_pio2+0x4e6>
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	dc6e      	bgt.n	8015c30 <__kernel_rem_pio2+0x5b0>
 8015b52:	d045      	beq.n	8015be0 <__kernel_rem_pio2+0x560>
 8015b54:	9b07      	ldr	r3, [sp, #28]
 8015b56:	f003 0007 	and.w	r0, r3, #7
 8015b5a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8015b5e:	ecbd 8b02 	vpop	{d8}
 8015b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b66:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8015b68:	2b03      	cmp	r3, #3
 8015b6a:	d1f3      	bne.n	8015b54 <__kernel_rem_pio2+0x4d4>
 8015b6c:	ab48      	add	r3, sp, #288	; 0x120
 8015b6e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8015b72:	46d0      	mov	r8, sl
 8015b74:	46d9      	mov	r9, fp
 8015b76:	f1b9 0f00 	cmp.w	r9, #0
 8015b7a:	f1a8 0808 	sub.w	r8, r8, #8
 8015b7e:	dc64      	bgt.n	8015c4a <__kernel_rem_pio2+0x5ca>
 8015b80:	465c      	mov	r4, fp
 8015b82:	2c01      	cmp	r4, #1
 8015b84:	f1aa 0a08 	sub.w	sl, sl, #8
 8015b88:	dc7e      	bgt.n	8015c88 <__kernel_rem_pio2+0x608>
 8015b8a:	2000      	movs	r0, #0
 8015b8c:	2100      	movs	r1, #0
 8015b8e:	f1bb 0f01 	cmp.w	fp, #1
 8015b92:	f300 8097 	bgt.w	8015cc4 <__kernel_rem_pio2+0x644>
 8015b96:	9b02      	ldr	r3, [sp, #8]
 8015b98:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8015b9c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	f040 8099 	bne.w	8015cd8 <__kernel_rem_pio2+0x658>
 8015ba6:	9b01      	ldr	r3, [sp, #4]
 8015ba8:	e9c3 5600 	strd	r5, r6, [r3]
 8015bac:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8015bb0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8015bb4:	e7ce      	b.n	8015b54 <__kernel_rem_pio2+0x4d4>
 8015bb6:	ab48      	add	r3, sp, #288	; 0x120
 8015bb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bc0:	f7ea fb6c 	bl	800029c <__adddf3>
 8015bc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015bc8:	f1bb 0f00 	cmp.w	fp, #0
 8015bcc:	daf3      	bge.n	8015bb6 <__kernel_rem_pio2+0x536>
 8015bce:	9b02      	ldr	r3, [sp, #8]
 8015bd0:	b113      	cbz	r3, 8015bd8 <__kernel_rem_pio2+0x558>
 8015bd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015bd6:	4619      	mov	r1, r3
 8015bd8:	9b01      	ldr	r3, [sp, #4]
 8015bda:	e9c3 0100 	strd	r0, r1, [r3]
 8015bde:	e7b9      	b.n	8015b54 <__kernel_rem_pio2+0x4d4>
 8015be0:	2000      	movs	r0, #0
 8015be2:	2100      	movs	r1, #0
 8015be4:	e7f0      	b.n	8015bc8 <__kernel_rem_pio2+0x548>
 8015be6:	ab48      	add	r3, sp, #288	; 0x120
 8015be8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bf0:	f7ea fb54 	bl	800029c <__adddf3>
 8015bf4:	3c01      	subs	r4, #1
 8015bf6:	2c00      	cmp	r4, #0
 8015bf8:	daf5      	bge.n	8015be6 <__kernel_rem_pio2+0x566>
 8015bfa:	9b02      	ldr	r3, [sp, #8]
 8015bfc:	b1e3      	cbz	r3, 8015c38 <__kernel_rem_pio2+0x5b8>
 8015bfe:	4602      	mov	r2, r0
 8015c00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015c04:	9c01      	ldr	r4, [sp, #4]
 8015c06:	e9c4 2300 	strd	r2, r3, [r4]
 8015c0a:	4602      	mov	r2, r0
 8015c0c:	460b      	mov	r3, r1
 8015c0e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8015c12:	f7ea fb41 	bl	8000298 <__aeabi_dsub>
 8015c16:	ad4a      	add	r5, sp, #296	; 0x128
 8015c18:	2401      	movs	r4, #1
 8015c1a:	45a3      	cmp	fp, r4
 8015c1c:	da0f      	bge.n	8015c3e <__kernel_rem_pio2+0x5be>
 8015c1e:	9b02      	ldr	r3, [sp, #8]
 8015c20:	b113      	cbz	r3, 8015c28 <__kernel_rem_pio2+0x5a8>
 8015c22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015c26:	4619      	mov	r1, r3
 8015c28:	9b01      	ldr	r3, [sp, #4]
 8015c2a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8015c2e:	e791      	b.n	8015b54 <__kernel_rem_pio2+0x4d4>
 8015c30:	465c      	mov	r4, fp
 8015c32:	2000      	movs	r0, #0
 8015c34:	2100      	movs	r1, #0
 8015c36:	e7de      	b.n	8015bf6 <__kernel_rem_pio2+0x576>
 8015c38:	4602      	mov	r2, r0
 8015c3a:	460b      	mov	r3, r1
 8015c3c:	e7e2      	b.n	8015c04 <__kernel_rem_pio2+0x584>
 8015c3e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8015c42:	f7ea fb2b 	bl	800029c <__adddf3>
 8015c46:	3401      	adds	r4, #1
 8015c48:	e7e7      	b.n	8015c1a <__kernel_rem_pio2+0x59a>
 8015c4a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8015c4e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8015c52:	4620      	mov	r0, r4
 8015c54:	4632      	mov	r2, r6
 8015c56:	463b      	mov	r3, r7
 8015c58:	4629      	mov	r1, r5
 8015c5a:	f7ea fb1f 	bl	800029c <__adddf3>
 8015c5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015c62:	4602      	mov	r2, r0
 8015c64:	460b      	mov	r3, r1
 8015c66:	4620      	mov	r0, r4
 8015c68:	4629      	mov	r1, r5
 8015c6a:	f7ea fb15 	bl	8000298 <__aeabi_dsub>
 8015c6e:	4632      	mov	r2, r6
 8015c70:	463b      	mov	r3, r7
 8015c72:	f7ea fb13 	bl	800029c <__adddf3>
 8015c76:	ed9d 7b04 	vldr	d7, [sp, #16]
 8015c7a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8015c7e:	ed88 7b00 	vstr	d7, [r8]
 8015c82:	f109 39ff 	add.w	r9, r9, #4294967295
 8015c86:	e776      	b.n	8015b76 <__kernel_rem_pio2+0x4f6>
 8015c88:	e9da 8900 	ldrd	r8, r9, [sl]
 8015c8c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8015c90:	4640      	mov	r0, r8
 8015c92:	4632      	mov	r2, r6
 8015c94:	463b      	mov	r3, r7
 8015c96:	4649      	mov	r1, r9
 8015c98:	f7ea fb00 	bl	800029c <__adddf3>
 8015c9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015ca0:	4602      	mov	r2, r0
 8015ca2:	460b      	mov	r3, r1
 8015ca4:	4640      	mov	r0, r8
 8015ca6:	4649      	mov	r1, r9
 8015ca8:	f7ea faf6 	bl	8000298 <__aeabi_dsub>
 8015cac:	4632      	mov	r2, r6
 8015cae:	463b      	mov	r3, r7
 8015cb0:	f7ea faf4 	bl	800029c <__adddf3>
 8015cb4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8015cb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015cbc:	ed8a 7b00 	vstr	d7, [sl]
 8015cc0:	3c01      	subs	r4, #1
 8015cc2:	e75e      	b.n	8015b82 <__kernel_rem_pio2+0x502>
 8015cc4:	ab48      	add	r3, sp, #288	; 0x120
 8015cc6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cce:	f7ea fae5 	bl	800029c <__adddf3>
 8015cd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015cd6:	e75a      	b.n	8015b8e <__kernel_rem_pio2+0x50e>
 8015cd8:	9b01      	ldr	r3, [sp, #4]
 8015cda:	9a01      	ldr	r2, [sp, #4]
 8015cdc:	601d      	str	r5, [r3, #0]
 8015cde:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8015ce2:	605c      	str	r4, [r3, #4]
 8015ce4:	609f      	str	r7, [r3, #8]
 8015ce6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8015cea:	60d3      	str	r3, [r2, #12]
 8015cec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015cf0:	6110      	str	r0, [r2, #16]
 8015cf2:	6153      	str	r3, [r2, #20]
 8015cf4:	e72e      	b.n	8015b54 <__kernel_rem_pio2+0x4d4>
 8015cf6:	bf00      	nop
 8015cf8:	41700000 	.word	0x41700000
 8015cfc:	3e700000 	.word	0x3e700000

08015d00 <__kernel_sin>:
 8015d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d04:	ed2d 8b04 	vpush	{d8-d9}
 8015d08:	eeb0 8a41 	vmov.f32	s16, s2
 8015d0c:	eef0 8a61 	vmov.f32	s17, s3
 8015d10:	ec55 4b10 	vmov	r4, r5, d0
 8015d14:	b083      	sub	sp, #12
 8015d16:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015d1a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015d1e:	9001      	str	r0, [sp, #4]
 8015d20:	da06      	bge.n	8015d30 <__kernel_sin+0x30>
 8015d22:	ee10 0a10 	vmov	r0, s0
 8015d26:	4629      	mov	r1, r5
 8015d28:	f7ea ff1e 	bl	8000b68 <__aeabi_d2iz>
 8015d2c:	2800      	cmp	r0, #0
 8015d2e:	d051      	beq.n	8015dd4 <__kernel_sin+0xd4>
 8015d30:	4622      	mov	r2, r4
 8015d32:	462b      	mov	r3, r5
 8015d34:	4620      	mov	r0, r4
 8015d36:	4629      	mov	r1, r5
 8015d38:	f7ea fc66 	bl	8000608 <__aeabi_dmul>
 8015d3c:	4682      	mov	sl, r0
 8015d3e:	468b      	mov	fp, r1
 8015d40:	4602      	mov	r2, r0
 8015d42:	460b      	mov	r3, r1
 8015d44:	4620      	mov	r0, r4
 8015d46:	4629      	mov	r1, r5
 8015d48:	f7ea fc5e 	bl	8000608 <__aeabi_dmul>
 8015d4c:	a341      	add	r3, pc, #260	; (adr r3, 8015e54 <__kernel_sin+0x154>)
 8015d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d52:	4680      	mov	r8, r0
 8015d54:	4689      	mov	r9, r1
 8015d56:	4650      	mov	r0, sl
 8015d58:	4659      	mov	r1, fp
 8015d5a:	f7ea fc55 	bl	8000608 <__aeabi_dmul>
 8015d5e:	a33f      	add	r3, pc, #252	; (adr r3, 8015e5c <__kernel_sin+0x15c>)
 8015d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d64:	f7ea fa98 	bl	8000298 <__aeabi_dsub>
 8015d68:	4652      	mov	r2, sl
 8015d6a:	465b      	mov	r3, fp
 8015d6c:	f7ea fc4c 	bl	8000608 <__aeabi_dmul>
 8015d70:	a33c      	add	r3, pc, #240	; (adr r3, 8015e64 <__kernel_sin+0x164>)
 8015d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d76:	f7ea fa91 	bl	800029c <__adddf3>
 8015d7a:	4652      	mov	r2, sl
 8015d7c:	465b      	mov	r3, fp
 8015d7e:	f7ea fc43 	bl	8000608 <__aeabi_dmul>
 8015d82:	a33a      	add	r3, pc, #232	; (adr r3, 8015e6c <__kernel_sin+0x16c>)
 8015d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d88:	f7ea fa86 	bl	8000298 <__aeabi_dsub>
 8015d8c:	4652      	mov	r2, sl
 8015d8e:	465b      	mov	r3, fp
 8015d90:	f7ea fc3a 	bl	8000608 <__aeabi_dmul>
 8015d94:	a337      	add	r3, pc, #220	; (adr r3, 8015e74 <__kernel_sin+0x174>)
 8015d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d9a:	f7ea fa7f 	bl	800029c <__adddf3>
 8015d9e:	9b01      	ldr	r3, [sp, #4]
 8015da0:	4606      	mov	r6, r0
 8015da2:	460f      	mov	r7, r1
 8015da4:	b9eb      	cbnz	r3, 8015de2 <__kernel_sin+0xe2>
 8015da6:	4602      	mov	r2, r0
 8015da8:	460b      	mov	r3, r1
 8015daa:	4650      	mov	r0, sl
 8015dac:	4659      	mov	r1, fp
 8015dae:	f7ea fc2b 	bl	8000608 <__aeabi_dmul>
 8015db2:	a325      	add	r3, pc, #148	; (adr r3, 8015e48 <__kernel_sin+0x148>)
 8015db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015db8:	f7ea fa6e 	bl	8000298 <__aeabi_dsub>
 8015dbc:	4642      	mov	r2, r8
 8015dbe:	464b      	mov	r3, r9
 8015dc0:	f7ea fc22 	bl	8000608 <__aeabi_dmul>
 8015dc4:	4602      	mov	r2, r0
 8015dc6:	460b      	mov	r3, r1
 8015dc8:	4620      	mov	r0, r4
 8015dca:	4629      	mov	r1, r5
 8015dcc:	f7ea fa66 	bl	800029c <__adddf3>
 8015dd0:	4604      	mov	r4, r0
 8015dd2:	460d      	mov	r5, r1
 8015dd4:	ec45 4b10 	vmov	d0, r4, r5
 8015dd8:	b003      	add	sp, #12
 8015dda:	ecbd 8b04 	vpop	{d8-d9}
 8015dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015de2:	4b1b      	ldr	r3, [pc, #108]	; (8015e50 <__kernel_sin+0x150>)
 8015de4:	ec51 0b18 	vmov	r0, r1, d8
 8015de8:	2200      	movs	r2, #0
 8015dea:	f7ea fc0d 	bl	8000608 <__aeabi_dmul>
 8015dee:	4632      	mov	r2, r6
 8015df0:	ec41 0b19 	vmov	d9, r0, r1
 8015df4:	463b      	mov	r3, r7
 8015df6:	4640      	mov	r0, r8
 8015df8:	4649      	mov	r1, r9
 8015dfa:	f7ea fc05 	bl	8000608 <__aeabi_dmul>
 8015dfe:	4602      	mov	r2, r0
 8015e00:	460b      	mov	r3, r1
 8015e02:	ec51 0b19 	vmov	r0, r1, d9
 8015e06:	f7ea fa47 	bl	8000298 <__aeabi_dsub>
 8015e0a:	4652      	mov	r2, sl
 8015e0c:	465b      	mov	r3, fp
 8015e0e:	f7ea fbfb 	bl	8000608 <__aeabi_dmul>
 8015e12:	ec53 2b18 	vmov	r2, r3, d8
 8015e16:	f7ea fa3f 	bl	8000298 <__aeabi_dsub>
 8015e1a:	a30b      	add	r3, pc, #44	; (adr r3, 8015e48 <__kernel_sin+0x148>)
 8015e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e20:	4606      	mov	r6, r0
 8015e22:	460f      	mov	r7, r1
 8015e24:	4640      	mov	r0, r8
 8015e26:	4649      	mov	r1, r9
 8015e28:	f7ea fbee 	bl	8000608 <__aeabi_dmul>
 8015e2c:	4602      	mov	r2, r0
 8015e2e:	460b      	mov	r3, r1
 8015e30:	4630      	mov	r0, r6
 8015e32:	4639      	mov	r1, r7
 8015e34:	f7ea fa32 	bl	800029c <__adddf3>
 8015e38:	4602      	mov	r2, r0
 8015e3a:	460b      	mov	r3, r1
 8015e3c:	4620      	mov	r0, r4
 8015e3e:	4629      	mov	r1, r5
 8015e40:	f7ea fa2a 	bl	8000298 <__aeabi_dsub>
 8015e44:	e7c4      	b.n	8015dd0 <__kernel_sin+0xd0>
 8015e46:	bf00      	nop
 8015e48:	55555549 	.word	0x55555549
 8015e4c:	3fc55555 	.word	0x3fc55555
 8015e50:	3fe00000 	.word	0x3fe00000
 8015e54:	5acfd57c 	.word	0x5acfd57c
 8015e58:	3de5d93a 	.word	0x3de5d93a
 8015e5c:	8a2b9ceb 	.word	0x8a2b9ceb
 8015e60:	3e5ae5e6 	.word	0x3e5ae5e6
 8015e64:	57b1fe7d 	.word	0x57b1fe7d
 8015e68:	3ec71de3 	.word	0x3ec71de3
 8015e6c:	19c161d5 	.word	0x19c161d5
 8015e70:	3f2a01a0 	.word	0x3f2a01a0
 8015e74:	1110f8a6 	.word	0x1110f8a6
 8015e78:	3f811111 	.word	0x3f811111

08015e7c <fabs>:
 8015e7c:	ec51 0b10 	vmov	r0, r1, d0
 8015e80:	ee10 2a10 	vmov	r2, s0
 8015e84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015e88:	ec43 2b10 	vmov	d0, r2, r3
 8015e8c:	4770      	bx	lr
	...

08015e90 <floor>:
 8015e90:	ec51 0b10 	vmov	r0, r1, d0
 8015e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e98:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015e9c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015ea0:	2e13      	cmp	r6, #19
 8015ea2:	ee10 5a10 	vmov	r5, s0
 8015ea6:	ee10 8a10 	vmov	r8, s0
 8015eaa:	460c      	mov	r4, r1
 8015eac:	dc32      	bgt.n	8015f14 <floor+0x84>
 8015eae:	2e00      	cmp	r6, #0
 8015eb0:	da14      	bge.n	8015edc <floor+0x4c>
 8015eb2:	a333      	add	r3, pc, #204	; (adr r3, 8015f80 <floor+0xf0>)
 8015eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eb8:	f7ea f9f0 	bl	800029c <__adddf3>
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	f7ea fe32 	bl	8000b28 <__aeabi_dcmpgt>
 8015ec4:	b138      	cbz	r0, 8015ed6 <floor+0x46>
 8015ec6:	2c00      	cmp	r4, #0
 8015ec8:	da57      	bge.n	8015f7a <floor+0xea>
 8015eca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015ece:	431d      	orrs	r5, r3
 8015ed0:	d001      	beq.n	8015ed6 <floor+0x46>
 8015ed2:	4c2d      	ldr	r4, [pc, #180]	; (8015f88 <floor+0xf8>)
 8015ed4:	2500      	movs	r5, #0
 8015ed6:	4621      	mov	r1, r4
 8015ed8:	4628      	mov	r0, r5
 8015eda:	e025      	b.n	8015f28 <floor+0x98>
 8015edc:	4f2b      	ldr	r7, [pc, #172]	; (8015f8c <floor+0xfc>)
 8015ede:	4137      	asrs	r7, r6
 8015ee0:	ea01 0307 	and.w	r3, r1, r7
 8015ee4:	4303      	orrs	r3, r0
 8015ee6:	d01f      	beq.n	8015f28 <floor+0x98>
 8015ee8:	a325      	add	r3, pc, #148	; (adr r3, 8015f80 <floor+0xf0>)
 8015eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eee:	f7ea f9d5 	bl	800029c <__adddf3>
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	f7ea fe17 	bl	8000b28 <__aeabi_dcmpgt>
 8015efa:	2800      	cmp	r0, #0
 8015efc:	d0eb      	beq.n	8015ed6 <floor+0x46>
 8015efe:	2c00      	cmp	r4, #0
 8015f00:	bfbe      	ittt	lt
 8015f02:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015f06:	fa43 f606 	asrlt.w	r6, r3, r6
 8015f0a:	19a4      	addlt	r4, r4, r6
 8015f0c:	ea24 0407 	bic.w	r4, r4, r7
 8015f10:	2500      	movs	r5, #0
 8015f12:	e7e0      	b.n	8015ed6 <floor+0x46>
 8015f14:	2e33      	cmp	r6, #51	; 0x33
 8015f16:	dd0b      	ble.n	8015f30 <floor+0xa0>
 8015f18:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015f1c:	d104      	bne.n	8015f28 <floor+0x98>
 8015f1e:	ee10 2a10 	vmov	r2, s0
 8015f22:	460b      	mov	r3, r1
 8015f24:	f7ea f9ba 	bl	800029c <__adddf3>
 8015f28:	ec41 0b10 	vmov	d0, r0, r1
 8015f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f30:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015f34:	f04f 33ff 	mov.w	r3, #4294967295
 8015f38:	fa23 f707 	lsr.w	r7, r3, r7
 8015f3c:	4207      	tst	r7, r0
 8015f3e:	d0f3      	beq.n	8015f28 <floor+0x98>
 8015f40:	a30f      	add	r3, pc, #60	; (adr r3, 8015f80 <floor+0xf0>)
 8015f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f46:	f7ea f9a9 	bl	800029c <__adddf3>
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	f7ea fdeb 	bl	8000b28 <__aeabi_dcmpgt>
 8015f52:	2800      	cmp	r0, #0
 8015f54:	d0bf      	beq.n	8015ed6 <floor+0x46>
 8015f56:	2c00      	cmp	r4, #0
 8015f58:	da02      	bge.n	8015f60 <floor+0xd0>
 8015f5a:	2e14      	cmp	r6, #20
 8015f5c:	d103      	bne.n	8015f66 <floor+0xd6>
 8015f5e:	3401      	adds	r4, #1
 8015f60:	ea25 0507 	bic.w	r5, r5, r7
 8015f64:	e7b7      	b.n	8015ed6 <floor+0x46>
 8015f66:	2301      	movs	r3, #1
 8015f68:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015f6c:	fa03 f606 	lsl.w	r6, r3, r6
 8015f70:	4435      	add	r5, r6
 8015f72:	4545      	cmp	r5, r8
 8015f74:	bf38      	it	cc
 8015f76:	18e4      	addcc	r4, r4, r3
 8015f78:	e7f2      	b.n	8015f60 <floor+0xd0>
 8015f7a:	2500      	movs	r5, #0
 8015f7c:	462c      	mov	r4, r5
 8015f7e:	e7aa      	b.n	8015ed6 <floor+0x46>
 8015f80:	8800759c 	.word	0x8800759c
 8015f84:	7e37e43c 	.word	0x7e37e43c
 8015f88:	bff00000 	.word	0xbff00000
 8015f8c:	000fffff 	.word	0x000fffff

08015f90 <scalbn>:
 8015f90:	b570      	push	{r4, r5, r6, lr}
 8015f92:	ec55 4b10 	vmov	r4, r5, d0
 8015f96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015f9a:	4606      	mov	r6, r0
 8015f9c:	462b      	mov	r3, r5
 8015f9e:	b99a      	cbnz	r2, 8015fc8 <scalbn+0x38>
 8015fa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015fa4:	4323      	orrs	r3, r4
 8015fa6:	d036      	beq.n	8016016 <scalbn+0x86>
 8015fa8:	4b39      	ldr	r3, [pc, #228]	; (8016090 <scalbn+0x100>)
 8015faa:	4629      	mov	r1, r5
 8015fac:	ee10 0a10 	vmov	r0, s0
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	f7ea fb29 	bl	8000608 <__aeabi_dmul>
 8015fb6:	4b37      	ldr	r3, [pc, #220]	; (8016094 <scalbn+0x104>)
 8015fb8:	429e      	cmp	r6, r3
 8015fba:	4604      	mov	r4, r0
 8015fbc:	460d      	mov	r5, r1
 8015fbe:	da10      	bge.n	8015fe2 <scalbn+0x52>
 8015fc0:	a32b      	add	r3, pc, #172	; (adr r3, 8016070 <scalbn+0xe0>)
 8015fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fc6:	e03a      	b.n	801603e <scalbn+0xae>
 8015fc8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015fcc:	428a      	cmp	r2, r1
 8015fce:	d10c      	bne.n	8015fea <scalbn+0x5a>
 8015fd0:	ee10 2a10 	vmov	r2, s0
 8015fd4:	4620      	mov	r0, r4
 8015fd6:	4629      	mov	r1, r5
 8015fd8:	f7ea f960 	bl	800029c <__adddf3>
 8015fdc:	4604      	mov	r4, r0
 8015fde:	460d      	mov	r5, r1
 8015fe0:	e019      	b.n	8016016 <scalbn+0x86>
 8015fe2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015fe6:	460b      	mov	r3, r1
 8015fe8:	3a36      	subs	r2, #54	; 0x36
 8015fea:	4432      	add	r2, r6
 8015fec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015ff0:	428a      	cmp	r2, r1
 8015ff2:	dd08      	ble.n	8016006 <scalbn+0x76>
 8015ff4:	2d00      	cmp	r5, #0
 8015ff6:	a120      	add	r1, pc, #128	; (adr r1, 8016078 <scalbn+0xe8>)
 8015ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ffc:	da1c      	bge.n	8016038 <scalbn+0xa8>
 8015ffe:	a120      	add	r1, pc, #128	; (adr r1, 8016080 <scalbn+0xf0>)
 8016000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016004:	e018      	b.n	8016038 <scalbn+0xa8>
 8016006:	2a00      	cmp	r2, #0
 8016008:	dd08      	ble.n	801601c <scalbn+0x8c>
 801600a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801600e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016012:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016016:	ec45 4b10 	vmov	d0, r4, r5
 801601a:	bd70      	pop	{r4, r5, r6, pc}
 801601c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016020:	da19      	bge.n	8016056 <scalbn+0xc6>
 8016022:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016026:	429e      	cmp	r6, r3
 8016028:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801602c:	dd0a      	ble.n	8016044 <scalbn+0xb4>
 801602e:	a112      	add	r1, pc, #72	; (adr r1, 8016078 <scalbn+0xe8>)
 8016030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d1e2      	bne.n	8015ffe <scalbn+0x6e>
 8016038:	a30f      	add	r3, pc, #60	; (adr r3, 8016078 <scalbn+0xe8>)
 801603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801603e:	f7ea fae3 	bl	8000608 <__aeabi_dmul>
 8016042:	e7cb      	b.n	8015fdc <scalbn+0x4c>
 8016044:	a10a      	add	r1, pc, #40	; (adr r1, 8016070 <scalbn+0xe0>)
 8016046:	e9d1 0100 	ldrd	r0, r1, [r1]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d0b8      	beq.n	8015fc0 <scalbn+0x30>
 801604e:	a10e      	add	r1, pc, #56	; (adr r1, 8016088 <scalbn+0xf8>)
 8016050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016054:	e7b4      	b.n	8015fc0 <scalbn+0x30>
 8016056:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801605a:	3236      	adds	r2, #54	; 0x36
 801605c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016060:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016064:	4620      	mov	r0, r4
 8016066:	4b0c      	ldr	r3, [pc, #48]	; (8016098 <scalbn+0x108>)
 8016068:	2200      	movs	r2, #0
 801606a:	e7e8      	b.n	801603e <scalbn+0xae>
 801606c:	f3af 8000 	nop.w
 8016070:	c2f8f359 	.word	0xc2f8f359
 8016074:	01a56e1f 	.word	0x01a56e1f
 8016078:	8800759c 	.word	0x8800759c
 801607c:	7e37e43c 	.word	0x7e37e43c
 8016080:	8800759c 	.word	0x8800759c
 8016084:	fe37e43c 	.word	0xfe37e43c
 8016088:	c2f8f359 	.word	0xc2f8f359
 801608c:	81a56e1f 	.word	0x81a56e1f
 8016090:	43500000 	.word	0x43500000
 8016094:	ffff3cb0 	.word	0xffff3cb0
 8016098:	3c900000 	.word	0x3c900000

0801609c <_init>:
 801609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801609e:	bf00      	nop
 80160a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160a2:	bc08      	pop	{r3}
 80160a4:	469e      	mov	lr, r3
 80160a6:	4770      	bx	lr

080160a8 <_fini>:
 80160a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160aa:	bf00      	nop
 80160ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160ae:	bc08      	pop	{r3}
 80160b0:	469e      	mov	lr, r3
 80160b2:	4770      	bx	lr
