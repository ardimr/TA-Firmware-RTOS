
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f818  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d0  0800f9b8  0800f9b8  0001f9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010388  08010388  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08010388  08010388  00020388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010390  08010390  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010390  08010390  00020390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010394  08010394  00020394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08010398  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005694  20000200  08010594  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005894  08010594  00035894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000265db  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bb6  00000000  00000000  00056807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ca0  00000000  00000000  0005b3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b00  00000000  00000000  0005d060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd41  00000000  00000000  0005eb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020c05  00000000  00000000  0007b8a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac385  00000000  00000000  0009c4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014882b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f5c  00000000  00000000  00148880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f9a0 	.word	0x0800f9a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800f9a0 	.word	0x0800f9a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <Write_MFRC522>:
 * Return value: None
 */

extern SPI_HandleTypeDef hspi1;

void Write_MFRC522(u_char addr, u_char val) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	u_char addr_bits = (((addr<<1) & 0x7E));
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001016:	b2db      	uxtb	r3, r3
 8001018:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2110      	movs	r1, #16
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <Write_MFRC522+0x58>)
 8001020:	f003 fa6e 	bl	8004500 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi1, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8001024:	f107 010f 	add.w	r1, r7, #15
 8001028:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800102c:	2201      	movs	r2, #1
 800102e:	480a      	ldr	r0, [pc, #40]	; (8001058 <Write_MFRC522+0x5c>)
 8001030:	f004 ff6f 	bl	8005f12 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &val, 1, 500);
 8001034:	1db9      	adds	r1, r7, #6
 8001036:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800103a:	2201      	movs	r2, #1
 800103c:	4806      	ldr	r0, [pc, #24]	; (8001058 <Write_MFRC522+0x5c>)
 800103e:	f004 ff68 	bl	8005f12 <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2110      	movs	r1, #16
 8001046:	4803      	ldr	r0, [pc, #12]	; (8001054 <Write_MFRC522+0x58>)
 8001048:	f003 fa5a 	bl	8004500 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40020000 	.word	0x40020000
 8001058:	2000509c 	.word	0x2000509c

0800105c <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	b25b      	sxtb	r3, r3
 800106c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001070:	b25b      	sxtb	r3, r3
 8001072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001076:	b25b      	sxtb	r3, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2110      	movs	r1, #16
 8001080:	480e      	ldr	r0, [pc, #56]	; (80010bc <Read_MFRC522+0x60>)
 8001082:	f003 fa3d 	bl	8004500 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi1, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8001086:	f107 010e 	add.w	r1, r7, #14
 800108a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800108e:	2201      	movs	r2, #1
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <Read_MFRC522+0x64>)
 8001092:	f004 ff3e 	bl	8005f12 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, &rx_bits, 1, 500);
 8001096:	f107 010f 	add.w	r1, r7, #15
 800109a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800109e:	2201      	movs	r2, #1
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <Read_MFRC522+0x64>)
 80010a2:	f005 f872 	bl	800618a <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2110      	movs	r1, #16
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <Read_MFRC522+0x60>)
 80010ac:	f003 fa28 	bl	8004500 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020000 	.word	0x40020000
 80010c0:	2000509c 	.word	0x2000509c

080010c4 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ffc0 	bl	800105c <Read_MFRC522>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff85 	bl	8000ffc <Write_MFRC522>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	460a      	mov	r2, r1
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	4613      	mov	r3, r2
 8001108:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ffa5 	bl	800105c <Read_MFRC522>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001116:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800111a:	43db      	mvns	r3, r3
 800111c:	b25a      	sxtb	r2, r3
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	4013      	ands	r3, r2
 8001124:	b25b      	sxtb	r3, r3
 8001126:	b2da      	uxtb	r2, r3
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff65 	bl	8000ffc <Write_MFRC522>
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 800113e:	2103      	movs	r1, #3
 8001140:	2014      	movs	r0, #20
 8001142:	f7ff ffbf 	bl	80010c4 <SetBitMask>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}

0800114a <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800114e:	210f      	movs	r1, #15
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff ff53 	bl	8000ffc <Write_MFRC522>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2102      	movs	r1, #2
 8001164:	4812      	ldr	r0, [pc, #72]	; (80011b0 <MFRC522_Init+0x54>)
 8001166:	f003 f9cb 	bl	8004500 <HAL_GPIO_WritePin>
  MFRC522_Reset();
 800116a:	f7ff ffee 	bl	800114a <MFRC522_Reset>


  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	202a      	movs	r0, #42	; 0x2a
 8001172:	f7ff ff43 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); 	// TModeReg[3..0] + TPrescalerReg
 8001176:	21a9      	movs	r1, #169	; 0xa9
 8001178:	202b      	movs	r0, #43	; 0x2b
 800117a:	f7ff ff3f 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 800117e:	2103      	movs	r1, #3
 8001180:	202d      	movs	r0, #45	; 0x2d
 8001182:	f7ff ff3b 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 8001186:	21e8      	movs	r1, #232	; 0xe8
 8001188:	202c      	movs	r0, #44	; 0x2c
 800118a:	f7ff ff37 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     			// force 100% ASK modulation
 800118e:	2140      	movs	r1, #64	; 0x40
 8001190:	2015      	movs	r0, #21
 8001192:	f7ff ff33 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       			// CRC Initial value 0x6363
 8001196:	213d      	movs	r1, #61	; 0x3d
 8001198:	2011      	movs	r0, #17
 800119a:	f7ff ff2f 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(RFCfgReg, (0x07<<4)); 			// Set RX Gain to Max
 800119e:	2170      	movs	r1, #112	; 0x70
 80011a0:	2026      	movs	r0, #38	; 0x26
 80011a2:	f7ff ff2b 	bl	8000ffc <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 80011a6:	f7ff ffc8 	bl	800113a <AntennaOn>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40020000 	.word	0x40020000

080011b4 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 80011c0:	2107      	movs	r1, #7
 80011c2:	200d      	movs	r0, #13
 80011c4:	f7ff ff1a 	bl	8000ffc <Write_MFRC522>

  TagType[0] = reqMode;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	79fa      	ldrb	r2, [r7, #7]
 80011cc:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2201      	movs	r2, #1
 80011d8:	6839      	ldr	r1, [r7, #0]
 80011da:	200c      	movs	r0, #12
 80011dc:	f000 f80f 	bl	80011fe <MFRC522_ToCard>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <MFRC522_Request+0x3c>
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	d001      	beq.n	80011f4 <MFRC522_Request+0x40>
    status = MI_ERR;
 80011f0:	2302      	movs	r3, #2
 80011f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 80011fe:	b590      	push	{r4, r7, lr}
 8001200:	b089      	sub	sp, #36	; 0x24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	4613      	mov	r3, r2
 800120e:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 8001210:	2302      	movs	r3, #2
 8001212:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 8001214:	2300      	movs	r3, #0
 8001216:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 8001218:	2300      	movs	r3, #0
 800121a:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b0c      	cmp	r3, #12
 8001220:	d006      	beq.n	8001230 <MFRC522_ToCard+0x32>
 8001222:	2b0e      	cmp	r3, #14
 8001224:	d109      	bne.n	800123a <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8001226:	2312      	movs	r3, #18
 8001228:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 800122a:	2310      	movs	r3, #16
 800122c:	777b      	strb	r3, [r7, #29]
        break;
 800122e:	e005      	b.n	800123c <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 8001230:	2377      	movs	r3, #119	; 0x77
 8001232:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 8001234:	2330      	movs	r3, #48	; 0x30
 8001236:	777b      	strb	r3, [r7, #29]
        break;
 8001238:	e000      	b.n	800123c <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 800123a:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 800123c:	7fbb      	ldrb	r3, [r7, #30]
 800123e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	2002      	movs	r0, #2
 8001248:	f7ff fed8 	bl	8000ffc <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	2004      	movs	r0, #4
 8001250:	f7ff ff53 	bl	80010fa <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 8001254:	2180      	movs	r1, #128	; 0x80
 8001256:	200a      	movs	r0, #10
 8001258:	f7ff ff34 	bl	80010c4 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 800125c:	2100      	movs	r1, #0
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff fecc 	bl	8000ffc <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	e00a      	b.n	8001280 <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	2009      	movs	r0, #9
 8001276:	f7ff fec1 	bl	8000ffc <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	3301      	adds	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	7bbb      	ldrb	r3, [r7, #14]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3f0      	bcc.n	800126a <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	4619      	mov	r1, r3
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff feb5 	bl	8000ffc <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2b0c      	cmp	r3, #12
 8001296:	d103      	bne.n	80012a0 <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	200d      	movs	r0, #13
 800129c:	f7ff ff12 	bl	80010c4 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80012a0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012a4:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 80012a6:	2004      	movs	r0, #4
 80012a8:	f7ff fed8 	bl	800105c <Read_MFRC522>
 80012ac:	4603      	mov	r3, r0
 80012ae:	773b      	strb	r3, [r7, #28]
    i--;
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00a      	beq.n	80012d2 <MFRC522_ToCard+0xd4>
 80012bc:	7f3b      	ldrb	r3, [r7, #28]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d105      	bne.n	80012d2 <MFRC522_ToCard+0xd4>
 80012c6:	7f3a      	ldrb	r2, [r7, #28]
 80012c8:	7f7b      	ldrb	r3, [r7, #29]
 80012ca:	4013      	ands	r3, r2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0e9      	beq.n	80012a6 <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	200d      	movs	r0, #13
 80012d6:	f7ff ff10 	bl	80010fa <ClearBitMask>

  if (i != 0)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d052      	beq.n	8001386 <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 80012e0:	2006      	movs	r0, #6
 80012e2:	f7ff febb 	bl	800105c <Read_MFRC522>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f003 031b 	and.w	r3, r3, #27
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d148      	bne.n	8001382 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 80012f4:	7f3a      	ldrb	r2, [r7, #28]
 80012f6:	7fbb      	ldrb	r3, [r7, #30]
 80012f8:	4013      	ands	r3, r2
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 8001304:	2301      	movs	r3, #1
 8001306:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b0c      	cmp	r3, #12
 800130c:	d13b      	bne.n	8001386 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 800130e:	200a      	movs	r0, #10
 8001310:	f7ff fea4 	bl	800105c <Read_MFRC522>
 8001314:	4603      	mov	r3, r0
 8001316:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001318:	200c      	movs	r0, #12
 800131a:	f7ff fe9f 	bl	800105c <Read_MFRC522>
 800131e:	4603      	mov	r3, r0
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8001326:	7dfb      	ldrb	r3, [r7, #23]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d008      	beq.n	800133e <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 800132c:	7f3b      	ldrb	r3, [r7, #28]
 800132e:	3b01      	subs	r3, #1
 8001330:	00da      	lsls	r2, r3, #3
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	4413      	add	r3, r2
 8001336:	461a      	mov	r2, r3
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e004      	b.n	8001348 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 800133e:	7f3b      	ldrb	r3, [r7, #28]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	461a      	mov	r2, r3
 8001344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001346:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8001348:	7f3b      	ldrb	r3, [r7, #28]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <MFRC522_ToCard+0x154>
        {
          n = 1;
 800134e:	2301      	movs	r3, #1
 8001350:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 8001352:	7f3b      	ldrb	r3, [r7, #28]
 8001354:	2b10      	cmp	r3, #16
 8001356:	d901      	bls.n	800135c <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 8001358:	2310      	movs	r3, #16
 800135a:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	e00a      	b.n	8001378 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	18d4      	adds	r4, r2, r3
 8001368:	2009      	movs	r0, #9
 800136a:	f7ff fe77 	bl	800105c <Read_MFRC522>
 800136e:	4603      	mov	r3, r0
 8001370:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	3301      	adds	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	7f3b      	ldrb	r3, [r7, #28]
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3f0      	bcc.n	8001362 <MFRC522_ToCard+0x164>
 8001380:	e001      	b.n	8001386 <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 8001382:	2302      	movs	r3, #2
 8001384:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8001386:	7ffb      	ldrb	r3, [r7, #31]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3724      	adds	r7, #36	; 0x24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}

08001390 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
 8001396:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 8001398:	2300      	movs	r3, #0
 800139a:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800139c:	2100      	movs	r1, #0
 800139e:	200d      	movs	r0, #13
 80013a0:	f7ff fe2c 	bl	8000ffc <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2293      	movs	r2, #147	; 0x93
 80013a8:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3301      	adds	r3, #1
 80013ae:	2220      	movs	r2, #32
 80013b0:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2202      	movs	r2, #2
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	200c      	movs	r0, #12
 80013c0:	f7ff ff1d 	bl	80011fe <MFRC522_ToCard>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d118      	bne.n	8001400 <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	73bb      	strb	r3, [r7, #14]
 80013d2:	e009      	b.n	80013e8 <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	7b7b      	ldrb	r3, [r7, #13]
 80013de:	4053      	eors	r3, r2
 80013e0:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 80013e2:	7bbb      	ldrb	r3, [r7, #14]
 80013e4:	3301      	adds	r3, #1
 80013e6:	73bb      	strb	r3, [r7, #14]
 80013e8:	7bbb      	ldrb	r3, [r7, #14]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d9f2      	bls.n	80013d4 <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	7b7a      	ldrb	r2, [r7, #13]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d001      	beq.n	8001400 <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 80013fc:	2302      	movs	r3, #2
 80013fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	0000      	movs	r0, r0
 800140c:	0000      	movs	r0, r0
	...

08001410 <RCFilter_Init>:
#include "RCFilter.h"
#include <math.h>

void RCFilter_Init(RCFilter * filter, float cutoffFreqHz, float sampleFreq_Hz){
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	ed87 0a02 	vstr	s0, [r7, #8]
 800141c:	edc7 0a01 	vstr	s1, [r7, #4]
	/*Clear output buffer*/
	filter->out[0] = 0.0f;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
	filter->out[1] = 0.0f;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
	float sampleTime_s = 1.0f/ sampleFreq_Hz;
 8001430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001434:	ed97 7a01 	vldr	s14, [r7, #4]
 8001438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143c:	edc7 7a05 	vstr	s15, [r7, #20]
	/*Compute equivalent RC Constant from cutoff Frequency*/
	float RC = 1.0f/(2* M_PI * cutoffFreqHz);
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f7ff f889 	bl	8000558 <__aeabi_f2d>
 8001446:	a31b      	add	r3, pc, #108	; (adr r3, 80014b4 <RCFilter_Init+0xa4>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f8dc 	bl	8000608 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	f04f 0000 	mov.w	r0, #0
 8001458:	4915      	ldr	r1, [pc, #84]	; (80014b0 <RCFilter_Init+0xa0>)
 800145a:	f7ff f9ff 	bl	800085c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fbc7 	bl	8000bf8 <__aeabi_d2f>
 800146a:	4603      	mov	r3, r0
 800146c:	613b      	str	r3, [r7, #16]
	/*Pre-compute filter coefficient for first order low-pass filter*/
	filter->coeff[0] = sampleTime_s/(sampleTime_s+ RC);
 800146e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001472:	edd7 7a04 	vldr	s15, [r7, #16]
 8001476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147a:	edd7 6a05 	vldr	s13, [r7, #20]
 800147e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	edc3 7a00 	vstr	s15, [r3]
	filter->coeff[1] = RC/(sampleTime_s+RC);
 8001488:	ed97 7a05 	vldr	s14, [r7, #20]
 800148c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001494:	edd7 6a04 	vldr	s13, [r7, #16]
 8001498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a01 	vstr	s15, [r3, #4]

}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	f3af 8000 	nop.w
 80014b0:	3ff00000 	.word	0x3ff00000
 80014b4:	54442d18 	.word	0x54442d18
 80014b8:	401921fb 	.word	0x401921fb

080014bc <RCFilter_Update>:

float RCFilter_Update(RCFilter *filter, float input){
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	ed87 0a00 	vstr	s0, [r7]
	/* Shift output samples */
	filter->out[1] = filter->out[0];
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]

	/* Compute new ouput sample */
	filter->out[0] = filter->coeff[0] * input+filter->coeff[1] * filter->out[1];
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	ed93 7a00 	vldr	s14, [r3]
 80014d6:	edd7 7a00 	vldr	s15, [r7]
 80014da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80014ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Return Filtered sample */
	return filter->out[0];
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	ee07 3a90 	vmov	s15, r3
}
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <MovAvgFilter_init>:

void MovAvgFilter_init(MovAvgFilter * filter){
 800150e:	b480      	push	{r7}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	/*Clear output buffer*/
	filter->out = 0.0f;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	/*clear value*/
	for (int i = 0; i<BUFF_LENGTH; i++){
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	e009      	b.n	800153a <MovAvgFilter_init+0x2c>
		filter -> val[i]= 0;
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<BUFF_LENGTH; i++){
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b31      	cmp	r3, #49	; 0x31
 800153e:	ddf2      	ble.n	8001526 <MovAvgFilter_init+0x18>
	}
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <MovAvgFilter_Update>:

float MovAvgFilter_Update(MovAvgFilter *filter, float input){
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	ed87 0a00 	vstr	s0, [r7]
	/*Shifting Value and calculate the cumulative sum*/
	float sum = 0;
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < BUFF_LENGTH; i++){
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	e019      	b.n	800159c <MovAvgFilter_Update+0x4c>
		filter->val[i] = filter-> val[i+1];
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	3301      	adds	r3, #1
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	601a      	str	r2, [r3, #0]
		sum += filter -> val[i];
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	ed97 7a05 	vldr	s14, [r7, #20]
 800158e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001592:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < BUFF_LENGTH; i++){
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	3301      	adds	r3, #1
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b31      	cmp	r3, #49	; 0x31
 80015a0:	dde2      	ble.n	8001568 <MovAvgFilter_Update+0x18>
	}
	(filter -> val[BUFF_LENGTH-1]) = input;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	sum += input;
 80015aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80015ae:	edd7 7a00 	vldr	s15, [r7]
 80015b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b6:	edc7 7a05 	vstr	s15, [r7, #20]

	/*Calculating the average*/
	float avg = sum/BUFF_LENGTH;
 80015ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80015be:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80015ec <MovAvgFilter_Update+0x9c>
 80015c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c6:	edc7 7a03 	vstr	s15, [r7, #12]
	filter -> out = avg;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	return filter -> out;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80015d8:	ee07 3a90 	vmov	s15, r3
}
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	42480000 	.word	0x42480000

080015f0 <nmea0183_checksum>:
void ADCProcesing(void *argument);

/* USER CODE BEGIN PFP */
// function to calculate checksum of the NMEA sentence
// -4, but not -3 because the NMEA sentences are delimited with \r\n, and there also is the invisible \r in the end
int nmea0183_checksum(char *msg) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	int checksum = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
	// the first $ sign and the last two bytes of original CRC + the * sign
	for (j = 1; j < strlen(msg) - 4; j++) {
 8001600:	2301      	movs	r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	e00a      	b.n	800161c <nmea0183_checksum+0x2c>
		checksum = checksum ^ (unsigned) msg[j];
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4053      	eors	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
	for (j = 1; j < strlen(msg) - 4; j++) {
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3301      	adds	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7fe fddf 	bl	80001e0 <strlen>
 8001622:	4603      	mov	r3, r0
 8001624:	1f1a      	subs	r2, r3, #4
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8ec      	bhi.n	8001606 <nmea0183_checksum+0x16>
	}
	return checksum;
 800162c:	68fb      	ldr	r3, [r7, #12]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  for(int i = 0; i<3; i++){
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	e010      	b.n	8001668 <HAL_ADC_ConvCpltCallback+0x30>
	  value[i] = buffer[i];
 8001646:	4a0d      	ldr	r2, [pc, #52]	; (800167c <HAL_ADC_ConvCpltCallback+0x44>)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_ADC_ConvCpltCallback+0x48>)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i<3; i++){
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3301      	adds	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b02      	cmp	r3, #2
 800166c:	ddeb      	ble.n	8001646 <HAL_ADC_ConvCpltCallback+0xe>
  }
  //Filtering Analog reading
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	20005018 	.word	0x20005018
 8001680:	20005380 	.word	0x20005380

08001684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b09a      	sub	sp, #104	; 0x68
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168a:	f001 fc83 	bl	8002f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168e:	f000 f87f 	bl	8001790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001692:	f000 fa37 	bl	8001b04 <MX_GPIO_Init>
  MX_DMA_Init();
 8001696:	f000 fa0d 	bl	8001ab4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800169a:	f000 f9e1 	bl	8001a60 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800169e:	f000 f951 	bl	8001944 <MX_I2C1_Init>
  MX_SPI1_Init();
 80016a2:	f000 f97d 	bl	80019a0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80016a6:	f000 f9b1 	bl	8001a0c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80016aa:	f000 f8dd 	bl	8001868 <MX_ADC1_Init>
  MX_FATFS_Init();
 80016ae:	f006 fb3b 	bl	8007d28 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  char txBuffer [100] = {};
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	2260      	movs	r2, #96	; 0x60
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f009 fef8 	bl	800b4b4 <memset>
  sprintf(txBuffer, "Bismillah..\n");
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	491f      	ldr	r1, [pc, #124]	; (8001744 <main+0xc0>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00a fb65 	bl	800bd98 <siprintf>
  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 80016ce:	1d39      	adds	r1, r7, #4
 80016d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016d4:	2264      	movs	r2, #100	; 0x64
 80016d6:	481c      	ldr	r0, [pc, #112]	; (8001748 <main+0xc4>)
 80016d8:	f005 fc07 	bl	8006eea <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016dc:	f006 fc2e 	bl	8007f3c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MutexSPI1 */
  MutexSPI1Handle = osMutexNew(&MutexSPI1_attributes);
 80016e0:	481a      	ldr	r0, [pc, #104]	; (800174c <main+0xc8>)
 80016e2:	f006 fd22 	bl	800812a <osMutexNew>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4a19      	ldr	r2, [pc, #100]	; (8001750 <main+0xcc>)
 80016ea:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(Display, NULL, &DisplayTask_attributes);
 80016ec:	4a19      	ldr	r2, [pc, #100]	; (8001754 <main+0xd0>)
 80016ee:	2100      	movs	r1, #0
 80016f0:	4819      	ldr	r0, [pc, #100]	; (8001758 <main+0xd4>)
 80016f2:	f006 fc6d 	bl	8007fd0 <osThreadNew>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4a18      	ldr	r2, [pc, #96]	; (800175c <main+0xd8>)
 80016fa:	6013      	str	r3, [r2, #0]

  /* creation of IMUTask */
  IMUTaskHandle = osThreadNew(IMU, NULL, &IMUTask_attributes);
 80016fc:	4a18      	ldr	r2, [pc, #96]	; (8001760 <main+0xdc>)
 80016fe:	2100      	movs	r1, #0
 8001700:	4818      	ldr	r0, [pc, #96]	; (8001764 <main+0xe0>)
 8001702:	f006 fc65 	bl	8007fd0 <osThreadNew>
 8001706:	4603      	mov	r3, r0
 8001708:	4a17      	ldr	r2, [pc, #92]	; (8001768 <main+0xe4>)
 800170a:	6013      	str	r3, [r2, #0]

  /* creation of GPSTask */
  GPSTaskHandle = osThreadNew(GPS, NULL, &GPSTask_attributes);
 800170c:	4a17      	ldr	r2, [pc, #92]	; (800176c <main+0xe8>)
 800170e:	2100      	movs	r1, #0
 8001710:	4817      	ldr	r0, [pc, #92]	; (8001770 <main+0xec>)
 8001712:	f006 fc5d 	bl	8007fd0 <osThreadNew>
 8001716:	4603      	mov	r3, r0
 8001718:	4a16      	ldr	r2, [pc, #88]	; (8001774 <main+0xf0>)
 800171a:	6013      	str	r3, [r2, #0]

  /* creation of RFIDTask */
  RFIDTaskHandle = osThreadNew(RFID, NULL, &RFIDTask_attributes);
 800171c:	4a16      	ldr	r2, [pc, #88]	; (8001778 <main+0xf4>)
 800171e:	2100      	movs	r1, #0
 8001720:	4816      	ldr	r0, [pc, #88]	; (800177c <main+0xf8>)
 8001722:	f006 fc55 	bl	8007fd0 <osThreadNew>
 8001726:	4603      	mov	r3, r0
 8001728:	4a15      	ldr	r2, [pc, #84]	; (8001780 <main+0xfc>)
 800172a:	6013      	str	r3, [r2, #0]

  /* creation of SDCardTask */
//  SDCardTaskHandle = osThreadNew(SDCard, NULL, &SDCardTask_attributes);

  /* creation of ADCProcessingTa */
  ADCProcessingTaHandle = osThreadNew(ADCProcesing, NULL, &ADCProcessingTa_attributes);
 800172c:	4a15      	ldr	r2, [pc, #84]	; (8001784 <main+0x100>)
 800172e:	2100      	movs	r1, #0
 8001730:	4815      	ldr	r0, [pc, #84]	; (8001788 <main+0x104>)
 8001732:	f006 fc4d 	bl	8007fd0 <osThreadNew>
 8001736:	4603      	mov	r3, r0
 8001738:	4a14      	ldr	r2, [pc, #80]	; (800178c <main+0x108>)
 800173a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800173c:	f006 fc22 	bl	8007f84 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    /* Infinite loop */

  while (1)
 8001740:	e7fe      	b.n	8001740 <main+0xbc>
 8001742:	bf00      	nop
 8001744:	0800fa08 	.word	0x0800fa08
 8001748:	200050f4 	.word	0x200050f4
 800174c:	0800fe50 	.word	0x0800fe50
 8001750:	20004e58 	.word	0x20004e58
 8001754:	0800fd9c 	.word	0x0800fd9c
 8001758:	08001c45 	.word	0x08001c45
 800175c:	20005098 	.word	0x20005098
 8001760:	0800fdc0 	.word	0x0800fdc0
 8001764:	08001d31 	.word	0x08001d31
 8001768:	20004dfc 	.word	0x20004dfc
 800176c:	0800fde4 	.word	0x0800fde4
 8001770:	08001dc5 	.word	0x08001dc5
 8001774:	20005138 	.word	0x20005138
 8001778:	0800fe08 	.word	0x0800fe08
 800177c:	080023b5 	.word	0x080023b5
 8001780:	20005084 	.word	0x20005084
 8001784:	0800fe2c 	.word	0x0800fe2c
 8001788:	08002531 	.word	0x08002531
 800178c:	20005014 	.word	0x20005014

08001790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b094      	sub	sp, #80	; 0x50
 8001794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	2230      	movs	r2, #48	; 0x30
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f009 fe88 	bl	800b4b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	4b29      	ldr	r3, [pc, #164]	; (8001860 <SystemClock_Config+0xd0>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	4a28      	ldr	r2, [pc, #160]	; (8001860 <SystemClock_Config+0xd0>)
 80017be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c2:	6413      	str	r3, [r2, #64]	; 0x40
 80017c4:	4b26      	ldr	r3, [pc, #152]	; (8001860 <SystemClock_Config+0xd0>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	4b23      	ldr	r3, [pc, #140]	; (8001864 <SystemClock_Config+0xd4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017dc:	4a21      	ldr	r2, [pc, #132]	; (8001864 <SystemClock_Config+0xd4>)
 80017de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <SystemClock_Config+0xd4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f0:	2302      	movs	r3, #2
 80017f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f4:	2301      	movs	r3, #1
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f8:	2310      	movs	r3, #16
 80017fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017fc:	2302      	movs	r3, #2
 80017fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001800:	2300      	movs	r3, #0
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001804:	2310      	movs	r3, #16
 8001806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001808:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800180c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800180e:	2304      	movs	r3, #4
 8001810:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001812:	2307      	movs	r3, #7
 8001814:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001816:	f107 0320 	add.w	r3, r7, #32
 800181a:	4618      	mov	r0, r3
 800181c:	f003 fe4a 	bl	80054b4 <HAL_RCC_OscConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001826:	f000 ff11 	bl	800264c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182a:	230f      	movs	r3, #15
 800182c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800182e:	2302      	movs	r3, #2
 8001830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	2102      	movs	r1, #2
 8001846:	4618      	mov	r0, r3
 8001848:	f004 f8ac 	bl	80059a4 <HAL_RCC_ClockConfig>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001852:	f000 fefb 	bl	800264c <Error_Handler>
  }
}
 8001856:	bf00      	nop
 8001858:	3750      	adds	r7, #80	; 0x50
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	40007000 	.word	0x40007000

08001868 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800186e:	463b      	mov	r3, r7
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800187a:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <MX_ADC1_Init+0xd0>)
 800187c:	4a2f      	ldr	r2, [pc, #188]	; (800193c <MX_ADC1_Init+0xd4>)
 800187e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <MX_ADC1_Init+0xd0>)
 8001882:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001886:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001888:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <MX_ADC1_Init+0xd0>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800188e:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <MX_ADC1_Init+0xd0>)
 8001890:	2201      	movs	r2, #1
 8001892:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001894:	4b28      	ldr	r3, [pc, #160]	; (8001938 <MX_ADC1_Init+0xd0>)
 8001896:	2201      	movs	r2, #1
 8001898:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800189a:	4b27      	ldr	r3, [pc, #156]	; (8001938 <MX_ADC1_Init+0xd0>)
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018a2:	4b25      	ldr	r3, [pc, #148]	; (8001938 <MX_ADC1_Init+0xd0>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <MX_ADC1_Init+0xd0>)
 80018aa:	4a25      	ldr	r2, [pc, #148]	; (8001940 <MX_ADC1_Init+0xd8>)
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <MX_ADC1_Init+0xd0>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80018b4:	4b20      	ldr	r3, [pc, #128]	; (8001938 <MX_ADC1_Init+0xd0>)
 80018b6:	2203      	movs	r2, #3
 80018b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <MX_ADC1_Init+0xd0>)
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018c2:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <MX_ADC1_Init+0xd0>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018c8:	481b      	ldr	r0, [pc, #108]	; (8001938 <MX_ADC1_Init+0xd0>)
 80018ca:	f001 fbc9 	bl	8003060 <HAL_ADC_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018d4:	f000 feba 	bl	800264c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80018d8:	230f      	movs	r3, #15
 80018da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018dc:	2301      	movs	r3, #1
 80018de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80018e0:	2307      	movs	r3, #7
 80018e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018e4:	463b      	mov	r3, r7
 80018e6:	4619      	mov	r1, r3
 80018e8:	4813      	ldr	r0, [pc, #76]	; (8001938 <MX_ADC1_Init+0xd0>)
 80018ea:	f001 fd01 	bl	80032f0 <HAL_ADC_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018f4:	f000 feaa 	bl	800264c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80018f8:	2308      	movs	r3, #8
 80018fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80018fc:	2302      	movs	r3, #2
 80018fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001900:	463b      	mov	r3, r7
 8001902:	4619      	mov	r1, r3
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <MX_ADC1_Init+0xd0>)
 8001906:	f001 fcf3 	bl	80032f0 <HAL_ADC_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001910:	f000 fe9c 	bl	800264c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001914:	2309      	movs	r3, #9
 8001916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001918:	2303      	movs	r3, #3
 800191a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800191c:	463b      	mov	r3, r7
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_ADC1_Init+0xd0>)
 8001922:	f001 fce5 	bl	80032f0 <HAL_ADC_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800192c:	f000 fe8e 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20004f28 	.word	0x20004f28
 800193c:	40012000 	.word	0x40012000
 8001940:	0f000001 	.word	0x0f000001

08001944 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <MX_I2C1_Init+0x50>)
 800194a:	4a13      	ldr	r2, [pc, #76]	; (8001998 <MX_I2C1_Init+0x54>)
 800194c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_I2C1_Init+0x50>)
 8001950:	4a12      	ldr	r2, [pc, #72]	; (800199c <MX_I2C1_Init+0x58>)
 8001952:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <MX_I2C1_Init+0x50>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_I2C1_Init+0x50>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_I2C1_Init+0x50>)
 8001962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001966:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <MX_I2C1_Init+0x50>)
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_I2C1_Init+0x50>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <MX_I2C1_Init+0x50>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_I2C1_Init+0x50>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001980:	4804      	ldr	r0, [pc, #16]	; (8001994 <MX_I2C1_Init+0x50>)
 8001982:	f002 fdd7 	bl	8004534 <HAL_I2C_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800198c:	f000 fe5e 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20004da8 	.word	0x20004da8
 8001998:	40005400 	.word	0x40005400
 800199c:	000186a0 	.word	0x000186a0

080019a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019a6:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <MX_SPI1_Init+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019d4:	2230      	movs	r2, #48	; 0x30
 80019d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019ec:	220a      	movs	r2, #10
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019f2:	f004 fa05 	bl	8005e00 <HAL_SPI_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019fc:	f000 fe26 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	2000509c 	.word	0x2000509c
 8001a08:	40013000 	.word	0x40013000

08001a0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_USART1_UART_Init+0x4c>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <MX_USART1_UART_Init+0x50>)
 8001a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <MX_USART1_UART_Init+0x4c>)
 8001a18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_USART1_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_USART1_UART_Init+0x4c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <MX_USART1_UART_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_USART1_UART_Init+0x4c>)
 8001a32:	220c      	movs	r2, #12
 8001a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <MX_USART1_UART_Init+0x4c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_USART1_UART_Init+0x4c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_USART1_UART_Init+0x4c>)
 8001a44:	f005 fa04 	bl	8006e50 <HAL_UART_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a4e:	f000 fdfd 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20004fd0 	.word	0x20004fd0
 8001a5c:	40011000 	.word	0x40011000

08001a60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <MX_USART2_UART_Init+0x50>)
 8001a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a86:	220c      	movs	r2, #12
 8001a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a98:	f005 f9da 	bl	8006e50 <HAL_UART_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aa2:	f000 fdd3 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200050f4 	.word	0x200050f4
 8001ab0:	40004400 	.word	0x40004400

08001ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <MX_DMA_Init+0x4c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <MX_DMA_Init+0x4c>)
 8001ac4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <MX_DMA_Init+0x4c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2105      	movs	r1, #5
 8001ada:	2038      	movs	r0, #56	; 0x38
 8001adc:	f001 ff60 	bl	80039a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ae0:	2038      	movs	r0, #56	; 0x38
 8001ae2:	f001 ff79 	bl	80039d8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2105      	movs	r1, #5
 8001aea:	203a      	movs	r0, #58	; 0x3a
 8001aec:	f001 ff58 	bl	80039a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001af0:	203a      	movs	r0, #58	; 0x3a
 8001af2:	f001 ff71 	bl	80039d8 <HAL_NVIC_EnableIRQ>

}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800

08001b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b44      	ldr	r3, [pc, #272]	; (8001c30 <MX_GPIO_Init+0x12c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a43      	ldr	r2, [pc, #268]	; (8001c30 <MX_GPIO_Init+0x12c>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <MX_GPIO_Init+0x12c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <MX_GPIO_Init+0x12c>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a3c      	ldr	r2, [pc, #240]	; (8001c30 <MX_GPIO_Init+0x12c>)
 8001b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <MX_GPIO_Init+0x12c>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	4b36      	ldr	r3, [pc, #216]	; (8001c30 <MX_GPIO_Init+0x12c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a35      	ldr	r2, [pc, #212]	; (8001c30 <MX_GPIO_Init+0x12c>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <MX_GPIO_Init+0x12c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <MX_GPIO_Init+0x12c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a2e      	ldr	r2, [pc, #184]	; (8001c30 <MX_GPIO_Init+0x12c>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <MX_GPIO_Init+0x12c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFID_RST_Pin|RFID_CS_Pin, GPIO_PIN_SET);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	2112      	movs	r1, #18
 8001b8e:	4829      	ldr	r0, [pc, #164]	; (8001c34 <MX_GPIO_Init+0x130>)
 8001b90:	f002 fcb6 	bl	8004500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|POWER_SEL_Pin|IGNITION_LOGIC_Pin, GPIO_PIN_RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	f44f 7144 	mov.w	r1, #784	; 0x310
 8001b9a:	4827      	ldr	r0, [pc, #156]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001b9c:	f002 fcb0 	bl	8004500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ba6:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <MX_GPIO_Init+0x138>)
 8001ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4820      	ldr	r0, [pc, #128]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001bb6:	f002 fb1f 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_RST_Pin RFID_CS_Pin */
  GPIO_InitStruct.Pin = RFID_RST_Pin|RFID_CS_Pin;
 8001bba:	2312      	movs	r3, #18
 8001bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4818      	ldr	r0, [pc, #96]	; (8001c34 <MX_GPIO_Init+0x130>)
 8001bd2:	f002 fb11 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin POWER_SEL_Pin IGNITION_LOGIC_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|POWER_SEL_Pin|IGNITION_LOGIC_Pin;
 8001bd6:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	4812      	ldr	r0, [pc, #72]	; (8001c38 <MX_GPIO_Init+0x134>)
 8001bf0:	f002 fb02 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHARGING_SIGNAL_Pin */
  GPIO_InitStruct.Pin = CHARGING_SIGNAL_Pin;
 8001bf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHARGING_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	480d      	ldr	r0, [pc, #52]	; (8001c40 <MX_GPIO_Init+0x13c>)
 8001c0a:	f002 faf5 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IGNITION_SIGNAL_Pin */
  GPIO_InitStruct.Pin = IGNITION_SIGNAL_Pin;
 8001c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IGNITION_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	4804      	ldr	r0, [pc, #16]	; (8001c34 <MX_GPIO_Init+0x130>)
 8001c24:	f002 fae8 	bl	80041f8 <HAL_GPIO_Init>

}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	; 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020000 	.word	0x40020000
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	10210000 	.word	0x10210000
 8001c40:	40020400 	.word	0x40020400

08001c44 <Display>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Display */
void Display(void *argument)
{
 8001c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c48:	b0c3      	sub	sp, #268	; 0x10c
 8001c4a:	af0a      	add	r7, sp, #40	; 0x28
 8001c4c:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN 5 */
	char txBuffer [200] = {};
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	f107 0318 	add.w	r3, r7, #24
 8001c56:	22c4      	movs	r2, #196	; 0xc4
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f009 fc2a 	bl	800b4b4 <memset>
	sprintf(txBuffer, "Running Display Task..\n");
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	492b      	ldr	r1, [pc, #172]	; (8001d14 <Display+0xd0>)
 8001c66:	4618      	mov	r0, r3
 8001c68:	f00a f896 	bl	800bd98 <siprintf>
  /* Infinite loop */
	uint8_t identification = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  for(;;)
  {
	  //Identification Check
	  if (identification == 1){
 8001c72:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d106      	bne.n	8001c88 <Display+0x44>
		  xTaskNotifyGive(IMUTaskHandle);
 8001c7a:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <Display+0xd4>)
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2202      	movs	r2, #2
 8001c82:	2100      	movs	r1, #0
 8001c84:	f008 fb48 	bl	800a318 <xTaskGenericNotify>
	  }

	  if(UID[0]== 0x29){ // Need to add driver database
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <Display+0xd8>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b29      	cmp	r3, #41	; 0x29
 8001c8e:	d103      	bne.n	8001c98 <Display+0x54>
		  identification = 1;
 8001c90:	2301      	movs	r3, #1
 8001c92:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8001c96:	e002      	b.n	8001c9e <Display+0x5a>
	  } else {
		  identification = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	  }
	  //End of Identification Check
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f",
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001c9e:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <Display+0xd8>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f",
 8001ca2:	60bb      	str	r3, [r7, #8]
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <Display+0xd8>)
 8001ca6:	785b      	ldrb	r3, [r3, #1]
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f",
 8001ca8:	607b      	str	r3, [r7, #4]
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001caa:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <Display+0xd8>)
 8001cac:	789b      	ldrb	r3, [r3, #2]
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f",
 8001cae:	461e      	mov	r6, r3
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <Display+0xd8>)
 8001cb2:	78db      	ldrb	r3, [r3, #3]
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f",
 8001cb4:	603b      	str	r3, [r7, #0]
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <Display+0xdc>)
 8001cb8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <Display+0xdc>)
 8001cbe:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <Display+0xdc>)
 8001cc4:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <Display+0xe0>)
 8001cca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
	  sprintf(txBuffer,"\nID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f",
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc42 	bl	8000558 <__aeabi_f2d>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	f107 0014 	add.w	r0, r7, #20
 8001cdc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001ce0:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001ce4:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001ce8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001cec:	6839      	ldr	r1, [r7, #0]
 8001cee:	9101      	str	r1, [sp, #4]
 8001cf0:	9600      	str	r6, [sp, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	490c      	ldr	r1, [pc, #48]	; (8001d28 <Display+0xe4>)
 8001cf8:	f00a f84e 	bl	800bd98 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
 8001cfc:	f107 0114 	add.w	r1, r7, #20
 8001d00:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d04:	22c8      	movs	r2, #200	; 0xc8
 8001d06:	4809      	ldr	r0, [pc, #36]	; (8001d2c <Display+0xe8>)
 8001d08:	f005 f8ef 	bl	8006eea <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(10);
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	f006 f9f1 	bl	80080f4 <osDelay>
	  if (identification == 1){
 8001d12:	e7ae      	b.n	8001c72 <Display+0x2e>
 8001d14:	0800fa18 	.word	0x0800fa18
 8001d18:	20004dfc 	.word	0x20004dfc
 8001d1c:	2000021c 	.word	0x2000021c
 8001d20:	20004e00 	.word	0x20004e00
 8001d24:	20004e5c 	.word	0x20004e5c
 8001d28:	0800fa30 	.word	0x0800fa30
 8001d2c:	200050f4 	.word	0x200050f4

08001d30 <IMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IMU */
void IMU(void *argument)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b09c      	sub	sp, #112	; 0x70
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IMU */
	char txBuffer[100]= {};
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	2260      	movs	r2, #96	; 0x60
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f009 fbb5 	bl	800b4b4 <memset>
	sprintf(txBuffer, "Running IMU Task..\n");
 8001d4a:	f107 0308 	add.w	r3, r7, #8
 8001d4e:	4918      	ldr	r1, [pc, #96]	; (8001db0 <IMU+0x80>)
 8001d50:	4618      	mov	r0, r3
 8001d52:	f00a f821 	bl	800bd98 <siprintf>

	uint8_t ID = MPU6050_Init(&hi2c1);
 8001d56:	4817      	ldr	r0, [pc, #92]	; (8001db4 <IMU+0x84>)
 8001d58:	f000 fc7d 	bl	8002656 <MPU6050_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(txBuffer,"Id : %d Initialization Success .. \n", ID);
 8001d62:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001d66:	f107 0308 	add.w	r3, r7, #8
 8001d6a:	4913      	ldr	r1, [pc, #76]	; (8001db8 <IMU+0x88>)
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f00a f813 	bl	800bd98 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, sizeof(txBuffer), 100);
 8001d72:	f107 0108 	add.w	r1, r7, #8
 8001d76:	2364      	movs	r3, #100	; 0x64
 8001d78:	2264      	movs	r2, #100	; 0x64
 8001d7a:	4810      	ldr	r0, [pc, #64]	; (8001dbc <IMU+0x8c>)
 8001d7c:	f005 f8b5 	bl	8006eea <HAL_UART_Transmit>
	//Clearing Buffer
	memset(txBuffer,0,sizeof(txBuffer));
 8001d80:	f107 0308 	add.w	r3, r7, #8
 8001d84:	2264      	movs	r2, #100	; 0x64
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f009 fb93 	bl	800b4b4 <memset>
	osDelay(200);
 8001d8e:	20c8      	movs	r0, #200	; 0xc8
 8001d90:	f006 f9b0 	bl	80080f4 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	//Blocking Until Notified
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f008 fa75 	bl	800a288 <ulTaskNotifyTake>
	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <IMU+0x90>)
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <IMU+0x84>)
 8001da2:	f000 fcd1 	bl	8002748 <MPU6050_Read_Accel>
//	sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\n", MPU6050.Ax, MPU6050.Ay,MPU6050.Az );
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(50);
 8001da6:	2032      	movs	r0, #50	; 0x32
 8001da8:	f006 f9a4 	bl	80080f4 <osDelay>
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8001dac:	e7f2      	b.n	8001d94 <IMU+0x64>
 8001dae:	bf00      	nop
 8001db0:	0800fa6c 	.word	0x0800fa6c
 8001db4:	20004da8 	.word	0x20004da8
 8001db8:	0800fa80 	.word	0x0800fa80
 8001dbc:	200050f4 	.word	0x200050f4
 8001dc0:	20004e00 	.word	0x20004e00

08001dc4 <GPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPS */
void GPS(void *argument)
{
 8001dc4:	b5b0      	push	{r4, r5, r7, lr}
 8001dc6:	f5ad 7d6e 	sub.w	sp, sp, #952	; 0x3b8
 8001dca:	af04      	add	r7, sp, #16
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	6018      	str	r0, [r3, #0]

	  char hH[2]; // hours
	  char mM[2]; // minutes
	  char sS[2]; // seconds

	  uint8_t cnt = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393

	  HAL_UART_Receive_DMA(&huart1, buff, 255);
 8001dd6:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8001dda:	22ff      	movs	r2, #255	; 0xff
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4876      	ldr	r0, [pc, #472]	; (8001fb8 <GPS+0x1f4>)
 8001de0:	f005 f915 	bl	800700e <HAL_UART_Receive_DMA>

	  HAL_UART_Transmit(&huart2, (unsigned char *) "Start\n", 6, 500);
 8001de4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001de8:	2206      	movs	r2, #6
 8001dea:	4974      	ldr	r1, [pc, #464]	; (8001fbc <GPS+0x1f8>)
 8001dec:	4874      	ldr	r0, [pc, #464]	; (8001fc0 <GPS+0x1fc>)
 8001dee:	f005 f87c 	bl	8006eea <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  char txBuffer[200] = {};
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	22c4      	movs	r2, #196	; 0xc4
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f009 fb57 	bl	800b4b4 <memset>
	  sprintf(txBuffer,"\nFlag : %d", flag);
 8001e06:	4b6f      	ldr	r3, [pc, #444]	; (8001fc4 <GPS+0x200>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	496d      	ldr	r1, [pc, #436]	; (8001fc8 <GPS+0x204>)
 8001e12:	4618      	mov	r0, r3
 8001e14:	f009 ffc0 	bl	800bd98 <siprintf>
	  //	  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
	  if (flag) {
 8001e18:	4b6a      	ldr	r3, [pc, #424]	; (8001fc4 <GPS+0x200>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 82b3 	beq.w	8002388 <GPS+0x5c4>
	  	memset(buffStr, 0, 255);
 8001e22:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001e26:	22ff      	movs	r2, #255	; 0xff
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f009 fb42 	bl	800b4b4 <memset>
	  	sprintf(buffStr, "%s", buff);
 8001e30:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8001e34:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001e38:	4964      	ldr	r1, [pc, #400]	; (8001fcc <GPS+0x208>)
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f009 ffac 	bl	800bd98 <siprintf>
	  //HAL_UART_Transmit(&huart2, (uint8_t *)buffStr, sizeof(buffStr), 70);
	  // splitting the buffStr by the "\n" delimiter with the strsep() C function
	  // see http://www.manpagez.com/man/3/strsep/
	  	char *token, *string;
	  	// actually splitting the string by "\n" delimiter
	  	string = strdup(buffStr);
 8001e40:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001e44:	4618      	mov	r0, r3
 8001e46:	f009 ffeb 	bl	800be20 <strdup>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e52:	601a      	str	r2, [r3, #0]
	  	while ((token = strsep(&string, "\n")) != NULL) {
 8001e54:	e26e      	b.n	8002334 <GPS+0x570>
	  		memset(nmeaSnt, 0, 80);
 8001e56:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001e5a:	2250      	movs	r2, #80	; 0x50
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f009 fb28 	bl	800b4b4 <memset>
	  		sprintf(nmeaSnt, "%s", token);
 8001e64:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001e68:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8001e6c:	4957      	ldr	r1, [pc, #348]	; (8001fcc <GPS+0x208>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f009 ff92 	bl	800bd98 <siprintf>

	  		memset(txBuffer,0,sizeof(txBuffer));
 8001e74:	f107 030c 	add.w	r3, r7, #12
 8001e78:	22c8      	movs	r2, #200	; 0xc8
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f009 fb19 	bl	800b4b4 <memset>
	  //HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 100);
	  // selecting only $GNGLL sentences, combined GPS and GLONAS
	  // on my GPS sensor this good NMEA sentence is always 50 characters
	  		if ((strstr(nmeaSnt, "$GPGGA") != 0) && (strlen(nmeaSnt) > 49) &&(strlen(nmeaSnt) <90) && strstr(nmeaSnt, "*") != 0) {
 8001e82:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001e86:	4952      	ldr	r1, [pc, #328]	; (8001fd0 <GPS+0x20c>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f009 ffeb 	bl	800be64 <strstr>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 824f 	beq.w	8002334 <GPS+0x570>
 8001e96:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe f9a0 	bl	80001e0 <strlen>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b31      	cmp	r3, #49	; 0x31
 8001ea4:	f240 8246 	bls.w	8002334 <GPS+0x570>
 8001ea8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe f997 	bl	80001e0 <strlen>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b59      	cmp	r3, #89	; 0x59
 8001eb6:	f200 823d 	bhi.w	8002334 <GPS+0x570>
 8001eba:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001ebe:	212a      	movs	r1, #42	; 0x2a
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f009 ff98 	bl	800bdf6 <strchr>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8233 	beq.w	8002334 <GPS+0x570>
	  			rawSum = strstr(nmeaSnt, "*");
 8001ece:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001ed2:	212a      	movs	r1, #42	; 0x2a
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f009 ff8e 	bl	800bdf6 <strchr>
 8001eda:	f8c7 0384 	str.w	r0, [r7, #900]	; 0x384
	  			memcpy(smNmbr, &rawSum[1], 2);
 8001ede:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001eec:	801a      	strh	r2, [r3, #0]
	  			smNmbr[2] = '\0';
 8001eee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	709a      	strb	r2, [r3, #2]

	  			uint8_t intSum = nmea0183_checksum(nmeaSnt);
 8001ef6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fb78 	bl	80015f0 <nmea0183_checksum>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f887 3383 	strb.w	r3, [r7, #899]	; 0x383
	  			char hex[2];
	  			// "%X" unsigned hexadecimal integer (capital letters)
	  			sprintf(hex, "%X", intSum);
 8001f06:	f897 2383 	ldrb.w	r2, [r7, #899]	; 0x383
 8001f0a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f0e:	4931      	ldr	r1, [pc, #196]	; (8001fd4 <GPS+0x210>)
 8001f10:	4618      	mov	r0, r3
 8001f12:	f009 ff41 	bl	800bd98 <siprintf>

	  			// checksum data verification, if OK, then we can really trust
	  			// the data in the the NMEA sentence
	  			if (strstr(smNmbr, hex) != NULL) {
 8001f16:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8001f1a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f009 ff9f 	bl	800be64 <strstr>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 8203 	beq.w	8002334 <GPS+0x570>
	  				cnt = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
	  //			sprintf(txBuffer,"pV : %s\n", pV);
	  			// splitting the good NMEA sentence into the tokens by the comma delimiter
	  				for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8001f34:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f38:	4927      	ldr	r1, [pc, #156]	; (8001fd8 <GPS+0x214>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f00a fdde 	bl	800cafc <strtok>
 8001f40:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
 8001f44:	e05d      	b.n	8002002 <GPS+0x23e>
	  					memset(txBuffer,0,sizeof(txBuffer));
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	22c8      	movs	r2, #200	; 0xc8
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f009 fab0 	bl	800b4b4 <memset>
//	  					sprintf(txBuffer,"pV[%d] : %s\n",cnt, pV);
	  //				HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 100);
	  					switch (cnt) {
 8001f54:	f897 3393 	ldrb.w	r3, [r7, #915]	; 0x393
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d846      	bhi.n	8001fec <GPS+0x228>
 8001f5e:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <GPS+0x1a0>)
 8001f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f64:	08001f79 	.word	0x08001f79
 8001f68:	08001f89 	.word	0x08001f89
 8001f6c:	08001f99 	.word	0x08001f99
 8001f70:	08001fa9 	.word	0x08001fa9
 8001f74:	08001fdd 	.word	0x08001fdd
	  						case 1:
	  							  utcRaw = strdup(pV);
 8001f78:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8001f7c:	f009 ff50 	bl	800be20 <strdup>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
	  							  break;
 8001f86:	e031      	b.n	8001fec <GPS+0x228>
	  						case 2:
	  							  latRaw = strdup(pV);
 8001f88:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8001f8c:	f009 ff48 	bl	800be20 <strdup>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
	  							  break;
 8001f96:	e029      	b.n	8001fec <GPS+0x228>
	  						case 3:
	  							  hemNS = strdup(pV);
 8001f98:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8001f9c:	f009 ff40 	bl	800be20 <strdup>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
	  							  break;
 8001fa6:	e021      	b.n	8001fec <GPS+0x228>
	  						case 4:
	  							  lonRaw = strdup(pV);
 8001fa8:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8001fac:	f009 ff38 	bl	800be20 <strdup>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
	  							  break;
 8001fb6:	e019      	b.n	8001fec <GPS+0x228>
 8001fb8:	20004fd0 	.word	0x20004fd0
 8001fbc:	0800faa4 	.word	0x0800faa4
 8001fc0:	200050f4 	.word	0x200050f4
 8001fc4:	20000230 	.word	0x20000230
 8001fc8:	0800faac 	.word	0x0800faac
 8001fcc:	0800fab8 	.word	0x0800fab8
 8001fd0:	0800fabc 	.word	0x0800fabc
 8001fd4:	0800fac4 	.word	0x0800fac4
 8001fd8:	0800fac8 	.word	0x0800fac8
	  						case 5:
	  							  hemEW = strdup(pV);
 8001fdc:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8001fe0:	f009 ff1e 	bl	800be20 <strdup>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
	  							  break;
 8001fea:	bf00      	nop
	  					}
	  					cnt++;
 8001fec:	f897 3393 	ldrb.w	r3, [r7, #915]	; 0x393
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
	  				for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8001ff6:	49d8      	ldr	r1, [pc, #864]	; (8002358 <GPS+0x594>)
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f00a fd7f 	bl	800cafc <strtok>
 8001ffe:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
 8002002:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d19d      	bne.n	8001f46 <GPS+0x182>
	  				} //end for

	  				//Converting Longitude and Latitude into Float
	  				latitude = atof(latRaw);
 800200a:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 800200e:	f009 fa15 	bl	800b43c <atof>
 8002012:	ec53 2b10 	vmov	r2, r3, d0
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
 800201a:	f7fe fded 	bl	8000bf8 <__aeabi_d2f>
 800201e:	4603      	mov	r3, r0
 8002020:	4ace      	ldr	r2, [pc, #824]	; (800235c <GPS+0x598>)
 8002022:	6013      	str	r3, [r2, #0]
	  				longitude = atof(lonRaw);
 8002024:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8002028:	f009 fa08 	bl	800b43c <atof>
 800202c:	ec53 2b10 	vmov	r2, r3, d0
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fde0 	bl	8000bf8 <__aeabi_d2f>
 8002038:	4603      	mov	r3, r0
 800203a:	4ac9      	ldr	r2, [pc, #804]	; (8002360 <GPS+0x59c>)
 800203c:	6013      	str	r3, [r2, #0]

	  				if (*hemNS == 'S') {
 800203e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b53      	cmp	r3, #83	; 0x53
 8002046:	d112      	bne.n	800206e <GPS+0x2aa>
	  					latitude  *= -1.0;
 8002048:	4bc4      	ldr	r3, [pc, #784]	; (800235c <GPS+0x598>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fa83 	bl	8000558 <__aeabi_f2d>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
 800205a:	f7fe fdcd 	bl	8000bf8 <__aeabi_d2f>
 800205e:	4603      	mov	r3, r0
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eef1 7a67 	vneg.f32	s15, s15
 8002068:	4bbc      	ldr	r3, [pc, #752]	; (800235c <GPS+0x598>)
 800206a:	edc3 7a00 	vstr	s15, [r3]
	  				}
	  				if (*hemEW == 'W') {
 800206e:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b57      	cmp	r3, #87	; 0x57
 8002076:	d112      	bne.n	800209e <GPS+0x2da>
	  					longitude *= -1.0;
 8002078:	4bb9      	ldr	r3, [pc, #740]	; (8002360 <GPS+0x59c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa6b 	bl	8000558 <__aeabi_f2d>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f7fe fdb5 	bl	8000bf8 <__aeabi_d2f>
 800208e:	4603      	mov	r3, r0
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eef1 7a67 	vneg.f32	s15, s15
 8002098:	4bb1      	ldr	r3, [pc, #708]	; (8002360 <GPS+0x59c>)
 800209a:	edc3 7a00 	vstr	s15, [r3]
	  				}
	  				char * token;
	  				//Get LatitudeDegree
	  				token = strtok(latRaw, ".");
 800209e:	49b1      	ldr	r1, [pc, #708]	; (8002364 <GPS+0x5a0>)
 80020a0:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 80020a4:	f00a fd2a 	bl	800cafc <strtok>
 80020a8:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(latDg, 0, sizeof(latDg));
 80020ac:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80020b0:	220a      	movs	r2, #10
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f009 f9fd 	bl	800b4b4 <memset>
	  //			memcpy(latDg, token, strlen(token));
	  				sprintf(latDg, token);
 80020ba:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80020be:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80020c2:	4618      	mov	r0, r3
 80020c4:	f009 fe68 	bl	800bd98 <siprintf>
	  				//Get Minutes
	  				token = strtok(NULL,".");
 80020c8:	49a6      	ldr	r1, [pc, #664]	; (8002364 <GPS+0x5a0>)
 80020ca:	2000      	movs	r0, #0
 80020cc:	f00a fd16 	bl	800cafc <strtok>
 80020d0:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(latMS, 0, sizeof(latMS));
 80020d4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80020d8:	2214      	movs	r2, #20
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f009 f9e9 	bl	800b4b4 <memset>
	  //			memcpy(latMS, token, strlen(token));
	  				sprintf(latMS, token);
 80020e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80020e6:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80020ea:	4618      	mov	r0, r3
 80020ec:	f009 fe54 	bl	800bd98 <siprintf>
	  //			latMS[7] = '.';

	  				//Get longitude Degree
	  				float degrees = trunc(latitude / 100.0f);
 80020f0:	4b9a      	ldr	r3, [pc, #616]	; (800235c <GPS+0x598>)
 80020f2:	edd3 7a00 	vldr	s15, [r3]
 80020f6:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8002368 <GPS+0x5a4>
 80020fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020fe:	ee16 0a90 	vmov	r0, s13
 8002102:	f7fe fa29 	bl	8000558 <__aeabi_f2d>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	ec43 2b10 	vmov	d0, r2, r3
 800210e:	f00d fc15 	bl	800f93c <trunc>
 8002112:	ec53 2b10 	vmov	r2, r3, d0
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f7fe fd6d 	bl	8000bf8 <__aeabi_d2f>
 800211e:	4603      	mov	r3, r0
 8002120:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
	  				float minutes = latitude - (degrees * 100.0f);
 8002124:	4b8d      	ldr	r3, [pc, #564]	; (800235c <GPS+0x598>)
 8002126:	ed93 7a00 	vldr	s14, [r3]
 800212a:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 800212e:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8002368 <GPS+0x5a4>
 8002132:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800213a:	edc7 7add 	vstr	s15, [r7, #884]	; 0x374
	  				latitude = degrees + (minutes / 60.0f);
 800213e:	edd7 7add 	vldr	s15, [r7, #884]	; 0x374
 8002142:	eddf 6a8a 	vldr	s13, [pc, #552]	; 800236c <GPS+0x5a8>
 8002146:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800214a:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 800214e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002152:	4b82      	ldr	r3, [pc, #520]	; (800235c <GPS+0x598>)
 8002154:	edc3 7a00 	vstr	s15, [r3]

	  				degrees = trunc(longitude / 100.0f);
 8002158:	4b81      	ldr	r3, [pc, #516]	; (8002360 <GPS+0x59c>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002368 <GPS+0x5a4>
 8002162:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002166:	ee16 0a90 	vmov	r0, s13
 800216a:	f7fe f9f5 	bl	8000558 <__aeabi_f2d>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	ec43 2b10 	vmov	d0, r2, r3
 8002176:	f00d fbe1 	bl	800f93c <trunc>
 800217a:	ec53 2b10 	vmov	r2, r3, d0
 800217e:	4610      	mov	r0, r2
 8002180:	4619      	mov	r1, r3
 8002182:	f7fe fd39 	bl	8000bf8 <__aeabi_d2f>
 8002186:	4603      	mov	r3, r0
 8002188:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
	  				minutes = longitude - (degrees * 100.0f);
 800218c:	4b74      	ldr	r3, [pc, #464]	; (8002360 <GPS+0x59c>)
 800218e:	ed93 7a00 	vldr	s14, [r3]
 8002192:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 8002196:	eddf 6a74 	vldr	s13, [pc, #464]	; 8002368 <GPS+0x5a4>
 800219a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800219e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a2:	edc7 7add 	vstr	s15, [r7, #884]	; 0x374
	  				longitude = degrees + (minutes / 60.0f);
 80021a6:	edd7 7add 	vldr	s15, [r7, #884]	; 0x374
 80021aa:	eddf 6a70 	vldr	s13, [pc, #448]	; 800236c <GPS+0x5a8>
 80021ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021b2:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 80021b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ba:	4b69      	ldr	r3, [pc, #420]	; (8002360 <GPS+0x59c>)
 80021bc:	edc3 7a00 	vstr	s15, [r3]


	  				token = strtok(lonRaw, ".");
 80021c0:	4968      	ldr	r1, [pc, #416]	; (8002364 <GPS+0x5a0>)
 80021c2:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 80021c6:	f00a fc99 	bl	800cafc <strtok>
 80021ca:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(lonDg, 0, sizeof(lonDg));
 80021ce:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021d2:	220a      	movs	r2, #10
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f009 f96c 	bl	800b4b4 <memset>
	  				memcpy(lonDg, token, strlen(token));
 80021dc:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 80021e0:	f7fd fffe 	bl	80001e0 <strlen>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021ea:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80021ee:	4618      	mov	r0, r3
 80021f0:	f009 f952 	bl	800b498 <memcpy>

	  				token = strtok(NULL, ".");
 80021f4:	495b      	ldr	r1, [pc, #364]	; (8002364 <GPS+0x5a0>)
 80021f6:	2000      	movs	r0, #0
 80021f8:	f00a fc80 	bl	800cafc <strtok>
 80021fc:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(lonMS, 0, sizeof(lonMS));
 8002200:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002204:	220a      	movs	r2, #10
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f009 f953 	bl	800b4b4 <memset>
	  				memcpy(lonMS, token, strlen(token));
 800220e:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 8002212:	f7fd ffe5 	bl	80001e0 <strlen>
 8002216:	4602      	mov	r2, r0
 8002218:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800221c:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8002220:	4618      	mov	r0, r3
 8002222:	f009 f939 	bl	800b498 <memcpy>

	  				memset(txBuffer,0,sizeof(txBuffer));
 8002226:	f107 030c 	add.w	r3, r7, #12
 800222a:	22c8      	movs	r2, #200	; 0xc8
 800222c:	2100      	movs	r1, #0
 800222e:	4618      	mov	r0, r3
 8002230:	f009 f940 	bl	800b4b4 <memset>
	  				sprintf(txBuffer, "latDg : %s latMs : %s lonDg : %s lonMs : %s\n",latDg,latMS,lonDg,lonMS );
 8002234:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8002238:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800223c:	f107 000c 	add.w	r0, r7, #12
 8002240:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	460b      	mov	r3, r1
 800224e:	4948      	ldr	r1, [pc, #288]	; (8002370 <GPS+0x5ac>)
 8002250:	f009 fda2 	bl	800bd98 <siprintf>
 8002254:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29a      	uxth	r2, r3
	  //		  HAL_UART_Transmit(&huart2, (unsigned char *)txBuffer, sizeof(txBuffer), 100);

	  					  //converting the UTC time in the hh:mm:ss format
	  				memcpy(hH, &utcRaw[0], 2);
 800225c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002260:	801a      	strh	r2, [r3, #0]
	  				hH[2] = '\0';
 8002262:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002266:	2200      	movs	r2, #0
 8002268:	709a      	strb	r2, [r3, #2]

	  				memcpy(mM, &utcRaw[2], 2);
 800226a:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 800226e:	3302      	adds	r3, #2
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	b29a      	uxth	r2, r3
 8002274:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002278:	801a      	strh	r2, [r3, #0]
	  				mM[2] = '\0';
 800227a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800227e:	2200      	movs	r2, #0
 8002280:	709a      	strb	r2, [r3, #2]

	  				memcpy(sS, &utcRaw[4], 2);
 8002282:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8002286:	3304      	adds	r3, #4
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	b29a      	uxth	r2, r3
 800228c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002290:	801a      	strh	r2, [r3, #0]
	  				sS[2] = '\0';
 8002292:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002296:	2200      	movs	r2, #0
 8002298:	709a      	strb	r2, [r3, #2]
//	  				float latDg_f = atof(latDg)/100.0;
//	  				float latMS_f = atof(latMS)/60.0;
//	  				float lonDg_f = atof(lonDg)/100.0;
//	  				float lonMS_f = atof(lonMS)/60.0;

	  				strcpy(strUTC, hH);
 800229a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800229e:	4619      	mov	r1, r3
 80022a0:	4834      	ldr	r0, [pc, #208]	; (8002374 <GPS+0x5b0>)
 80022a2:	f009 fdb5 	bl	800be10 <strcpy>
	  				strcat(strUTC, ":");
 80022a6:	4833      	ldr	r0, [pc, #204]	; (8002374 <GPS+0x5b0>)
 80022a8:	f7fd ff9a 	bl	80001e0 <strlen>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461a      	mov	r2, r3
 80022b0:	4b30      	ldr	r3, [pc, #192]	; (8002374 <GPS+0x5b0>)
 80022b2:	4413      	add	r3, r2
 80022b4:	4930      	ldr	r1, [pc, #192]	; (8002378 <GPS+0x5b4>)
 80022b6:	461a      	mov	r2, r3
 80022b8:	460b      	mov	r3, r1
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	8013      	strh	r3, [r2, #0]
	  				strcat(strUTC, mM);
 80022be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022c2:	4619      	mov	r1, r3
 80022c4:	482b      	ldr	r0, [pc, #172]	; (8002374 <GPS+0x5b0>)
 80022c6:	f009 fd87 	bl	800bdd8 <strcat>
	  				strcat(strUTC, ":");
 80022ca:	482a      	ldr	r0, [pc, #168]	; (8002374 <GPS+0x5b0>)
 80022cc:	f7fd ff88 	bl	80001e0 <strlen>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <GPS+0x5b0>)
 80022d6:	4413      	add	r3, r2
 80022d8:	4927      	ldr	r1, [pc, #156]	; (8002378 <GPS+0x5b4>)
 80022da:	461a      	mov	r2, r3
 80022dc:	460b      	mov	r3, r1
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	8013      	strh	r3, [r2, #0]
	  				strcat(strUTC, sS);
 80022e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022e6:	4619      	mov	r1, r3
 80022e8:	4822      	ldr	r0, [pc, #136]	; (8002374 <GPS+0x5b0>)
 80022ea:	f009 fd75 	bl	800bdd8 <strcat>
	  				strUTC[8] = '\0';
 80022ee:	4b21      	ldr	r3, [pc, #132]	; (8002374 <GPS+0x5b0>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	721a      	strb	r2, [r3, #8]

	  				memset(txBuffer,0,sizeof(txBuffer));
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	22c8      	movs	r2, #200	; 0xc8
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f009 f8d9 	bl	800b4b4 <memset>
	  				sprintf(txBuffer, "Latitude : %f Longitude : %f UTC : %s\n",latitude,longitude, strUTC);
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <GPS+0x598>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe f926 	bl	8000558 <__aeabi_f2d>
 800230c:	4604      	mov	r4, r0
 800230e:	460d      	mov	r5, r1
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <GPS+0x59c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f91f 	bl	8000558 <__aeabi_f2d>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	f107 000c 	add.w	r0, r7, #12
 8002322:	4914      	ldr	r1, [pc, #80]	; (8002374 <GPS+0x5b0>)
 8002324:	9102      	str	r1, [sp, #8]
 8002326:	e9cd 2300 	strd	r2, r3, [sp]
 800232a:	4622      	mov	r2, r4
 800232c:	462b      	mov	r3, r5
 800232e:	4913      	ldr	r1, [pc, #76]	; (800237c <GPS+0x5b8>)
 8002330:	f009 fd32 	bl	800bd98 <siprintf>
	  	while ((token = strsep(&string, "\n")) != NULL) {
 8002334:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002338:	4911      	ldr	r1, [pc, #68]	; (8002380 <GPS+0x5bc>)
 800233a:	4618      	mov	r0, r3
 800233c:	f009 fd8d 	bl	800be5a <strsep>
 8002340:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
 8002344:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002348:	2b00      	cmp	r3, #0
 800234a:	f47f ad84 	bne.w	8001e56 <GPS+0x92>
//	  				HAL_UART_Transmit(&huart2, (unsigned char *)txBuffer, sizeof(txBuffer), 100);

	  			} //end of the chekcsum data verification
	  		} //end of %GPPGA Sentences selection
	  	}// end of splotting the buffstr by the "\n" delimiter with strsep() c function
	  	flag = 0;
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <GPS+0x5c0>)
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
 8002354:	e025      	b.n	80023a2 <GPS+0x5de>
 8002356:	bf00      	nop
 8002358:	0800fac8 	.word	0x0800fac8
 800235c:	20000220 	.word	0x20000220
 8002360:	20000224 	.word	0x20000224
 8002364:	0800facc 	.word	0x0800facc
 8002368:	42c80000 	.word	0x42c80000
 800236c:	42700000 	.word	0x42700000
 8002370:	0800fad0 	.word	0x0800fad0
 8002374:	20000228 	.word	0x20000228
 8002378:	0800fb00 	.word	0x0800fb00
 800237c:	0800fb04 	.word	0x0800fb04
 8002380:	0800fb2c 	.word	0x0800fb2c
 8002384:	20000230 	.word	0x20000230
	  }
	  else {
		  sprintf(txBuffer," GPS no signal..");
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	4907      	ldr	r1, [pc, #28]	; (80023ac <GPS+0x5e8>)
 800238e:	4618      	mov	r0, r3
 8002390:	f009 fd02 	bl	800bd98 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *) txBuffer, sizeof(txBuffer), 100);
 8002394:	f107 010c 	add.w	r1, r7, #12
 8002398:	2364      	movs	r3, #100	; 0x64
 800239a:	22c8      	movs	r2, #200	; 0xc8
 800239c:	4804      	ldr	r0, [pc, #16]	; (80023b0 <GPS+0x5ec>)
 800239e:	f004 fda4 	bl	8006eea <HAL_UART_Transmit>
	  }
	  osDelay(500);
 80023a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023a6:	f005 fea5 	bl	80080f4 <osDelay>
  {
 80023aa:	e522      	b.n	8001df2 <GPS+0x2e>
 80023ac:	0800fb30 	.word	0x0800fb30
 80023b0:	200050f4 	.word	0x200050f4

080023b4 <RFID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RFID */
void RFID(void *argument)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b0a2      	sub	sp, #136	; 0x88
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RFID */
	char txBuffer [100] ={};
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	f107 031c 	add.w	r3, r7, #28
 80023c4:	2260      	movs	r2, #96	; 0x60
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f009 f873 	bl	800b4b4 <memset>
	u_char status, checksum1, cardstr[MAX_LEN];
	MFRC522_Init();
 80023ce:	f7fe fec5 	bl	800115c <MFRC522_Init>
	status = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	while (status == 0){
 80023d8:	e018      	b.n	800240c <RFID+0x58>
		status = Read_MFRC522(VersionReg);
 80023da:	2037      	movs	r0, #55	; 0x37
 80023dc:	f7fe fe3e 	bl	800105c <Read_MFRC522>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		sprintf(txBuffer,"Running RC522 ver :%x\n", status);
 80023e6:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80023ea:	f107 0318 	add.w	r3, r7, #24
 80023ee:	4949      	ldr	r1, [pc, #292]	; (8002514 <RFID+0x160>)
 80023f0:	4618      	mov	r0, r3
 80023f2:	f009 fcd1 	bl	800bd98 <siprintf>
		HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
 80023f6:	f107 0118 	add.w	r1, r7, #24
 80023fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80023fe:	2264      	movs	r2, #100	; 0x64
 8002400:	4845      	ldr	r0, [pc, #276]	; (8002518 <RFID+0x164>)
 8002402:	f004 fd72 	bl	8006eea <HAL_UART_Transmit>
		osDelay(100);
 8002406:	2064      	movs	r0, #100	; 0x64
 8002408:	f005 fe74 	bl	80080f4 <osDelay>
	while (status == 0){
 800240c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0e2      	beq.n	80023da <RFID+0x26>
	}
	//Printing to PC
	memset(txBuffer,0,sizeof(txBuffer));
 8002414:	f107 0318 	add.w	r3, r7, #24
 8002418:	2264      	movs	r2, #100	; 0x64
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f009 f849 	bl	800b4b4 <memset>
	status = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	osDelay(200);
 8002428:	20c8      	movs	r0, #200	; 0xc8
 800242a:	f005 fe63 	bl	80080f4 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexSPI1Handle, portMAX_DELAY);
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <RFID+0x168>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f04f 31ff 	mov.w	r1, #4294967295
 8002436:	4618      	mov	r0, r3
 8002438:	f005 fefd 	bl	8008236 <osMutexAcquire>
	  status = MFRC522_Request(PICC_REQIDL, cardstr);
 800243c:	f107 0308 	add.w	r3, r7, #8
 8002440:	4619      	mov	r1, r3
 8002442:	2026      	movs	r0, #38	; 0x26
 8002444:	f7fe feb6 	bl	80011b4 <MFRC522_Request>
 8002448:	4603      	mov	r3, r0
 800244a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	  if(status == MI_OK){
 800244e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002452:	2b00      	cmp	r3, #0
 8002454:	d145      	bne.n	80024e2 <RFID+0x12e>
		  sprintf(txBuffer,"Card detected ..\n");
 8002456:	f107 0318 	add.w	r3, r7, #24
 800245a:	4931      	ldr	r1, [pc, #196]	; (8002520 <RFID+0x16c>)
 800245c:	4618      	mov	r0, r3
 800245e:	f009 fc9b 	bl	800bd98 <siprintf>
		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 8002462:	f107 0118 	add.w	r1, r7, #24
 8002466:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800246a:	2264      	movs	r2, #100	; 0x64
 800246c:	482a      	ldr	r0, [pc, #168]	; (8002518 <RFID+0x164>)
 800246e:	f004 fd3c 	bl	8006eea <HAL_UART_Transmit>
//		  sprintf(txBuffer,"Card Type : %x %x %x\n", cardstr[0],cardstr[1],cardstr[2]);
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
		  memset(txBuffer,0,sizeof(txBuffer));
 8002472:	f107 0318 	add.w	r3, r7, #24
 8002476:	2264      	movs	r2, #100	; 0x64
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f009 f81a 	bl	800b4b4 <memset>

		  //Anti-collision, return card serial number == 4 bytes
		  status = MFRC522_Anticoll(cardstr);
 8002480:	f107 0308 	add.w	r3, r7, #8
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe ff83 	bl	8001390 <MFRC522_Anticoll>
 800248a:	4603      	mov	r3, r0
 800248c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  if (status == MI_OK){
 8002490:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002494:	2b00      	cmp	r3, #0
 8002496:	d133      	bne.n	8002500 <RFID+0x14c>
			  checksum1 = cardstr[0] ^ cardstr[1] ^ cardstr[2] ^ cardstr[3];
 8002498:	7a3a      	ldrb	r2, [r7, #8]
 800249a:	7a7b      	ldrb	r3, [r7, #9]
 800249c:	4053      	eors	r3, r2
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	7abb      	ldrb	r3, [r7, #10]
 80024a2:	4053      	eors	r3, r2
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	7afb      	ldrb	r3, [r7, #11]
 80024a8:	4053      	eors	r3, r2
 80024aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  for(int i = 0; i <4 ;i++){
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024b4:	e010      	b.n	80024d8 <RFID+0x124>
				  UID[i]=cardstr[i];
 80024b6:	f107 0208 	add.w	r2, r7, #8
 80024ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024be:	4413      	add	r3, r2
 80024c0:	7819      	ldrb	r1, [r3, #0]
 80024c2:	4a18      	ldr	r2, [pc, #96]	; (8002524 <RFID+0x170>)
 80024c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024c8:	4413      	add	r3, r2
 80024ca:	460a      	mov	r2, r1
 80024cc:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i <4 ;i++){
 80024ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024d2:	3301      	adds	r3, #1
 80024d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024dc:	2b03      	cmp	r3, #3
 80024de:	ddea      	ble.n	80024b6 <RFID+0x102>
 80024e0:	e00e      	b.n	8002500 <RFID+0x14c>
//			  sprintf(txBuffer,"UID: %x %x %x %x\n\r",(u_char)cardstr[0], (u_char)cardstr[1],(u_char)cardstr[2],(u_char)cardstr[3]);
//			  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
		  }
	  }
	  else {
		  memset(txBuffer,0,sizeof(txBuffer));
 80024e2:	f107 0318 	add.w	r3, r7, #24
 80024e6:	2264      	movs	r2, #100	; 0x64
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f008 ffe2 	bl	800b4b4 <memset>
		  sprintf(txBuffer,"Status :%x\n", status);
 80024f0:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80024f4:	f107 0318 	add.w	r3, r7, #24
 80024f8:	490b      	ldr	r1, [pc, #44]	; (8002528 <RFID+0x174>)
 80024fa:	4618      	mov	r0, r3
 80024fc:	f009 fc4c 	bl	800bd98 <siprintf>
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
		  //		  sprintf(txBuffer,"Finding ..\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
	  }
	  osMutexRelease(MutexSPI1Handle);
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <RFID+0x168>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f005 fee1 	bl	80082cc <osMutexRelease>
    osDelay(100);
 800250a:	2064      	movs	r0, #100	; 0x64
 800250c:	f005 fdf2 	bl	80080f4 <osDelay>
	  osMutexAcquire(MutexSPI1Handle, portMAX_DELAY);
 8002510:	e78d      	b.n	800242e <RFID+0x7a>
 8002512:	bf00      	nop
 8002514:	0800fb44 	.word	0x0800fb44
 8002518:	200050f4 	.word	0x200050f4
 800251c:	20004e58 	.word	0x20004e58
 8002520:	0800fb5c 	.word	0x0800fb5c
 8002524:	2000021c 	.word	0x2000021c
 8002528:	0800fb70 	.word	0x0800fb70
 800252c:	00000000 	.word	0x00000000

08002530 <ADCProcesing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADCProcesing */
void ADCProcesing(void *argument)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b09c      	sub	sp, #112	; 0x70
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADCProcesing */
	char txBuffer[100] = {};
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	f107 030c 	add.w	r3, r7, #12
 8002540:	2260      	movs	r2, #96	; 0x60
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f008 ffb5 	bl	800b4b4 <memset>
	HAL_ADC_Start_DMA(&hadc1, buffer, 3);
 800254a:	2203      	movs	r2, #3
 800254c:	492c      	ldr	r1, [pc, #176]	; (8002600 <ADCProcesing+0xd0>)
 800254e:	482d      	ldr	r0, [pc, #180]	; (8002604 <ADCProcesing+0xd4>)
 8002550:	f000 fdca 	bl	80030e8 <HAL_ADC_Start_DMA>
	sprintf(txBuffer,"ADC Intialization..\n");
 8002554:	f107 0308 	add.w	r3, r7, #8
 8002558:	492b      	ldr	r1, [pc, #172]	; (8002608 <ADCProcesing+0xd8>)
 800255a:	4618      	mov	r0, r3
 800255c:	f009 fc1c 	bl	800bd98 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 8002560:	f107 0108 	add.w	r1, r7, #8
 8002564:	f04f 33ff 	mov.w	r3, #4294967295
 8002568:	2264      	movs	r2, #100	; 0x64
 800256a:	4828      	ldr	r0, [pc, #160]	; (800260c <ADCProcesing+0xdc>)
 800256c:	f004 fcbd 	bl	8006eea <HAL_UART_Transmit>
	/* Initialize RC Filter */
	RCFilter_Init(&rcFiltFuel, 5.0f, 100.0f);
 8002570:	eddf 0a27 	vldr	s1, [pc, #156]	; 8002610 <ADCProcesing+0xe0>
 8002574:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002578:	4826      	ldr	r0, [pc, #152]	; (8002614 <ADCProcesing+0xe4>)
 800257a:	f7fe ff49 	bl	8001410 <RCFilter_Init>

	/*Initialize Moving Average Filter*/
	MovAvgFilter_init(&MAFiltFuel);
 800257e:	4826      	ldr	r0, [pc, #152]	; (8002618 <ADCProcesing+0xe8>)
 8002580:	f7fe ffc5 	bl	800150e <MovAvgFilter_init>
	/* Start ADC */
	HAL_ADC_Start_DMA(&hadc1, buffer, 3);
 8002584:	2203      	movs	r2, #3
 8002586:	491e      	ldr	r1, [pc, #120]	; (8002600 <ADCProcesing+0xd0>)
 8002588:	481e      	ldr	r0, [pc, #120]	; (8002604 <ADCProcesing+0xd4>)
 800258a:	f000 fdad 	bl	80030e8 <HAL_ADC_Start_DMA>
	sprintf(txBuffer,"ADC Intialization Success..\n");
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	4922      	ldr	r1, [pc, #136]	; (800261c <ADCProcesing+0xec>)
 8002594:	4618      	mov	r0, r3
 8002596:	f009 fbff 	bl	800bd98 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 800259a:	f107 0108 	add.w	r1, r7, #8
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
 80025a2:	2264      	movs	r2, #100	; 0x64
 80025a4:	4819      	ldr	r0, [pc, #100]	; (800260c <ADCProcesing+0xdc>)
 80025a6:	f004 fca0 	bl	8006eea <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  float input = (value[1]/ADC_RESOLUTION) * VOLTAGE_REFERENCE;
 80025aa:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <ADCProcesing+0xf0>)
 80025ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80025b0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002624 <ADCProcesing+0xf4>
 80025b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025b8:	ee16 0a90 	vmov	r0, s13
 80025bc:	f7fd ffcc 	bl	8000558 <__aeabi_f2d>
 80025c0:	a30d      	add	r3, pc, #52	; (adr r3, 80025f8 <ADCProcesing+0xc8>)
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	f7fe f81f 	bl	8000608 <__aeabi_dmul>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4610      	mov	r0, r2
 80025d0:	4619      	mov	r1, r3
 80025d2:	f7fe fb11 	bl	8000bf8 <__aeabi_d2f>
 80025d6:	4603      	mov	r3, r0
 80025d8:	66fb      	str	r3, [r7, #108]	; 0x6c
	  RCFilter_Update(&rcFiltFuel, input);
 80025da:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 80025de:	480d      	ldr	r0, [pc, #52]	; (8002614 <ADCProcesing+0xe4>)
 80025e0:	f7fe ff6c 	bl	80014bc <RCFilter_Update>
	  MovAvgFilter_Update(&MAFiltFuel, input);
 80025e4:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 80025e8:	480b      	ldr	r0, [pc, #44]	; (8002618 <ADCProcesing+0xe8>)
 80025ea:	f7fe ffb1 	bl	8001550 <MovAvgFilter_Update>
//	  sprintf(txBuffer,"Raw : %.3f Filtered : %.3f\n", input, rcFiltFuel.out[0]);
//	  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
	  osDelay(100); //100 Hz Sampling Rate
 80025ee:	2064      	movs	r0, #100	; 0x64
 80025f0:	f005 fd80 	bl	80080f4 <osDelay>
  {
 80025f4:	e7d9      	b.n	80025aa <ADCProcesing+0x7a>
 80025f6:	bf00      	nop
 80025f8:	66666666 	.word	0x66666666
 80025fc:	400a6666 	.word	0x400a6666
 8002600:	20005018 	.word	0x20005018
 8002604:	20004f28 	.word	0x20004f28
 8002608:	0800fd4c 	.word	0x0800fd4c
 800260c:	200050f4 	.word	0x200050f4
 8002610:	42c80000 	.word	0x42c80000
 8002614:	20005088 	.word	0x20005088
 8002618:	20004e5c 	.word	0x20004e5c
 800261c:	0800fd64 	.word	0x0800fd64
 8002620:	20005380 	.word	0x20005380
 8002624:	45800000 	.word	0x45800000

08002628 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a04      	ldr	r2, [pc, #16]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800263a:	f000 fccd 	bl	8002fd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40010000 	.word	0x40010000

0800264c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002650:	b672      	cpsid	i
}
 8002652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002654:	e7fe      	b.n	8002654 <Error_Handler+0x8>

08002656 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002656:	b580      	push	{r7, lr}
 8002658:	b088      	sub	sp, #32
 800265a:	af04      	add	r7, sp, #16
 800265c:	6078      	str	r0, [r7, #4]
    uint8_t registerContents;


    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_DEVID_REG, 1, &check, 1, i2c_timeout);
 800265e:	2364      	movs	r3, #100	; 0x64
 8002660:	9302      	str	r3, [sp, #8]
 8002662:	2301      	movs	r3, #1
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	f107 030f 	add.w	r3, r7, #15
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2301      	movs	r3, #1
 800266e:	2200      	movs	r2, #0
 8002670:	21a6      	movs	r1, #166	; 0xa6
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f002 f99c 	bl	80049b0 <HAL_I2C_Mem_Read>
    if (check == 0xE5)  // 0xE5 will be returned by the sensor if everything goes well
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2be5      	cmp	r3, #229	; 0xe5
 800267c:	d15e      	bne.n	800273c <MPU6050_Init+0xe6>
    {
        // power management register 0X2D we should write all 0's to wake the sensor up
        Data = 0x0;
 800267e:	2300      	movs	r3, #0
 8002680:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 8002682:	2364      	movs	r3, #100	; 0x64
 8002684:	9302      	str	r3, [sp, #8]
 8002686:	2301      	movs	r3, #1
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	f107 030e 	add.w	r3, r7, #14
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	2301      	movs	r3, #1
 8002692:	222d      	movs	r2, #45	; 0x2d
 8002694:	21a6      	movs	r1, #166	; 0xa6
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f002 f890 	bl	80047bc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 800269c:	2064      	movs	r0, #100	; 0x64
 800269e:	f000 fcbb 	bl	8003018 <HAL_Delay>

        // Set DATA FORMAT
        Data = 0x0B;
 80026a2:	230b      	movs	r3, #11
 80026a4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_DATA_FORMAT_REG, 1, &Data, 1, i2c_timeout);
 80026a6:	2364      	movs	r3, #100	; 0x64
 80026a8:	9302      	str	r3, [sp, #8]
 80026aa:	2301      	movs	r3, #1
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	f107 030e 	add.w	r3, r7, #14
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	2301      	movs	r3, #1
 80026b6:	2231      	movs	r2, #49	; 0x31
 80026b8:	21a6      	movs	r1, #166	; 0xa6
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f002 f87e 	bl	80047bc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80026c0:	2064      	movs	r0, #100	; 0x64
 80026c2:	f000 fca9 	bl	8003018 <HAL_Delay>

        // Get the current register contents, so we don't clobber the power bit
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 80026c6:	2364      	movs	r3, #100	; 0x64
 80026c8:	9302      	str	r3, [sp, #8]
 80026ca:	2301      	movs	r3, #1
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	f107 030d 	add.w	r3, r7, #13
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2301      	movs	r3, #1
 80026d6:	222c      	movs	r2, #44	; 0x2c
 80026d8:	21a6      	movs	r1, #166	; 0xa6
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f002 f968 	bl	80049b0 <HAL_I2C_Mem_Read>
        registerContents &= 0x10;
 80026e0:	7b7b      	ldrb	r3, [r7, #13]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	737b      	strb	r3, [r7, #13]
        registerContents |= ADXL345_3200HZ;
 80026ea:	7b7b      	ldrb	r3, [r7, #13]
 80026ec:	f043 030f 	orr.w	r3, r3, #15
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	737b      	strb	r3, [r7, #13]

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 80026f4:	2364      	movs	r3, #100	; 0x64
 80026f6:	9302      	str	r3, [sp, #8]
 80026f8:	2301      	movs	r3, #1
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	f107 030d 	add.w	r3, r7, #13
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	2301      	movs	r3, #1
 8002704:	222c      	movs	r2, #44	; 0x2c
 8002706:	21a6      	movs	r1, #166	; 0xa6
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f002 f857 	bl	80047bc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 800270e:	2064      	movs	r0, #100	; 0x64
 8002710:	f000 fc82 	bl	8003018 <HAL_Delay>

        // Set Power Control to Measurement mode
        Data = 0x08;
 8002714:	2308      	movs	r3, #8
 8002716:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 8002718:	2364      	movs	r3, #100	; 0x64
 800271a:	9302      	str	r3, [sp, #8]
 800271c:	2301      	movs	r3, #1
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	f107 030e 	add.w	r3, r7, #14
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2301      	movs	r3, #1
 8002728:	222d      	movs	r2, #45	; 0x2d
 800272a:	21a6      	movs	r1, #166	; 0xa6
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f002 f845 	bl	80047bc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8002732:	2064      	movs	r0, #100	; 0x64
 8002734:	f000 fc70 	bl	8003018 <HAL_Delay>

        return check;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	e000      	b.n	800273e <MPU6050_Init+0xe8>
    }
    return 1;
 800273c:	2301      	movs	r3, #1
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <MPU6050_Read_Accel>:
	}
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, address, 1, &offset, 1, i2c_timeout);

	return offset;
}
void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af04      	add	r7, sp, #16
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8002752:	2364      	movs	r3, #100	; 0x64
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	2306      	movs	r3, #6
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	f107 0308 	add.w	r3, r7, #8
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2301      	movs	r3, #1
 8002762:	2232      	movs	r2, #50	; 0x32
 8002764:	21a6      	movs	r1, #166	; 0xa6
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f002 f922 	bl	80049b0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[1] << 8 | Rec_Data[0]);
 800276c:	7a7b      	ldrb	r3, [r7, #9]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	b21a      	sxth	r2, r3
 8002772:	7a3b      	ldrb	r3, [r7, #8]
 8002774:	b21b      	sxth	r3, r3
 8002776:	4313      	orrs	r3, r2
 8002778:	b21a      	sxth	r2, r3
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[3] << 8 | Rec_Data[2]);
 800277e:	7afb      	ldrb	r3, [r7, #11]
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	b21a      	sxth	r2, r3
 8002784:	7abb      	ldrb	r3, [r7, #10]
 8002786:	b21b      	sxth	r3, r3
 8002788:	4313      	orrs	r3, r2
 800278a:	b21a      	sxth	r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[5] << 8 | Rec_Data[4]);
 8002790:	7b7b      	ldrb	r3, [r7, #13]
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	b21a      	sxth	r2, r3
 8002796:	7b3b      	ldrb	r3, [r7, #12]
 8002798:	b21b      	sxth	r3, r3
 800279a:	4313      	orrs	r3, r2
 800279c:	b21a      	sxth	r2, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW * scale_factor / GRAVITY;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b0:	4b27      	ldr	r3, [pc, #156]	; (8002850 <MPU6050_Read_Accel+0x108>)
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ba:	ee17 0a90 	vmov	r0, s15
 80027be:	f7fd fecb 	bl	8000558 <__aeabi_f2d>
 80027c2:	a321      	add	r3, pc, #132	; (adr r3, 8002848 <MPU6050_Read_Accel+0x100>)
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f7fe f848 	bl	800085c <__aeabi_ddiv>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	6839      	ldr	r1, [r7, #0]
 80027d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW * scale_factor / GRAVITY;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027dc:	ee07 3a90 	vmov	s15, r3
 80027e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <MPU6050_Read_Accel+0x108>)
 80027e6:	edd3 7a00 	vldr	s15, [r3]
 80027ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ee:	ee17 0a90 	vmov	r0, s15
 80027f2:	f7fd feb1 	bl	8000558 <__aeabi_f2d>
 80027f6:	a314      	add	r3, pc, #80	; (adr r3, 8002848 <MPU6050_Read_Accel+0x100>)
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	f7fe f82e 	bl	800085c <__aeabi_ddiv>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	6839      	ldr	r1, [r7, #0]
 8002806:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW * scale_factor / GRAVITY;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002810:	ee07 3a90 	vmov	s15, r3
 8002814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002818:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <MPU6050_Read_Accel+0x108>)
 800281a:	edd3 7a00 	vldr	s15, [r3]
 800281e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002822:	ee17 0a90 	vmov	r0, s15
 8002826:	f7fd fe97 	bl	8000558 <__aeabi_f2d>
 800282a:	a307      	add	r3, pc, #28	; (adr r3, 8002848 <MPU6050_Read_Accel+0x100>)
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	f7fe f814 	bl	800085c <__aeabi_ddiv>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	6839      	ldr	r1, [r7, #0]
 800283a:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	3a92a305 	.word	0x3a92a305
 800284c:	40239d01 	.word	0x40239d01
 8002850:	20000000 	.word	0x20000000

08002854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_MspInit+0x54>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	4a11      	ldr	r2, [pc, #68]	; (80028a8 <HAL_MspInit+0x54>)
 8002864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002868:	6453      	str	r3, [r2, #68]	; 0x44
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <HAL_MspInit+0x54>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_MspInit+0x54>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <HAL_MspInit+0x54>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <HAL_MspInit+0x54>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	210f      	movs	r1, #15
 8002896:	f06f 0001 	mvn.w	r0, #1
 800289a:	f001 f881 	bl	80039a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800

080028ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	; 0x28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a3c      	ldr	r2, [pc, #240]	; (80029bc <HAL_ADC_MspInit+0x110>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d171      	bne.n	80029b2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	4b3b      	ldr	r3, [pc, #236]	; (80029c0 <HAL_ADC_MspInit+0x114>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	4a3a      	ldr	r2, [pc, #232]	; (80029c0 <HAL_ADC_MspInit+0x114>)
 80028d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028dc:	6453      	str	r3, [r2, #68]	; 0x44
 80028de:	4b38      	ldr	r3, [pc, #224]	; (80029c0 <HAL_ADC_MspInit+0x114>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	4b34      	ldr	r3, [pc, #208]	; (80029c0 <HAL_ADC_MspInit+0x114>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a33      	ldr	r2, [pc, #204]	; (80029c0 <HAL_ADC_MspInit+0x114>)
 80028f4:	f043 0304 	orr.w	r3, r3, #4
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b31      	ldr	r3, [pc, #196]	; (80029c0 <HAL_ADC_MspInit+0x114>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <HAL_ADC_MspInit+0x114>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	4a2c      	ldr	r2, [pc, #176]	; (80029c0 <HAL_ADC_MspInit+0x114>)
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	6313      	str	r3, [r2, #48]	; 0x30
 8002916:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <HAL_ADC_MspInit+0x114>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BATT_LEVEL_Pin;
 8002922:	2320      	movs	r3, #32
 8002924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002926:	2303      	movs	r3, #3
 8002928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	4619      	mov	r1, r3
 8002934:	4823      	ldr	r0, [pc, #140]	; (80029c4 <HAL_ADC_MspInit+0x118>)
 8002936:	f001 fc5f 	bl	80041f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ACCU_LEVEL_Pin|FUEL_LEVEL_Pin;
 800293a:	2303      	movs	r3, #3
 800293c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800293e:	2303      	movs	r3, #3
 8002940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002946:	f107 0314 	add.w	r3, r7, #20
 800294a:	4619      	mov	r1, r3
 800294c:	481e      	ldr	r0, [pc, #120]	; (80029c8 <HAL_ADC_MspInit+0x11c>)
 800294e:	f001 fc53 	bl	80041f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_ADC_MspInit+0x120>)
 8002954:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <HAL_ADC_MspInit+0x124>)
 8002956:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002958:	4b1c      	ldr	r3, [pc, #112]	; (80029cc <HAL_ADC_MspInit+0x120>)
 800295a:	2200      	movs	r2, #0
 800295c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800295e:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_ADC_MspInit+0x120>)
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_ADC_MspInit+0x120>)
 8002966:	2200      	movs	r2, #0
 8002968:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800296a:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_ADC_MspInit+0x120>)
 800296c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002970:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <HAL_ADC_MspInit+0x120>)
 8002974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002978:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800297a:	4b14      	ldr	r3, [pc, #80]	; (80029cc <HAL_ADC_MspInit+0x120>)
 800297c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002980:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_ADC_MspInit+0x120>)
 8002984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002988:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_ADC_MspInit+0x120>)
 800298c:	2200      	movs	r2, #0
 800298e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002990:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <HAL_ADC_MspInit+0x120>)
 8002992:	2200      	movs	r2, #0
 8002994:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002996:	480d      	ldr	r0, [pc, #52]	; (80029cc <HAL_ADC_MspInit+0x120>)
 8002998:	f001 f82c 	bl	80039f4 <HAL_DMA_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80029a2:	f7ff fe53 	bl	800264c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a08      	ldr	r2, [pc, #32]	; (80029cc <HAL_ADC_MspInit+0x120>)
 80029aa:	639a      	str	r2, [r3, #56]	; 0x38
 80029ac:	4a07      	ldr	r2, [pc, #28]	; (80029cc <HAL_ADC_MspInit+0x120>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029b2:	bf00      	nop
 80029b4:	3728      	adds	r7, #40	; 0x28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40012000 	.word	0x40012000
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020800 	.word	0x40020800
 80029c8:	40020400 	.word	0x40020400
 80029cc:	20005024 	.word	0x20005024
 80029d0:	40026410 	.word	0x40026410

080029d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a19      	ldr	r2, [pc, #100]	; (8002a58 <HAL_I2C_MspInit+0x84>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d12b      	bne.n	8002a4e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <HAL_I2C_MspInit+0x88>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <HAL_I2C_MspInit+0x88>)
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_I2C_MspInit+0x88>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a12:	23c0      	movs	r3, #192	; 0xc0
 8002a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a16:	2312      	movs	r3, #18
 8002a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a22:	2304      	movs	r3, #4
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a26:	f107 0314 	add.w	r3, r7, #20
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	480c      	ldr	r0, [pc, #48]	; (8002a60 <HAL_I2C_MspInit+0x8c>)
 8002a2e:	f001 fbe3 	bl	80041f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_I2C_MspInit+0x88>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a08      	ldr	r2, [pc, #32]	; (8002a5c <HAL_I2C_MspInit+0x88>)
 8002a3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_I2C_MspInit+0x88>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a4e:	bf00      	nop
 8002a50:	3728      	adds	r7, #40	; 0x28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40005400 	.word	0x40005400
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020400 	.word	0x40020400

08002a64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_SPI_MspInit+0x84>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d12b      	bne.n	8002ade <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_SPI_MspInit+0x88>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <HAL_SPI_MspInit+0x88>)
 8002a90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_SPI_MspInit+0x88>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_SPI_MspInit+0x88>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a10      	ldr	r2, [pc, #64]	; (8002aec <HAL_SPI_MspInit+0x88>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_SPI_MspInit+0x88>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002abe:	23e0      	movs	r3, #224	; 0xe0
 8002ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ace:	2305      	movs	r3, #5
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad2:	f107 0314 	add.w	r3, r7, #20
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <HAL_SPI_MspInit+0x8c>)
 8002ada:	f001 fb8d 	bl	80041f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ade:	bf00      	nop
 8002ae0:	3728      	adds	r7, #40	; 0x28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40013000 	.word	0x40013000
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40020000 	.word	0x40020000

08002af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08c      	sub	sp, #48	; 0x30
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a4e      	ldr	r2, [pc, #312]	; (8002c4c <HAL_UART_MspInit+0x158>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d164      	bne.n	8002be0 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	4b4d      	ldr	r3, [pc, #308]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4a4c      	ldr	r2, [pc, #304]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002b20:	f043 0310 	orr.w	r3, r3, #16
 8002b24:	6453      	str	r3, [r2, #68]	; 0x44
 8002b26:	4b4a      	ldr	r3, [pc, #296]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	4b46      	ldr	r3, [pc, #280]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a45      	ldr	r2, [pc, #276]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b43      	ldr	r3, [pc, #268]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b60:	2307      	movs	r3, #7
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f107 031c 	add.w	r3, r7, #28
 8002b68:	4619      	mov	r1, r3
 8002b6a:	483a      	ldr	r0, [pc, #232]	; (8002c54 <HAL_UART_MspInit+0x160>)
 8002b6c:	f001 fb44 	bl	80041f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002b70:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002b72:	4a3a      	ldr	r2, [pc, #232]	; (8002c5c <HAL_UART_MspInit+0x168>)
 8002b74:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002b76:	4b38      	ldr	r3, [pc, #224]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002b78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b7c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b7e:	4b36      	ldr	r3, [pc, #216]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b84:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b8a:	4b33      	ldr	r3, [pc, #204]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b90:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b92:	4b31      	ldr	r3, [pc, #196]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b98:	4b2f      	ldr	r3, [pc, #188]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002b9e:	4b2e      	ldr	r3, [pc, #184]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ba4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ba6:	4b2c      	ldr	r3, [pc, #176]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bac:	4b2a      	ldr	r3, [pc, #168]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002bb2:	4829      	ldr	r0, [pc, #164]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002bb4:	f000 ff1e 	bl	80039f4 <HAL_DMA_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002bbe:	f7ff fd45 	bl	800264c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a24      	ldr	r2, [pc, #144]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38
 8002bc8:	4a23      	ldr	r2, [pc, #140]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2105      	movs	r1, #5
 8002bd2:	2025      	movs	r0, #37	; 0x25
 8002bd4:	f000 fee4 	bl	80039a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bd8:	2025      	movs	r0, #37	; 0x25
 8002bda:	f000 fefd 	bl	80039d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bde:	e030      	b.n	8002c42 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <HAL_UART_MspInit+0x16c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d12b      	bne.n	8002c42 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	4a17      	ldr	r2, [pc, #92]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a10      	ldr	r2, [pc, #64]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c22:	230c      	movs	r3, #12
 8002c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c32:	2307      	movs	r3, #7
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c36:	f107 031c 	add.w	r3, r7, #28
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4805      	ldr	r0, [pc, #20]	; (8002c54 <HAL_UART_MspInit+0x160>)
 8002c3e:	f001 fadb 	bl	80041f8 <HAL_GPIO_Init>
}
 8002c42:	bf00      	nop
 8002c44:	3730      	adds	r7, #48	; 0x30
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40011000 	.word	0x40011000
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40020000 	.word	0x40020000
 8002c58:	20004f70 	.word	0x20004f70
 8002c5c:	40026440 	.word	0x40026440
 8002c60:	40004400 	.word	0x40004400

08002c64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08c      	sub	sp, #48	; 0x30
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002c74:	2200      	movs	r2, #0
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	2019      	movs	r0, #25
 8002c7a:	f000 fe91 	bl	80039a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c7e:	2019      	movs	r0, #25
 8002c80:	f000 feaa 	bl	80039d8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <HAL_InitTick+0xa0>)
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	4a1d      	ldr	r2, [pc, #116]	; (8002d04 <HAL_InitTick+0xa0>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6453      	str	r3, [r2, #68]	; 0x44
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_InitTick+0xa0>)
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ca0:	f107 0210 	add.w	r2, r7, #16
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 f876 	bl	8005d9c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002cb0:	f003 f860 	bl	8005d74 <HAL_RCC_GetPCLK2Freq>
 8002cb4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb8:	4a13      	ldr	r2, [pc, #76]	; (8002d08 <HAL_InitTick+0xa4>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	0c9b      	lsrs	r3, r3, #18
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <HAL_InitTick+0xa8>)
 8002cc6:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <HAL_InitTick+0xac>)
 8002cc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <HAL_InitTick+0xa8>)
 8002ccc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cd0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002cd2:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <HAL_InitTick+0xa8>)
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <HAL_InitTick+0xa8>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_InitTick+0xa8>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002ce4:	4809      	ldr	r0, [pc, #36]	; (8002d0c <HAL_InitTick+0xa8>)
 8002ce6:	f003 fe33 	bl	8006950 <HAL_TIM_Base_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002cf0:	4806      	ldr	r0, [pc, #24]	; (8002d0c <HAL_InitTick+0xa8>)
 8002cf2:	f003 fe87 	bl	8006a04 <HAL_TIM_Base_Start_IT>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	e000      	b.n	8002cfc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3730      	adds	r7, #48	; 0x30
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40023800 	.word	0x40023800
 8002d08:	431bde83 	.word	0x431bde83
 8002d0c:	2000538c 	.word	0x2000538c
 8002d10:	40010000 	.word	0x40010000

08002d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d18:	e7fe      	b.n	8002d18 <NMI_Handler+0x4>

08002d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d1e:	e7fe      	b.n	8002d1e <HardFault_Handler+0x4>

08002d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d24:	e7fe      	b.n	8002d24 <MemManage_Handler+0x4>

08002d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d2a:	e7fe      	b.n	8002d2a <BusFault_Handler+0x4>

08002d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d30:	e7fe      	b.n	8002d30 <UsageFault_Handler+0x4>

08002d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d44:	4802      	ldr	r0, [pc, #8]	; (8002d50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002d46:	f003 febf 	bl	8006ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	2000538c 	.word	0x2000538c

08002d54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <USART1_IRQHandler+0x10>)
 8002d5a:	f004 f989 	bl	8007070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20004fd0 	.word	0x20004fd0

08002d68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <DMA2_Stream0_IRQHandler+0x10>)
 8002d6e:	f000 ffd9 	bl	8003d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20005024 	.word	0x20005024

08002d7c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <DMA2_Stream2_IRQHandler+0x10>)
 8002d82:	f000 ffcf 	bl	8003d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20004f70 	.word	0x20004f70

08002d90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
	return 1;
 8002d94:	2301      	movs	r3, #1
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <_kill>:

int _kill(int pid, int sig)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002daa:	f008 fb4b 	bl	800b444 <__errno>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2216      	movs	r2, #22
 8002db2:	601a      	str	r2, [r3, #0]
	return -1;
 8002db4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <_exit>:

void _exit (int status)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff ffe7 	bl	8002da0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002dd2:	e7fe      	b.n	8002dd2 <_exit+0x12>

08002dd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	e00a      	b.n	8002dfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002de6:	f3af 8000 	nop.w
 8002dea:	4601      	mov	r1, r0
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	60ba      	str	r2, [r7, #8]
 8002df2:	b2ca      	uxtb	r2, r1
 8002df4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	dbf0      	blt.n	8002de6 <_read+0x12>
	}

return len;
 8002e04:	687b      	ldr	r3, [r7, #4]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b086      	sub	sp, #24
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	e009      	b.n	8002e34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	60ba      	str	r2, [r7, #8]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	3301      	adds	r3, #1
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	dbf1      	blt.n	8002e20 <_write+0x12>
	}
	return len;
 8002e3c:	687b      	ldr	r3, [r7, #4]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <_close>:

int _close(int file)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
	return -1;
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e6e:	605a      	str	r2, [r3, #4]
	return 0;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <_isatty>:

int _isatty(int file)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
	return 1;
 8002e86:	2301      	movs	r3, #1
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
	return 0;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002eb8:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <_sbrk+0x5c>)
 8002eba:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <_sbrk+0x60>)
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ec4:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <_sbrk+0x64>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ecc:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <_sbrk+0x64>)
 8002ece:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <_sbrk+0x68>)
 8002ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ed2:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <_sbrk+0x64>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4413      	add	r3, r2
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d207      	bcs.n	8002ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ee0:	f008 fab0 	bl	800b444 <__errno>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	220c      	movs	r2, #12
 8002ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eea:	f04f 33ff 	mov.w	r3, #4294967295
 8002eee:	e009      	b.n	8002f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ef0:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <_sbrk+0x64>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ef6:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <_sbrk+0x64>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <_sbrk+0x64>)
 8002f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f02:	68fb      	ldr	r3, [r7, #12]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20018000 	.word	0x20018000
 8002f10:	00000400 	.word	0x00000400
 8002f14:	20000234 	.word	0x20000234
 8002f18:	20005898 	.word	0x20005898

08002f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <SystemInit+0x20>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	4a05      	ldr	r2, [pc, #20]	; (8002f3c <SystemInit+0x20>)
 8002f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f44:	480d      	ldr	r0, [pc, #52]	; (8002f7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f46:	490e      	ldr	r1, [pc, #56]	; (8002f80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f48:	4a0e      	ldr	r2, [pc, #56]	; (8002f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f4c:	e002      	b.n	8002f54 <LoopCopyDataInit>

08002f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f52:	3304      	adds	r3, #4

08002f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f58:	d3f9      	bcc.n	8002f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f5a:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f5c:	4c0b      	ldr	r4, [pc, #44]	; (8002f8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f60:	e001      	b.n	8002f66 <LoopFillZerobss>

08002f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f64:	3204      	adds	r2, #4

08002f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f68:	d3fb      	bcc.n	8002f62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f6a:	f7ff ffd7 	bl	8002f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f6e:	f008 fa6f 	bl	800b450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f72:	f7fe fb87 	bl	8001684 <main>
  bx  lr    
 8002f76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f80:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002f84:	08010398 	.word	0x08010398
  ldr r2, =_sbss
 8002f88:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002f8c:	20005894 	.word	0x20005894

08002f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f90:	e7fe      	b.n	8002f90 <ADC_IRQHandler>
	...

08002f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_Init+0x40>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <HAL_Init+0x40>)
 8002f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_Init+0x40>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <HAL_Init+0x40>)
 8002faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <HAL_Init+0x40>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <HAL_Init+0x40>)
 8002fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fbc:	2003      	movs	r0, #3
 8002fbe:	f000 fce4 	bl	800398a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f7ff fe4e 	bl	8002c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fc8:	f7ff fc44 	bl	8002854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023c00 	.word	0x40023c00

08002fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_IncTick+0x20>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_IncTick+0x24>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	4a04      	ldr	r2, [pc, #16]	; (8002ffc <HAL_IncTick+0x24>)
 8002fea:	6013      	str	r3, [r2, #0]
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	2000000c 	.word	0x2000000c
 8002ffc:	200053d4 	.word	0x200053d4

08003000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return uwTick;
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <HAL_GetTick+0x14>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	200053d4 	.word	0x200053d4

08003018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003020:	f7ff ffee 	bl	8003000 <HAL_GetTick>
 8003024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003030:	d005      	beq.n	800303e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <HAL_Delay+0x44>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800303e:	bf00      	nop
 8003040:	f7ff ffde 	bl	8003000 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	429a      	cmp	r2, r3
 800304e:	d8f7      	bhi.n	8003040 <HAL_Delay+0x28>
  {
  }
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	2000000c 	.word	0x2000000c

08003060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e033      	b.n	80030de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff fc14 	bl	80028ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b00      	cmp	r3, #0
 800309c:	d118      	bne.n	80030d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030a6:	f023 0302 	bic.w	r3, r3, #2
 80030aa:	f043 0202 	orr.w	r2, r3, #2
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fa3e 	bl	8003534 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f023 0303 	bic.w	r3, r3, #3
 80030c6:	f043 0201 	orr.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
 80030ce:	e001      	b.n	80030d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_ADC_Start_DMA+0x1e>
 8003102:	2302      	movs	r3, #2
 8003104:	e0ce      	b.n	80032a4 <HAL_ADC_Start_DMA+0x1bc>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d018      	beq.n	800314e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800312c:	4b5f      	ldr	r3, [pc, #380]	; (80032ac <HAL_ADC_Start_DMA+0x1c4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a5f      	ldr	r2, [pc, #380]	; (80032b0 <HAL_ADC_Start_DMA+0x1c8>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	0c9a      	lsrs	r2, r3, #18
 8003138:	4613      	mov	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4413      	add	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003140:	e002      	b.n	8003148 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	3b01      	subs	r3, #1
 8003146:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f9      	bne.n	8003142 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800315c:	d107      	bne.n	800316e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800316c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	f040 8086 	bne.w	800328a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031bc:	d106      	bne.n	80031cc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	f023 0206 	bic.w	r2, r3, #6
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	645a      	str	r2, [r3, #68]	; 0x44
 80031ca:	e002      	b.n	80031d2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031da:	4b36      	ldr	r3, [pc, #216]	; (80032b4 <HAL_ADC_Start_DMA+0x1cc>)
 80031dc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	4a35      	ldr	r2, [pc, #212]	; (80032b8 <HAL_ADC_Start_DMA+0x1d0>)
 80031e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	4a34      	ldr	r2, [pc, #208]	; (80032bc <HAL_ADC_Start_DMA+0x1d4>)
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	4a33      	ldr	r2, [pc, #204]	; (80032c0 <HAL_ADC_Start_DMA+0x1d8>)
 80031f4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80031fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800320e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800321e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	334c      	adds	r3, #76	; 0x4c
 800322a:	4619      	mov	r1, r3
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f000 fc8e 	bl	8003b50 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10f      	bne.n	8003260 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d129      	bne.n	80032a2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800325c:	609a      	str	r2, [r3, #8]
 800325e:	e020      	b.n	80032a2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a17      	ldr	r2, [pc, #92]	; (80032c4 <HAL_ADC_Start_DMA+0x1dc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d11b      	bne.n	80032a2 <HAL_ADC_Start_DMA+0x1ba>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d114      	bne.n	80032a2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	e00b      	b.n	80032a2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f043 0210 	orr.w	r2, r3, #16
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	f043 0201 	orr.w	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000004 	.word	0x20000004
 80032b0:	431bde83 	.word	0x431bde83
 80032b4:	40012300 	.word	0x40012300
 80032b8:	0800372d 	.word	0x0800372d
 80032bc:	080037e7 	.word	0x080037e7
 80032c0:	08003803 	.word	0x08003803
 80032c4:	40012000 	.word	0x40012000

080032c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_ADC_ConfigChannel+0x1c>
 8003308:	2302      	movs	r3, #2
 800330a:	e105      	b.n	8003518 <HAL_ADC_ConfigChannel+0x228>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b09      	cmp	r3, #9
 800331a:	d925      	bls.n	8003368 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68d9      	ldr	r1, [r3, #12]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	461a      	mov	r2, r3
 800332a:	4613      	mov	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4413      	add	r3, r2
 8003330:	3b1e      	subs	r3, #30
 8003332:	2207      	movs	r2, #7
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43da      	mvns	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	400a      	ands	r2, r1
 8003340:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68d9      	ldr	r1, [r3, #12]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	b29b      	uxth	r3, r3
 8003352:	4618      	mov	r0, r3
 8003354:	4603      	mov	r3, r0
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	4403      	add	r3, r0
 800335a:	3b1e      	subs	r3, #30
 800335c:	409a      	lsls	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	e022      	b.n	80033ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6919      	ldr	r1, [r3, #16]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	2207      	movs	r2, #7
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43da      	mvns	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	400a      	ands	r2, r1
 800338a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6919      	ldr	r1, [r3, #16]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	4618      	mov	r0, r3
 800339e:	4603      	mov	r3, r0
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4403      	add	r3, r0
 80033a4:	409a      	lsls	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d824      	bhi.n	8003400 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	3b05      	subs	r3, #5
 80033c8:	221f      	movs	r2, #31
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43da      	mvns	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	400a      	ands	r2, r1
 80033d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	4618      	mov	r0, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	3b05      	subs	r3, #5
 80033f2:	fa00 f203 	lsl.w	r2, r0, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	635a      	str	r2, [r3, #52]	; 0x34
 80033fe:	e04c      	b.n	800349a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b0c      	cmp	r3, #12
 8003406:	d824      	bhi.n	8003452 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	3b23      	subs	r3, #35	; 0x23
 800341a:	221f      	movs	r2, #31
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43da      	mvns	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	400a      	ands	r2, r1
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	b29b      	uxth	r3, r3
 8003436:	4618      	mov	r0, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	3b23      	subs	r3, #35	; 0x23
 8003444:	fa00 f203 	lsl.w	r2, r0, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
 8003450:	e023      	b.n	800349a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	3b41      	subs	r3, #65	; 0x41
 8003464:	221f      	movs	r2, #31
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43da      	mvns	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	400a      	ands	r2, r1
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	b29b      	uxth	r3, r3
 8003480:	4618      	mov	r0, r3
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	3b41      	subs	r3, #65	; 0x41
 800348e:	fa00 f203 	lsl.w	r2, r0, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800349a:	4b22      	ldr	r3, [pc, #136]	; (8003524 <HAL_ADC_ConfigChannel+0x234>)
 800349c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a21      	ldr	r2, [pc, #132]	; (8003528 <HAL_ADC_ConfigChannel+0x238>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d109      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x1cc>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b12      	cmp	r3, #18
 80034ae:	d105      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a19      	ldr	r2, [pc, #100]	; (8003528 <HAL_ADC_ConfigChannel+0x238>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d123      	bne.n	800350e <HAL_ADC_ConfigChannel+0x21e>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b10      	cmp	r3, #16
 80034cc:	d003      	beq.n	80034d6 <HAL_ADC_ConfigChannel+0x1e6>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b11      	cmp	r3, #17
 80034d4:	d11b      	bne.n	800350e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d111      	bne.n	800350e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <HAL_ADC_ConfigChannel+0x23c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a10      	ldr	r2, [pc, #64]	; (8003530 <HAL_ADC_ConfigChannel+0x240>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	0c9a      	lsrs	r2, r3, #18
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003500:	e002      	b.n	8003508 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	3b01      	subs	r3, #1
 8003506:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f9      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40012300 	.word	0x40012300
 8003528:	40012000 	.word	0x40012000
 800352c:	20000004 	.word	0x20000004
 8003530:	431bde83 	.word	0x431bde83

08003534 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800353c:	4b79      	ldr	r3, [pc, #484]	; (8003724 <ADC_Init+0x1f0>)
 800353e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	431a      	orrs	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	021a      	lsls	r2, r3, #8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800358c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6899      	ldr	r1, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	4a58      	ldr	r2, [pc, #352]	; (8003728 <ADC_Init+0x1f4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d022      	beq.n	8003612 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6899      	ldr	r1, [r3, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6899      	ldr	r1, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	e00f      	b.n	8003632 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003630:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0202 	bic.w	r2, r2, #2
 8003640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6899      	ldr	r1, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	7e1b      	ldrb	r3, [r3, #24]
 800364c:	005a      	lsls	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01b      	beq.n	8003698 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800366e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800367e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	3b01      	subs	r3, #1
 800368c:	035a      	lsls	r2, r3, #13
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	e007      	b.n	80036a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	051a      	lsls	r2, r3, #20
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6899      	ldr	r1, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036ea:	025a      	lsls	r2, r3, #9
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003702:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6899      	ldr	r1, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	029a      	lsls	r2, r3, #10
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	609a      	str	r2, [r3, #8]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40012300 	.word	0x40012300
 8003728:	0f000001 	.word	0x0f000001

0800372c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003742:	2b00      	cmp	r3, #0
 8003744:	d13c      	bne.n	80037c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d12b      	bne.n	80037b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003764:	2b00      	cmp	r3, #0
 8003766:	d127      	bne.n	80037b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003772:	2b00      	cmp	r3, #0
 8003774:	d006      	beq.n	8003784 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003780:	2b00      	cmp	r3, #0
 8003782:	d119      	bne.n	80037b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0220 	bic.w	r2, r2, #32
 8003792:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	f043 0201 	orr.w	r2, r3, #1
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f7fd ff3d 	bl	8001638 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037be:	e00e      	b.n	80037de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f7ff fd85 	bl	80032dc <HAL_ADC_ErrorCallback>
}
 80037d2:	e004      	b.n	80037de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	4798      	blx	r3
}
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f7ff fd67 	bl	80032c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2240      	movs	r2, #64	; 0x40
 8003814:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	f043 0204 	orr.w	r2, r3, #4
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f7ff fd5a 	bl	80032dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003840:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <__NVIC_SetPriorityGrouping+0x44>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800384c:	4013      	ands	r3, r2
 800384e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800385c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003862:	4a04      	ldr	r2, [pc, #16]	; (8003874 <__NVIC_SetPriorityGrouping+0x44>)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	60d3      	str	r3, [r2, #12]
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <__NVIC_GetPriorityGrouping+0x18>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	0a1b      	lsrs	r3, r3, #8
 8003882:	f003 0307 	and.w	r3, r3, #7
}
 8003886:	4618      	mov	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	db0b      	blt.n	80038be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	f003 021f 	and.w	r2, r3, #31
 80038ac:	4907      	ldr	r1, [pc, #28]	; (80038cc <__NVIC_EnableIRQ+0x38>)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	2001      	movs	r0, #1
 80038b6:	fa00 f202 	lsl.w	r2, r0, r2
 80038ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	e000e100 	.word	0xe000e100

080038d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	db0a      	blt.n	80038fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	490c      	ldr	r1, [pc, #48]	; (800391c <__NVIC_SetPriority+0x4c>)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	0112      	lsls	r2, r2, #4
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	440b      	add	r3, r1
 80038f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038f8:	e00a      	b.n	8003910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	4908      	ldr	r1, [pc, #32]	; (8003920 <__NVIC_SetPriority+0x50>)
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	3b04      	subs	r3, #4
 8003908:	0112      	lsls	r2, r2, #4
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	440b      	add	r3, r1
 800390e:	761a      	strb	r2, [r3, #24]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	e000e100 	.word	0xe000e100
 8003920:	e000ed00 	.word	0xe000ed00

08003924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003924:	b480      	push	{r7}
 8003926:	b089      	sub	sp, #36	; 0x24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f1c3 0307 	rsb	r3, r3, #7
 800393e:	2b04      	cmp	r3, #4
 8003940:	bf28      	it	cs
 8003942:	2304      	movcs	r3, #4
 8003944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3304      	adds	r3, #4
 800394a:	2b06      	cmp	r3, #6
 800394c:	d902      	bls.n	8003954 <NVIC_EncodePriority+0x30>
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3b03      	subs	r3, #3
 8003952:	e000      	b.n	8003956 <NVIC_EncodePriority+0x32>
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003958:	f04f 32ff 	mov.w	r2, #4294967295
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43da      	mvns	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	401a      	ands	r2, r3
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800396c:	f04f 31ff 	mov.w	r1, #4294967295
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	fa01 f303 	lsl.w	r3, r1, r3
 8003976:	43d9      	mvns	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800397c:	4313      	orrs	r3, r2
         );
}
 800397e:	4618      	mov	r0, r3
 8003980:	3724      	adds	r7, #36	; 0x24
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff ff4c 	bl	8003830 <__NVIC_SetPriorityGrouping>
}
 8003998:	bf00      	nop
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039b2:	f7ff ff61 	bl	8003878 <__NVIC_GetPriorityGrouping>
 80039b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	6978      	ldr	r0, [r7, #20]
 80039be:	f7ff ffb1 	bl	8003924 <NVIC_EncodePriority>
 80039c2:	4602      	mov	r2, r0
 80039c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff ff80 	bl	80038d0 <__NVIC_SetPriority>
}
 80039d0:	bf00      	nop
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff ff54 	bl	8003894 <__NVIC_EnableIRQ>
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a00:	f7ff fafe 	bl	8003000 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e099      	b.n	8003b44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0201 	bic.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a30:	e00f      	b.n	8003a52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a32:	f7ff fae5 	bl	8003000 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b05      	cmp	r3, #5
 8003a3e:	d908      	bls.n	8003a52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2203      	movs	r2, #3
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e078      	b.n	8003b44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e8      	bne.n	8003a32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4b38      	ldr	r3, [pc, #224]	; (8003b4c <HAL_DMA_Init+0x158>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d107      	bne.n	8003abc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f023 0307 	bic.w	r3, r3, #7
 8003ad2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d117      	bne.n	8003b16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00e      	beq.n	8003b16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fb01 	bl	8004100 <DMA_CheckFifoParam>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2240      	movs	r2, #64	; 0x40
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b12:	2301      	movs	r3, #1
 8003b14:	e016      	b.n	8003b44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fab8 	bl	8004094 <DMA_CalcBaseAndBitshift>
 8003b24:	4603      	mov	r3, r0
 8003b26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	223f      	movs	r2, #63	; 0x3f
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	f010803f 	.word	0xf010803f

08003b50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_DMA_Start_IT+0x26>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e040      	b.n	8003bf8 <HAL_DMA_Start_IT+0xa8>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d12f      	bne.n	8003bea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fa4a 	bl	8004038 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	223f      	movs	r2, #63	; 0x3f
 8003baa:	409a      	lsls	r2, r3
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0216 	orr.w	r2, r2, #22
 8003bbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0208 	orr.w	r2, r2, #8
 8003bd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	e005      	b.n	8003bf6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c0e:	f7ff f9f7 	bl	8003000 <HAL_GetTick>
 8003c12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d008      	beq.n	8003c32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2280      	movs	r2, #128	; 0x80
 8003c24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e052      	b.n	8003cd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0216 	bic.w	r2, r2, #22
 8003c40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d103      	bne.n	8003c62 <HAL_DMA_Abort+0x62>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0208 	bic.w	r2, r2, #8
 8003c70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c82:	e013      	b.n	8003cac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c84:	f7ff f9bc 	bl	8003000 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d90c      	bls.n	8003cac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e015      	b.n	8003cd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e4      	bne.n	8003c84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbe:	223f      	movs	r2, #63	; 0x3f
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d004      	beq.n	8003cfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2280      	movs	r2, #128	; 0x80
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e00c      	b.n	8003d18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2205      	movs	r2, #5
 8003d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0201 	bic.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d30:	4b92      	ldr	r3, [pc, #584]	; (8003f7c <HAL_DMA_IRQHandler+0x258>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a92      	ldr	r2, [pc, #584]	; (8003f80 <HAL_DMA_IRQHandler+0x25c>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	0a9b      	lsrs	r3, r3, #10
 8003d3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4e:	2208      	movs	r2, #8
 8003d50:	409a      	lsls	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01a      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d013      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0204 	bic.w	r2, r2, #4
 8003d76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	f043 0201 	orr.w	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	2201      	movs	r2, #1
 8003d96:	409a      	lsls	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d012      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00b      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db2:	2201      	movs	r2, #1
 8003db4:	409a      	lsls	r2, r3
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	f043 0202 	orr.w	r2, r3, #2
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dca:	2204      	movs	r2, #4
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d012      	beq.n	8003dfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	2204      	movs	r2, #4
 8003dea:	409a      	lsls	r2, r3
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df4:	f043 0204 	orr.w	r2, r3, #4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e00:	2210      	movs	r2, #16
 8003e02:	409a      	lsls	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d043      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d03c      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1e:	2210      	movs	r2, #16
 8003e20:	409a      	lsls	r2, r3
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d018      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d108      	bne.n	8003e54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d024      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	4798      	blx	r3
 8003e52:	e01f      	b.n	8003e94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01b      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	4798      	blx	r3
 8003e64:	e016      	b.n	8003e94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d107      	bne.n	8003e84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0208 	bic.w	r2, r2, #8
 8003e82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e98:	2220      	movs	r2, #32
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 808e 	beq.w	8003fc2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 8086 	beq.w	8003fc2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eba:	2220      	movs	r2, #32
 8003ebc:	409a      	lsls	r2, r3
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b05      	cmp	r3, #5
 8003ecc:	d136      	bne.n	8003f3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0216 	bic.w	r2, r2, #22
 8003edc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d103      	bne.n	8003efe <HAL_DMA_IRQHandler+0x1da>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0208 	bic.w	r2, r2, #8
 8003f0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f12:	223f      	movs	r2, #63	; 0x3f
 8003f14:	409a      	lsls	r2, r3
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d07d      	beq.n	800402e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	4798      	blx	r3
        }
        return;
 8003f3a:	e078      	b.n	800402e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01c      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d108      	bne.n	8003f6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d030      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	4798      	blx	r3
 8003f68:	e02b      	b.n	8003fc2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d027      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
 8003f7a:	e022      	b.n	8003fc2 <HAL_DMA_IRQHandler+0x29e>
 8003f7c:	20000004 	.word	0x20000004
 8003f80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10f      	bne.n	8003fb2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0210 	bic.w	r2, r2, #16
 8003fa0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d032      	beq.n	8004030 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d022      	beq.n	800401c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2205      	movs	r2, #5
 8003fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0201 	bic.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d307      	bcc.n	800400a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f2      	bne.n	8003fee <HAL_DMA_IRQHandler+0x2ca>
 8004008:	e000      	b.n	800400c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800400a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
 800402c:	e000      	b.n	8004030 <HAL_DMA_IRQHandler+0x30c>
        return;
 800402e:	bf00      	nop
    }
  }
}
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop

08004038 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004054:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2b40      	cmp	r3, #64	; 0x40
 8004064:	d108      	bne.n	8004078 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004076:	e007      	b.n	8004088 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	60da      	str	r2, [r3, #12]
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	3b10      	subs	r3, #16
 80040a4:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <DMA_CalcBaseAndBitshift+0x64>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	091b      	lsrs	r3, r3, #4
 80040ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040ae:	4a13      	ldr	r2, [pc, #76]	; (80040fc <DMA_CalcBaseAndBitshift+0x68>)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4413      	add	r3, r2
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d909      	bls.n	80040d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ca:	f023 0303 	bic.w	r3, r3, #3
 80040ce:	1d1a      	adds	r2, r3, #4
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	659a      	str	r2, [r3, #88]	; 0x58
 80040d4:	e007      	b.n	80040e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040de:	f023 0303 	bic.w	r3, r3, #3
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	aaaaaaab 	.word	0xaaaaaaab
 80040fc:	0800fe78 	.word	0x0800fe78

08004100 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d11f      	bne.n	800415a <DMA_CheckFifoParam+0x5a>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b03      	cmp	r3, #3
 800411e:	d856      	bhi.n	80041ce <DMA_CheckFifoParam+0xce>
 8004120:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <DMA_CheckFifoParam+0x28>)
 8004122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004126:	bf00      	nop
 8004128:	08004139 	.word	0x08004139
 800412c:	0800414b 	.word	0x0800414b
 8004130:	08004139 	.word	0x08004139
 8004134:	080041cf 	.word	0x080041cf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d046      	beq.n	80041d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004148:	e043      	b.n	80041d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004152:	d140      	bne.n	80041d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004158:	e03d      	b.n	80041d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004162:	d121      	bne.n	80041a8 <DMA_CheckFifoParam+0xa8>
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b03      	cmp	r3, #3
 8004168:	d837      	bhi.n	80041da <DMA_CheckFifoParam+0xda>
 800416a:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <DMA_CheckFifoParam+0x70>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	08004181 	.word	0x08004181
 8004174:	08004187 	.word	0x08004187
 8004178:	08004181 	.word	0x08004181
 800417c:	08004199 	.word	0x08004199
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	73fb      	strb	r3, [r7, #15]
      break;
 8004184:	e030      	b.n	80041e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d025      	beq.n	80041de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004196:	e022      	b.n	80041de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041a0:	d11f      	bne.n	80041e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041a6:	e01c      	b.n	80041e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d903      	bls.n	80041b6 <DMA_CheckFifoParam+0xb6>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d003      	beq.n	80041bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041b4:	e018      	b.n	80041e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
      break;
 80041ba:	e015      	b.n	80041e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00e      	beq.n	80041e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
      break;
 80041cc:	e00b      	b.n	80041e6 <DMA_CheckFifoParam+0xe6>
      break;
 80041ce:	bf00      	nop
 80041d0:	e00a      	b.n	80041e8 <DMA_CheckFifoParam+0xe8>
      break;
 80041d2:	bf00      	nop
 80041d4:	e008      	b.n	80041e8 <DMA_CheckFifoParam+0xe8>
      break;
 80041d6:	bf00      	nop
 80041d8:	e006      	b.n	80041e8 <DMA_CheckFifoParam+0xe8>
      break;
 80041da:	bf00      	nop
 80041dc:	e004      	b.n	80041e8 <DMA_CheckFifoParam+0xe8>
      break;
 80041de:	bf00      	nop
 80041e0:	e002      	b.n	80041e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80041e2:	bf00      	nop
 80041e4:	e000      	b.n	80041e8 <DMA_CheckFifoParam+0xe8>
      break;
 80041e6:	bf00      	nop
    }
  } 
  
  return status; 
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop

080041f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b089      	sub	sp, #36	; 0x24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800420a:	2300      	movs	r3, #0
 800420c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800420e:	2300      	movs	r3, #0
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	e159      	b.n	80044c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004214:	2201      	movs	r2, #1
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4013      	ands	r3, r2
 8004226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	429a      	cmp	r2, r3
 800422e:	f040 8148 	bne.w	80044c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d005      	beq.n	800424a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004246:	2b02      	cmp	r3, #2
 8004248:	d130      	bne.n	80042ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	2203      	movs	r2, #3
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004280:	2201      	movs	r2, #1
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	f003 0201 	and.w	r2, r3, #1
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d017      	beq.n	80042e8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	2203      	movs	r2, #3
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4313      	orrs	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d123      	bne.n	800433c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	08da      	lsrs	r2, r3, #3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3208      	adds	r2, #8
 80042fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	220f      	movs	r2, #15
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	08da      	lsrs	r2, r3, #3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3208      	adds	r2, #8
 8004336:	69b9      	ldr	r1, [r7, #24]
 8004338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	2203      	movs	r2, #3
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4013      	ands	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f003 0203 	and.w	r2, r3, #3
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4313      	orrs	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80a2 	beq.w	80044c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	4b57      	ldr	r3, [pc, #348]	; (80044e0 <HAL_GPIO_Init+0x2e8>)
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	4a56      	ldr	r2, [pc, #344]	; (80044e0 <HAL_GPIO_Init+0x2e8>)
 8004388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800438c:	6453      	str	r3, [r2, #68]	; 0x44
 800438e:	4b54      	ldr	r3, [pc, #336]	; (80044e0 <HAL_GPIO_Init+0x2e8>)
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800439a:	4a52      	ldr	r2, [pc, #328]	; (80044e4 <HAL_GPIO_Init+0x2ec>)
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	089b      	lsrs	r3, r3, #2
 80043a0:	3302      	adds	r3, #2
 80043a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	220f      	movs	r2, #15
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43db      	mvns	r3, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4013      	ands	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a49      	ldr	r2, [pc, #292]	; (80044e8 <HAL_GPIO_Init+0x2f0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d019      	beq.n	80043fa <HAL_GPIO_Init+0x202>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a48      	ldr	r2, [pc, #288]	; (80044ec <HAL_GPIO_Init+0x2f4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d013      	beq.n	80043f6 <HAL_GPIO_Init+0x1fe>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a47      	ldr	r2, [pc, #284]	; (80044f0 <HAL_GPIO_Init+0x2f8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00d      	beq.n	80043f2 <HAL_GPIO_Init+0x1fa>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a46      	ldr	r2, [pc, #280]	; (80044f4 <HAL_GPIO_Init+0x2fc>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d007      	beq.n	80043ee <HAL_GPIO_Init+0x1f6>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a45      	ldr	r2, [pc, #276]	; (80044f8 <HAL_GPIO_Init+0x300>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d101      	bne.n	80043ea <HAL_GPIO_Init+0x1f2>
 80043e6:	2304      	movs	r3, #4
 80043e8:	e008      	b.n	80043fc <HAL_GPIO_Init+0x204>
 80043ea:	2307      	movs	r3, #7
 80043ec:	e006      	b.n	80043fc <HAL_GPIO_Init+0x204>
 80043ee:	2303      	movs	r3, #3
 80043f0:	e004      	b.n	80043fc <HAL_GPIO_Init+0x204>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e002      	b.n	80043fc <HAL_GPIO_Init+0x204>
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <HAL_GPIO_Init+0x204>
 80043fa:	2300      	movs	r3, #0
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	f002 0203 	and.w	r2, r2, #3
 8004402:	0092      	lsls	r2, r2, #2
 8004404:	4093      	lsls	r3, r2
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4313      	orrs	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800440c:	4935      	ldr	r1, [pc, #212]	; (80044e4 <HAL_GPIO_Init+0x2ec>)
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	089b      	lsrs	r3, r3, #2
 8004412:	3302      	adds	r3, #2
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800441a:	4b38      	ldr	r3, [pc, #224]	; (80044fc <HAL_GPIO_Init+0x304>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	43db      	mvns	r3, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4013      	ands	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800443e:	4a2f      	ldr	r2, [pc, #188]	; (80044fc <HAL_GPIO_Init+0x304>)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004444:	4b2d      	ldr	r3, [pc, #180]	; (80044fc <HAL_GPIO_Init+0x304>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	43db      	mvns	r3, r3
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4013      	ands	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004468:	4a24      	ldr	r2, [pc, #144]	; (80044fc <HAL_GPIO_Init+0x304>)
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800446e:	4b23      	ldr	r3, [pc, #140]	; (80044fc <HAL_GPIO_Init+0x304>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	43db      	mvns	r3, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4013      	ands	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004492:	4a1a      	ldr	r2, [pc, #104]	; (80044fc <HAL_GPIO_Init+0x304>)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004498:	4b18      	ldr	r3, [pc, #96]	; (80044fc <HAL_GPIO_Init+0x304>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	43db      	mvns	r3, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4013      	ands	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044bc:	4a0f      	ldr	r2, [pc, #60]	; (80044fc <HAL_GPIO_Init+0x304>)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3301      	adds	r3, #1
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	2b0f      	cmp	r3, #15
 80044cc:	f67f aea2 	bls.w	8004214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	3724      	adds	r7, #36	; 0x24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40013800 	.word	0x40013800
 80044e8:	40020000 	.word	0x40020000
 80044ec:	40020400 	.word	0x40020400
 80044f0:	40020800 	.word	0x40020800
 80044f4:	40020c00 	.word	0x40020c00
 80044f8:	40021000 	.word	0x40021000
 80044fc:	40013c00 	.word	0x40013c00

08004500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	807b      	strh	r3, [r7, #2]
 800450c:	4613      	mov	r3, r2
 800450e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004510:	787b      	ldrb	r3, [r7, #1]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004516:	887a      	ldrh	r2, [r7, #2]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800451c:	e003      	b.n	8004526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800451e:	887b      	ldrh	r3, [r7, #2]
 8004520:	041a      	lsls	r2, r3, #16
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	619a      	str	r2, [r3, #24]
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
	...

08004534 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e12b      	b.n	800479e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fe fa3a 	bl	80029d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2224      	movs	r2, #36	; 0x24
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004586:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004596:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004598:	f001 fbd8 	bl	8005d4c <HAL_RCC_GetPCLK1Freq>
 800459c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4a81      	ldr	r2, [pc, #516]	; (80047a8 <HAL_I2C_Init+0x274>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d807      	bhi.n	80045b8 <HAL_I2C_Init+0x84>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4a80      	ldr	r2, [pc, #512]	; (80047ac <HAL_I2C_Init+0x278>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	bf94      	ite	ls
 80045b0:	2301      	movls	r3, #1
 80045b2:	2300      	movhi	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	e006      	b.n	80045c6 <HAL_I2C_Init+0x92>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a7d      	ldr	r2, [pc, #500]	; (80047b0 <HAL_I2C_Init+0x27c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	bf94      	ite	ls
 80045c0:	2301      	movls	r3, #1
 80045c2:	2300      	movhi	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e0e7      	b.n	800479e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4a78      	ldr	r2, [pc, #480]	; (80047b4 <HAL_I2C_Init+0x280>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	0c9b      	lsrs	r3, r3, #18
 80045d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4a6a      	ldr	r2, [pc, #424]	; (80047a8 <HAL_I2C_Init+0x274>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d802      	bhi.n	8004608 <HAL_I2C_Init+0xd4>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	3301      	adds	r3, #1
 8004606:	e009      	b.n	800461c <HAL_I2C_Init+0xe8>
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800460e:	fb02 f303 	mul.w	r3, r2, r3
 8004612:	4a69      	ldr	r2, [pc, #420]	; (80047b8 <HAL_I2C_Init+0x284>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	099b      	lsrs	r3, r3, #6
 800461a:	3301      	adds	r3, #1
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	430b      	orrs	r3, r1
 8004622:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800462e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	495c      	ldr	r1, [pc, #368]	; (80047a8 <HAL_I2C_Init+0x274>)
 8004638:	428b      	cmp	r3, r1
 800463a:	d819      	bhi.n	8004670 <HAL_I2C_Init+0x13c>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	1e59      	subs	r1, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	fbb1 f3f3 	udiv	r3, r1, r3
 800464a:	1c59      	adds	r1, r3, #1
 800464c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004650:	400b      	ands	r3, r1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_I2C_Init+0x138>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1e59      	subs	r1, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	fbb1 f3f3 	udiv	r3, r1, r3
 8004664:	3301      	adds	r3, #1
 8004666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466a:	e051      	b.n	8004710 <HAL_I2C_Init+0x1dc>
 800466c:	2304      	movs	r3, #4
 800466e:	e04f      	b.n	8004710 <HAL_I2C_Init+0x1dc>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d111      	bne.n	800469c <HAL_I2C_Init+0x168>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1e58      	subs	r0, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6859      	ldr	r1, [r3, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	440b      	add	r3, r1
 8004686:	fbb0 f3f3 	udiv	r3, r0, r3
 800468a:	3301      	adds	r3, #1
 800468c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	e012      	b.n	80046c2 <HAL_I2C_Init+0x18e>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1e58      	subs	r0, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	0099      	lsls	r1, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b2:	3301      	adds	r3, #1
 80046b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf0c      	ite	eq
 80046bc:	2301      	moveq	r3, #1
 80046be:	2300      	movne	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_I2C_Init+0x196>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e022      	b.n	8004710 <HAL_I2C_Init+0x1dc>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10e      	bne.n	80046f0 <HAL_I2C_Init+0x1bc>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1e58      	subs	r0, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6859      	ldr	r1, [r3, #4]
 80046da:	460b      	mov	r3, r1
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	440b      	add	r3, r1
 80046e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e4:	3301      	adds	r3, #1
 80046e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ee:	e00f      	b.n	8004710 <HAL_I2C_Init+0x1dc>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1e58      	subs	r0, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6859      	ldr	r1, [r3, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	0099      	lsls	r1, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	fbb0 f3f3 	udiv	r3, r0, r3
 8004706:	3301      	adds	r3, #1
 8004708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	6809      	ldr	r1, [r1, #0]
 8004714:	4313      	orrs	r3, r2
 8004716:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800473e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6911      	ldr	r1, [r2, #16]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68d2      	ldr	r2, [r2, #12]
 800474a:	4311      	orrs	r1, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	430b      	orrs	r3, r1
 8004752:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695a      	ldr	r2, [r3, #20]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	000186a0 	.word	0x000186a0
 80047ac:	001e847f 	.word	0x001e847f
 80047b0:	003d08ff 	.word	0x003d08ff
 80047b4:	431bde83 	.word	0x431bde83
 80047b8:	10624dd3 	.word	0x10624dd3

080047bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	4608      	mov	r0, r1
 80047c6:	4611      	mov	r1, r2
 80047c8:	461a      	mov	r2, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	817b      	strh	r3, [r7, #10]
 80047ce:	460b      	mov	r3, r1
 80047d0:	813b      	strh	r3, [r7, #8]
 80047d2:	4613      	mov	r3, r2
 80047d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047d6:	f7fe fc13 	bl	8003000 <HAL_GetTick>
 80047da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	f040 80d9 	bne.w	800499c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	2319      	movs	r3, #25
 80047f0:	2201      	movs	r2, #1
 80047f2:	496d      	ldr	r1, [pc, #436]	; (80049a8 <HAL_I2C_Mem_Write+0x1ec>)
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 fc7f 	bl	80050f8 <I2C_WaitOnFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004800:	2302      	movs	r3, #2
 8004802:	e0cc      	b.n	800499e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_I2C_Mem_Write+0x56>
 800480e:	2302      	movs	r3, #2
 8004810:	e0c5      	b.n	800499e <HAL_I2C_Mem_Write+0x1e2>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b01      	cmp	r3, #1
 8004826:	d007      	beq.n	8004838 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004846:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2221      	movs	r2, #33	; 0x21
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2240      	movs	r2, #64	; 0x40
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a3a      	ldr	r2, [r7, #32]
 8004862:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004868:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4a4d      	ldr	r2, [pc, #308]	; (80049ac <HAL_I2C_Mem_Write+0x1f0>)
 8004878:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800487a:	88f8      	ldrh	r0, [r7, #6]
 800487c:	893a      	ldrh	r2, [r7, #8]
 800487e:	8979      	ldrh	r1, [r7, #10]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	4603      	mov	r3, r0
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 fab6 	bl	8004dfc <I2C_RequestMemoryWrite>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d052      	beq.n	800493c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e081      	b.n	800499e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fd00 	bl	80052a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00d      	beq.n	80048c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d107      	bne.n	80048c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e06b      	b.n	800499e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	781a      	ldrb	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b04      	cmp	r3, #4
 8004902:	d11b      	bne.n	800493c <HAL_I2C_Mem_Write+0x180>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004908:	2b00      	cmp	r3, #0
 800490a:	d017      	beq.n	800493c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	781a      	ldrb	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1aa      	bne.n	800489a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fcec 	bl	8005326 <I2C_WaitOnBTFFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	2b04      	cmp	r3, #4
 800495a:	d107      	bne.n	800496c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e016      	b.n	800499e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	e000      	b.n	800499e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800499c:	2302      	movs	r3, #2
  }
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	00100002 	.word	0x00100002
 80049ac:	ffff0000 	.word	0xffff0000

080049b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08c      	sub	sp, #48	; 0x30
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	4608      	mov	r0, r1
 80049ba:	4611      	mov	r1, r2
 80049bc:	461a      	mov	r2, r3
 80049be:	4603      	mov	r3, r0
 80049c0:	817b      	strh	r3, [r7, #10]
 80049c2:	460b      	mov	r3, r1
 80049c4:	813b      	strh	r3, [r7, #8]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049ca:	f7fe fb19 	bl	8003000 <HAL_GetTick>
 80049ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b20      	cmp	r3, #32
 80049da:	f040 8208 	bne.w	8004dee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	2319      	movs	r3, #25
 80049e4:	2201      	movs	r2, #1
 80049e6:	497b      	ldr	r1, [pc, #492]	; (8004bd4 <HAL_I2C_Mem_Read+0x224>)
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 fb85 	bl	80050f8 <I2C_WaitOnFlagUntilTimeout>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80049f4:	2302      	movs	r3, #2
 80049f6:	e1fb      	b.n	8004df0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_I2C_Mem_Read+0x56>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e1f4      	b.n	8004df0 <HAL_I2C_Mem_Read+0x440>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d007      	beq.n	8004a2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2222      	movs	r2, #34	; 0x22
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2240      	movs	r2, #64	; 0x40
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a5b      	ldr	r2, [pc, #364]	; (8004bd8 <HAL_I2C_Mem_Read+0x228>)
 8004a6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a6e:	88f8      	ldrh	r0, [r7, #6]
 8004a70:	893a      	ldrh	r2, [r7, #8]
 8004a72:	8979      	ldrh	r1, [r7, #10]
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 fa52 	bl	8004f28 <I2C_RequestMemoryRead>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e1b0      	b.n	8004df0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d113      	bne.n	8004abe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a96:	2300      	movs	r3, #0
 8004a98:	623b      	str	r3, [r7, #32]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	623b      	str	r3, [r7, #32]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	623b      	str	r3, [r7, #32]
 8004aaa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e184      	b.n	8004dc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d11b      	bne.n	8004afe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61fb      	str	r3, [r7, #28]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	e164      	b.n	8004dc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d11b      	bne.n	8004b3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b26:	2300      	movs	r3, #0
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	e144      	b.n	8004dc8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b54:	e138      	b.n	8004dc8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	f200 80f1 	bhi.w	8004d42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d123      	bne.n	8004bb0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 fc1b 	bl	80053a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e139      	b.n	8004df0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bae:	e10b      	b.n	8004dc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d14e      	bne.n	8004c56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	4906      	ldr	r1, [pc, #24]	; (8004bdc <HAL_I2C_Mem_Read+0x22c>)
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 fa98 	bl	80050f8 <I2C_WaitOnFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e10e      	b.n	8004df0 <HAL_I2C_Mem_Read+0x440>
 8004bd2:	bf00      	nop
 8004bd4:	00100002 	.word	0x00100002
 8004bd8:	ffff0000 	.word	0xffff0000
 8004bdc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c54:	e0b8      	b.n	8004dc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	4966      	ldr	r1, [pc, #408]	; (8004df8 <HAL_I2C_Mem_Read+0x448>)
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 fa49 	bl	80050f8 <I2C_WaitOnFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0bf      	b.n	8004df0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb8:	2200      	movs	r2, #0
 8004cba:	494f      	ldr	r1, [pc, #316]	; (8004df8 <HAL_I2C_Mem_Read+0x448>)
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 fa1b 	bl	80050f8 <I2C_WaitOnFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e091      	b.n	8004df0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d40:	e042      	b.n	8004dc8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fb2e 	bl	80053a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e04c      	b.n	8004df0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d118      	bne.n	8004dc8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f47f aec2 	bne.w	8004b56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e000      	b.n	8004df0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004dee:	2302      	movs	r3, #2
  }
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3728      	adds	r7, #40	; 0x28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	00010004 	.word	0x00010004

08004dfc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	4608      	mov	r0, r1
 8004e06:	4611      	mov	r1, r2
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	817b      	strh	r3, [r7, #10]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	813b      	strh	r3, [r7, #8]
 8004e12:	4613      	mov	r3, r2
 8004e14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 f960 	bl	80050f8 <I2C_WaitOnFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00d      	beq.n	8004e5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4c:	d103      	bne.n	8004e56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e05f      	b.n	8004f1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e5a:	897b      	ldrh	r3, [r7, #10]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	6a3a      	ldr	r2, [r7, #32]
 8004e6e:	492d      	ldr	r1, [pc, #180]	; (8004f24 <I2C_RequestMemoryWrite+0x128>)
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f998 	bl	80051a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e04c      	b.n	8004f1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e98:	6a39      	ldr	r1, [r7, #32]
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 fa02 	bl	80052a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00d      	beq.n	8004ec2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d107      	bne.n	8004ebe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ebc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e02b      	b.n	8004f1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d105      	bne.n	8004ed4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ec8:	893b      	ldrh	r3, [r7, #8]
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	611a      	str	r2, [r3, #16]
 8004ed2:	e021      	b.n	8004f18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ed4:	893b      	ldrh	r3, [r7, #8]
 8004ed6:	0a1b      	lsrs	r3, r3, #8
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee4:	6a39      	ldr	r1, [r7, #32]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f9dc 	bl	80052a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00d      	beq.n	8004f0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d107      	bne.n	8004f0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e005      	b.n	8004f1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f0e:	893b      	ldrh	r3, [r7, #8]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	00010002 	.word	0x00010002

08004f28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	4608      	mov	r0, r1
 8004f32:	4611      	mov	r1, r2
 8004f34:	461a      	mov	r2, r3
 8004f36:	4603      	mov	r3, r0
 8004f38:	817b      	strh	r3, [r7, #10]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	813b      	strh	r3, [r7, #8]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f8c2 	bl	80050f8 <I2C_WaitOnFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00d      	beq.n	8004f96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f88:	d103      	bne.n	8004f92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e0aa      	b.n	80050ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f96:	897b      	ldrh	r3, [r7, #10]
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	6a3a      	ldr	r2, [r7, #32]
 8004faa:	4952      	ldr	r1, [pc, #328]	; (80050f4 <I2C_RequestMemoryRead+0x1cc>)
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f8fa 	bl	80051a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e097      	b.n	80050ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd4:	6a39      	ldr	r1, [r7, #32]
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f964 	bl	80052a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00d      	beq.n	8004ffe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d107      	bne.n	8004ffa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e076      	b.n	80050ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d105      	bne.n	8005010 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005004:	893b      	ldrh	r3, [r7, #8]
 8005006:	b2da      	uxtb	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	611a      	str	r2, [r3, #16]
 800500e:	e021      	b.n	8005054 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005010:	893b      	ldrh	r3, [r7, #8]
 8005012:	0a1b      	lsrs	r3, r3, #8
 8005014:	b29b      	uxth	r3, r3
 8005016:	b2da      	uxtb	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800501e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005020:	6a39      	ldr	r1, [r7, #32]
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f93e 	bl	80052a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00d      	beq.n	800504a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	2b04      	cmp	r3, #4
 8005034:	d107      	bne.n	8005046 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005044:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e050      	b.n	80050ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800504a:	893b      	ldrh	r3, [r7, #8]
 800504c:	b2da      	uxtb	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005056:	6a39      	ldr	r1, [r7, #32]
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 f923 	bl	80052a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00d      	beq.n	8005080 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	2b04      	cmp	r3, #4
 800506a:	d107      	bne.n	800507c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800507a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e035      	b.n	80050ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800508e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	2200      	movs	r2, #0
 8005098:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f82b 	bl	80050f8 <I2C_WaitOnFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00d      	beq.n	80050c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b6:	d103      	bne.n	80050c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e013      	b.n	80050ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050c4:	897b      	ldrh	r3, [r7, #10]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	f043 0301 	orr.w	r3, r3, #1
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	6a3a      	ldr	r2, [r7, #32]
 80050d8:	4906      	ldr	r1, [pc, #24]	; (80050f4 <I2C_RequestMemoryRead+0x1cc>)
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f863 	bl	80051a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	00010002 	.word	0x00010002

080050f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	603b      	str	r3, [r7, #0]
 8005104:	4613      	mov	r3, r2
 8005106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005108:	e025      	b.n	8005156 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005110:	d021      	beq.n	8005156 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005112:	f7fd ff75 	bl	8003000 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d302      	bcc.n	8005128 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d116      	bne.n	8005156 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	f043 0220 	orr.w	r2, r3, #32
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e023      	b.n	800519e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	0c1b      	lsrs	r3, r3, #16
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b01      	cmp	r3, #1
 800515e:	d10d      	bne.n	800517c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	43da      	mvns	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4013      	ands	r3, r2
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	bf0c      	ite	eq
 8005172:	2301      	moveq	r3, #1
 8005174:	2300      	movne	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	461a      	mov	r2, r3
 800517a:	e00c      	b.n	8005196 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	43da      	mvns	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4013      	ands	r3, r2
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	bf0c      	ite	eq
 800518e:	2301      	moveq	r3, #1
 8005190:	2300      	movne	r3, #0
 8005192:	b2db      	uxtb	r3, r3
 8005194:	461a      	mov	r2, r3
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	429a      	cmp	r2, r3
 800519a:	d0b6      	beq.n	800510a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b084      	sub	sp, #16
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	607a      	str	r2, [r7, #4]
 80051b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051b4:	e051      	b.n	800525a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c4:	d123      	bne.n	800520e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f043 0204 	orr.w	r2, r3, #4
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e046      	b.n	800529c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d021      	beq.n	800525a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005216:	f7fd fef3 	bl	8003000 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	429a      	cmp	r2, r3
 8005224:	d302      	bcc.n	800522c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d116      	bne.n	800525a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f043 0220 	orr.w	r2, r3, #32
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e020      	b.n	800529c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	0c1b      	lsrs	r3, r3, #16
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	d10c      	bne.n	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	43da      	mvns	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4013      	ands	r3, r2
 8005270:	b29b      	uxth	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	bf14      	ite	ne
 8005276:	2301      	movne	r3, #1
 8005278:	2300      	moveq	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	e00b      	b.n	8005296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	43da      	mvns	r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	4013      	ands	r3, r2
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	bf14      	ite	ne
 8005290:	2301      	movne	r3, #1
 8005292:	2300      	moveq	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d18d      	bne.n	80051b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052b0:	e02d      	b.n	800530e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 f8ce 	bl	8005454 <I2C_IsAcknowledgeFailed>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e02d      	b.n	800531e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c8:	d021      	beq.n	800530e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ca:	f7fd fe99 	bl	8003000 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d302      	bcc.n	80052e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d116      	bne.n	800530e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f043 0220 	orr.w	r2, r3, #32
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e007      	b.n	800531e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005318:	2b80      	cmp	r3, #128	; 0x80
 800531a:	d1ca      	bne.n	80052b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005332:	e02d      	b.n	8005390 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f88d 	bl	8005454 <I2C_IsAcknowledgeFailed>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e02d      	b.n	80053a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534a:	d021      	beq.n	8005390 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534c:	f7fd fe58 	bl	8003000 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	429a      	cmp	r2, r3
 800535a:	d302      	bcc.n	8005362 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d116      	bne.n	8005390 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	f043 0220 	orr.w	r2, r3, #32
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e007      	b.n	80053a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b04      	cmp	r3, #4
 800539c:	d1ca      	bne.n	8005334 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053b4:	e042      	b.n	800543c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d119      	bne.n	80053f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0210 	mvn.w	r2, #16
 80053cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e029      	b.n	800544c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f8:	f7fd fe02 	bl	8003000 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	429a      	cmp	r2, r3
 8005406:	d302      	bcc.n	800540e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d116      	bne.n	800543c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	f043 0220 	orr.w	r2, r3, #32
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e007      	b.n	800544c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	d1b5      	bne.n	80053b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800546a:	d11b      	bne.n	80054a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005474:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2220      	movs	r2, #32
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005490:	f043 0204 	orr.w	r2, r3, #4
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
	...

080054b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e264      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d075      	beq.n	80055be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054d2:	4ba3      	ldr	r3, [pc, #652]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 030c 	and.w	r3, r3, #12
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d00c      	beq.n	80054f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054de:	4ba0      	ldr	r3, [pc, #640]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d112      	bne.n	8005510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ea:	4b9d      	ldr	r3, [pc, #628]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054f6:	d10b      	bne.n	8005510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f8:	4b99      	ldr	r3, [pc, #612]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d05b      	beq.n	80055bc <HAL_RCC_OscConfig+0x108>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d157      	bne.n	80055bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e23f      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005518:	d106      	bne.n	8005528 <HAL_RCC_OscConfig+0x74>
 800551a:	4b91      	ldr	r3, [pc, #580]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a90      	ldr	r2, [pc, #576]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	e01d      	b.n	8005564 <HAL_RCC_OscConfig+0xb0>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005530:	d10c      	bne.n	800554c <HAL_RCC_OscConfig+0x98>
 8005532:	4b8b      	ldr	r3, [pc, #556]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a8a      	ldr	r2, [pc, #552]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	4b88      	ldr	r3, [pc, #544]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a87      	ldr	r2, [pc, #540]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	e00b      	b.n	8005564 <HAL_RCC_OscConfig+0xb0>
 800554c:	4b84      	ldr	r3, [pc, #528]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a83      	ldr	r2, [pc, #524]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	4b81      	ldr	r3, [pc, #516]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a80      	ldr	r2, [pc, #512]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 800555e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d013      	beq.n	8005594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556c:	f7fd fd48 	bl	8003000 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005574:	f7fd fd44 	bl	8003000 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b64      	cmp	r3, #100	; 0x64
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e204      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005586:	4b76      	ldr	r3, [pc, #472]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0f0      	beq.n	8005574 <HAL_RCC_OscConfig+0xc0>
 8005592:	e014      	b.n	80055be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005594:	f7fd fd34 	bl	8003000 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800559c:	f7fd fd30 	bl	8003000 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b64      	cmp	r3, #100	; 0x64
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e1f0      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ae:	4b6c      	ldr	r3, [pc, #432]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0xe8>
 80055ba:	e000      	b.n	80055be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d063      	beq.n	8005692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055ca:	4b65      	ldr	r3, [pc, #404]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 030c 	and.w	r3, r3, #12
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00b      	beq.n	80055ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055d6:	4b62      	ldr	r3, [pc, #392]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d11c      	bne.n	800561c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055e2:	4b5f      	ldr	r3, [pc, #380]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d116      	bne.n	800561c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ee:	4b5c      	ldr	r3, [pc, #368]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d005      	beq.n	8005606 <HAL_RCC_OscConfig+0x152>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d001      	beq.n	8005606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e1c4      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005606:	4b56      	ldr	r3, [pc, #344]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	4952      	ldr	r1, [pc, #328]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005616:	4313      	orrs	r3, r2
 8005618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800561a:	e03a      	b.n	8005692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d020      	beq.n	8005666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005624:	4b4f      	ldr	r3, [pc, #316]	; (8005764 <HAL_RCC_OscConfig+0x2b0>)
 8005626:	2201      	movs	r2, #1
 8005628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562a:	f7fd fce9 	bl	8003000 <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005632:	f7fd fce5 	bl	8003000 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e1a5      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005644:	4b46      	ldr	r3, [pc, #280]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0f0      	beq.n	8005632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005650:	4b43      	ldr	r3, [pc, #268]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	4940      	ldr	r1, [pc, #256]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005660:	4313      	orrs	r3, r2
 8005662:	600b      	str	r3, [r1, #0]
 8005664:	e015      	b.n	8005692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005666:	4b3f      	ldr	r3, [pc, #252]	; (8005764 <HAL_RCC_OscConfig+0x2b0>)
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566c:	f7fd fcc8 	bl	8003000 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005674:	f7fd fcc4 	bl	8003000 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e184      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005686:	4b36      	ldr	r3, [pc, #216]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f0      	bne.n	8005674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d030      	beq.n	8005700 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d016      	beq.n	80056d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056a6:	4b30      	ldr	r3, [pc, #192]	; (8005768 <HAL_RCC_OscConfig+0x2b4>)
 80056a8:	2201      	movs	r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ac:	f7fd fca8 	bl	8003000 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056b4:	f7fd fca4 	bl	8003000 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e164      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c6:	4b26      	ldr	r3, [pc, #152]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80056c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0x200>
 80056d2:	e015      	b.n	8005700 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056d4:	4b24      	ldr	r3, [pc, #144]	; (8005768 <HAL_RCC_OscConfig+0x2b4>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056da:	f7fd fc91 	bl	8003000 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056e2:	f7fd fc8d 	bl	8003000 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e14d      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056f4:	4b1a      	ldr	r3, [pc, #104]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80056f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1f0      	bne.n	80056e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 80a0 	beq.w	800584e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800570e:	2300      	movs	r3, #0
 8005710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005712:	4b13      	ldr	r3, [pc, #76]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10f      	bne.n	800573e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800571e:	2300      	movs	r3, #0
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	4a0e      	ldr	r2, [pc, #56]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572c:	6413      	str	r3, [r2, #64]	; 0x40
 800572e:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005736:	60bb      	str	r3, [r7, #8]
 8005738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800573a:	2301      	movs	r3, #1
 800573c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800573e:	4b0b      	ldr	r3, [pc, #44]	; (800576c <HAL_RCC_OscConfig+0x2b8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005746:	2b00      	cmp	r3, #0
 8005748:	d121      	bne.n	800578e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800574a:	4b08      	ldr	r3, [pc, #32]	; (800576c <HAL_RCC_OscConfig+0x2b8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a07      	ldr	r2, [pc, #28]	; (800576c <HAL_RCC_OscConfig+0x2b8>)
 8005750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005756:	f7fd fc53 	bl	8003000 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800575c:	e011      	b.n	8005782 <HAL_RCC_OscConfig+0x2ce>
 800575e:	bf00      	nop
 8005760:	40023800 	.word	0x40023800
 8005764:	42470000 	.word	0x42470000
 8005768:	42470e80 	.word	0x42470e80
 800576c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005770:	f7fd fc46 	bl	8003000 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e106      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005782:	4b85      	ldr	r3, [pc, #532]	; (8005998 <HAL_RCC_OscConfig+0x4e4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d106      	bne.n	80057a4 <HAL_RCC_OscConfig+0x2f0>
 8005796:	4b81      	ldr	r3, [pc, #516]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 8005798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579a:	4a80      	ldr	r2, [pc, #512]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 800579c:	f043 0301 	orr.w	r3, r3, #1
 80057a0:	6713      	str	r3, [r2, #112]	; 0x70
 80057a2:	e01c      	b.n	80057de <HAL_RCC_OscConfig+0x32a>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b05      	cmp	r3, #5
 80057aa:	d10c      	bne.n	80057c6 <HAL_RCC_OscConfig+0x312>
 80057ac:	4b7b      	ldr	r3, [pc, #492]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	4a7a      	ldr	r2, [pc, #488]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 80057b2:	f043 0304 	orr.w	r3, r3, #4
 80057b6:	6713      	str	r3, [r2, #112]	; 0x70
 80057b8:	4b78      	ldr	r3, [pc, #480]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 80057ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057bc:	4a77      	ldr	r2, [pc, #476]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	6713      	str	r3, [r2, #112]	; 0x70
 80057c4:	e00b      	b.n	80057de <HAL_RCC_OscConfig+0x32a>
 80057c6:	4b75      	ldr	r3, [pc, #468]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	4a74      	ldr	r2, [pc, #464]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 80057cc:	f023 0301 	bic.w	r3, r3, #1
 80057d0:	6713      	str	r3, [r2, #112]	; 0x70
 80057d2:	4b72      	ldr	r3, [pc, #456]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	4a71      	ldr	r2, [pc, #452]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 80057d8:	f023 0304 	bic.w	r3, r3, #4
 80057dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d015      	beq.n	8005812 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e6:	f7fd fc0b 	bl	8003000 <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ec:	e00a      	b.n	8005804 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ee:	f7fd fc07 	bl	8003000 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e0c5      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005804:	4b65      	ldr	r3, [pc, #404]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 8005806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0ee      	beq.n	80057ee <HAL_RCC_OscConfig+0x33a>
 8005810:	e014      	b.n	800583c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005812:	f7fd fbf5 	bl	8003000 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005818:	e00a      	b.n	8005830 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800581a:	f7fd fbf1 	bl	8003000 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	f241 3288 	movw	r2, #5000	; 0x1388
 8005828:	4293      	cmp	r3, r2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e0af      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005830:	4b5a      	ldr	r3, [pc, #360]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1ee      	bne.n	800581a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800583c:	7dfb      	ldrb	r3, [r7, #23]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d105      	bne.n	800584e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005842:	4b56      	ldr	r3, [pc, #344]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	4a55      	ldr	r2, [pc, #340]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 8005848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800584c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 809b 	beq.w	800598e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005858:	4b50      	ldr	r3, [pc, #320]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 030c 	and.w	r3, r3, #12
 8005860:	2b08      	cmp	r3, #8
 8005862:	d05c      	beq.n	800591e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d141      	bne.n	80058f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800586c:	4b4c      	ldr	r3, [pc, #304]	; (80059a0 <HAL_RCC_OscConfig+0x4ec>)
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005872:	f7fd fbc5 	bl	8003000 <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800587a:	f7fd fbc1 	bl	8003000 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e081      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800588c:	4b43      	ldr	r3, [pc, #268]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f0      	bne.n	800587a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	019b      	lsls	r3, r3, #6
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	085b      	lsrs	r3, r3, #1
 80058b0:	3b01      	subs	r3, #1
 80058b2:	041b      	lsls	r3, r3, #16
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	061b      	lsls	r3, r3, #24
 80058bc:	4937      	ldr	r1, [pc, #220]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058c2:	4b37      	ldr	r3, [pc, #220]	; (80059a0 <HAL_RCC_OscConfig+0x4ec>)
 80058c4:	2201      	movs	r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c8:	f7fd fb9a 	bl	8003000 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d0:	f7fd fb96 	bl	8003000 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e056      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058e2:	4b2e      	ldr	r3, [pc, #184]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f0      	beq.n	80058d0 <HAL_RCC_OscConfig+0x41c>
 80058ee:	e04e      	b.n	800598e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f0:	4b2b      	ldr	r3, [pc, #172]	; (80059a0 <HAL_RCC_OscConfig+0x4ec>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f6:	f7fd fb83 	bl	8003000 <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058fe:	f7fd fb7f 	bl	8003000 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e03f      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005910:	4b22      	ldr	r3, [pc, #136]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1f0      	bne.n	80058fe <HAL_RCC_OscConfig+0x44a>
 800591c:	e037      	b.n	800598e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e032      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800592a:	4b1c      	ldr	r3, [pc, #112]	; (800599c <HAL_RCC_OscConfig+0x4e8>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d028      	beq.n	800598a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005942:	429a      	cmp	r2, r3
 8005944:	d121      	bne.n	800598a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005950:	429a      	cmp	r2, r3
 8005952:	d11a      	bne.n	800598a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800595a:	4013      	ands	r3, r2
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005960:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005962:	4293      	cmp	r3, r2
 8005964:	d111      	bne.n	800598a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	085b      	lsrs	r3, r3, #1
 8005972:	3b01      	subs	r3, #1
 8005974:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005976:	429a      	cmp	r2, r3
 8005978:	d107      	bne.n	800598a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005986:	429a      	cmp	r2, r3
 8005988:	d001      	beq.n	800598e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40007000 	.word	0x40007000
 800599c:	40023800 	.word	0x40023800
 80059a0:	42470060 	.word	0x42470060

080059a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0cc      	b.n	8005b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059b8:	4b68      	ldr	r3, [pc, #416]	; (8005b5c <HAL_RCC_ClockConfig+0x1b8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d90c      	bls.n	80059e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c6:	4b65      	ldr	r3, [pc, #404]	; (8005b5c <HAL_RCC_ClockConfig+0x1b8>)
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ce:	4b63      	ldr	r3, [pc, #396]	; (8005b5c <HAL_RCC_ClockConfig+0x1b8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d001      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e0b8      	b.n	8005b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d020      	beq.n	8005a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059f8:	4b59      	ldr	r3, [pc, #356]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	4a58      	ldr	r2, [pc, #352]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 80059fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d005      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a10:	4b53      	ldr	r3, [pc, #332]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	4a52      	ldr	r2, [pc, #328]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 8005a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a1c:	4b50      	ldr	r3, [pc, #320]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	494d      	ldr	r1, [pc, #308]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d044      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d107      	bne.n	8005a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a42:	4b47      	ldr	r3, [pc, #284]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d119      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e07f      	b.n	8005b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d003      	beq.n	8005a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d107      	bne.n	8005a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a62:	4b3f      	ldr	r3, [pc, #252]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d109      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e06f      	b.n	8005b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a72:	4b3b      	ldr	r3, [pc, #236]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e067      	b.n	8005b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a82:	4b37      	ldr	r3, [pc, #220]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f023 0203 	bic.w	r2, r3, #3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	4934      	ldr	r1, [pc, #208]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a94:	f7fd fab4 	bl	8003000 <HAL_GetTick>
 8005a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a9a:	e00a      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a9c:	f7fd fab0 	bl	8003000 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e04f      	b.n	8005b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab2:	4b2b      	ldr	r3, [pc, #172]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 020c 	and.w	r2, r3, #12
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d1eb      	bne.n	8005a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ac4:	4b25      	ldr	r3, [pc, #148]	; (8005b5c <HAL_RCC_ClockConfig+0x1b8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d20c      	bcs.n	8005aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ad2:	4b22      	ldr	r3, [pc, #136]	; (8005b5c <HAL_RCC_ClockConfig+0x1b8>)
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ada:	4b20      	ldr	r3, [pc, #128]	; (8005b5c <HAL_RCC_ClockConfig+0x1b8>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d001      	beq.n	8005aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e032      	b.n	8005b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d008      	beq.n	8005b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005af8:	4b19      	ldr	r3, [pc, #100]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	4916      	ldr	r1, [pc, #88]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d009      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b16:	4b12      	ldr	r3, [pc, #72]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	490e      	ldr	r1, [pc, #56]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b2a:	f000 f821 	bl	8005b70 <HAL_RCC_GetSysClockFreq>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	490a      	ldr	r1, [pc, #40]	; (8005b64 <HAL_RCC_ClockConfig+0x1c0>)
 8005b3c:	5ccb      	ldrb	r3, [r1, r3]
 8005b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b42:	4a09      	ldr	r2, [pc, #36]	; (8005b68 <HAL_RCC_ClockConfig+0x1c4>)
 8005b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b46:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <HAL_RCC_ClockConfig+0x1c8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fd f88a 	bl	8002c64 <HAL_InitTick>

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	40023c00 	.word	0x40023c00
 8005b60:	40023800 	.word	0x40023800
 8005b64:	0800fe60 	.word	0x0800fe60
 8005b68:	20000004 	.word	0x20000004
 8005b6c:	20000008 	.word	0x20000008

08005b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	607b      	str	r3, [r7, #4]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	2300      	movs	r3, #0
 8005b82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b88:	4b67      	ldr	r3, [pc, #412]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f003 030c 	and.w	r3, r3, #12
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d00d      	beq.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	f200 80bd 	bhi.w	8005d14 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d003      	beq.n	8005baa <HAL_RCC_GetSysClockFreq+0x3a>
 8005ba2:	e0b7      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ba4:	4b61      	ldr	r3, [pc, #388]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ba6:	60bb      	str	r3, [r7, #8]
       break;
 8005ba8:	e0b7      	b.n	8005d1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005baa:	4b61      	ldr	r3, [pc, #388]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005bac:	60bb      	str	r3, [r7, #8]
      break;
 8005bae:	e0b4      	b.n	8005d1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bb0:	4b5d      	ldr	r3, [pc, #372]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bba:	4b5b      	ldr	r3, [pc, #364]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d04d      	beq.n	8005c62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bc6:	4b58      	ldr	r3, [pc, #352]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	099b      	lsrs	r3, r3, #6
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f04f 0300 	mov.w	r3, #0
 8005bd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005bd6:	f04f 0100 	mov.w	r1, #0
 8005bda:	ea02 0800 	and.w	r8, r2, r0
 8005bde:	ea03 0901 	and.w	r9, r3, r1
 8005be2:	4640      	mov	r0, r8
 8005be4:	4649      	mov	r1, r9
 8005be6:	f04f 0200 	mov.w	r2, #0
 8005bea:	f04f 0300 	mov.w	r3, #0
 8005bee:	014b      	lsls	r3, r1, #5
 8005bf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005bf4:	0142      	lsls	r2, r0, #5
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	ebb0 0008 	subs.w	r0, r0, r8
 8005bfe:	eb61 0109 	sbc.w	r1, r1, r9
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	f04f 0300 	mov.w	r3, #0
 8005c0a:	018b      	lsls	r3, r1, #6
 8005c0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c10:	0182      	lsls	r2, r0, #6
 8005c12:	1a12      	subs	r2, r2, r0
 8005c14:	eb63 0301 	sbc.w	r3, r3, r1
 8005c18:	f04f 0000 	mov.w	r0, #0
 8005c1c:	f04f 0100 	mov.w	r1, #0
 8005c20:	00d9      	lsls	r1, r3, #3
 8005c22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c26:	00d0      	lsls	r0, r2, #3
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	eb12 0208 	adds.w	r2, r2, r8
 8005c30:	eb43 0309 	adc.w	r3, r3, r9
 8005c34:	f04f 0000 	mov.w	r0, #0
 8005c38:	f04f 0100 	mov.w	r1, #0
 8005c3c:	0259      	lsls	r1, r3, #9
 8005c3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005c42:	0250      	lsls	r0, r2, #9
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	f7fb f820 	bl	8000c98 <__aeabi_uldivmod>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	e04a      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c62:	4b31      	ldr	r3, [pc, #196]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	099b      	lsrs	r3, r3, #6
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c72:	f04f 0100 	mov.w	r1, #0
 8005c76:	ea02 0400 	and.w	r4, r2, r0
 8005c7a:	ea03 0501 	and.w	r5, r3, r1
 8005c7e:	4620      	mov	r0, r4
 8005c80:	4629      	mov	r1, r5
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	014b      	lsls	r3, r1, #5
 8005c8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c90:	0142      	lsls	r2, r0, #5
 8005c92:	4610      	mov	r0, r2
 8005c94:	4619      	mov	r1, r3
 8005c96:	1b00      	subs	r0, r0, r4
 8005c98:	eb61 0105 	sbc.w	r1, r1, r5
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	018b      	lsls	r3, r1, #6
 8005ca6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005caa:	0182      	lsls	r2, r0, #6
 8005cac:	1a12      	subs	r2, r2, r0
 8005cae:	eb63 0301 	sbc.w	r3, r3, r1
 8005cb2:	f04f 0000 	mov.w	r0, #0
 8005cb6:	f04f 0100 	mov.w	r1, #0
 8005cba:	00d9      	lsls	r1, r3, #3
 8005cbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cc0:	00d0      	lsls	r0, r2, #3
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	1912      	adds	r2, r2, r4
 8005cc8:	eb45 0303 	adc.w	r3, r5, r3
 8005ccc:	f04f 0000 	mov.w	r0, #0
 8005cd0:	f04f 0100 	mov.w	r1, #0
 8005cd4:	0299      	lsls	r1, r3, #10
 8005cd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005cda:	0290      	lsls	r0, r2, #10
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	f7fa ffd4 	bl	8000c98 <__aeabi_uldivmod>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cf8:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	0c1b      	lsrs	r3, r3, #16
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	3301      	adds	r3, #1
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d10:	60bb      	str	r3, [r7, #8]
      break;
 8005d12:	e002      	b.n	8005d1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d14:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d16:	60bb      	str	r3, [r7, #8]
      break;
 8005d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d26:	bf00      	nop
 8005d28:	40023800 	.word	0x40023800
 8005d2c:	00f42400 	.word	0x00f42400
 8005d30:	007a1200 	.word	0x007a1200

08005d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d38:	4b03      	ldr	r3, [pc, #12]	; (8005d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	20000004 	.word	0x20000004

08005d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d50:	f7ff fff0 	bl	8005d34 <HAL_RCC_GetHCLKFreq>
 8005d54:	4602      	mov	r2, r0
 8005d56:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	0a9b      	lsrs	r3, r3, #10
 8005d5c:	f003 0307 	and.w	r3, r3, #7
 8005d60:	4903      	ldr	r1, [pc, #12]	; (8005d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d62:	5ccb      	ldrb	r3, [r1, r3]
 8005d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	0800fe70 	.word	0x0800fe70

08005d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d78:	f7ff ffdc 	bl	8005d34 <HAL_RCC_GetHCLKFreq>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	0b5b      	lsrs	r3, r3, #13
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	4903      	ldr	r1, [pc, #12]	; (8005d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d8a:	5ccb      	ldrb	r3, [r1, r3]
 8005d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40023800 	.word	0x40023800
 8005d98:	0800fe70 	.word	0x0800fe70

08005d9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	220f      	movs	r2, #15
 8005daa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005dac:	4b12      	ldr	r3, [pc, #72]	; (8005df8 <HAL_RCC_GetClockConfig+0x5c>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 0203 	and.w	r2, r3, #3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005db8:	4b0f      	ldr	r3, [pc, #60]	; (8005df8 <HAL_RCC_GetClockConfig+0x5c>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005dc4:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <HAL_RCC_GetClockConfig+0x5c>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005dd0:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <HAL_RCC_GetClockConfig+0x5c>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	08db      	lsrs	r3, r3, #3
 8005dd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005dde:	4b07      	ldr	r3, [pc, #28]	; (8005dfc <HAL_RCC_GetClockConfig+0x60>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0207 	and.w	r2, r3, #7
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	601a      	str	r2, [r3, #0]
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	40023c00 	.word	0x40023c00

08005e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e07b      	b.n	8005f0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d108      	bne.n	8005e2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e22:	d009      	beq.n	8005e38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	61da      	str	r2, [r3, #28]
 8005e2a:	e005      	b.n	8005e38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7fc fe06 	bl	8002a64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	431a      	orrs	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ebc:	ea42 0103 	orr.w	r1, r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	0c1b      	lsrs	r3, r3, #16
 8005ed6:	f003 0104 	and.w	r1, r3, #4
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	f003 0210 	and.w	r2, r3, #16
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69da      	ldr	r2, [r3, #28]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b088      	sub	sp, #32
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	603b      	str	r3, [r7, #0]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_SPI_Transmit+0x22>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e126      	b.n	8006182 <HAL_SPI_Transmit+0x270>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f3c:	f7fd f860 	bl	8003000 <HAL_GetTick>
 8005f40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f42:	88fb      	ldrh	r3, [r7, #6]
 8005f44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d002      	beq.n	8005f58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f52:	2302      	movs	r3, #2
 8005f54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f56:	e10b      	b.n	8006170 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_SPI_Transmit+0x52>
 8005f5e:	88fb      	ldrh	r3, [r7, #6]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d102      	bne.n	8005f6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f68:	e102      	b.n	8006170 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2203      	movs	r2, #3
 8005f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	88fa      	ldrh	r2, [r7, #6]
 8005f82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	88fa      	ldrh	r2, [r7, #6]
 8005f88:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb0:	d10f      	bne.n	8005fd2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fdc:	2b40      	cmp	r3, #64	; 0x40
 8005fde:	d007      	beq.n	8005ff0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff8:	d14b      	bne.n	8006092 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <HAL_SPI_Transmit+0xf6>
 8006002:	8afb      	ldrh	r3, [r7, #22]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d13e      	bne.n	8006086 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600c:	881a      	ldrh	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	1c9a      	adds	r2, r3, #2
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006022:	b29b      	uxth	r3, r3
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800602c:	e02b      	b.n	8006086 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b02      	cmp	r3, #2
 800603a:	d112      	bne.n	8006062 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006040:	881a      	ldrh	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	1c9a      	adds	r2, r3, #2
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006056:	b29b      	uxth	r3, r3
 8006058:	3b01      	subs	r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006060:	e011      	b.n	8006086 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006062:	f7fc ffcd 	bl	8003000 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	429a      	cmp	r2, r3
 8006070:	d803      	bhi.n	800607a <HAL_SPI_Transmit+0x168>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006078:	d102      	bne.n	8006080 <HAL_SPI_Transmit+0x16e>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d102      	bne.n	8006086 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006084:	e074      	b.n	8006170 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800608a:	b29b      	uxth	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1ce      	bne.n	800602e <HAL_SPI_Transmit+0x11c>
 8006090:	e04c      	b.n	800612c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <HAL_SPI_Transmit+0x18e>
 800609a:	8afb      	ldrh	r3, [r7, #22]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d140      	bne.n	8006122 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	330c      	adds	r3, #12
 80060aa:	7812      	ldrb	r2, [r2, #0]
 80060ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060c6:	e02c      	b.n	8006122 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d113      	bne.n	80060fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	330c      	adds	r3, #12
 80060e0:	7812      	ldrb	r2, [r2, #0]
 80060e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80060fc:	e011      	b.n	8006122 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060fe:	f7fc ff7f 	bl	8003000 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d803      	bhi.n	8006116 <HAL_SPI_Transmit+0x204>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006114:	d102      	bne.n	800611c <HAL_SPI_Transmit+0x20a>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d102      	bne.n	8006122 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006120:	e026      	b.n	8006170 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1cd      	bne.n	80060c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 fbcb 	bl	80068cc <SPI_EndRxTxTransaction>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800614a:	2300      	movs	r3, #0
 800614c:	613b      	str	r3, [r7, #16]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	77fb      	strb	r3, [r7, #31]
 800616c:	e000      	b.n	8006170 <HAL_SPI_Transmit+0x25e>
  }

error:
 800616e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006180:	7ffb      	ldrb	r3, [r7, #31]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b088      	sub	sp, #32
 800618e:	af02      	add	r7, sp, #8
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	603b      	str	r3, [r7, #0]
 8006196:	4613      	mov	r3, r2
 8006198:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061a6:	d112      	bne.n	80061ce <HAL_SPI_Receive+0x44>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10e      	bne.n	80061ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2204      	movs	r2, #4
 80061b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80061b8:	88fa      	ldrh	r2, [r7, #6]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	4613      	mov	r3, r2
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 f8f1 	bl	80063ac <HAL_SPI_TransmitReceive>
 80061ca:	4603      	mov	r3, r0
 80061cc:	e0ea      	b.n	80063a4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_SPI_Receive+0x52>
 80061d8:	2302      	movs	r3, #2
 80061da:	e0e3      	b.n	80063a4 <HAL_SPI_Receive+0x21a>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061e4:	f7fc ff0c 	bl	8003000 <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d002      	beq.n	80061fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80061f6:	2302      	movs	r3, #2
 80061f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061fa:	e0ca      	b.n	8006392 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <HAL_SPI_Receive+0x7e>
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d102      	bne.n	800620e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800620c:	e0c1      	b.n	8006392 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2204      	movs	r2, #4
 8006212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	88fa      	ldrh	r2, [r7, #6]
 8006226:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	88fa      	ldrh	r2, [r7, #6]
 800622c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006254:	d10f      	bne.n	8006276 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006274:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006280:	2b40      	cmp	r3, #64	; 0x40
 8006282:	d007      	beq.n	8006294 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006292:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d162      	bne.n	8006362 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800629c:	e02e      	b.n	80062fc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d115      	bne.n	80062d8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f103 020c 	add.w	r2, r3, #12
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	7812      	ldrb	r2, [r2, #0]
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062d6:	e011      	b.n	80062fc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062d8:	f7fc fe92 	bl	8003000 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d803      	bhi.n	80062f0 <HAL_SPI_Receive+0x166>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ee:	d102      	bne.n	80062f6 <HAL_SPI_Receive+0x16c>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d102      	bne.n	80062fc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80062fa:	e04a      	b.n	8006392 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1cb      	bne.n	800629e <HAL_SPI_Receive+0x114>
 8006306:	e031      	b.n	800636c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b01      	cmp	r3, #1
 8006314:	d113      	bne.n	800633e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	b292      	uxth	r2, r2
 8006322:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	1c9a      	adds	r2, r3, #2
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800633c:	e011      	b.n	8006362 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800633e:	f7fc fe5f 	bl	8003000 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d803      	bhi.n	8006356 <HAL_SPI_Receive+0x1cc>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006354:	d102      	bne.n	800635c <HAL_SPI_Receive+0x1d2>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d102      	bne.n	8006362 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006360:	e017      	b.n	8006392 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006366:	b29b      	uxth	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1cd      	bne.n	8006308 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 fa45 	bl	8006800 <SPI_EndRxTransaction>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2220      	movs	r2, #32
 8006380:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	75fb      	strb	r3, [r7, #23]
 800638e:	e000      	b.n	8006392 <HAL_SPI_Receive+0x208>
  }

error :
 8006390:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08c      	sub	sp, #48	; 0x30
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80063ba:	2301      	movs	r3, #1
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d101      	bne.n	80063d2 <HAL_SPI_TransmitReceive+0x26>
 80063ce:	2302      	movs	r3, #2
 80063d0:	e18a      	b.n	80066e8 <HAL_SPI_TransmitReceive+0x33c>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063da:	f7fc fe11 	bl	8003000 <HAL_GetTick>
 80063de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80063f0:	887b      	ldrh	r3, [r7, #2]
 80063f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d00f      	beq.n	800641c <HAL_SPI_TransmitReceive+0x70>
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006402:	d107      	bne.n	8006414 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d103      	bne.n	8006414 <HAL_SPI_TransmitReceive+0x68>
 800640c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006410:	2b04      	cmp	r3, #4
 8006412:	d003      	beq.n	800641c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006414:	2302      	movs	r3, #2
 8006416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800641a:	e15b      	b.n	80066d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d005      	beq.n	800642e <HAL_SPI_TransmitReceive+0x82>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <HAL_SPI_TransmitReceive+0x82>
 8006428:	887b      	ldrh	r3, [r7, #2]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d103      	bne.n	8006436 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006434:	e14e      	b.n	80066d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b04      	cmp	r3, #4
 8006440:	d003      	beq.n	800644a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2205      	movs	r2, #5
 8006446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	887a      	ldrh	r2, [r7, #2]
 800645a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	887a      	ldrh	r2, [r7, #2]
 8006460:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	887a      	ldrh	r2, [r7, #2]
 800646c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	887a      	ldrh	r2, [r7, #2]
 8006472:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b40      	cmp	r3, #64	; 0x40
 800648c:	d007      	beq.n	800649e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800649c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a6:	d178      	bne.n	800659a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <HAL_SPI_TransmitReceive+0x10a>
 80064b0:	8b7b      	ldrh	r3, [r7, #26]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d166      	bne.n	8006584 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ba:	881a      	ldrh	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c6:	1c9a      	adds	r2, r3, #2
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	3b01      	subs	r3, #1
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064da:	e053      	b.n	8006584 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d11b      	bne.n	8006522 <HAL_SPI_TransmitReceive+0x176>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d016      	beq.n	8006522 <HAL_SPI_TransmitReceive+0x176>
 80064f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d113      	bne.n	8006522 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	881a      	ldrh	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650a:	1c9a      	adds	r2, r3, #2
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006514:	b29b      	uxth	r3, r3
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b01      	cmp	r3, #1
 800652e:	d119      	bne.n	8006564 <HAL_SPI_TransmitReceive+0x1b8>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d014      	beq.n	8006564 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006544:	b292      	uxth	r2, r2
 8006546:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	1c9a      	adds	r2, r3, #2
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006556:	b29b      	uxth	r3, r3
 8006558:	3b01      	subs	r3, #1
 800655a:	b29a      	uxth	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006560:	2301      	movs	r3, #1
 8006562:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006564:	f7fc fd4c 	bl	8003000 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006570:	429a      	cmp	r2, r3
 8006572:	d807      	bhi.n	8006584 <HAL_SPI_TransmitReceive+0x1d8>
 8006574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657a:	d003      	beq.n	8006584 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006582:	e0a7      	b.n	80066d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006588:	b29b      	uxth	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1a6      	bne.n	80064dc <HAL_SPI_TransmitReceive+0x130>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006592:	b29b      	uxth	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1a1      	bne.n	80064dc <HAL_SPI_TransmitReceive+0x130>
 8006598:	e07c      	b.n	8006694 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <HAL_SPI_TransmitReceive+0x1fc>
 80065a2:	8b7b      	ldrh	r3, [r7, #26]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d16b      	bne.n	8006680 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	330c      	adds	r3, #12
 80065b2:	7812      	ldrb	r2, [r2, #0]
 80065b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ce:	e057      	b.n	8006680 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d11c      	bne.n	8006618 <HAL_SPI_TransmitReceive+0x26c>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d017      	beq.n	8006618 <HAL_SPI_TransmitReceive+0x26c>
 80065e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d114      	bne.n	8006618 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	7812      	ldrb	r2, [r2, #0]
 80065fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800660a:	b29b      	uxth	r3, r3
 800660c:	3b01      	subs	r3, #1
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b01      	cmp	r3, #1
 8006624:	d119      	bne.n	800665a <HAL_SPI_TransmitReceive+0x2ae>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800662a:	b29b      	uxth	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d014      	beq.n	800665a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006656:	2301      	movs	r3, #1
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800665a:	f7fc fcd1 	bl	8003000 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006666:	429a      	cmp	r2, r3
 8006668:	d803      	bhi.n	8006672 <HAL_SPI_TransmitReceive+0x2c6>
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006670:	d102      	bne.n	8006678 <HAL_SPI_TransmitReceive+0x2cc>
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	2b00      	cmp	r3, #0
 8006676:	d103      	bne.n	8006680 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800667e:	e029      	b.n	80066d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1a2      	bne.n	80065d0 <HAL_SPI_TransmitReceive+0x224>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800668e:	b29b      	uxth	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d19d      	bne.n	80065d0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006696:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 f917 	bl	80068cc <SPI_EndRxTxTransaction>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d006      	beq.n	80066b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80066b0:	e010      	b.n	80066d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10b      	bne.n	80066d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066ba:	2300      	movs	r3, #0
 80066bc:	617b      	str	r3, [r7, #20]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	e000      	b.n	80066d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80066d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3730      	adds	r7, #48	; 0x30
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	4613      	mov	r3, r2
 80066fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006700:	f7fc fc7e 	bl	8003000 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	1a9b      	subs	r3, r3, r2
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	4413      	add	r3, r2
 800670e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006710:	f7fc fc76 	bl	8003000 <HAL_GetTick>
 8006714:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006716:	4b39      	ldr	r3, [pc, #228]	; (80067fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	015b      	lsls	r3, r3, #5
 800671c:	0d1b      	lsrs	r3, r3, #20
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	fb02 f303 	mul.w	r3, r2, r3
 8006724:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006726:	e054      	b.n	80067d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672e:	d050      	beq.n	80067d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006730:	f7fc fc66 	bl	8003000 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	429a      	cmp	r2, r3
 800673e:	d902      	bls.n	8006746 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d13d      	bne.n	80067c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006754:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800675e:	d111      	bne.n	8006784 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006768:	d004      	beq.n	8006774 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006772:	d107      	bne.n	8006784 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006782:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800678c:	d10f      	bne.n	80067ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e017      	b.n	80067f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	4013      	ands	r3, r2
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	429a      	cmp	r2, r3
 80067e0:	bf0c      	ite	eq
 80067e2:	2301      	moveq	r3, #1
 80067e4:	2300      	movne	r3, #0
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	79fb      	ldrb	r3, [r7, #7]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d19b      	bne.n	8006728 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3720      	adds	r7, #32
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000004 	.word	0x20000004

08006800 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af02      	add	r7, sp, #8
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006814:	d111      	bne.n	800683a <SPI_EndRxTransaction+0x3a>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800681e:	d004      	beq.n	800682a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006828:	d107      	bne.n	800683a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006838:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006842:	d12a      	bne.n	800689a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800684c:	d012      	beq.n	8006874 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	2200      	movs	r2, #0
 8006856:	2180      	movs	r1, #128	; 0x80
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f7ff ff49 	bl	80066f0 <SPI_WaitFlagStateUntilTimeout>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d02d      	beq.n	80068c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006868:	f043 0220 	orr.w	r2, r3, #32
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e026      	b.n	80068c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2200      	movs	r2, #0
 800687c:	2101      	movs	r1, #1
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f7ff ff36 	bl	80066f0 <SPI_WaitFlagStateUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d01a      	beq.n	80068c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688e:	f043 0220 	orr.w	r2, r3, #32
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e013      	b.n	80068c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2200      	movs	r2, #0
 80068a2:	2101      	movs	r1, #1
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f7ff ff23 	bl	80066f0 <SPI_WaitFlagStateUntilTimeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d007      	beq.n	80068c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b4:	f043 0220 	orr.w	r2, r3, #32
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e000      	b.n	80068c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80068d8:	4b1b      	ldr	r3, [pc, #108]	; (8006948 <SPI_EndRxTxTransaction+0x7c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1b      	ldr	r2, [pc, #108]	; (800694c <SPI_EndRxTxTransaction+0x80>)
 80068de:	fba2 2303 	umull	r2, r3, r2, r3
 80068e2:	0d5b      	lsrs	r3, r3, #21
 80068e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068e8:	fb02 f303 	mul.w	r3, r2, r3
 80068ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068f6:	d112      	bne.n	800691e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2200      	movs	r2, #0
 8006900:	2180      	movs	r1, #128	; 0x80
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7ff fef4 	bl	80066f0 <SPI_WaitFlagStateUntilTimeout>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d016      	beq.n	800693c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006912:	f043 0220 	orr.w	r2, r3, #32
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e00f      	b.n	800693e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00a      	beq.n	800693a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	3b01      	subs	r3, #1
 8006928:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006934:	2b80      	cmp	r3, #128	; 0x80
 8006936:	d0f2      	beq.n	800691e <SPI_EndRxTxTransaction+0x52>
 8006938:	e000      	b.n	800693c <SPI_EndRxTxTransaction+0x70>
        break;
 800693a:	bf00      	nop
  }

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20000004 	.word	0x20000004
 800694c:	165e9f81 	.word	0x165e9f81

08006950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e041      	b.n	80069e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d106      	bne.n	800697c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f839 	bl	80069ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3304      	adds	r3, #4
 800698c:	4619      	mov	r1, r3
 800698e:	4610      	mov	r0, r2
 8006990:	f000 f9ca 	bl	8006d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
	...

08006a04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d001      	beq.n	8006a1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e044      	b.n	8006aa6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0201 	orr.w	r2, r2, #1
 8006a32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a1e      	ldr	r2, [pc, #120]	; (8006ab4 <HAL_TIM_Base_Start_IT+0xb0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d018      	beq.n	8006a70 <HAL_TIM_Base_Start_IT+0x6c>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a46:	d013      	beq.n	8006a70 <HAL_TIM_Base_Start_IT+0x6c>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a1a      	ldr	r2, [pc, #104]	; (8006ab8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d00e      	beq.n	8006a70 <HAL_TIM_Base_Start_IT+0x6c>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a19      	ldr	r2, [pc, #100]	; (8006abc <HAL_TIM_Base_Start_IT+0xb8>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d009      	beq.n	8006a70 <HAL_TIM_Base_Start_IT+0x6c>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a17      	ldr	r2, [pc, #92]	; (8006ac0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d004      	beq.n	8006a70 <HAL_TIM_Base_Start_IT+0x6c>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a16      	ldr	r2, [pc, #88]	; (8006ac4 <HAL_TIM_Base_Start_IT+0xc0>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d111      	bne.n	8006a94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b06      	cmp	r3, #6
 8006a80:	d010      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f042 0201 	orr.w	r2, r2, #1
 8006a90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a92:	e007      	b.n	8006aa4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f042 0201 	orr.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	40010000 	.word	0x40010000
 8006ab8:	40000400 	.word	0x40000400
 8006abc:	40000800 	.word	0x40000800
 8006ac0:	40000c00 	.word	0x40000c00
 8006ac4:	40014000 	.word	0x40014000

08006ac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d122      	bne.n	8006b24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d11b      	bne.n	8006b24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f06f 0202 	mvn.w	r2, #2
 8006af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f8ee 	bl	8006cec <HAL_TIM_IC_CaptureCallback>
 8006b10:	e005      	b.n	8006b1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f8e0 	bl	8006cd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f8f1 	bl	8006d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f003 0304 	and.w	r3, r3, #4
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d122      	bne.n	8006b78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	d11b      	bne.n	8006b78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f06f 0204 	mvn.w	r2, #4
 8006b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f8c4 	bl	8006cec <HAL_TIM_IC_CaptureCallback>
 8006b64:	e005      	b.n	8006b72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f8b6 	bl	8006cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f8c7 	bl	8006d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0308 	and.w	r3, r3, #8
 8006b82:	2b08      	cmp	r3, #8
 8006b84:	d122      	bne.n	8006bcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f003 0308 	and.w	r3, r3, #8
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d11b      	bne.n	8006bcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f06f 0208 	mvn.w	r2, #8
 8006b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2204      	movs	r2, #4
 8006ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f89a 	bl	8006cec <HAL_TIM_IC_CaptureCallback>
 8006bb8:	e005      	b.n	8006bc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f88c 	bl	8006cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f89d 	bl	8006d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f003 0310 	and.w	r3, r3, #16
 8006bd6:	2b10      	cmp	r3, #16
 8006bd8:	d122      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f003 0310 	and.w	r3, r3, #16
 8006be4:	2b10      	cmp	r3, #16
 8006be6:	d11b      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f06f 0210 	mvn.w	r2, #16
 8006bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2208      	movs	r2, #8
 8006bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f870 	bl	8006cec <HAL_TIM_IC_CaptureCallback>
 8006c0c:	e005      	b.n	8006c1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f862 	bl	8006cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f873 	bl	8006d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d10e      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d107      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f06f 0201 	mvn.w	r2, #1
 8006c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fb fcee 	bl	8002628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c56:	2b80      	cmp	r3, #128	; 0x80
 8006c58:	d10e      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c64:	2b80      	cmp	r3, #128	; 0x80
 8006c66:	d107      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f8e2 	bl	8006e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c82:	2b40      	cmp	r3, #64	; 0x40
 8006c84:	d10e      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c90:	2b40      	cmp	r3, #64	; 0x40
 8006c92:	d107      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f838 	bl	8006d14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d10e      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f003 0320 	and.w	r3, r3, #32
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d107      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f06f 0220 	mvn.w	r2, #32
 8006cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f8ac 	bl	8006e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a34      	ldr	r2, [pc, #208]	; (8006e0c <TIM_Base_SetConfig+0xe4>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00f      	beq.n	8006d60 <TIM_Base_SetConfig+0x38>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d46:	d00b      	beq.n	8006d60 <TIM_Base_SetConfig+0x38>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a31      	ldr	r2, [pc, #196]	; (8006e10 <TIM_Base_SetConfig+0xe8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d007      	beq.n	8006d60 <TIM_Base_SetConfig+0x38>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a30      	ldr	r2, [pc, #192]	; (8006e14 <TIM_Base_SetConfig+0xec>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d003      	beq.n	8006d60 <TIM_Base_SetConfig+0x38>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a2f      	ldr	r2, [pc, #188]	; (8006e18 <TIM_Base_SetConfig+0xf0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d108      	bne.n	8006d72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a25      	ldr	r2, [pc, #148]	; (8006e0c <TIM_Base_SetConfig+0xe4>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d01b      	beq.n	8006db2 <TIM_Base_SetConfig+0x8a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d80:	d017      	beq.n	8006db2 <TIM_Base_SetConfig+0x8a>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a22      	ldr	r2, [pc, #136]	; (8006e10 <TIM_Base_SetConfig+0xe8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d013      	beq.n	8006db2 <TIM_Base_SetConfig+0x8a>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a21      	ldr	r2, [pc, #132]	; (8006e14 <TIM_Base_SetConfig+0xec>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00f      	beq.n	8006db2 <TIM_Base_SetConfig+0x8a>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a20      	ldr	r2, [pc, #128]	; (8006e18 <TIM_Base_SetConfig+0xf0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d00b      	beq.n	8006db2 <TIM_Base_SetConfig+0x8a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a1f      	ldr	r2, [pc, #124]	; (8006e1c <TIM_Base_SetConfig+0xf4>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d007      	beq.n	8006db2 <TIM_Base_SetConfig+0x8a>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a1e      	ldr	r2, [pc, #120]	; (8006e20 <TIM_Base_SetConfig+0xf8>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d003      	beq.n	8006db2 <TIM_Base_SetConfig+0x8a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a1d      	ldr	r2, [pc, #116]	; (8006e24 <TIM_Base_SetConfig+0xfc>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d108      	bne.n	8006dc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a08      	ldr	r2, [pc, #32]	; (8006e0c <TIM_Base_SetConfig+0xe4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d103      	bne.n	8006df8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	691a      	ldr	r2, [r3, #16]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	615a      	str	r2, [r3, #20]
}
 8006dfe:	bf00      	nop
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	40010000 	.word	0x40010000
 8006e10:	40000400 	.word	0x40000400
 8006e14:	40000800 	.word	0x40000800
 8006e18:	40000c00 	.word	0x40000c00
 8006e1c:	40014000 	.word	0x40014000
 8006e20:	40014400 	.word	0x40014400
 8006e24:	40014800 	.word	0x40014800

08006e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e03f      	b.n	8006ee2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fb fe3c 	bl	8002af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2224      	movs	r2, #36	; 0x24
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fd7f 	bl	8007998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691a      	ldr	r2, [r3, #16]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	695a      	ldr	r2, [r3, #20]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68da      	ldr	r2, [r3, #12]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b08a      	sub	sp, #40	; 0x28
 8006eee:	af02      	add	r7, sp, #8
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	603b      	str	r3, [r7, #0]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b20      	cmp	r3, #32
 8006f08:	d17c      	bne.n	8007004 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <HAL_UART_Transmit+0x2c>
 8006f10:	88fb      	ldrh	r3, [r7, #6]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e075      	b.n	8007006 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_UART_Transmit+0x3e>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e06e      	b.n	8007006 <HAL_UART_Transmit+0x11c>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2221      	movs	r2, #33	; 0x21
 8006f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f3e:	f7fc f85f 	bl	8003000 <HAL_GetTick>
 8006f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	88fa      	ldrh	r2, [r7, #6]
 8006f48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	88fa      	ldrh	r2, [r7, #6]
 8006f4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f58:	d108      	bne.n	8006f6c <HAL_UART_Transmit+0x82>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d104      	bne.n	8006f6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	61bb      	str	r3, [r7, #24]
 8006f6a:	e003      	b.n	8006f74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f7c:	e02a      	b.n	8006fd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2200      	movs	r2, #0
 8006f86:	2180      	movs	r1, #128	; 0x80
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fb01 	bl	8007590 <UART_WaitOnFlagUntilTimeout>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e036      	b.n	8007006 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10b      	bne.n	8006fb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	3302      	adds	r3, #2
 8006fb2:	61bb      	str	r3, [r7, #24]
 8006fb4:	e007      	b.n	8006fc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	781a      	ldrb	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1cf      	bne.n	8006f7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2140      	movs	r1, #64	; 0x40
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 fad1 	bl	8007590 <UART_WaitOnFlagUntilTimeout>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e006      	b.n	8007006 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	e000      	b.n	8007006 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007004:	2302      	movs	r3, #2
  }
}
 8007006:	4618      	mov	r0, r3
 8007008:	3720      	adds	r7, #32
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	4613      	mov	r3, r2
 800701a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b20      	cmp	r3, #32
 8007026:	d11d      	bne.n	8007064 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <HAL_UART_Receive_DMA+0x26>
 800702e:	88fb      	ldrh	r3, [r7, #6]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e016      	b.n	8007066 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800703e:	2b01      	cmp	r3, #1
 8007040:	d101      	bne.n	8007046 <HAL_UART_Receive_DMA+0x38>
 8007042:	2302      	movs	r3, #2
 8007044:	e00f      	b.n	8007066 <HAL_UART_Receive_DMA+0x58>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007054:	88fb      	ldrh	r3, [r7, #6]
 8007056:	461a      	mov	r2, r3
 8007058:	68b9      	ldr	r1, [r7, #8]
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 fae2 	bl	8007624 <UART_Start_Receive_DMA>
 8007060:	4603      	mov	r3, r0
 8007062:	e000      	b.n	8007066 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007064:	2302      	movs	r3, #2
  }
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08a      	sub	sp, #40	; 0x28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007090:	2300      	movs	r3, #0
 8007092:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007094:	2300      	movs	r3, #0
 8007096:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10d      	bne.n	80070c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	f003 0320 	and.w	r3, r3, #32
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d008      	beq.n	80070c2 <HAL_UART_IRQHandler+0x52>
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	f003 0320 	and.w	r3, r3, #32
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fbd5 	bl	800786a <UART_Receive_IT>
      return;
 80070c0:	e17c      	b.n	80073bc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 80b1 	beq.w	800722c <HAL_UART_IRQHandler+0x1bc>
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d105      	bne.n	80070e0 <HAL_UART_IRQHandler+0x70>
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 80a6 	beq.w	800722c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <HAL_UART_IRQHandler+0x90>
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	f043 0201 	orr.w	r2, r3, #1
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	f003 0304 	and.w	r3, r3, #4
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00a      	beq.n	8007120 <HAL_UART_IRQHandler+0xb0>
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007118:	f043 0202 	orr.w	r2, r3, #2
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <HAL_UART_IRQHandler+0xd0>
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b00      	cmp	r3, #0
 8007132:	d005      	beq.n	8007140 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007138:	f043 0204 	orr.w	r2, r3, #4
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00f      	beq.n	800716a <HAL_UART_IRQHandler+0xfa>
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	2b00      	cmp	r3, #0
 8007152:	d104      	bne.n	800715e <HAL_UART_IRQHandler+0xee>
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	f043 0208 	orr.w	r2, r3, #8
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 811f 	beq.w	80073b2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d007      	beq.n	800718e <HAL_UART_IRQHandler+0x11e>
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	f003 0320 	and.w	r3, r3, #32
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fb6e 	bl	800786a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007198:	2b40      	cmp	r3, #64	; 0x40
 800719a:	bf0c      	ite	eq
 800719c:	2301      	moveq	r3, #1
 800719e:	2300      	movne	r3, #0
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a8:	f003 0308 	and.w	r3, r3, #8
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d102      	bne.n	80071b6 <HAL_UART_IRQHandler+0x146>
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d031      	beq.n	800721a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 faae 	bl	8007718 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c6:	2b40      	cmp	r3, #64	; 0x40
 80071c8:	d123      	bne.n	8007212 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	695a      	ldr	r2, [r3, #20]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071d8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d013      	beq.n	800720a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	4a77      	ldr	r2, [pc, #476]	; (80073c4 <HAL_UART_IRQHandler+0x354>)
 80071e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fc fd76 	bl	8003ce0 <HAL_DMA_Abort_IT>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d016      	beq.n	8007228 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007204:	4610      	mov	r0, r2
 8007206:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007208:	e00e      	b.n	8007228 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f8fa 	bl	8007404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007210:	e00a      	b.n	8007228 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f8f6 	bl	8007404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007218:	e006      	b.n	8007228 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f8f2 	bl	8007404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007226:	e0c4      	b.n	80073b2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007228:	bf00      	nop
    return;
 800722a:	e0c2      	b.n	80073b2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007230:	2b01      	cmp	r3, #1
 8007232:	f040 80a2 	bne.w	800737a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	f003 0310 	and.w	r3, r3, #16
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 809c 	beq.w	800737a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	f003 0310 	and.w	r3, r3, #16
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 8096 	beq.w	800737a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726e:	2b40      	cmp	r3, #64	; 0x40
 8007270:	d14f      	bne.n	8007312 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800727c:	8a3b      	ldrh	r3, [r7, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 8099 	beq.w	80073b6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007288:	8a3a      	ldrh	r2, [r7, #16]
 800728a:	429a      	cmp	r2, r3
 800728c:	f080 8093 	bcs.w	80073b6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	8a3a      	ldrh	r2, [r7, #16]
 8007294:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072a0:	d02b      	beq.n	80072fa <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072b0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	695a      	ldr	r2, [r3, #20]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0201 	bic.w	r2, r2, #1
 80072c0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	695a      	ldr	r2, [r3, #20]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072d0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0210 	bic.w	r2, r2, #16
 80072ee:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fc fc83 	bl	8003c00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007302:	b29b      	uxth	r3, r3
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	b29b      	uxth	r3, r3
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f884 	bl	8007418 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007310:	e051      	b.n	80073b6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800731a:	b29b      	uxth	r3, r3
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007324:	b29b      	uxth	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d047      	beq.n	80073ba <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800732a:	8a7b      	ldrh	r3, [r7, #18]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d044      	beq.n	80073ba <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800733e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	695a      	ldr	r2, [r3, #20]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f022 0201 	bic.w	r2, r2, #1
 800734e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0210 	bic.w	r2, r2, #16
 800736c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800736e:	8a7b      	ldrh	r3, [r7, #18]
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f850 	bl	8007418 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007378:	e01f      	b.n	80073ba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007380:	2b00      	cmp	r3, #0
 8007382:	d008      	beq.n	8007396 <HAL_UART_IRQHandler+0x326>
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fa03 	bl	800779a <UART_Transmit_IT>
    return;
 8007394:	e012      	b.n	80073bc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00d      	beq.n	80073bc <HAL_UART_IRQHandler+0x34c>
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d008      	beq.n	80073bc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fa45 	bl	800783a <UART_EndTransmit_IT>
    return;
 80073b0:	e004      	b.n	80073bc <HAL_UART_IRQHandler+0x34c>
    return;
 80073b2:	bf00      	nop
 80073b4:	e002      	b.n	80073bc <HAL_UART_IRQHandler+0x34c>
      return;
 80073b6:	bf00      	nop
 80073b8:	e000      	b.n	80073bc <HAL_UART_IRQHandler+0x34c>
      return;
 80073ba:	bf00      	nop
  }
}
 80073bc:	3728      	adds	r7, #40	; 0x28
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	08007773 	.word	0x08007773

080073c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007448:	2b00      	cmp	r3, #0
 800744a:	d12a      	bne.n	80074a2 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007460:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	695a      	ldr	r2, [r3, #20]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0201 	bic.w	r2, r2, #1
 8007470:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	695a      	ldr	r2, [r3, #20]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007480:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2220      	movs	r2, #32
 8007486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	2b01      	cmp	r3, #1
 8007490:	d107      	bne.n	80074a2 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0210 	bic.w	r2, r2, #16
 80074a0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d106      	bne.n	80074b8 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074ae:	4619      	mov	r1, r3
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7ff ffb1 	bl	8007418 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074b6:	e002      	b.n	80074be <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f7ff ff8f 	bl	80073dc <HAL_UART_RxCpltCallback>
}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d108      	bne.n	80074ee <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074e0:	085b      	lsrs	r3, r3, #1
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	4619      	mov	r1, r3
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f7ff ff96 	bl	8007418 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074ec:	e002      	b.n	80074f4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f7ff ff7e 	bl	80073f0 <HAL_UART_RxHalfCpltCallback>
}
 80074f4:	bf00      	nop
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007504:	2300      	movs	r3, #0
 8007506:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	695b      	ldr	r3, [r3, #20]
 8007514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007518:	2b80      	cmp	r3, #128	; 0x80
 800751a:	bf0c      	ite	eq
 800751c:	2301      	moveq	r3, #1
 800751e:	2300      	movne	r3, #0
 8007520:	b2db      	uxtb	r3, r3
 8007522:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b21      	cmp	r3, #33	; 0x21
 800752e:	d108      	bne.n	8007542 <UART_DMAError+0x46>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2200      	movs	r2, #0
 800753a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800753c:	68b8      	ldr	r0, [r7, #8]
 800753e:	f000 f8d5 	bl	80076ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754c:	2b40      	cmp	r3, #64	; 0x40
 800754e:	bf0c      	ite	eq
 8007550:	2301      	moveq	r3, #1
 8007552:	2300      	movne	r3, #0
 8007554:	b2db      	uxtb	r3, r3
 8007556:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b22      	cmp	r3, #34	; 0x22
 8007562:	d108      	bne.n	8007576 <UART_DMAError+0x7a>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d005      	beq.n	8007576 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2200      	movs	r2, #0
 800756e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007570:	68b8      	ldr	r0, [r7, #8]
 8007572:	f000 f8d1 	bl	8007718 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	f043 0210 	orr.w	r2, r3, #16
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007582:	68b8      	ldr	r0, [r7, #8]
 8007584:	f7ff ff3e 	bl	8007404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007588:	bf00      	nop
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	4613      	mov	r3, r2
 800759e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075a0:	e02c      	b.n	80075fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a8:	d028      	beq.n	80075fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d007      	beq.n	80075c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80075b0:	f7fb fd26 	bl	8003000 <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d21d      	bcs.n	80075fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68da      	ldr	r2, [r3, #12]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	695a      	ldr	r2, [r3, #20]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0201 	bic.w	r2, r2, #1
 80075de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e00f      	b.n	800761c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	4013      	ands	r3, r2
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	429a      	cmp	r2, r3
 800760a:	bf0c      	ite	eq
 800760c:	2301      	moveq	r3, #1
 800760e:	2300      	movne	r3, #0
 8007610:	b2db      	uxtb	r3, r3
 8007612:	461a      	mov	r2, r3
 8007614:	79fb      	ldrb	r3, [r7, #7]
 8007616:	429a      	cmp	r2, r3
 8007618:	d0c3      	beq.n	80075a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	4613      	mov	r3, r2
 8007630:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	88fa      	ldrh	r2, [r7, #6]
 800763c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2222      	movs	r2, #34	; 0x22
 8007648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007650:	4a23      	ldr	r2, [pc, #140]	; (80076e0 <UART_Start_Receive_DMA+0xbc>)
 8007652:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	4a22      	ldr	r2, [pc, #136]	; (80076e4 <UART_Start_Receive_DMA+0xc0>)
 800765a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007660:	4a21      	ldr	r2, [pc, #132]	; (80076e8 <UART_Start_Receive_DMA+0xc4>)
 8007662:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	2200      	movs	r2, #0
 800766a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800766c:	f107 0308 	add.w	r3, r7, #8
 8007670:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3304      	adds	r3, #4
 800767c:	4619      	mov	r1, r3
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	88fb      	ldrh	r3, [r7, #6]
 8007684:	f7fc fa64 	bl	8003b50 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007688:	2300      	movs	r3, #0
 800768a:	613b      	str	r3, [r7, #16]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	613b      	str	r3, [r7, #16]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	613b      	str	r3, [r7, #16]
 800769c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68da      	ldr	r2, [r3, #12]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076b4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	695a      	ldr	r2, [r3, #20]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f042 0201 	orr.w	r2, r2, #1
 80076c4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	695a      	ldr	r2, [r3, #20]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076d4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	08007431 	.word	0x08007431
 80076e4:	080074c7 	.word	0x080074c7
 80076e8:	080074fd 	.word	0x080074fd

080076ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68da      	ldr	r2, [r3, #12]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007702:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800772e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695a      	ldr	r2, [r3, #20]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f022 0201 	bic.w	r2, r2, #1
 800773e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007744:	2b01      	cmp	r3, #1
 8007746:	d107      	bne.n	8007758 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68da      	ldr	r2, [r3, #12]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0210 	bic.w	r2, r2, #16
 8007756:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2220      	movs	r2, #32
 800775c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007766:	bf00      	nop
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f7ff fe39 	bl	8007404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007792:	bf00      	nop
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b21      	cmp	r3, #33	; 0x21
 80077ac:	d13e      	bne.n	800782c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b6:	d114      	bne.n	80077e2 <UART_Transmit_IT+0x48>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d110      	bne.n	80077e2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a1b      	ldr	r3, [r3, #32]
 80077c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	1c9a      	adds	r2, r3, #2
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	621a      	str	r2, [r3, #32]
 80077e0:	e008      	b.n	80077f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	1c59      	adds	r1, r3, #1
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	6211      	str	r1, [r2, #32]
 80077ec:	781a      	ldrb	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	3b01      	subs	r3, #1
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	4619      	mov	r1, r3
 8007802:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10f      	bne.n	8007828 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007816:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007826:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	e000      	b.n	800782e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800782c:	2302      	movs	r3, #2
  }
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007850:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2220      	movs	r2, #32
 8007856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7ff fdb4 	bl	80073c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b084      	sub	sp, #16
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b22      	cmp	r3, #34	; 0x22
 800787c:	f040 8087 	bne.w	800798e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007888:	d117      	bne.n	80078ba <UART_Receive_IT+0x50>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d113      	bne.n	80078ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007892:	2300      	movs	r3, #0
 8007894:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b2:	1c9a      	adds	r2, r3, #2
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	629a      	str	r2, [r3, #40]	; 0x28
 80078b8:	e026      	b.n	8007908 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078be:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80078c0:	2300      	movs	r3, #0
 80078c2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078cc:	d007      	beq.n	80078de <UART_Receive_IT+0x74>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10a      	bne.n	80078ec <UART_Receive_IT+0x82>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d106      	bne.n	80078ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	701a      	strb	r2, [r3, #0]
 80078ea:	e008      	b.n	80078fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800790c:	b29b      	uxth	r3, r3
 800790e:	3b01      	subs	r3, #1
 8007910:	b29b      	uxth	r3, r3
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	4619      	mov	r1, r3
 8007916:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007918:	2b00      	cmp	r3, #0
 800791a:	d136      	bne.n	800798a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0220 	bic.w	r2, r2, #32
 800792a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800793a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	695a      	ldr	r2, [r3, #20]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0201 	bic.w	r2, r2, #1
 800794a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2220      	movs	r2, #32
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007958:	2b01      	cmp	r3, #1
 800795a:	d10e      	bne.n	800797a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68da      	ldr	r2, [r3, #12]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0210 	bic.w	r2, r2, #16
 800796a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff fd50 	bl	8007418 <HAL_UARTEx_RxEventCallback>
 8007978:	e002      	b.n	8007980 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7ff fd2e 	bl	80073dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	e002      	b.n	8007990 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	e000      	b.n	8007990 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800798e:	2302      	movs	r3, #2
  }
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799c:	b09f      	sub	sp, #124	; 0x7c
 800799e:	af00      	add	r7, sp, #0
 80079a0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80079ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ae:	68d9      	ldr	r1, [r3, #12]
 80079b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	ea40 0301 	orr.w	r3, r0, r1
 80079b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	431a      	orrs	r2, r3
 80079ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80079d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80079dc:	f021 010c 	bic.w	r1, r1, #12
 80079e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079e6:	430b      	orrs	r3, r1
 80079e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80079f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f6:	6999      	ldr	r1, [r3, #24]
 80079f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	ea40 0301 	orr.w	r3, r0, r1
 8007a00:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	4bc5      	ldr	r3, [pc, #788]	; (8007d1c <UART_SetConfig+0x384>)
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d004      	beq.n	8007a16 <UART_SetConfig+0x7e>
 8007a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	4bc3      	ldr	r3, [pc, #780]	; (8007d20 <UART_SetConfig+0x388>)
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d103      	bne.n	8007a1e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a16:	f7fe f9ad 	bl	8005d74 <HAL_RCC_GetPCLK2Freq>
 8007a1a:	6778      	str	r0, [r7, #116]	; 0x74
 8007a1c:	e002      	b.n	8007a24 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a1e:	f7fe f995 	bl	8005d4c <HAL_RCC_GetPCLK1Freq>
 8007a22:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a2c:	f040 80b6 	bne.w	8007b9c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a32:	461c      	mov	r4, r3
 8007a34:	f04f 0500 	mov.w	r5, #0
 8007a38:	4622      	mov	r2, r4
 8007a3a:	462b      	mov	r3, r5
 8007a3c:	1891      	adds	r1, r2, r2
 8007a3e:	6439      	str	r1, [r7, #64]	; 0x40
 8007a40:	415b      	adcs	r3, r3
 8007a42:	647b      	str	r3, [r7, #68]	; 0x44
 8007a44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a48:	1912      	adds	r2, r2, r4
 8007a4a:	eb45 0303 	adc.w	r3, r5, r3
 8007a4e:	f04f 0000 	mov.w	r0, #0
 8007a52:	f04f 0100 	mov.w	r1, #0
 8007a56:	00d9      	lsls	r1, r3, #3
 8007a58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a5c:	00d0      	lsls	r0, r2, #3
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	1911      	adds	r1, r2, r4
 8007a64:	6639      	str	r1, [r7, #96]	; 0x60
 8007a66:	416b      	adcs	r3, r5
 8007a68:	667b      	str	r3, [r7, #100]	; 0x64
 8007a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f04f 0300 	mov.w	r3, #0
 8007a74:	1891      	adds	r1, r2, r2
 8007a76:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a78:	415b      	adcs	r3, r3
 8007a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a80:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007a84:	f7f9 f908 	bl	8000c98 <__aeabi_uldivmod>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4ba5      	ldr	r3, [pc, #660]	; (8007d24 <UART_SetConfig+0x38c>)
 8007a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a92:	095b      	lsrs	r3, r3, #5
 8007a94:	011e      	lsls	r6, r3, #4
 8007a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a98:	461c      	mov	r4, r3
 8007a9a:	f04f 0500 	mov.w	r5, #0
 8007a9e:	4622      	mov	r2, r4
 8007aa0:	462b      	mov	r3, r5
 8007aa2:	1891      	adds	r1, r2, r2
 8007aa4:	6339      	str	r1, [r7, #48]	; 0x30
 8007aa6:	415b      	adcs	r3, r3
 8007aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8007aaa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007aae:	1912      	adds	r2, r2, r4
 8007ab0:	eb45 0303 	adc.w	r3, r5, r3
 8007ab4:	f04f 0000 	mov.w	r0, #0
 8007ab8:	f04f 0100 	mov.w	r1, #0
 8007abc:	00d9      	lsls	r1, r3, #3
 8007abe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ac2:	00d0      	lsls	r0, r2, #3
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	1911      	adds	r1, r2, r4
 8007aca:	65b9      	str	r1, [r7, #88]	; 0x58
 8007acc:	416b      	adcs	r3, r5
 8007ace:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	f04f 0300 	mov.w	r3, #0
 8007ada:	1891      	adds	r1, r2, r2
 8007adc:	62b9      	str	r1, [r7, #40]	; 0x28
 8007ade:	415b      	adcs	r3, r3
 8007ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ae6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007aea:	f7f9 f8d5 	bl	8000c98 <__aeabi_uldivmod>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4b8c      	ldr	r3, [pc, #560]	; (8007d24 <UART_SetConfig+0x38c>)
 8007af4:	fba3 1302 	umull	r1, r3, r3, r2
 8007af8:	095b      	lsrs	r3, r3, #5
 8007afa:	2164      	movs	r1, #100	; 0x64
 8007afc:	fb01 f303 	mul.w	r3, r1, r3
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	3332      	adds	r3, #50	; 0x32
 8007b06:	4a87      	ldr	r2, [pc, #540]	; (8007d24 <UART_SetConfig+0x38c>)
 8007b08:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0c:	095b      	lsrs	r3, r3, #5
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b14:	441e      	add	r6, r3
 8007b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f04f 0100 	mov.w	r1, #0
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	1894      	adds	r4, r2, r2
 8007b24:	623c      	str	r4, [r7, #32]
 8007b26:	415b      	adcs	r3, r3
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
 8007b2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b2e:	1812      	adds	r2, r2, r0
 8007b30:	eb41 0303 	adc.w	r3, r1, r3
 8007b34:	f04f 0400 	mov.w	r4, #0
 8007b38:	f04f 0500 	mov.w	r5, #0
 8007b3c:	00dd      	lsls	r5, r3, #3
 8007b3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b42:	00d4      	lsls	r4, r2, #3
 8007b44:	4622      	mov	r2, r4
 8007b46:	462b      	mov	r3, r5
 8007b48:	1814      	adds	r4, r2, r0
 8007b4a:	653c      	str	r4, [r7, #80]	; 0x50
 8007b4c:	414b      	adcs	r3, r1
 8007b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8007b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	461a      	mov	r2, r3
 8007b56:	f04f 0300 	mov.w	r3, #0
 8007b5a:	1891      	adds	r1, r2, r2
 8007b5c:	61b9      	str	r1, [r7, #24]
 8007b5e:	415b      	adcs	r3, r3
 8007b60:	61fb      	str	r3, [r7, #28]
 8007b62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007b6a:	f7f9 f895 	bl	8000c98 <__aeabi_uldivmod>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	460b      	mov	r3, r1
 8007b72:	4b6c      	ldr	r3, [pc, #432]	; (8007d24 <UART_SetConfig+0x38c>)
 8007b74:	fba3 1302 	umull	r1, r3, r3, r2
 8007b78:	095b      	lsrs	r3, r3, #5
 8007b7a:	2164      	movs	r1, #100	; 0x64
 8007b7c:	fb01 f303 	mul.w	r3, r1, r3
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	3332      	adds	r3, #50	; 0x32
 8007b86:	4a67      	ldr	r2, [pc, #412]	; (8007d24 <UART_SetConfig+0x38c>)
 8007b88:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8c:	095b      	lsrs	r3, r3, #5
 8007b8e:	f003 0207 	and.w	r2, r3, #7
 8007b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4432      	add	r2, r6
 8007b98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b9a:	e0b9      	b.n	8007d10 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b9e:	461c      	mov	r4, r3
 8007ba0:	f04f 0500 	mov.w	r5, #0
 8007ba4:	4622      	mov	r2, r4
 8007ba6:	462b      	mov	r3, r5
 8007ba8:	1891      	adds	r1, r2, r2
 8007baa:	6139      	str	r1, [r7, #16]
 8007bac:	415b      	adcs	r3, r3
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007bb4:	1912      	adds	r2, r2, r4
 8007bb6:	eb45 0303 	adc.w	r3, r5, r3
 8007bba:	f04f 0000 	mov.w	r0, #0
 8007bbe:	f04f 0100 	mov.w	r1, #0
 8007bc2:	00d9      	lsls	r1, r3, #3
 8007bc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bc8:	00d0      	lsls	r0, r2, #3
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	eb12 0804 	adds.w	r8, r2, r4
 8007bd2:	eb43 0905 	adc.w	r9, r3, r5
 8007bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f04f 0100 	mov.w	r1, #0
 8007be0:	f04f 0200 	mov.w	r2, #0
 8007be4:	f04f 0300 	mov.w	r3, #0
 8007be8:	008b      	lsls	r3, r1, #2
 8007bea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007bee:	0082      	lsls	r2, r0, #2
 8007bf0:	4640      	mov	r0, r8
 8007bf2:	4649      	mov	r1, r9
 8007bf4:	f7f9 f850 	bl	8000c98 <__aeabi_uldivmod>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4b49      	ldr	r3, [pc, #292]	; (8007d24 <UART_SetConfig+0x38c>)
 8007bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8007c02:	095b      	lsrs	r3, r3, #5
 8007c04:	011e      	lsls	r6, r3, #4
 8007c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f04f 0100 	mov.w	r1, #0
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	1894      	adds	r4, r2, r2
 8007c14:	60bc      	str	r4, [r7, #8]
 8007c16:	415b      	adcs	r3, r3
 8007c18:	60fb      	str	r3, [r7, #12]
 8007c1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c1e:	1812      	adds	r2, r2, r0
 8007c20:	eb41 0303 	adc.w	r3, r1, r3
 8007c24:	f04f 0400 	mov.w	r4, #0
 8007c28:	f04f 0500 	mov.w	r5, #0
 8007c2c:	00dd      	lsls	r5, r3, #3
 8007c2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c32:	00d4      	lsls	r4, r2, #3
 8007c34:	4622      	mov	r2, r4
 8007c36:	462b      	mov	r3, r5
 8007c38:	1814      	adds	r4, r2, r0
 8007c3a:	64bc      	str	r4, [r7, #72]	; 0x48
 8007c3c:	414b      	adcs	r3, r1
 8007c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f04f 0100 	mov.w	r1, #0
 8007c4a:	f04f 0200 	mov.w	r2, #0
 8007c4e:	f04f 0300 	mov.w	r3, #0
 8007c52:	008b      	lsls	r3, r1, #2
 8007c54:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c58:	0082      	lsls	r2, r0, #2
 8007c5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007c5e:	f7f9 f81b 	bl	8000c98 <__aeabi_uldivmod>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4b2f      	ldr	r3, [pc, #188]	; (8007d24 <UART_SetConfig+0x38c>)
 8007c68:	fba3 1302 	umull	r1, r3, r3, r2
 8007c6c:	095b      	lsrs	r3, r3, #5
 8007c6e:	2164      	movs	r1, #100	; 0x64
 8007c70:	fb01 f303 	mul.w	r3, r1, r3
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	011b      	lsls	r3, r3, #4
 8007c78:	3332      	adds	r3, #50	; 0x32
 8007c7a:	4a2a      	ldr	r2, [pc, #168]	; (8007d24 <UART_SetConfig+0x38c>)
 8007c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c80:	095b      	lsrs	r3, r3, #5
 8007c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c86:	441e      	add	r6, r3
 8007c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f04f 0100 	mov.w	r1, #0
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	1894      	adds	r4, r2, r2
 8007c96:	603c      	str	r4, [r7, #0]
 8007c98:	415b      	adcs	r3, r3
 8007c9a:	607b      	str	r3, [r7, #4]
 8007c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca0:	1812      	adds	r2, r2, r0
 8007ca2:	eb41 0303 	adc.w	r3, r1, r3
 8007ca6:	f04f 0400 	mov.w	r4, #0
 8007caa:	f04f 0500 	mov.w	r5, #0
 8007cae:	00dd      	lsls	r5, r3, #3
 8007cb0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007cb4:	00d4      	lsls	r4, r2, #3
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	462b      	mov	r3, r5
 8007cba:	eb12 0a00 	adds.w	sl, r2, r0
 8007cbe:	eb43 0b01 	adc.w	fp, r3, r1
 8007cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f04f 0100 	mov.w	r1, #0
 8007ccc:	f04f 0200 	mov.w	r2, #0
 8007cd0:	f04f 0300 	mov.w	r3, #0
 8007cd4:	008b      	lsls	r3, r1, #2
 8007cd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007cda:	0082      	lsls	r2, r0, #2
 8007cdc:	4650      	mov	r0, sl
 8007cde:	4659      	mov	r1, fp
 8007ce0:	f7f8 ffda 	bl	8000c98 <__aeabi_uldivmod>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4b0e      	ldr	r3, [pc, #56]	; (8007d24 <UART_SetConfig+0x38c>)
 8007cea:	fba3 1302 	umull	r1, r3, r3, r2
 8007cee:	095b      	lsrs	r3, r3, #5
 8007cf0:	2164      	movs	r1, #100	; 0x64
 8007cf2:	fb01 f303 	mul.w	r3, r1, r3
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	011b      	lsls	r3, r3, #4
 8007cfa:	3332      	adds	r3, #50	; 0x32
 8007cfc:	4a09      	ldr	r2, [pc, #36]	; (8007d24 <UART_SetConfig+0x38c>)
 8007cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007d02:	095b      	lsrs	r3, r3, #5
 8007d04:	f003 020f 	and.w	r2, r3, #15
 8007d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4432      	add	r2, r6
 8007d0e:	609a      	str	r2, [r3, #8]
}
 8007d10:	bf00      	nop
 8007d12:	377c      	adds	r7, #124	; 0x7c
 8007d14:	46bd      	mov	sp, r7
 8007d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1a:	bf00      	nop
 8007d1c:	40011000 	.word	0x40011000
 8007d20:	40011400 	.word	0x40011400
 8007d24:	51eb851f 	.word	0x51eb851f

08007d28 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007d2c:	4904      	ldr	r1, [pc, #16]	; (8007d40 <MX_FATFS_Init+0x18>)
 8007d2e:	4805      	ldr	r0, [pc, #20]	; (8007d44 <MX_FATFS_Init+0x1c>)
 8007d30:	f000 f8b0 	bl	8007e94 <FATFS_LinkDriver>
 8007d34:	4603      	mov	r3, r0
 8007d36:	461a      	mov	r2, r3
 8007d38:	4b03      	ldr	r3, [pc, #12]	; (8007d48 <MX_FATFS_Init+0x20>)
 8007d3a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007d3c:	bf00      	nop
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	200053d8 	.word	0x200053d8
 8007d44:	20000010 	.word	0x20000010
 8007d48:	200053dc 	.word	0x200053dc

08007d4c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	4603      	mov	r3, r0
 8007d54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007d56:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <USER_initialize+0x24>)
 8007d58:	2201      	movs	r2, #1
 8007d5a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007d5c:	4b04      	ldr	r3, [pc, #16]	; (8007d70 <USER_initialize+0x24>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	2000000d 	.word	0x2000000d

08007d74 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007d7e:	4b06      	ldr	r3, [pc, #24]	; (8007d98 <USER_status+0x24>)
 8007d80:	2201      	movs	r2, #1
 8007d82:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007d84:	4b04      	ldr	r3, [pc, #16]	; (8007d98 <USER_status+0x24>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	2000000d 	.word	0x2000000d

08007d9c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60b9      	str	r1, [r7, #8]
 8007da4:	607a      	str	r2, [r7, #4]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	4603      	mov	r3, r0
 8007daa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8007dac:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	603b      	str	r3, [r7, #0]
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8007dca:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	603a      	str	r2, [r7, #0]
 8007de2:	71fb      	strb	r3, [r7, #7]
 8007de4:	460b      	mov	r3, r1
 8007de6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	73fb      	strb	r3, [r7, #15]
    return res;
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
	...

08007dfc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	4613      	mov	r3, r2
 8007e08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007e12:	4b1f      	ldr	r3, [pc, #124]	; (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e14:	7a5b      	ldrb	r3, [r3, #9]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d131      	bne.n	8007e80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007e1c:	4b1c      	ldr	r3, [pc, #112]	; (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e1e:	7a5b      	ldrb	r3, [r3, #9]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	461a      	mov	r2, r3
 8007e24:	4b1a      	ldr	r3, [pc, #104]	; (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e26:	2100      	movs	r1, #0
 8007e28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007e2a:	4b19      	ldr	r3, [pc, #100]	; (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e2c:	7a5b      	ldrb	r3, [r3, #9]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	4a17      	ldr	r2, [pc, #92]	; (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007e3a:	4b15      	ldr	r3, [pc, #84]	; (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e3c:	7a5b      	ldrb	r3, [r3, #9]
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	461a      	mov	r2, r3
 8007e42:	4b13      	ldr	r3, [pc, #76]	; (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e44:	4413      	add	r3, r2
 8007e46:	79fa      	ldrb	r2, [r7, #7]
 8007e48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007e4a:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e4c:	7a5b      	ldrb	r3, [r3, #9]
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	b2d1      	uxtb	r1, r2
 8007e54:	4a0e      	ldr	r2, [pc, #56]	; (8007e90 <FATFS_LinkDriverEx+0x94>)
 8007e56:	7251      	strb	r1, [r2, #9]
 8007e58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007e5a:	7dbb      	ldrb	r3, [r7, #22]
 8007e5c:	3330      	adds	r3, #48	; 0x30
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	3301      	adds	r3, #1
 8007e68:	223a      	movs	r2, #58	; 0x3a
 8007e6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	3302      	adds	r3, #2
 8007e70:	222f      	movs	r2, #47	; 0x2f
 8007e72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	3303      	adds	r3, #3
 8007e78:	2200      	movs	r2, #0
 8007e7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	20000238 	.word	0x20000238

08007e94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff ffaa 	bl	8007dfc <FATFS_LinkDriverEx>
 8007ea8:	4603      	mov	r3, r0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <__NVIC_SetPriority>:
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	4603      	mov	r3, r0
 8007ebc:	6039      	str	r1, [r7, #0]
 8007ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	db0a      	blt.n	8007ede <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	490c      	ldr	r1, [pc, #48]	; (8007f00 <__NVIC_SetPriority+0x4c>)
 8007ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ed2:	0112      	lsls	r2, r2, #4
 8007ed4:	b2d2      	uxtb	r2, r2
 8007ed6:	440b      	add	r3, r1
 8007ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007edc:	e00a      	b.n	8007ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	4908      	ldr	r1, [pc, #32]	; (8007f04 <__NVIC_SetPriority+0x50>)
 8007ee4:	79fb      	ldrb	r3, [r7, #7]
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	3b04      	subs	r3, #4
 8007eec:	0112      	lsls	r2, r2, #4
 8007eee:	b2d2      	uxtb	r2, r2
 8007ef0:	440b      	add	r3, r1
 8007ef2:	761a      	strb	r2, [r3, #24]
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	e000e100 	.word	0xe000e100
 8007f04:	e000ed00 	.word	0xe000ed00

08007f08 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007f0c:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <SysTick_Handler+0x1c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007f10:	f002 f830 	bl	8009f74 <xTaskGetSchedulerState>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d001      	beq.n	8007f1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007f1a:	f003 f815 	bl	800af48 <xPortSysTickHandler>
  }
}
 8007f1e:	bf00      	nop
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	e000e010 	.word	0xe000e010

08007f28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	f06f 0004 	mvn.w	r0, #4
 8007f32:	f7ff ffbf 	bl	8007eb4 <__NVIC_SetPriority>
#endif
}
 8007f36:	bf00      	nop
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f42:	f3ef 8305 	mrs	r3, IPSR
 8007f46:	603b      	str	r3, [r7, #0]
  return(result);
 8007f48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007f4e:	f06f 0305 	mvn.w	r3, #5
 8007f52:	607b      	str	r3, [r7, #4]
 8007f54:	e00c      	b.n	8007f70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f56:	4b0a      	ldr	r3, [pc, #40]	; (8007f80 <osKernelInitialize+0x44>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d105      	bne.n	8007f6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f5e:	4b08      	ldr	r3, [pc, #32]	; (8007f80 <osKernelInitialize+0x44>)
 8007f60:	2201      	movs	r2, #1
 8007f62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	607b      	str	r3, [r7, #4]
 8007f68:	e002      	b.n	8007f70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f70:	687b      	ldr	r3, [r7, #4]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	20000244 	.word	0x20000244

08007f84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f8a:	f3ef 8305 	mrs	r3, IPSR
 8007f8e:	603b      	str	r3, [r7, #0]
  return(result);
 8007f90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007f96:	f06f 0305 	mvn.w	r3, #5
 8007f9a:	607b      	str	r3, [r7, #4]
 8007f9c:	e010      	b.n	8007fc0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f9e:	4b0b      	ldr	r3, [pc, #44]	; (8007fcc <osKernelStart+0x48>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d109      	bne.n	8007fba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007fa6:	f7ff ffbf 	bl	8007f28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007faa:	4b08      	ldr	r3, [pc, #32]	; (8007fcc <osKernelStart+0x48>)
 8007fac:	2202      	movs	r2, #2
 8007fae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007fb0:	f001 fb88 	bl	80096c4 <vTaskStartScheduler>
      stat = osOK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	607b      	str	r3, [r7, #4]
 8007fb8:	e002      	b.n	8007fc0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007fba:	f04f 33ff 	mov.w	r3, #4294967295
 8007fbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fc0:	687b      	ldr	r3, [r7, #4]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20000244 	.word	0x20000244

08007fd0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08e      	sub	sp, #56	; 0x38
 8007fd4:	af04      	add	r7, sp, #16
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fe0:	f3ef 8305 	mrs	r3, IPSR
 8007fe4:	617b      	str	r3, [r7, #20]
  return(result);
 8007fe6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d17e      	bne.n	80080ea <osThreadNew+0x11a>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d07b      	beq.n	80080ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007ff2:	2380      	movs	r3, #128	; 0x80
 8007ff4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007ff6:	2318      	movs	r3, #24
 8007ff8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8008002:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d045      	beq.n	8008096 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <osThreadNew+0x48>
        name = attr->name;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d002      	beq.n	8008026 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d008      	beq.n	800803e <osThreadNew+0x6e>
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	2b38      	cmp	r3, #56	; 0x38
 8008030:	d805      	bhi.n	800803e <osThreadNew+0x6e>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <osThreadNew+0x72>
        return (NULL);
 800803e:	2300      	movs	r3, #0
 8008040:	e054      	b.n	80080ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	089b      	lsrs	r3, r3, #2
 8008050:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00e      	beq.n	8008078 <osThreadNew+0xa8>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	2b5b      	cmp	r3, #91	; 0x5b
 8008060:	d90a      	bls.n	8008078 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008066:	2b00      	cmp	r3, #0
 8008068:	d006      	beq.n	8008078 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d002      	beq.n	8008078 <osThreadNew+0xa8>
        mem = 1;
 8008072:	2301      	movs	r3, #1
 8008074:	61bb      	str	r3, [r7, #24]
 8008076:	e010      	b.n	800809a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10c      	bne.n	800809a <osThreadNew+0xca>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d108      	bne.n	800809a <osThreadNew+0xca>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d104      	bne.n	800809a <osThreadNew+0xca>
          mem = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	61bb      	str	r3, [r7, #24]
 8008094:	e001      	b.n	800809a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d110      	bne.n	80080c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080a8:	9202      	str	r2, [sp, #8]
 80080aa:	9301      	str	r3, [sp, #4]
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	6a3a      	ldr	r2, [r7, #32]
 80080b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f001 f92e 	bl	8009318 <xTaskCreateStatic>
 80080bc:	4603      	mov	r3, r0
 80080be:	613b      	str	r3, [r7, #16]
 80080c0:	e013      	b.n	80080ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d110      	bne.n	80080ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	f107 0310 	add.w	r3, r7, #16
 80080d0:	9301      	str	r3, [sp, #4]
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f001 f979 	bl	80093d2 <xTaskCreate>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d001      	beq.n	80080ea <osThreadNew+0x11a>
            hTask = NULL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80080ea:	693b      	ldr	r3, [r7, #16]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3728      	adds	r7, #40	; 0x28
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080fc:	f3ef 8305 	mrs	r3, IPSR
 8008100:	60bb      	str	r3, [r7, #8]
  return(result);
 8008102:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008104:	2b00      	cmp	r3, #0
 8008106:	d003      	beq.n	8008110 <osDelay+0x1c>
    stat = osErrorISR;
 8008108:	f06f 0305 	mvn.w	r3, #5
 800810c:	60fb      	str	r3, [r7, #12]
 800810e:	e007      	b.n	8008120 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008110:	2300      	movs	r3, #0
 8008112:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <osDelay+0x2c>
      vTaskDelay(ticks);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f001 fa9e 	bl	800965c <vTaskDelay>
    }
  }

  return (stat);
 8008120:	68fb      	ldr	r3, [r7, #12]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800812a:	b580      	push	{r7, lr}
 800812c:	b088      	sub	sp, #32
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008132:	2300      	movs	r3, #0
 8008134:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008136:	f3ef 8305 	mrs	r3, IPSR
 800813a:	60bb      	str	r3, [r7, #8]
  return(result);
 800813c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800813e:	2b00      	cmp	r3, #0
 8008140:	d174      	bne.n	800822c <osMutexNew+0x102>
    if (attr != NULL) {
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <osMutexNew+0x26>
      type = attr->attr_bits;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	61bb      	str	r3, [r7, #24]
 800814e:	e001      	b.n	8008154 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d002      	beq.n	8008164 <osMutexNew+0x3a>
      rmtx = 1U;
 800815e:	2301      	movs	r3, #1
 8008160:	617b      	str	r3, [r7, #20]
 8008162:	e001      	b.n	8008168 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d15c      	bne.n	800822c <osMutexNew+0x102>
      mem = -1;
 8008172:	f04f 33ff 	mov.w	r3, #4294967295
 8008176:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d015      	beq.n	80081aa <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d006      	beq.n	8008194 <osMutexNew+0x6a>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	2b4f      	cmp	r3, #79	; 0x4f
 800818c:	d902      	bls.n	8008194 <osMutexNew+0x6a>
          mem = 1;
 800818e:	2301      	movs	r3, #1
 8008190:	613b      	str	r3, [r7, #16]
 8008192:	e00c      	b.n	80081ae <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d108      	bne.n	80081ae <osMutexNew+0x84>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d104      	bne.n	80081ae <osMutexNew+0x84>
            mem = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	613b      	str	r3, [r7, #16]
 80081a8:	e001      	b.n	80081ae <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d112      	bne.n	80081da <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d007      	beq.n	80081ca <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	4619      	mov	r1, r3
 80081c0:	2004      	movs	r0, #4
 80081c2:	f000 fb18 	bl	80087f6 <xQueueCreateMutexStatic>
 80081c6:	61f8      	str	r0, [r7, #28]
 80081c8:	e016      	b.n	80081f8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	4619      	mov	r1, r3
 80081d0:	2001      	movs	r0, #1
 80081d2:	f000 fb10 	bl	80087f6 <xQueueCreateMutexStatic>
 80081d6:	61f8      	str	r0, [r7, #28]
 80081d8:	e00e      	b.n	80081f8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10b      	bne.n	80081f8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d004      	beq.n	80081f0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80081e6:	2004      	movs	r0, #4
 80081e8:	f000 faed 	bl	80087c6 <xQueueCreateMutex>
 80081ec:	61f8      	str	r0, [r7, #28]
 80081ee:	e003      	b.n	80081f8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80081f0:	2001      	movs	r0, #1
 80081f2:	f000 fae8 	bl	80087c6 <xQueueCreateMutex>
 80081f6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00c      	beq.n	8008218 <osMutexNew+0xee>
        if (attr != NULL) {
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d003      	beq.n	800820c <osMutexNew+0xe2>
          name = attr->name;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	60fb      	str	r3, [r7, #12]
 800820a:	e001      	b.n	8008210 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800820c:	2300      	movs	r3, #0
 800820e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008210:	68f9      	ldr	r1, [r7, #12]
 8008212:	69f8      	ldr	r0, [r7, #28]
 8008214:	f001 f822 	bl	800925c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d006      	beq.n	800822c <osMutexNew+0x102>
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d003      	beq.n	800822c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	f043 0301 	orr.w	r3, r3, #1
 800822a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800822c:	69fb      	ldr	r3, [r7, #28]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3720      	adds	r7, #32
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008236:	b580      	push	{r7, lr}
 8008238:	b086      	sub	sp, #24
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f023 0301 	bic.w	r3, r3, #1
 8008246:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008250:	2300      	movs	r3, #0
 8008252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008254:	f3ef 8305 	mrs	r3, IPSR
 8008258:	60bb      	str	r3, [r7, #8]
  return(result);
 800825a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008260:	f06f 0305 	mvn.w	r3, #5
 8008264:	617b      	str	r3, [r7, #20]
 8008266:	e02c      	b.n	80082c2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d103      	bne.n	8008276 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800826e:	f06f 0303 	mvn.w	r3, #3
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	e025      	b.n	80082c2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d011      	beq.n	80082a0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6938      	ldr	r0, [r7, #16]
 8008280:	f000 fb08 	bl	8008894 <xQueueTakeMutexRecursive>
 8008284:	4603      	mov	r3, r0
 8008286:	2b01      	cmp	r3, #1
 8008288:	d01b      	beq.n	80082c2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d003      	beq.n	8008298 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008290:	f06f 0301 	mvn.w	r3, #1
 8008294:	617b      	str	r3, [r7, #20]
 8008296:	e014      	b.n	80082c2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008298:	f06f 0302 	mvn.w	r3, #2
 800829c:	617b      	str	r3, [r7, #20]
 800829e:	e010      	b.n	80082c2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6938      	ldr	r0, [r7, #16]
 80082a4:	f000 fda6 	bl	8008df4 <xQueueSemaphoreTake>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d009      	beq.n	80082c2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80082b4:	f06f 0301 	mvn.w	r3, #1
 80082b8:	617b      	str	r3, [r7, #20]
 80082ba:	e002      	b.n	80082c2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80082bc:	f06f 0302 	mvn.w	r3, #2
 80082c0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80082c2:	697b      	ldr	r3, [r7, #20]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f023 0301 	bic.w	r3, r3, #1
 80082da:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082e8:	f3ef 8305 	mrs	r3, IPSR
 80082ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80082ee:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d003      	beq.n	80082fc <osMutexRelease+0x30>
    stat = osErrorISR;
 80082f4:	f06f 0305 	mvn.w	r3, #5
 80082f8:	617b      	str	r3, [r7, #20]
 80082fa:	e01f      	b.n	800833c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d103      	bne.n	800830a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008302:	f06f 0303 	mvn.w	r3, #3
 8008306:	617b      	str	r3, [r7, #20]
 8008308:	e018      	b.n	800833c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d009      	beq.n	8008324 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008310:	6938      	ldr	r0, [r7, #16]
 8008312:	f000 fa8b 	bl	800882c <xQueueGiveMutexRecursive>
 8008316:	4603      	mov	r3, r0
 8008318:	2b01      	cmp	r3, #1
 800831a:	d00f      	beq.n	800833c <osMutexRelease+0x70>
        stat = osErrorResource;
 800831c:	f06f 0302 	mvn.w	r3, #2
 8008320:	617b      	str	r3, [r7, #20]
 8008322:	e00b      	b.n	800833c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008324:	2300      	movs	r3, #0
 8008326:	2200      	movs	r2, #0
 8008328:	2100      	movs	r1, #0
 800832a:	6938      	ldr	r0, [r7, #16]
 800832c:	f000 fae8 	bl	8008900 <xQueueGenericSend>
 8008330:	4603      	mov	r3, r0
 8008332:	2b01      	cmp	r3, #1
 8008334:	d002      	beq.n	800833c <osMutexRelease+0x70>
        stat = osErrorResource;
 8008336:	f06f 0302 	mvn.w	r3, #2
 800833a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800833c:	697b      	ldr	r3, [r7, #20]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4a07      	ldr	r2, [pc, #28]	; (8008374 <vApplicationGetIdleTaskMemory+0x2c>)
 8008358:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	4a06      	ldr	r2, [pc, #24]	; (8008378 <vApplicationGetIdleTaskMemory+0x30>)
 800835e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2280      	movs	r2, #128	; 0x80
 8008364:	601a      	str	r2, [r3, #0]
}
 8008366:	bf00      	nop
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000248 	.word	0x20000248
 8008378:	200002a4 	.word	0x200002a4

0800837c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4a07      	ldr	r2, [pc, #28]	; (80083a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800838c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	4a06      	ldr	r2, [pc, #24]	; (80083ac <vApplicationGetTimerTaskMemory+0x30>)
 8008392:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800839a:	601a      	str	r2, [r3, #0]
}
 800839c:	bf00      	nop
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	200004a4 	.word	0x200004a4
 80083ac:	20000500 	.word	0x20000500

080083b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f103 0208 	add.w	r2, r3, #8
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f04f 32ff 	mov.w	r2, #4294967295
 80083c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f103 0208 	add.w	r2, r3, #8
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f103 0208 	add.w	r2, r3, #8
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083fe:	bf00      	nop
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800840a:	b480      	push	{r7}
 800840c:	b085      	sub	sp, #20
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	601a      	str	r2, [r3, #0]
}
 8008446:	bf00      	nop
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008452:	b480      	push	{r7}
 8008454:	b085      	sub	sp, #20
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008468:	d103      	bne.n	8008472 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	60fb      	str	r3, [r7, #12]
 8008470:	e00c      	b.n	800848c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	3308      	adds	r3, #8
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	e002      	b.n	8008480 <vListInsert+0x2e>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	429a      	cmp	r2, r3
 800848a:	d2f6      	bcs.n	800847a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	1c5a      	adds	r2, r3, #1
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	601a      	str	r2, [r3, #0]
}
 80084b8:	bf00      	nop
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	6892      	ldr	r2, [r2, #8]
 80084da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	6852      	ldr	r2, [r2, #4]
 80084e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d103      	bne.n	80084f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	1e5a      	subs	r2, r3, #1
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008542:	f002 fc6f 	bl	800ae24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800854e:	68f9      	ldr	r1, [r7, #12]
 8008550:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008552:	fb01 f303 	mul.w	r3, r1, r3
 8008556:	441a      	add	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008572:	3b01      	subs	r3, #1
 8008574:	68f9      	ldr	r1, [r7, #12]
 8008576:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008578:	fb01 f303 	mul.w	r3, r1, r3
 800857c:	441a      	add	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	22ff      	movs	r2, #255	; 0xff
 8008586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	22ff      	movs	r2, #255	; 0xff
 800858e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d114      	bne.n	80085c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01a      	beq.n	80085d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	3310      	adds	r3, #16
 80085a4:	4618      	mov	r0, r3
 80085a6:	f001 fb17 	bl	8009bd8 <xTaskRemoveFromEventList>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d012      	beq.n	80085d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085b0:	4b0c      	ldr	r3, [pc, #48]	; (80085e4 <xQueueGenericReset+0xcc>)
 80085b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	e009      	b.n	80085d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3310      	adds	r3, #16
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff fef2 	bl	80083b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3324      	adds	r3, #36	; 0x24
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7ff feed 	bl	80083b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085d6:	f002 fc55 	bl	800ae84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80085da:	2301      	movs	r3, #1
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	e000ed04 	.word	0xe000ed04

080085e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08e      	sub	sp, #56	; 0x38
 80085ec:	af02      	add	r7, sp, #8
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10a      	bne.n	800862e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861c:	f383 8811 	msr	BASEPRI, r3
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
}
 800862a:	bf00      	nop
 800862c:	e7fe      	b.n	800862c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <xQueueGenericCreateStatic+0x52>
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <xQueueGenericCreateStatic+0x56>
 800863a:	2301      	movs	r3, #1
 800863c:	e000      	b.n	8008640 <xQueueGenericCreateStatic+0x58>
 800863e:	2300      	movs	r3, #0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10a      	bne.n	800865a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	623b      	str	r3, [r7, #32]
}
 8008656:	bf00      	nop
 8008658:	e7fe      	b.n	8008658 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d102      	bne.n	8008666 <xQueueGenericCreateStatic+0x7e>
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <xQueueGenericCreateStatic+0x82>
 8008666:	2301      	movs	r3, #1
 8008668:	e000      	b.n	800866c <xQueueGenericCreateStatic+0x84>
 800866a:	2300      	movs	r3, #0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10a      	bne.n	8008686 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	61fb      	str	r3, [r7, #28]
}
 8008682:	bf00      	nop
 8008684:	e7fe      	b.n	8008684 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008686:	2350      	movs	r3, #80	; 0x50
 8008688:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b50      	cmp	r3, #80	; 0x50
 800868e:	d00a      	beq.n	80086a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	61bb      	str	r3, [r7, #24]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80086ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00d      	beq.n	80086ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	4613      	mov	r3, r2
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	68b9      	ldr	r1, [r7, #8]
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 f83f 	bl	800874c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3730      	adds	r7, #48	; 0x30
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08a      	sub	sp, #40	; 0x28
 80086dc:	af02      	add	r7, sp, #8
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	4613      	mov	r3, r2
 80086e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10a      	bne.n	8008702 <xQueueGenericCreate+0x2a>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	613b      	str	r3, [r7, #16]
}
 80086fe:	bf00      	nop
 8008700:	e7fe      	b.n	8008700 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	fb02 f303 	mul.w	r3, r2, r3
 800870a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	3350      	adds	r3, #80	; 0x50
 8008710:	4618      	mov	r0, r3
 8008712:	f002 fca9 	bl	800b068 <pvPortMalloc>
 8008716:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d011      	beq.n	8008742 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	3350      	adds	r3, #80	; 0x50
 8008726:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008730:	79fa      	ldrb	r2, [r7, #7]
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	4613      	mov	r3, r2
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	68b9      	ldr	r1, [r7, #8]
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 f805 	bl	800874c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008742:	69bb      	ldr	r3, [r7, #24]
	}
 8008744:	4618      	mov	r0, r3
 8008746:	3720      	adds	r7, #32
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d103      	bne.n	8008768 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	e002      	b.n	800876e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800877a:	2101      	movs	r1, #1
 800877c:	69b8      	ldr	r0, [r7, #24]
 800877e:	f7ff fecb 	bl	8008518 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	78fa      	ldrb	r2, [r7, #3]
 8008786:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800878a:	bf00      	nop
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00e      	beq.n	80087be <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80087b2:	2300      	movs	r3, #0
 80087b4:	2200      	movs	r2, #0
 80087b6:	2100      	movs	r1, #0
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f8a1 	bl	8008900 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b086      	sub	sp, #24
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	4603      	mov	r3, r0
 80087ce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80087d0:	2301      	movs	r3, #1
 80087d2:	617b      	str	r3, [r7, #20]
 80087d4:	2300      	movs	r3, #0
 80087d6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	461a      	mov	r2, r3
 80087dc:	6939      	ldr	r1, [r7, #16]
 80087de:	6978      	ldr	r0, [r7, #20]
 80087e0:	f7ff ff7a 	bl	80086d8 <xQueueGenericCreate>
 80087e4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f7ff ffd3 	bl	8008792 <prvInitialiseMutex>

		return xNewQueue;
 80087ec:	68fb      	ldr	r3, [r7, #12]
	}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b088      	sub	sp, #32
 80087fa:	af02      	add	r7, sp, #8
 80087fc:	4603      	mov	r3, r0
 80087fe:	6039      	str	r1, [r7, #0]
 8008800:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008802:	2301      	movs	r3, #1
 8008804:	617b      	str	r3, [r7, #20]
 8008806:	2300      	movs	r3, #0
 8008808:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800880a:	79fb      	ldrb	r3, [r7, #7]
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2200      	movs	r2, #0
 8008812:	6939      	ldr	r1, [r7, #16]
 8008814:	6978      	ldr	r0, [r7, #20]
 8008816:	f7ff fee7 	bl	80085e8 <xQueueGenericCreateStatic>
 800881a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f7ff ffb8 	bl	8008792 <prvInitialiseMutex>

		return xNewQueue;
 8008822:	68fb      	ldr	r3, [r7, #12]
	}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800882c:	b590      	push	{r4, r7, lr}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10a      	bne.n	8008854 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	60fb      	str	r3, [r7, #12]
}
 8008850:	bf00      	nop
 8008852:	e7fe      	b.n	8008852 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	689c      	ldr	r4, [r3, #8]
 8008858:	f001 fb7c 	bl	8009f54 <xTaskGetCurrentTaskHandle>
 800885c:	4603      	mov	r3, r0
 800885e:	429c      	cmp	r4, r3
 8008860:	d111      	bne.n	8008886 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	1e5a      	subs	r2, r3, #1
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d105      	bne.n	8008880 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008874:	2300      	movs	r3, #0
 8008876:	2200      	movs	r2, #0
 8008878:	2100      	movs	r1, #0
 800887a:	6938      	ldr	r0, [r7, #16]
 800887c:	f000 f840 	bl	8008900 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008880:	2301      	movs	r3, #1
 8008882:	617b      	str	r3, [r7, #20]
 8008884:	e001      	b.n	800888a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008886:	2300      	movs	r3, #0
 8008888:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800888a:	697b      	ldr	r3, [r7, #20]
	}
 800888c:	4618      	mov	r0, r3
 800888e:	371c      	adds	r7, #28
 8008890:	46bd      	mov	sp, r7
 8008892:	bd90      	pop	{r4, r7, pc}

08008894 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008894:	b590      	push	{r4, r7, lr}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10a      	bne.n	80088be <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	60fb      	str	r3, [r7, #12]
}
 80088ba:	bf00      	nop
 80088bc:	e7fe      	b.n	80088bc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	689c      	ldr	r4, [r3, #8]
 80088c2:	f001 fb47 	bl	8009f54 <xTaskGetCurrentTaskHandle>
 80088c6:	4603      	mov	r3, r0
 80088c8:	429c      	cmp	r4, r3
 80088ca:	d107      	bne.n	80088dc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80088d6:	2301      	movs	r3, #1
 80088d8:	617b      	str	r3, [r7, #20]
 80088da:	e00c      	b.n	80088f6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6938      	ldr	r0, [r7, #16]
 80088e0:	f000 fa88 	bl	8008df4 <xQueueSemaphoreTake>
 80088e4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d004      	beq.n	80088f6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	1c5a      	adds	r2, r3, #1
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80088f6:	697b      	ldr	r3, [r7, #20]
	}
 80088f8:	4618      	mov	r0, r3
 80088fa:	371c      	adds	r7, #28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd90      	pop	{r4, r7, pc}

08008900 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08e      	sub	sp, #56	; 0x38
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
 800890c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800890e:	2300      	movs	r3, #0
 8008910:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10a      	bne.n	8008932 <xQueueGenericSend+0x32>
	__asm volatile
 800891c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008920:	f383 8811 	msr	BASEPRI, r3
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800892e:	bf00      	nop
 8008930:	e7fe      	b.n	8008930 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d103      	bne.n	8008940 <xQueueGenericSend+0x40>
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <xQueueGenericSend+0x44>
 8008940:	2301      	movs	r3, #1
 8008942:	e000      	b.n	8008946 <xQueueGenericSend+0x46>
 8008944:	2300      	movs	r3, #0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10a      	bne.n	8008960 <xQueueGenericSend+0x60>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800895c:	bf00      	nop
 800895e:	e7fe      	b.n	800895e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b02      	cmp	r3, #2
 8008964:	d103      	bne.n	800896e <xQueueGenericSend+0x6e>
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800896a:	2b01      	cmp	r3, #1
 800896c:	d101      	bne.n	8008972 <xQueueGenericSend+0x72>
 800896e:	2301      	movs	r3, #1
 8008970:	e000      	b.n	8008974 <xQueueGenericSend+0x74>
 8008972:	2300      	movs	r3, #0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10a      	bne.n	800898e <xQueueGenericSend+0x8e>
	__asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	623b      	str	r3, [r7, #32]
}
 800898a:	bf00      	nop
 800898c:	e7fe      	b.n	800898c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800898e:	f001 faf1 	bl	8009f74 <xTaskGetSchedulerState>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d102      	bne.n	800899e <xQueueGenericSend+0x9e>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d101      	bne.n	80089a2 <xQueueGenericSend+0xa2>
 800899e:	2301      	movs	r3, #1
 80089a0:	e000      	b.n	80089a4 <xQueueGenericSend+0xa4>
 80089a2:	2300      	movs	r3, #0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10a      	bne.n	80089be <xQueueGenericSend+0xbe>
	__asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	61fb      	str	r3, [r7, #28]
}
 80089ba:	bf00      	nop
 80089bc:	e7fe      	b.n	80089bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089be:	f002 fa31 	bl	800ae24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d302      	bcc.n	80089d4 <xQueueGenericSend+0xd4>
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d129      	bne.n	8008a28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	68b9      	ldr	r1, [r7, #8]
 80089d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089da:	f000 fb2f 	bl	800903c <prvCopyDataToQueue>
 80089de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d010      	beq.n	8008a0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ea:	3324      	adds	r3, #36	; 0x24
 80089ec:	4618      	mov	r0, r3
 80089ee:	f001 f8f3 	bl	8009bd8 <xTaskRemoveFromEventList>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d013      	beq.n	8008a20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80089f8:	4b3f      	ldr	r3, [pc, #252]	; (8008af8 <xQueueGenericSend+0x1f8>)
 80089fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	e00a      	b.n	8008a20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d007      	beq.n	8008a20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a10:	4b39      	ldr	r3, [pc, #228]	; (8008af8 <xQueueGenericSend+0x1f8>)
 8008a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a20:	f002 fa30 	bl	800ae84 <vPortExitCritical>
				return pdPASS;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e063      	b.n	8008af0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d103      	bne.n	8008a36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a2e:	f002 fa29 	bl	800ae84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	e05c      	b.n	8008af0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d106      	bne.n	8008a4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a3c:	f107 0314 	add.w	r3, r7, #20
 8008a40:	4618      	mov	r0, r3
 8008a42:	f001 f92d 	bl	8009ca0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a46:	2301      	movs	r3, #1
 8008a48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a4a:	f002 fa1b 	bl	800ae84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a4e:	f000 fe9f 	bl	8009790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a52:	f002 f9e7 	bl	800ae24 <vPortEnterCritical>
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a5c:	b25b      	sxtb	r3, r3
 8008a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a62:	d103      	bne.n	8008a6c <xQueueGenericSend+0x16c>
 8008a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a72:	b25b      	sxtb	r3, r3
 8008a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a78:	d103      	bne.n	8008a82 <xQueueGenericSend+0x182>
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a82:	f002 f9ff 	bl	800ae84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a86:	1d3a      	adds	r2, r7, #4
 8008a88:	f107 0314 	add.w	r3, r7, #20
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f001 f91c 	bl	8009ccc <xTaskCheckForTimeOut>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d124      	bne.n	8008ae4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a9c:	f000 fbc6 	bl	800922c <prvIsQueueFull>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d018      	beq.n	8008ad8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa8:	3310      	adds	r3, #16
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	4611      	mov	r1, r2
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f001 f842 	bl	8009b38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ab6:	f000 fb51 	bl	800915c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008aba:	f000 fe77 	bl	80097ac <xTaskResumeAll>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f47f af7c 	bne.w	80089be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008ac6:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <xQueueGenericSend+0x1f8>)
 8008ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	e772      	b.n	80089be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ada:	f000 fb3f 	bl	800915c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ade:	f000 fe65 	bl	80097ac <xTaskResumeAll>
 8008ae2:	e76c      	b.n	80089be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ae6:	f000 fb39 	bl	800915c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008aea:	f000 fe5f 	bl	80097ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008aee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3738      	adds	r7, #56	; 0x38
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	e000ed04 	.word	0xe000ed04

08008afc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b090      	sub	sp, #64	; 0x40
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
 8008b08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10a      	bne.n	8008b2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b26:	bf00      	nop
 8008b28:	e7fe      	b.n	8008b28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d103      	bne.n	8008b38 <xQueueGenericSendFromISR+0x3c>
 8008b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d101      	bne.n	8008b3c <xQueueGenericSendFromISR+0x40>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e000      	b.n	8008b3e <xQueueGenericSendFromISR+0x42>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10a      	bne.n	8008b58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b54:	bf00      	nop
 8008b56:	e7fe      	b.n	8008b56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d103      	bne.n	8008b66 <xQueueGenericSendFromISR+0x6a>
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d101      	bne.n	8008b6a <xQueueGenericSendFromISR+0x6e>
 8008b66:	2301      	movs	r3, #1
 8008b68:	e000      	b.n	8008b6c <xQueueGenericSendFromISR+0x70>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10a      	bne.n	8008b86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	623b      	str	r3, [r7, #32]
}
 8008b82:	bf00      	nop
 8008b84:	e7fe      	b.n	8008b84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b86:	f002 fa2f 	bl	800afe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b8a:	f3ef 8211 	mrs	r2, BASEPRI
 8008b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	61fa      	str	r2, [r7, #28]
 8008ba0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ba2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ba4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d302      	bcc.n	8008bb8 <xQueueGenericSendFromISR+0xbc>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d12f      	bne.n	8008c18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	68b9      	ldr	r1, [r7, #8]
 8008bcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008bce:	f000 fa35 	bl	800903c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008bd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bda:	d112      	bne.n	8008c02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d016      	beq.n	8008c12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be6:	3324      	adds	r3, #36	; 0x24
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 fff5 	bl	8009bd8 <xTaskRemoveFromEventList>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00e      	beq.n	8008c12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00b      	beq.n	8008c12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	e007      	b.n	8008c12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c06:	3301      	adds	r3, #1
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	b25a      	sxtb	r2, r3
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c12:	2301      	movs	r3, #1
 8008c14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008c16:	e001      	b.n	8008c1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3740      	adds	r7, #64	; 0x40
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b08c      	sub	sp, #48	; 0x30
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c40:	2300      	movs	r3, #0
 8008c42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10a      	bne.n	8008c64 <xQueueReceive+0x30>
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	623b      	str	r3, [r7, #32]
}
 8008c60:	bf00      	nop
 8008c62:	e7fe      	b.n	8008c62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d103      	bne.n	8008c72 <xQueueReceive+0x3e>
 8008c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <xQueueReceive+0x42>
 8008c72:	2301      	movs	r3, #1
 8008c74:	e000      	b.n	8008c78 <xQueueReceive+0x44>
 8008c76:	2300      	movs	r3, #0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10a      	bne.n	8008c92 <xQueueReceive+0x5e>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	61fb      	str	r3, [r7, #28]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c92:	f001 f96f 	bl	8009f74 <xTaskGetSchedulerState>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <xQueueReceive+0x6e>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d101      	bne.n	8008ca6 <xQueueReceive+0x72>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e000      	b.n	8008ca8 <xQueueReceive+0x74>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10a      	bne.n	8008cc2 <xQueueReceive+0x8e>
	__asm volatile
 8008cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb0:	f383 8811 	msr	BASEPRI, r3
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	61bb      	str	r3, [r7, #24]
}
 8008cbe:	bf00      	nop
 8008cc0:	e7fe      	b.n	8008cc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cc2:	f002 f8af 	bl	800ae24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d01f      	beq.n	8008d12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cd2:	68b9      	ldr	r1, [r7, #8]
 8008cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cd6:	f000 fa1b 	bl	8009110 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	1e5a      	subs	r2, r3, #1
 8008cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00f      	beq.n	8008d0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	3310      	adds	r3, #16
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 ff72 	bl	8009bd8 <xTaskRemoveFromEventList>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d007      	beq.n	8008d0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008cfa:	4b3d      	ldr	r3, [pc, #244]	; (8008df0 <xQueueReceive+0x1bc>)
 8008cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d00:	601a      	str	r2, [r3, #0]
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d0a:	f002 f8bb 	bl	800ae84 <vPortExitCritical>
				return pdPASS;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e069      	b.n	8008de6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d103      	bne.n	8008d20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d18:	f002 f8b4 	bl	800ae84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	e062      	b.n	8008de6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d106      	bne.n	8008d34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d26:	f107 0310 	add.w	r3, r7, #16
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 ffb8 	bl	8009ca0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d30:	2301      	movs	r3, #1
 8008d32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d34:	f002 f8a6 	bl	800ae84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d38:	f000 fd2a 	bl	8009790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d3c:	f002 f872 	bl	800ae24 <vPortEnterCritical>
 8008d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d46:	b25b      	sxtb	r3, r3
 8008d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4c:	d103      	bne.n	8008d56 <xQueueReceive+0x122>
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d5c:	b25b      	sxtb	r3, r3
 8008d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d62:	d103      	bne.n	8008d6c <xQueueReceive+0x138>
 8008d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d6c:	f002 f88a 	bl	800ae84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d70:	1d3a      	adds	r2, r7, #4
 8008d72:	f107 0310 	add.w	r3, r7, #16
 8008d76:	4611      	mov	r1, r2
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 ffa7 	bl	8009ccc <xTaskCheckForTimeOut>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d123      	bne.n	8008dcc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d86:	f000 fa3b 	bl	8009200 <prvIsQueueEmpty>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d017      	beq.n	8008dc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d92:	3324      	adds	r3, #36	; 0x24
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	4611      	mov	r1, r2
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fecd 	bl	8009b38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008da0:	f000 f9dc 	bl	800915c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008da4:	f000 fd02 	bl	80097ac <xTaskResumeAll>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d189      	bne.n	8008cc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008dae:	4b10      	ldr	r3, [pc, #64]	; (8008df0 <xQueueReceive+0x1bc>)
 8008db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	e780      	b.n	8008cc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dc2:	f000 f9cb 	bl	800915c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dc6:	f000 fcf1 	bl	80097ac <xTaskResumeAll>
 8008dca:	e77a      	b.n	8008cc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dce:	f000 f9c5 	bl	800915c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dd2:	f000 fceb 	bl	80097ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dd8:	f000 fa12 	bl	8009200 <prvIsQueueEmpty>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f43f af6f 	beq.w	8008cc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008de4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3730      	adds	r7, #48	; 0x30
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	e000ed04 	.word	0xe000ed04

08008df4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08e      	sub	sp, #56	; 0x38
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008e06:	2300      	movs	r3, #0
 8008e08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10a      	bne.n	8008e26 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	623b      	str	r3, [r7, #32]
}
 8008e22:	bf00      	nop
 8008e24:	e7fe      	b.n	8008e24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00a      	beq.n	8008e44 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	61fb      	str	r3, [r7, #28]
}
 8008e40:	bf00      	nop
 8008e42:	e7fe      	b.n	8008e42 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e44:	f001 f896 	bl	8009f74 <xTaskGetSchedulerState>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d102      	bne.n	8008e54 <xQueueSemaphoreTake+0x60>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <xQueueSemaphoreTake+0x64>
 8008e54:	2301      	movs	r3, #1
 8008e56:	e000      	b.n	8008e5a <xQueueSemaphoreTake+0x66>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10a      	bne.n	8008e74 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	61bb      	str	r3, [r7, #24]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e74:	f001 ffd6 	bl	800ae24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d024      	beq.n	8008ece <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	1e5a      	subs	r2, r3, #1
 8008e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d104      	bne.n	8008e9e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008e94:	f001 f9e4 	bl	800a260 <pvTaskIncrementMutexHeldCount>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00f      	beq.n	8008ec6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	3310      	adds	r3, #16
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 fe94 	bl	8009bd8 <xTaskRemoveFromEventList>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d007      	beq.n	8008ec6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008eb6:	4b54      	ldr	r3, [pc, #336]	; (8009008 <xQueueSemaphoreTake+0x214>)
 8008eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ebc:	601a      	str	r2, [r3, #0]
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ec6:	f001 ffdd 	bl	800ae84 <vPortExitCritical>
				return pdPASS;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e097      	b.n	8008ffe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d111      	bne.n	8008ef8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00a      	beq.n	8008ef0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	617b      	str	r3, [r7, #20]
}
 8008eec:	bf00      	nop
 8008eee:	e7fe      	b.n	8008eee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008ef0:	f001 ffc8 	bl	800ae84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	e082      	b.n	8008ffe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d106      	bne.n	8008f0c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008efe:	f107 030c 	add.w	r3, r7, #12
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 fecc 	bl	8009ca0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f0c:	f001 ffba 	bl	800ae84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f10:	f000 fc3e 	bl	8009790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f14:	f001 ff86 	bl	800ae24 <vPortEnterCritical>
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f1e:	b25b      	sxtb	r3, r3
 8008f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f24:	d103      	bne.n	8008f2e <xQueueSemaphoreTake+0x13a>
 8008f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f34:	b25b      	sxtb	r3, r3
 8008f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3a:	d103      	bne.n	8008f44 <xQueueSemaphoreTake+0x150>
 8008f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f44:	f001 ff9e 	bl	800ae84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f48:	463a      	mov	r2, r7
 8008f4a:	f107 030c 	add.w	r3, r7, #12
 8008f4e:	4611      	mov	r1, r2
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 febb 	bl	8009ccc <xTaskCheckForTimeOut>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d132      	bne.n	8008fc2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f5e:	f000 f94f 	bl	8009200 <prvIsQueueEmpty>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d026      	beq.n	8008fb6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d109      	bne.n	8008f84 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008f70:	f001 ff58 	bl	800ae24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f001 f819 	bl	8009fb0 <xTaskPriorityInherit>
 8008f7e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008f80:	f001 ff80 	bl	800ae84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f86:	3324      	adds	r3, #36	; 0x24
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 fdd3 	bl	8009b38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f94:	f000 f8e2 	bl	800915c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f98:	f000 fc08 	bl	80097ac <xTaskResumeAll>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f47f af68 	bne.w	8008e74 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008fa4:	4b18      	ldr	r3, [pc, #96]	; (8009008 <xQueueSemaphoreTake+0x214>)
 8008fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008faa:	601a      	str	r2, [r3, #0]
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	e75e      	b.n	8008e74 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008fb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fb8:	f000 f8d0 	bl	800915c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fbc:	f000 fbf6 	bl	80097ac <xTaskResumeAll>
 8008fc0:	e758      	b.n	8008e74 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008fc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fc4:	f000 f8ca 	bl	800915c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fc8:	f000 fbf0 	bl	80097ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fce:	f000 f917 	bl	8009200 <prvIsQueueEmpty>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f43f af4d 	beq.w	8008e74 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00d      	beq.n	8008ffc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008fe0:	f001 ff20 	bl	800ae24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008fe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fe6:	f000 f811 	bl	800900c <prvGetDisinheritPriorityAfterTimeout>
 8008fea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f001 f8b2 	bl	800a15c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008ff8:	f001 ff44 	bl	800ae84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ffc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3738      	adds	r7, #56	; 0x38
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	e000ed04 	.word	0xe000ed04

0800900c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009018:	2b00      	cmp	r3, #0
 800901a:	d006      	beq.n	800902a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	e001      	b.n	800902e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800902a:	2300      	movs	r3, #0
 800902c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800902e:	68fb      	ldr	r3, [r7, #12]
	}
 8009030:	4618      	mov	r0, r3
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009048:	2300      	movs	r3, #0
 800904a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009050:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10d      	bne.n	8009076 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d14d      	bne.n	80090fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	4618      	mov	r0, r3
 8009068:	f001 f80a 	bl	800a080 <xTaskPriorityDisinherit>
 800906c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	609a      	str	r2, [r3, #8]
 8009074:	e043      	b.n	80090fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d119      	bne.n	80090b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6858      	ldr	r0, [r3, #4]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009084:	461a      	mov	r2, r3
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	f002 fa06 	bl	800b498 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009094:	441a      	add	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d32b      	bcc.n	80090fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	605a      	str	r2, [r3, #4]
 80090ae:	e026      	b.n	80090fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	68d8      	ldr	r0, [r3, #12]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b8:	461a      	mov	r2, r3
 80090ba:	68b9      	ldr	r1, [r7, #8]
 80090bc:	f002 f9ec 	bl	800b498 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	68da      	ldr	r2, [r3, #12]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c8:	425b      	negs	r3, r3
 80090ca:	441a      	add	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	68da      	ldr	r2, [r3, #12]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d207      	bcs.n	80090ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e4:	425b      	negs	r3, r3
 80090e6:	441a      	add	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d105      	bne.n	80090fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	3b01      	subs	r3, #1
 80090fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009106:	697b      	ldr	r3, [r7, #20]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911e:	2b00      	cmp	r3, #0
 8009120:	d018      	beq.n	8009154 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	68da      	ldr	r2, [r3, #12]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912a:	441a      	add	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	68da      	ldr	r2, [r3, #12]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	429a      	cmp	r2, r3
 800913a:	d303      	bcc.n	8009144 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68d9      	ldr	r1, [r3, #12]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	461a      	mov	r2, r3
 800914e:	6838      	ldr	r0, [r7, #0]
 8009150:	f002 f9a2 	bl	800b498 <memcpy>
	}
}
 8009154:	bf00      	nop
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009164:	f001 fe5e 	bl	800ae24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800916e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009170:	e011      	b.n	8009196 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009176:	2b00      	cmp	r3, #0
 8009178:	d012      	beq.n	80091a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3324      	adds	r3, #36	; 0x24
 800917e:	4618      	mov	r0, r3
 8009180:	f000 fd2a 	bl	8009bd8 <xTaskRemoveFromEventList>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800918a:	f000 fe01 	bl	8009d90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	3b01      	subs	r3, #1
 8009192:	b2db      	uxtb	r3, r3
 8009194:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800919a:	2b00      	cmp	r3, #0
 800919c:	dce9      	bgt.n	8009172 <prvUnlockQueue+0x16>
 800919e:	e000      	b.n	80091a2 <prvUnlockQueue+0x46>
					break;
 80091a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	22ff      	movs	r2, #255	; 0xff
 80091a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80091aa:	f001 fe6b 	bl	800ae84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80091ae:	f001 fe39 	bl	800ae24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091ba:	e011      	b.n	80091e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d012      	beq.n	80091ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3310      	adds	r3, #16
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 fd05 	bl	8009bd8 <xTaskRemoveFromEventList>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80091d4:	f000 fddc 	bl	8009d90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80091d8:	7bbb      	ldrb	r3, [r7, #14]
 80091da:	3b01      	subs	r3, #1
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	dce9      	bgt.n	80091bc <prvUnlockQueue+0x60>
 80091e8:	e000      	b.n	80091ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	22ff      	movs	r2, #255	; 0xff
 80091f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80091f4:	f001 fe46 	bl	800ae84 <vPortExitCritical>
}
 80091f8:	bf00      	nop
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009208:	f001 fe0c 	bl	800ae24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009210:	2b00      	cmp	r3, #0
 8009212:	d102      	bne.n	800921a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009214:	2301      	movs	r3, #1
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	e001      	b.n	800921e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800921a:	2300      	movs	r3, #0
 800921c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800921e:	f001 fe31 	bl	800ae84 <vPortExitCritical>

	return xReturn;
 8009222:	68fb      	ldr	r3, [r7, #12]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009234:	f001 fdf6 	bl	800ae24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009240:	429a      	cmp	r2, r3
 8009242:	d102      	bne.n	800924a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009244:	2301      	movs	r3, #1
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	e001      	b.n	800924e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800924a:	2300      	movs	r3, #0
 800924c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800924e:	f001 fe19 	bl	800ae84 <vPortExitCritical>

	return xReturn;
 8009252:	68fb      	ldr	r3, [r7, #12]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009266:	2300      	movs	r3, #0
 8009268:	60fb      	str	r3, [r7, #12]
 800926a:	e014      	b.n	8009296 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800926c:	4a0f      	ldr	r2, [pc, #60]	; (80092ac <vQueueAddToRegistry+0x50>)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10b      	bne.n	8009290 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009278:	490c      	ldr	r1, [pc, #48]	; (80092ac <vQueueAddToRegistry+0x50>)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009282:	4a0a      	ldr	r2, [pc, #40]	; (80092ac <vQueueAddToRegistry+0x50>)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	00db      	lsls	r3, r3, #3
 8009288:	4413      	add	r3, r2
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800928e:	e006      	b.n	800929e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3301      	adds	r3, #1
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2b07      	cmp	r3, #7
 800929a:	d9e7      	bls.n	800926c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	3714      	adds	r7, #20
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	20005844 	.word	0x20005844

080092b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80092c0:	f001 fdb0 	bl	800ae24 <vPortEnterCritical>
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092ca:	b25b      	sxtb	r3, r3
 80092cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d0:	d103      	bne.n	80092da <vQueueWaitForMessageRestricted+0x2a>
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092e0:	b25b      	sxtb	r3, r3
 80092e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e6:	d103      	bne.n	80092f0 <vQueueWaitForMessageRestricted+0x40>
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092f0:	f001 fdc8 	bl	800ae84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d106      	bne.n	800930a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	3324      	adds	r3, #36	; 0x24
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	68b9      	ldr	r1, [r7, #8]
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fc3b 	bl	8009b80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800930a:	6978      	ldr	r0, [r7, #20]
 800930c:	f7ff ff26 	bl	800915c <prvUnlockQueue>
	}
 8009310:	bf00      	nop
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009318:	b580      	push	{r7, lr}
 800931a:	b08e      	sub	sp, #56	; 0x38
 800931c:	af04      	add	r7, sp, #16
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10a      	bne.n	8009342 <xTaskCreateStatic+0x2a>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	623b      	str	r3, [r7, #32]
}
 800933e:	bf00      	nop
 8009340:	e7fe      	b.n	8009340 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10a      	bne.n	800935e <xTaskCreateStatic+0x46>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	61fb      	str	r3, [r7, #28]
}
 800935a:	bf00      	nop
 800935c:	e7fe      	b.n	800935c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800935e:	235c      	movs	r3, #92	; 0x5c
 8009360:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	2b5c      	cmp	r3, #92	; 0x5c
 8009366:	d00a      	beq.n	800937e <xTaskCreateStatic+0x66>
	__asm volatile
 8009368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	61bb      	str	r3, [r7, #24]
}
 800937a:	bf00      	nop
 800937c:	e7fe      	b.n	800937c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800937e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009382:	2b00      	cmp	r3, #0
 8009384:	d01e      	beq.n	80093c4 <xTaskCreateStatic+0xac>
 8009386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009388:	2b00      	cmp	r3, #0
 800938a:	d01b      	beq.n	80093c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009394:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009398:	2202      	movs	r2, #2
 800939a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800939e:	2300      	movs	r3, #0
 80093a0:	9303      	str	r3, [sp, #12]
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	9302      	str	r3, [sp, #8]
 80093a6:	f107 0314 	add.w	r3, r7, #20
 80093aa:	9301      	str	r3, [sp, #4]
 80093ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	68b9      	ldr	r1, [r7, #8]
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f000 f850 	bl	800945c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093be:	f000 f8dd 	bl	800957c <prvAddNewTaskToReadyList>
 80093c2:	e001      	b.n	80093c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80093c4:	2300      	movs	r3, #0
 80093c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80093c8:	697b      	ldr	r3, [r7, #20]
	}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3728      	adds	r7, #40	; 0x28
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b08c      	sub	sp, #48	; 0x30
 80093d6:	af04      	add	r7, sp, #16
 80093d8:	60f8      	str	r0, [r7, #12]
 80093da:	60b9      	str	r1, [r7, #8]
 80093dc:	603b      	str	r3, [r7, #0]
 80093de:	4613      	mov	r3, r2
 80093e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80093e2:	88fb      	ldrh	r3, [r7, #6]
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4618      	mov	r0, r3
 80093e8:	f001 fe3e 	bl	800b068 <pvPortMalloc>
 80093ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00e      	beq.n	8009412 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80093f4:	205c      	movs	r0, #92	; 0x5c
 80093f6:	f001 fe37 	bl	800b068 <pvPortMalloc>
 80093fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	631a      	str	r2, [r3, #48]	; 0x30
 8009408:	e005      	b.n	8009416 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800940a:	6978      	ldr	r0, [r7, #20]
 800940c:	f001 fef8 	bl	800b200 <vPortFree>
 8009410:	e001      	b.n	8009416 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009412:	2300      	movs	r3, #0
 8009414:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d017      	beq.n	800944c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009424:	88fa      	ldrh	r2, [r7, #6]
 8009426:	2300      	movs	r3, #0
 8009428:	9303      	str	r3, [sp, #12]
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	9302      	str	r3, [sp, #8]
 800942e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	68b9      	ldr	r1, [r7, #8]
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 f80e 	bl	800945c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009440:	69f8      	ldr	r0, [r7, #28]
 8009442:	f000 f89b 	bl	800957c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009446:	2301      	movs	r3, #1
 8009448:	61bb      	str	r3, [r7, #24]
 800944a:	e002      	b.n	8009452 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800944c:	f04f 33ff 	mov.w	r3, #4294967295
 8009450:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009452:	69bb      	ldr	r3, [r7, #24]
	}
 8009454:	4618      	mov	r0, r3
 8009456:	3720      	adds	r7, #32
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b088      	sub	sp, #32
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
 8009468:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800946a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	461a      	mov	r2, r3
 8009474:	21a5      	movs	r1, #165	; 0xa5
 8009476:	f002 f81d 	bl	800b4b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009484:	3b01      	subs	r3, #1
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	f023 0307 	bic.w	r3, r3, #7
 8009492:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	f003 0307 	and.w	r3, r3, #7
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00a      	beq.n	80094b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	617b      	str	r3, [r7, #20]
}
 80094b0:	bf00      	nop
 80094b2:	e7fe      	b.n	80094b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d01f      	beq.n	80094fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094ba:	2300      	movs	r3, #0
 80094bc:	61fb      	str	r3, [r7, #28]
 80094be:	e012      	b.n	80094e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	4413      	add	r3, r2
 80094c6:	7819      	ldrb	r1, [r3, #0]
 80094c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	4413      	add	r3, r2
 80094ce:	3334      	adds	r3, #52	; 0x34
 80094d0:	460a      	mov	r2, r1
 80094d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	4413      	add	r3, r2
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d006      	beq.n	80094ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	3301      	adds	r3, #1
 80094e4:	61fb      	str	r3, [r7, #28]
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	2b0f      	cmp	r3, #15
 80094ea:	d9e9      	bls.n	80094c0 <prvInitialiseNewTask+0x64>
 80094ec:	e000      	b.n	80094f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80094ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80094f8:	e003      	b.n	8009502 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80094fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	2b37      	cmp	r3, #55	; 0x37
 8009506:	d901      	bls.n	800950c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009508:	2337      	movs	r3, #55	; 0x37
 800950a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800950c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009510:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009516:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951a:	2200      	movs	r2, #0
 800951c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	3304      	adds	r3, #4
 8009522:	4618      	mov	r0, r3
 8009524:	f7fe ff64 	bl	80083f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952a:	3318      	adds	r3, #24
 800952c:	4618      	mov	r0, r3
 800952e:	f7fe ff5f 	bl	80083f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009536:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800953e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009540:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009546:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	2200      	movs	r2, #0
 800954c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	68f9      	ldr	r1, [r7, #12]
 800955a:	69b8      	ldr	r0, [r7, #24]
 800955c:	f001 fb36 	bl	800abcc <pxPortInitialiseStack>
 8009560:	4602      	mov	r2, r0
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800956c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009570:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009572:	bf00      	nop
 8009574:	3720      	adds	r7, #32
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
	...

0800957c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009584:	f001 fc4e 	bl	800ae24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009588:	4b2d      	ldr	r3, [pc, #180]	; (8009640 <prvAddNewTaskToReadyList+0xc4>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3301      	adds	r3, #1
 800958e:	4a2c      	ldr	r2, [pc, #176]	; (8009640 <prvAddNewTaskToReadyList+0xc4>)
 8009590:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009592:	4b2c      	ldr	r3, [pc, #176]	; (8009644 <prvAddNewTaskToReadyList+0xc8>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d109      	bne.n	80095ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800959a:	4a2a      	ldr	r2, [pc, #168]	; (8009644 <prvAddNewTaskToReadyList+0xc8>)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80095a0:	4b27      	ldr	r3, [pc, #156]	; (8009640 <prvAddNewTaskToReadyList+0xc4>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d110      	bne.n	80095ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80095a8:	f000 fc16 	bl	8009dd8 <prvInitialiseTaskLists>
 80095ac:	e00d      	b.n	80095ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80095ae:	4b26      	ldr	r3, [pc, #152]	; (8009648 <prvAddNewTaskToReadyList+0xcc>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d109      	bne.n	80095ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80095b6:	4b23      	ldr	r3, [pc, #140]	; (8009644 <prvAddNewTaskToReadyList+0xc8>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d802      	bhi.n	80095ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80095c4:	4a1f      	ldr	r2, [pc, #124]	; (8009644 <prvAddNewTaskToReadyList+0xc8>)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80095ca:	4b20      	ldr	r3, [pc, #128]	; (800964c <prvAddNewTaskToReadyList+0xd0>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	3301      	adds	r3, #1
 80095d0:	4a1e      	ldr	r2, [pc, #120]	; (800964c <prvAddNewTaskToReadyList+0xd0>)
 80095d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80095d4:	4b1d      	ldr	r3, [pc, #116]	; (800964c <prvAddNewTaskToReadyList+0xd0>)
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e0:	4b1b      	ldr	r3, [pc, #108]	; (8009650 <prvAddNewTaskToReadyList+0xd4>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d903      	bls.n	80095f0 <prvAddNewTaskToReadyList+0x74>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ec:	4a18      	ldr	r2, [pc, #96]	; (8009650 <prvAddNewTaskToReadyList+0xd4>)
 80095ee:	6013      	str	r3, [r2, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f4:	4613      	mov	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4a15      	ldr	r2, [pc, #84]	; (8009654 <prvAddNewTaskToReadyList+0xd8>)
 80095fe:	441a      	add	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	3304      	adds	r3, #4
 8009604:	4619      	mov	r1, r3
 8009606:	4610      	mov	r0, r2
 8009608:	f7fe feff 	bl	800840a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800960c:	f001 fc3a 	bl	800ae84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009610:	4b0d      	ldr	r3, [pc, #52]	; (8009648 <prvAddNewTaskToReadyList+0xcc>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00e      	beq.n	8009636 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009618:	4b0a      	ldr	r3, [pc, #40]	; (8009644 <prvAddNewTaskToReadyList+0xc8>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009622:	429a      	cmp	r2, r3
 8009624:	d207      	bcs.n	8009636 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009626:	4b0c      	ldr	r3, [pc, #48]	; (8009658 <prvAddNewTaskToReadyList+0xdc>)
 8009628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	f3bf 8f4f 	dsb	sy
 8009632:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009636:	bf00      	nop
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	20000dd4 	.word	0x20000dd4
 8009644:	20000900 	.word	0x20000900
 8009648:	20000de0 	.word	0x20000de0
 800964c:	20000df0 	.word	0x20000df0
 8009650:	20000ddc 	.word	0x20000ddc
 8009654:	20000904 	.word	0x20000904
 8009658:	e000ed04 	.word	0xe000ed04

0800965c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009664:	2300      	movs	r3, #0
 8009666:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d017      	beq.n	800969e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800966e:	4b13      	ldr	r3, [pc, #76]	; (80096bc <vTaskDelay+0x60>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00a      	beq.n	800968c <vTaskDelay+0x30>
	__asm volatile
 8009676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967a:	f383 8811 	msr	BASEPRI, r3
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f3bf 8f4f 	dsb	sy
 8009686:	60bb      	str	r3, [r7, #8]
}
 8009688:	bf00      	nop
 800968a:	e7fe      	b.n	800968a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800968c:	f000 f880 	bl	8009790 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009690:	2100      	movs	r1, #0
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 fef8 	bl	800a488 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009698:	f000 f888 	bl	80097ac <xTaskResumeAll>
 800969c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d107      	bne.n	80096b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80096a4:	4b06      	ldr	r3, [pc, #24]	; (80096c0 <vTaskDelay+0x64>)
 80096a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096b4:	bf00      	nop
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	20000dfc 	.word	0x20000dfc
 80096c0:	e000ed04 	.word	0xe000ed04

080096c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b08a      	sub	sp, #40	; 0x28
 80096c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096ce:	2300      	movs	r3, #0
 80096d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096d2:	463a      	mov	r2, r7
 80096d4:	1d39      	adds	r1, r7, #4
 80096d6:	f107 0308 	add.w	r3, r7, #8
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fe fe34 	bl	8008348 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	9202      	str	r2, [sp, #8]
 80096e8:	9301      	str	r3, [sp, #4]
 80096ea:	2300      	movs	r3, #0
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	2300      	movs	r3, #0
 80096f0:	460a      	mov	r2, r1
 80096f2:	4921      	ldr	r1, [pc, #132]	; (8009778 <vTaskStartScheduler+0xb4>)
 80096f4:	4821      	ldr	r0, [pc, #132]	; (800977c <vTaskStartScheduler+0xb8>)
 80096f6:	f7ff fe0f 	bl	8009318 <xTaskCreateStatic>
 80096fa:	4603      	mov	r3, r0
 80096fc:	4a20      	ldr	r2, [pc, #128]	; (8009780 <vTaskStartScheduler+0xbc>)
 80096fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009700:	4b1f      	ldr	r3, [pc, #124]	; (8009780 <vTaskStartScheduler+0xbc>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d002      	beq.n	800970e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009708:	2301      	movs	r3, #1
 800970a:	617b      	str	r3, [r7, #20]
 800970c:	e001      	b.n	8009712 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800970e:	2300      	movs	r3, #0
 8009710:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d102      	bne.n	800971e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009718:	f000 ff0a 	bl	800a530 <xTimerCreateTimerTask>
 800971c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d116      	bne.n	8009752 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	613b      	str	r3, [r7, #16]
}
 8009736:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009738:	4b12      	ldr	r3, [pc, #72]	; (8009784 <vTaskStartScheduler+0xc0>)
 800973a:	f04f 32ff 	mov.w	r2, #4294967295
 800973e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009740:	4b11      	ldr	r3, [pc, #68]	; (8009788 <vTaskStartScheduler+0xc4>)
 8009742:	2201      	movs	r2, #1
 8009744:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009746:	4b11      	ldr	r3, [pc, #68]	; (800978c <vTaskStartScheduler+0xc8>)
 8009748:	2200      	movs	r2, #0
 800974a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800974c:	f001 fac8 	bl	800ace0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009750:	e00e      	b.n	8009770 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009758:	d10a      	bne.n	8009770 <vTaskStartScheduler+0xac>
	__asm volatile
 800975a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	60fb      	str	r3, [r7, #12]
}
 800976c:	bf00      	nop
 800976e:	e7fe      	b.n	800976e <vTaskStartScheduler+0xaa>
}
 8009770:	bf00      	nop
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	0800fd84 	.word	0x0800fd84
 800977c:	08009da9 	.word	0x08009da9
 8009780:	20000df8 	.word	0x20000df8
 8009784:	20000df4 	.word	0x20000df4
 8009788:	20000de0 	.word	0x20000de0
 800978c:	20000dd8 	.word	0x20000dd8

08009790 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009790:	b480      	push	{r7}
 8009792:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009794:	4b04      	ldr	r3, [pc, #16]	; (80097a8 <vTaskSuspendAll+0x18>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	3301      	adds	r3, #1
 800979a:	4a03      	ldr	r2, [pc, #12]	; (80097a8 <vTaskSuspendAll+0x18>)
 800979c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800979e:	bf00      	nop
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	20000dfc 	.word	0x20000dfc

080097ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097b2:	2300      	movs	r3, #0
 80097b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097b6:	2300      	movs	r3, #0
 80097b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097ba:	4b42      	ldr	r3, [pc, #264]	; (80098c4 <xTaskResumeAll+0x118>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10a      	bne.n	80097d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	603b      	str	r3, [r7, #0]
}
 80097d4:	bf00      	nop
 80097d6:	e7fe      	b.n	80097d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097d8:	f001 fb24 	bl	800ae24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097dc:	4b39      	ldr	r3, [pc, #228]	; (80098c4 <xTaskResumeAll+0x118>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	4a38      	ldr	r2, [pc, #224]	; (80098c4 <xTaskResumeAll+0x118>)
 80097e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097e6:	4b37      	ldr	r3, [pc, #220]	; (80098c4 <xTaskResumeAll+0x118>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d162      	bne.n	80098b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097ee:	4b36      	ldr	r3, [pc, #216]	; (80098c8 <xTaskResumeAll+0x11c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d05e      	beq.n	80098b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097f6:	e02f      	b.n	8009858 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097f8:	4b34      	ldr	r3, [pc, #208]	; (80098cc <xTaskResumeAll+0x120>)
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	3318      	adds	r3, #24
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe fe5d 	bl	80084c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	3304      	adds	r3, #4
 800980e:	4618      	mov	r0, r3
 8009810:	f7fe fe58 	bl	80084c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009818:	4b2d      	ldr	r3, [pc, #180]	; (80098d0 <xTaskResumeAll+0x124>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	429a      	cmp	r2, r3
 800981e:	d903      	bls.n	8009828 <xTaskResumeAll+0x7c>
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009824:	4a2a      	ldr	r2, [pc, #168]	; (80098d0 <xTaskResumeAll+0x124>)
 8009826:	6013      	str	r3, [r2, #0]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800982c:	4613      	mov	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4a27      	ldr	r2, [pc, #156]	; (80098d4 <xTaskResumeAll+0x128>)
 8009836:	441a      	add	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	3304      	adds	r3, #4
 800983c:	4619      	mov	r1, r3
 800983e:	4610      	mov	r0, r2
 8009840:	f7fe fde3 	bl	800840a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009848:	4b23      	ldr	r3, [pc, #140]	; (80098d8 <xTaskResumeAll+0x12c>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984e:	429a      	cmp	r2, r3
 8009850:	d302      	bcc.n	8009858 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009852:	4b22      	ldr	r3, [pc, #136]	; (80098dc <xTaskResumeAll+0x130>)
 8009854:	2201      	movs	r2, #1
 8009856:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009858:	4b1c      	ldr	r3, [pc, #112]	; (80098cc <xTaskResumeAll+0x120>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1cb      	bne.n	80097f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009866:	f000 fb55 	bl	8009f14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800986a:	4b1d      	ldr	r3, [pc, #116]	; (80098e0 <xTaskResumeAll+0x134>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d010      	beq.n	8009898 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009876:	f000 f847 	bl	8009908 <xTaskIncrementTick>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d002      	beq.n	8009886 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009880:	4b16      	ldr	r3, [pc, #88]	; (80098dc <xTaskResumeAll+0x130>)
 8009882:	2201      	movs	r2, #1
 8009884:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	3b01      	subs	r3, #1
 800988a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1f1      	bne.n	8009876 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009892:	4b13      	ldr	r3, [pc, #76]	; (80098e0 <xTaskResumeAll+0x134>)
 8009894:	2200      	movs	r2, #0
 8009896:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009898:	4b10      	ldr	r3, [pc, #64]	; (80098dc <xTaskResumeAll+0x130>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d009      	beq.n	80098b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098a0:	2301      	movs	r3, #1
 80098a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098a4:	4b0f      	ldr	r3, [pc, #60]	; (80098e4 <xTaskResumeAll+0x138>)
 80098a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098aa:	601a      	str	r2, [r3, #0]
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098b4:	f001 fae6 	bl	800ae84 <vPortExitCritical>

	return xAlreadyYielded;
 80098b8:	68bb      	ldr	r3, [r7, #8]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20000dfc 	.word	0x20000dfc
 80098c8:	20000dd4 	.word	0x20000dd4
 80098cc:	20000d94 	.word	0x20000d94
 80098d0:	20000ddc 	.word	0x20000ddc
 80098d4:	20000904 	.word	0x20000904
 80098d8:	20000900 	.word	0x20000900
 80098dc:	20000de8 	.word	0x20000de8
 80098e0:	20000de4 	.word	0x20000de4
 80098e4:	e000ed04 	.word	0xe000ed04

080098e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098ee:	4b05      	ldr	r3, [pc, #20]	; (8009904 <xTaskGetTickCount+0x1c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098f4:	687b      	ldr	r3, [r7, #4]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	20000dd8 	.word	0x20000dd8

08009908 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800990e:	2300      	movs	r3, #0
 8009910:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009912:	4b4f      	ldr	r3, [pc, #316]	; (8009a50 <xTaskIncrementTick+0x148>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	f040 808f 	bne.w	8009a3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800991c:	4b4d      	ldr	r3, [pc, #308]	; (8009a54 <xTaskIncrementTick+0x14c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3301      	adds	r3, #1
 8009922:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009924:	4a4b      	ldr	r2, [pc, #300]	; (8009a54 <xTaskIncrementTick+0x14c>)
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d120      	bne.n	8009972 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009930:	4b49      	ldr	r3, [pc, #292]	; (8009a58 <xTaskIncrementTick+0x150>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00a      	beq.n	8009950 <xTaskIncrementTick+0x48>
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	603b      	str	r3, [r7, #0]
}
 800994c:	bf00      	nop
 800994e:	e7fe      	b.n	800994e <xTaskIncrementTick+0x46>
 8009950:	4b41      	ldr	r3, [pc, #260]	; (8009a58 <xTaskIncrementTick+0x150>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	60fb      	str	r3, [r7, #12]
 8009956:	4b41      	ldr	r3, [pc, #260]	; (8009a5c <xTaskIncrementTick+0x154>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a3f      	ldr	r2, [pc, #252]	; (8009a58 <xTaskIncrementTick+0x150>)
 800995c:	6013      	str	r3, [r2, #0]
 800995e:	4a3f      	ldr	r2, [pc, #252]	; (8009a5c <xTaskIncrementTick+0x154>)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	4b3e      	ldr	r3, [pc, #248]	; (8009a60 <xTaskIncrementTick+0x158>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3301      	adds	r3, #1
 800996a:	4a3d      	ldr	r2, [pc, #244]	; (8009a60 <xTaskIncrementTick+0x158>)
 800996c:	6013      	str	r3, [r2, #0]
 800996e:	f000 fad1 	bl	8009f14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009972:	4b3c      	ldr	r3, [pc, #240]	; (8009a64 <xTaskIncrementTick+0x15c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	429a      	cmp	r2, r3
 800997a:	d349      	bcc.n	8009a10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800997c:	4b36      	ldr	r3, [pc, #216]	; (8009a58 <xTaskIncrementTick+0x150>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d104      	bne.n	8009990 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009986:	4b37      	ldr	r3, [pc, #220]	; (8009a64 <xTaskIncrementTick+0x15c>)
 8009988:	f04f 32ff 	mov.w	r2, #4294967295
 800998c:	601a      	str	r2, [r3, #0]
					break;
 800998e:	e03f      	b.n	8009a10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009990:	4b31      	ldr	r3, [pc, #196]	; (8009a58 <xTaskIncrementTick+0x150>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d203      	bcs.n	80099b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099a8:	4a2e      	ldr	r2, [pc, #184]	; (8009a64 <xTaskIncrementTick+0x15c>)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099ae:	e02f      	b.n	8009a10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	3304      	adds	r3, #4
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fe fd85 	bl	80084c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d004      	beq.n	80099cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	3318      	adds	r3, #24
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fe fd7c 	bl	80084c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099d0:	4b25      	ldr	r3, [pc, #148]	; (8009a68 <xTaskIncrementTick+0x160>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d903      	bls.n	80099e0 <xTaskIncrementTick+0xd8>
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099dc:	4a22      	ldr	r2, [pc, #136]	; (8009a68 <xTaskIncrementTick+0x160>)
 80099de:	6013      	str	r3, [r2, #0]
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e4:	4613      	mov	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4413      	add	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4a1f      	ldr	r2, [pc, #124]	; (8009a6c <xTaskIncrementTick+0x164>)
 80099ee:	441a      	add	r2, r3
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	3304      	adds	r3, #4
 80099f4:	4619      	mov	r1, r3
 80099f6:	4610      	mov	r0, r2
 80099f8:	f7fe fd07 	bl	800840a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a00:	4b1b      	ldr	r3, [pc, #108]	; (8009a70 <xTaskIncrementTick+0x168>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d3b8      	bcc.n	800997c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a0e:	e7b5      	b.n	800997c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a10:	4b17      	ldr	r3, [pc, #92]	; (8009a70 <xTaskIncrementTick+0x168>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a16:	4915      	ldr	r1, [pc, #84]	; (8009a6c <xTaskIncrementTick+0x164>)
 8009a18:	4613      	mov	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	440b      	add	r3, r1
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d901      	bls.n	8009a2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009a2c:	4b11      	ldr	r3, [pc, #68]	; (8009a74 <xTaskIncrementTick+0x16c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d007      	beq.n	8009a44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009a34:	2301      	movs	r3, #1
 8009a36:	617b      	str	r3, [r7, #20]
 8009a38:	e004      	b.n	8009a44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a3a:	4b0f      	ldr	r3, [pc, #60]	; (8009a78 <xTaskIncrementTick+0x170>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	4a0d      	ldr	r2, [pc, #52]	; (8009a78 <xTaskIncrementTick+0x170>)
 8009a42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a44:	697b      	ldr	r3, [r7, #20]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	20000dfc 	.word	0x20000dfc
 8009a54:	20000dd8 	.word	0x20000dd8
 8009a58:	20000d8c 	.word	0x20000d8c
 8009a5c:	20000d90 	.word	0x20000d90
 8009a60:	20000dec 	.word	0x20000dec
 8009a64:	20000df4 	.word	0x20000df4
 8009a68:	20000ddc 	.word	0x20000ddc
 8009a6c:	20000904 	.word	0x20000904
 8009a70:	20000900 	.word	0x20000900
 8009a74:	20000de8 	.word	0x20000de8
 8009a78:	20000de4 	.word	0x20000de4

08009a7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a82:	4b28      	ldr	r3, [pc, #160]	; (8009b24 <vTaskSwitchContext+0xa8>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a8a:	4b27      	ldr	r3, [pc, #156]	; (8009b28 <vTaskSwitchContext+0xac>)
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a90:	e041      	b.n	8009b16 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009a92:	4b25      	ldr	r3, [pc, #148]	; (8009b28 <vTaskSwitchContext+0xac>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a98:	4b24      	ldr	r3, [pc, #144]	; (8009b2c <vTaskSwitchContext+0xb0>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	60fb      	str	r3, [r7, #12]
 8009a9e:	e010      	b.n	8009ac2 <vTaskSwitchContext+0x46>
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10a      	bne.n	8009abc <vTaskSwitchContext+0x40>
	__asm volatile
 8009aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	607b      	str	r3, [r7, #4]
}
 8009ab8:	bf00      	nop
 8009aba:	e7fe      	b.n	8009aba <vTaskSwitchContext+0x3e>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	60fb      	str	r3, [r7, #12]
 8009ac2:	491b      	ldr	r1, [pc, #108]	; (8009b30 <vTaskSwitchContext+0xb4>)
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	440b      	add	r3, r1
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d0e4      	beq.n	8009aa0 <vTaskSwitchContext+0x24>
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4a13      	ldr	r2, [pc, #76]	; (8009b30 <vTaskSwitchContext+0xb4>)
 8009ae2:	4413      	add	r3, r2
 8009ae4:	60bb      	str	r3, [r7, #8]
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	605a      	str	r2, [r3, #4]
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	685a      	ldr	r2, [r3, #4]
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	3308      	adds	r3, #8
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d104      	bne.n	8009b06 <vTaskSwitchContext+0x8a>
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	685a      	ldr	r2, [r3, #4]
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	605a      	str	r2, [r3, #4]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	4a09      	ldr	r2, [pc, #36]	; (8009b34 <vTaskSwitchContext+0xb8>)
 8009b0e:	6013      	str	r3, [r2, #0]
 8009b10:	4a06      	ldr	r2, [pc, #24]	; (8009b2c <vTaskSwitchContext+0xb0>)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6013      	str	r3, [r2, #0]
}
 8009b16:	bf00      	nop
 8009b18:	3714      	adds	r7, #20
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	20000dfc 	.word	0x20000dfc
 8009b28:	20000de8 	.word	0x20000de8
 8009b2c:	20000ddc 	.word	0x20000ddc
 8009b30:	20000904 	.word	0x20000904
 8009b34:	20000900 	.word	0x20000900

08009b38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10a      	bne.n	8009b5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	60fb      	str	r3, [r7, #12]
}
 8009b5a:	bf00      	nop
 8009b5c:	e7fe      	b.n	8009b5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b5e:	4b07      	ldr	r3, [pc, #28]	; (8009b7c <vTaskPlaceOnEventList+0x44>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3318      	adds	r3, #24
 8009b64:	4619      	mov	r1, r3
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7fe fc73 	bl	8008452 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	6838      	ldr	r0, [r7, #0]
 8009b70:	f000 fc8a 	bl	800a488 <prvAddCurrentTaskToDelayedList>
}
 8009b74:	bf00      	nop
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	20000900 	.word	0x20000900

08009b80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10a      	bne.n	8009ba8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	617b      	str	r3, [r7, #20]
}
 8009ba4:	bf00      	nop
 8009ba6:	e7fe      	b.n	8009ba6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ba8:	4b0a      	ldr	r3, [pc, #40]	; (8009bd4 <vTaskPlaceOnEventListRestricted+0x54>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	3318      	adds	r3, #24
 8009bae:	4619      	mov	r1, r3
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f7fe fc2a 	bl	800840a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d002      	beq.n	8009bc2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009bc2:	6879      	ldr	r1, [r7, #4]
 8009bc4:	68b8      	ldr	r0, [r7, #8]
 8009bc6:	f000 fc5f 	bl	800a488 <prvAddCurrentTaskToDelayedList>
	}
 8009bca:	bf00      	nop
 8009bcc:	3718      	adds	r7, #24
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20000900 	.word	0x20000900

08009bd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10a      	bne.n	8009c04 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	60fb      	str	r3, [r7, #12]
}
 8009c00:	bf00      	nop
 8009c02:	e7fe      	b.n	8009c02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	3318      	adds	r3, #24
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fe fc5b 	bl	80084c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c0e:	4b1e      	ldr	r3, [pc, #120]	; (8009c88 <xTaskRemoveFromEventList+0xb0>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d11d      	bne.n	8009c52 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fe fc52 	bl	80084c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c24:	4b19      	ldr	r3, [pc, #100]	; (8009c8c <xTaskRemoveFromEventList+0xb4>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d903      	bls.n	8009c34 <xTaskRemoveFromEventList+0x5c>
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	4a16      	ldr	r2, [pc, #88]	; (8009c8c <xTaskRemoveFromEventList+0xb4>)
 8009c32:	6013      	str	r3, [r2, #0]
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c38:	4613      	mov	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	4413      	add	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4a13      	ldr	r2, [pc, #76]	; (8009c90 <xTaskRemoveFromEventList+0xb8>)
 8009c42:	441a      	add	r2, r3
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	3304      	adds	r3, #4
 8009c48:	4619      	mov	r1, r3
 8009c4a:	4610      	mov	r0, r2
 8009c4c:	f7fe fbdd 	bl	800840a <vListInsertEnd>
 8009c50:	e005      	b.n	8009c5e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	3318      	adds	r3, #24
 8009c56:	4619      	mov	r1, r3
 8009c58:	480e      	ldr	r0, [pc, #56]	; (8009c94 <xTaskRemoveFromEventList+0xbc>)
 8009c5a:	f7fe fbd6 	bl	800840a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c62:	4b0d      	ldr	r3, [pc, #52]	; (8009c98 <xTaskRemoveFromEventList+0xc0>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d905      	bls.n	8009c78 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c70:	4b0a      	ldr	r3, [pc, #40]	; (8009c9c <xTaskRemoveFromEventList+0xc4>)
 8009c72:	2201      	movs	r2, #1
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	e001      	b.n	8009c7c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c7c:	697b      	ldr	r3, [r7, #20]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	20000dfc 	.word	0x20000dfc
 8009c8c:	20000ddc 	.word	0x20000ddc
 8009c90:	20000904 	.word	0x20000904
 8009c94:	20000d94 	.word	0x20000d94
 8009c98:	20000900 	.word	0x20000900
 8009c9c:	20000de8 	.word	0x20000de8

08009ca0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ca8:	4b06      	ldr	r3, [pc, #24]	; (8009cc4 <vTaskInternalSetTimeOutState+0x24>)
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009cb0:	4b05      	ldr	r3, [pc, #20]	; (8009cc8 <vTaskInternalSetTimeOutState+0x28>)
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	605a      	str	r2, [r3, #4]
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr
 8009cc4:	20000dec 	.word	0x20000dec
 8009cc8:	20000dd8 	.word	0x20000dd8

08009ccc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b088      	sub	sp, #32
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10a      	bne.n	8009cf2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	613b      	str	r3, [r7, #16]
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10a      	bne.n	8009d0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfc:	f383 8811 	msr	BASEPRI, r3
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	60fb      	str	r3, [r7, #12]
}
 8009d0a:	bf00      	nop
 8009d0c:	e7fe      	b.n	8009d0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009d0e:	f001 f889 	bl	800ae24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d12:	4b1d      	ldr	r3, [pc, #116]	; (8009d88 <xTaskCheckForTimeOut+0xbc>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	69ba      	ldr	r2, [r7, #24]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d2a:	d102      	bne.n	8009d32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	61fb      	str	r3, [r7, #28]
 8009d30:	e023      	b.n	8009d7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	4b15      	ldr	r3, [pc, #84]	; (8009d8c <xTaskCheckForTimeOut+0xc0>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d007      	beq.n	8009d4e <xTaskCheckForTimeOut+0x82>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	69ba      	ldr	r2, [r7, #24]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d302      	bcc.n	8009d4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	61fb      	str	r3, [r7, #28]
 8009d4c:	e015      	b.n	8009d7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d20b      	bcs.n	8009d70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	1ad2      	subs	r2, r2, r3
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7ff ff9b 	bl	8009ca0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	61fb      	str	r3, [r7, #28]
 8009d6e:	e004      	b.n	8009d7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	2200      	movs	r2, #0
 8009d74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d76:	2301      	movs	r3, #1
 8009d78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d7a:	f001 f883 	bl	800ae84 <vPortExitCritical>

	return xReturn;
 8009d7e:	69fb      	ldr	r3, [r7, #28]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3720      	adds	r7, #32
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	20000dd8 	.word	0x20000dd8
 8009d8c:	20000dec 	.word	0x20000dec

08009d90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d90:	b480      	push	{r7}
 8009d92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d94:	4b03      	ldr	r3, [pc, #12]	; (8009da4 <vTaskMissedYield+0x14>)
 8009d96:	2201      	movs	r2, #1
 8009d98:	601a      	str	r2, [r3, #0]
}
 8009d9a:	bf00      	nop
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr
 8009da4:	20000de8 	.word	0x20000de8

08009da8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009db0:	f000 f852 	bl	8009e58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009db4:	4b06      	ldr	r3, [pc, #24]	; (8009dd0 <prvIdleTask+0x28>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d9f9      	bls.n	8009db0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009dbc:	4b05      	ldr	r3, [pc, #20]	; (8009dd4 <prvIdleTask+0x2c>)
 8009dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dc2:	601a      	str	r2, [r3, #0]
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009dcc:	e7f0      	b.n	8009db0 <prvIdleTask+0x8>
 8009dce:	bf00      	nop
 8009dd0:	20000904 	.word	0x20000904
 8009dd4:	e000ed04 	.word	0xe000ed04

08009dd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dde:	2300      	movs	r3, #0
 8009de0:	607b      	str	r3, [r7, #4]
 8009de2:	e00c      	b.n	8009dfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	4613      	mov	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4a12      	ldr	r2, [pc, #72]	; (8009e38 <prvInitialiseTaskLists+0x60>)
 8009df0:	4413      	add	r3, r2
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fe fadc 	bl	80083b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	607b      	str	r3, [r7, #4]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b37      	cmp	r3, #55	; 0x37
 8009e02:	d9ef      	bls.n	8009de4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e04:	480d      	ldr	r0, [pc, #52]	; (8009e3c <prvInitialiseTaskLists+0x64>)
 8009e06:	f7fe fad3 	bl	80083b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e0a:	480d      	ldr	r0, [pc, #52]	; (8009e40 <prvInitialiseTaskLists+0x68>)
 8009e0c:	f7fe fad0 	bl	80083b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e10:	480c      	ldr	r0, [pc, #48]	; (8009e44 <prvInitialiseTaskLists+0x6c>)
 8009e12:	f7fe facd 	bl	80083b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e16:	480c      	ldr	r0, [pc, #48]	; (8009e48 <prvInitialiseTaskLists+0x70>)
 8009e18:	f7fe faca 	bl	80083b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e1c:	480b      	ldr	r0, [pc, #44]	; (8009e4c <prvInitialiseTaskLists+0x74>)
 8009e1e:	f7fe fac7 	bl	80083b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e22:	4b0b      	ldr	r3, [pc, #44]	; (8009e50 <prvInitialiseTaskLists+0x78>)
 8009e24:	4a05      	ldr	r2, [pc, #20]	; (8009e3c <prvInitialiseTaskLists+0x64>)
 8009e26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e28:	4b0a      	ldr	r3, [pc, #40]	; (8009e54 <prvInitialiseTaskLists+0x7c>)
 8009e2a:	4a05      	ldr	r2, [pc, #20]	; (8009e40 <prvInitialiseTaskLists+0x68>)
 8009e2c:	601a      	str	r2, [r3, #0]
}
 8009e2e:	bf00      	nop
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20000904 	.word	0x20000904
 8009e3c:	20000d64 	.word	0x20000d64
 8009e40:	20000d78 	.word	0x20000d78
 8009e44:	20000d94 	.word	0x20000d94
 8009e48:	20000da8 	.word	0x20000da8
 8009e4c:	20000dc0 	.word	0x20000dc0
 8009e50:	20000d8c 	.word	0x20000d8c
 8009e54:	20000d90 	.word	0x20000d90

08009e58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e5e:	e019      	b.n	8009e94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e60:	f000 ffe0 	bl	800ae24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e64:	4b10      	ldr	r3, [pc, #64]	; (8009ea8 <prvCheckTasksWaitingTermination+0x50>)
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	3304      	adds	r3, #4
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fe fb27 	bl	80084c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e76:	4b0d      	ldr	r3, [pc, #52]	; (8009eac <prvCheckTasksWaitingTermination+0x54>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	4a0b      	ldr	r2, [pc, #44]	; (8009eac <prvCheckTasksWaitingTermination+0x54>)
 8009e7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e80:	4b0b      	ldr	r3, [pc, #44]	; (8009eb0 <prvCheckTasksWaitingTermination+0x58>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	3b01      	subs	r3, #1
 8009e86:	4a0a      	ldr	r2, [pc, #40]	; (8009eb0 <prvCheckTasksWaitingTermination+0x58>)
 8009e88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e8a:	f000 fffb 	bl	800ae84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f810 	bl	8009eb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e94:	4b06      	ldr	r3, [pc, #24]	; (8009eb0 <prvCheckTasksWaitingTermination+0x58>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1e1      	bne.n	8009e60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e9c:	bf00      	nop
 8009e9e:	bf00      	nop
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	20000da8 	.word	0x20000da8
 8009eac:	20000dd4 	.word	0x20000dd4
 8009eb0:	20000dbc 	.word	0x20000dbc

08009eb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d108      	bne.n	8009ed8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f001 f998 	bl	800b200 <vPortFree>
				vPortFree( pxTCB );
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f001 f995 	bl	800b200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ed6:	e018      	b.n	8009f0a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d103      	bne.n	8009eea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f001 f98c 	bl	800b200 <vPortFree>
	}
 8009ee8:	e00f      	b.n	8009f0a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d00a      	beq.n	8009f0a <prvDeleteTCB+0x56>
	__asm volatile
 8009ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	60fb      	str	r3, [r7, #12]
}
 8009f06:	bf00      	nop
 8009f08:	e7fe      	b.n	8009f08 <prvDeleteTCB+0x54>
	}
 8009f0a:	bf00      	nop
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
	...

08009f14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f1a:	4b0c      	ldr	r3, [pc, #48]	; (8009f4c <prvResetNextTaskUnblockTime+0x38>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d104      	bne.n	8009f2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f24:	4b0a      	ldr	r3, [pc, #40]	; (8009f50 <prvResetNextTaskUnblockTime+0x3c>)
 8009f26:	f04f 32ff 	mov.w	r2, #4294967295
 8009f2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f2c:	e008      	b.n	8009f40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f2e:	4b07      	ldr	r3, [pc, #28]	; (8009f4c <prvResetNextTaskUnblockTime+0x38>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	4a04      	ldr	r2, [pc, #16]	; (8009f50 <prvResetNextTaskUnblockTime+0x3c>)
 8009f3e:	6013      	str	r3, [r2, #0]
}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	20000d8c 	.word	0x20000d8c
 8009f50:	20000df4 	.word	0x20000df4

08009f54 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009f5a:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <xTaskGetCurrentTaskHandle+0x1c>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009f60:	687b      	ldr	r3, [r7, #4]
	}
 8009f62:	4618      	mov	r0, r3
 8009f64:	370c      	adds	r7, #12
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	20000900 	.word	0x20000900

08009f74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f7a:	4b0b      	ldr	r3, [pc, #44]	; (8009fa8 <xTaskGetSchedulerState+0x34>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d102      	bne.n	8009f88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f82:	2301      	movs	r3, #1
 8009f84:	607b      	str	r3, [r7, #4]
 8009f86:	e008      	b.n	8009f9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f88:	4b08      	ldr	r3, [pc, #32]	; (8009fac <xTaskGetSchedulerState+0x38>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d102      	bne.n	8009f96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f90:	2302      	movs	r3, #2
 8009f92:	607b      	str	r3, [r7, #4]
 8009f94:	e001      	b.n	8009f9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f96:	2300      	movs	r3, #0
 8009f98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f9a:	687b      	ldr	r3, [r7, #4]
	}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr
 8009fa8:	20000de0 	.word	0x20000de0
 8009fac:	20000dfc 	.word	0x20000dfc

08009fb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d051      	beq.n	800a06a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fca:	4b2a      	ldr	r3, [pc, #168]	; (800a074 <xTaskPriorityInherit+0xc4>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d241      	bcs.n	800a058 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	db06      	blt.n	8009fea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fdc:	4b25      	ldr	r3, [pc, #148]	; (800a074 <xTaskPriorityInherit+0xc4>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	6959      	ldr	r1, [r3, #20]
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4a1f      	ldr	r2, [pc, #124]	; (800a078 <xTaskPriorityInherit+0xc8>)
 8009ffc:	4413      	add	r3, r2
 8009ffe:	4299      	cmp	r1, r3
 800a000:	d122      	bne.n	800a048 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	3304      	adds	r3, #4
 800a006:	4618      	mov	r0, r3
 800a008:	f7fe fa5c 	bl	80084c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a00c:	4b19      	ldr	r3, [pc, #100]	; (800a074 <xTaskPriorityInherit+0xc4>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a01a:	4b18      	ldr	r3, [pc, #96]	; (800a07c <xTaskPriorityInherit+0xcc>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d903      	bls.n	800a02a <xTaskPriorityInherit+0x7a>
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	4a15      	ldr	r2, [pc, #84]	; (800a07c <xTaskPriorityInherit+0xcc>)
 800a028:	6013      	str	r3, [r2, #0]
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a02e:	4613      	mov	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	4413      	add	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4a10      	ldr	r2, [pc, #64]	; (800a078 <xTaskPriorityInherit+0xc8>)
 800a038:	441a      	add	r2, r3
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	3304      	adds	r3, #4
 800a03e:	4619      	mov	r1, r3
 800a040:	4610      	mov	r0, r2
 800a042:	f7fe f9e2 	bl	800840a <vListInsertEnd>
 800a046:	e004      	b.n	800a052 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a048:	4b0a      	ldr	r3, [pc, #40]	; (800a074 <xTaskPriorityInherit+0xc4>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a052:	2301      	movs	r3, #1
 800a054:	60fb      	str	r3, [r7, #12]
 800a056:	e008      	b.n	800a06a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a05c:	4b05      	ldr	r3, [pc, #20]	; (800a074 <xTaskPriorityInherit+0xc4>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a062:	429a      	cmp	r2, r3
 800a064:	d201      	bcs.n	800a06a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a066:	2301      	movs	r3, #1
 800a068:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a06a:	68fb      	ldr	r3, [r7, #12]
	}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	20000900 	.word	0x20000900
 800a078:	20000904 	.word	0x20000904
 800a07c:	20000ddc 	.word	0x20000ddc

0800a080 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a08c:	2300      	movs	r3, #0
 800a08e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d056      	beq.n	800a144 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a096:	4b2e      	ldr	r3, [pc, #184]	; (800a150 <xTaskPriorityDisinherit+0xd0>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	693a      	ldr	r2, [r7, #16]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d00a      	beq.n	800a0b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	60fb      	str	r3, [r7, #12]
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d10a      	bne.n	800a0d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	60bb      	str	r3, [r7, #8]
}
 800a0d0:	bf00      	nop
 800a0d2:	e7fe      	b.n	800a0d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0d8:	1e5a      	subs	r2, r3, #1
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d02c      	beq.n	800a144 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d128      	bne.n	800a144 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fe f9e4 	bl	80084c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a108:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a114:	4b0f      	ldr	r3, [pc, #60]	; (800a154 <xTaskPriorityDisinherit+0xd4>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d903      	bls.n	800a124 <xTaskPriorityDisinherit+0xa4>
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a120:	4a0c      	ldr	r2, [pc, #48]	; (800a154 <xTaskPriorityDisinherit+0xd4>)
 800a122:	6013      	str	r3, [r2, #0]
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a128:	4613      	mov	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4413      	add	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4a09      	ldr	r2, [pc, #36]	; (800a158 <xTaskPriorityDisinherit+0xd8>)
 800a132:	441a      	add	r2, r3
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	3304      	adds	r3, #4
 800a138:	4619      	mov	r1, r3
 800a13a:	4610      	mov	r0, r2
 800a13c:	f7fe f965 	bl	800840a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a140:	2301      	movs	r3, #1
 800a142:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a144:	697b      	ldr	r3, [r7, #20]
	}
 800a146:	4618      	mov	r0, r3
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	20000900 	.word	0x20000900
 800a154:	20000ddc 	.word	0x20000ddc
 800a158:	20000904 	.word	0x20000904

0800a15c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b088      	sub	sp, #32
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a16a:	2301      	movs	r3, #1
 800a16c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d06a      	beq.n	800a24a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10a      	bne.n	800a192 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	60fb      	str	r3, [r7, #12]
}
 800a18e:	bf00      	nop
 800a190:	e7fe      	b.n	800a190 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d902      	bls.n	800a1a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	61fb      	str	r3, [r7, #28]
 800a1a0:	e002      	b.n	800a1a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ac:	69fa      	ldr	r2, [r7, #28]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d04b      	beq.n	800a24a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d146      	bne.n	800a24a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a1bc:	4b25      	ldr	r3, [pc, #148]	; (800a254 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	69ba      	ldr	r2, [r7, #24]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d10a      	bne.n	800a1dc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	60bb      	str	r3, [r7, #8]
}
 800a1d8:	bf00      	nop
 800a1da:	e7fe      	b.n	800a1da <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	69fa      	ldr	r2, [r7, #28]
 800a1e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	db04      	blt.n	800a1fa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	6959      	ldr	r1, [r3, #20]
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	4613      	mov	r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4413      	add	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4a13      	ldr	r2, [pc, #76]	; (800a258 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a20a:	4413      	add	r3, r2
 800a20c:	4299      	cmp	r1, r3
 800a20e:	d11c      	bne.n	800a24a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	3304      	adds	r3, #4
 800a214:	4618      	mov	r0, r3
 800a216:	f7fe f955 	bl	80084c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a21e:	4b0f      	ldr	r3, [pc, #60]	; (800a25c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	429a      	cmp	r2, r3
 800a224:	d903      	bls.n	800a22e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22a:	4a0c      	ldr	r2, [pc, #48]	; (800a25c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a22c:	6013      	str	r3, [r2, #0]
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a232:	4613      	mov	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4413      	add	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4a07      	ldr	r2, [pc, #28]	; (800a258 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a23c:	441a      	add	r2, r3
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	3304      	adds	r3, #4
 800a242:	4619      	mov	r1, r3
 800a244:	4610      	mov	r0, r2
 800a246:	f7fe f8e0 	bl	800840a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a24a:	bf00      	nop
 800a24c:	3720      	adds	r7, #32
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	20000900 	.word	0x20000900
 800a258:	20000904 	.word	0x20000904
 800a25c:	20000ddc 	.word	0x20000ddc

0800a260 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a260:	b480      	push	{r7}
 800a262:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a264:	4b07      	ldr	r3, [pc, #28]	; (800a284 <pvTaskIncrementMutexHeldCount+0x24>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d004      	beq.n	800a276 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a26c:	4b05      	ldr	r3, [pc, #20]	; (800a284 <pvTaskIncrementMutexHeldCount+0x24>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a272:	3201      	adds	r2, #1
 800a274:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a276:	4b03      	ldr	r3, [pc, #12]	; (800a284 <pvTaskIncrementMutexHeldCount+0x24>)
 800a278:	681b      	ldr	r3, [r3, #0]
	}
 800a27a:	4618      	mov	r0, r3
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	20000900 	.word	0x20000900

0800a288 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800a292:	f000 fdc7 	bl	800ae24 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800a296:	4b1e      	ldr	r3, [pc, #120]	; (800a310 <ulTaskNotifyTake+0x88>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d113      	bne.n	800a2c8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a2a0:	4b1b      	ldr	r3, [pc, #108]	; (800a310 <ulTaskNotifyTake+0x88>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00b      	beq.n	800a2c8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	6838      	ldr	r0, [r7, #0]
 800a2b4:	f000 f8e8 	bl	800a488 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a2b8:	4b16      	ldr	r3, [pc, #88]	; (800a314 <ulTaskNotifyTake+0x8c>)
 800a2ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2be:	601a      	str	r2, [r3, #0]
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a2c8:	f000 fddc 	bl	800ae84 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a2cc:	f000 fdaa 	bl	800ae24 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800a2d0:	4b0f      	ldr	r3, [pc, #60]	; (800a310 <ulTaskNotifyTake+0x88>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2d6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00c      	beq.n	800a2f8 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d004      	beq.n	800a2ee <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800a2e4:	4b0a      	ldr	r3, [pc, #40]	; (800a310 <ulTaskNotifyTake+0x88>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	655a      	str	r2, [r3, #84]	; 0x54
 800a2ec:	e004      	b.n	800a2f8 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800a2ee:	4b08      	ldr	r3, [pc, #32]	; (800a310 <ulTaskNotifyTake+0x88>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	3a01      	subs	r2, #1
 800a2f6:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a2f8:	4b05      	ldr	r3, [pc, #20]	; (800a310 <ulTaskNotifyTake+0x88>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800a302:	f000 fdbf 	bl	800ae84 <vPortExitCritical>

		return ulReturn;
 800a306:	68fb      	ldr	r3, [r7, #12]
	}
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	20000900 	.word	0x20000900
 800a314:	e000ed04 	.word	0xe000ed04

0800a318 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b08a      	sub	sp, #40	; 0x28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	4613      	mov	r3, r2
 800a326:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a328:	2301      	movs	r3, #1
 800a32a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10a      	bne.n	800a348 <xTaskGenericNotify+0x30>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	61bb      	str	r3, [r7, #24]
}
 800a344:	bf00      	nop
 800a346:	e7fe      	b.n	800a346 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a34c:	f000 fd6a 	bl	800ae24 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d003      	beq.n	800a35e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a364:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	2202      	movs	r2, #2
 800a36a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800a36e:	79fb      	ldrb	r3, [r7, #7]
 800a370:	2b04      	cmp	r3, #4
 800a372:	d828      	bhi.n	800a3c6 <xTaskGenericNotify+0xae>
 800a374:	a201      	add	r2, pc, #4	; (adr r2, 800a37c <xTaskGenericNotify+0x64>)
 800a376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37a:	bf00      	nop
 800a37c:	0800a3e7 	.word	0x0800a3e7
 800a380:	0800a391 	.word	0x0800a391
 800a384:	0800a39f 	.word	0x0800a39f
 800a388:	0800a3ab 	.word	0x0800a3ab
 800a38c:	0800a3b3 	.word	0x0800a3b3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a390:	6a3b      	ldr	r3, [r7, #32]
 800a392:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	431a      	orrs	r2, r3
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a39c:	e026      	b.n	800a3ec <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a39e:	6a3b      	ldr	r3, [r7, #32]
 800a3a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a2:	1c5a      	adds	r2, r3, #1
 800a3a4:	6a3b      	ldr	r3, [r7, #32]
 800a3a6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a3a8:	e020      	b.n	800a3ec <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a3b0:	e01c      	b.n	800a3ec <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a3b2:	7ffb      	ldrb	r3, [r7, #31]
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d003      	beq.n	800a3c0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a3b8:	6a3b      	ldr	r3, [r7, #32]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a3be:	e015      	b.n	800a3ec <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a3c4:	e012      	b.n	800a3ec <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ce:	d00c      	beq.n	800a3ea <xTaskGenericNotify+0xd2>
	__asm volatile
 800a3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	617b      	str	r3, [r7, #20]
}
 800a3e2:	bf00      	nop
 800a3e4:	e7fe      	b.n	800a3e4 <xTaskGenericNotify+0xcc>
					break;
 800a3e6:	bf00      	nop
 800a3e8:	e000      	b.n	800a3ec <xTaskGenericNotify+0xd4>

					break;
 800a3ea:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a3ec:	7ffb      	ldrb	r3, [r7, #31]
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d13a      	bne.n	800a468 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3f2:	6a3b      	ldr	r3, [r7, #32]
 800a3f4:	3304      	adds	r3, #4
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fe f864 	bl	80084c4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a3fc:	6a3b      	ldr	r3, [r7, #32]
 800a3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a400:	4b1d      	ldr	r3, [pc, #116]	; (800a478 <xTaskGenericNotify+0x160>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	429a      	cmp	r2, r3
 800a406:	d903      	bls.n	800a410 <xTaskGenericNotify+0xf8>
 800a408:	6a3b      	ldr	r3, [r7, #32]
 800a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40c:	4a1a      	ldr	r2, [pc, #104]	; (800a478 <xTaskGenericNotify+0x160>)
 800a40e:	6013      	str	r3, [r2, #0]
 800a410:	6a3b      	ldr	r3, [r7, #32]
 800a412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a414:	4613      	mov	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4a17      	ldr	r2, [pc, #92]	; (800a47c <xTaskGenericNotify+0x164>)
 800a41e:	441a      	add	r2, r3
 800a420:	6a3b      	ldr	r3, [r7, #32]
 800a422:	3304      	adds	r3, #4
 800a424:	4619      	mov	r1, r3
 800a426:	4610      	mov	r0, r2
 800a428:	f7fd ffef 	bl	800840a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00a      	beq.n	800a44a <xTaskGenericNotify+0x132>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	613b      	str	r3, [r7, #16]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a44a:	6a3b      	ldr	r3, [r7, #32]
 800a44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a44e:	4b0c      	ldr	r3, [pc, #48]	; (800a480 <xTaskGenericNotify+0x168>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a454:	429a      	cmp	r2, r3
 800a456:	d907      	bls.n	800a468 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a458:	4b0a      	ldr	r3, [pc, #40]	; (800a484 <xTaskGenericNotify+0x16c>)
 800a45a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a45e:	601a      	str	r2, [r3, #0]
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a468:	f000 fd0c 	bl	800ae84 <vPortExitCritical>

		return xReturn;
 800a46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a46e:	4618      	mov	r0, r3
 800a470:	3728      	adds	r7, #40	; 0x28
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20000ddc 	.word	0x20000ddc
 800a47c:	20000904 	.word	0x20000904
 800a480:	20000900 	.word	0x20000900
 800a484:	e000ed04 	.word	0xe000ed04

0800a488 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a492:	4b21      	ldr	r3, [pc, #132]	; (800a518 <prvAddCurrentTaskToDelayedList+0x90>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a498:	4b20      	ldr	r3, [pc, #128]	; (800a51c <prvAddCurrentTaskToDelayedList+0x94>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3304      	adds	r3, #4
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe f810 	bl	80084c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4aa:	d10a      	bne.n	800a4c2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d007      	beq.n	800a4c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4b2:	4b1a      	ldr	r3, [pc, #104]	; (800a51c <prvAddCurrentTaskToDelayedList+0x94>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	3304      	adds	r3, #4
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	4819      	ldr	r0, [pc, #100]	; (800a520 <prvAddCurrentTaskToDelayedList+0x98>)
 800a4bc:	f7fd ffa5 	bl	800840a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a4c0:	e026      	b.n	800a510 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a4ca:	4b14      	ldr	r3, [pc, #80]	; (800a51c <prvAddCurrentTaskToDelayedList+0x94>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d209      	bcs.n	800a4ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4da:	4b12      	ldr	r3, [pc, #72]	; (800a524 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	4b0f      	ldr	r3, [pc, #60]	; (800a51c <prvAddCurrentTaskToDelayedList+0x94>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	f7fd ffb3 	bl	8008452 <vListInsert>
}
 800a4ec:	e010      	b.n	800a510 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4ee:	4b0e      	ldr	r3, [pc, #56]	; (800a528 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	4b0a      	ldr	r3, [pc, #40]	; (800a51c <prvAddCurrentTaskToDelayedList+0x94>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3304      	adds	r3, #4
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	4610      	mov	r0, r2
 800a4fc:	f7fd ffa9 	bl	8008452 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a500:	4b0a      	ldr	r3, [pc, #40]	; (800a52c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	429a      	cmp	r2, r3
 800a508:	d202      	bcs.n	800a510 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a50a:	4a08      	ldr	r2, [pc, #32]	; (800a52c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	6013      	str	r3, [r2, #0]
}
 800a510:	bf00      	nop
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	20000dd8 	.word	0x20000dd8
 800a51c:	20000900 	.word	0x20000900
 800a520:	20000dc0 	.word	0x20000dc0
 800a524:	20000d90 	.word	0x20000d90
 800a528:	20000d8c 	.word	0x20000d8c
 800a52c:	20000df4 	.word	0x20000df4

0800a530 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b08a      	sub	sp, #40	; 0x28
 800a534:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a536:	2300      	movs	r3, #0
 800a538:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a53a:	f000 fb07 	bl	800ab4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a53e:	4b1c      	ldr	r3, [pc, #112]	; (800a5b0 <xTimerCreateTimerTask+0x80>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d021      	beq.n	800a58a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a546:	2300      	movs	r3, #0
 800a548:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a54a:	2300      	movs	r3, #0
 800a54c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a54e:	1d3a      	adds	r2, r7, #4
 800a550:	f107 0108 	add.w	r1, r7, #8
 800a554:	f107 030c 	add.w	r3, r7, #12
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fd ff0f 	bl	800837c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a55e:	6879      	ldr	r1, [r7, #4]
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	9202      	str	r2, [sp, #8]
 800a566:	9301      	str	r3, [sp, #4]
 800a568:	2302      	movs	r3, #2
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	2300      	movs	r3, #0
 800a56e:	460a      	mov	r2, r1
 800a570:	4910      	ldr	r1, [pc, #64]	; (800a5b4 <xTimerCreateTimerTask+0x84>)
 800a572:	4811      	ldr	r0, [pc, #68]	; (800a5b8 <xTimerCreateTimerTask+0x88>)
 800a574:	f7fe fed0 	bl	8009318 <xTaskCreateStatic>
 800a578:	4603      	mov	r3, r0
 800a57a:	4a10      	ldr	r2, [pc, #64]	; (800a5bc <xTimerCreateTimerTask+0x8c>)
 800a57c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a57e:	4b0f      	ldr	r3, [pc, #60]	; (800a5bc <xTimerCreateTimerTask+0x8c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d001      	beq.n	800a58a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a586:	2301      	movs	r3, #1
 800a588:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10a      	bne.n	800a5a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	613b      	str	r3, [r7, #16]
}
 800a5a2:	bf00      	nop
 800a5a4:	e7fe      	b.n	800a5a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a5a6:	697b      	ldr	r3, [r7, #20]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3718      	adds	r7, #24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	20000e30 	.word	0x20000e30
 800a5b4:	0800fd8c 	.word	0x0800fd8c
 800a5b8:	0800a6f5 	.word	0x0800a6f5
 800a5bc:	20000e34 	.word	0x20000e34

0800a5c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b08a      	sub	sp, #40	; 0x28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
 800a5cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10a      	bne.n	800a5ee <xTimerGenericCommand+0x2e>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	623b      	str	r3, [r7, #32]
}
 800a5ea:	bf00      	nop
 800a5ec:	e7fe      	b.n	800a5ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a5ee:	4b1a      	ldr	r3, [pc, #104]	; (800a658 <xTimerGenericCommand+0x98>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d02a      	beq.n	800a64c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	2b05      	cmp	r3, #5
 800a606:	dc18      	bgt.n	800a63a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a608:	f7ff fcb4 	bl	8009f74 <xTaskGetSchedulerState>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d109      	bne.n	800a626 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a612:	4b11      	ldr	r3, [pc, #68]	; (800a658 <xTimerGenericCommand+0x98>)
 800a614:	6818      	ldr	r0, [r3, #0]
 800a616:	f107 0110 	add.w	r1, r7, #16
 800a61a:	2300      	movs	r3, #0
 800a61c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a61e:	f7fe f96f 	bl	8008900 <xQueueGenericSend>
 800a622:	6278      	str	r0, [r7, #36]	; 0x24
 800a624:	e012      	b.n	800a64c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a626:	4b0c      	ldr	r3, [pc, #48]	; (800a658 <xTimerGenericCommand+0x98>)
 800a628:	6818      	ldr	r0, [r3, #0]
 800a62a:	f107 0110 	add.w	r1, r7, #16
 800a62e:	2300      	movs	r3, #0
 800a630:	2200      	movs	r2, #0
 800a632:	f7fe f965 	bl	8008900 <xQueueGenericSend>
 800a636:	6278      	str	r0, [r7, #36]	; 0x24
 800a638:	e008      	b.n	800a64c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a63a:	4b07      	ldr	r3, [pc, #28]	; (800a658 <xTimerGenericCommand+0x98>)
 800a63c:	6818      	ldr	r0, [r3, #0]
 800a63e:	f107 0110 	add.w	r1, r7, #16
 800a642:	2300      	movs	r3, #0
 800a644:	683a      	ldr	r2, [r7, #0]
 800a646:	f7fe fa59 	bl	8008afc <xQueueGenericSendFromISR>
 800a64a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3728      	adds	r7, #40	; 0x28
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20000e30 	.word	0x20000e30

0800a65c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b088      	sub	sp, #32
 800a660:	af02      	add	r7, sp, #8
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a666:	4b22      	ldr	r3, [pc, #136]	; (800a6f0 <prvProcessExpiredTimer+0x94>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	3304      	adds	r3, #4
 800a674:	4618      	mov	r0, r3
 800a676:	f7fd ff25 	bl	80084c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a680:	f003 0304 	and.w	r3, r3, #4
 800a684:	2b00      	cmp	r3, #0
 800a686:	d022      	beq.n	800a6ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	699a      	ldr	r2, [r3, #24]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	18d1      	adds	r1, r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	6978      	ldr	r0, [r7, #20]
 800a696:	f000 f8d1 	bl	800a83c <prvInsertTimerInActiveList>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d01f      	beq.n	800a6e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	6978      	ldr	r0, [r7, #20]
 800a6ac:	f7ff ff88 	bl	800a5c0 <xTimerGenericCommand>
 800a6b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d113      	bne.n	800a6e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6bc:	f383 8811 	msr	BASEPRI, r3
 800a6c0:	f3bf 8f6f 	isb	sy
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	60fb      	str	r3, [r7, #12]
}
 800a6ca:	bf00      	nop
 800a6cc:	e7fe      	b.n	800a6cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6d4:	f023 0301 	bic.w	r3, r3, #1
 800a6d8:	b2da      	uxtb	r2, r3
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	6a1b      	ldr	r3, [r3, #32]
 800a6e4:	6978      	ldr	r0, [r7, #20]
 800a6e6:	4798      	blx	r3
}
 800a6e8:	bf00      	nop
 800a6ea:	3718      	adds	r7, #24
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	20000e28 	.word	0x20000e28

0800a6f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6fc:	f107 0308 	add.w	r3, r7, #8
 800a700:	4618      	mov	r0, r3
 800a702:	f000 f857 	bl	800a7b4 <prvGetNextExpireTime>
 800a706:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	4619      	mov	r1, r3
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f000 f803 	bl	800a718 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a712:	f000 f8d5 	bl	800a8c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a716:	e7f1      	b.n	800a6fc <prvTimerTask+0x8>

0800a718 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a722:	f7ff f835 	bl	8009790 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a726:	f107 0308 	add.w	r3, r7, #8
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 f866 	bl	800a7fc <prvSampleTimeNow>
 800a730:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d130      	bne.n	800a79a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10a      	bne.n	800a754 <prvProcessTimerOrBlockTask+0x3c>
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	429a      	cmp	r2, r3
 800a744:	d806      	bhi.n	800a754 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a746:	f7ff f831 	bl	80097ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a74a:	68f9      	ldr	r1, [r7, #12]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f7ff ff85 	bl	800a65c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a752:	e024      	b.n	800a79e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d008      	beq.n	800a76c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a75a:	4b13      	ldr	r3, [pc, #76]	; (800a7a8 <prvProcessTimerOrBlockTask+0x90>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <prvProcessTimerOrBlockTask+0x50>
 800a764:	2301      	movs	r3, #1
 800a766:	e000      	b.n	800a76a <prvProcessTimerOrBlockTask+0x52>
 800a768:	2300      	movs	r3, #0
 800a76a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a76c:	4b0f      	ldr	r3, [pc, #60]	; (800a7ac <prvProcessTimerOrBlockTask+0x94>)
 800a76e:	6818      	ldr	r0, [r3, #0]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	4619      	mov	r1, r3
 800a77a:	f7fe fd99 	bl	80092b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a77e:	f7ff f815 	bl	80097ac <xTaskResumeAll>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10a      	bne.n	800a79e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a788:	4b09      	ldr	r3, [pc, #36]	; (800a7b0 <prvProcessTimerOrBlockTask+0x98>)
 800a78a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a78e:	601a      	str	r2, [r3, #0]
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	f3bf 8f6f 	isb	sy
}
 800a798:	e001      	b.n	800a79e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a79a:	f7ff f807 	bl	80097ac <xTaskResumeAll>
}
 800a79e:	bf00      	nop
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20000e2c 	.word	0x20000e2c
 800a7ac:	20000e30 	.word	0x20000e30
 800a7b0:	e000ed04 	.word	0xe000ed04

0800a7b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a7bc:	4b0e      	ldr	r3, [pc, #56]	; (800a7f8 <prvGetNextExpireTime+0x44>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <prvGetNextExpireTime+0x16>
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	e000      	b.n	800a7cc <prvGetNextExpireTime+0x18>
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d105      	bne.n	800a7e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7d8:	4b07      	ldr	r3, [pc, #28]	; (800a7f8 <prvGetNextExpireTime+0x44>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	60fb      	str	r3, [r7, #12]
 800a7e2:	e001      	b.n	800a7e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3714      	adds	r7, #20
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	20000e28 	.word	0x20000e28

0800a7fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a804:	f7ff f870 	bl	80098e8 <xTaskGetTickCount>
 800a808:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a80a:	4b0b      	ldr	r3, [pc, #44]	; (800a838 <prvSampleTimeNow+0x3c>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	429a      	cmp	r2, r3
 800a812:	d205      	bcs.n	800a820 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a814:	f000 f936 	bl	800aa84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	601a      	str	r2, [r3, #0]
 800a81e:	e002      	b.n	800a826 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a826:	4a04      	ldr	r2, [pc, #16]	; (800a838 <prvSampleTimeNow+0x3c>)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a82c:	68fb      	ldr	r3, [r7, #12]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	20000e38 	.word	0x20000e38

0800a83c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
 800a848:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a84a:	2300      	movs	r3, #0
 800a84c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d812      	bhi.n	800a888 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	1ad2      	subs	r2, r2, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d302      	bcc.n	800a876 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a870:	2301      	movs	r3, #1
 800a872:	617b      	str	r3, [r7, #20]
 800a874:	e01b      	b.n	800a8ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a876:	4b10      	ldr	r3, [pc, #64]	; (800a8b8 <prvInsertTimerInActiveList+0x7c>)
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	3304      	adds	r3, #4
 800a87e:	4619      	mov	r1, r3
 800a880:	4610      	mov	r0, r2
 800a882:	f7fd fde6 	bl	8008452 <vListInsert>
 800a886:	e012      	b.n	800a8ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d206      	bcs.n	800a89e <prvInsertTimerInActiveList+0x62>
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	429a      	cmp	r2, r3
 800a896:	d302      	bcc.n	800a89e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a898:	2301      	movs	r3, #1
 800a89a:	617b      	str	r3, [r7, #20]
 800a89c:	e007      	b.n	800a8ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a89e:	4b07      	ldr	r3, [pc, #28]	; (800a8bc <prvInsertTimerInActiveList+0x80>)
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	3304      	adds	r3, #4
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	f7fd fdd2 	bl	8008452 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a8ae:	697b      	ldr	r3, [r7, #20]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3718      	adds	r7, #24
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	20000e2c 	.word	0x20000e2c
 800a8bc:	20000e28 	.word	0x20000e28

0800a8c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b08e      	sub	sp, #56	; 0x38
 800a8c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8c6:	e0ca      	b.n	800aa5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	da18      	bge.n	800a900 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a8ce:	1d3b      	adds	r3, r7, #4
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10a      	bne.n	800a8f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	61fb      	str	r3, [r7, #28]
}
 800a8ec:	bf00      	nop
 800a8ee:	e7fe      	b.n	800a8ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8f6:	6850      	ldr	r0, [r2, #4]
 800a8f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8fa:	6892      	ldr	r2, [r2, #8]
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	f2c0 80aa 	blt.w	800aa5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90e:	695b      	ldr	r3, [r3, #20]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d004      	beq.n	800a91e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a916:	3304      	adds	r3, #4
 800a918:	4618      	mov	r0, r3
 800a91a:	f7fd fdd3 	bl	80084c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a91e:	463b      	mov	r3, r7
 800a920:	4618      	mov	r0, r3
 800a922:	f7ff ff6b 	bl	800a7fc <prvSampleTimeNow>
 800a926:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b09      	cmp	r3, #9
 800a92c:	f200 8097 	bhi.w	800aa5e <prvProcessReceivedCommands+0x19e>
 800a930:	a201      	add	r2, pc, #4	; (adr r2, 800a938 <prvProcessReceivedCommands+0x78>)
 800a932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a936:	bf00      	nop
 800a938:	0800a961 	.word	0x0800a961
 800a93c:	0800a961 	.word	0x0800a961
 800a940:	0800a961 	.word	0x0800a961
 800a944:	0800a9d5 	.word	0x0800a9d5
 800a948:	0800a9e9 	.word	0x0800a9e9
 800a94c:	0800aa33 	.word	0x0800aa33
 800a950:	0800a961 	.word	0x0800a961
 800a954:	0800a961 	.word	0x0800a961
 800a958:	0800a9d5 	.word	0x0800a9d5
 800a95c:	0800a9e9 	.word	0x0800a9e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a966:	f043 0301 	orr.w	r3, r3, #1
 800a96a:	b2da      	uxtb	r2, r3
 800a96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a976:	699b      	ldr	r3, [r3, #24]
 800a978:	18d1      	adds	r1, r2, r3
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a97e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a980:	f7ff ff5c 	bl	800a83c <prvInsertTimerInActiveList>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d069      	beq.n	800aa5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98c:	6a1b      	ldr	r3, [r3, #32]
 800a98e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a990:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a998:	f003 0304 	and.w	r3, r3, #4
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d05e      	beq.n	800aa5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a9a0:	68ba      	ldr	r2, [r7, #8]
 800a9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	441a      	add	r2, r3
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9b2:	f7ff fe05 	bl	800a5c0 <xTimerGenericCommand>
 800a9b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a9b8:	6a3b      	ldr	r3, [r7, #32]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d14f      	bne.n	800aa5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	61bb      	str	r3, [r7, #24]
}
 800a9d0:	bf00      	nop
 800a9d2:	e7fe      	b.n	800a9d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9da:	f023 0301 	bic.w	r3, r3, #1
 800a9de:	b2da      	uxtb	r2, r3
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a9e6:	e03a      	b.n	800aa5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9ee:	f043 0301 	orr.w	r3, r3, #1
 800a9f2:	b2da      	uxtb	r2, r3
 800a9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10a      	bne.n	800aa1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aa08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0c:	f383 8811 	msr	BASEPRI, r3
 800aa10:	f3bf 8f6f 	isb	sy
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	617b      	str	r3, [r7, #20]
}
 800aa1a:	bf00      	nop
 800aa1c:	e7fe      	b.n	800aa1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa20:	699a      	ldr	r2, [r3, #24]
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa24:	18d1      	adds	r1, r2, r3
 800aa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa2c:	f7ff ff06 	bl	800a83c <prvInsertTimerInActiveList>
					break;
 800aa30:	e015      	b.n	800aa5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa38:	f003 0302 	and.w	r3, r3, #2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d103      	bne.n	800aa48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aa40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa42:	f000 fbdd 	bl	800b200 <vPortFree>
 800aa46:	e00a      	b.n	800aa5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa4e:	f023 0301 	bic.w	r3, r3, #1
 800aa52:	b2da      	uxtb	r2, r3
 800aa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa5a:	e000      	b.n	800aa5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aa5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa5e:	4b08      	ldr	r3, [pc, #32]	; (800aa80 <prvProcessReceivedCommands+0x1c0>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	1d39      	adds	r1, r7, #4
 800aa64:	2200      	movs	r2, #0
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fe f8e4 	bl	8008c34 <xQueueReceive>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f47f af2a 	bne.w	800a8c8 <prvProcessReceivedCommands+0x8>
	}
}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop
 800aa78:	3730      	adds	r7, #48	; 0x30
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	20000e30 	.word	0x20000e30

0800aa84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b088      	sub	sp, #32
 800aa88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa8a:	e048      	b.n	800ab1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa8c:	4b2d      	ldr	r3, [pc, #180]	; (800ab44 <prvSwitchTimerLists+0xc0>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa96:	4b2b      	ldr	r3, [pc, #172]	; (800ab44 <prvSwitchTimerLists+0xc0>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	3304      	adds	r3, #4
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fd fd0d 	bl	80084c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aab8:	f003 0304 	and.w	r3, r3, #4
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d02e      	beq.n	800ab1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	699b      	ldr	r3, [r3, #24]
 800aac4:	693a      	ldr	r2, [r7, #16]
 800aac6:	4413      	add	r3, r2
 800aac8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d90e      	bls.n	800aaf0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aade:	4b19      	ldr	r3, [pc, #100]	; (800ab44 <prvSwitchTimerLists+0xc0>)
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	3304      	adds	r3, #4
 800aae6:	4619      	mov	r1, r3
 800aae8:	4610      	mov	r0, r2
 800aaea:	f7fd fcb2 	bl	8008452 <vListInsert>
 800aaee:	e016      	b.n	800ab1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	2100      	movs	r1, #0
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f7ff fd60 	bl	800a5c0 <xTimerGenericCommand>
 800ab00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10a      	bne.n	800ab1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ab08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0c:	f383 8811 	msr	BASEPRI, r3
 800ab10:	f3bf 8f6f 	isb	sy
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	603b      	str	r3, [r7, #0]
}
 800ab1a:	bf00      	nop
 800ab1c:	e7fe      	b.n	800ab1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab1e:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <prvSwitchTimerLists+0xc0>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1b1      	bne.n	800aa8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab28:	4b06      	ldr	r3, [pc, #24]	; (800ab44 <prvSwitchTimerLists+0xc0>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab2e:	4b06      	ldr	r3, [pc, #24]	; (800ab48 <prvSwitchTimerLists+0xc4>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a04      	ldr	r2, [pc, #16]	; (800ab44 <prvSwitchTimerLists+0xc0>)
 800ab34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab36:	4a04      	ldr	r2, [pc, #16]	; (800ab48 <prvSwitchTimerLists+0xc4>)
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	6013      	str	r3, [r2, #0]
}
 800ab3c:	bf00      	nop
 800ab3e:	3718      	adds	r7, #24
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	20000e28 	.word	0x20000e28
 800ab48:	20000e2c 	.word	0x20000e2c

0800ab4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab52:	f000 f967 	bl	800ae24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab56:	4b15      	ldr	r3, [pc, #84]	; (800abac <prvCheckForValidListAndQueue+0x60>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d120      	bne.n	800aba0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab5e:	4814      	ldr	r0, [pc, #80]	; (800abb0 <prvCheckForValidListAndQueue+0x64>)
 800ab60:	f7fd fc26 	bl	80083b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab64:	4813      	ldr	r0, [pc, #76]	; (800abb4 <prvCheckForValidListAndQueue+0x68>)
 800ab66:	f7fd fc23 	bl	80083b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab6a:	4b13      	ldr	r3, [pc, #76]	; (800abb8 <prvCheckForValidListAndQueue+0x6c>)
 800ab6c:	4a10      	ldr	r2, [pc, #64]	; (800abb0 <prvCheckForValidListAndQueue+0x64>)
 800ab6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab70:	4b12      	ldr	r3, [pc, #72]	; (800abbc <prvCheckForValidListAndQueue+0x70>)
 800ab72:	4a10      	ldr	r2, [pc, #64]	; (800abb4 <prvCheckForValidListAndQueue+0x68>)
 800ab74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab76:	2300      	movs	r3, #0
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	4b11      	ldr	r3, [pc, #68]	; (800abc0 <prvCheckForValidListAndQueue+0x74>)
 800ab7c:	4a11      	ldr	r2, [pc, #68]	; (800abc4 <prvCheckForValidListAndQueue+0x78>)
 800ab7e:	2110      	movs	r1, #16
 800ab80:	200a      	movs	r0, #10
 800ab82:	f7fd fd31 	bl	80085e8 <xQueueGenericCreateStatic>
 800ab86:	4603      	mov	r3, r0
 800ab88:	4a08      	ldr	r2, [pc, #32]	; (800abac <prvCheckForValidListAndQueue+0x60>)
 800ab8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab8c:	4b07      	ldr	r3, [pc, #28]	; (800abac <prvCheckForValidListAndQueue+0x60>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d005      	beq.n	800aba0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab94:	4b05      	ldr	r3, [pc, #20]	; (800abac <prvCheckForValidListAndQueue+0x60>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	490b      	ldr	r1, [pc, #44]	; (800abc8 <prvCheckForValidListAndQueue+0x7c>)
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fe fb5e 	bl	800925c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aba0:	f000 f970 	bl	800ae84 <vPortExitCritical>
}
 800aba4:	bf00      	nop
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	20000e30 	.word	0x20000e30
 800abb0:	20000e00 	.word	0x20000e00
 800abb4:	20000e14 	.word	0x20000e14
 800abb8:	20000e28 	.word	0x20000e28
 800abbc:	20000e2c 	.word	0x20000e2c
 800abc0:	20000edc 	.word	0x20000edc
 800abc4:	20000e3c 	.word	0x20000e3c
 800abc8:	0800fd94 	.word	0x0800fd94

0800abcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	3b04      	subs	r3, #4
 800abdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800abe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	3b04      	subs	r3, #4
 800abea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	f023 0201 	bic.w	r2, r3, #1
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	3b04      	subs	r3, #4
 800abfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800abfc:	4a0c      	ldr	r2, [pc, #48]	; (800ac30 <pxPortInitialiseStack+0x64>)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	3b14      	subs	r3, #20
 800ac06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	3b04      	subs	r3, #4
 800ac12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f06f 0202 	mvn.w	r2, #2
 800ac1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	3b20      	subs	r3, #32
 800ac20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac22:	68fb      	ldr	r3, [r7, #12]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	0800ac35 	.word	0x0800ac35

0800ac34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac3e:	4b12      	ldr	r3, [pc, #72]	; (800ac88 <prvTaskExitError+0x54>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac46:	d00a      	beq.n	800ac5e <prvTaskExitError+0x2a>
	__asm volatile
 800ac48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4c:	f383 8811 	msr	BASEPRI, r3
 800ac50:	f3bf 8f6f 	isb	sy
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	60fb      	str	r3, [r7, #12]
}
 800ac5a:	bf00      	nop
 800ac5c:	e7fe      	b.n	800ac5c <prvTaskExitError+0x28>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	60bb      	str	r3, [r7, #8]
}
 800ac70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac72:	bf00      	nop
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d0fc      	beq.n	800ac74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac7a:	bf00      	nop
 800ac7c:	bf00      	nop
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	20000024 	.word	0x20000024
 800ac8c:	00000000 	.word	0x00000000

0800ac90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac90:	4b07      	ldr	r3, [pc, #28]	; (800acb0 <pxCurrentTCBConst2>)
 800ac92:	6819      	ldr	r1, [r3, #0]
 800ac94:	6808      	ldr	r0, [r1, #0]
 800ac96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9a:	f380 8809 	msr	PSP, r0
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f04f 0000 	mov.w	r0, #0
 800aca6:	f380 8811 	msr	BASEPRI, r0
 800acaa:	4770      	bx	lr
 800acac:	f3af 8000 	nop.w

0800acb0 <pxCurrentTCBConst2>:
 800acb0:	20000900 	.word	0x20000900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800acb4:	bf00      	nop
 800acb6:	bf00      	nop

0800acb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800acb8:	4808      	ldr	r0, [pc, #32]	; (800acdc <prvPortStartFirstTask+0x24>)
 800acba:	6800      	ldr	r0, [r0, #0]
 800acbc:	6800      	ldr	r0, [r0, #0]
 800acbe:	f380 8808 	msr	MSP, r0
 800acc2:	f04f 0000 	mov.w	r0, #0
 800acc6:	f380 8814 	msr	CONTROL, r0
 800acca:	b662      	cpsie	i
 800accc:	b661      	cpsie	f
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	df00      	svc	0
 800acd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800acda:	bf00      	nop
 800acdc:	e000ed08 	.word	0xe000ed08

0800ace0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ace6:	4b46      	ldr	r3, [pc, #280]	; (800ae00 <xPortStartScheduler+0x120>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a46      	ldr	r2, [pc, #280]	; (800ae04 <xPortStartScheduler+0x124>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d10a      	bne.n	800ad06 <xPortStartScheduler+0x26>
	__asm volatile
 800acf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	613b      	str	r3, [r7, #16]
}
 800ad02:	bf00      	nop
 800ad04:	e7fe      	b.n	800ad04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad06:	4b3e      	ldr	r3, [pc, #248]	; (800ae00 <xPortStartScheduler+0x120>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a3f      	ldr	r2, [pc, #252]	; (800ae08 <xPortStartScheduler+0x128>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d10a      	bne.n	800ad26 <xPortStartScheduler+0x46>
	__asm volatile
 800ad10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	60fb      	str	r3, [r7, #12]
}
 800ad22:	bf00      	nop
 800ad24:	e7fe      	b.n	800ad24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad26:	4b39      	ldr	r3, [pc, #228]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ad28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	22ff      	movs	r2, #255	; 0xff
 800ad36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad40:	78fb      	ldrb	r3, [r7, #3]
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	4b31      	ldr	r3, [pc, #196]	; (800ae10 <xPortStartScheduler+0x130>)
 800ad4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad4e:	4b31      	ldr	r3, [pc, #196]	; (800ae14 <xPortStartScheduler+0x134>)
 800ad50:	2207      	movs	r2, #7
 800ad52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad54:	e009      	b.n	800ad6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ad56:	4b2f      	ldr	r3, [pc, #188]	; (800ae14 <xPortStartScheduler+0x134>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	4a2d      	ldr	r2, [pc, #180]	; (800ae14 <xPortStartScheduler+0x134>)
 800ad5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad60:	78fb      	ldrb	r3, [r7, #3]
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	005b      	lsls	r3, r3, #1
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad6a:	78fb      	ldrb	r3, [r7, #3]
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad72:	2b80      	cmp	r3, #128	; 0x80
 800ad74:	d0ef      	beq.n	800ad56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad76:	4b27      	ldr	r3, [pc, #156]	; (800ae14 <xPortStartScheduler+0x134>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f1c3 0307 	rsb	r3, r3, #7
 800ad7e:	2b04      	cmp	r3, #4
 800ad80:	d00a      	beq.n	800ad98 <xPortStartScheduler+0xb8>
	__asm volatile
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	60bb      	str	r3, [r7, #8]
}
 800ad94:	bf00      	nop
 800ad96:	e7fe      	b.n	800ad96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad98:	4b1e      	ldr	r3, [pc, #120]	; (800ae14 <xPortStartScheduler+0x134>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	021b      	lsls	r3, r3, #8
 800ad9e:	4a1d      	ldr	r2, [pc, #116]	; (800ae14 <xPortStartScheduler+0x134>)
 800ada0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ada2:	4b1c      	ldr	r3, [pc, #112]	; (800ae14 <xPortStartScheduler+0x134>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800adaa:	4a1a      	ldr	r2, [pc, #104]	; (800ae14 <xPortStartScheduler+0x134>)
 800adac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800adb6:	4b18      	ldr	r3, [pc, #96]	; (800ae18 <xPortStartScheduler+0x138>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a17      	ldr	r2, [pc, #92]	; (800ae18 <xPortStartScheduler+0x138>)
 800adbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800adc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800adc2:	4b15      	ldr	r3, [pc, #84]	; (800ae18 <xPortStartScheduler+0x138>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a14      	ldr	r2, [pc, #80]	; (800ae18 <xPortStartScheduler+0x138>)
 800adc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800adcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800adce:	f000 f8dd 	bl	800af8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800add2:	4b12      	ldr	r3, [pc, #72]	; (800ae1c <xPortStartScheduler+0x13c>)
 800add4:	2200      	movs	r2, #0
 800add6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800add8:	f000 f8fc 	bl	800afd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800addc:	4b10      	ldr	r3, [pc, #64]	; (800ae20 <xPortStartScheduler+0x140>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a0f      	ldr	r2, [pc, #60]	; (800ae20 <xPortStartScheduler+0x140>)
 800ade2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ade6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ade8:	f7ff ff66 	bl	800acb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800adec:	f7fe fe46 	bl	8009a7c <vTaskSwitchContext>
	prvTaskExitError();
 800adf0:	f7ff ff20 	bl	800ac34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3718      	adds	r7, #24
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	e000ed00 	.word	0xe000ed00
 800ae04:	410fc271 	.word	0x410fc271
 800ae08:	410fc270 	.word	0x410fc270
 800ae0c:	e000e400 	.word	0xe000e400
 800ae10:	20000f2c 	.word	0x20000f2c
 800ae14:	20000f30 	.word	0x20000f30
 800ae18:	e000ed20 	.word	0xe000ed20
 800ae1c:	20000024 	.word	0x20000024
 800ae20:	e000ef34 	.word	0xe000ef34

0800ae24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
	__asm volatile
 800ae2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2e:	f383 8811 	msr	BASEPRI, r3
 800ae32:	f3bf 8f6f 	isb	sy
 800ae36:	f3bf 8f4f 	dsb	sy
 800ae3a:	607b      	str	r3, [r7, #4]
}
 800ae3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae3e:	4b0f      	ldr	r3, [pc, #60]	; (800ae7c <vPortEnterCritical+0x58>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	3301      	adds	r3, #1
 800ae44:	4a0d      	ldr	r2, [pc, #52]	; (800ae7c <vPortEnterCritical+0x58>)
 800ae46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae48:	4b0c      	ldr	r3, [pc, #48]	; (800ae7c <vPortEnterCritical+0x58>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d10f      	bne.n	800ae70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae50:	4b0b      	ldr	r3, [pc, #44]	; (800ae80 <vPortEnterCritical+0x5c>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <vPortEnterCritical+0x4c>
	__asm volatile
 800ae5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5e:	f383 8811 	msr	BASEPRI, r3
 800ae62:	f3bf 8f6f 	isb	sy
 800ae66:	f3bf 8f4f 	dsb	sy
 800ae6a:	603b      	str	r3, [r7, #0]
}
 800ae6c:	bf00      	nop
 800ae6e:	e7fe      	b.n	800ae6e <vPortEnterCritical+0x4a>
	}
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	20000024 	.word	0x20000024
 800ae80:	e000ed04 	.word	0xe000ed04

0800ae84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae8a:	4b12      	ldr	r3, [pc, #72]	; (800aed4 <vPortExitCritical+0x50>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10a      	bne.n	800aea8 <vPortExitCritical+0x24>
	__asm volatile
 800ae92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae96:	f383 8811 	msr	BASEPRI, r3
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	607b      	str	r3, [r7, #4]
}
 800aea4:	bf00      	nop
 800aea6:	e7fe      	b.n	800aea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aea8:	4b0a      	ldr	r3, [pc, #40]	; (800aed4 <vPortExitCritical+0x50>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	3b01      	subs	r3, #1
 800aeae:	4a09      	ldr	r2, [pc, #36]	; (800aed4 <vPortExitCritical+0x50>)
 800aeb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aeb2:	4b08      	ldr	r3, [pc, #32]	; (800aed4 <vPortExitCritical+0x50>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d105      	bne.n	800aec6 <vPortExitCritical+0x42>
 800aeba:	2300      	movs	r3, #0
 800aebc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	f383 8811 	msr	BASEPRI, r3
}
 800aec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aec6:	bf00      	nop
 800aec8:	370c      	adds	r7, #12
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	20000024 	.word	0x20000024
	...

0800aee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aee0:	f3ef 8009 	mrs	r0, PSP
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	4b15      	ldr	r3, [pc, #84]	; (800af40 <pxCurrentTCBConst>)
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	f01e 0f10 	tst.w	lr, #16
 800aef0:	bf08      	it	eq
 800aef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aefa:	6010      	str	r0, [r2, #0]
 800aefc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af04:	f380 8811 	msr	BASEPRI, r0
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	f3bf 8f6f 	isb	sy
 800af10:	f7fe fdb4 	bl	8009a7c <vTaskSwitchContext>
 800af14:	f04f 0000 	mov.w	r0, #0
 800af18:	f380 8811 	msr	BASEPRI, r0
 800af1c:	bc09      	pop	{r0, r3}
 800af1e:	6819      	ldr	r1, [r3, #0]
 800af20:	6808      	ldr	r0, [r1, #0]
 800af22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af26:	f01e 0f10 	tst.w	lr, #16
 800af2a:	bf08      	it	eq
 800af2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af30:	f380 8809 	msr	PSP, r0
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	f3af 8000 	nop.w

0800af40 <pxCurrentTCBConst>:
 800af40:	20000900 	.word	0x20000900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af44:	bf00      	nop
 800af46:	bf00      	nop

0800af48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
	__asm volatile
 800af4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af52:	f383 8811 	msr	BASEPRI, r3
 800af56:	f3bf 8f6f 	isb	sy
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	607b      	str	r3, [r7, #4]
}
 800af60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af62:	f7fe fcd1 	bl	8009908 <xTaskIncrementTick>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d003      	beq.n	800af74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af6c:	4b06      	ldr	r3, [pc, #24]	; (800af88 <xPortSysTickHandler+0x40>)
 800af6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	2300      	movs	r3, #0
 800af76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	f383 8811 	msr	BASEPRI, r3
}
 800af7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af80:	bf00      	nop
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	e000ed04 	.word	0xe000ed04

0800af8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af8c:	b480      	push	{r7}
 800af8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af90:	4b0b      	ldr	r3, [pc, #44]	; (800afc0 <vPortSetupTimerInterrupt+0x34>)
 800af92:	2200      	movs	r2, #0
 800af94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af96:	4b0b      	ldr	r3, [pc, #44]	; (800afc4 <vPortSetupTimerInterrupt+0x38>)
 800af98:	2200      	movs	r2, #0
 800af9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af9c:	4b0a      	ldr	r3, [pc, #40]	; (800afc8 <vPortSetupTimerInterrupt+0x3c>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a0a      	ldr	r2, [pc, #40]	; (800afcc <vPortSetupTimerInterrupt+0x40>)
 800afa2:	fba2 2303 	umull	r2, r3, r2, r3
 800afa6:	099b      	lsrs	r3, r3, #6
 800afa8:	4a09      	ldr	r2, [pc, #36]	; (800afd0 <vPortSetupTimerInterrupt+0x44>)
 800afaa:	3b01      	subs	r3, #1
 800afac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800afae:	4b04      	ldr	r3, [pc, #16]	; (800afc0 <vPortSetupTimerInterrupt+0x34>)
 800afb0:	2207      	movs	r2, #7
 800afb2:	601a      	str	r2, [r3, #0]
}
 800afb4:	bf00      	nop
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	e000e010 	.word	0xe000e010
 800afc4:	e000e018 	.word	0xe000e018
 800afc8:	20000004 	.word	0x20000004
 800afcc:	10624dd3 	.word	0x10624dd3
 800afd0:	e000e014 	.word	0xe000e014

0800afd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800afd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800afe4 <vPortEnableVFP+0x10>
 800afd8:	6801      	ldr	r1, [r0, #0]
 800afda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800afde:	6001      	str	r1, [r0, #0]
 800afe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800afe2:	bf00      	nop
 800afe4:	e000ed88 	.word	0xe000ed88

0800afe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800afe8:	b480      	push	{r7}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800afee:	f3ef 8305 	mrs	r3, IPSR
 800aff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2b0f      	cmp	r3, #15
 800aff8:	d914      	bls.n	800b024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800affa:	4a17      	ldr	r2, [pc, #92]	; (800b058 <vPortValidateInterruptPriority+0x70>)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	4413      	add	r3, r2
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b004:	4b15      	ldr	r3, [pc, #84]	; (800b05c <vPortValidateInterruptPriority+0x74>)
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	7afa      	ldrb	r2, [r7, #11]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d20a      	bcs.n	800b024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	607b      	str	r3, [r7, #4]
}
 800b020:	bf00      	nop
 800b022:	e7fe      	b.n	800b022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b024:	4b0e      	ldr	r3, [pc, #56]	; (800b060 <vPortValidateInterruptPriority+0x78>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b02c:	4b0d      	ldr	r3, [pc, #52]	; (800b064 <vPortValidateInterruptPriority+0x7c>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	429a      	cmp	r2, r3
 800b032:	d90a      	bls.n	800b04a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b038:	f383 8811 	msr	BASEPRI, r3
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	603b      	str	r3, [r7, #0]
}
 800b046:	bf00      	nop
 800b048:	e7fe      	b.n	800b048 <vPortValidateInterruptPriority+0x60>
	}
 800b04a:	bf00      	nop
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop
 800b058:	e000e3f0 	.word	0xe000e3f0
 800b05c:	20000f2c 	.word	0x20000f2c
 800b060:	e000ed0c 	.word	0xe000ed0c
 800b064:	20000f30 	.word	0x20000f30

0800b068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b08a      	sub	sp, #40	; 0x28
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b070:	2300      	movs	r3, #0
 800b072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b074:	f7fe fb8c 	bl	8009790 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b078:	4b5b      	ldr	r3, [pc, #364]	; (800b1e8 <pvPortMalloc+0x180>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d101      	bne.n	800b084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b080:	f000 f920 	bl	800b2c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b084:	4b59      	ldr	r3, [pc, #356]	; (800b1ec <pvPortMalloc+0x184>)
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4013      	ands	r3, r2
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f040 8093 	bne.w	800b1b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d01d      	beq.n	800b0d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b098:	2208      	movs	r2, #8
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4413      	add	r3, r2
 800b09e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f003 0307 	and.w	r3, r3, #7
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d014      	beq.n	800b0d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f023 0307 	bic.w	r3, r3, #7
 800b0b0:	3308      	adds	r3, #8
 800b0b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f003 0307 	and.w	r3, r3, #7
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00a      	beq.n	800b0d4 <pvPortMalloc+0x6c>
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	617b      	str	r3, [r7, #20]
}
 800b0d0:	bf00      	nop
 800b0d2:	e7fe      	b.n	800b0d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d06e      	beq.n	800b1b8 <pvPortMalloc+0x150>
 800b0da:	4b45      	ldr	r3, [pc, #276]	; (800b1f0 <pvPortMalloc+0x188>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d869      	bhi.n	800b1b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b0e4:	4b43      	ldr	r3, [pc, #268]	; (800b1f4 <pvPortMalloc+0x18c>)
 800b0e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b0e8:	4b42      	ldr	r3, [pc, #264]	; (800b1f4 <pvPortMalloc+0x18c>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0ee:	e004      	b.n	800b0fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	429a      	cmp	r2, r3
 800b102:	d903      	bls.n	800b10c <pvPortMalloc+0xa4>
 800b104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1f1      	bne.n	800b0f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b10c:	4b36      	ldr	r3, [pc, #216]	; (800b1e8 <pvPortMalloc+0x180>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b112:	429a      	cmp	r2, r3
 800b114:	d050      	beq.n	800b1b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b116:	6a3b      	ldr	r3, [r7, #32]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2208      	movs	r2, #8
 800b11c:	4413      	add	r3, r2
 800b11e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	6a3b      	ldr	r3, [r7, #32]
 800b126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	1ad2      	subs	r2, r2, r3
 800b130:	2308      	movs	r3, #8
 800b132:	005b      	lsls	r3, r3, #1
 800b134:	429a      	cmp	r2, r3
 800b136:	d91f      	bls.n	800b178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4413      	add	r3, r2
 800b13e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	f003 0307 	and.w	r3, r3, #7
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00a      	beq.n	800b160 <pvPortMalloc+0xf8>
	__asm volatile
 800b14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14e:	f383 8811 	msr	BASEPRI, r3
 800b152:	f3bf 8f6f 	isb	sy
 800b156:	f3bf 8f4f 	dsb	sy
 800b15a:	613b      	str	r3, [r7, #16]
}
 800b15c:	bf00      	nop
 800b15e:	e7fe      	b.n	800b15e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b162:	685a      	ldr	r2, [r3, #4]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	1ad2      	subs	r2, r2, r3
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b172:	69b8      	ldr	r0, [r7, #24]
 800b174:	f000 f908 	bl	800b388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b178:	4b1d      	ldr	r3, [pc, #116]	; (800b1f0 <pvPortMalloc+0x188>)
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	4a1b      	ldr	r2, [pc, #108]	; (800b1f0 <pvPortMalloc+0x188>)
 800b184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b186:	4b1a      	ldr	r3, [pc, #104]	; (800b1f0 <pvPortMalloc+0x188>)
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	4b1b      	ldr	r3, [pc, #108]	; (800b1f8 <pvPortMalloc+0x190>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d203      	bcs.n	800b19a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b192:	4b17      	ldr	r3, [pc, #92]	; (800b1f0 <pvPortMalloc+0x188>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a18      	ldr	r2, [pc, #96]	; (800b1f8 <pvPortMalloc+0x190>)
 800b198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19c:	685a      	ldr	r2, [r3, #4]
 800b19e:	4b13      	ldr	r3, [pc, #76]	; (800b1ec <pvPortMalloc+0x184>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	431a      	orrs	r2, r3
 800b1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b1ae:	4b13      	ldr	r3, [pc, #76]	; (800b1fc <pvPortMalloc+0x194>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	4a11      	ldr	r2, [pc, #68]	; (800b1fc <pvPortMalloc+0x194>)
 800b1b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b1b8:	f7fe faf8 	bl	80097ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	f003 0307 	and.w	r3, r3, #7
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00a      	beq.n	800b1dc <pvPortMalloc+0x174>
	__asm volatile
 800b1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ca:	f383 8811 	msr	BASEPRI, r3
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	60fb      	str	r3, [r7, #12]
}
 800b1d8:	bf00      	nop
 800b1da:	e7fe      	b.n	800b1da <pvPortMalloc+0x172>
	return pvReturn;
 800b1dc:	69fb      	ldr	r3, [r7, #28]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3728      	adds	r7, #40	; 0x28
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	20004b3c 	.word	0x20004b3c
 800b1ec:	20004b50 	.word	0x20004b50
 800b1f0:	20004b40 	.word	0x20004b40
 800b1f4:	20004b34 	.word	0x20004b34
 800b1f8:	20004b44 	.word	0x20004b44
 800b1fc:	20004b48 	.word	0x20004b48

0800b200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d04d      	beq.n	800b2ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b212:	2308      	movs	r3, #8
 800b214:	425b      	negs	r3, r3
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	4413      	add	r3, r2
 800b21a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	685a      	ldr	r2, [r3, #4]
 800b224:	4b24      	ldr	r3, [pc, #144]	; (800b2b8 <vPortFree+0xb8>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4013      	ands	r3, r2
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10a      	bne.n	800b244 <vPortFree+0x44>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	60fb      	str	r3, [r7, #12]
}
 800b240:	bf00      	nop
 800b242:	e7fe      	b.n	800b242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d00a      	beq.n	800b262 <vPortFree+0x62>
	__asm volatile
 800b24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b250:	f383 8811 	msr	BASEPRI, r3
 800b254:	f3bf 8f6f 	isb	sy
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	60bb      	str	r3, [r7, #8]
}
 800b25e:	bf00      	nop
 800b260:	e7fe      	b.n	800b260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	685a      	ldr	r2, [r3, #4]
 800b266:	4b14      	ldr	r3, [pc, #80]	; (800b2b8 <vPortFree+0xb8>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4013      	ands	r3, r2
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d01e      	beq.n	800b2ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d11a      	bne.n	800b2ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	4b0e      	ldr	r3, [pc, #56]	; (800b2b8 <vPortFree+0xb8>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	43db      	mvns	r3, r3
 800b282:	401a      	ands	r2, r3
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b288:	f7fe fa82 	bl	8009790 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	685a      	ldr	r2, [r3, #4]
 800b290:	4b0a      	ldr	r3, [pc, #40]	; (800b2bc <vPortFree+0xbc>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4413      	add	r3, r2
 800b296:	4a09      	ldr	r2, [pc, #36]	; (800b2bc <vPortFree+0xbc>)
 800b298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b29a:	6938      	ldr	r0, [r7, #16]
 800b29c:	f000 f874 	bl	800b388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b2a0:	4b07      	ldr	r3, [pc, #28]	; (800b2c0 <vPortFree+0xc0>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	4a06      	ldr	r2, [pc, #24]	; (800b2c0 <vPortFree+0xc0>)
 800b2a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b2aa:	f7fe fa7f 	bl	80097ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b2ae:	bf00      	nop
 800b2b0:	3718      	adds	r7, #24
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20004b50 	.word	0x20004b50
 800b2bc:	20004b40 	.word	0x20004b40
 800b2c0:	20004b4c 	.word	0x20004b4c

0800b2c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b2ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b2ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b2d0:	4b27      	ldr	r3, [pc, #156]	; (800b370 <prvHeapInit+0xac>)
 800b2d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f003 0307 	and.w	r3, r3, #7
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00c      	beq.n	800b2f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	3307      	adds	r3, #7
 800b2e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f023 0307 	bic.w	r3, r3, #7
 800b2ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	4a1f      	ldr	r2, [pc, #124]	; (800b370 <prvHeapInit+0xac>)
 800b2f4:	4413      	add	r3, r2
 800b2f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b2fc:	4a1d      	ldr	r2, [pc, #116]	; (800b374 <prvHeapInit+0xb0>)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b302:	4b1c      	ldr	r3, [pc, #112]	; (800b374 <prvHeapInit+0xb0>)
 800b304:	2200      	movs	r2, #0
 800b306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	4413      	add	r3, r2
 800b30e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b310:	2208      	movs	r2, #8
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	1a9b      	subs	r3, r3, r2
 800b316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f023 0307 	bic.w	r3, r3, #7
 800b31e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	4a15      	ldr	r2, [pc, #84]	; (800b378 <prvHeapInit+0xb4>)
 800b324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b326:	4b14      	ldr	r3, [pc, #80]	; (800b378 <prvHeapInit+0xb4>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2200      	movs	r2, #0
 800b32c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b32e:	4b12      	ldr	r3, [pc, #72]	; (800b378 <prvHeapInit+0xb4>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2200      	movs	r2, #0
 800b334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	1ad2      	subs	r2, r2, r3
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b344:	4b0c      	ldr	r3, [pc, #48]	; (800b378 <prvHeapInit+0xb4>)
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	4a0a      	ldr	r2, [pc, #40]	; (800b37c <prvHeapInit+0xb8>)
 800b352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	4a09      	ldr	r2, [pc, #36]	; (800b380 <prvHeapInit+0xbc>)
 800b35a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b35c:	4b09      	ldr	r3, [pc, #36]	; (800b384 <prvHeapInit+0xc0>)
 800b35e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b362:	601a      	str	r2, [r3, #0]
}
 800b364:	bf00      	nop
 800b366:	3714      	adds	r7, #20
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr
 800b370:	20000f34 	.word	0x20000f34
 800b374:	20004b34 	.word	0x20004b34
 800b378:	20004b3c 	.word	0x20004b3c
 800b37c:	20004b44 	.word	0x20004b44
 800b380:	20004b40 	.word	0x20004b40
 800b384:	20004b50 	.word	0x20004b50

0800b388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b390:	4b28      	ldr	r3, [pc, #160]	; (800b434 <prvInsertBlockIntoFreeList+0xac>)
 800b392:	60fb      	str	r3, [r7, #12]
 800b394:	e002      	b.n	800b39c <prvInsertBlockIntoFreeList+0x14>
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	60fb      	str	r3, [r7, #12]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d8f7      	bhi.n	800b396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d108      	bne.n	800b3ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	685a      	ldr	r2, [r3, #4]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	441a      	add	r2, r3
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	441a      	add	r2, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d118      	bne.n	800b410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	4b15      	ldr	r3, [pc, #84]	; (800b438 <prvInsertBlockIntoFreeList+0xb0>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d00d      	beq.n	800b406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	685a      	ldr	r2, [r3, #4]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	441a      	add	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	e008      	b.n	800b418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b406:	4b0c      	ldr	r3, [pc, #48]	; (800b438 <prvInsertBlockIntoFreeList+0xb0>)
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	e003      	b.n	800b418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d002      	beq.n	800b426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b426:	bf00      	nop
 800b428:	3714      	adds	r7, #20
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	20004b34 	.word	0x20004b34
 800b438:	20004b3c 	.word	0x20004b3c

0800b43c <atof>:
 800b43c:	2100      	movs	r1, #0
 800b43e:	f001 bb51 	b.w	800cae4 <strtod>
	...

0800b444 <__errno>:
 800b444:	4b01      	ldr	r3, [pc, #4]	; (800b44c <__errno+0x8>)
 800b446:	6818      	ldr	r0, [r3, #0]
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	20000028 	.word	0x20000028

0800b450 <__libc_init_array>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	4d0d      	ldr	r5, [pc, #52]	; (800b488 <__libc_init_array+0x38>)
 800b454:	4c0d      	ldr	r4, [pc, #52]	; (800b48c <__libc_init_array+0x3c>)
 800b456:	1b64      	subs	r4, r4, r5
 800b458:	10a4      	asrs	r4, r4, #2
 800b45a:	2600      	movs	r6, #0
 800b45c:	42a6      	cmp	r6, r4
 800b45e:	d109      	bne.n	800b474 <__libc_init_array+0x24>
 800b460:	4d0b      	ldr	r5, [pc, #44]	; (800b490 <__libc_init_array+0x40>)
 800b462:	4c0c      	ldr	r4, [pc, #48]	; (800b494 <__libc_init_array+0x44>)
 800b464:	f004 fa9c 	bl	800f9a0 <_init>
 800b468:	1b64      	subs	r4, r4, r5
 800b46a:	10a4      	asrs	r4, r4, #2
 800b46c:	2600      	movs	r6, #0
 800b46e:	42a6      	cmp	r6, r4
 800b470:	d105      	bne.n	800b47e <__libc_init_array+0x2e>
 800b472:	bd70      	pop	{r4, r5, r6, pc}
 800b474:	f855 3b04 	ldr.w	r3, [r5], #4
 800b478:	4798      	blx	r3
 800b47a:	3601      	adds	r6, #1
 800b47c:	e7ee      	b.n	800b45c <__libc_init_array+0xc>
 800b47e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b482:	4798      	blx	r3
 800b484:	3601      	adds	r6, #1
 800b486:	e7f2      	b.n	800b46e <__libc_init_array+0x1e>
 800b488:	08010390 	.word	0x08010390
 800b48c:	08010390 	.word	0x08010390
 800b490:	08010390 	.word	0x08010390
 800b494:	08010394 	.word	0x08010394

0800b498 <memcpy>:
 800b498:	440a      	add	r2, r1
 800b49a:	4291      	cmp	r1, r2
 800b49c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4a0:	d100      	bne.n	800b4a4 <memcpy+0xc>
 800b4a2:	4770      	bx	lr
 800b4a4:	b510      	push	{r4, lr}
 800b4a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4ae:	4291      	cmp	r1, r2
 800b4b0:	d1f9      	bne.n	800b4a6 <memcpy+0xe>
 800b4b2:	bd10      	pop	{r4, pc}

0800b4b4 <memset>:
 800b4b4:	4402      	add	r2, r0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d100      	bne.n	800b4be <memset+0xa>
 800b4bc:	4770      	bx	lr
 800b4be:	f803 1b01 	strb.w	r1, [r3], #1
 800b4c2:	e7f9      	b.n	800b4b8 <memset+0x4>

0800b4c4 <__cvt>:
 800b4c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4c8:	ec55 4b10 	vmov	r4, r5, d0
 800b4cc:	2d00      	cmp	r5, #0
 800b4ce:	460e      	mov	r6, r1
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	462b      	mov	r3, r5
 800b4d4:	bfbb      	ittet	lt
 800b4d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b4da:	461d      	movlt	r5, r3
 800b4dc:	2300      	movge	r3, #0
 800b4de:	232d      	movlt	r3, #45	; 0x2d
 800b4e0:	700b      	strb	r3, [r1, #0]
 800b4e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b4e8:	4691      	mov	r9, r2
 800b4ea:	f023 0820 	bic.w	r8, r3, #32
 800b4ee:	bfbc      	itt	lt
 800b4f0:	4622      	movlt	r2, r4
 800b4f2:	4614      	movlt	r4, r2
 800b4f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b4f8:	d005      	beq.n	800b506 <__cvt+0x42>
 800b4fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b4fe:	d100      	bne.n	800b502 <__cvt+0x3e>
 800b500:	3601      	adds	r6, #1
 800b502:	2102      	movs	r1, #2
 800b504:	e000      	b.n	800b508 <__cvt+0x44>
 800b506:	2103      	movs	r1, #3
 800b508:	ab03      	add	r3, sp, #12
 800b50a:	9301      	str	r3, [sp, #4]
 800b50c:	ab02      	add	r3, sp, #8
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	ec45 4b10 	vmov	d0, r4, r5
 800b514:	4653      	mov	r3, sl
 800b516:	4632      	mov	r2, r6
 800b518:	f001 fbf6 	bl	800cd08 <_dtoa_r>
 800b51c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b520:	4607      	mov	r7, r0
 800b522:	d102      	bne.n	800b52a <__cvt+0x66>
 800b524:	f019 0f01 	tst.w	r9, #1
 800b528:	d022      	beq.n	800b570 <__cvt+0xac>
 800b52a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b52e:	eb07 0906 	add.w	r9, r7, r6
 800b532:	d110      	bne.n	800b556 <__cvt+0x92>
 800b534:	783b      	ldrb	r3, [r7, #0]
 800b536:	2b30      	cmp	r3, #48	; 0x30
 800b538:	d10a      	bne.n	800b550 <__cvt+0x8c>
 800b53a:	2200      	movs	r2, #0
 800b53c:	2300      	movs	r3, #0
 800b53e:	4620      	mov	r0, r4
 800b540:	4629      	mov	r1, r5
 800b542:	f7f5 fac9 	bl	8000ad8 <__aeabi_dcmpeq>
 800b546:	b918      	cbnz	r0, 800b550 <__cvt+0x8c>
 800b548:	f1c6 0601 	rsb	r6, r6, #1
 800b54c:	f8ca 6000 	str.w	r6, [sl]
 800b550:	f8da 3000 	ldr.w	r3, [sl]
 800b554:	4499      	add	r9, r3
 800b556:	2200      	movs	r2, #0
 800b558:	2300      	movs	r3, #0
 800b55a:	4620      	mov	r0, r4
 800b55c:	4629      	mov	r1, r5
 800b55e:	f7f5 fabb 	bl	8000ad8 <__aeabi_dcmpeq>
 800b562:	b108      	cbz	r0, 800b568 <__cvt+0xa4>
 800b564:	f8cd 900c 	str.w	r9, [sp, #12]
 800b568:	2230      	movs	r2, #48	; 0x30
 800b56a:	9b03      	ldr	r3, [sp, #12]
 800b56c:	454b      	cmp	r3, r9
 800b56e:	d307      	bcc.n	800b580 <__cvt+0xbc>
 800b570:	9b03      	ldr	r3, [sp, #12]
 800b572:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b574:	1bdb      	subs	r3, r3, r7
 800b576:	4638      	mov	r0, r7
 800b578:	6013      	str	r3, [r2, #0]
 800b57a:	b004      	add	sp, #16
 800b57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b580:	1c59      	adds	r1, r3, #1
 800b582:	9103      	str	r1, [sp, #12]
 800b584:	701a      	strb	r2, [r3, #0]
 800b586:	e7f0      	b.n	800b56a <__cvt+0xa6>

0800b588 <__exponent>:
 800b588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b58a:	4603      	mov	r3, r0
 800b58c:	2900      	cmp	r1, #0
 800b58e:	bfb8      	it	lt
 800b590:	4249      	neglt	r1, r1
 800b592:	f803 2b02 	strb.w	r2, [r3], #2
 800b596:	bfb4      	ite	lt
 800b598:	222d      	movlt	r2, #45	; 0x2d
 800b59a:	222b      	movge	r2, #43	; 0x2b
 800b59c:	2909      	cmp	r1, #9
 800b59e:	7042      	strb	r2, [r0, #1]
 800b5a0:	dd2a      	ble.n	800b5f8 <__exponent+0x70>
 800b5a2:	f10d 0407 	add.w	r4, sp, #7
 800b5a6:	46a4      	mov	ip, r4
 800b5a8:	270a      	movs	r7, #10
 800b5aa:	46a6      	mov	lr, r4
 800b5ac:	460a      	mov	r2, r1
 800b5ae:	fb91 f6f7 	sdiv	r6, r1, r7
 800b5b2:	fb07 1516 	mls	r5, r7, r6, r1
 800b5b6:	3530      	adds	r5, #48	; 0x30
 800b5b8:	2a63      	cmp	r2, #99	; 0x63
 800b5ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800b5be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b5c2:	4631      	mov	r1, r6
 800b5c4:	dcf1      	bgt.n	800b5aa <__exponent+0x22>
 800b5c6:	3130      	adds	r1, #48	; 0x30
 800b5c8:	f1ae 0502 	sub.w	r5, lr, #2
 800b5cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b5d0:	1c44      	adds	r4, r0, #1
 800b5d2:	4629      	mov	r1, r5
 800b5d4:	4561      	cmp	r1, ip
 800b5d6:	d30a      	bcc.n	800b5ee <__exponent+0x66>
 800b5d8:	f10d 0209 	add.w	r2, sp, #9
 800b5dc:	eba2 020e 	sub.w	r2, r2, lr
 800b5e0:	4565      	cmp	r5, ip
 800b5e2:	bf88      	it	hi
 800b5e4:	2200      	movhi	r2, #0
 800b5e6:	4413      	add	r3, r2
 800b5e8:	1a18      	subs	r0, r3, r0
 800b5ea:	b003      	add	sp, #12
 800b5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b5f6:	e7ed      	b.n	800b5d4 <__exponent+0x4c>
 800b5f8:	2330      	movs	r3, #48	; 0x30
 800b5fa:	3130      	adds	r1, #48	; 0x30
 800b5fc:	7083      	strb	r3, [r0, #2]
 800b5fe:	70c1      	strb	r1, [r0, #3]
 800b600:	1d03      	adds	r3, r0, #4
 800b602:	e7f1      	b.n	800b5e8 <__exponent+0x60>

0800b604 <_printf_float>:
 800b604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b608:	ed2d 8b02 	vpush	{d8}
 800b60c:	b08d      	sub	sp, #52	; 0x34
 800b60e:	460c      	mov	r4, r1
 800b610:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b614:	4616      	mov	r6, r2
 800b616:	461f      	mov	r7, r3
 800b618:	4605      	mov	r5, r0
 800b61a:	f002 fce3 	bl	800dfe4 <_localeconv_r>
 800b61e:	f8d0 a000 	ldr.w	sl, [r0]
 800b622:	4650      	mov	r0, sl
 800b624:	f7f4 fddc 	bl	80001e0 <strlen>
 800b628:	2300      	movs	r3, #0
 800b62a:	930a      	str	r3, [sp, #40]	; 0x28
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	9305      	str	r3, [sp, #20]
 800b630:	f8d8 3000 	ldr.w	r3, [r8]
 800b634:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b638:	3307      	adds	r3, #7
 800b63a:	f023 0307 	bic.w	r3, r3, #7
 800b63e:	f103 0208 	add.w	r2, r3, #8
 800b642:	f8c8 2000 	str.w	r2, [r8]
 800b646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b64e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b652:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b656:	9307      	str	r3, [sp, #28]
 800b658:	f8cd 8018 	str.w	r8, [sp, #24]
 800b65c:	ee08 0a10 	vmov	s16, r0
 800b660:	4b9f      	ldr	r3, [pc, #636]	; (800b8e0 <_printf_float+0x2dc>)
 800b662:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b666:	f04f 32ff 	mov.w	r2, #4294967295
 800b66a:	f7f5 fa67 	bl	8000b3c <__aeabi_dcmpun>
 800b66e:	bb88      	cbnz	r0, 800b6d4 <_printf_float+0xd0>
 800b670:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b674:	4b9a      	ldr	r3, [pc, #616]	; (800b8e0 <_printf_float+0x2dc>)
 800b676:	f04f 32ff 	mov.w	r2, #4294967295
 800b67a:	f7f5 fa41 	bl	8000b00 <__aeabi_dcmple>
 800b67e:	bb48      	cbnz	r0, 800b6d4 <_printf_float+0xd0>
 800b680:	2200      	movs	r2, #0
 800b682:	2300      	movs	r3, #0
 800b684:	4640      	mov	r0, r8
 800b686:	4649      	mov	r1, r9
 800b688:	f7f5 fa30 	bl	8000aec <__aeabi_dcmplt>
 800b68c:	b110      	cbz	r0, 800b694 <_printf_float+0x90>
 800b68e:	232d      	movs	r3, #45	; 0x2d
 800b690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b694:	4b93      	ldr	r3, [pc, #588]	; (800b8e4 <_printf_float+0x2e0>)
 800b696:	4894      	ldr	r0, [pc, #592]	; (800b8e8 <_printf_float+0x2e4>)
 800b698:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b69c:	bf94      	ite	ls
 800b69e:	4698      	movls	r8, r3
 800b6a0:	4680      	movhi	r8, r0
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	6123      	str	r3, [r4, #16]
 800b6a6:	9b05      	ldr	r3, [sp, #20]
 800b6a8:	f023 0204 	bic.w	r2, r3, #4
 800b6ac:	6022      	str	r2, [r4, #0]
 800b6ae:	f04f 0900 	mov.w	r9, #0
 800b6b2:	9700      	str	r7, [sp, #0]
 800b6b4:	4633      	mov	r3, r6
 800b6b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f000 f9d8 	bl	800ba70 <_printf_common>
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	f040 8090 	bne.w	800b7e6 <_printf_float+0x1e2>
 800b6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ca:	b00d      	add	sp, #52	; 0x34
 800b6cc:	ecbd 8b02 	vpop	{d8}
 800b6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d4:	4642      	mov	r2, r8
 800b6d6:	464b      	mov	r3, r9
 800b6d8:	4640      	mov	r0, r8
 800b6da:	4649      	mov	r1, r9
 800b6dc:	f7f5 fa2e 	bl	8000b3c <__aeabi_dcmpun>
 800b6e0:	b140      	cbz	r0, 800b6f4 <_printf_float+0xf0>
 800b6e2:	464b      	mov	r3, r9
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	bfbc      	itt	lt
 800b6e8:	232d      	movlt	r3, #45	; 0x2d
 800b6ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b6ee:	487f      	ldr	r0, [pc, #508]	; (800b8ec <_printf_float+0x2e8>)
 800b6f0:	4b7f      	ldr	r3, [pc, #508]	; (800b8f0 <_printf_float+0x2ec>)
 800b6f2:	e7d1      	b.n	800b698 <_printf_float+0x94>
 800b6f4:	6863      	ldr	r3, [r4, #4]
 800b6f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b6fa:	9206      	str	r2, [sp, #24]
 800b6fc:	1c5a      	adds	r2, r3, #1
 800b6fe:	d13f      	bne.n	800b780 <_printf_float+0x17c>
 800b700:	2306      	movs	r3, #6
 800b702:	6063      	str	r3, [r4, #4]
 800b704:	9b05      	ldr	r3, [sp, #20]
 800b706:	6861      	ldr	r1, [r4, #4]
 800b708:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b70c:	2300      	movs	r3, #0
 800b70e:	9303      	str	r3, [sp, #12]
 800b710:	ab0a      	add	r3, sp, #40	; 0x28
 800b712:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b716:	ab09      	add	r3, sp, #36	; 0x24
 800b718:	ec49 8b10 	vmov	d0, r8, r9
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	6022      	str	r2, [r4, #0]
 800b720:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b724:	4628      	mov	r0, r5
 800b726:	f7ff fecd 	bl	800b4c4 <__cvt>
 800b72a:	9b06      	ldr	r3, [sp, #24]
 800b72c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b72e:	2b47      	cmp	r3, #71	; 0x47
 800b730:	4680      	mov	r8, r0
 800b732:	d108      	bne.n	800b746 <_printf_float+0x142>
 800b734:	1cc8      	adds	r0, r1, #3
 800b736:	db02      	blt.n	800b73e <_printf_float+0x13a>
 800b738:	6863      	ldr	r3, [r4, #4]
 800b73a:	4299      	cmp	r1, r3
 800b73c:	dd41      	ble.n	800b7c2 <_printf_float+0x1be>
 800b73e:	f1ab 0b02 	sub.w	fp, fp, #2
 800b742:	fa5f fb8b 	uxtb.w	fp, fp
 800b746:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b74a:	d820      	bhi.n	800b78e <_printf_float+0x18a>
 800b74c:	3901      	subs	r1, #1
 800b74e:	465a      	mov	r2, fp
 800b750:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b754:	9109      	str	r1, [sp, #36]	; 0x24
 800b756:	f7ff ff17 	bl	800b588 <__exponent>
 800b75a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b75c:	1813      	adds	r3, r2, r0
 800b75e:	2a01      	cmp	r2, #1
 800b760:	4681      	mov	r9, r0
 800b762:	6123      	str	r3, [r4, #16]
 800b764:	dc02      	bgt.n	800b76c <_printf_float+0x168>
 800b766:	6822      	ldr	r2, [r4, #0]
 800b768:	07d2      	lsls	r2, r2, #31
 800b76a:	d501      	bpl.n	800b770 <_printf_float+0x16c>
 800b76c:	3301      	adds	r3, #1
 800b76e:	6123      	str	r3, [r4, #16]
 800b770:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b774:	2b00      	cmp	r3, #0
 800b776:	d09c      	beq.n	800b6b2 <_printf_float+0xae>
 800b778:	232d      	movs	r3, #45	; 0x2d
 800b77a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b77e:	e798      	b.n	800b6b2 <_printf_float+0xae>
 800b780:	9a06      	ldr	r2, [sp, #24]
 800b782:	2a47      	cmp	r2, #71	; 0x47
 800b784:	d1be      	bne.n	800b704 <_printf_float+0x100>
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1bc      	bne.n	800b704 <_printf_float+0x100>
 800b78a:	2301      	movs	r3, #1
 800b78c:	e7b9      	b.n	800b702 <_printf_float+0xfe>
 800b78e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b792:	d118      	bne.n	800b7c6 <_printf_float+0x1c2>
 800b794:	2900      	cmp	r1, #0
 800b796:	6863      	ldr	r3, [r4, #4]
 800b798:	dd0b      	ble.n	800b7b2 <_printf_float+0x1ae>
 800b79a:	6121      	str	r1, [r4, #16]
 800b79c:	b913      	cbnz	r3, 800b7a4 <_printf_float+0x1a0>
 800b79e:	6822      	ldr	r2, [r4, #0]
 800b7a0:	07d0      	lsls	r0, r2, #31
 800b7a2:	d502      	bpl.n	800b7aa <_printf_float+0x1a6>
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	440b      	add	r3, r1
 800b7a8:	6123      	str	r3, [r4, #16]
 800b7aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800b7ac:	f04f 0900 	mov.w	r9, #0
 800b7b0:	e7de      	b.n	800b770 <_printf_float+0x16c>
 800b7b2:	b913      	cbnz	r3, 800b7ba <_printf_float+0x1b6>
 800b7b4:	6822      	ldr	r2, [r4, #0]
 800b7b6:	07d2      	lsls	r2, r2, #31
 800b7b8:	d501      	bpl.n	800b7be <_printf_float+0x1ba>
 800b7ba:	3302      	adds	r3, #2
 800b7bc:	e7f4      	b.n	800b7a8 <_printf_float+0x1a4>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e7f2      	b.n	800b7a8 <_printf_float+0x1a4>
 800b7c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b7c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7c8:	4299      	cmp	r1, r3
 800b7ca:	db05      	blt.n	800b7d8 <_printf_float+0x1d4>
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	6121      	str	r1, [r4, #16]
 800b7d0:	07d8      	lsls	r0, r3, #31
 800b7d2:	d5ea      	bpl.n	800b7aa <_printf_float+0x1a6>
 800b7d4:	1c4b      	adds	r3, r1, #1
 800b7d6:	e7e7      	b.n	800b7a8 <_printf_float+0x1a4>
 800b7d8:	2900      	cmp	r1, #0
 800b7da:	bfd4      	ite	le
 800b7dc:	f1c1 0202 	rsble	r2, r1, #2
 800b7e0:	2201      	movgt	r2, #1
 800b7e2:	4413      	add	r3, r2
 800b7e4:	e7e0      	b.n	800b7a8 <_printf_float+0x1a4>
 800b7e6:	6823      	ldr	r3, [r4, #0]
 800b7e8:	055a      	lsls	r2, r3, #21
 800b7ea:	d407      	bmi.n	800b7fc <_printf_float+0x1f8>
 800b7ec:	6923      	ldr	r3, [r4, #16]
 800b7ee:	4642      	mov	r2, r8
 800b7f0:	4631      	mov	r1, r6
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	47b8      	blx	r7
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	d12c      	bne.n	800b854 <_printf_float+0x250>
 800b7fa:	e764      	b.n	800b6c6 <_printf_float+0xc2>
 800b7fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b800:	f240 80e0 	bls.w	800b9c4 <_printf_float+0x3c0>
 800b804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b808:	2200      	movs	r2, #0
 800b80a:	2300      	movs	r3, #0
 800b80c:	f7f5 f964 	bl	8000ad8 <__aeabi_dcmpeq>
 800b810:	2800      	cmp	r0, #0
 800b812:	d034      	beq.n	800b87e <_printf_float+0x27a>
 800b814:	4a37      	ldr	r2, [pc, #220]	; (800b8f4 <_printf_float+0x2f0>)
 800b816:	2301      	movs	r3, #1
 800b818:	4631      	mov	r1, r6
 800b81a:	4628      	mov	r0, r5
 800b81c:	47b8      	blx	r7
 800b81e:	3001      	adds	r0, #1
 800b820:	f43f af51 	beq.w	800b6c6 <_printf_float+0xc2>
 800b824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b828:	429a      	cmp	r2, r3
 800b82a:	db02      	blt.n	800b832 <_printf_float+0x22e>
 800b82c:	6823      	ldr	r3, [r4, #0]
 800b82e:	07d8      	lsls	r0, r3, #31
 800b830:	d510      	bpl.n	800b854 <_printf_float+0x250>
 800b832:	ee18 3a10 	vmov	r3, s16
 800b836:	4652      	mov	r2, sl
 800b838:	4631      	mov	r1, r6
 800b83a:	4628      	mov	r0, r5
 800b83c:	47b8      	blx	r7
 800b83e:	3001      	adds	r0, #1
 800b840:	f43f af41 	beq.w	800b6c6 <_printf_float+0xc2>
 800b844:	f04f 0800 	mov.w	r8, #0
 800b848:	f104 091a 	add.w	r9, r4, #26
 800b84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b84e:	3b01      	subs	r3, #1
 800b850:	4543      	cmp	r3, r8
 800b852:	dc09      	bgt.n	800b868 <_printf_float+0x264>
 800b854:	6823      	ldr	r3, [r4, #0]
 800b856:	079b      	lsls	r3, r3, #30
 800b858:	f100 8105 	bmi.w	800ba66 <_printf_float+0x462>
 800b85c:	68e0      	ldr	r0, [r4, #12]
 800b85e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b860:	4298      	cmp	r0, r3
 800b862:	bfb8      	it	lt
 800b864:	4618      	movlt	r0, r3
 800b866:	e730      	b.n	800b6ca <_printf_float+0xc6>
 800b868:	2301      	movs	r3, #1
 800b86a:	464a      	mov	r2, r9
 800b86c:	4631      	mov	r1, r6
 800b86e:	4628      	mov	r0, r5
 800b870:	47b8      	blx	r7
 800b872:	3001      	adds	r0, #1
 800b874:	f43f af27 	beq.w	800b6c6 <_printf_float+0xc2>
 800b878:	f108 0801 	add.w	r8, r8, #1
 800b87c:	e7e6      	b.n	800b84c <_printf_float+0x248>
 800b87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b880:	2b00      	cmp	r3, #0
 800b882:	dc39      	bgt.n	800b8f8 <_printf_float+0x2f4>
 800b884:	4a1b      	ldr	r2, [pc, #108]	; (800b8f4 <_printf_float+0x2f0>)
 800b886:	2301      	movs	r3, #1
 800b888:	4631      	mov	r1, r6
 800b88a:	4628      	mov	r0, r5
 800b88c:	47b8      	blx	r7
 800b88e:	3001      	adds	r0, #1
 800b890:	f43f af19 	beq.w	800b6c6 <_printf_float+0xc2>
 800b894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b898:	4313      	orrs	r3, r2
 800b89a:	d102      	bne.n	800b8a2 <_printf_float+0x29e>
 800b89c:	6823      	ldr	r3, [r4, #0]
 800b89e:	07d9      	lsls	r1, r3, #31
 800b8a0:	d5d8      	bpl.n	800b854 <_printf_float+0x250>
 800b8a2:	ee18 3a10 	vmov	r3, s16
 800b8a6:	4652      	mov	r2, sl
 800b8a8:	4631      	mov	r1, r6
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	47b8      	blx	r7
 800b8ae:	3001      	adds	r0, #1
 800b8b0:	f43f af09 	beq.w	800b6c6 <_printf_float+0xc2>
 800b8b4:	f04f 0900 	mov.w	r9, #0
 800b8b8:	f104 0a1a 	add.w	sl, r4, #26
 800b8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8be:	425b      	negs	r3, r3
 800b8c0:	454b      	cmp	r3, r9
 800b8c2:	dc01      	bgt.n	800b8c8 <_printf_float+0x2c4>
 800b8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8c6:	e792      	b.n	800b7ee <_printf_float+0x1ea>
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	4652      	mov	r2, sl
 800b8cc:	4631      	mov	r1, r6
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	47b8      	blx	r7
 800b8d2:	3001      	adds	r0, #1
 800b8d4:	f43f aef7 	beq.w	800b6c6 <_printf_float+0xc2>
 800b8d8:	f109 0901 	add.w	r9, r9, #1
 800b8dc:	e7ee      	b.n	800b8bc <_printf_float+0x2b8>
 800b8de:	bf00      	nop
 800b8e0:	7fefffff 	.word	0x7fefffff
 800b8e4:	0800fe84 	.word	0x0800fe84
 800b8e8:	0800fe88 	.word	0x0800fe88
 800b8ec:	0800fe90 	.word	0x0800fe90
 800b8f0:	0800fe8c 	.word	0x0800fe8c
 800b8f4:	0800fe94 	.word	0x0800fe94
 800b8f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	bfa8      	it	ge
 800b900:	461a      	movge	r2, r3
 800b902:	2a00      	cmp	r2, #0
 800b904:	4691      	mov	r9, r2
 800b906:	dc37      	bgt.n	800b978 <_printf_float+0x374>
 800b908:	f04f 0b00 	mov.w	fp, #0
 800b90c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b910:	f104 021a 	add.w	r2, r4, #26
 800b914:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b916:	9305      	str	r3, [sp, #20]
 800b918:	eba3 0309 	sub.w	r3, r3, r9
 800b91c:	455b      	cmp	r3, fp
 800b91e:	dc33      	bgt.n	800b988 <_printf_float+0x384>
 800b920:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b924:	429a      	cmp	r2, r3
 800b926:	db3b      	blt.n	800b9a0 <_printf_float+0x39c>
 800b928:	6823      	ldr	r3, [r4, #0]
 800b92a:	07da      	lsls	r2, r3, #31
 800b92c:	d438      	bmi.n	800b9a0 <_printf_float+0x39c>
 800b92e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b930:	9b05      	ldr	r3, [sp, #20]
 800b932:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	eba2 0901 	sub.w	r9, r2, r1
 800b93a:	4599      	cmp	r9, r3
 800b93c:	bfa8      	it	ge
 800b93e:	4699      	movge	r9, r3
 800b940:	f1b9 0f00 	cmp.w	r9, #0
 800b944:	dc35      	bgt.n	800b9b2 <_printf_float+0x3ae>
 800b946:	f04f 0800 	mov.w	r8, #0
 800b94a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b94e:	f104 0a1a 	add.w	sl, r4, #26
 800b952:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b956:	1a9b      	subs	r3, r3, r2
 800b958:	eba3 0309 	sub.w	r3, r3, r9
 800b95c:	4543      	cmp	r3, r8
 800b95e:	f77f af79 	ble.w	800b854 <_printf_float+0x250>
 800b962:	2301      	movs	r3, #1
 800b964:	4652      	mov	r2, sl
 800b966:	4631      	mov	r1, r6
 800b968:	4628      	mov	r0, r5
 800b96a:	47b8      	blx	r7
 800b96c:	3001      	adds	r0, #1
 800b96e:	f43f aeaa 	beq.w	800b6c6 <_printf_float+0xc2>
 800b972:	f108 0801 	add.w	r8, r8, #1
 800b976:	e7ec      	b.n	800b952 <_printf_float+0x34e>
 800b978:	4613      	mov	r3, r2
 800b97a:	4631      	mov	r1, r6
 800b97c:	4642      	mov	r2, r8
 800b97e:	4628      	mov	r0, r5
 800b980:	47b8      	blx	r7
 800b982:	3001      	adds	r0, #1
 800b984:	d1c0      	bne.n	800b908 <_printf_float+0x304>
 800b986:	e69e      	b.n	800b6c6 <_printf_float+0xc2>
 800b988:	2301      	movs	r3, #1
 800b98a:	4631      	mov	r1, r6
 800b98c:	4628      	mov	r0, r5
 800b98e:	9205      	str	r2, [sp, #20]
 800b990:	47b8      	blx	r7
 800b992:	3001      	adds	r0, #1
 800b994:	f43f ae97 	beq.w	800b6c6 <_printf_float+0xc2>
 800b998:	9a05      	ldr	r2, [sp, #20]
 800b99a:	f10b 0b01 	add.w	fp, fp, #1
 800b99e:	e7b9      	b.n	800b914 <_printf_float+0x310>
 800b9a0:	ee18 3a10 	vmov	r3, s16
 800b9a4:	4652      	mov	r2, sl
 800b9a6:	4631      	mov	r1, r6
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	47b8      	blx	r7
 800b9ac:	3001      	adds	r0, #1
 800b9ae:	d1be      	bne.n	800b92e <_printf_float+0x32a>
 800b9b0:	e689      	b.n	800b6c6 <_printf_float+0xc2>
 800b9b2:	9a05      	ldr	r2, [sp, #20]
 800b9b4:	464b      	mov	r3, r9
 800b9b6:	4442      	add	r2, r8
 800b9b8:	4631      	mov	r1, r6
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	47b8      	blx	r7
 800b9be:	3001      	adds	r0, #1
 800b9c0:	d1c1      	bne.n	800b946 <_printf_float+0x342>
 800b9c2:	e680      	b.n	800b6c6 <_printf_float+0xc2>
 800b9c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9c6:	2a01      	cmp	r2, #1
 800b9c8:	dc01      	bgt.n	800b9ce <_printf_float+0x3ca>
 800b9ca:	07db      	lsls	r3, r3, #31
 800b9cc:	d538      	bpl.n	800ba40 <_printf_float+0x43c>
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	4642      	mov	r2, r8
 800b9d2:	4631      	mov	r1, r6
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	47b8      	blx	r7
 800b9d8:	3001      	adds	r0, #1
 800b9da:	f43f ae74 	beq.w	800b6c6 <_printf_float+0xc2>
 800b9de:	ee18 3a10 	vmov	r3, s16
 800b9e2:	4652      	mov	r2, sl
 800b9e4:	4631      	mov	r1, r6
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	47b8      	blx	r7
 800b9ea:	3001      	adds	r0, #1
 800b9ec:	f43f ae6b 	beq.w	800b6c6 <_printf_float+0xc2>
 800b9f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f7f5 f86e 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9fc:	b9d8      	cbnz	r0, 800ba36 <_printf_float+0x432>
 800b9fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba00:	f108 0201 	add.w	r2, r8, #1
 800ba04:	3b01      	subs	r3, #1
 800ba06:	4631      	mov	r1, r6
 800ba08:	4628      	mov	r0, r5
 800ba0a:	47b8      	blx	r7
 800ba0c:	3001      	adds	r0, #1
 800ba0e:	d10e      	bne.n	800ba2e <_printf_float+0x42a>
 800ba10:	e659      	b.n	800b6c6 <_printf_float+0xc2>
 800ba12:	2301      	movs	r3, #1
 800ba14:	4652      	mov	r2, sl
 800ba16:	4631      	mov	r1, r6
 800ba18:	4628      	mov	r0, r5
 800ba1a:	47b8      	blx	r7
 800ba1c:	3001      	adds	r0, #1
 800ba1e:	f43f ae52 	beq.w	800b6c6 <_printf_float+0xc2>
 800ba22:	f108 0801 	add.w	r8, r8, #1
 800ba26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	4543      	cmp	r3, r8
 800ba2c:	dcf1      	bgt.n	800ba12 <_printf_float+0x40e>
 800ba2e:	464b      	mov	r3, r9
 800ba30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ba34:	e6dc      	b.n	800b7f0 <_printf_float+0x1ec>
 800ba36:	f04f 0800 	mov.w	r8, #0
 800ba3a:	f104 0a1a 	add.w	sl, r4, #26
 800ba3e:	e7f2      	b.n	800ba26 <_printf_float+0x422>
 800ba40:	2301      	movs	r3, #1
 800ba42:	4642      	mov	r2, r8
 800ba44:	e7df      	b.n	800ba06 <_printf_float+0x402>
 800ba46:	2301      	movs	r3, #1
 800ba48:	464a      	mov	r2, r9
 800ba4a:	4631      	mov	r1, r6
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	47b8      	blx	r7
 800ba50:	3001      	adds	r0, #1
 800ba52:	f43f ae38 	beq.w	800b6c6 <_printf_float+0xc2>
 800ba56:	f108 0801 	add.w	r8, r8, #1
 800ba5a:	68e3      	ldr	r3, [r4, #12]
 800ba5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba5e:	1a5b      	subs	r3, r3, r1
 800ba60:	4543      	cmp	r3, r8
 800ba62:	dcf0      	bgt.n	800ba46 <_printf_float+0x442>
 800ba64:	e6fa      	b.n	800b85c <_printf_float+0x258>
 800ba66:	f04f 0800 	mov.w	r8, #0
 800ba6a:	f104 0919 	add.w	r9, r4, #25
 800ba6e:	e7f4      	b.n	800ba5a <_printf_float+0x456>

0800ba70 <_printf_common>:
 800ba70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba74:	4616      	mov	r6, r2
 800ba76:	4699      	mov	r9, r3
 800ba78:	688a      	ldr	r2, [r1, #8]
 800ba7a:	690b      	ldr	r3, [r1, #16]
 800ba7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba80:	4293      	cmp	r3, r2
 800ba82:	bfb8      	it	lt
 800ba84:	4613      	movlt	r3, r2
 800ba86:	6033      	str	r3, [r6, #0]
 800ba88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba8c:	4607      	mov	r7, r0
 800ba8e:	460c      	mov	r4, r1
 800ba90:	b10a      	cbz	r2, 800ba96 <_printf_common+0x26>
 800ba92:	3301      	adds	r3, #1
 800ba94:	6033      	str	r3, [r6, #0]
 800ba96:	6823      	ldr	r3, [r4, #0]
 800ba98:	0699      	lsls	r1, r3, #26
 800ba9a:	bf42      	ittt	mi
 800ba9c:	6833      	ldrmi	r3, [r6, #0]
 800ba9e:	3302      	addmi	r3, #2
 800baa0:	6033      	strmi	r3, [r6, #0]
 800baa2:	6825      	ldr	r5, [r4, #0]
 800baa4:	f015 0506 	ands.w	r5, r5, #6
 800baa8:	d106      	bne.n	800bab8 <_printf_common+0x48>
 800baaa:	f104 0a19 	add.w	sl, r4, #25
 800baae:	68e3      	ldr	r3, [r4, #12]
 800bab0:	6832      	ldr	r2, [r6, #0]
 800bab2:	1a9b      	subs	r3, r3, r2
 800bab4:	42ab      	cmp	r3, r5
 800bab6:	dc26      	bgt.n	800bb06 <_printf_common+0x96>
 800bab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800babc:	1e13      	subs	r3, r2, #0
 800babe:	6822      	ldr	r2, [r4, #0]
 800bac0:	bf18      	it	ne
 800bac2:	2301      	movne	r3, #1
 800bac4:	0692      	lsls	r2, r2, #26
 800bac6:	d42b      	bmi.n	800bb20 <_printf_common+0xb0>
 800bac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bacc:	4649      	mov	r1, r9
 800bace:	4638      	mov	r0, r7
 800bad0:	47c0      	blx	r8
 800bad2:	3001      	adds	r0, #1
 800bad4:	d01e      	beq.n	800bb14 <_printf_common+0xa4>
 800bad6:	6823      	ldr	r3, [r4, #0]
 800bad8:	68e5      	ldr	r5, [r4, #12]
 800bada:	6832      	ldr	r2, [r6, #0]
 800badc:	f003 0306 	and.w	r3, r3, #6
 800bae0:	2b04      	cmp	r3, #4
 800bae2:	bf08      	it	eq
 800bae4:	1aad      	subeq	r5, r5, r2
 800bae6:	68a3      	ldr	r3, [r4, #8]
 800bae8:	6922      	ldr	r2, [r4, #16]
 800baea:	bf0c      	ite	eq
 800baec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800baf0:	2500      	movne	r5, #0
 800baf2:	4293      	cmp	r3, r2
 800baf4:	bfc4      	itt	gt
 800baf6:	1a9b      	subgt	r3, r3, r2
 800baf8:	18ed      	addgt	r5, r5, r3
 800bafa:	2600      	movs	r6, #0
 800bafc:	341a      	adds	r4, #26
 800bafe:	42b5      	cmp	r5, r6
 800bb00:	d11a      	bne.n	800bb38 <_printf_common+0xc8>
 800bb02:	2000      	movs	r0, #0
 800bb04:	e008      	b.n	800bb18 <_printf_common+0xa8>
 800bb06:	2301      	movs	r3, #1
 800bb08:	4652      	mov	r2, sl
 800bb0a:	4649      	mov	r1, r9
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	47c0      	blx	r8
 800bb10:	3001      	adds	r0, #1
 800bb12:	d103      	bne.n	800bb1c <_printf_common+0xac>
 800bb14:	f04f 30ff 	mov.w	r0, #4294967295
 800bb18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb1c:	3501      	adds	r5, #1
 800bb1e:	e7c6      	b.n	800baae <_printf_common+0x3e>
 800bb20:	18e1      	adds	r1, r4, r3
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	2030      	movs	r0, #48	; 0x30
 800bb26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb2a:	4422      	add	r2, r4
 800bb2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb34:	3302      	adds	r3, #2
 800bb36:	e7c7      	b.n	800bac8 <_printf_common+0x58>
 800bb38:	2301      	movs	r3, #1
 800bb3a:	4622      	mov	r2, r4
 800bb3c:	4649      	mov	r1, r9
 800bb3e:	4638      	mov	r0, r7
 800bb40:	47c0      	blx	r8
 800bb42:	3001      	adds	r0, #1
 800bb44:	d0e6      	beq.n	800bb14 <_printf_common+0xa4>
 800bb46:	3601      	adds	r6, #1
 800bb48:	e7d9      	b.n	800bafe <_printf_common+0x8e>
	...

0800bb4c <_printf_i>:
 800bb4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb50:	460c      	mov	r4, r1
 800bb52:	4691      	mov	r9, r2
 800bb54:	7e27      	ldrb	r7, [r4, #24]
 800bb56:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bb58:	2f78      	cmp	r7, #120	; 0x78
 800bb5a:	4680      	mov	r8, r0
 800bb5c:	469a      	mov	sl, r3
 800bb5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb62:	d807      	bhi.n	800bb74 <_printf_i+0x28>
 800bb64:	2f62      	cmp	r7, #98	; 0x62
 800bb66:	d80a      	bhi.n	800bb7e <_printf_i+0x32>
 800bb68:	2f00      	cmp	r7, #0
 800bb6a:	f000 80d8 	beq.w	800bd1e <_printf_i+0x1d2>
 800bb6e:	2f58      	cmp	r7, #88	; 0x58
 800bb70:	f000 80a3 	beq.w	800bcba <_printf_i+0x16e>
 800bb74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb7c:	e03a      	b.n	800bbf4 <_printf_i+0xa8>
 800bb7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb82:	2b15      	cmp	r3, #21
 800bb84:	d8f6      	bhi.n	800bb74 <_printf_i+0x28>
 800bb86:	a001      	add	r0, pc, #4	; (adr r0, 800bb8c <_printf_i+0x40>)
 800bb88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bb8c:	0800bbe5 	.word	0x0800bbe5
 800bb90:	0800bbf9 	.word	0x0800bbf9
 800bb94:	0800bb75 	.word	0x0800bb75
 800bb98:	0800bb75 	.word	0x0800bb75
 800bb9c:	0800bb75 	.word	0x0800bb75
 800bba0:	0800bb75 	.word	0x0800bb75
 800bba4:	0800bbf9 	.word	0x0800bbf9
 800bba8:	0800bb75 	.word	0x0800bb75
 800bbac:	0800bb75 	.word	0x0800bb75
 800bbb0:	0800bb75 	.word	0x0800bb75
 800bbb4:	0800bb75 	.word	0x0800bb75
 800bbb8:	0800bd05 	.word	0x0800bd05
 800bbbc:	0800bc29 	.word	0x0800bc29
 800bbc0:	0800bce7 	.word	0x0800bce7
 800bbc4:	0800bb75 	.word	0x0800bb75
 800bbc8:	0800bb75 	.word	0x0800bb75
 800bbcc:	0800bd27 	.word	0x0800bd27
 800bbd0:	0800bb75 	.word	0x0800bb75
 800bbd4:	0800bc29 	.word	0x0800bc29
 800bbd8:	0800bb75 	.word	0x0800bb75
 800bbdc:	0800bb75 	.word	0x0800bb75
 800bbe0:	0800bcef 	.word	0x0800bcef
 800bbe4:	680b      	ldr	r3, [r1, #0]
 800bbe6:	1d1a      	adds	r2, r3, #4
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	600a      	str	r2, [r1, #0]
 800bbec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bbf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e0a3      	b.n	800bd40 <_printf_i+0x1f4>
 800bbf8:	6825      	ldr	r5, [r4, #0]
 800bbfa:	6808      	ldr	r0, [r1, #0]
 800bbfc:	062e      	lsls	r6, r5, #24
 800bbfe:	f100 0304 	add.w	r3, r0, #4
 800bc02:	d50a      	bpl.n	800bc1a <_printf_i+0xce>
 800bc04:	6805      	ldr	r5, [r0, #0]
 800bc06:	600b      	str	r3, [r1, #0]
 800bc08:	2d00      	cmp	r5, #0
 800bc0a:	da03      	bge.n	800bc14 <_printf_i+0xc8>
 800bc0c:	232d      	movs	r3, #45	; 0x2d
 800bc0e:	426d      	negs	r5, r5
 800bc10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc14:	485e      	ldr	r0, [pc, #376]	; (800bd90 <_printf_i+0x244>)
 800bc16:	230a      	movs	r3, #10
 800bc18:	e019      	b.n	800bc4e <_printf_i+0x102>
 800bc1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bc1e:	6805      	ldr	r5, [r0, #0]
 800bc20:	600b      	str	r3, [r1, #0]
 800bc22:	bf18      	it	ne
 800bc24:	b22d      	sxthne	r5, r5
 800bc26:	e7ef      	b.n	800bc08 <_printf_i+0xbc>
 800bc28:	680b      	ldr	r3, [r1, #0]
 800bc2a:	6825      	ldr	r5, [r4, #0]
 800bc2c:	1d18      	adds	r0, r3, #4
 800bc2e:	6008      	str	r0, [r1, #0]
 800bc30:	0628      	lsls	r0, r5, #24
 800bc32:	d501      	bpl.n	800bc38 <_printf_i+0xec>
 800bc34:	681d      	ldr	r5, [r3, #0]
 800bc36:	e002      	b.n	800bc3e <_printf_i+0xf2>
 800bc38:	0669      	lsls	r1, r5, #25
 800bc3a:	d5fb      	bpl.n	800bc34 <_printf_i+0xe8>
 800bc3c:	881d      	ldrh	r5, [r3, #0]
 800bc3e:	4854      	ldr	r0, [pc, #336]	; (800bd90 <_printf_i+0x244>)
 800bc40:	2f6f      	cmp	r7, #111	; 0x6f
 800bc42:	bf0c      	ite	eq
 800bc44:	2308      	moveq	r3, #8
 800bc46:	230a      	movne	r3, #10
 800bc48:	2100      	movs	r1, #0
 800bc4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc4e:	6866      	ldr	r6, [r4, #4]
 800bc50:	60a6      	str	r6, [r4, #8]
 800bc52:	2e00      	cmp	r6, #0
 800bc54:	bfa2      	ittt	ge
 800bc56:	6821      	ldrge	r1, [r4, #0]
 800bc58:	f021 0104 	bicge.w	r1, r1, #4
 800bc5c:	6021      	strge	r1, [r4, #0]
 800bc5e:	b90d      	cbnz	r5, 800bc64 <_printf_i+0x118>
 800bc60:	2e00      	cmp	r6, #0
 800bc62:	d04d      	beq.n	800bd00 <_printf_i+0x1b4>
 800bc64:	4616      	mov	r6, r2
 800bc66:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc6a:	fb03 5711 	mls	r7, r3, r1, r5
 800bc6e:	5dc7      	ldrb	r7, [r0, r7]
 800bc70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc74:	462f      	mov	r7, r5
 800bc76:	42bb      	cmp	r3, r7
 800bc78:	460d      	mov	r5, r1
 800bc7a:	d9f4      	bls.n	800bc66 <_printf_i+0x11a>
 800bc7c:	2b08      	cmp	r3, #8
 800bc7e:	d10b      	bne.n	800bc98 <_printf_i+0x14c>
 800bc80:	6823      	ldr	r3, [r4, #0]
 800bc82:	07df      	lsls	r7, r3, #31
 800bc84:	d508      	bpl.n	800bc98 <_printf_i+0x14c>
 800bc86:	6923      	ldr	r3, [r4, #16]
 800bc88:	6861      	ldr	r1, [r4, #4]
 800bc8a:	4299      	cmp	r1, r3
 800bc8c:	bfde      	ittt	le
 800bc8e:	2330      	movle	r3, #48	; 0x30
 800bc90:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc94:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc98:	1b92      	subs	r2, r2, r6
 800bc9a:	6122      	str	r2, [r4, #16]
 800bc9c:	f8cd a000 	str.w	sl, [sp]
 800bca0:	464b      	mov	r3, r9
 800bca2:	aa03      	add	r2, sp, #12
 800bca4:	4621      	mov	r1, r4
 800bca6:	4640      	mov	r0, r8
 800bca8:	f7ff fee2 	bl	800ba70 <_printf_common>
 800bcac:	3001      	adds	r0, #1
 800bcae:	d14c      	bne.n	800bd4a <_printf_i+0x1fe>
 800bcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb4:	b004      	add	sp, #16
 800bcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcba:	4835      	ldr	r0, [pc, #212]	; (800bd90 <_printf_i+0x244>)
 800bcbc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	680e      	ldr	r6, [r1, #0]
 800bcc4:	061f      	lsls	r7, r3, #24
 800bcc6:	f856 5b04 	ldr.w	r5, [r6], #4
 800bcca:	600e      	str	r6, [r1, #0]
 800bccc:	d514      	bpl.n	800bcf8 <_printf_i+0x1ac>
 800bcce:	07d9      	lsls	r1, r3, #31
 800bcd0:	bf44      	itt	mi
 800bcd2:	f043 0320 	orrmi.w	r3, r3, #32
 800bcd6:	6023      	strmi	r3, [r4, #0]
 800bcd8:	b91d      	cbnz	r5, 800bce2 <_printf_i+0x196>
 800bcda:	6823      	ldr	r3, [r4, #0]
 800bcdc:	f023 0320 	bic.w	r3, r3, #32
 800bce0:	6023      	str	r3, [r4, #0]
 800bce2:	2310      	movs	r3, #16
 800bce4:	e7b0      	b.n	800bc48 <_printf_i+0xfc>
 800bce6:	6823      	ldr	r3, [r4, #0]
 800bce8:	f043 0320 	orr.w	r3, r3, #32
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	2378      	movs	r3, #120	; 0x78
 800bcf0:	4828      	ldr	r0, [pc, #160]	; (800bd94 <_printf_i+0x248>)
 800bcf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bcf6:	e7e3      	b.n	800bcc0 <_printf_i+0x174>
 800bcf8:	065e      	lsls	r6, r3, #25
 800bcfa:	bf48      	it	mi
 800bcfc:	b2ad      	uxthmi	r5, r5
 800bcfe:	e7e6      	b.n	800bcce <_printf_i+0x182>
 800bd00:	4616      	mov	r6, r2
 800bd02:	e7bb      	b.n	800bc7c <_printf_i+0x130>
 800bd04:	680b      	ldr	r3, [r1, #0]
 800bd06:	6826      	ldr	r6, [r4, #0]
 800bd08:	6960      	ldr	r0, [r4, #20]
 800bd0a:	1d1d      	adds	r5, r3, #4
 800bd0c:	600d      	str	r5, [r1, #0]
 800bd0e:	0635      	lsls	r5, r6, #24
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	d501      	bpl.n	800bd18 <_printf_i+0x1cc>
 800bd14:	6018      	str	r0, [r3, #0]
 800bd16:	e002      	b.n	800bd1e <_printf_i+0x1d2>
 800bd18:	0671      	lsls	r1, r6, #25
 800bd1a:	d5fb      	bpl.n	800bd14 <_printf_i+0x1c8>
 800bd1c:	8018      	strh	r0, [r3, #0]
 800bd1e:	2300      	movs	r3, #0
 800bd20:	6123      	str	r3, [r4, #16]
 800bd22:	4616      	mov	r6, r2
 800bd24:	e7ba      	b.n	800bc9c <_printf_i+0x150>
 800bd26:	680b      	ldr	r3, [r1, #0]
 800bd28:	1d1a      	adds	r2, r3, #4
 800bd2a:	600a      	str	r2, [r1, #0]
 800bd2c:	681e      	ldr	r6, [r3, #0]
 800bd2e:	6862      	ldr	r2, [r4, #4]
 800bd30:	2100      	movs	r1, #0
 800bd32:	4630      	mov	r0, r6
 800bd34:	f7f4 fa5c 	bl	80001f0 <memchr>
 800bd38:	b108      	cbz	r0, 800bd3e <_printf_i+0x1f2>
 800bd3a:	1b80      	subs	r0, r0, r6
 800bd3c:	6060      	str	r0, [r4, #4]
 800bd3e:	6863      	ldr	r3, [r4, #4]
 800bd40:	6123      	str	r3, [r4, #16]
 800bd42:	2300      	movs	r3, #0
 800bd44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd48:	e7a8      	b.n	800bc9c <_printf_i+0x150>
 800bd4a:	6923      	ldr	r3, [r4, #16]
 800bd4c:	4632      	mov	r2, r6
 800bd4e:	4649      	mov	r1, r9
 800bd50:	4640      	mov	r0, r8
 800bd52:	47d0      	blx	sl
 800bd54:	3001      	adds	r0, #1
 800bd56:	d0ab      	beq.n	800bcb0 <_printf_i+0x164>
 800bd58:	6823      	ldr	r3, [r4, #0]
 800bd5a:	079b      	lsls	r3, r3, #30
 800bd5c:	d413      	bmi.n	800bd86 <_printf_i+0x23a>
 800bd5e:	68e0      	ldr	r0, [r4, #12]
 800bd60:	9b03      	ldr	r3, [sp, #12]
 800bd62:	4298      	cmp	r0, r3
 800bd64:	bfb8      	it	lt
 800bd66:	4618      	movlt	r0, r3
 800bd68:	e7a4      	b.n	800bcb4 <_printf_i+0x168>
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	4632      	mov	r2, r6
 800bd6e:	4649      	mov	r1, r9
 800bd70:	4640      	mov	r0, r8
 800bd72:	47d0      	blx	sl
 800bd74:	3001      	adds	r0, #1
 800bd76:	d09b      	beq.n	800bcb0 <_printf_i+0x164>
 800bd78:	3501      	adds	r5, #1
 800bd7a:	68e3      	ldr	r3, [r4, #12]
 800bd7c:	9903      	ldr	r1, [sp, #12]
 800bd7e:	1a5b      	subs	r3, r3, r1
 800bd80:	42ab      	cmp	r3, r5
 800bd82:	dcf2      	bgt.n	800bd6a <_printf_i+0x21e>
 800bd84:	e7eb      	b.n	800bd5e <_printf_i+0x212>
 800bd86:	2500      	movs	r5, #0
 800bd88:	f104 0619 	add.w	r6, r4, #25
 800bd8c:	e7f5      	b.n	800bd7a <_printf_i+0x22e>
 800bd8e:	bf00      	nop
 800bd90:	0800fe96 	.word	0x0800fe96
 800bd94:	0800fea7 	.word	0x0800fea7

0800bd98 <siprintf>:
 800bd98:	b40e      	push	{r1, r2, r3}
 800bd9a:	b500      	push	{lr}
 800bd9c:	b09c      	sub	sp, #112	; 0x70
 800bd9e:	ab1d      	add	r3, sp, #116	; 0x74
 800bda0:	9002      	str	r0, [sp, #8]
 800bda2:	9006      	str	r0, [sp, #24]
 800bda4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bda8:	4809      	ldr	r0, [pc, #36]	; (800bdd0 <siprintf+0x38>)
 800bdaa:	9107      	str	r1, [sp, #28]
 800bdac:	9104      	str	r1, [sp, #16]
 800bdae:	4909      	ldr	r1, [pc, #36]	; (800bdd4 <siprintf+0x3c>)
 800bdb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdb4:	9105      	str	r1, [sp, #20]
 800bdb6:	6800      	ldr	r0, [r0, #0]
 800bdb8:	9301      	str	r3, [sp, #4]
 800bdba:	a902      	add	r1, sp, #8
 800bdbc:	f002 ff00 	bl	800ebc0 <_svfiprintf_r>
 800bdc0:	9b02      	ldr	r3, [sp, #8]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	701a      	strb	r2, [r3, #0]
 800bdc6:	b01c      	add	sp, #112	; 0x70
 800bdc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdcc:	b003      	add	sp, #12
 800bdce:	4770      	bx	lr
 800bdd0:	20000028 	.word	0x20000028
 800bdd4:	ffff0208 	.word	0xffff0208

0800bdd8 <strcat>:
 800bdd8:	b510      	push	{r4, lr}
 800bdda:	4602      	mov	r2, r0
 800bddc:	7814      	ldrb	r4, [r2, #0]
 800bdde:	4613      	mov	r3, r2
 800bde0:	3201      	adds	r2, #1
 800bde2:	2c00      	cmp	r4, #0
 800bde4:	d1fa      	bne.n	800bddc <strcat+0x4>
 800bde6:	3b01      	subs	r3, #1
 800bde8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdf0:	2a00      	cmp	r2, #0
 800bdf2:	d1f9      	bne.n	800bde8 <strcat+0x10>
 800bdf4:	bd10      	pop	{r4, pc}

0800bdf6 <strchr>:
 800bdf6:	b2c9      	uxtb	r1, r1
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdfe:	b11a      	cbz	r2, 800be08 <strchr+0x12>
 800be00:	428a      	cmp	r2, r1
 800be02:	d1f9      	bne.n	800bdf8 <strchr+0x2>
 800be04:	4618      	mov	r0, r3
 800be06:	4770      	bx	lr
 800be08:	2900      	cmp	r1, #0
 800be0a:	bf18      	it	ne
 800be0c:	2300      	movne	r3, #0
 800be0e:	e7f9      	b.n	800be04 <strchr+0xe>

0800be10 <strcpy>:
 800be10:	4603      	mov	r3, r0
 800be12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be16:	f803 2b01 	strb.w	r2, [r3], #1
 800be1a:	2a00      	cmp	r2, #0
 800be1c:	d1f9      	bne.n	800be12 <strcpy+0x2>
 800be1e:	4770      	bx	lr

0800be20 <strdup>:
 800be20:	4b02      	ldr	r3, [pc, #8]	; (800be2c <strdup+0xc>)
 800be22:	4601      	mov	r1, r0
 800be24:	6818      	ldr	r0, [r3, #0]
 800be26:	f000 b803 	b.w	800be30 <_strdup_r>
 800be2a:	bf00      	nop
 800be2c:	20000028 	.word	0x20000028

0800be30 <_strdup_r>:
 800be30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be32:	4604      	mov	r4, r0
 800be34:	4608      	mov	r0, r1
 800be36:	460d      	mov	r5, r1
 800be38:	f7f4 f9d2 	bl	80001e0 <strlen>
 800be3c:	1c42      	adds	r2, r0, #1
 800be3e:	4611      	mov	r1, r2
 800be40:	4620      	mov	r0, r4
 800be42:	9201      	str	r2, [sp, #4]
 800be44:	f002 fe06 	bl	800ea54 <_malloc_r>
 800be48:	4604      	mov	r4, r0
 800be4a:	b118      	cbz	r0, 800be54 <_strdup_r+0x24>
 800be4c:	9a01      	ldr	r2, [sp, #4]
 800be4e:	4629      	mov	r1, r5
 800be50:	f7ff fb22 	bl	800b498 <memcpy>
 800be54:	4620      	mov	r0, r4
 800be56:	b003      	add	sp, #12
 800be58:	bd30      	pop	{r4, r5, pc}

0800be5a <strsep>:
 800be5a:	4602      	mov	r2, r0
 800be5c:	2300      	movs	r3, #0
 800be5e:	6800      	ldr	r0, [r0, #0]
 800be60:	f000 be80 	b.w	800cb64 <__strtok_r>

0800be64 <strstr>:
 800be64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be66:	780c      	ldrb	r4, [r1, #0]
 800be68:	b164      	cbz	r4, 800be84 <strstr+0x20>
 800be6a:	4603      	mov	r3, r0
 800be6c:	781a      	ldrb	r2, [r3, #0]
 800be6e:	4618      	mov	r0, r3
 800be70:	1c5e      	adds	r6, r3, #1
 800be72:	b90a      	cbnz	r2, 800be78 <strstr+0x14>
 800be74:	4610      	mov	r0, r2
 800be76:	e005      	b.n	800be84 <strstr+0x20>
 800be78:	4294      	cmp	r4, r2
 800be7a:	d108      	bne.n	800be8e <strstr+0x2a>
 800be7c:	460d      	mov	r5, r1
 800be7e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800be82:	b902      	cbnz	r2, 800be86 <strstr+0x22>
 800be84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be86:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800be8a:	4297      	cmp	r7, r2
 800be8c:	d0f7      	beq.n	800be7e <strstr+0x1a>
 800be8e:	4633      	mov	r3, r6
 800be90:	e7ec      	b.n	800be6c <strstr+0x8>

0800be92 <sulp>:
 800be92:	b570      	push	{r4, r5, r6, lr}
 800be94:	4604      	mov	r4, r0
 800be96:	460d      	mov	r5, r1
 800be98:	ec45 4b10 	vmov	d0, r4, r5
 800be9c:	4616      	mov	r6, r2
 800be9e:	f002 fc2b 	bl	800e6f8 <__ulp>
 800bea2:	ec51 0b10 	vmov	r0, r1, d0
 800bea6:	b17e      	cbz	r6, 800bec8 <sulp+0x36>
 800bea8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800beac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	dd09      	ble.n	800bec8 <sulp+0x36>
 800beb4:	051b      	lsls	r3, r3, #20
 800beb6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800beba:	2400      	movs	r4, #0
 800bebc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bec0:	4622      	mov	r2, r4
 800bec2:	462b      	mov	r3, r5
 800bec4:	f7f4 fba0 	bl	8000608 <__aeabi_dmul>
 800bec8:	bd70      	pop	{r4, r5, r6, pc}
 800beca:	0000      	movs	r0, r0
 800becc:	0000      	movs	r0, r0
	...

0800bed0 <_strtod_l>:
 800bed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed4:	b0a3      	sub	sp, #140	; 0x8c
 800bed6:	461f      	mov	r7, r3
 800bed8:	2300      	movs	r3, #0
 800beda:	931e      	str	r3, [sp, #120]	; 0x78
 800bedc:	4ba4      	ldr	r3, [pc, #656]	; (800c170 <_strtod_l+0x2a0>)
 800bede:	9219      	str	r2, [sp, #100]	; 0x64
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	9307      	str	r3, [sp, #28]
 800bee4:	4604      	mov	r4, r0
 800bee6:	4618      	mov	r0, r3
 800bee8:	4688      	mov	r8, r1
 800beea:	f7f4 f979 	bl	80001e0 <strlen>
 800beee:	f04f 0a00 	mov.w	sl, #0
 800bef2:	4605      	mov	r5, r0
 800bef4:	f04f 0b00 	mov.w	fp, #0
 800bef8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800befc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800befe:	781a      	ldrb	r2, [r3, #0]
 800bf00:	2a2b      	cmp	r2, #43	; 0x2b
 800bf02:	d04c      	beq.n	800bf9e <_strtod_l+0xce>
 800bf04:	d839      	bhi.n	800bf7a <_strtod_l+0xaa>
 800bf06:	2a0d      	cmp	r2, #13
 800bf08:	d832      	bhi.n	800bf70 <_strtod_l+0xa0>
 800bf0a:	2a08      	cmp	r2, #8
 800bf0c:	d832      	bhi.n	800bf74 <_strtod_l+0xa4>
 800bf0e:	2a00      	cmp	r2, #0
 800bf10:	d03c      	beq.n	800bf8c <_strtod_l+0xbc>
 800bf12:	2300      	movs	r3, #0
 800bf14:	930e      	str	r3, [sp, #56]	; 0x38
 800bf16:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800bf18:	7833      	ldrb	r3, [r6, #0]
 800bf1a:	2b30      	cmp	r3, #48	; 0x30
 800bf1c:	f040 80b4 	bne.w	800c088 <_strtod_l+0x1b8>
 800bf20:	7873      	ldrb	r3, [r6, #1]
 800bf22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf26:	2b58      	cmp	r3, #88	; 0x58
 800bf28:	d16c      	bne.n	800c004 <_strtod_l+0x134>
 800bf2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf2c:	9301      	str	r3, [sp, #4]
 800bf2e:	ab1e      	add	r3, sp, #120	; 0x78
 800bf30:	9702      	str	r7, [sp, #8]
 800bf32:	9300      	str	r3, [sp, #0]
 800bf34:	4a8f      	ldr	r2, [pc, #572]	; (800c174 <_strtod_l+0x2a4>)
 800bf36:	ab1f      	add	r3, sp, #124	; 0x7c
 800bf38:	a91d      	add	r1, sp, #116	; 0x74
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f001 fd4a 	bl	800d9d4 <__gethex>
 800bf40:	f010 0707 	ands.w	r7, r0, #7
 800bf44:	4605      	mov	r5, r0
 800bf46:	d005      	beq.n	800bf54 <_strtod_l+0x84>
 800bf48:	2f06      	cmp	r7, #6
 800bf4a:	d12a      	bne.n	800bfa2 <_strtod_l+0xd2>
 800bf4c:	3601      	adds	r6, #1
 800bf4e:	2300      	movs	r3, #0
 800bf50:	961d      	str	r6, [sp, #116]	; 0x74
 800bf52:	930e      	str	r3, [sp, #56]	; 0x38
 800bf54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	f040 8596 	bne.w	800ca88 <_strtod_l+0xbb8>
 800bf5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf5e:	b1db      	cbz	r3, 800bf98 <_strtod_l+0xc8>
 800bf60:	4652      	mov	r2, sl
 800bf62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bf66:	ec43 2b10 	vmov	d0, r2, r3
 800bf6a:	b023      	add	sp, #140	; 0x8c
 800bf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf70:	2a20      	cmp	r2, #32
 800bf72:	d1ce      	bne.n	800bf12 <_strtod_l+0x42>
 800bf74:	3301      	adds	r3, #1
 800bf76:	931d      	str	r3, [sp, #116]	; 0x74
 800bf78:	e7c0      	b.n	800befc <_strtod_l+0x2c>
 800bf7a:	2a2d      	cmp	r2, #45	; 0x2d
 800bf7c:	d1c9      	bne.n	800bf12 <_strtod_l+0x42>
 800bf7e:	2201      	movs	r2, #1
 800bf80:	920e      	str	r2, [sp, #56]	; 0x38
 800bf82:	1c5a      	adds	r2, r3, #1
 800bf84:	921d      	str	r2, [sp, #116]	; 0x74
 800bf86:	785b      	ldrb	r3, [r3, #1]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1c4      	bne.n	800bf16 <_strtod_l+0x46>
 800bf8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bf8e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	f040 8576 	bne.w	800ca84 <_strtod_l+0xbb4>
 800bf98:	4652      	mov	r2, sl
 800bf9a:	465b      	mov	r3, fp
 800bf9c:	e7e3      	b.n	800bf66 <_strtod_l+0x96>
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	e7ee      	b.n	800bf80 <_strtod_l+0xb0>
 800bfa2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bfa4:	b13a      	cbz	r2, 800bfb6 <_strtod_l+0xe6>
 800bfa6:	2135      	movs	r1, #53	; 0x35
 800bfa8:	a820      	add	r0, sp, #128	; 0x80
 800bfaa:	f002 fcb0 	bl	800e90e <__copybits>
 800bfae:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	f002 f875 	bl	800e0a0 <_Bfree>
 800bfb6:	3f01      	subs	r7, #1
 800bfb8:	2f05      	cmp	r7, #5
 800bfba:	d807      	bhi.n	800bfcc <_strtod_l+0xfc>
 800bfbc:	e8df f007 	tbb	[pc, r7]
 800bfc0:	1d180b0e 	.word	0x1d180b0e
 800bfc4:	030e      	.short	0x030e
 800bfc6:	f04f 0b00 	mov.w	fp, #0
 800bfca:	46da      	mov	sl, fp
 800bfcc:	0728      	lsls	r0, r5, #28
 800bfce:	d5c1      	bpl.n	800bf54 <_strtod_l+0x84>
 800bfd0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bfd4:	e7be      	b.n	800bf54 <_strtod_l+0x84>
 800bfd6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800bfda:	e7f7      	b.n	800bfcc <_strtod_l+0xfc>
 800bfdc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800bfe0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bfe2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bfe6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bfea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bfee:	e7ed      	b.n	800bfcc <_strtod_l+0xfc>
 800bff0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800c178 <_strtod_l+0x2a8>
 800bff4:	f04f 0a00 	mov.w	sl, #0
 800bff8:	e7e8      	b.n	800bfcc <_strtod_l+0xfc>
 800bffa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bffe:	f04f 3aff 	mov.w	sl, #4294967295
 800c002:	e7e3      	b.n	800bfcc <_strtod_l+0xfc>
 800c004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c006:	1c5a      	adds	r2, r3, #1
 800c008:	921d      	str	r2, [sp, #116]	; 0x74
 800c00a:	785b      	ldrb	r3, [r3, #1]
 800c00c:	2b30      	cmp	r3, #48	; 0x30
 800c00e:	d0f9      	beq.n	800c004 <_strtod_l+0x134>
 800c010:	2b00      	cmp	r3, #0
 800c012:	d09f      	beq.n	800bf54 <_strtod_l+0x84>
 800c014:	2301      	movs	r3, #1
 800c016:	f04f 0900 	mov.w	r9, #0
 800c01a:	9304      	str	r3, [sp, #16]
 800c01c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c01e:	930a      	str	r3, [sp, #40]	; 0x28
 800c020:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c024:	464f      	mov	r7, r9
 800c026:	220a      	movs	r2, #10
 800c028:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c02a:	7806      	ldrb	r6, [r0, #0]
 800c02c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c030:	b2d9      	uxtb	r1, r3
 800c032:	2909      	cmp	r1, #9
 800c034:	d92a      	bls.n	800c08c <_strtod_l+0x1bc>
 800c036:	9907      	ldr	r1, [sp, #28]
 800c038:	462a      	mov	r2, r5
 800c03a:	f003 f835 	bl	800f0a8 <strncmp>
 800c03e:	b398      	cbz	r0, 800c0a8 <_strtod_l+0x1d8>
 800c040:	2000      	movs	r0, #0
 800c042:	4633      	mov	r3, r6
 800c044:	463d      	mov	r5, r7
 800c046:	9007      	str	r0, [sp, #28]
 800c048:	4602      	mov	r2, r0
 800c04a:	2b65      	cmp	r3, #101	; 0x65
 800c04c:	d001      	beq.n	800c052 <_strtod_l+0x182>
 800c04e:	2b45      	cmp	r3, #69	; 0x45
 800c050:	d118      	bne.n	800c084 <_strtod_l+0x1b4>
 800c052:	b91d      	cbnz	r5, 800c05c <_strtod_l+0x18c>
 800c054:	9b04      	ldr	r3, [sp, #16]
 800c056:	4303      	orrs	r3, r0
 800c058:	d098      	beq.n	800bf8c <_strtod_l+0xbc>
 800c05a:	2500      	movs	r5, #0
 800c05c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800c060:	f108 0301 	add.w	r3, r8, #1
 800c064:	931d      	str	r3, [sp, #116]	; 0x74
 800c066:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c06a:	2b2b      	cmp	r3, #43	; 0x2b
 800c06c:	d075      	beq.n	800c15a <_strtod_l+0x28a>
 800c06e:	2b2d      	cmp	r3, #45	; 0x2d
 800c070:	d07b      	beq.n	800c16a <_strtod_l+0x29a>
 800c072:	f04f 0c00 	mov.w	ip, #0
 800c076:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c07a:	2909      	cmp	r1, #9
 800c07c:	f240 8082 	bls.w	800c184 <_strtod_l+0x2b4>
 800c080:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c084:	2600      	movs	r6, #0
 800c086:	e09d      	b.n	800c1c4 <_strtod_l+0x2f4>
 800c088:	2300      	movs	r3, #0
 800c08a:	e7c4      	b.n	800c016 <_strtod_l+0x146>
 800c08c:	2f08      	cmp	r7, #8
 800c08e:	bfd8      	it	le
 800c090:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c092:	f100 0001 	add.w	r0, r0, #1
 800c096:	bfda      	itte	le
 800c098:	fb02 3301 	mlale	r3, r2, r1, r3
 800c09c:	9309      	strle	r3, [sp, #36]	; 0x24
 800c09e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c0a2:	3701      	adds	r7, #1
 800c0a4:	901d      	str	r0, [sp, #116]	; 0x74
 800c0a6:	e7bf      	b.n	800c028 <_strtod_l+0x158>
 800c0a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c0aa:	195a      	adds	r2, r3, r5
 800c0ac:	921d      	str	r2, [sp, #116]	; 0x74
 800c0ae:	5d5b      	ldrb	r3, [r3, r5]
 800c0b0:	2f00      	cmp	r7, #0
 800c0b2:	d037      	beq.n	800c124 <_strtod_l+0x254>
 800c0b4:	9007      	str	r0, [sp, #28]
 800c0b6:	463d      	mov	r5, r7
 800c0b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c0bc:	2a09      	cmp	r2, #9
 800c0be:	d912      	bls.n	800c0e6 <_strtod_l+0x216>
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	e7c2      	b.n	800c04a <_strtod_l+0x17a>
 800c0c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c0c6:	1c5a      	adds	r2, r3, #1
 800c0c8:	921d      	str	r2, [sp, #116]	; 0x74
 800c0ca:	785b      	ldrb	r3, [r3, #1]
 800c0cc:	3001      	adds	r0, #1
 800c0ce:	2b30      	cmp	r3, #48	; 0x30
 800c0d0:	d0f8      	beq.n	800c0c4 <_strtod_l+0x1f4>
 800c0d2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c0d6:	2a08      	cmp	r2, #8
 800c0d8:	f200 84db 	bhi.w	800ca92 <_strtod_l+0xbc2>
 800c0dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c0de:	9007      	str	r0, [sp, #28]
 800c0e0:	2000      	movs	r0, #0
 800c0e2:	920a      	str	r2, [sp, #40]	; 0x28
 800c0e4:	4605      	mov	r5, r0
 800c0e6:	3b30      	subs	r3, #48	; 0x30
 800c0e8:	f100 0201 	add.w	r2, r0, #1
 800c0ec:	d014      	beq.n	800c118 <_strtod_l+0x248>
 800c0ee:	9907      	ldr	r1, [sp, #28]
 800c0f0:	4411      	add	r1, r2
 800c0f2:	9107      	str	r1, [sp, #28]
 800c0f4:	462a      	mov	r2, r5
 800c0f6:	eb00 0e05 	add.w	lr, r0, r5
 800c0fa:	210a      	movs	r1, #10
 800c0fc:	4572      	cmp	r2, lr
 800c0fe:	d113      	bne.n	800c128 <_strtod_l+0x258>
 800c100:	182a      	adds	r2, r5, r0
 800c102:	2a08      	cmp	r2, #8
 800c104:	f105 0501 	add.w	r5, r5, #1
 800c108:	4405      	add	r5, r0
 800c10a:	dc1c      	bgt.n	800c146 <_strtod_l+0x276>
 800c10c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c10e:	220a      	movs	r2, #10
 800c110:	fb02 3301 	mla	r3, r2, r1, r3
 800c114:	9309      	str	r3, [sp, #36]	; 0x24
 800c116:	2200      	movs	r2, #0
 800c118:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c11a:	1c59      	adds	r1, r3, #1
 800c11c:	911d      	str	r1, [sp, #116]	; 0x74
 800c11e:	785b      	ldrb	r3, [r3, #1]
 800c120:	4610      	mov	r0, r2
 800c122:	e7c9      	b.n	800c0b8 <_strtod_l+0x1e8>
 800c124:	4638      	mov	r0, r7
 800c126:	e7d2      	b.n	800c0ce <_strtod_l+0x1fe>
 800c128:	2a08      	cmp	r2, #8
 800c12a:	dc04      	bgt.n	800c136 <_strtod_l+0x266>
 800c12c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c12e:	434e      	muls	r6, r1
 800c130:	9609      	str	r6, [sp, #36]	; 0x24
 800c132:	3201      	adds	r2, #1
 800c134:	e7e2      	b.n	800c0fc <_strtod_l+0x22c>
 800c136:	f102 0c01 	add.w	ip, r2, #1
 800c13a:	f1bc 0f10 	cmp.w	ip, #16
 800c13e:	bfd8      	it	le
 800c140:	fb01 f909 	mulle.w	r9, r1, r9
 800c144:	e7f5      	b.n	800c132 <_strtod_l+0x262>
 800c146:	2d10      	cmp	r5, #16
 800c148:	bfdc      	itt	le
 800c14a:	220a      	movle	r2, #10
 800c14c:	fb02 3909 	mlale	r9, r2, r9, r3
 800c150:	e7e1      	b.n	800c116 <_strtod_l+0x246>
 800c152:	2300      	movs	r3, #0
 800c154:	9307      	str	r3, [sp, #28]
 800c156:	2201      	movs	r2, #1
 800c158:	e77c      	b.n	800c054 <_strtod_l+0x184>
 800c15a:	f04f 0c00 	mov.w	ip, #0
 800c15e:	f108 0302 	add.w	r3, r8, #2
 800c162:	931d      	str	r3, [sp, #116]	; 0x74
 800c164:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c168:	e785      	b.n	800c076 <_strtod_l+0x1a6>
 800c16a:	f04f 0c01 	mov.w	ip, #1
 800c16e:	e7f6      	b.n	800c15e <_strtod_l+0x28e>
 800c170:	080100a4 	.word	0x080100a4
 800c174:	0800feb8 	.word	0x0800feb8
 800c178:	7ff00000 	.word	0x7ff00000
 800c17c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c17e:	1c59      	adds	r1, r3, #1
 800c180:	911d      	str	r1, [sp, #116]	; 0x74
 800c182:	785b      	ldrb	r3, [r3, #1]
 800c184:	2b30      	cmp	r3, #48	; 0x30
 800c186:	d0f9      	beq.n	800c17c <_strtod_l+0x2ac>
 800c188:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800c18c:	2908      	cmp	r1, #8
 800c18e:	f63f af79 	bhi.w	800c084 <_strtod_l+0x1b4>
 800c192:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c196:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c198:	9308      	str	r3, [sp, #32]
 800c19a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c19c:	1c59      	adds	r1, r3, #1
 800c19e:	911d      	str	r1, [sp, #116]	; 0x74
 800c1a0:	785b      	ldrb	r3, [r3, #1]
 800c1a2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800c1a6:	2e09      	cmp	r6, #9
 800c1a8:	d937      	bls.n	800c21a <_strtod_l+0x34a>
 800c1aa:	9e08      	ldr	r6, [sp, #32]
 800c1ac:	1b89      	subs	r1, r1, r6
 800c1ae:	2908      	cmp	r1, #8
 800c1b0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c1b4:	dc02      	bgt.n	800c1bc <_strtod_l+0x2ec>
 800c1b6:	4576      	cmp	r6, lr
 800c1b8:	bfa8      	it	ge
 800c1ba:	4676      	movge	r6, lr
 800c1bc:	f1bc 0f00 	cmp.w	ip, #0
 800c1c0:	d000      	beq.n	800c1c4 <_strtod_l+0x2f4>
 800c1c2:	4276      	negs	r6, r6
 800c1c4:	2d00      	cmp	r5, #0
 800c1c6:	d14f      	bne.n	800c268 <_strtod_l+0x398>
 800c1c8:	9904      	ldr	r1, [sp, #16]
 800c1ca:	4301      	orrs	r1, r0
 800c1cc:	f47f aec2 	bne.w	800bf54 <_strtod_l+0x84>
 800c1d0:	2a00      	cmp	r2, #0
 800c1d2:	f47f aedb 	bne.w	800bf8c <_strtod_l+0xbc>
 800c1d6:	2b69      	cmp	r3, #105	; 0x69
 800c1d8:	d027      	beq.n	800c22a <_strtod_l+0x35a>
 800c1da:	dc24      	bgt.n	800c226 <_strtod_l+0x356>
 800c1dc:	2b49      	cmp	r3, #73	; 0x49
 800c1de:	d024      	beq.n	800c22a <_strtod_l+0x35a>
 800c1e0:	2b4e      	cmp	r3, #78	; 0x4e
 800c1e2:	f47f aed3 	bne.w	800bf8c <_strtod_l+0xbc>
 800c1e6:	499e      	ldr	r1, [pc, #632]	; (800c460 <_strtod_l+0x590>)
 800c1e8:	a81d      	add	r0, sp, #116	; 0x74
 800c1ea:	f001 fe4b 	bl	800de84 <__match>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	f43f aecc 	beq.w	800bf8c <_strtod_l+0xbc>
 800c1f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	2b28      	cmp	r3, #40	; 0x28
 800c1fa:	d12d      	bne.n	800c258 <_strtod_l+0x388>
 800c1fc:	4999      	ldr	r1, [pc, #612]	; (800c464 <_strtod_l+0x594>)
 800c1fe:	aa20      	add	r2, sp, #128	; 0x80
 800c200:	a81d      	add	r0, sp, #116	; 0x74
 800c202:	f001 fe53 	bl	800deac <__hexnan>
 800c206:	2805      	cmp	r0, #5
 800c208:	d126      	bne.n	800c258 <_strtod_l+0x388>
 800c20a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c20c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800c210:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c214:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c218:	e69c      	b.n	800bf54 <_strtod_l+0x84>
 800c21a:	210a      	movs	r1, #10
 800c21c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c220:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c224:	e7b9      	b.n	800c19a <_strtod_l+0x2ca>
 800c226:	2b6e      	cmp	r3, #110	; 0x6e
 800c228:	e7db      	b.n	800c1e2 <_strtod_l+0x312>
 800c22a:	498f      	ldr	r1, [pc, #572]	; (800c468 <_strtod_l+0x598>)
 800c22c:	a81d      	add	r0, sp, #116	; 0x74
 800c22e:	f001 fe29 	bl	800de84 <__match>
 800c232:	2800      	cmp	r0, #0
 800c234:	f43f aeaa 	beq.w	800bf8c <_strtod_l+0xbc>
 800c238:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c23a:	498c      	ldr	r1, [pc, #560]	; (800c46c <_strtod_l+0x59c>)
 800c23c:	3b01      	subs	r3, #1
 800c23e:	a81d      	add	r0, sp, #116	; 0x74
 800c240:	931d      	str	r3, [sp, #116]	; 0x74
 800c242:	f001 fe1f 	bl	800de84 <__match>
 800c246:	b910      	cbnz	r0, 800c24e <_strtod_l+0x37e>
 800c248:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c24a:	3301      	adds	r3, #1
 800c24c:	931d      	str	r3, [sp, #116]	; 0x74
 800c24e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800c47c <_strtod_l+0x5ac>
 800c252:	f04f 0a00 	mov.w	sl, #0
 800c256:	e67d      	b.n	800bf54 <_strtod_l+0x84>
 800c258:	4885      	ldr	r0, [pc, #532]	; (800c470 <_strtod_l+0x5a0>)
 800c25a:	f002 ff0d 	bl	800f078 <nan>
 800c25e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c262:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c266:	e675      	b.n	800bf54 <_strtod_l+0x84>
 800c268:	9b07      	ldr	r3, [sp, #28]
 800c26a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c26c:	1af3      	subs	r3, r6, r3
 800c26e:	2f00      	cmp	r7, #0
 800c270:	bf08      	it	eq
 800c272:	462f      	moveq	r7, r5
 800c274:	2d10      	cmp	r5, #16
 800c276:	9308      	str	r3, [sp, #32]
 800c278:	46a8      	mov	r8, r5
 800c27a:	bfa8      	it	ge
 800c27c:	f04f 0810 	movge.w	r8, #16
 800c280:	f7f4 f948 	bl	8000514 <__aeabi_ui2d>
 800c284:	2d09      	cmp	r5, #9
 800c286:	4682      	mov	sl, r0
 800c288:	468b      	mov	fp, r1
 800c28a:	dd13      	ble.n	800c2b4 <_strtod_l+0x3e4>
 800c28c:	4b79      	ldr	r3, [pc, #484]	; (800c474 <_strtod_l+0x5a4>)
 800c28e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c292:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c296:	f7f4 f9b7 	bl	8000608 <__aeabi_dmul>
 800c29a:	4682      	mov	sl, r0
 800c29c:	4648      	mov	r0, r9
 800c29e:	468b      	mov	fp, r1
 800c2a0:	f7f4 f938 	bl	8000514 <__aeabi_ui2d>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	4650      	mov	r0, sl
 800c2aa:	4659      	mov	r1, fp
 800c2ac:	f7f3 fff6 	bl	800029c <__adddf3>
 800c2b0:	4682      	mov	sl, r0
 800c2b2:	468b      	mov	fp, r1
 800c2b4:	2d0f      	cmp	r5, #15
 800c2b6:	dc38      	bgt.n	800c32a <_strtod_l+0x45a>
 800c2b8:	9b08      	ldr	r3, [sp, #32]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f43f ae4a 	beq.w	800bf54 <_strtod_l+0x84>
 800c2c0:	dd24      	ble.n	800c30c <_strtod_l+0x43c>
 800c2c2:	2b16      	cmp	r3, #22
 800c2c4:	dc0b      	bgt.n	800c2de <_strtod_l+0x40e>
 800c2c6:	4d6b      	ldr	r5, [pc, #428]	; (800c474 <_strtod_l+0x5a4>)
 800c2c8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800c2cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c2d0:	4652      	mov	r2, sl
 800c2d2:	465b      	mov	r3, fp
 800c2d4:	f7f4 f998 	bl	8000608 <__aeabi_dmul>
 800c2d8:	4682      	mov	sl, r0
 800c2da:	468b      	mov	fp, r1
 800c2dc:	e63a      	b.n	800bf54 <_strtod_l+0x84>
 800c2de:	9a08      	ldr	r2, [sp, #32]
 800c2e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	db20      	blt.n	800c32a <_strtod_l+0x45a>
 800c2e8:	4c62      	ldr	r4, [pc, #392]	; (800c474 <_strtod_l+0x5a4>)
 800c2ea:	f1c5 050f 	rsb	r5, r5, #15
 800c2ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c2f2:	4652      	mov	r2, sl
 800c2f4:	465b      	mov	r3, fp
 800c2f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2fa:	f7f4 f985 	bl	8000608 <__aeabi_dmul>
 800c2fe:	9b08      	ldr	r3, [sp, #32]
 800c300:	1b5d      	subs	r5, r3, r5
 800c302:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c306:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c30a:	e7e3      	b.n	800c2d4 <_strtod_l+0x404>
 800c30c:	9b08      	ldr	r3, [sp, #32]
 800c30e:	3316      	adds	r3, #22
 800c310:	db0b      	blt.n	800c32a <_strtod_l+0x45a>
 800c312:	9b07      	ldr	r3, [sp, #28]
 800c314:	4a57      	ldr	r2, [pc, #348]	; (800c474 <_strtod_l+0x5a4>)
 800c316:	1b9e      	subs	r6, r3, r6
 800c318:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c31c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c320:	4650      	mov	r0, sl
 800c322:	4659      	mov	r1, fp
 800c324:	f7f4 fa9a 	bl	800085c <__aeabi_ddiv>
 800c328:	e7d6      	b.n	800c2d8 <_strtod_l+0x408>
 800c32a:	9b08      	ldr	r3, [sp, #32]
 800c32c:	eba5 0808 	sub.w	r8, r5, r8
 800c330:	4498      	add	r8, r3
 800c332:	f1b8 0f00 	cmp.w	r8, #0
 800c336:	dd71      	ble.n	800c41c <_strtod_l+0x54c>
 800c338:	f018 030f 	ands.w	r3, r8, #15
 800c33c:	d00a      	beq.n	800c354 <_strtod_l+0x484>
 800c33e:	494d      	ldr	r1, [pc, #308]	; (800c474 <_strtod_l+0x5a4>)
 800c340:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c344:	4652      	mov	r2, sl
 800c346:	465b      	mov	r3, fp
 800c348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c34c:	f7f4 f95c 	bl	8000608 <__aeabi_dmul>
 800c350:	4682      	mov	sl, r0
 800c352:	468b      	mov	fp, r1
 800c354:	f038 080f 	bics.w	r8, r8, #15
 800c358:	d04d      	beq.n	800c3f6 <_strtod_l+0x526>
 800c35a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c35e:	dd22      	ble.n	800c3a6 <_strtod_l+0x4d6>
 800c360:	2500      	movs	r5, #0
 800c362:	462e      	mov	r6, r5
 800c364:	9509      	str	r5, [sp, #36]	; 0x24
 800c366:	9507      	str	r5, [sp, #28]
 800c368:	2322      	movs	r3, #34	; 0x22
 800c36a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800c47c <_strtod_l+0x5ac>
 800c36e:	6023      	str	r3, [r4, #0]
 800c370:	f04f 0a00 	mov.w	sl, #0
 800c374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c376:	2b00      	cmp	r3, #0
 800c378:	f43f adec 	beq.w	800bf54 <_strtod_l+0x84>
 800c37c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c37e:	4620      	mov	r0, r4
 800c380:	f001 fe8e 	bl	800e0a0 <_Bfree>
 800c384:	9907      	ldr	r1, [sp, #28]
 800c386:	4620      	mov	r0, r4
 800c388:	f001 fe8a 	bl	800e0a0 <_Bfree>
 800c38c:	4631      	mov	r1, r6
 800c38e:	4620      	mov	r0, r4
 800c390:	f001 fe86 	bl	800e0a0 <_Bfree>
 800c394:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c396:	4620      	mov	r0, r4
 800c398:	f001 fe82 	bl	800e0a0 <_Bfree>
 800c39c:	4629      	mov	r1, r5
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f001 fe7e 	bl	800e0a0 <_Bfree>
 800c3a4:	e5d6      	b.n	800bf54 <_strtod_l+0x84>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c3ac:	4650      	mov	r0, sl
 800c3ae:	4659      	mov	r1, fp
 800c3b0:	4699      	mov	r9, r3
 800c3b2:	f1b8 0f01 	cmp.w	r8, #1
 800c3b6:	dc21      	bgt.n	800c3fc <_strtod_l+0x52c>
 800c3b8:	b10b      	cbz	r3, 800c3be <_strtod_l+0x4ee>
 800c3ba:	4682      	mov	sl, r0
 800c3bc:	468b      	mov	fp, r1
 800c3be:	4b2e      	ldr	r3, [pc, #184]	; (800c478 <_strtod_l+0x5a8>)
 800c3c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c3c4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c3c8:	4652      	mov	r2, sl
 800c3ca:	465b      	mov	r3, fp
 800c3cc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c3d0:	f7f4 f91a 	bl	8000608 <__aeabi_dmul>
 800c3d4:	4b29      	ldr	r3, [pc, #164]	; (800c47c <_strtod_l+0x5ac>)
 800c3d6:	460a      	mov	r2, r1
 800c3d8:	400b      	ands	r3, r1
 800c3da:	4929      	ldr	r1, [pc, #164]	; (800c480 <_strtod_l+0x5b0>)
 800c3dc:	428b      	cmp	r3, r1
 800c3de:	4682      	mov	sl, r0
 800c3e0:	d8be      	bhi.n	800c360 <_strtod_l+0x490>
 800c3e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c3e6:	428b      	cmp	r3, r1
 800c3e8:	bf86      	itte	hi
 800c3ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c484 <_strtod_l+0x5b4>
 800c3ee:	f04f 3aff 	movhi.w	sl, #4294967295
 800c3f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	9304      	str	r3, [sp, #16]
 800c3fa:	e081      	b.n	800c500 <_strtod_l+0x630>
 800c3fc:	f018 0f01 	tst.w	r8, #1
 800c400:	d007      	beq.n	800c412 <_strtod_l+0x542>
 800c402:	4b1d      	ldr	r3, [pc, #116]	; (800c478 <_strtod_l+0x5a8>)
 800c404:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	f7f4 f8fc 	bl	8000608 <__aeabi_dmul>
 800c410:	2301      	movs	r3, #1
 800c412:	f109 0901 	add.w	r9, r9, #1
 800c416:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c41a:	e7ca      	b.n	800c3b2 <_strtod_l+0x4e2>
 800c41c:	d0eb      	beq.n	800c3f6 <_strtod_l+0x526>
 800c41e:	f1c8 0800 	rsb	r8, r8, #0
 800c422:	f018 020f 	ands.w	r2, r8, #15
 800c426:	d00a      	beq.n	800c43e <_strtod_l+0x56e>
 800c428:	4b12      	ldr	r3, [pc, #72]	; (800c474 <_strtod_l+0x5a4>)
 800c42a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c42e:	4650      	mov	r0, sl
 800c430:	4659      	mov	r1, fp
 800c432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c436:	f7f4 fa11 	bl	800085c <__aeabi_ddiv>
 800c43a:	4682      	mov	sl, r0
 800c43c:	468b      	mov	fp, r1
 800c43e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c442:	d0d8      	beq.n	800c3f6 <_strtod_l+0x526>
 800c444:	f1b8 0f1f 	cmp.w	r8, #31
 800c448:	dd1e      	ble.n	800c488 <_strtod_l+0x5b8>
 800c44a:	2500      	movs	r5, #0
 800c44c:	462e      	mov	r6, r5
 800c44e:	9509      	str	r5, [sp, #36]	; 0x24
 800c450:	9507      	str	r5, [sp, #28]
 800c452:	2322      	movs	r3, #34	; 0x22
 800c454:	f04f 0a00 	mov.w	sl, #0
 800c458:	f04f 0b00 	mov.w	fp, #0
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	e789      	b.n	800c374 <_strtod_l+0x4a4>
 800c460:	0800fe91 	.word	0x0800fe91
 800c464:	0800fecc 	.word	0x0800fecc
 800c468:	0800fe89 	.word	0x0800fe89
 800c46c:	0800ffbf 	.word	0x0800ffbf
 800c470:	0800ffbb 	.word	0x0800ffbb
 800c474:	08010140 	.word	0x08010140
 800c478:	08010118 	.word	0x08010118
 800c47c:	7ff00000 	.word	0x7ff00000
 800c480:	7ca00000 	.word	0x7ca00000
 800c484:	7fefffff 	.word	0x7fefffff
 800c488:	f018 0310 	ands.w	r3, r8, #16
 800c48c:	bf18      	it	ne
 800c48e:	236a      	movne	r3, #106	; 0x6a
 800c490:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800c848 <_strtod_l+0x978>
 800c494:	9304      	str	r3, [sp, #16]
 800c496:	4650      	mov	r0, sl
 800c498:	4659      	mov	r1, fp
 800c49a:	2300      	movs	r3, #0
 800c49c:	f018 0f01 	tst.w	r8, #1
 800c4a0:	d004      	beq.n	800c4ac <_strtod_l+0x5dc>
 800c4a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c4a6:	f7f4 f8af 	bl	8000608 <__aeabi_dmul>
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c4b0:	f109 0908 	add.w	r9, r9, #8
 800c4b4:	d1f2      	bne.n	800c49c <_strtod_l+0x5cc>
 800c4b6:	b10b      	cbz	r3, 800c4bc <_strtod_l+0x5ec>
 800c4b8:	4682      	mov	sl, r0
 800c4ba:	468b      	mov	fp, r1
 800c4bc:	9b04      	ldr	r3, [sp, #16]
 800c4be:	b1bb      	cbz	r3, 800c4f0 <_strtod_l+0x620>
 800c4c0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c4c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	4659      	mov	r1, fp
 800c4cc:	dd10      	ble.n	800c4f0 <_strtod_l+0x620>
 800c4ce:	2b1f      	cmp	r3, #31
 800c4d0:	f340 8128 	ble.w	800c724 <_strtod_l+0x854>
 800c4d4:	2b34      	cmp	r3, #52	; 0x34
 800c4d6:	bfde      	ittt	le
 800c4d8:	3b20      	suble	r3, #32
 800c4da:	f04f 32ff 	movle.w	r2, #4294967295
 800c4de:	fa02 f303 	lslle.w	r3, r2, r3
 800c4e2:	f04f 0a00 	mov.w	sl, #0
 800c4e6:	bfcc      	ite	gt
 800c4e8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c4ec:	ea03 0b01 	andle.w	fp, r3, r1
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	4650      	mov	r0, sl
 800c4f6:	4659      	mov	r1, fp
 800c4f8:	f7f4 faee 	bl	8000ad8 <__aeabi_dcmpeq>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	d1a4      	bne.n	800c44a <_strtod_l+0x57a>
 800c500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c502:	9300      	str	r3, [sp, #0]
 800c504:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c506:	462b      	mov	r3, r5
 800c508:	463a      	mov	r2, r7
 800c50a:	4620      	mov	r0, r4
 800c50c:	f001 fe34 	bl	800e178 <__s2b>
 800c510:	9009      	str	r0, [sp, #36]	; 0x24
 800c512:	2800      	cmp	r0, #0
 800c514:	f43f af24 	beq.w	800c360 <_strtod_l+0x490>
 800c518:	9b07      	ldr	r3, [sp, #28]
 800c51a:	1b9e      	subs	r6, r3, r6
 800c51c:	9b08      	ldr	r3, [sp, #32]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	bfb4      	ite	lt
 800c522:	4633      	movlt	r3, r6
 800c524:	2300      	movge	r3, #0
 800c526:	9310      	str	r3, [sp, #64]	; 0x40
 800c528:	9b08      	ldr	r3, [sp, #32]
 800c52a:	2500      	movs	r5, #0
 800c52c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c530:	9318      	str	r3, [sp, #96]	; 0x60
 800c532:	462e      	mov	r6, r5
 800c534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c536:	4620      	mov	r0, r4
 800c538:	6859      	ldr	r1, [r3, #4]
 800c53a:	f001 fd71 	bl	800e020 <_Balloc>
 800c53e:	9007      	str	r0, [sp, #28]
 800c540:	2800      	cmp	r0, #0
 800c542:	f43f af11 	beq.w	800c368 <_strtod_l+0x498>
 800c546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c548:	691a      	ldr	r2, [r3, #16]
 800c54a:	3202      	adds	r2, #2
 800c54c:	f103 010c 	add.w	r1, r3, #12
 800c550:	0092      	lsls	r2, r2, #2
 800c552:	300c      	adds	r0, #12
 800c554:	f7fe ffa0 	bl	800b498 <memcpy>
 800c558:	ec4b ab10 	vmov	d0, sl, fp
 800c55c:	aa20      	add	r2, sp, #128	; 0x80
 800c55e:	a91f      	add	r1, sp, #124	; 0x7c
 800c560:	4620      	mov	r0, r4
 800c562:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800c566:	f002 f943 	bl	800e7f0 <__d2b>
 800c56a:	901e      	str	r0, [sp, #120]	; 0x78
 800c56c:	2800      	cmp	r0, #0
 800c56e:	f43f aefb 	beq.w	800c368 <_strtod_l+0x498>
 800c572:	2101      	movs	r1, #1
 800c574:	4620      	mov	r0, r4
 800c576:	f001 fe99 	bl	800e2ac <__i2b>
 800c57a:	4606      	mov	r6, r0
 800c57c:	2800      	cmp	r0, #0
 800c57e:	f43f aef3 	beq.w	800c368 <_strtod_l+0x498>
 800c582:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c584:	9904      	ldr	r1, [sp, #16]
 800c586:	2b00      	cmp	r3, #0
 800c588:	bfab      	itete	ge
 800c58a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800c58c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800c58e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800c590:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800c594:	bfac      	ite	ge
 800c596:	eb03 0902 	addge.w	r9, r3, r2
 800c59a:	1ad7      	sublt	r7, r2, r3
 800c59c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c59e:	eba3 0801 	sub.w	r8, r3, r1
 800c5a2:	4490      	add	r8, r2
 800c5a4:	4ba3      	ldr	r3, [pc, #652]	; (800c834 <_strtod_l+0x964>)
 800c5a6:	f108 38ff 	add.w	r8, r8, #4294967295
 800c5aa:	4598      	cmp	r8, r3
 800c5ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c5b0:	f280 80cc 	bge.w	800c74c <_strtod_l+0x87c>
 800c5b4:	eba3 0308 	sub.w	r3, r3, r8
 800c5b8:	2b1f      	cmp	r3, #31
 800c5ba:	eba2 0203 	sub.w	r2, r2, r3
 800c5be:	f04f 0101 	mov.w	r1, #1
 800c5c2:	f300 80b6 	bgt.w	800c732 <_strtod_l+0x862>
 800c5c6:	fa01 f303 	lsl.w	r3, r1, r3
 800c5ca:	9311      	str	r3, [sp, #68]	; 0x44
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	930c      	str	r3, [sp, #48]	; 0x30
 800c5d0:	eb09 0802 	add.w	r8, r9, r2
 800c5d4:	9b04      	ldr	r3, [sp, #16]
 800c5d6:	45c1      	cmp	r9, r8
 800c5d8:	4417      	add	r7, r2
 800c5da:	441f      	add	r7, r3
 800c5dc:	464b      	mov	r3, r9
 800c5de:	bfa8      	it	ge
 800c5e0:	4643      	movge	r3, r8
 800c5e2:	42bb      	cmp	r3, r7
 800c5e4:	bfa8      	it	ge
 800c5e6:	463b      	movge	r3, r7
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	bfc2      	ittt	gt
 800c5ec:	eba8 0803 	subgt.w	r8, r8, r3
 800c5f0:	1aff      	subgt	r7, r7, r3
 800c5f2:	eba9 0903 	subgt.w	r9, r9, r3
 800c5f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	dd17      	ble.n	800c62c <_strtod_l+0x75c>
 800c5fc:	4631      	mov	r1, r6
 800c5fe:	461a      	mov	r2, r3
 800c600:	4620      	mov	r0, r4
 800c602:	f001 ff0f 	bl	800e424 <__pow5mult>
 800c606:	4606      	mov	r6, r0
 800c608:	2800      	cmp	r0, #0
 800c60a:	f43f aead 	beq.w	800c368 <_strtod_l+0x498>
 800c60e:	4601      	mov	r1, r0
 800c610:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c612:	4620      	mov	r0, r4
 800c614:	f001 fe60 	bl	800e2d8 <__multiply>
 800c618:	900f      	str	r0, [sp, #60]	; 0x3c
 800c61a:	2800      	cmp	r0, #0
 800c61c:	f43f aea4 	beq.w	800c368 <_strtod_l+0x498>
 800c620:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c622:	4620      	mov	r0, r4
 800c624:	f001 fd3c 	bl	800e0a0 <_Bfree>
 800c628:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c62a:	931e      	str	r3, [sp, #120]	; 0x78
 800c62c:	f1b8 0f00 	cmp.w	r8, #0
 800c630:	f300 8091 	bgt.w	800c756 <_strtod_l+0x886>
 800c634:	9b08      	ldr	r3, [sp, #32]
 800c636:	2b00      	cmp	r3, #0
 800c638:	dd08      	ble.n	800c64c <_strtod_l+0x77c>
 800c63a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c63c:	9907      	ldr	r1, [sp, #28]
 800c63e:	4620      	mov	r0, r4
 800c640:	f001 fef0 	bl	800e424 <__pow5mult>
 800c644:	9007      	str	r0, [sp, #28]
 800c646:	2800      	cmp	r0, #0
 800c648:	f43f ae8e 	beq.w	800c368 <_strtod_l+0x498>
 800c64c:	2f00      	cmp	r7, #0
 800c64e:	dd08      	ble.n	800c662 <_strtod_l+0x792>
 800c650:	9907      	ldr	r1, [sp, #28]
 800c652:	463a      	mov	r2, r7
 800c654:	4620      	mov	r0, r4
 800c656:	f001 ff3f 	bl	800e4d8 <__lshift>
 800c65a:	9007      	str	r0, [sp, #28]
 800c65c:	2800      	cmp	r0, #0
 800c65e:	f43f ae83 	beq.w	800c368 <_strtod_l+0x498>
 800c662:	f1b9 0f00 	cmp.w	r9, #0
 800c666:	dd08      	ble.n	800c67a <_strtod_l+0x7aa>
 800c668:	4631      	mov	r1, r6
 800c66a:	464a      	mov	r2, r9
 800c66c:	4620      	mov	r0, r4
 800c66e:	f001 ff33 	bl	800e4d8 <__lshift>
 800c672:	4606      	mov	r6, r0
 800c674:	2800      	cmp	r0, #0
 800c676:	f43f ae77 	beq.w	800c368 <_strtod_l+0x498>
 800c67a:	9a07      	ldr	r2, [sp, #28]
 800c67c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c67e:	4620      	mov	r0, r4
 800c680:	f001 ffb2 	bl	800e5e8 <__mdiff>
 800c684:	4605      	mov	r5, r0
 800c686:	2800      	cmp	r0, #0
 800c688:	f43f ae6e 	beq.w	800c368 <_strtod_l+0x498>
 800c68c:	68c3      	ldr	r3, [r0, #12]
 800c68e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c690:	2300      	movs	r3, #0
 800c692:	60c3      	str	r3, [r0, #12]
 800c694:	4631      	mov	r1, r6
 800c696:	f001 ff8b 	bl	800e5b0 <__mcmp>
 800c69a:	2800      	cmp	r0, #0
 800c69c:	da65      	bge.n	800c76a <_strtod_l+0x89a>
 800c69e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6a0:	ea53 030a 	orrs.w	r3, r3, sl
 800c6a4:	f040 8087 	bne.w	800c7b6 <_strtod_l+0x8e6>
 800c6a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f040 8082 	bne.w	800c7b6 <_strtod_l+0x8e6>
 800c6b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c6b6:	0d1b      	lsrs	r3, r3, #20
 800c6b8:	051b      	lsls	r3, r3, #20
 800c6ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c6be:	d97a      	bls.n	800c7b6 <_strtod_l+0x8e6>
 800c6c0:	696b      	ldr	r3, [r5, #20]
 800c6c2:	b913      	cbnz	r3, 800c6ca <_strtod_l+0x7fa>
 800c6c4:	692b      	ldr	r3, [r5, #16]
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	dd75      	ble.n	800c7b6 <_strtod_l+0x8e6>
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	f001 ff02 	bl	800e4d8 <__lshift>
 800c6d4:	4631      	mov	r1, r6
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	f001 ff6a 	bl	800e5b0 <__mcmp>
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	dd6a      	ble.n	800c7b6 <_strtod_l+0x8e6>
 800c6e0:	9904      	ldr	r1, [sp, #16]
 800c6e2:	4a55      	ldr	r2, [pc, #340]	; (800c838 <_strtod_l+0x968>)
 800c6e4:	465b      	mov	r3, fp
 800c6e6:	2900      	cmp	r1, #0
 800c6e8:	f000 8085 	beq.w	800c7f6 <_strtod_l+0x926>
 800c6ec:	ea02 010b 	and.w	r1, r2, fp
 800c6f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c6f4:	dc7f      	bgt.n	800c7f6 <_strtod_l+0x926>
 800c6f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c6fa:	f77f aeaa 	ble.w	800c452 <_strtod_l+0x582>
 800c6fe:	4a4f      	ldr	r2, [pc, #316]	; (800c83c <_strtod_l+0x96c>)
 800c700:	2300      	movs	r3, #0
 800c702:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800c706:	4650      	mov	r0, sl
 800c708:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800c70c:	4659      	mov	r1, fp
 800c70e:	f7f3 ff7b 	bl	8000608 <__aeabi_dmul>
 800c712:	460b      	mov	r3, r1
 800c714:	4303      	orrs	r3, r0
 800c716:	bf08      	it	eq
 800c718:	2322      	moveq	r3, #34	; 0x22
 800c71a:	4682      	mov	sl, r0
 800c71c:	468b      	mov	fp, r1
 800c71e:	bf08      	it	eq
 800c720:	6023      	streq	r3, [r4, #0]
 800c722:	e62b      	b.n	800c37c <_strtod_l+0x4ac>
 800c724:	f04f 32ff 	mov.w	r2, #4294967295
 800c728:	fa02 f303 	lsl.w	r3, r2, r3
 800c72c:	ea03 0a0a 	and.w	sl, r3, sl
 800c730:	e6de      	b.n	800c4f0 <_strtod_l+0x620>
 800c732:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c736:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c73a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c73e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c742:	fa01 f308 	lsl.w	r3, r1, r8
 800c746:	930c      	str	r3, [sp, #48]	; 0x30
 800c748:	9111      	str	r1, [sp, #68]	; 0x44
 800c74a:	e741      	b.n	800c5d0 <_strtod_l+0x700>
 800c74c:	2300      	movs	r3, #0
 800c74e:	930c      	str	r3, [sp, #48]	; 0x30
 800c750:	2301      	movs	r3, #1
 800c752:	9311      	str	r3, [sp, #68]	; 0x44
 800c754:	e73c      	b.n	800c5d0 <_strtod_l+0x700>
 800c756:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c758:	4642      	mov	r2, r8
 800c75a:	4620      	mov	r0, r4
 800c75c:	f001 febc 	bl	800e4d8 <__lshift>
 800c760:	901e      	str	r0, [sp, #120]	; 0x78
 800c762:	2800      	cmp	r0, #0
 800c764:	f47f af66 	bne.w	800c634 <_strtod_l+0x764>
 800c768:	e5fe      	b.n	800c368 <_strtod_l+0x498>
 800c76a:	465f      	mov	r7, fp
 800c76c:	d16e      	bne.n	800c84c <_strtod_l+0x97c>
 800c76e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c770:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c774:	b342      	cbz	r2, 800c7c8 <_strtod_l+0x8f8>
 800c776:	4a32      	ldr	r2, [pc, #200]	; (800c840 <_strtod_l+0x970>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d128      	bne.n	800c7ce <_strtod_l+0x8fe>
 800c77c:	9b04      	ldr	r3, [sp, #16]
 800c77e:	4650      	mov	r0, sl
 800c780:	b1eb      	cbz	r3, 800c7be <_strtod_l+0x8ee>
 800c782:	4a2d      	ldr	r2, [pc, #180]	; (800c838 <_strtod_l+0x968>)
 800c784:	403a      	ands	r2, r7
 800c786:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c78a:	f04f 31ff 	mov.w	r1, #4294967295
 800c78e:	d819      	bhi.n	800c7c4 <_strtod_l+0x8f4>
 800c790:	0d12      	lsrs	r2, r2, #20
 800c792:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c796:	fa01 f303 	lsl.w	r3, r1, r3
 800c79a:	4298      	cmp	r0, r3
 800c79c:	d117      	bne.n	800c7ce <_strtod_l+0x8fe>
 800c79e:	4b29      	ldr	r3, [pc, #164]	; (800c844 <_strtod_l+0x974>)
 800c7a0:	429f      	cmp	r7, r3
 800c7a2:	d102      	bne.n	800c7aa <_strtod_l+0x8da>
 800c7a4:	3001      	adds	r0, #1
 800c7a6:	f43f addf 	beq.w	800c368 <_strtod_l+0x498>
 800c7aa:	4b23      	ldr	r3, [pc, #140]	; (800c838 <_strtod_l+0x968>)
 800c7ac:	403b      	ands	r3, r7
 800c7ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c7b2:	f04f 0a00 	mov.w	sl, #0
 800c7b6:	9b04      	ldr	r3, [sp, #16]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1a0      	bne.n	800c6fe <_strtod_l+0x82e>
 800c7bc:	e5de      	b.n	800c37c <_strtod_l+0x4ac>
 800c7be:	f04f 33ff 	mov.w	r3, #4294967295
 800c7c2:	e7ea      	b.n	800c79a <_strtod_l+0x8ca>
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	e7e8      	b.n	800c79a <_strtod_l+0x8ca>
 800c7c8:	ea53 030a 	orrs.w	r3, r3, sl
 800c7cc:	d088      	beq.n	800c6e0 <_strtod_l+0x810>
 800c7ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7d0:	b1db      	cbz	r3, 800c80a <_strtod_l+0x93a>
 800c7d2:	423b      	tst	r3, r7
 800c7d4:	d0ef      	beq.n	800c7b6 <_strtod_l+0x8e6>
 800c7d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7d8:	9a04      	ldr	r2, [sp, #16]
 800c7da:	4650      	mov	r0, sl
 800c7dc:	4659      	mov	r1, fp
 800c7de:	b1c3      	cbz	r3, 800c812 <_strtod_l+0x942>
 800c7e0:	f7ff fb57 	bl	800be92 <sulp>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c7ec:	f7f3 fd56 	bl	800029c <__adddf3>
 800c7f0:	4682      	mov	sl, r0
 800c7f2:	468b      	mov	fp, r1
 800c7f4:	e7df      	b.n	800c7b6 <_strtod_l+0x8e6>
 800c7f6:	4013      	ands	r3, r2
 800c7f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c7fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c800:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c804:	f04f 3aff 	mov.w	sl, #4294967295
 800c808:	e7d5      	b.n	800c7b6 <_strtod_l+0x8e6>
 800c80a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c80c:	ea13 0f0a 	tst.w	r3, sl
 800c810:	e7e0      	b.n	800c7d4 <_strtod_l+0x904>
 800c812:	f7ff fb3e 	bl	800be92 <sulp>
 800c816:	4602      	mov	r2, r0
 800c818:	460b      	mov	r3, r1
 800c81a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c81e:	f7f3 fd3b 	bl	8000298 <__aeabi_dsub>
 800c822:	2200      	movs	r2, #0
 800c824:	2300      	movs	r3, #0
 800c826:	4682      	mov	sl, r0
 800c828:	468b      	mov	fp, r1
 800c82a:	f7f4 f955 	bl	8000ad8 <__aeabi_dcmpeq>
 800c82e:	2800      	cmp	r0, #0
 800c830:	d0c1      	beq.n	800c7b6 <_strtod_l+0x8e6>
 800c832:	e60e      	b.n	800c452 <_strtod_l+0x582>
 800c834:	fffffc02 	.word	0xfffffc02
 800c838:	7ff00000 	.word	0x7ff00000
 800c83c:	39500000 	.word	0x39500000
 800c840:	000fffff 	.word	0x000fffff
 800c844:	7fefffff 	.word	0x7fefffff
 800c848:	0800fee0 	.word	0x0800fee0
 800c84c:	4631      	mov	r1, r6
 800c84e:	4628      	mov	r0, r5
 800c850:	f002 f82a 	bl	800e8a8 <__ratio>
 800c854:	ec59 8b10 	vmov	r8, r9, d0
 800c858:	ee10 0a10 	vmov	r0, s0
 800c85c:	2200      	movs	r2, #0
 800c85e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c862:	4649      	mov	r1, r9
 800c864:	f7f4 f94c 	bl	8000b00 <__aeabi_dcmple>
 800c868:	2800      	cmp	r0, #0
 800c86a:	d07c      	beq.n	800c966 <_strtod_l+0xa96>
 800c86c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d04c      	beq.n	800c90c <_strtod_l+0xa3c>
 800c872:	4b95      	ldr	r3, [pc, #596]	; (800cac8 <_strtod_l+0xbf8>)
 800c874:	2200      	movs	r2, #0
 800c876:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c87a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cac8 <_strtod_l+0xbf8>
 800c87e:	f04f 0800 	mov.w	r8, #0
 800c882:	4b92      	ldr	r3, [pc, #584]	; (800cacc <_strtod_l+0xbfc>)
 800c884:	403b      	ands	r3, r7
 800c886:	9311      	str	r3, [sp, #68]	; 0x44
 800c888:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c88a:	4b91      	ldr	r3, [pc, #580]	; (800cad0 <_strtod_l+0xc00>)
 800c88c:	429a      	cmp	r2, r3
 800c88e:	f040 80b2 	bne.w	800c9f6 <_strtod_l+0xb26>
 800c892:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c896:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c89a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c89e:	ec4b ab10 	vmov	d0, sl, fp
 800c8a2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800c8a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c8aa:	f001 ff25 	bl	800e6f8 <__ulp>
 800c8ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c8b2:	ec53 2b10 	vmov	r2, r3, d0
 800c8b6:	f7f3 fea7 	bl	8000608 <__aeabi_dmul>
 800c8ba:	4652      	mov	r2, sl
 800c8bc:	465b      	mov	r3, fp
 800c8be:	f7f3 fced 	bl	800029c <__adddf3>
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4981      	ldr	r1, [pc, #516]	; (800cacc <_strtod_l+0xbfc>)
 800c8c6:	4a83      	ldr	r2, [pc, #524]	; (800cad4 <_strtod_l+0xc04>)
 800c8c8:	4019      	ands	r1, r3
 800c8ca:	4291      	cmp	r1, r2
 800c8cc:	4682      	mov	sl, r0
 800c8ce:	d95e      	bls.n	800c98e <_strtod_l+0xabe>
 800c8d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d103      	bne.n	800c8e2 <_strtod_l+0xa12>
 800c8da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8dc:	3301      	adds	r3, #1
 800c8de:	f43f ad43 	beq.w	800c368 <_strtod_l+0x498>
 800c8e2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800cae0 <_strtod_l+0xc10>
 800c8e6:	f04f 3aff 	mov.w	sl, #4294967295
 800c8ea:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f001 fbd7 	bl	800e0a0 <_Bfree>
 800c8f2:	9907      	ldr	r1, [sp, #28]
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f001 fbd3 	bl	800e0a0 <_Bfree>
 800c8fa:	4631      	mov	r1, r6
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	f001 fbcf 	bl	800e0a0 <_Bfree>
 800c902:	4629      	mov	r1, r5
 800c904:	4620      	mov	r0, r4
 800c906:	f001 fbcb 	bl	800e0a0 <_Bfree>
 800c90a:	e613      	b.n	800c534 <_strtod_l+0x664>
 800c90c:	f1ba 0f00 	cmp.w	sl, #0
 800c910:	d11b      	bne.n	800c94a <_strtod_l+0xa7a>
 800c912:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c916:	b9f3      	cbnz	r3, 800c956 <_strtod_l+0xa86>
 800c918:	4b6b      	ldr	r3, [pc, #428]	; (800cac8 <_strtod_l+0xbf8>)
 800c91a:	2200      	movs	r2, #0
 800c91c:	4640      	mov	r0, r8
 800c91e:	4649      	mov	r1, r9
 800c920:	f7f4 f8e4 	bl	8000aec <__aeabi_dcmplt>
 800c924:	b9d0      	cbnz	r0, 800c95c <_strtod_l+0xa8c>
 800c926:	4640      	mov	r0, r8
 800c928:	4649      	mov	r1, r9
 800c92a:	4b6b      	ldr	r3, [pc, #428]	; (800cad8 <_strtod_l+0xc08>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	f7f3 fe6b 	bl	8000608 <__aeabi_dmul>
 800c932:	4680      	mov	r8, r0
 800c934:	4689      	mov	r9, r1
 800c936:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c93a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800c93e:	931b      	str	r3, [sp, #108]	; 0x6c
 800c940:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c944:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c948:	e79b      	b.n	800c882 <_strtod_l+0x9b2>
 800c94a:	f1ba 0f01 	cmp.w	sl, #1
 800c94e:	d102      	bne.n	800c956 <_strtod_l+0xa86>
 800c950:	2f00      	cmp	r7, #0
 800c952:	f43f ad7e 	beq.w	800c452 <_strtod_l+0x582>
 800c956:	4b61      	ldr	r3, [pc, #388]	; (800cadc <_strtod_l+0xc0c>)
 800c958:	2200      	movs	r2, #0
 800c95a:	e78c      	b.n	800c876 <_strtod_l+0x9a6>
 800c95c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800cad8 <_strtod_l+0xc08>
 800c960:	f04f 0800 	mov.w	r8, #0
 800c964:	e7e7      	b.n	800c936 <_strtod_l+0xa66>
 800c966:	4b5c      	ldr	r3, [pc, #368]	; (800cad8 <_strtod_l+0xc08>)
 800c968:	4640      	mov	r0, r8
 800c96a:	4649      	mov	r1, r9
 800c96c:	2200      	movs	r2, #0
 800c96e:	f7f3 fe4b 	bl	8000608 <__aeabi_dmul>
 800c972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c974:	4680      	mov	r8, r0
 800c976:	4689      	mov	r9, r1
 800c978:	b933      	cbnz	r3, 800c988 <_strtod_l+0xab8>
 800c97a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c97e:	9012      	str	r0, [sp, #72]	; 0x48
 800c980:	9313      	str	r3, [sp, #76]	; 0x4c
 800c982:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c986:	e7dd      	b.n	800c944 <_strtod_l+0xa74>
 800c988:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800c98c:	e7f9      	b.n	800c982 <_strtod_l+0xab2>
 800c98e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c992:	9b04      	ldr	r3, [sp, #16]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d1a8      	bne.n	800c8ea <_strtod_l+0xa1a>
 800c998:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c99c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c99e:	0d1b      	lsrs	r3, r3, #20
 800c9a0:	051b      	lsls	r3, r3, #20
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d1a1      	bne.n	800c8ea <_strtod_l+0xa1a>
 800c9a6:	4640      	mov	r0, r8
 800c9a8:	4649      	mov	r1, r9
 800c9aa:	f7f4 f98d 	bl	8000cc8 <__aeabi_d2lz>
 800c9ae:	f7f3 fdfd 	bl	80005ac <__aeabi_l2d>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	4640      	mov	r0, r8
 800c9b8:	4649      	mov	r1, r9
 800c9ba:	f7f3 fc6d 	bl	8000298 <__aeabi_dsub>
 800c9be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c9c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9c4:	ea43 030a 	orr.w	r3, r3, sl
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	4680      	mov	r8, r0
 800c9cc:	4689      	mov	r9, r1
 800c9ce:	d053      	beq.n	800ca78 <_strtod_l+0xba8>
 800c9d0:	a335      	add	r3, pc, #212	; (adr r3, 800caa8 <_strtod_l+0xbd8>)
 800c9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d6:	f7f4 f889 	bl	8000aec <__aeabi_dcmplt>
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	f47f acce 	bne.w	800c37c <_strtod_l+0x4ac>
 800c9e0:	a333      	add	r3, pc, #204	; (adr r3, 800cab0 <_strtod_l+0xbe0>)
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	4640      	mov	r0, r8
 800c9e8:	4649      	mov	r1, r9
 800c9ea:	f7f4 f89d 	bl	8000b28 <__aeabi_dcmpgt>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	f43f af7b 	beq.w	800c8ea <_strtod_l+0xa1a>
 800c9f4:	e4c2      	b.n	800c37c <_strtod_l+0x4ac>
 800c9f6:	9b04      	ldr	r3, [sp, #16]
 800c9f8:	b333      	cbz	r3, 800ca48 <_strtod_l+0xb78>
 800c9fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ca00:	d822      	bhi.n	800ca48 <_strtod_l+0xb78>
 800ca02:	a32d      	add	r3, pc, #180	; (adr r3, 800cab8 <_strtod_l+0xbe8>)
 800ca04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca08:	4640      	mov	r0, r8
 800ca0a:	4649      	mov	r1, r9
 800ca0c:	f7f4 f878 	bl	8000b00 <__aeabi_dcmple>
 800ca10:	b1a0      	cbz	r0, 800ca3c <_strtod_l+0xb6c>
 800ca12:	4649      	mov	r1, r9
 800ca14:	4640      	mov	r0, r8
 800ca16:	f7f4 f8cf 	bl	8000bb8 <__aeabi_d2uiz>
 800ca1a:	2801      	cmp	r0, #1
 800ca1c:	bf38      	it	cc
 800ca1e:	2001      	movcc	r0, #1
 800ca20:	f7f3 fd78 	bl	8000514 <__aeabi_ui2d>
 800ca24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca26:	4680      	mov	r8, r0
 800ca28:	4689      	mov	r9, r1
 800ca2a:	bb13      	cbnz	r3, 800ca72 <_strtod_l+0xba2>
 800ca2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca30:	9014      	str	r0, [sp, #80]	; 0x50
 800ca32:	9315      	str	r3, [sp, #84]	; 0x54
 800ca34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ca38:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ca3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ca40:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ca44:	1a9b      	subs	r3, r3, r2
 800ca46:	930d      	str	r3, [sp, #52]	; 0x34
 800ca48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ca4c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ca50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ca54:	f001 fe50 	bl	800e6f8 <__ulp>
 800ca58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ca5c:	ec53 2b10 	vmov	r2, r3, d0
 800ca60:	f7f3 fdd2 	bl	8000608 <__aeabi_dmul>
 800ca64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ca68:	f7f3 fc18 	bl	800029c <__adddf3>
 800ca6c:	4682      	mov	sl, r0
 800ca6e:	468b      	mov	fp, r1
 800ca70:	e78f      	b.n	800c992 <_strtod_l+0xac2>
 800ca72:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800ca76:	e7dd      	b.n	800ca34 <_strtod_l+0xb64>
 800ca78:	a311      	add	r3, pc, #68	; (adr r3, 800cac0 <_strtod_l+0xbf0>)
 800ca7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7e:	f7f4 f835 	bl	8000aec <__aeabi_dcmplt>
 800ca82:	e7b4      	b.n	800c9ee <_strtod_l+0xb1e>
 800ca84:	2300      	movs	r3, #0
 800ca86:	930e      	str	r3, [sp, #56]	; 0x38
 800ca88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ca8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca8c:	6013      	str	r3, [r2, #0]
 800ca8e:	f7ff ba65 	b.w	800bf5c <_strtod_l+0x8c>
 800ca92:	2b65      	cmp	r3, #101	; 0x65
 800ca94:	f43f ab5d 	beq.w	800c152 <_strtod_l+0x282>
 800ca98:	2b45      	cmp	r3, #69	; 0x45
 800ca9a:	f43f ab5a 	beq.w	800c152 <_strtod_l+0x282>
 800ca9e:	2201      	movs	r2, #1
 800caa0:	f7ff bb92 	b.w	800c1c8 <_strtod_l+0x2f8>
 800caa4:	f3af 8000 	nop.w
 800caa8:	94a03595 	.word	0x94a03595
 800caac:	3fdfffff 	.word	0x3fdfffff
 800cab0:	35afe535 	.word	0x35afe535
 800cab4:	3fe00000 	.word	0x3fe00000
 800cab8:	ffc00000 	.word	0xffc00000
 800cabc:	41dfffff 	.word	0x41dfffff
 800cac0:	94a03595 	.word	0x94a03595
 800cac4:	3fcfffff 	.word	0x3fcfffff
 800cac8:	3ff00000 	.word	0x3ff00000
 800cacc:	7ff00000 	.word	0x7ff00000
 800cad0:	7fe00000 	.word	0x7fe00000
 800cad4:	7c9fffff 	.word	0x7c9fffff
 800cad8:	3fe00000 	.word	0x3fe00000
 800cadc:	bff00000 	.word	0xbff00000
 800cae0:	7fefffff 	.word	0x7fefffff

0800cae4 <strtod>:
 800cae4:	460a      	mov	r2, r1
 800cae6:	4601      	mov	r1, r0
 800cae8:	4802      	ldr	r0, [pc, #8]	; (800caf4 <strtod+0x10>)
 800caea:	4b03      	ldr	r3, [pc, #12]	; (800caf8 <strtod+0x14>)
 800caec:	6800      	ldr	r0, [r0, #0]
 800caee:	f7ff b9ef 	b.w	800bed0 <_strtod_l>
 800caf2:	bf00      	nop
 800caf4:	20000028 	.word	0x20000028
 800caf8:	20000090 	.word	0x20000090

0800cafc <strtok>:
 800cafc:	4b16      	ldr	r3, [pc, #88]	; (800cb58 <strtok+0x5c>)
 800cafe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb00:	681e      	ldr	r6, [r3, #0]
 800cb02:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800cb04:	4605      	mov	r5, r0
 800cb06:	b9fc      	cbnz	r4, 800cb48 <strtok+0x4c>
 800cb08:	2050      	movs	r0, #80	; 0x50
 800cb0a:	9101      	str	r1, [sp, #4]
 800cb0c:	f001 fa6e 	bl	800dfec <malloc>
 800cb10:	9901      	ldr	r1, [sp, #4]
 800cb12:	65b0      	str	r0, [r6, #88]	; 0x58
 800cb14:	4602      	mov	r2, r0
 800cb16:	b920      	cbnz	r0, 800cb22 <strtok+0x26>
 800cb18:	4b10      	ldr	r3, [pc, #64]	; (800cb5c <strtok+0x60>)
 800cb1a:	4811      	ldr	r0, [pc, #68]	; (800cb60 <strtok+0x64>)
 800cb1c:	2157      	movs	r1, #87	; 0x57
 800cb1e:	f000 f849 	bl	800cbb4 <__assert_func>
 800cb22:	e9c0 4400 	strd	r4, r4, [r0]
 800cb26:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800cb2a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800cb2e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800cb32:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800cb36:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800cb3a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800cb3e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800cb42:	6184      	str	r4, [r0, #24]
 800cb44:	7704      	strb	r4, [r0, #28]
 800cb46:	6244      	str	r4, [r0, #36]	; 0x24
 800cb48:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	b002      	add	sp, #8
 800cb50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb54:	f000 b806 	b.w	800cb64 <__strtok_r>
 800cb58:	20000028 	.word	0x20000028
 800cb5c:	0800ff08 	.word	0x0800ff08
 800cb60:	0800ff1f 	.word	0x0800ff1f

0800cb64 <__strtok_r>:
 800cb64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb66:	b908      	cbnz	r0, 800cb6c <__strtok_r+0x8>
 800cb68:	6810      	ldr	r0, [r2, #0]
 800cb6a:	b188      	cbz	r0, 800cb90 <__strtok_r+0x2c>
 800cb6c:	4604      	mov	r4, r0
 800cb6e:	4620      	mov	r0, r4
 800cb70:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cb74:	460f      	mov	r7, r1
 800cb76:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cb7a:	b91e      	cbnz	r6, 800cb84 <__strtok_r+0x20>
 800cb7c:	b965      	cbnz	r5, 800cb98 <__strtok_r+0x34>
 800cb7e:	6015      	str	r5, [r2, #0]
 800cb80:	4628      	mov	r0, r5
 800cb82:	e005      	b.n	800cb90 <__strtok_r+0x2c>
 800cb84:	42b5      	cmp	r5, r6
 800cb86:	d1f6      	bne.n	800cb76 <__strtok_r+0x12>
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d1f0      	bne.n	800cb6e <__strtok_r+0xa>
 800cb8c:	6014      	str	r4, [r2, #0]
 800cb8e:	7003      	strb	r3, [r0, #0]
 800cb90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb92:	461c      	mov	r4, r3
 800cb94:	e00c      	b.n	800cbb0 <__strtok_r+0x4c>
 800cb96:	b915      	cbnz	r5, 800cb9e <__strtok_r+0x3a>
 800cb98:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cb9c:	460e      	mov	r6, r1
 800cb9e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800cba2:	42ab      	cmp	r3, r5
 800cba4:	d1f7      	bne.n	800cb96 <__strtok_r+0x32>
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d0f3      	beq.n	800cb92 <__strtok_r+0x2e>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	f804 3c01 	strb.w	r3, [r4, #-1]
 800cbb0:	6014      	str	r4, [r2, #0]
 800cbb2:	e7ed      	b.n	800cb90 <__strtok_r+0x2c>

0800cbb4 <__assert_func>:
 800cbb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbb6:	4614      	mov	r4, r2
 800cbb8:	461a      	mov	r2, r3
 800cbba:	4b09      	ldr	r3, [pc, #36]	; (800cbe0 <__assert_func+0x2c>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4605      	mov	r5, r0
 800cbc0:	68d8      	ldr	r0, [r3, #12]
 800cbc2:	b14c      	cbz	r4, 800cbd8 <__assert_func+0x24>
 800cbc4:	4b07      	ldr	r3, [pc, #28]	; (800cbe4 <__assert_func+0x30>)
 800cbc6:	9100      	str	r1, [sp, #0]
 800cbc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbcc:	4906      	ldr	r1, [pc, #24]	; (800cbe8 <__assert_func+0x34>)
 800cbce:	462b      	mov	r3, r5
 800cbd0:	f000 fe86 	bl	800d8e0 <fiprintf>
 800cbd4:	f002 fb48 	bl	800f268 <abort>
 800cbd8:	4b04      	ldr	r3, [pc, #16]	; (800cbec <__assert_func+0x38>)
 800cbda:	461c      	mov	r4, r3
 800cbdc:	e7f3      	b.n	800cbc6 <__assert_func+0x12>
 800cbde:	bf00      	nop
 800cbe0:	20000028 	.word	0x20000028
 800cbe4:	0800ff80 	.word	0x0800ff80
 800cbe8:	0800ff8d 	.word	0x0800ff8d
 800cbec:	0800ffbb 	.word	0x0800ffbb

0800cbf0 <quorem>:
 800cbf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf4:	6903      	ldr	r3, [r0, #16]
 800cbf6:	690c      	ldr	r4, [r1, #16]
 800cbf8:	42a3      	cmp	r3, r4
 800cbfa:	4607      	mov	r7, r0
 800cbfc:	f2c0 8081 	blt.w	800cd02 <quorem+0x112>
 800cc00:	3c01      	subs	r4, #1
 800cc02:	f101 0814 	add.w	r8, r1, #20
 800cc06:	f100 0514 	add.w	r5, r0, #20
 800cc0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc0e:	9301      	str	r3, [sp, #4]
 800cc10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cc14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cc20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cc24:	fbb2 f6f3 	udiv	r6, r2, r3
 800cc28:	d331      	bcc.n	800cc8e <quorem+0x9e>
 800cc2a:	f04f 0e00 	mov.w	lr, #0
 800cc2e:	4640      	mov	r0, r8
 800cc30:	46ac      	mov	ip, r5
 800cc32:	46f2      	mov	sl, lr
 800cc34:	f850 2b04 	ldr.w	r2, [r0], #4
 800cc38:	b293      	uxth	r3, r2
 800cc3a:	fb06 e303 	mla	r3, r6, r3, lr
 800cc3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	ebaa 0303 	sub.w	r3, sl, r3
 800cc48:	0c12      	lsrs	r2, r2, #16
 800cc4a:	f8dc a000 	ldr.w	sl, [ip]
 800cc4e:	fb06 e202 	mla	r2, r6, r2, lr
 800cc52:	fa13 f38a 	uxtah	r3, r3, sl
 800cc56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cc5a:	fa1f fa82 	uxth.w	sl, r2
 800cc5e:	f8dc 2000 	ldr.w	r2, [ip]
 800cc62:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800cc66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc70:	4581      	cmp	r9, r0
 800cc72:	f84c 3b04 	str.w	r3, [ip], #4
 800cc76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cc7a:	d2db      	bcs.n	800cc34 <quorem+0x44>
 800cc7c:	f855 300b 	ldr.w	r3, [r5, fp]
 800cc80:	b92b      	cbnz	r3, 800cc8e <quorem+0x9e>
 800cc82:	9b01      	ldr	r3, [sp, #4]
 800cc84:	3b04      	subs	r3, #4
 800cc86:	429d      	cmp	r5, r3
 800cc88:	461a      	mov	r2, r3
 800cc8a:	d32e      	bcc.n	800ccea <quorem+0xfa>
 800cc8c:	613c      	str	r4, [r7, #16]
 800cc8e:	4638      	mov	r0, r7
 800cc90:	f001 fc8e 	bl	800e5b0 <__mcmp>
 800cc94:	2800      	cmp	r0, #0
 800cc96:	db24      	blt.n	800cce2 <quorem+0xf2>
 800cc98:	3601      	adds	r6, #1
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	f04f 0c00 	mov.w	ip, #0
 800cca0:	f858 2b04 	ldr.w	r2, [r8], #4
 800cca4:	f8d0 e000 	ldr.w	lr, [r0]
 800cca8:	b293      	uxth	r3, r2
 800ccaa:	ebac 0303 	sub.w	r3, ip, r3
 800ccae:	0c12      	lsrs	r2, r2, #16
 800ccb0:	fa13 f38e 	uxtah	r3, r3, lr
 800ccb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ccb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccc2:	45c1      	cmp	r9, r8
 800ccc4:	f840 3b04 	str.w	r3, [r0], #4
 800ccc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cccc:	d2e8      	bcs.n	800cca0 <quorem+0xb0>
 800ccce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ccd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ccd6:	b922      	cbnz	r2, 800cce2 <quorem+0xf2>
 800ccd8:	3b04      	subs	r3, #4
 800ccda:	429d      	cmp	r5, r3
 800ccdc:	461a      	mov	r2, r3
 800ccde:	d30a      	bcc.n	800ccf6 <quorem+0x106>
 800cce0:	613c      	str	r4, [r7, #16]
 800cce2:	4630      	mov	r0, r6
 800cce4:	b003      	add	sp, #12
 800cce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccea:	6812      	ldr	r2, [r2, #0]
 800ccec:	3b04      	subs	r3, #4
 800ccee:	2a00      	cmp	r2, #0
 800ccf0:	d1cc      	bne.n	800cc8c <quorem+0x9c>
 800ccf2:	3c01      	subs	r4, #1
 800ccf4:	e7c7      	b.n	800cc86 <quorem+0x96>
 800ccf6:	6812      	ldr	r2, [r2, #0]
 800ccf8:	3b04      	subs	r3, #4
 800ccfa:	2a00      	cmp	r2, #0
 800ccfc:	d1f0      	bne.n	800cce0 <quorem+0xf0>
 800ccfe:	3c01      	subs	r4, #1
 800cd00:	e7eb      	b.n	800ccda <quorem+0xea>
 800cd02:	2000      	movs	r0, #0
 800cd04:	e7ee      	b.n	800cce4 <quorem+0xf4>
	...

0800cd08 <_dtoa_r>:
 800cd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd0c:	ed2d 8b02 	vpush	{d8}
 800cd10:	ec57 6b10 	vmov	r6, r7, d0
 800cd14:	b095      	sub	sp, #84	; 0x54
 800cd16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cd18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cd1c:	9105      	str	r1, [sp, #20]
 800cd1e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cd22:	4604      	mov	r4, r0
 800cd24:	9209      	str	r2, [sp, #36]	; 0x24
 800cd26:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd28:	b975      	cbnz	r5, 800cd48 <_dtoa_r+0x40>
 800cd2a:	2010      	movs	r0, #16
 800cd2c:	f001 f95e 	bl	800dfec <malloc>
 800cd30:	4602      	mov	r2, r0
 800cd32:	6260      	str	r0, [r4, #36]	; 0x24
 800cd34:	b920      	cbnz	r0, 800cd40 <_dtoa_r+0x38>
 800cd36:	4bb2      	ldr	r3, [pc, #712]	; (800d000 <_dtoa_r+0x2f8>)
 800cd38:	21ea      	movs	r1, #234	; 0xea
 800cd3a:	48b2      	ldr	r0, [pc, #712]	; (800d004 <_dtoa_r+0x2fc>)
 800cd3c:	f7ff ff3a 	bl	800cbb4 <__assert_func>
 800cd40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cd44:	6005      	str	r5, [r0, #0]
 800cd46:	60c5      	str	r5, [r0, #12]
 800cd48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd4a:	6819      	ldr	r1, [r3, #0]
 800cd4c:	b151      	cbz	r1, 800cd64 <_dtoa_r+0x5c>
 800cd4e:	685a      	ldr	r2, [r3, #4]
 800cd50:	604a      	str	r2, [r1, #4]
 800cd52:	2301      	movs	r3, #1
 800cd54:	4093      	lsls	r3, r2
 800cd56:	608b      	str	r3, [r1, #8]
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f001 f9a1 	bl	800e0a0 <_Bfree>
 800cd5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd60:	2200      	movs	r2, #0
 800cd62:	601a      	str	r2, [r3, #0]
 800cd64:	1e3b      	subs	r3, r7, #0
 800cd66:	bfb9      	ittee	lt
 800cd68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cd6c:	9303      	strlt	r3, [sp, #12]
 800cd6e:	2300      	movge	r3, #0
 800cd70:	f8c8 3000 	strge.w	r3, [r8]
 800cd74:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cd78:	4ba3      	ldr	r3, [pc, #652]	; (800d008 <_dtoa_r+0x300>)
 800cd7a:	bfbc      	itt	lt
 800cd7c:	2201      	movlt	r2, #1
 800cd7e:	f8c8 2000 	strlt.w	r2, [r8]
 800cd82:	ea33 0309 	bics.w	r3, r3, r9
 800cd86:	d11b      	bne.n	800cdc0 <_dtoa_r+0xb8>
 800cd88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd8a:	f242 730f 	movw	r3, #9999	; 0x270f
 800cd8e:	6013      	str	r3, [r2, #0]
 800cd90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd94:	4333      	orrs	r3, r6
 800cd96:	f000 857a 	beq.w	800d88e <_dtoa_r+0xb86>
 800cd9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd9c:	b963      	cbnz	r3, 800cdb8 <_dtoa_r+0xb0>
 800cd9e:	4b9b      	ldr	r3, [pc, #620]	; (800d00c <_dtoa_r+0x304>)
 800cda0:	e024      	b.n	800cdec <_dtoa_r+0xe4>
 800cda2:	4b9b      	ldr	r3, [pc, #620]	; (800d010 <_dtoa_r+0x308>)
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	3308      	adds	r3, #8
 800cda8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cdaa:	6013      	str	r3, [r2, #0]
 800cdac:	9800      	ldr	r0, [sp, #0]
 800cdae:	b015      	add	sp, #84	; 0x54
 800cdb0:	ecbd 8b02 	vpop	{d8}
 800cdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb8:	4b94      	ldr	r3, [pc, #592]	; (800d00c <_dtoa_r+0x304>)
 800cdba:	9300      	str	r3, [sp, #0]
 800cdbc:	3303      	adds	r3, #3
 800cdbe:	e7f3      	b.n	800cda8 <_dtoa_r+0xa0>
 800cdc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	ec51 0b17 	vmov	r0, r1, d7
 800cdca:	2300      	movs	r3, #0
 800cdcc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cdd0:	f7f3 fe82 	bl	8000ad8 <__aeabi_dcmpeq>
 800cdd4:	4680      	mov	r8, r0
 800cdd6:	b158      	cbz	r0, 800cdf0 <_dtoa_r+0xe8>
 800cdd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cdda:	2301      	movs	r3, #1
 800cddc:	6013      	str	r3, [r2, #0]
 800cdde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f000 8551 	beq.w	800d888 <_dtoa_r+0xb80>
 800cde6:	488b      	ldr	r0, [pc, #556]	; (800d014 <_dtoa_r+0x30c>)
 800cde8:	6018      	str	r0, [r3, #0]
 800cdea:	1e43      	subs	r3, r0, #1
 800cdec:	9300      	str	r3, [sp, #0]
 800cdee:	e7dd      	b.n	800cdac <_dtoa_r+0xa4>
 800cdf0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cdf4:	aa12      	add	r2, sp, #72	; 0x48
 800cdf6:	a913      	add	r1, sp, #76	; 0x4c
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	f001 fcf9 	bl	800e7f0 <__d2b>
 800cdfe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ce02:	4683      	mov	fp, r0
 800ce04:	2d00      	cmp	r5, #0
 800ce06:	d07c      	beq.n	800cf02 <_dtoa_r+0x1fa>
 800ce08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce0a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ce0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce12:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ce16:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ce1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ce1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ce22:	4b7d      	ldr	r3, [pc, #500]	; (800d018 <_dtoa_r+0x310>)
 800ce24:	2200      	movs	r2, #0
 800ce26:	4630      	mov	r0, r6
 800ce28:	4639      	mov	r1, r7
 800ce2a:	f7f3 fa35 	bl	8000298 <__aeabi_dsub>
 800ce2e:	a36e      	add	r3, pc, #440	; (adr r3, 800cfe8 <_dtoa_r+0x2e0>)
 800ce30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce34:	f7f3 fbe8 	bl	8000608 <__aeabi_dmul>
 800ce38:	a36d      	add	r3, pc, #436	; (adr r3, 800cff0 <_dtoa_r+0x2e8>)
 800ce3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3e:	f7f3 fa2d 	bl	800029c <__adddf3>
 800ce42:	4606      	mov	r6, r0
 800ce44:	4628      	mov	r0, r5
 800ce46:	460f      	mov	r7, r1
 800ce48:	f7f3 fb74 	bl	8000534 <__aeabi_i2d>
 800ce4c:	a36a      	add	r3, pc, #424	; (adr r3, 800cff8 <_dtoa_r+0x2f0>)
 800ce4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce52:	f7f3 fbd9 	bl	8000608 <__aeabi_dmul>
 800ce56:	4602      	mov	r2, r0
 800ce58:	460b      	mov	r3, r1
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	4639      	mov	r1, r7
 800ce5e:	f7f3 fa1d 	bl	800029c <__adddf3>
 800ce62:	4606      	mov	r6, r0
 800ce64:	460f      	mov	r7, r1
 800ce66:	f7f3 fe7f 	bl	8000b68 <__aeabi_d2iz>
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	4682      	mov	sl, r0
 800ce6e:	2300      	movs	r3, #0
 800ce70:	4630      	mov	r0, r6
 800ce72:	4639      	mov	r1, r7
 800ce74:	f7f3 fe3a 	bl	8000aec <__aeabi_dcmplt>
 800ce78:	b148      	cbz	r0, 800ce8e <_dtoa_r+0x186>
 800ce7a:	4650      	mov	r0, sl
 800ce7c:	f7f3 fb5a 	bl	8000534 <__aeabi_i2d>
 800ce80:	4632      	mov	r2, r6
 800ce82:	463b      	mov	r3, r7
 800ce84:	f7f3 fe28 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce88:	b908      	cbnz	r0, 800ce8e <_dtoa_r+0x186>
 800ce8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce8e:	f1ba 0f16 	cmp.w	sl, #22
 800ce92:	d854      	bhi.n	800cf3e <_dtoa_r+0x236>
 800ce94:	4b61      	ldr	r3, [pc, #388]	; (800d01c <_dtoa_r+0x314>)
 800ce96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ce9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cea2:	f7f3 fe23 	bl	8000aec <__aeabi_dcmplt>
 800cea6:	2800      	cmp	r0, #0
 800cea8:	d04b      	beq.n	800cf42 <_dtoa_r+0x23a>
 800ceaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ceae:	2300      	movs	r3, #0
 800ceb0:	930e      	str	r3, [sp, #56]	; 0x38
 800ceb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ceb4:	1b5d      	subs	r5, r3, r5
 800ceb6:	1e6b      	subs	r3, r5, #1
 800ceb8:	9304      	str	r3, [sp, #16]
 800ceba:	bf43      	ittte	mi
 800cebc:	2300      	movmi	r3, #0
 800cebe:	f1c5 0801 	rsbmi	r8, r5, #1
 800cec2:	9304      	strmi	r3, [sp, #16]
 800cec4:	f04f 0800 	movpl.w	r8, #0
 800cec8:	f1ba 0f00 	cmp.w	sl, #0
 800cecc:	db3b      	blt.n	800cf46 <_dtoa_r+0x23e>
 800cece:	9b04      	ldr	r3, [sp, #16]
 800ced0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ced4:	4453      	add	r3, sl
 800ced6:	9304      	str	r3, [sp, #16]
 800ced8:	2300      	movs	r3, #0
 800ceda:	9306      	str	r3, [sp, #24]
 800cedc:	9b05      	ldr	r3, [sp, #20]
 800cede:	2b09      	cmp	r3, #9
 800cee0:	d869      	bhi.n	800cfb6 <_dtoa_r+0x2ae>
 800cee2:	2b05      	cmp	r3, #5
 800cee4:	bfc4      	itt	gt
 800cee6:	3b04      	subgt	r3, #4
 800cee8:	9305      	strgt	r3, [sp, #20]
 800ceea:	9b05      	ldr	r3, [sp, #20]
 800ceec:	f1a3 0302 	sub.w	r3, r3, #2
 800cef0:	bfcc      	ite	gt
 800cef2:	2500      	movgt	r5, #0
 800cef4:	2501      	movle	r5, #1
 800cef6:	2b03      	cmp	r3, #3
 800cef8:	d869      	bhi.n	800cfce <_dtoa_r+0x2c6>
 800cefa:	e8df f003 	tbb	[pc, r3]
 800cefe:	4e2c      	.short	0x4e2c
 800cf00:	5a4c      	.short	0x5a4c
 800cf02:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800cf06:	441d      	add	r5, r3
 800cf08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cf0c:	2b20      	cmp	r3, #32
 800cf0e:	bfc1      	itttt	gt
 800cf10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cf14:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cf18:	fa09 f303 	lslgt.w	r3, r9, r3
 800cf1c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cf20:	bfda      	itte	le
 800cf22:	f1c3 0320 	rsble	r3, r3, #32
 800cf26:	fa06 f003 	lslle.w	r0, r6, r3
 800cf2a:	4318      	orrgt	r0, r3
 800cf2c:	f7f3 faf2 	bl	8000514 <__aeabi_ui2d>
 800cf30:	2301      	movs	r3, #1
 800cf32:	4606      	mov	r6, r0
 800cf34:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cf38:	3d01      	subs	r5, #1
 800cf3a:	9310      	str	r3, [sp, #64]	; 0x40
 800cf3c:	e771      	b.n	800ce22 <_dtoa_r+0x11a>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e7b6      	b.n	800ceb0 <_dtoa_r+0x1a8>
 800cf42:	900e      	str	r0, [sp, #56]	; 0x38
 800cf44:	e7b5      	b.n	800ceb2 <_dtoa_r+0x1aa>
 800cf46:	f1ca 0300 	rsb	r3, sl, #0
 800cf4a:	9306      	str	r3, [sp, #24]
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	eba8 080a 	sub.w	r8, r8, sl
 800cf52:	930d      	str	r3, [sp, #52]	; 0x34
 800cf54:	e7c2      	b.n	800cedc <_dtoa_r+0x1d4>
 800cf56:	2300      	movs	r3, #0
 800cf58:	9308      	str	r3, [sp, #32]
 800cf5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	dc39      	bgt.n	800cfd4 <_dtoa_r+0x2cc>
 800cf60:	f04f 0901 	mov.w	r9, #1
 800cf64:	f8cd 9004 	str.w	r9, [sp, #4]
 800cf68:	464b      	mov	r3, r9
 800cf6a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cf6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cf70:	2200      	movs	r2, #0
 800cf72:	6042      	str	r2, [r0, #4]
 800cf74:	2204      	movs	r2, #4
 800cf76:	f102 0614 	add.w	r6, r2, #20
 800cf7a:	429e      	cmp	r6, r3
 800cf7c:	6841      	ldr	r1, [r0, #4]
 800cf7e:	d92f      	bls.n	800cfe0 <_dtoa_r+0x2d8>
 800cf80:	4620      	mov	r0, r4
 800cf82:	f001 f84d 	bl	800e020 <_Balloc>
 800cf86:	9000      	str	r0, [sp, #0]
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d14b      	bne.n	800d024 <_dtoa_r+0x31c>
 800cf8c:	4b24      	ldr	r3, [pc, #144]	; (800d020 <_dtoa_r+0x318>)
 800cf8e:	4602      	mov	r2, r0
 800cf90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cf94:	e6d1      	b.n	800cd3a <_dtoa_r+0x32>
 800cf96:	2301      	movs	r3, #1
 800cf98:	e7de      	b.n	800cf58 <_dtoa_r+0x250>
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	9308      	str	r3, [sp, #32]
 800cf9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfa0:	eb0a 0903 	add.w	r9, sl, r3
 800cfa4:	f109 0301 	add.w	r3, r9, #1
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	9301      	str	r3, [sp, #4]
 800cfac:	bfb8      	it	lt
 800cfae:	2301      	movlt	r3, #1
 800cfb0:	e7dd      	b.n	800cf6e <_dtoa_r+0x266>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e7f2      	b.n	800cf9c <_dtoa_r+0x294>
 800cfb6:	2501      	movs	r5, #1
 800cfb8:	2300      	movs	r3, #0
 800cfba:	9305      	str	r3, [sp, #20]
 800cfbc:	9508      	str	r5, [sp, #32]
 800cfbe:	f04f 39ff 	mov.w	r9, #4294967295
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f8cd 9004 	str.w	r9, [sp, #4]
 800cfc8:	2312      	movs	r3, #18
 800cfca:	9209      	str	r2, [sp, #36]	; 0x24
 800cfcc:	e7cf      	b.n	800cf6e <_dtoa_r+0x266>
 800cfce:	2301      	movs	r3, #1
 800cfd0:	9308      	str	r3, [sp, #32]
 800cfd2:	e7f4      	b.n	800cfbe <_dtoa_r+0x2b6>
 800cfd4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cfd8:	f8cd 9004 	str.w	r9, [sp, #4]
 800cfdc:	464b      	mov	r3, r9
 800cfde:	e7c6      	b.n	800cf6e <_dtoa_r+0x266>
 800cfe0:	3101      	adds	r1, #1
 800cfe2:	6041      	str	r1, [r0, #4]
 800cfe4:	0052      	lsls	r2, r2, #1
 800cfe6:	e7c6      	b.n	800cf76 <_dtoa_r+0x26e>
 800cfe8:	636f4361 	.word	0x636f4361
 800cfec:	3fd287a7 	.word	0x3fd287a7
 800cff0:	8b60c8b3 	.word	0x8b60c8b3
 800cff4:	3fc68a28 	.word	0x3fc68a28
 800cff8:	509f79fb 	.word	0x509f79fb
 800cffc:	3fd34413 	.word	0x3fd34413
 800d000:	0800ff08 	.word	0x0800ff08
 800d004:	0800ffc9 	.word	0x0800ffc9
 800d008:	7ff00000 	.word	0x7ff00000
 800d00c:	0800ffc5 	.word	0x0800ffc5
 800d010:	0800ffbc 	.word	0x0800ffbc
 800d014:	0800fe95 	.word	0x0800fe95
 800d018:	3ff80000 	.word	0x3ff80000
 800d01c:	08010140 	.word	0x08010140
 800d020:	08010028 	.word	0x08010028
 800d024:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d026:	9a00      	ldr	r2, [sp, #0]
 800d028:	601a      	str	r2, [r3, #0]
 800d02a:	9b01      	ldr	r3, [sp, #4]
 800d02c:	2b0e      	cmp	r3, #14
 800d02e:	f200 80ad 	bhi.w	800d18c <_dtoa_r+0x484>
 800d032:	2d00      	cmp	r5, #0
 800d034:	f000 80aa 	beq.w	800d18c <_dtoa_r+0x484>
 800d038:	f1ba 0f00 	cmp.w	sl, #0
 800d03c:	dd36      	ble.n	800d0ac <_dtoa_r+0x3a4>
 800d03e:	4ac3      	ldr	r2, [pc, #780]	; (800d34c <_dtoa_r+0x644>)
 800d040:	f00a 030f 	and.w	r3, sl, #15
 800d044:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d048:	ed93 7b00 	vldr	d7, [r3]
 800d04c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d050:	ea4f 172a 	mov.w	r7, sl, asr #4
 800d054:	eeb0 8a47 	vmov.f32	s16, s14
 800d058:	eef0 8a67 	vmov.f32	s17, s15
 800d05c:	d016      	beq.n	800d08c <_dtoa_r+0x384>
 800d05e:	4bbc      	ldr	r3, [pc, #752]	; (800d350 <_dtoa_r+0x648>)
 800d060:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d068:	f7f3 fbf8 	bl	800085c <__aeabi_ddiv>
 800d06c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d070:	f007 070f 	and.w	r7, r7, #15
 800d074:	2503      	movs	r5, #3
 800d076:	4eb6      	ldr	r6, [pc, #728]	; (800d350 <_dtoa_r+0x648>)
 800d078:	b957      	cbnz	r7, 800d090 <_dtoa_r+0x388>
 800d07a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d07e:	ec53 2b18 	vmov	r2, r3, d8
 800d082:	f7f3 fbeb 	bl	800085c <__aeabi_ddiv>
 800d086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d08a:	e029      	b.n	800d0e0 <_dtoa_r+0x3d8>
 800d08c:	2502      	movs	r5, #2
 800d08e:	e7f2      	b.n	800d076 <_dtoa_r+0x36e>
 800d090:	07f9      	lsls	r1, r7, #31
 800d092:	d508      	bpl.n	800d0a6 <_dtoa_r+0x39e>
 800d094:	ec51 0b18 	vmov	r0, r1, d8
 800d098:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d09c:	f7f3 fab4 	bl	8000608 <__aeabi_dmul>
 800d0a0:	ec41 0b18 	vmov	d8, r0, r1
 800d0a4:	3501      	adds	r5, #1
 800d0a6:	107f      	asrs	r7, r7, #1
 800d0a8:	3608      	adds	r6, #8
 800d0aa:	e7e5      	b.n	800d078 <_dtoa_r+0x370>
 800d0ac:	f000 80a6 	beq.w	800d1fc <_dtoa_r+0x4f4>
 800d0b0:	f1ca 0600 	rsb	r6, sl, #0
 800d0b4:	4ba5      	ldr	r3, [pc, #660]	; (800d34c <_dtoa_r+0x644>)
 800d0b6:	4fa6      	ldr	r7, [pc, #664]	; (800d350 <_dtoa_r+0x648>)
 800d0b8:	f006 020f 	and.w	r2, r6, #15
 800d0bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d0c8:	f7f3 fa9e 	bl	8000608 <__aeabi_dmul>
 800d0cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0d0:	1136      	asrs	r6, r6, #4
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	2502      	movs	r5, #2
 800d0d6:	2e00      	cmp	r6, #0
 800d0d8:	f040 8085 	bne.w	800d1e6 <_dtoa_r+0x4de>
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d1d2      	bne.n	800d086 <_dtoa_r+0x37e>
 800d0e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	f000 808c 	beq.w	800d200 <_dtoa_r+0x4f8>
 800d0e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d0ec:	4b99      	ldr	r3, [pc, #612]	; (800d354 <_dtoa_r+0x64c>)
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	4639      	mov	r1, r7
 800d0f4:	f7f3 fcfa 	bl	8000aec <__aeabi_dcmplt>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	f000 8081 	beq.w	800d200 <_dtoa_r+0x4f8>
 800d0fe:	9b01      	ldr	r3, [sp, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d07d      	beq.n	800d200 <_dtoa_r+0x4f8>
 800d104:	f1b9 0f00 	cmp.w	r9, #0
 800d108:	dd3c      	ble.n	800d184 <_dtoa_r+0x47c>
 800d10a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d10e:	9307      	str	r3, [sp, #28]
 800d110:	2200      	movs	r2, #0
 800d112:	4b91      	ldr	r3, [pc, #580]	; (800d358 <_dtoa_r+0x650>)
 800d114:	4630      	mov	r0, r6
 800d116:	4639      	mov	r1, r7
 800d118:	f7f3 fa76 	bl	8000608 <__aeabi_dmul>
 800d11c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d120:	3501      	adds	r5, #1
 800d122:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d126:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d12a:	4628      	mov	r0, r5
 800d12c:	f7f3 fa02 	bl	8000534 <__aeabi_i2d>
 800d130:	4632      	mov	r2, r6
 800d132:	463b      	mov	r3, r7
 800d134:	f7f3 fa68 	bl	8000608 <__aeabi_dmul>
 800d138:	4b88      	ldr	r3, [pc, #544]	; (800d35c <_dtoa_r+0x654>)
 800d13a:	2200      	movs	r2, #0
 800d13c:	f7f3 f8ae 	bl	800029c <__adddf3>
 800d140:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d148:	9303      	str	r3, [sp, #12]
 800d14a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d15c      	bne.n	800d20a <_dtoa_r+0x502>
 800d150:	4b83      	ldr	r3, [pc, #524]	; (800d360 <_dtoa_r+0x658>)
 800d152:	2200      	movs	r2, #0
 800d154:	4630      	mov	r0, r6
 800d156:	4639      	mov	r1, r7
 800d158:	f7f3 f89e 	bl	8000298 <__aeabi_dsub>
 800d15c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d160:	4606      	mov	r6, r0
 800d162:	460f      	mov	r7, r1
 800d164:	f7f3 fce0 	bl	8000b28 <__aeabi_dcmpgt>
 800d168:	2800      	cmp	r0, #0
 800d16a:	f040 8296 	bne.w	800d69a <_dtoa_r+0x992>
 800d16e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d172:	4630      	mov	r0, r6
 800d174:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d178:	4639      	mov	r1, r7
 800d17a:	f7f3 fcb7 	bl	8000aec <__aeabi_dcmplt>
 800d17e:	2800      	cmp	r0, #0
 800d180:	f040 8288 	bne.w	800d694 <_dtoa_r+0x98c>
 800d184:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d188:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d18c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d18e:	2b00      	cmp	r3, #0
 800d190:	f2c0 8158 	blt.w	800d444 <_dtoa_r+0x73c>
 800d194:	f1ba 0f0e 	cmp.w	sl, #14
 800d198:	f300 8154 	bgt.w	800d444 <_dtoa_r+0x73c>
 800d19c:	4b6b      	ldr	r3, [pc, #428]	; (800d34c <_dtoa_r+0x644>)
 800d19e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d1a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f280 80e3 	bge.w	800d374 <_dtoa_r+0x66c>
 800d1ae:	9b01      	ldr	r3, [sp, #4]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f300 80df 	bgt.w	800d374 <_dtoa_r+0x66c>
 800d1b6:	f040 826d 	bne.w	800d694 <_dtoa_r+0x98c>
 800d1ba:	4b69      	ldr	r3, [pc, #420]	; (800d360 <_dtoa_r+0x658>)
 800d1bc:	2200      	movs	r2, #0
 800d1be:	4640      	mov	r0, r8
 800d1c0:	4649      	mov	r1, r9
 800d1c2:	f7f3 fa21 	bl	8000608 <__aeabi_dmul>
 800d1c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1ca:	f7f3 fca3 	bl	8000b14 <__aeabi_dcmpge>
 800d1ce:	9e01      	ldr	r6, [sp, #4]
 800d1d0:	4637      	mov	r7, r6
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	f040 8243 	bne.w	800d65e <_dtoa_r+0x956>
 800d1d8:	9d00      	ldr	r5, [sp, #0]
 800d1da:	2331      	movs	r3, #49	; 0x31
 800d1dc:	f805 3b01 	strb.w	r3, [r5], #1
 800d1e0:	f10a 0a01 	add.w	sl, sl, #1
 800d1e4:	e23f      	b.n	800d666 <_dtoa_r+0x95e>
 800d1e6:	07f2      	lsls	r2, r6, #31
 800d1e8:	d505      	bpl.n	800d1f6 <_dtoa_r+0x4ee>
 800d1ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1ee:	f7f3 fa0b 	bl	8000608 <__aeabi_dmul>
 800d1f2:	3501      	adds	r5, #1
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	1076      	asrs	r6, r6, #1
 800d1f8:	3708      	adds	r7, #8
 800d1fa:	e76c      	b.n	800d0d6 <_dtoa_r+0x3ce>
 800d1fc:	2502      	movs	r5, #2
 800d1fe:	e76f      	b.n	800d0e0 <_dtoa_r+0x3d8>
 800d200:	9b01      	ldr	r3, [sp, #4]
 800d202:	f8cd a01c 	str.w	sl, [sp, #28]
 800d206:	930c      	str	r3, [sp, #48]	; 0x30
 800d208:	e78d      	b.n	800d126 <_dtoa_r+0x41e>
 800d20a:	9900      	ldr	r1, [sp, #0]
 800d20c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d20e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d210:	4b4e      	ldr	r3, [pc, #312]	; (800d34c <_dtoa_r+0x644>)
 800d212:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d216:	4401      	add	r1, r0
 800d218:	9102      	str	r1, [sp, #8]
 800d21a:	9908      	ldr	r1, [sp, #32]
 800d21c:	eeb0 8a47 	vmov.f32	s16, s14
 800d220:	eef0 8a67 	vmov.f32	s17, s15
 800d224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d228:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d22c:	2900      	cmp	r1, #0
 800d22e:	d045      	beq.n	800d2bc <_dtoa_r+0x5b4>
 800d230:	494c      	ldr	r1, [pc, #304]	; (800d364 <_dtoa_r+0x65c>)
 800d232:	2000      	movs	r0, #0
 800d234:	f7f3 fb12 	bl	800085c <__aeabi_ddiv>
 800d238:	ec53 2b18 	vmov	r2, r3, d8
 800d23c:	f7f3 f82c 	bl	8000298 <__aeabi_dsub>
 800d240:	9d00      	ldr	r5, [sp, #0]
 800d242:	ec41 0b18 	vmov	d8, r0, r1
 800d246:	4639      	mov	r1, r7
 800d248:	4630      	mov	r0, r6
 800d24a:	f7f3 fc8d 	bl	8000b68 <__aeabi_d2iz>
 800d24e:	900c      	str	r0, [sp, #48]	; 0x30
 800d250:	f7f3 f970 	bl	8000534 <__aeabi_i2d>
 800d254:	4602      	mov	r2, r0
 800d256:	460b      	mov	r3, r1
 800d258:	4630      	mov	r0, r6
 800d25a:	4639      	mov	r1, r7
 800d25c:	f7f3 f81c 	bl	8000298 <__aeabi_dsub>
 800d260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d262:	3330      	adds	r3, #48	; 0x30
 800d264:	f805 3b01 	strb.w	r3, [r5], #1
 800d268:	ec53 2b18 	vmov	r2, r3, d8
 800d26c:	4606      	mov	r6, r0
 800d26e:	460f      	mov	r7, r1
 800d270:	f7f3 fc3c 	bl	8000aec <__aeabi_dcmplt>
 800d274:	2800      	cmp	r0, #0
 800d276:	d165      	bne.n	800d344 <_dtoa_r+0x63c>
 800d278:	4632      	mov	r2, r6
 800d27a:	463b      	mov	r3, r7
 800d27c:	4935      	ldr	r1, [pc, #212]	; (800d354 <_dtoa_r+0x64c>)
 800d27e:	2000      	movs	r0, #0
 800d280:	f7f3 f80a 	bl	8000298 <__aeabi_dsub>
 800d284:	ec53 2b18 	vmov	r2, r3, d8
 800d288:	f7f3 fc30 	bl	8000aec <__aeabi_dcmplt>
 800d28c:	2800      	cmp	r0, #0
 800d28e:	f040 80b9 	bne.w	800d404 <_dtoa_r+0x6fc>
 800d292:	9b02      	ldr	r3, [sp, #8]
 800d294:	429d      	cmp	r5, r3
 800d296:	f43f af75 	beq.w	800d184 <_dtoa_r+0x47c>
 800d29a:	4b2f      	ldr	r3, [pc, #188]	; (800d358 <_dtoa_r+0x650>)
 800d29c:	ec51 0b18 	vmov	r0, r1, d8
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f7f3 f9b1 	bl	8000608 <__aeabi_dmul>
 800d2a6:	4b2c      	ldr	r3, [pc, #176]	; (800d358 <_dtoa_r+0x650>)
 800d2a8:	ec41 0b18 	vmov	d8, r0, r1
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	4639      	mov	r1, r7
 800d2b2:	f7f3 f9a9 	bl	8000608 <__aeabi_dmul>
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	460f      	mov	r7, r1
 800d2ba:	e7c4      	b.n	800d246 <_dtoa_r+0x53e>
 800d2bc:	ec51 0b17 	vmov	r0, r1, d7
 800d2c0:	f7f3 f9a2 	bl	8000608 <__aeabi_dmul>
 800d2c4:	9b02      	ldr	r3, [sp, #8]
 800d2c6:	9d00      	ldr	r5, [sp, #0]
 800d2c8:	930c      	str	r3, [sp, #48]	; 0x30
 800d2ca:	ec41 0b18 	vmov	d8, r0, r1
 800d2ce:	4639      	mov	r1, r7
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	f7f3 fc49 	bl	8000b68 <__aeabi_d2iz>
 800d2d6:	9011      	str	r0, [sp, #68]	; 0x44
 800d2d8:	f7f3 f92c 	bl	8000534 <__aeabi_i2d>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	460b      	mov	r3, r1
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	4639      	mov	r1, r7
 800d2e4:	f7f2 ffd8 	bl	8000298 <__aeabi_dsub>
 800d2e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d2ea:	3330      	adds	r3, #48	; 0x30
 800d2ec:	f805 3b01 	strb.w	r3, [r5], #1
 800d2f0:	9b02      	ldr	r3, [sp, #8]
 800d2f2:	429d      	cmp	r5, r3
 800d2f4:	4606      	mov	r6, r0
 800d2f6:	460f      	mov	r7, r1
 800d2f8:	f04f 0200 	mov.w	r2, #0
 800d2fc:	d134      	bne.n	800d368 <_dtoa_r+0x660>
 800d2fe:	4b19      	ldr	r3, [pc, #100]	; (800d364 <_dtoa_r+0x65c>)
 800d300:	ec51 0b18 	vmov	r0, r1, d8
 800d304:	f7f2 ffca 	bl	800029c <__adddf3>
 800d308:	4602      	mov	r2, r0
 800d30a:	460b      	mov	r3, r1
 800d30c:	4630      	mov	r0, r6
 800d30e:	4639      	mov	r1, r7
 800d310:	f7f3 fc0a 	bl	8000b28 <__aeabi_dcmpgt>
 800d314:	2800      	cmp	r0, #0
 800d316:	d175      	bne.n	800d404 <_dtoa_r+0x6fc>
 800d318:	ec53 2b18 	vmov	r2, r3, d8
 800d31c:	4911      	ldr	r1, [pc, #68]	; (800d364 <_dtoa_r+0x65c>)
 800d31e:	2000      	movs	r0, #0
 800d320:	f7f2 ffba 	bl	8000298 <__aeabi_dsub>
 800d324:	4602      	mov	r2, r0
 800d326:	460b      	mov	r3, r1
 800d328:	4630      	mov	r0, r6
 800d32a:	4639      	mov	r1, r7
 800d32c:	f7f3 fbde 	bl	8000aec <__aeabi_dcmplt>
 800d330:	2800      	cmp	r0, #0
 800d332:	f43f af27 	beq.w	800d184 <_dtoa_r+0x47c>
 800d336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d338:	1e6b      	subs	r3, r5, #1
 800d33a:	930c      	str	r3, [sp, #48]	; 0x30
 800d33c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d340:	2b30      	cmp	r3, #48	; 0x30
 800d342:	d0f8      	beq.n	800d336 <_dtoa_r+0x62e>
 800d344:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d348:	e04a      	b.n	800d3e0 <_dtoa_r+0x6d8>
 800d34a:	bf00      	nop
 800d34c:	08010140 	.word	0x08010140
 800d350:	08010118 	.word	0x08010118
 800d354:	3ff00000 	.word	0x3ff00000
 800d358:	40240000 	.word	0x40240000
 800d35c:	401c0000 	.word	0x401c0000
 800d360:	40140000 	.word	0x40140000
 800d364:	3fe00000 	.word	0x3fe00000
 800d368:	4baf      	ldr	r3, [pc, #700]	; (800d628 <_dtoa_r+0x920>)
 800d36a:	f7f3 f94d 	bl	8000608 <__aeabi_dmul>
 800d36e:	4606      	mov	r6, r0
 800d370:	460f      	mov	r7, r1
 800d372:	e7ac      	b.n	800d2ce <_dtoa_r+0x5c6>
 800d374:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d378:	9d00      	ldr	r5, [sp, #0]
 800d37a:	4642      	mov	r2, r8
 800d37c:	464b      	mov	r3, r9
 800d37e:	4630      	mov	r0, r6
 800d380:	4639      	mov	r1, r7
 800d382:	f7f3 fa6b 	bl	800085c <__aeabi_ddiv>
 800d386:	f7f3 fbef 	bl	8000b68 <__aeabi_d2iz>
 800d38a:	9002      	str	r0, [sp, #8]
 800d38c:	f7f3 f8d2 	bl	8000534 <__aeabi_i2d>
 800d390:	4642      	mov	r2, r8
 800d392:	464b      	mov	r3, r9
 800d394:	f7f3 f938 	bl	8000608 <__aeabi_dmul>
 800d398:	4602      	mov	r2, r0
 800d39a:	460b      	mov	r3, r1
 800d39c:	4630      	mov	r0, r6
 800d39e:	4639      	mov	r1, r7
 800d3a0:	f7f2 ff7a 	bl	8000298 <__aeabi_dsub>
 800d3a4:	9e02      	ldr	r6, [sp, #8]
 800d3a6:	9f01      	ldr	r7, [sp, #4]
 800d3a8:	3630      	adds	r6, #48	; 0x30
 800d3aa:	f805 6b01 	strb.w	r6, [r5], #1
 800d3ae:	9e00      	ldr	r6, [sp, #0]
 800d3b0:	1bae      	subs	r6, r5, r6
 800d3b2:	42b7      	cmp	r7, r6
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	d137      	bne.n	800d42a <_dtoa_r+0x722>
 800d3ba:	f7f2 ff6f 	bl	800029c <__adddf3>
 800d3be:	4642      	mov	r2, r8
 800d3c0:	464b      	mov	r3, r9
 800d3c2:	4606      	mov	r6, r0
 800d3c4:	460f      	mov	r7, r1
 800d3c6:	f7f3 fbaf 	bl	8000b28 <__aeabi_dcmpgt>
 800d3ca:	b9c8      	cbnz	r0, 800d400 <_dtoa_r+0x6f8>
 800d3cc:	4642      	mov	r2, r8
 800d3ce:	464b      	mov	r3, r9
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	4639      	mov	r1, r7
 800d3d4:	f7f3 fb80 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3d8:	b110      	cbz	r0, 800d3e0 <_dtoa_r+0x6d8>
 800d3da:	9b02      	ldr	r3, [sp, #8]
 800d3dc:	07d9      	lsls	r1, r3, #31
 800d3de:	d40f      	bmi.n	800d400 <_dtoa_r+0x6f8>
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	4659      	mov	r1, fp
 800d3e4:	f000 fe5c 	bl	800e0a0 <_Bfree>
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	702b      	strb	r3, [r5, #0]
 800d3ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3ee:	f10a 0001 	add.w	r0, sl, #1
 800d3f2:	6018      	str	r0, [r3, #0]
 800d3f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	f43f acd8 	beq.w	800cdac <_dtoa_r+0xa4>
 800d3fc:	601d      	str	r5, [r3, #0]
 800d3fe:	e4d5      	b.n	800cdac <_dtoa_r+0xa4>
 800d400:	f8cd a01c 	str.w	sl, [sp, #28]
 800d404:	462b      	mov	r3, r5
 800d406:	461d      	mov	r5, r3
 800d408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d40c:	2a39      	cmp	r2, #57	; 0x39
 800d40e:	d108      	bne.n	800d422 <_dtoa_r+0x71a>
 800d410:	9a00      	ldr	r2, [sp, #0]
 800d412:	429a      	cmp	r2, r3
 800d414:	d1f7      	bne.n	800d406 <_dtoa_r+0x6fe>
 800d416:	9a07      	ldr	r2, [sp, #28]
 800d418:	9900      	ldr	r1, [sp, #0]
 800d41a:	3201      	adds	r2, #1
 800d41c:	9207      	str	r2, [sp, #28]
 800d41e:	2230      	movs	r2, #48	; 0x30
 800d420:	700a      	strb	r2, [r1, #0]
 800d422:	781a      	ldrb	r2, [r3, #0]
 800d424:	3201      	adds	r2, #1
 800d426:	701a      	strb	r2, [r3, #0]
 800d428:	e78c      	b.n	800d344 <_dtoa_r+0x63c>
 800d42a:	4b7f      	ldr	r3, [pc, #508]	; (800d628 <_dtoa_r+0x920>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	f7f3 f8eb 	bl	8000608 <__aeabi_dmul>
 800d432:	2200      	movs	r2, #0
 800d434:	2300      	movs	r3, #0
 800d436:	4606      	mov	r6, r0
 800d438:	460f      	mov	r7, r1
 800d43a:	f7f3 fb4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d43e:	2800      	cmp	r0, #0
 800d440:	d09b      	beq.n	800d37a <_dtoa_r+0x672>
 800d442:	e7cd      	b.n	800d3e0 <_dtoa_r+0x6d8>
 800d444:	9a08      	ldr	r2, [sp, #32]
 800d446:	2a00      	cmp	r2, #0
 800d448:	f000 80c4 	beq.w	800d5d4 <_dtoa_r+0x8cc>
 800d44c:	9a05      	ldr	r2, [sp, #20]
 800d44e:	2a01      	cmp	r2, #1
 800d450:	f300 80a8 	bgt.w	800d5a4 <_dtoa_r+0x89c>
 800d454:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d456:	2a00      	cmp	r2, #0
 800d458:	f000 80a0 	beq.w	800d59c <_dtoa_r+0x894>
 800d45c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d460:	9e06      	ldr	r6, [sp, #24]
 800d462:	4645      	mov	r5, r8
 800d464:	9a04      	ldr	r2, [sp, #16]
 800d466:	2101      	movs	r1, #1
 800d468:	441a      	add	r2, r3
 800d46a:	4620      	mov	r0, r4
 800d46c:	4498      	add	r8, r3
 800d46e:	9204      	str	r2, [sp, #16]
 800d470:	f000 ff1c 	bl	800e2ac <__i2b>
 800d474:	4607      	mov	r7, r0
 800d476:	2d00      	cmp	r5, #0
 800d478:	dd0b      	ble.n	800d492 <_dtoa_r+0x78a>
 800d47a:	9b04      	ldr	r3, [sp, #16]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	dd08      	ble.n	800d492 <_dtoa_r+0x78a>
 800d480:	42ab      	cmp	r3, r5
 800d482:	9a04      	ldr	r2, [sp, #16]
 800d484:	bfa8      	it	ge
 800d486:	462b      	movge	r3, r5
 800d488:	eba8 0803 	sub.w	r8, r8, r3
 800d48c:	1aed      	subs	r5, r5, r3
 800d48e:	1ad3      	subs	r3, r2, r3
 800d490:	9304      	str	r3, [sp, #16]
 800d492:	9b06      	ldr	r3, [sp, #24]
 800d494:	b1fb      	cbz	r3, 800d4d6 <_dtoa_r+0x7ce>
 800d496:	9b08      	ldr	r3, [sp, #32]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	f000 809f 	beq.w	800d5dc <_dtoa_r+0x8d4>
 800d49e:	2e00      	cmp	r6, #0
 800d4a0:	dd11      	ble.n	800d4c6 <_dtoa_r+0x7be>
 800d4a2:	4639      	mov	r1, r7
 800d4a4:	4632      	mov	r2, r6
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f000 ffbc 	bl	800e424 <__pow5mult>
 800d4ac:	465a      	mov	r2, fp
 800d4ae:	4601      	mov	r1, r0
 800d4b0:	4607      	mov	r7, r0
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	f000 ff10 	bl	800e2d8 <__multiply>
 800d4b8:	4659      	mov	r1, fp
 800d4ba:	9007      	str	r0, [sp, #28]
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f000 fdef 	bl	800e0a0 <_Bfree>
 800d4c2:	9b07      	ldr	r3, [sp, #28]
 800d4c4:	469b      	mov	fp, r3
 800d4c6:	9b06      	ldr	r3, [sp, #24]
 800d4c8:	1b9a      	subs	r2, r3, r6
 800d4ca:	d004      	beq.n	800d4d6 <_dtoa_r+0x7ce>
 800d4cc:	4659      	mov	r1, fp
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	f000 ffa8 	bl	800e424 <__pow5mult>
 800d4d4:	4683      	mov	fp, r0
 800d4d6:	2101      	movs	r1, #1
 800d4d8:	4620      	mov	r0, r4
 800d4da:	f000 fee7 	bl	800e2ac <__i2b>
 800d4de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	dd7c      	ble.n	800d5e0 <_dtoa_r+0x8d8>
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	4601      	mov	r1, r0
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	f000 ff9a 	bl	800e424 <__pow5mult>
 800d4f0:	9b05      	ldr	r3, [sp, #20]
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	4606      	mov	r6, r0
 800d4f6:	dd76      	ble.n	800d5e6 <_dtoa_r+0x8de>
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	9306      	str	r3, [sp, #24]
 800d4fc:	6933      	ldr	r3, [r6, #16]
 800d4fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d502:	6918      	ldr	r0, [r3, #16]
 800d504:	f000 fe82 	bl	800e20c <__hi0bits>
 800d508:	f1c0 0020 	rsb	r0, r0, #32
 800d50c:	9b04      	ldr	r3, [sp, #16]
 800d50e:	4418      	add	r0, r3
 800d510:	f010 001f 	ands.w	r0, r0, #31
 800d514:	f000 8086 	beq.w	800d624 <_dtoa_r+0x91c>
 800d518:	f1c0 0320 	rsb	r3, r0, #32
 800d51c:	2b04      	cmp	r3, #4
 800d51e:	dd7f      	ble.n	800d620 <_dtoa_r+0x918>
 800d520:	f1c0 001c 	rsb	r0, r0, #28
 800d524:	9b04      	ldr	r3, [sp, #16]
 800d526:	4403      	add	r3, r0
 800d528:	4480      	add	r8, r0
 800d52a:	4405      	add	r5, r0
 800d52c:	9304      	str	r3, [sp, #16]
 800d52e:	f1b8 0f00 	cmp.w	r8, #0
 800d532:	dd05      	ble.n	800d540 <_dtoa_r+0x838>
 800d534:	4659      	mov	r1, fp
 800d536:	4642      	mov	r2, r8
 800d538:	4620      	mov	r0, r4
 800d53a:	f000 ffcd 	bl	800e4d8 <__lshift>
 800d53e:	4683      	mov	fp, r0
 800d540:	9b04      	ldr	r3, [sp, #16]
 800d542:	2b00      	cmp	r3, #0
 800d544:	dd05      	ble.n	800d552 <_dtoa_r+0x84a>
 800d546:	4631      	mov	r1, r6
 800d548:	461a      	mov	r2, r3
 800d54a:	4620      	mov	r0, r4
 800d54c:	f000 ffc4 	bl	800e4d8 <__lshift>
 800d550:	4606      	mov	r6, r0
 800d552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d554:	2b00      	cmp	r3, #0
 800d556:	d069      	beq.n	800d62c <_dtoa_r+0x924>
 800d558:	4631      	mov	r1, r6
 800d55a:	4658      	mov	r0, fp
 800d55c:	f001 f828 	bl	800e5b0 <__mcmp>
 800d560:	2800      	cmp	r0, #0
 800d562:	da63      	bge.n	800d62c <_dtoa_r+0x924>
 800d564:	2300      	movs	r3, #0
 800d566:	4659      	mov	r1, fp
 800d568:	220a      	movs	r2, #10
 800d56a:	4620      	mov	r0, r4
 800d56c:	f000 fdba 	bl	800e0e4 <__multadd>
 800d570:	9b08      	ldr	r3, [sp, #32]
 800d572:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d576:	4683      	mov	fp, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f000 818f 	beq.w	800d89c <_dtoa_r+0xb94>
 800d57e:	4639      	mov	r1, r7
 800d580:	2300      	movs	r3, #0
 800d582:	220a      	movs	r2, #10
 800d584:	4620      	mov	r0, r4
 800d586:	f000 fdad 	bl	800e0e4 <__multadd>
 800d58a:	f1b9 0f00 	cmp.w	r9, #0
 800d58e:	4607      	mov	r7, r0
 800d590:	f300 808e 	bgt.w	800d6b0 <_dtoa_r+0x9a8>
 800d594:	9b05      	ldr	r3, [sp, #20]
 800d596:	2b02      	cmp	r3, #2
 800d598:	dc50      	bgt.n	800d63c <_dtoa_r+0x934>
 800d59a:	e089      	b.n	800d6b0 <_dtoa_r+0x9a8>
 800d59c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d59e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d5a2:	e75d      	b.n	800d460 <_dtoa_r+0x758>
 800d5a4:	9b01      	ldr	r3, [sp, #4]
 800d5a6:	1e5e      	subs	r6, r3, #1
 800d5a8:	9b06      	ldr	r3, [sp, #24]
 800d5aa:	42b3      	cmp	r3, r6
 800d5ac:	bfbf      	itttt	lt
 800d5ae:	9b06      	ldrlt	r3, [sp, #24]
 800d5b0:	9606      	strlt	r6, [sp, #24]
 800d5b2:	1af2      	sublt	r2, r6, r3
 800d5b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d5b6:	bfb6      	itet	lt
 800d5b8:	189b      	addlt	r3, r3, r2
 800d5ba:	1b9e      	subge	r6, r3, r6
 800d5bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d5be:	9b01      	ldr	r3, [sp, #4]
 800d5c0:	bfb8      	it	lt
 800d5c2:	2600      	movlt	r6, #0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	bfb5      	itete	lt
 800d5c8:	eba8 0503 	sublt.w	r5, r8, r3
 800d5cc:	9b01      	ldrge	r3, [sp, #4]
 800d5ce:	2300      	movlt	r3, #0
 800d5d0:	4645      	movge	r5, r8
 800d5d2:	e747      	b.n	800d464 <_dtoa_r+0x75c>
 800d5d4:	9e06      	ldr	r6, [sp, #24]
 800d5d6:	9f08      	ldr	r7, [sp, #32]
 800d5d8:	4645      	mov	r5, r8
 800d5da:	e74c      	b.n	800d476 <_dtoa_r+0x76e>
 800d5dc:	9a06      	ldr	r2, [sp, #24]
 800d5de:	e775      	b.n	800d4cc <_dtoa_r+0x7c4>
 800d5e0:	9b05      	ldr	r3, [sp, #20]
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	dc18      	bgt.n	800d618 <_dtoa_r+0x910>
 800d5e6:	9b02      	ldr	r3, [sp, #8]
 800d5e8:	b9b3      	cbnz	r3, 800d618 <_dtoa_r+0x910>
 800d5ea:	9b03      	ldr	r3, [sp, #12]
 800d5ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5f0:	b9a3      	cbnz	r3, 800d61c <_dtoa_r+0x914>
 800d5f2:	9b03      	ldr	r3, [sp, #12]
 800d5f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5f8:	0d1b      	lsrs	r3, r3, #20
 800d5fa:	051b      	lsls	r3, r3, #20
 800d5fc:	b12b      	cbz	r3, 800d60a <_dtoa_r+0x902>
 800d5fe:	9b04      	ldr	r3, [sp, #16]
 800d600:	3301      	adds	r3, #1
 800d602:	9304      	str	r3, [sp, #16]
 800d604:	f108 0801 	add.w	r8, r8, #1
 800d608:	2301      	movs	r3, #1
 800d60a:	9306      	str	r3, [sp, #24]
 800d60c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d60e:	2b00      	cmp	r3, #0
 800d610:	f47f af74 	bne.w	800d4fc <_dtoa_r+0x7f4>
 800d614:	2001      	movs	r0, #1
 800d616:	e779      	b.n	800d50c <_dtoa_r+0x804>
 800d618:	2300      	movs	r3, #0
 800d61a:	e7f6      	b.n	800d60a <_dtoa_r+0x902>
 800d61c:	9b02      	ldr	r3, [sp, #8]
 800d61e:	e7f4      	b.n	800d60a <_dtoa_r+0x902>
 800d620:	d085      	beq.n	800d52e <_dtoa_r+0x826>
 800d622:	4618      	mov	r0, r3
 800d624:	301c      	adds	r0, #28
 800d626:	e77d      	b.n	800d524 <_dtoa_r+0x81c>
 800d628:	40240000 	.word	0x40240000
 800d62c:	9b01      	ldr	r3, [sp, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	dc38      	bgt.n	800d6a4 <_dtoa_r+0x99c>
 800d632:	9b05      	ldr	r3, [sp, #20]
 800d634:	2b02      	cmp	r3, #2
 800d636:	dd35      	ble.n	800d6a4 <_dtoa_r+0x99c>
 800d638:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d63c:	f1b9 0f00 	cmp.w	r9, #0
 800d640:	d10d      	bne.n	800d65e <_dtoa_r+0x956>
 800d642:	4631      	mov	r1, r6
 800d644:	464b      	mov	r3, r9
 800d646:	2205      	movs	r2, #5
 800d648:	4620      	mov	r0, r4
 800d64a:	f000 fd4b 	bl	800e0e4 <__multadd>
 800d64e:	4601      	mov	r1, r0
 800d650:	4606      	mov	r6, r0
 800d652:	4658      	mov	r0, fp
 800d654:	f000 ffac 	bl	800e5b0 <__mcmp>
 800d658:	2800      	cmp	r0, #0
 800d65a:	f73f adbd 	bgt.w	800d1d8 <_dtoa_r+0x4d0>
 800d65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d660:	9d00      	ldr	r5, [sp, #0]
 800d662:	ea6f 0a03 	mvn.w	sl, r3
 800d666:	f04f 0800 	mov.w	r8, #0
 800d66a:	4631      	mov	r1, r6
 800d66c:	4620      	mov	r0, r4
 800d66e:	f000 fd17 	bl	800e0a0 <_Bfree>
 800d672:	2f00      	cmp	r7, #0
 800d674:	f43f aeb4 	beq.w	800d3e0 <_dtoa_r+0x6d8>
 800d678:	f1b8 0f00 	cmp.w	r8, #0
 800d67c:	d005      	beq.n	800d68a <_dtoa_r+0x982>
 800d67e:	45b8      	cmp	r8, r7
 800d680:	d003      	beq.n	800d68a <_dtoa_r+0x982>
 800d682:	4641      	mov	r1, r8
 800d684:	4620      	mov	r0, r4
 800d686:	f000 fd0b 	bl	800e0a0 <_Bfree>
 800d68a:	4639      	mov	r1, r7
 800d68c:	4620      	mov	r0, r4
 800d68e:	f000 fd07 	bl	800e0a0 <_Bfree>
 800d692:	e6a5      	b.n	800d3e0 <_dtoa_r+0x6d8>
 800d694:	2600      	movs	r6, #0
 800d696:	4637      	mov	r7, r6
 800d698:	e7e1      	b.n	800d65e <_dtoa_r+0x956>
 800d69a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d69c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d6a0:	4637      	mov	r7, r6
 800d6a2:	e599      	b.n	800d1d8 <_dtoa_r+0x4d0>
 800d6a4:	9b08      	ldr	r3, [sp, #32]
 800d6a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	f000 80fd 	beq.w	800d8aa <_dtoa_r+0xba2>
 800d6b0:	2d00      	cmp	r5, #0
 800d6b2:	dd05      	ble.n	800d6c0 <_dtoa_r+0x9b8>
 800d6b4:	4639      	mov	r1, r7
 800d6b6:	462a      	mov	r2, r5
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f000 ff0d 	bl	800e4d8 <__lshift>
 800d6be:	4607      	mov	r7, r0
 800d6c0:	9b06      	ldr	r3, [sp, #24]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d05c      	beq.n	800d780 <_dtoa_r+0xa78>
 800d6c6:	6879      	ldr	r1, [r7, #4]
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f000 fca9 	bl	800e020 <_Balloc>
 800d6ce:	4605      	mov	r5, r0
 800d6d0:	b928      	cbnz	r0, 800d6de <_dtoa_r+0x9d6>
 800d6d2:	4b80      	ldr	r3, [pc, #512]	; (800d8d4 <_dtoa_r+0xbcc>)
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d6da:	f7ff bb2e 	b.w	800cd3a <_dtoa_r+0x32>
 800d6de:	693a      	ldr	r2, [r7, #16]
 800d6e0:	3202      	adds	r2, #2
 800d6e2:	0092      	lsls	r2, r2, #2
 800d6e4:	f107 010c 	add.w	r1, r7, #12
 800d6e8:	300c      	adds	r0, #12
 800d6ea:	f7fd fed5 	bl	800b498 <memcpy>
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	f000 fef0 	bl	800e4d8 <__lshift>
 800d6f8:	9b00      	ldr	r3, [sp, #0]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	9b00      	ldr	r3, [sp, #0]
 800d700:	444b      	add	r3, r9
 800d702:	9307      	str	r3, [sp, #28]
 800d704:	9b02      	ldr	r3, [sp, #8]
 800d706:	f003 0301 	and.w	r3, r3, #1
 800d70a:	46b8      	mov	r8, r7
 800d70c:	9306      	str	r3, [sp, #24]
 800d70e:	4607      	mov	r7, r0
 800d710:	9b01      	ldr	r3, [sp, #4]
 800d712:	4631      	mov	r1, r6
 800d714:	3b01      	subs	r3, #1
 800d716:	4658      	mov	r0, fp
 800d718:	9302      	str	r3, [sp, #8]
 800d71a:	f7ff fa69 	bl	800cbf0 <quorem>
 800d71e:	4603      	mov	r3, r0
 800d720:	3330      	adds	r3, #48	; 0x30
 800d722:	9004      	str	r0, [sp, #16]
 800d724:	4641      	mov	r1, r8
 800d726:	4658      	mov	r0, fp
 800d728:	9308      	str	r3, [sp, #32]
 800d72a:	f000 ff41 	bl	800e5b0 <__mcmp>
 800d72e:	463a      	mov	r2, r7
 800d730:	4681      	mov	r9, r0
 800d732:	4631      	mov	r1, r6
 800d734:	4620      	mov	r0, r4
 800d736:	f000 ff57 	bl	800e5e8 <__mdiff>
 800d73a:	68c2      	ldr	r2, [r0, #12]
 800d73c:	9b08      	ldr	r3, [sp, #32]
 800d73e:	4605      	mov	r5, r0
 800d740:	bb02      	cbnz	r2, 800d784 <_dtoa_r+0xa7c>
 800d742:	4601      	mov	r1, r0
 800d744:	4658      	mov	r0, fp
 800d746:	f000 ff33 	bl	800e5b0 <__mcmp>
 800d74a:	9b08      	ldr	r3, [sp, #32]
 800d74c:	4602      	mov	r2, r0
 800d74e:	4629      	mov	r1, r5
 800d750:	4620      	mov	r0, r4
 800d752:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d756:	f000 fca3 	bl	800e0a0 <_Bfree>
 800d75a:	9b05      	ldr	r3, [sp, #20]
 800d75c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d75e:	9d01      	ldr	r5, [sp, #4]
 800d760:	ea43 0102 	orr.w	r1, r3, r2
 800d764:	9b06      	ldr	r3, [sp, #24]
 800d766:	430b      	orrs	r3, r1
 800d768:	9b08      	ldr	r3, [sp, #32]
 800d76a:	d10d      	bne.n	800d788 <_dtoa_r+0xa80>
 800d76c:	2b39      	cmp	r3, #57	; 0x39
 800d76e:	d029      	beq.n	800d7c4 <_dtoa_r+0xabc>
 800d770:	f1b9 0f00 	cmp.w	r9, #0
 800d774:	dd01      	ble.n	800d77a <_dtoa_r+0xa72>
 800d776:	9b04      	ldr	r3, [sp, #16]
 800d778:	3331      	adds	r3, #49	; 0x31
 800d77a:	9a02      	ldr	r2, [sp, #8]
 800d77c:	7013      	strb	r3, [r2, #0]
 800d77e:	e774      	b.n	800d66a <_dtoa_r+0x962>
 800d780:	4638      	mov	r0, r7
 800d782:	e7b9      	b.n	800d6f8 <_dtoa_r+0x9f0>
 800d784:	2201      	movs	r2, #1
 800d786:	e7e2      	b.n	800d74e <_dtoa_r+0xa46>
 800d788:	f1b9 0f00 	cmp.w	r9, #0
 800d78c:	db06      	blt.n	800d79c <_dtoa_r+0xa94>
 800d78e:	9905      	ldr	r1, [sp, #20]
 800d790:	ea41 0909 	orr.w	r9, r1, r9
 800d794:	9906      	ldr	r1, [sp, #24]
 800d796:	ea59 0101 	orrs.w	r1, r9, r1
 800d79a:	d120      	bne.n	800d7de <_dtoa_r+0xad6>
 800d79c:	2a00      	cmp	r2, #0
 800d79e:	ddec      	ble.n	800d77a <_dtoa_r+0xa72>
 800d7a0:	4659      	mov	r1, fp
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	9301      	str	r3, [sp, #4]
 800d7a8:	f000 fe96 	bl	800e4d8 <__lshift>
 800d7ac:	4631      	mov	r1, r6
 800d7ae:	4683      	mov	fp, r0
 800d7b0:	f000 fefe 	bl	800e5b0 <__mcmp>
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	9b01      	ldr	r3, [sp, #4]
 800d7b8:	dc02      	bgt.n	800d7c0 <_dtoa_r+0xab8>
 800d7ba:	d1de      	bne.n	800d77a <_dtoa_r+0xa72>
 800d7bc:	07da      	lsls	r2, r3, #31
 800d7be:	d5dc      	bpl.n	800d77a <_dtoa_r+0xa72>
 800d7c0:	2b39      	cmp	r3, #57	; 0x39
 800d7c2:	d1d8      	bne.n	800d776 <_dtoa_r+0xa6e>
 800d7c4:	9a02      	ldr	r2, [sp, #8]
 800d7c6:	2339      	movs	r3, #57	; 0x39
 800d7c8:	7013      	strb	r3, [r2, #0]
 800d7ca:	462b      	mov	r3, r5
 800d7cc:	461d      	mov	r5, r3
 800d7ce:	3b01      	subs	r3, #1
 800d7d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d7d4:	2a39      	cmp	r2, #57	; 0x39
 800d7d6:	d050      	beq.n	800d87a <_dtoa_r+0xb72>
 800d7d8:	3201      	adds	r2, #1
 800d7da:	701a      	strb	r2, [r3, #0]
 800d7dc:	e745      	b.n	800d66a <_dtoa_r+0x962>
 800d7de:	2a00      	cmp	r2, #0
 800d7e0:	dd03      	ble.n	800d7ea <_dtoa_r+0xae2>
 800d7e2:	2b39      	cmp	r3, #57	; 0x39
 800d7e4:	d0ee      	beq.n	800d7c4 <_dtoa_r+0xabc>
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	e7c7      	b.n	800d77a <_dtoa_r+0xa72>
 800d7ea:	9a01      	ldr	r2, [sp, #4]
 800d7ec:	9907      	ldr	r1, [sp, #28]
 800d7ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d7f2:	428a      	cmp	r2, r1
 800d7f4:	d02a      	beq.n	800d84c <_dtoa_r+0xb44>
 800d7f6:	4659      	mov	r1, fp
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	220a      	movs	r2, #10
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	f000 fc71 	bl	800e0e4 <__multadd>
 800d802:	45b8      	cmp	r8, r7
 800d804:	4683      	mov	fp, r0
 800d806:	f04f 0300 	mov.w	r3, #0
 800d80a:	f04f 020a 	mov.w	r2, #10
 800d80e:	4641      	mov	r1, r8
 800d810:	4620      	mov	r0, r4
 800d812:	d107      	bne.n	800d824 <_dtoa_r+0xb1c>
 800d814:	f000 fc66 	bl	800e0e4 <__multadd>
 800d818:	4680      	mov	r8, r0
 800d81a:	4607      	mov	r7, r0
 800d81c:	9b01      	ldr	r3, [sp, #4]
 800d81e:	3301      	adds	r3, #1
 800d820:	9301      	str	r3, [sp, #4]
 800d822:	e775      	b.n	800d710 <_dtoa_r+0xa08>
 800d824:	f000 fc5e 	bl	800e0e4 <__multadd>
 800d828:	4639      	mov	r1, r7
 800d82a:	4680      	mov	r8, r0
 800d82c:	2300      	movs	r3, #0
 800d82e:	220a      	movs	r2, #10
 800d830:	4620      	mov	r0, r4
 800d832:	f000 fc57 	bl	800e0e4 <__multadd>
 800d836:	4607      	mov	r7, r0
 800d838:	e7f0      	b.n	800d81c <_dtoa_r+0xb14>
 800d83a:	f1b9 0f00 	cmp.w	r9, #0
 800d83e:	9a00      	ldr	r2, [sp, #0]
 800d840:	bfcc      	ite	gt
 800d842:	464d      	movgt	r5, r9
 800d844:	2501      	movle	r5, #1
 800d846:	4415      	add	r5, r2
 800d848:	f04f 0800 	mov.w	r8, #0
 800d84c:	4659      	mov	r1, fp
 800d84e:	2201      	movs	r2, #1
 800d850:	4620      	mov	r0, r4
 800d852:	9301      	str	r3, [sp, #4]
 800d854:	f000 fe40 	bl	800e4d8 <__lshift>
 800d858:	4631      	mov	r1, r6
 800d85a:	4683      	mov	fp, r0
 800d85c:	f000 fea8 	bl	800e5b0 <__mcmp>
 800d860:	2800      	cmp	r0, #0
 800d862:	dcb2      	bgt.n	800d7ca <_dtoa_r+0xac2>
 800d864:	d102      	bne.n	800d86c <_dtoa_r+0xb64>
 800d866:	9b01      	ldr	r3, [sp, #4]
 800d868:	07db      	lsls	r3, r3, #31
 800d86a:	d4ae      	bmi.n	800d7ca <_dtoa_r+0xac2>
 800d86c:	462b      	mov	r3, r5
 800d86e:	461d      	mov	r5, r3
 800d870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d874:	2a30      	cmp	r2, #48	; 0x30
 800d876:	d0fa      	beq.n	800d86e <_dtoa_r+0xb66>
 800d878:	e6f7      	b.n	800d66a <_dtoa_r+0x962>
 800d87a:	9a00      	ldr	r2, [sp, #0]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d1a5      	bne.n	800d7cc <_dtoa_r+0xac4>
 800d880:	f10a 0a01 	add.w	sl, sl, #1
 800d884:	2331      	movs	r3, #49	; 0x31
 800d886:	e779      	b.n	800d77c <_dtoa_r+0xa74>
 800d888:	4b13      	ldr	r3, [pc, #76]	; (800d8d8 <_dtoa_r+0xbd0>)
 800d88a:	f7ff baaf 	b.w	800cdec <_dtoa_r+0xe4>
 800d88e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d890:	2b00      	cmp	r3, #0
 800d892:	f47f aa86 	bne.w	800cda2 <_dtoa_r+0x9a>
 800d896:	4b11      	ldr	r3, [pc, #68]	; (800d8dc <_dtoa_r+0xbd4>)
 800d898:	f7ff baa8 	b.w	800cdec <_dtoa_r+0xe4>
 800d89c:	f1b9 0f00 	cmp.w	r9, #0
 800d8a0:	dc03      	bgt.n	800d8aa <_dtoa_r+0xba2>
 800d8a2:	9b05      	ldr	r3, [sp, #20]
 800d8a4:	2b02      	cmp	r3, #2
 800d8a6:	f73f aec9 	bgt.w	800d63c <_dtoa_r+0x934>
 800d8aa:	9d00      	ldr	r5, [sp, #0]
 800d8ac:	4631      	mov	r1, r6
 800d8ae:	4658      	mov	r0, fp
 800d8b0:	f7ff f99e 	bl	800cbf0 <quorem>
 800d8b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d8b8:	f805 3b01 	strb.w	r3, [r5], #1
 800d8bc:	9a00      	ldr	r2, [sp, #0]
 800d8be:	1aaa      	subs	r2, r5, r2
 800d8c0:	4591      	cmp	r9, r2
 800d8c2:	ddba      	ble.n	800d83a <_dtoa_r+0xb32>
 800d8c4:	4659      	mov	r1, fp
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	220a      	movs	r2, #10
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	f000 fc0a 	bl	800e0e4 <__multadd>
 800d8d0:	4683      	mov	fp, r0
 800d8d2:	e7eb      	b.n	800d8ac <_dtoa_r+0xba4>
 800d8d4:	08010028 	.word	0x08010028
 800d8d8:	0800fe94 	.word	0x0800fe94
 800d8dc:	0800ffbc 	.word	0x0800ffbc

0800d8e0 <fiprintf>:
 800d8e0:	b40e      	push	{r1, r2, r3}
 800d8e2:	b503      	push	{r0, r1, lr}
 800d8e4:	4601      	mov	r1, r0
 800d8e6:	ab03      	add	r3, sp, #12
 800d8e8:	4805      	ldr	r0, [pc, #20]	; (800d900 <fiprintf+0x20>)
 800d8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ee:	6800      	ldr	r0, [r0, #0]
 800d8f0:	9301      	str	r3, [sp, #4]
 800d8f2:	f001 fa8f 	bl	800ee14 <_vfiprintf_r>
 800d8f6:	b002      	add	sp, #8
 800d8f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8fc:	b003      	add	sp, #12
 800d8fe:	4770      	bx	lr
 800d900:	20000028 	.word	0x20000028

0800d904 <rshift>:
 800d904:	6903      	ldr	r3, [r0, #16]
 800d906:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d90a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d90e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d912:	f100 0414 	add.w	r4, r0, #20
 800d916:	dd45      	ble.n	800d9a4 <rshift+0xa0>
 800d918:	f011 011f 	ands.w	r1, r1, #31
 800d91c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d920:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d924:	d10c      	bne.n	800d940 <rshift+0x3c>
 800d926:	f100 0710 	add.w	r7, r0, #16
 800d92a:	4629      	mov	r1, r5
 800d92c:	42b1      	cmp	r1, r6
 800d92e:	d334      	bcc.n	800d99a <rshift+0x96>
 800d930:	1a9b      	subs	r3, r3, r2
 800d932:	009b      	lsls	r3, r3, #2
 800d934:	1eea      	subs	r2, r5, #3
 800d936:	4296      	cmp	r6, r2
 800d938:	bf38      	it	cc
 800d93a:	2300      	movcc	r3, #0
 800d93c:	4423      	add	r3, r4
 800d93e:	e015      	b.n	800d96c <rshift+0x68>
 800d940:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d944:	f1c1 0820 	rsb	r8, r1, #32
 800d948:	40cf      	lsrs	r7, r1
 800d94a:	f105 0e04 	add.w	lr, r5, #4
 800d94e:	46a1      	mov	r9, r4
 800d950:	4576      	cmp	r6, lr
 800d952:	46f4      	mov	ip, lr
 800d954:	d815      	bhi.n	800d982 <rshift+0x7e>
 800d956:	1a9b      	subs	r3, r3, r2
 800d958:	009a      	lsls	r2, r3, #2
 800d95a:	3a04      	subs	r2, #4
 800d95c:	3501      	adds	r5, #1
 800d95e:	42ae      	cmp	r6, r5
 800d960:	bf38      	it	cc
 800d962:	2200      	movcc	r2, #0
 800d964:	18a3      	adds	r3, r4, r2
 800d966:	50a7      	str	r7, [r4, r2]
 800d968:	b107      	cbz	r7, 800d96c <rshift+0x68>
 800d96a:	3304      	adds	r3, #4
 800d96c:	1b1a      	subs	r2, r3, r4
 800d96e:	42a3      	cmp	r3, r4
 800d970:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d974:	bf08      	it	eq
 800d976:	2300      	moveq	r3, #0
 800d978:	6102      	str	r2, [r0, #16]
 800d97a:	bf08      	it	eq
 800d97c:	6143      	streq	r3, [r0, #20]
 800d97e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d982:	f8dc c000 	ldr.w	ip, [ip]
 800d986:	fa0c fc08 	lsl.w	ip, ip, r8
 800d98a:	ea4c 0707 	orr.w	r7, ip, r7
 800d98e:	f849 7b04 	str.w	r7, [r9], #4
 800d992:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d996:	40cf      	lsrs	r7, r1
 800d998:	e7da      	b.n	800d950 <rshift+0x4c>
 800d99a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d99e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d9a2:	e7c3      	b.n	800d92c <rshift+0x28>
 800d9a4:	4623      	mov	r3, r4
 800d9a6:	e7e1      	b.n	800d96c <rshift+0x68>

0800d9a8 <__hexdig_fun>:
 800d9a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d9ac:	2b09      	cmp	r3, #9
 800d9ae:	d802      	bhi.n	800d9b6 <__hexdig_fun+0xe>
 800d9b0:	3820      	subs	r0, #32
 800d9b2:	b2c0      	uxtb	r0, r0
 800d9b4:	4770      	bx	lr
 800d9b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d9ba:	2b05      	cmp	r3, #5
 800d9bc:	d801      	bhi.n	800d9c2 <__hexdig_fun+0x1a>
 800d9be:	3847      	subs	r0, #71	; 0x47
 800d9c0:	e7f7      	b.n	800d9b2 <__hexdig_fun+0xa>
 800d9c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d9c6:	2b05      	cmp	r3, #5
 800d9c8:	d801      	bhi.n	800d9ce <__hexdig_fun+0x26>
 800d9ca:	3827      	subs	r0, #39	; 0x27
 800d9cc:	e7f1      	b.n	800d9b2 <__hexdig_fun+0xa>
 800d9ce:	2000      	movs	r0, #0
 800d9d0:	4770      	bx	lr
	...

0800d9d4 <__gethex>:
 800d9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d8:	ed2d 8b02 	vpush	{d8}
 800d9dc:	b089      	sub	sp, #36	; 0x24
 800d9de:	ee08 0a10 	vmov	s16, r0
 800d9e2:	9304      	str	r3, [sp, #16]
 800d9e4:	4bbc      	ldr	r3, [pc, #752]	; (800dcd8 <__gethex+0x304>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	9301      	str	r3, [sp, #4]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	468b      	mov	fp, r1
 800d9ee:	4690      	mov	r8, r2
 800d9f0:	f7f2 fbf6 	bl	80001e0 <strlen>
 800d9f4:	9b01      	ldr	r3, [sp, #4]
 800d9f6:	f8db 2000 	ldr.w	r2, [fp]
 800d9fa:	4403      	add	r3, r0
 800d9fc:	4682      	mov	sl, r0
 800d9fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800da02:	9305      	str	r3, [sp, #20]
 800da04:	1c93      	adds	r3, r2, #2
 800da06:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800da0a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800da0e:	32fe      	adds	r2, #254	; 0xfe
 800da10:	18d1      	adds	r1, r2, r3
 800da12:	461f      	mov	r7, r3
 800da14:	f813 0b01 	ldrb.w	r0, [r3], #1
 800da18:	9100      	str	r1, [sp, #0]
 800da1a:	2830      	cmp	r0, #48	; 0x30
 800da1c:	d0f8      	beq.n	800da10 <__gethex+0x3c>
 800da1e:	f7ff ffc3 	bl	800d9a8 <__hexdig_fun>
 800da22:	4604      	mov	r4, r0
 800da24:	2800      	cmp	r0, #0
 800da26:	d13a      	bne.n	800da9e <__gethex+0xca>
 800da28:	9901      	ldr	r1, [sp, #4]
 800da2a:	4652      	mov	r2, sl
 800da2c:	4638      	mov	r0, r7
 800da2e:	f001 fb3b 	bl	800f0a8 <strncmp>
 800da32:	4605      	mov	r5, r0
 800da34:	2800      	cmp	r0, #0
 800da36:	d168      	bne.n	800db0a <__gethex+0x136>
 800da38:	f817 000a 	ldrb.w	r0, [r7, sl]
 800da3c:	eb07 060a 	add.w	r6, r7, sl
 800da40:	f7ff ffb2 	bl	800d9a8 <__hexdig_fun>
 800da44:	2800      	cmp	r0, #0
 800da46:	d062      	beq.n	800db0e <__gethex+0x13a>
 800da48:	4633      	mov	r3, r6
 800da4a:	7818      	ldrb	r0, [r3, #0]
 800da4c:	2830      	cmp	r0, #48	; 0x30
 800da4e:	461f      	mov	r7, r3
 800da50:	f103 0301 	add.w	r3, r3, #1
 800da54:	d0f9      	beq.n	800da4a <__gethex+0x76>
 800da56:	f7ff ffa7 	bl	800d9a8 <__hexdig_fun>
 800da5a:	2301      	movs	r3, #1
 800da5c:	fab0 f480 	clz	r4, r0
 800da60:	0964      	lsrs	r4, r4, #5
 800da62:	4635      	mov	r5, r6
 800da64:	9300      	str	r3, [sp, #0]
 800da66:	463a      	mov	r2, r7
 800da68:	4616      	mov	r6, r2
 800da6a:	3201      	adds	r2, #1
 800da6c:	7830      	ldrb	r0, [r6, #0]
 800da6e:	f7ff ff9b 	bl	800d9a8 <__hexdig_fun>
 800da72:	2800      	cmp	r0, #0
 800da74:	d1f8      	bne.n	800da68 <__gethex+0x94>
 800da76:	9901      	ldr	r1, [sp, #4]
 800da78:	4652      	mov	r2, sl
 800da7a:	4630      	mov	r0, r6
 800da7c:	f001 fb14 	bl	800f0a8 <strncmp>
 800da80:	b980      	cbnz	r0, 800daa4 <__gethex+0xd0>
 800da82:	b94d      	cbnz	r5, 800da98 <__gethex+0xc4>
 800da84:	eb06 050a 	add.w	r5, r6, sl
 800da88:	462a      	mov	r2, r5
 800da8a:	4616      	mov	r6, r2
 800da8c:	3201      	adds	r2, #1
 800da8e:	7830      	ldrb	r0, [r6, #0]
 800da90:	f7ff ff8a 	bl	800d9a8 <__hexdig_fun>
 800da94:	2800      	cmp	r0, #0
 800da96:	d1f8      	bne.n	800da8a <__gethex+0xb6>
 800da98:	1bad      	subs	r5, r5, r6
 800da9a:	00ad      	lsls	r5, r5, #2
 800da9c:	e004      	b.n	800daa8 <__gethex+0xd4>
 800da9e:	2400      	movs	r4, #0
 800daa0:	4625      	mov	r5, r4
 800daa2:	e7e0      	b.n	800da66 <__gethex+0x92>
 800daa4:	2d00      	cmp	r5, #0
 800daa6:	d1f7      	bne.n	800da98 <__gethex+0xc4>
 800daa8:	7833      	ldrb	r3, [r6, #0]
 800daaa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800daae:	2b50      	cmp	r3, #80	; 0x50
 800dab0:	d13b      	bne.n	800db2a <__gethex+0x156>
 800dab2:	7873      	ldrb	r3, [r6, #1]
 800dab4:	2b2b      	cmp	r3, #43	; 0x2b
 800dab6:	d02c      	beq.n	800db12 <__gethex+0x13e>
 800dab8:	2b2d      	cmp	r3, #45	; 0x2d
 800daba:	d02e      	beq.n	800db1a <__gethex+0x146>
 800dabc:	1c71      	adds	r1, r6, #1
 800dabe:	f04f 0900 	mov.w	r9, #0
 800dac2:	7808      	ldrb	r0, [r1, #0]
 800dac4:	f7ff ff70 	bl	800d9a8 <__hexdig_fun>
 800dac8:	1e43      	subs	r3, r0, #1
 800daca:	b2db      	uxtb	r3, r3
 800dacc:	2b18      	cmp	r3, #24
 800dace:	d82c      	bhi.n	800db2a <__gethex+0x156>
 800dad0:	f1a0 0210 	sub.w	r2, r0, #16
 800dad4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dad8:	f7ff ff66 	bl	800d9a8 <__hexdig_fun>
 800dadc:	1e43      	subs	r3, r0, #1
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	2b18      	cmp	r3, #24
 800dae2:	d91d      	bls.n	800db20 <__gethex+0x14c>
 800dae4:	f1b9 0f00 	cmp.w	r9, #0
 800dae8:	d000      	beq.n	800daec <__gethex+0x118>
 800daea:	4252      	negs	r2, r2
 800daec:	4415      	add	r5, r2
 800daee:	f8cb 1000 	str.w	r1, [fp]
 800daf2:	b1e4      	cbz	r4, 800db2e <__gethex+0x15a>
 800daf4:	9b00      	ldr	r3, [sp, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	bf14      	ite	ne
 800dafa:	2700      	movne	r7, #0
 800dafc:	2706      	moveq	r7, #6
 800dafe:	4638      	mov	r0, r7
 800db00:	b009      	add	sp, #36	; 0x24
 800db02:	ecbd 8b02 	vpop	{d8}
 800db06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db0a:	463e      	mov	r6, r7
 800db0c:	4625      	mov	r5, r4
 800db0e:	2401      	movs	r4, #1
 800db10:	e7ca      	b.n	800daa8 <__gethex+0xd4>
 800db12:	f04f 0900 	mov.w	r9, #0
 800db16:	1cb1      	adds	r1, r6, #2
 800db18:	e7d3      	b.n	800dac2 <__gethex+0xee>
 800db1a:	f04f 0901 	mov.w	r9, #1
 800db1e:	e7fa      	b.n	800db16 <__gethex+0x142>
 800db20:	230a      	movs	r3, #10
 800db22:	fb03 0202 	mla	r2, r3, r2, r0
 800db26:	3a10      	subs	r2, #16
 800db28:	e7d4      	b.n	800dad4 <__gethex+0x100>
 800db2a:	4631      	mov	r1, r6
 800db2c:	e7df      	b.n	800daee <__gethex+0x11a>
 800db2e:	1bf3      	subs	r3, r6, r7
 800db30:	3b01      	subs	r3, #1
 800db32:	4621      	mov	r1, r4
 800db34:	2b07      	cmp	r3, #7
 800db36:	dc0b      	bgt.n	800db50 <__gethex+0x17c>
 800db38:	ee18 0a10 	vmov	r0, s16
 800db3c:	f000 fa70 	bl	800e020 <_Balloc>
 800db40:	4604      	mov	r4, r0
 800db42:	b940      	cbnz	r0, 800db56 <__gethex+0x182>
 800db44:	4b65      	ldr	r3, [pc, #404]	; (800dcdc <__gethex+0x308>)
 800db46:	4602      	mov	r2, r0
 800db48:	21de      	movs	r1, #222	; 0xde
 800db4a:	4865      	ldr	r0, [pc, #404]	; (800dce0 <__gethex+0x30c>)
 800db4c:	f7ff f832 	bl	800cbb4 <__assert_func>
 800db50:	3101      	adds	r1, #1
 800db52:	105b      	asrs	r3, r3, #1
 800db54:	e7ee      	b.n	800db34 <__gethex+0x160>
 800db56:	f100 0914 	add.w	r9, r0, #20
 800db5a:	f04f 0b00 	mov.w	fp, #0
 800db5e:	f1ca 0301 	rsb	r3, sl, #1
 800db62:	f8cd 9008 	str.w	r9, [sp, #8]
 800db66:	f8cd b000 	str.w	fp, [sp]
 800db6a:	9306      	str	r3, [sp, #24]
 800db6c:	42b7      	cmp	r7, r6
 800db6e:	d340      	bcc.n	800dbf2 <__gethex+0x21e>
 800db70:	9802      	ldr	r0, [sp, #8]
 800db72:	9b00      	ldr	r3, [sp, #0]
 800db74:	f840 3b04 	str.w	r3, [r0], #4
 800db78:	eba0 0009 	sub.w	r0, r0, r9
 800db7c:	1080      	asrs	r0, r0, #2
 800db7e:	0146      	lsls	r6, r0, #5
 800db80:	6120      	str	r0, [r4, #16]
 800db82:	4618      	mov	r0, r3
 800db84:	f000 fb42 	bl	800e20c <__hi0bits>
 800db88:	1a30      	subs	r0, r6, r0
 800db8a:	f8d8 6000 	ldr.w	r6, [r8]
 800db8e:	42b0      	cmp	r0, r6
 800db90:	dd63      	ble.n	800dc5a <__gethex+0x286>
 800db92:	1b87      	subs	r7, r0, r6
 800db94:	4639      	mov	r1, r7
 800db96:	4620      	mov	r0, r4
 800db98:	f000 fedc 	bl	800e954 <__any_on>
 800db9c:	4682      	mov	sl, r0
 800db9e:	b1a8      	cbz	r0, 800dbcc <__gethex+0x1f8>
 800dba0:	1e7b      	subs	r3, r7, #1
 800dba2:	1159      	asrs	r1, r3, #5
 800dba4:	f003 021f 	and.w	r2, r3, #31
 800dba8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dbac:	f04f 0a01 	mov.w	sl, #1
 800dbb0:	fa0a f202 	lsl.w	r2, sl, r2
 800dbb4:	420a      	tst	r2, r1
 800dbb6:	d009      	beq.n	800dbcc <__gethex+0x1f8>
 800dbb8:	4553      	cmp	r3, sl
 800dbba:	dd05      	ble.n	800dbc8 <__gethex+0x1f4>
 800dbbc:	1eb9      	subs	r1, r7, #2
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f000 fec8 	bl	800e954 <__any_on>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d145      	bne.n	800dc54 <__gethex+0x280>
 800dbc8:	f04f 0a02 	mov.w	sl, #2
 800dbcc:	4639      	mov	r1, r7
 800dbce:	4620      	mov	r0, r4
 800dbd0:	f7ff fe98 	bl	800d904 <rshift>
 800dbd4:	443d      	add	r5, r7
 800dbd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbda:	42ab      	cmp	r3, r5
 800dbdc:	da4c      	bge.n	800dc78 <__gethex+0x2a4>
 800dbde:	ee18 0a10 	vmov	r0, s16
 800dbe2:	4621      	mov	r1, r4
 800dbe4:	f000 fa5c 	bl	800e0a0 <_Bfree>
 800dbe8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dbea:	2300      	movs	r3, #0
 800dbec:	6013      	str	r3, [r2, #0]
 800dbee:	27a3      	movs	r7, #163	; 0xa3
 800dbf0:	e785      	b.n	800dafe <__gethex+0x12a>
 800dbf2:	1e73      	subs	r3, r6, #1
 800dbf4:	9a05      	ldr	r2, [sp, #20]
 800dbf6:	9303      	str	r3, [sp, #12]
 800dbf8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d019      	beq.n	800dc34 <__gethex+0x260>
 800dc00:	f1bb 0f20 	cmp.w	fp, #32
 800dc04:	d107      	bne.n	800dc16 <__gethex+0x242>
 800dc06:	9b02      	ldr	r3, [sp, #8]
 800dc08:	9a00      	ldr	r2, [sp, #0]
 800dc0a:	f843 2b04 	str.w	r2, [r3], #4
 800dc0e:	9302      	str	r3, [sp, #8]
 800dc10:	2300      	movs	r3, #0
 800dc12:	9300      	str	r3, [sp, #0]
 800dc14:	469b      	mov	fp, r3
 800dc16:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dc1a:	f7ff fec5 	bl	800d9a8 <__hexdig_fun>
 800dc1e:	9b00      	ldr	r3, [sp, #0]
 800dc20:	f000 000f 	and.w	r0, r0, #15
 800dc24:	fa00 f00b 	lsl.w	r0, r0, fp
 800dc28:	4303      	orrs	r3, r0
 800dc2a:	9300      	str	r3, [sp, #0]
 800dc2c:	f10b 0b04 	add.w	fp, fp, #4
 800dc30:	9b03      	ldr	r3, [sp, #12]
 800dc32:	e00d      	b.n	800dc50 <__gethex+0x27c>
 800dc34:	9b03      	ldr	r3, [sp, #12]
 800dc36:	9a06      	ldr	r2, [sp, #24]
 800dc38:	4413      	add	r3, r2
 800dc3a:	42bb      	cmp	r3, r7
 800dc3c:	d3e0      	bcc.n	800dc00 <__gethex+0x22c>
 800dc3e:	4618      	mov	r0, r3
 800dc40:	9901      	ldr	r1, [sp, #4]
 800dc42:	9307      	str	r3, [sp, #28]
 800dc44:	4652      	mov	r2, sl
 800dc46:	f001 fa2f 	bl	800f0a8 <strncmp>
 800dc4a:	9b07      	ldr	r3, [sp, #28]
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	d1d7      	bne.n	800dc00 <__gethex+0x22c>
 800dc50:	461e      	mov	r6, r3
 800dc52:	e78b      	b.n	800db6c <__gethex+0x198>
 800dc54:	f04f 0a03 	mov.w	sl, #3
 800dc58:	e7b8      	b.n	800dbcc <__gethex+0x1f8>
 800dc5a:	da0a      	bge.n	800dc72 <__gethex+0x29e>
 800dc5c:	1a37      	subs	r7, r6, r0
 800dc5e:	4621      	mov	r1, r4
 800dc60:	ee18 0a10 	vmov	r0, s16
 800dc64:	463a      	mov	r2, r7
 800dc66:	f000 fc37 	bl	800e4d8 <__lshift>
 800dc6a:	1bed      	subs	r5, r5, r7
 800dc6c:	4604      	mov	r4, r0
 800dc6e:	f100 0914 	add.w	r9, r0, #20
 800dc72:	f04f 0a00 	mov.w	sl, #0
 800dc76:	e7ae      	b.n	800dbd6 <__gethex+0x202>
 800dc78:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dc7c:	42a8      	cmp	r0, r5
 800dc7e:	dd72      	ble.n	800dd66 <__gethex+0x392>
 800dc80:	1b45      	subs	r5, r0, r5
 800dc82:	42ae      	cmp	r6, r5
 800dc84:	dc36      	bgt.n	800dcf4 <__gethex+0x320>
 800dc86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc8a:	2b02      	cmp	r3, #2
 800dc8c:	d02a      	beq.n	800dce4 <__gethex+0x310>
 800dc8e:	2b03      	cmp	r3, #3
 800dc90:	d02c      	beq.n	800dcec <__gethex+0x318>
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d115      	bne.n	800dcc2 <__gethex+0x2ee>
 800dc96:	42ae      	cmp	r6, r5
 800dc98:	d113      	bne.n	800dcc2 <__gethex+0x2ee>
 800dc9a:	2e01      	cmp	r6, #1
 800dc9c:	d10b      	bne.n	800dcb6 <__gethex+0x2e2>
 800dc9e:	9a04      	ldr	r2, [sp, #16]
 800dca0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dca4:	6013      	str	r3, [r2, #0]
 800dca6:	2301      	movs	r3, #1
 800dca8:	6123      	str	r3, [r4, #16]
 800dcaa:	f8c9 3000 	str.w	r3, [r9]
 800dcae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dcb0:	2762      	movs	r7, #98	; 0x62
 800dcb2:	601c      	str	r4, [r3, #0]
 800dcb4:	e723      	b.n	800dafe <__gethex+0x12a>
 800dcb6:	1e71      	subs	r1, r6, #1
 800dcb8:	4620      	mov	r0, r4
 800dcba:	f000 fe4b 	bl	800e954 <__any_on>
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	d1ed      	bne.n	800dc9e <__gethex+0x2ca>
 800dcc2:	ee18 0a10 	vmov	r0, s16
 800dcc6:	4621      	mov	r1, r4
 800dcc8:	f000 f9ea 	bl	800e0a0 <_Bfree>
 800dccc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dcce:	2300      	movs	r3, #0
 800dcd0:	6013      	str	r3, [r2, #0]
 800dcd2:	2750      	movs	r7, #80	; 0x50
 800dcd4:	e713      	b.n	800dafe <__gethex+0x12a>
 800dcd6:	bf00      	nop
 800dcd8:	080100a4 	.word	0x080100a4
 800dcdc:	08010028 	.word	0x08010028
 800dce0:	08010039 	.word	0x08010039
 800dce4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d1eb      	bne.n	800dcc2 <__gethex+0x2ee>
 800dcea:	e7d8      	b.n	800dc9e <__gethex+0x2ca>
 800dcec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1d5      	bne.n	800dc9e <__gethex+0x2ca>
 800dcf2:	e7e6      	b.n	800dcc2 <__gethex+0x2ee>
 800dcf4:	1e6f      	subs	r7, r5, #1
 800dcf6:	f1ba 0f00 	cmp.w	sl, #0
 800dcfa:	d131      	bne.n	800dd60 <__gethex+0x38c>
 800dcfc:	b127      	cbz	r7, 800dd08 <__gethex+0x334>
 800dcfe:	4639      	mov	r1, r7
 800dd00:	4620      	mov	r0, r4
 800dd02:	f000 fe27 	bl	800e954 <__any_on>
 800dd06:	4682      	mov	sl, r0
 800dd08:	117b      	asrs	r3, r7, #5
 800dd0a:	2101      	movs	r1, #1
 800dd0c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dd10:	f007 071f 	and.w	r7, r7, #31
 800dd14:	fa01 f707 	lsl.w	r7, r1, r7
 800dd18:	421f      	tst	r7, r3
 800dd1a:	4629      	mov	r1, r5
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	bf18      	it	ne
 800dd20:	f04a 0a02 	orrne.w	sl, sl, #2
 800dd24:	1b76      	subs	r6, r6, r5
 800dd26:	f7ff fded 	bl	800d904 <rshift>
 800dd2a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dd2e:	2702      	movs	r7, #2
 800dd30:	f1ba 0f00 	cmp.w	sl, #0
 800dd34:	d048      	beq.n	800ddc8 <__gethex+0x3f4>
 800dd36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd3a:	2b02      	cmp	r3, #2
 800dd3c:	d015      	beq.n	800dd6a <__gethex+0x396>
 800dd3e:	2b03      	cmp	r3, #3
 800dd40:	d017      	beq.n	800dd72 <__gethex+0x39e>
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d109      	bne.n	800dd5a <__gethex+0x386>
 800dd46:	f01a 0f02 	tst.w	sl, #2
 800dd4a:	d006      	beq.n	800dd5a <__gethex+0x386>
 800dd4c:	f8d9 0000 	ldr.w	r0, [r9]
 800dd50:	ea4a 0a00 	orr.w	sl, sl, r0
 800dd54:	f01a 0f01 	tst.w	sl, #1
 800dd58:	d10e      	bne.n	800dd78 <__gethex+0x3a4>
 800dd5a:	f047 0710 	orr.w	r7, r7, #16
 800dd5e:	e033      	b.n	800ddc8 <__gethex+0x3f4>
 800dd60:	f04f 0a01 	mov.w	sl, #1
 800dd64:	e7d0      	b.n	800dd08 <__gethex+0x334>
 800dd66:	2701      	movs	r7, #1
 800dd68:	e7e2      	b.n	800dd30 <__gethex+0x35c>
 800dd6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd6c:	f1c3 0301 	rsb	r3, r3, #1
 800dd70:	9315      	str	r3, [sp, #84]	; 0x54
 800dd72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d0f0      	beq.n	800dd5a <__gethex+0x386>
 800dd78:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dd7c:	f104 0314 	add.w	r3, r4, #20
 800dd80:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dd84:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dd88:	f04f 0c00 	mov.w	ip, #0
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd92:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dd96:	d01c      	beq.n	800ddd2 <__gethex+0x3fe>
 800dd98:	3201      	adds	r2, #1
 800dd9a:	6002      	str	r2, [r0, #0]
 800dd9c:	2f02      	cmp	r7, #2
 800dd9e:	f104 0314 	add.w	r3, r4, #20
 800dda2:	d13f      	bne.n	800de24 <__gethex+0x450>
 800dda4:	f8d8 2000 	ldr.w	r2, [r8]
 800dda8:	3a01      	subs	r2, #1
 800ddaa:	42b2      	cmp	r2, r6
 800ddac:	d10a      	bne.n	800ddc4 <__gethex+0x3f0>
 800ddae:	1171      	asrs	r1, r6, #5
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ddb6:	f006 061f 	and.w	r6, r6, #31
 800ddba:	fa02 f606 	lsl.w	r6, r2, r6
 800ddbe:	421e      	tst	r6, r3
 800ddc0:	bf18      	it	ne
 800ddc2:	4617      	movne	r7, r2
 800ddc4:	f047 0720 	orr.w	r7, r7, #32
 800ddc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ddca:	601c      	str	r4, [r3, #0]
 800ddcc:	9b04      	ldr	r3, [sp, #16]
 800ddce:	601d      	str	r5, [r3, #0]
 800ddd0:	e695      	b.n	800dafe <__gethex+0x12a>
 800ddd2:	4299      	cmp	r1, r3
 800ddd4:	f843 cc04 	str.w	ip, [r3, #-4]
 800ddd8:	d8d8      	bhi.n	800dd8c <__gethex+0x3b8>
 800ddda:	68a3      	ldr	r3, [r4, #8]
 800dddc:	459b      	cmp	fp, r3
 800ddde:	db19      	blt.n	800de14 <__gethex+0x440>
 800dde0:	6861      	ldr	r1, [r4, #4]
 800dde2:	ee18 0a10 	vmov	r0, s16
 800dde6:	3101      	adds	r1, #1
 800dde8:	f000 f91a 	bl	800e020 <_Balloc>
 800ddec:	4681      	mov	r9, r0
 800ddee:	b918      	cbnz	r0, 800ddf8 <__gethex+0x424>
 800ddf0:	4b1a      	ldr	r3, [pc, #104]	; (800de5c <__gethex+0x488>)
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	2184      	movs	r1, #132	; 0x84
 800ddf6:	e6a8      	b.n	800db4a <__gethex+0x176>
 800ddf8:	6922      	ldr	r2, [r4, #16]
 800ddfa:	3202      	adds	r2, #2
 800ddfc:	f104 010c 	add.w	r1, r4, #12
 800de00:	0092      	lsls	r2, r2, #2
 800de02:	300c      	adds	r0, #12
 800de04:	f7fd fb48 	bl	800b498 <memcpy>
 800de08:	4621      	mov	r1, r4
 800de0a:	ee18 0a10 	vmov	r0, s16
 800de0e:	f000 f947 	bl	800e0a0 <_Bfree>
 800de12:	464c      	mov	r4, r9
 800de14:	6923      	ldr	r3, [r4, #16]
 800de16:	1c5a      	adds	r2, r3, #1
 800de18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800de1c:	6122      	str	r2, [r4, #16]
 800de1e:	2201      	movs	r2, #1
 800de20:	615a      	str	r2, [r3, #20]
 800de22:	e7bb      	b.n	800dd9c <__gethex+0x3c8>
 800de24:	6922      	ldr	r2, [r4, #16]
 800de26:	455a      	cmp	r2, fp
 800de28:	dd0b      	ble.n	800de42 <__gethex+0x46e>
 800de2a:	2101      	movs	r1, #1
 800de2c:	4620      	mov	r0, r4
 800de2e:	f7ff fd69 	bl	800d904 <rshift>
 800de32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de36:	3501      	adds	r5, #1
 800de38:	42ab      	cmp	r3, r5
 800de3a:	f6ff aed0 	blt.w	800dbde <__gethex+0x20a>
 800de3e:	2701      	movs	r7, #1
 800de40:	e7c0      	b.n	800ddc4 <__gethex+0x3f0>
 800de42:	f016 061f 	ands.w	r6, r6, #31
 800de46:	d0fa      	beq.n	800de3e <__gethex+0x46a>
 800de48:	449a      	add	sl, r3
 800de4a:	f1c6 0620 	rsb	r6, r6, #32
 800de4e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800de52:	f000 f9db 	bl	800e20c <__hi0bits>
 800de56:	42b0      	cmp	r0, r6
 800de58:	dbe7      	blt.n	800de2a <__gethex+0x456>
 800de5a:	e7f0      	b.n	800de3e <__gethex+0x46a>
 800de5c:	08010028 	.word	0x08010028

0800de60 <L_shift>:
 800de60:	f1c2 0208 	rsb	r2, r2, #8
 800de64:	0092      	lsls	r2, r2, #2
 800de66:	b570      	push	{r4, r5, r6, lr}
 800de68:	f1c2 0620 	rsb	r6, r2, #32
 800de6c:	6843      	ldr	r3, [r0, #4]
 800de6e:	6804      	ldr	r4, [r0, #0]
 800de70:	fa03 f506 	lsl.w	r5, r3, r6
 800de74:	432c      	orrs	r4, r5
 800de76:	40d3      	lsrs	r3, r2
 800de78:	6004      	str	r4, [r0, #0]
 800de7a:	f840 3f04 	str.w	r3, [r0, #4]!
 800de7e:	4288      	cmp	r0, r1
 800de80:	d3f4      	bcc.n	800de6c <L_shift+0xc>
 800de82:	bd70      	pop	{r4, r5, r6, pc}

0800de84 <__match>:
 800de84:	b530      	push	{r4, r5, lr}
 800de86:	6803      	ldr	r3, [r0, #0]
 800de88:	3301      	adds	r3, #1
 800de8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de8e:	b914      	cbnz	r4, 800de96 <__match+0x12>
 800de90:	6003      	str	r3, [r0, #0]
 800de92:	2001      	movs	r0, #1
 800de94:	bd30      	pop	{r4, r5, pc}
 800de96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800de9e:	2d19      	cmp	r5, #25
 800dea0:	bf98      	it	ls
 800dea2:	3220      	addls	r2, #32
 800dea4:	42a2      	cmp	r2, r4
 800dea6:	d0f0      	beq.n	800de8a <__match+0x6>
 800dea8:	2000      	movs	r0, #0
 800deaa:	e7f3      	b.n	800de94 <__match+0x10>

0800deac <__hexnan>:
 800deac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb0:	680b      	ldr	r3, [r1, #0]
 800deb2:	6801      	ldr	r1, [r0, #0]
 800deb4:	115e      	asrs	r6, r3, #5
 800deb6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800deba:	f013 031f 	ands.w	r3, r3, #31
 800debe:	b087      	sub	sp, #28
 800dec0:	bf18      	it	ne
 800dec2:	3604      	addne	r6, #4
 800dec4:	2500      	movs	r5, #0
 800dec6:	1f37      	subs	r7, r6, #4
 800dec8:	4682      	mov	sl, r0
 800deca:	4690      	mov	r8, r2
 800decc:	9301      	str	r3, [sp, #4]
 800dece:	f846 5c04 	str.w	r5, [r6, #-4]
 800ded2:	46b9      	mov	r9, r7
 800ded4:	463c      	mov	r4, r7
 800ded6:	9502      	str	r5, [sp, #8]
 800ded8:	46ab      	mov	fp, r5
 800deda:	784a      	ldrb	r2, [r1, #1]
 800dedc:	1c4b      	adds	r3, r1, #1
 800dede:	9303      	str	r3, [sp, #12]
 800dee0:	b342      	cbz	r2, 800df34 <__hexnan+0x88>
 800dee2:	4610      	mov	r0, r2
 800dee4:	9105      	str	r1, [sp, #20]
 800dee6:	9204      	str	r2, [sp, #16]
 800dee8:	f7ff fd5e 	bl	800d9a8 <__hexdig_fun>
 800deec:	2800      	cmp	r0, #0
 800deee:	d14f      	bne.n	800df90 <__hexnan+0xe4>
 800def0:	9a04      	ldr	r2, [sp, #16]
 800def2:	9905      	ldr	r1, [sp, #20]
 800def4:	2a20      	cmp	r2, #32
 800def6:	d818      	bhi.n	800df2a <__hexnan+0x7e>
 800def8:	9b02      	ldr	r3, [sp, #8]
 800defa:	459b      	cmp	fp, r3
 800defc:	dd13      	ble.n	800df26 <__hexnan+0x7a>
 800defe:	454c      	cmp	r4, r9
 800df00:	d206      	bcs.n	800df10 <__hexnan+0x64>
 800df02:	2d07      	cmp	r5, #7
 800df04:	dc04      	bgt.n	800df10 <__hexnan+0x64>
 800df06:	462a      	mov	r2, r5
 800df08:	4649      	mov	r1, r9
 800df0a:	4620      	mov	r0, r4
 800df0c:	f7ff ffa8 	bl	800de60 <L_shift>
 800df10:	4544      	cmp	r4, r8
 800df12:	d950      	bls.n	800dfb6 <__hexnan+0x10a>
 800df14:	2300      	movs	r3, #0
 800df16:	f1a4 0904 	sub.w	r9, r4, #4
 800df1a:	f844 3c04 	str.w	r3, [r4, #-4]
 800df1e:	f8cd b008 	str.w	fp, [sp, #8]
 800df22:	464c      	mov	r4, r9
 800df24:	461d      	mov	r5, r3
 800df26:	9903      	ldr	r1, [sp, #12]
 800df28:	e7d7      	b.n	800deda <__hexnan+0x2e>
 800df2a:	2a29      	cmp	r2, #41	; 0x29
 800df2c:	d156      	bne.n	800dfdc <__hexnan+0x130>
 800df2e:	3102      	adds	r1, #2
 800df30:	f8ca 1000 	str.w	r1, [sl]
 800df34:	f1bb 0f00 	cmp.w	fp, #0
 800df38:	d050      	beq.n	800dfdc <__hexnan+0x130>
 800df3a:	454c      	cmp	r4, r9
 800df3c:	d206      	bcs.n	800df4c <__hexnan+0xa0>
 800df3e:	2d07      	cmp	r5, #7
 800df40:	dc04      	bgt.n	800df4c <__hexnan+0xa0>
 800df42:	462a      	mov	r2, r5
 800df44:	4649      	mov	r1, r9
 800df46:	4620      	mov	r0, r4
 800df48:	f7ff ff8a 	bl	800de60 <L_shift>
 800df4c:	4544      	cmp	r4, r8
 800df4e:	d934      	bls.n	800dfba <__hexnan+0x10e>
 800df50:	f1a8 0204 	sub.w	r2, r8, #4
 800df54:	4623      	mov	r3, r4
 800df56:	f853 1b04 	ldr.w	r1, [r3], #4
 800df5a:	f842 1f04 	str.w	r1, [r2, #4]!
 800df5e:	429f      	cmp	r7, r3
 800df60:	d2f9      	bcs.n	800df56 <__hexnan+0xaa>
 800df62:	1b3b      	subs	r3, r7, r4
 800df64:	f023 0303 	bic.w	r3, r3, #3
 800df68:	3304      	adds	r3, #4
 800df6a:	3401      	adds	r4, #1
 800df6c:	3e03      	subs	r6, #3
 800df6e:	42b4      	cmp	r4, r6
 800df70:	bf88      	it	hi
 800df72:	2304      	movhi	r3, #4
 800df74:	4443      	add	r3, r8
 800df76:	2200      	movs	r2, #0
 800df78:	f843 2b04 	str.w	r2, [r3], #4
 800df7c:	429f      	cmp	r7, r3
 800df7e:	d2fb      	bcs.n	800df78 <__hexnan+0xcc>
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	b91b      	cbnz	r3, 800df8c <__hexnan+0xe0>
 800df84:	4547      	cmp	r7, r8
 800df86:	d127      	bne.n	800dfd8 <__hexnan+0x12c>
 800df88:	2301      	movs	r3, #1
 800df8a:	603b      	str	r3, [r7, #0]
 800df8c:	2005      	movs	r0, #5
 800df8e:	e026      	b.n	800dfde <__hexnan+0x132>
 800df90:	3501      	adds	r5, #1
 800df92:	2d08      	cmp	r5, #8
 800df94:	f10b 0b01 	add.w	fp, fp, #1
 800df98:	dd06      	ble.n	800dfa8 <__hexnan+0xfc>
 800df9a:	4544      	cmp	r4, r8
 800df9c:	d9c3      	bls.n	800df26 <__hexnan+0x7a>
 800df9e:	2300      	movs	r3, #0
 800dfa0:	f844 3c04 	str.w	r3, [r4, #-4]
 800dfa4:	2501      	movs	r5, #1
 800dfa6:	3c04      	subs	r4, #4
 800dfa8:	6822      	ldr	r2, [r4, #0]
 800dfaa:	f000 000f 	and.w	r0, r0, #15
 800dfae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800dfb2:	6022      	str	r2, [r4, #0]
 800dfb4:	e7b7      	b.n	800df26 <__hexnan+0x7a>
 800dfb6:	2508      	movs	r5, #8
 800dfb8:	e7b5      	b.n	800df26 <__hexnan+0x7a>
 800dfba:	9b01      	ldr	r3, [sp, #4]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d0df      	beq.n	800df80 <__hexnan+0xd4>
 800dfc0:	f04f 32ff 	mov.w	r2, #4294967295
 800dfc4:	f1c3 0320 	rsb	r3, r3, #32
 800dfc8:	fa22 f303 	lsr.w	r3, r2, r3
 800dfcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dfd0:	401a      	ands	r2, r3
 800dfd2:	f846 2c04 	str.w	r2, [r6, #-4]
 800dfd6:	e7d3      	b.n	800df80 <__hexnan+0xd4>
 800dfd8:	3f04      	subs	r7, #4
 800dfda:	e7d1      	b.n	800df80 <__hexnan+0xd4>
 800dfdc:	2004      	movs	r0, #4
 800dfde:	b007      	add	sp, #28
 800dfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfe4 <_localeconv_r>:
 800dfe4:	4800      	ldr	r0, [pc, #0]	; (800dfe8 <_localeconv_r+0x4>)
 800dfe6:	4770      	bx	lr
 800dfe8:	20000180 	.word	0x20000180

0800dfec <malloc>:
 800dfec:	4b02      	ldr	r3, [pc, #8]	; (800dff8 <malloc+0xc>)
 800dfee:	4601      	mov	r1, r0
 800dff0:	6818      	ldr	r0, [r3, #0]
 800dff2:	f000 bd2f 	b.w	800ea54 <_malloc_r>
 800dff6:	bf00      	nop
 800dff8:	20000028 	.word	0x20000028

0800dffc <__ascii_mbtowc>:
 800dffc:	b082      	sub	sp, #8
 800dffe:	b901      	cbnz	r1, 800e002 <__ascii_mbtowc+0x6>
 800e000:	a901      	add	r1, sp, #4
 800e002:	b142      	cbz	r2, 800e016 <__ascii_mbtowc+0x1a>
 800e004:	b14b      	cbz	r3, 800e01a <__ascii_mbtowc+0x1e>
 800e006:	7813      	ldrb	r3, [r2, #0]
 800e008:	600b      	str	r3, [r1, #0]
 800e00a:	7812      	ldrb	r2, [r2, #0]
 800e00c:	1e10      	subs	r0, r2, #0
 800e00e:	bf18      	it	ne
 800e010:	2001      	movne	r0, #1
 800e012:	b002      	add	sp, #8
 800e014:	4770      	bx	lr
 800e016:	4610      	mov	r0, r2
 800e018:	e7fb      	b.n	800e012 <__ascii_mbtowc+0x16>
 800e01a:	f06f 0001 	mvn.w	r0, #1
 800e01e:	e7f8      	b.n	800e012 <__ascii_mbtowc+0x16>

0800e020 <_Balloc>:
 800e020:	b570      	push	{r4, r5, r6, lr}
 800e022:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e024:	4604      	mov	r4, r0
 800e026:	460d      	mov	r5, r1
 800e028:	b976      	cbnz	r6, 800e048 <_Balloc+0x28>
 800e02a:	2010      	movs	r0, #16
 800e02c:	f7ff ffde 	bl	800dfec <malloc>
 800e030:	4602      	mov	r2, r0
 800e032:	6260      	str	r0, [r4, #36]	; 0x24
 800e034:	b920      	cbnz	r0, 800e040 <_Balloc+0x20>
 800e036:	4b18      	ldr	r3, [pc, #96]	; (800e098 <_Balloc+0x78>)
 800e038:	4818      	ldr	r0, [pc, #96]	; (800e09c <_Balloc+0x7c>)
 800e03a:	2166      	movs	r1, #102	; 0x66
 800e03c:	f7fe fdba 	bl	800cbb4 <__assert_func>
 800e040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e044:	6006      	str	r6, [r0, #0]
 800e046:	60c6      	str	r6, [r0, #12]
 800e048:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e04a:	68f3      	ldr	r3, [r6, #12]
 800e04c:	b183      	cbz	r3, 800e070 <_Balloc+0x50>
 800e04e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e050:	68db      	ldr	r3, [r3, #12]
 800e052:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e056:	b9b8      	cbnz	r0, 800e088 <_Balloc+0x68>
 800e058:	2101      	movs	r1, #1
 800e05a:	fa01 f605 	lsl.w	r6, r1, r5
 800e05e:	1d72      	adds	r2, r6, #5
 800e060:	0092      	lsls	r2, r2, #2
 800e062:	4620      	mov	r0, r4
 800e064:	f000 fc97 	bl	800e996 <_calloc_r>
 800e068:	b160      	cbz	r0, 800e084 <_Balloc+0x64>
 800e06a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e06e:	e00e      	b.n	800e08e <_Balloc+0x6e>
 800e070:	2221      	movs	r2, #33	; 0x21
 800e072:	2104      	movs	r1, #4
 800e074:	4620      	mov	r0, r4
 800e076:	f000 fc8e 	bl	800e996 <_calloc_r>
 800e07a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e07c:	60f0      	str	r0, [r6, #12]
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d1e4      	bne.n	800e04e <_Balloc+0x2e>
 800e084:	2000      	movs	r0, #0
 800e086:	bd70      	pop	{r4, r5, r6, pc}
 800e088:	6802      	ldr	r2, [r0, #0]
 800e08a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e08e:	2300      	movs	r3, #0
 800e090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e094:	e7f7      	b.n	800e086 <_Balloc+0x66>
 800e096:	bf00      	nop
 800e098:	0800ff08 	.word	0x0800ff08
 800e09c:	080100b8 	.word	0x080100b8

0800e0a0 <_Bfree>:
 800e0a0:	b570      	push	{r4, r5, r6, lr}
 800e0a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e0a4:	4605      	mov	r5, r0
 800e0a6:	460c      	mov	r4, r1
 800e0a8:	b976      	cbnz	r6, 800e0c8 <_Bfree+0x28>
 800e0aa:	2010      	movs	r0, #16
 800e0ac:	f7ff ff9e 	bl	800dfec <malloc>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	6268      	str	r0, [r5, #36]	; 0x24
 800e0b4:	b920      	cbnz	r0, 800e0c0 <_Bfree+0x20>
 800e0b6:	4b09      	ldr	r3, [pc, #36]	; (800e0dc <_Bfree+0x3c>)
 800e0b8:	4809      	ldr	r0, [pc, #36]	; (800e0e0 <_Bfree+0x40>)
 800e0ba:	218a      	movs	r1, #138	; 0x8a
 800e0bc:	f7fe fd7a 	bl	800cbb4 <__assert_func>
 800e0c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0c4:	6006      	str	r6, [r0, #0]
 800e0c6:	60c6      	str	r6, [r0, #12]
 800e0c8:	b13c      	cbz	r4, 800e0da <_Bfree+0x3a>
 800e0ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e0cc:	6862      	ldr	r2, [r4, #4]
 800e0ce:	68db      	ldr	r3, [r3, #12]
 800e0d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e0d4:	6021      	str	r1, [r4, #0]
 800e0d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e0da:	bd70      	pop	{r4, r5, r6, pc}
 800e0dc:	0800ff08 	.word	0x0800ff08
 800e0e0:	080100b8 	.word	0x080100b8

0800e0e4 <__multadd>:
 800e0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e8:	690e      	ldr	r6, [r1, #16]
 800e0ea:	4607      	mov	r7, r0
 800e0ec:	4698      	mov	r8, r3
 800e0ee:	460c      	mov	r4, r1
 800e0f0:	f101 0014 	add.w	r0, r1, #20
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	6805      	ldr	r5, [r0, #0]
 800e0f8:	b2a9      	uxth	r1, r5
 800e0fa:	fb02 8101 	mla	r1, r2, r1, r8
 800e0fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e102:	0c2d      	lsrs	r5, r5, #16
 800e104:	fb02 c505 	mla	r5, r2, r5, ip
 800e108:	b289      	uxth	r1, r1
 800e10a:	3301      	adds	r3, #1
 800e10c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e110:	429e      	cmp	r6, r3
 800e112:	f840 1b04 	str.w	r1, [r0], #4
 800e116:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e11a:	dcec      	bgt.n	800e0f6 <__multadd+0x12>
 800e11c:	f1b8 0f00 	cmp.w	r8, #0
 800e120:	d022      	beq.n	800e168 <__multadd+0x84>
 800e122:	68a3      	ldr	r3, [r4, #8]
 800e124:	42b3      	cmp	r3, r6
 800e126:	dc19      	bgt.n	800e15c <__multadd+0x78>
 800e128:	6861      	ldr	r1, [r4, #4]
 800e12a:	4638      	mov	r0, r7
 800e12c:	3101      	adds	r1, #1
 800e12e:	f7ff ff77 	bl	800e020 <_Balloc>
 800e132:	4605      	mov	r5, r0
 800e134:	b928      	cbnz	r0, 800e142 <__multadd+0x5e>
 800e136:	4602      	mov	r2, r0
 800e138:	4b0d      	ldr	r3, [pc, #52]	; (800e170 <__multadd+0x8c>)
 800e13a:	480e      	ldr	r0, [pc, #56]	; (800e174 <__multadd+0x90>)
 800e13c:	21b5      	movs	r1, #181	; 0xb5
 800e13e:	f7fe fd39 	bl	800cbb4 <__assert_func>
 800e142:	6922      	ldr	r2, [r4, #16]
 800e144:	3202      	adds	r2, #2
 800e146:	f104 010c 	add.w	r1, r4, #12
 800e14a:	0092      	lsls	r2, r2, #2
 800e14c:	300c      	adds	r0, #12
 800e14e:	f7fd f9a3 	bl	800b498 <memcpy>
 800e152:	4621      	mov	r1, r4
 800e154:	4638      	mov	r0, r7
 800e156:	f7ff ffa3 	bl	800e0a0 <_Bfree>
 800e15a:	462c      	mov	r4, r5
 800e15c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e160:	3601      	adds	r6, #1
 800e162:	f8c3 8014 	str.w	r8, [r3, #20]
 800e166:	6126      	str	r6, [r4, #16]
 800e168:	4620      	mov	r0, r4
 800e16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e16e:	bf00      	nop
 800e170:	08010028 	.word	0x08010028
 800e174:	080100b8 	.word	0x080100b8

0800e178 <__s2b>:
 800e178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e17c:	460c      	mov	r4, r1
 800e17e:	4615      	mov	r5, r2
 800e180:	461f      	mov	r7, r3
 800e182:	2209      	movs	r2, #9
 800e184:	3308      	adds	r3, #8
 800e186:	4606      	mov	r6, r0
 800e188:	fb93 f3f2 	sdiv	r3, r3, r2
 800e18c:	2100      	movs	r1, #0
 800e18e:	2201      	movs	r2, #1
 800e190:	429a      	cmp	r2, r3
 800e192:	db09      	blt.n	800e1a8 <__s2b+0x30>
 800e194:	4630      	mov	r0, r6
 800e196:	f7ff ff43 	bl	800e020 <_Balloc>
 800e19a:	b940      	cbnz	r0, 800e1ae <__s2b+0x36>
 800e19c:	4602      	mov	r2, r0
 800e19e:	4b19      	ldr	r3, [pc, #100]	; (800e204 <__s2b+0x8c>)
 800e1a0:	4819      	ldr	r0, [pc, #100]	; (800e208 <__s2b+0x90>)
 800e1a2:	21ce      	movs	r1, #206	; 0xce
 800e1a4:	f7fe fd06 	bl	800cbb4 <__assert_func>
 800e1a8:	0052      	lsls	r2, r2, #1
 800e1aa:	3101      	adds	r1, #1
 800e1ac:	e7f0      	b.n	800e190 <__s2b+0x18>
 800e1ae:	9b08      	ldr	r3, [sp, #32]
 800e1b0:	6143      	str	r3, [r0, #20]
 800e1b2:	2d09      	cmp	r5, #9
 800e1b4:	f04f 0301 	mov.w	r3, #1
 800e1b8:	6103      	str	r3, [r0, #16]
 800e1ba:	dd16      	ble.n	800e1ea <__s2b+0x72>
 800e1bc:	f104 0909 	add.w	r9, r4, #9
 800e1c0:	46c8      	mov	r8, r9
 800e1c2:	442c      	add	r4, r5
 800e1c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e1c8:	4601      	mov	r1, r0
 800e1ca:	3b30      	subs	r3, #48	; 0x30
 800e1cc:	220a      	movs	r2, #10
 800e1ce:	4630      	mov	r0, r6
 800e1d0:	f7ff ff88 	bl	800e0e4 <__multadd>
 800e1d4:	45a0      	cmp	r8, r4
 800e1d6:	d1f5      	bne.n	800e1c4 <__s2b+0x4c>
 800e1d8:	f1a5 0408 	sub.w	r4, r5, #8
 800e1dc:	444c      	add	r4, r9
 800e1de:	1b2d      	subs	r5, r5, r4
 800e1e0:	1963      	adds	r3, r4, r5
 800e1e2:	42bb      	cmp	r3, r7
 800e1e4:	db04      	blt.n	800e1f0 <__s2b+0x78>
 800e1e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1ea:	340a      	adds	r4, #10
 800e1ec:	2509      	movs	r5, #9
 800e1ee:	e7f6      	b.n	800e1de <__s2b+0x66>
 800e1f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e1f4:	4601      	mov	r1, r0
 800e1f6:	3b30      	subs	r3, #48	; 0x30
 800e1f8:	220a      	movs	r2, #10
 800e1fa:	4630      	mov	r0, r6
 800e1fc:	f7ff ff72 	bl	800e0e4 <__multadd>
 800e200:	e7ee      	b.n	800e1e0 <__s2b+0x68>
 800e202:	bf00      	nop
 800e204:	08010028 	.word	0x08010028
 800e208:	080100b8 	.word	0x080100b8

0800e20c <__hi0bits>:
 800e20c:	0c03      	lsrs	r3, r0, #16
 800e20e:	041b      	lsls	r3, r3, #16
 800e210:	b9d3      	cbnz	r3, 800e248 <__hi0bits+0x3c>
 800e212:	0400      	lsls	r0, r0, #16
 800e214:	2310      	movs	r3, #16
 800e216:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e21a:	bf04      	itt	eq
 800e21c:	0200      	lsleq	r0, r0, #8
 800e21e:	3308      	addeq	r3, #8
 800e220:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e224:	bf04      	itt	eq
 800e226:	0100      	lsleq	r0, r0, #4
 800e228:	3304      	addeq	r3, #4
 800e22a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e22e:	bf04      	itt	eq
 800e230:	0080      	lsleq	r0, r0, #2
 800e232:	3302      	addeq	r3, #2
 800e234:	2800      	cmp	r0, #0
 800e236:	db05      	blt.n	800e244 <__hi0bits+0x38>
 800e238:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e23c:	f103 0301 	add.w	r3, r3, #1
 800e240:	bf08      	it	eq
 800e242:	2320      	moveq	r3, #32
 800e244:	4618      	mov	r0, r3
 800e246:	4770      	bx	lr
 800e248:	2300      	movs	r3, #0
 800e24a:	e7e4      	b.n	800e216 <__hi0bits+0xa>

0800e24c <__lo0bits>:
 800e24c:	6803      	ldr	r3, [r0, #0]
 800e24e:	f013 0207 	ands.w	r2, r3, #7
 800e252:	4601      	mov	r1, r0
 800e254:	d00b      	beq.n	800e26e <__lo0bits+0x22>
 800e256:	07da      	lsls	r2, r3, #31
 800e258:	d424      	bmi.n	800e2a4 <__lo0bits+0x58>
 800e25a:	0798      	lsls	r0, r3, #30
 800e25c:	bf49      	itett	mi
 800e25e:	085b      	lsrmi	r3, r3, #1
 800e260:	089b      	lsrpl	r3, r3, #2
 800e262:	2001      	movmi	r0, #1
 800e264:	600b      	strmi	r3, [r1, #0]
 800e266:	bf5c      	itt	pl
 800e268:	600b      	strpl	r3, [r1, #0]
 800e26a:	2002      	movpl	r0, #2
 800e26c:	4770      	bx	lr
 800e26e:	b298      	uxth	r0, r3
 800e270:	b9b0      	cbnz	r0, 800e2a0 <__lo0bits+0x54>
 800e272:	0c1b      	lsrs	r3, r3, #16
 800e274:	2010      	movs	r0, #16
 800e276:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e27a:	bf04      	itt	eq
 800e27c:	0a1b      	lsreq	r3, r3, #8
 800e27e:	3008      	addeq	r0, #8
 800e280:	071a      	lsls	r2, r3, #28
 800e282:	bf04      	itt	eq
 800e284:	091b      	lsreq	r3, r3, #4
 800e286:	3004      	addeq	r0, #4
 800e288:	079a      	lsls	r2, r3, #30
 800e28a:	bf04      	itt	eq
 800e28c:	089b      	lsreq	r3, r3, #2
 800e28e:	3002      	addeq	r0, #2
 800e290:	07da      	lsls	r2, r3, #31
 800e292:	d403      	bmi.n	800e29c <__lo0bits+0x50>
 800e294:	085b      	lsrs	r3, r3, #1
 800e296:	f100 0001 	add.w	r0, r0, #1
 800e29a:	d005      	beq.n	800e2a8 <__lo0bits+0x5c>
 800e29c:	600b      	str	r3, [r1, #0]
 800e29e:	4770      	bx	lr
 800e2a0:	4610      	mov	r0, r2
 800e2a2:	e7e8      	b.n	800e276 <__lo0bits+0x2a>
 800e2a4:	2000      	movs	r0, #0
 800e2a6:	4770      	bx	lr
 800e2a8:	2020      	movs	r0, #32
 800e2aa:	4770      	bx	lr

0800e2ac <__i2b>:
 800e2ac:	b510      	push	{r4, lr}
 800e2ae:	460c      	mov	r4, r1
 800e2b0:	2101      	movs	r1, #1
 800e2b2:	f7ff feb5 	bl	800e020 <_Balloc>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	b928      	cbnz	r0, 800e2c6 <__i2b+0x1a>
 800e2ba:	4b05      	ldr	r3, [pc, #20]	; (800e2d0 <__i2b+0x24>)
 800e2bc:	4805      	ldr	r0, [pc, #20]	; (800e2d4 <__i2b+0x28>)
 800e2be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e2c2:	f7fe fc77 	bl	800cbb4 <__assert_func>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	6144      	str	r4, [r0, #20]
 800e2ca:	6103      	str	r3, [r0, #16]
 800e2cc:	bd10      	pop	{r4, pc}
 800e2ce:	bf00      	nop
 800e2d0:	08010028 	.word	0x08010028
 800e2d4:	080100b8 	.word	0x080100b8

0800e2d8 <__multiply>:
 800e2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2dc:	4614      	mov	r4, r2
 800e2de:	690a      	ldr	r2, [r1, #16]
 800e2e0:	6923      	ldr	r3, [r4, #16]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	bfb8      	it	lt
 800e2e6:	460b      	movlt	r3, r1
 800e2e8:	460d      	mov	r5, r1
 800e2ea:	bfbc      	itt	lt
 800e2ec:	4625      	movlt	r5, r4
 800e2ee:	461c      	movlt	r4, r3
 800e2f0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e2f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e2f8:	68ab      	ldr	r3, [r5, #8]
 800e2fa:	6869      	ldr	r1, [r5, #4]
 800e2fc:	eb0a 0709 	add.w	r7, sl, r9
 800e300:	42bb      	cmp	r3, r7
 800e302:	b085      	sub	sp, #20
 800e304:	bfb8      	it	lt
 800e306:	3101      	addlt	r1, #1
 800e308:	f7ff fe8a 	bl	800e020 <_Balloc>
 800e30c:	b930      	cbnz	r0, 800e31c <__multiply+0x44>
 800e30e:	4602      	mov	r2, r0
 800e310:	4b42      	ldr	r3, [pc, #264]	; (800e41c <__multiply+0x144>)
 800e312:	4843      	ldr	r0, [pc, #268]	; (800e420 <__multiply+0x148>)
 800e314:	f240 115d 	movw	r1, #349	; 0x15d
 800e318:	f7fe fc4c 	bl	800cbb4 <__assert_func>
 800e31c:	f100 0614 	add.w	r6, r0, #20
 800e320:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e324:	4633      	mov	r3, r6
 800e326:	2200      	movs	r2, #0
 800e328:	4543      	cmp	r3, r8
 800e32a:	d31e      	bcc.n	800e36a <__multiply+0x92>
 800e32c:	f105 0c14 	add.w	ip, r5, #20
 800e330:	f104 0314 	add.w	r3, r4, #20
 800e334:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e338:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e33c:	9202      	str	r2, [sp, #8]
 800e33e:	ebac 0205 	sub.w	r2, ip, r5
 800e342:	3a15      	subs	r2, #21
 800e344:	f022 0203 	bic.w	r2, r2, #3
 800e348:	3204      	adds	r2, #4
 800e34a:	f105 0115 	add.w	r1, r5, #21
 800e34e:	458c      	cmp	ip, r1
 800e350:	bf38      	it	cc
 800e352:	2204      	movcc	r2, #4
 800e354:	9201      	str	r2, [sp, #4]
 800e356:	9a02      	ldr	r2, [sp, #8]
 800e358:	9303      	str	r3, [sp, #12]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d808      	bhi.n	800e370 <__multiply+0x98>
 800e35e:	2f00      	cmp	r7, #0
 800e360:	dc55      	bgt.n	800e40e <__multiply+0x136>
 800e362:	6107      	str	r7, [r0, #16]
 800e364:	b005      	add	sp, #20
 800e366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e36a:	f843 2b04 	str.w	r2, [r3], #4
 800e36e:	e7db      	b.n	800e328 <__multiply+0x50>
 800e370:	f8b3 a000 	ldrh.w	sl, [r3]
 800e374:	f1ba 0f00 	cmp.w	sl, #0
 800e378:	d020      	beq.n	800e3bc <__multiply+0xe4>
 800e37a:	f105 0e14 	add.w	lr, r5, #20
 800e37e:	46b1      	mov	r9, r6
 800e380:	2200      	movs	r2, #0
 800e382:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e386:	f8d9 b000 	ldr.w	fp, [r9]
 800e38a:	b2a1      	uxth	r1, r4
 800e38c:	fa1f fb8b 	uxth.w	fp, fp
 800e390:	fb0a b101 	mla	r1, sl, r1, fp
 800e394:	4411      	add	r1, r2
 800e396:	f8d9 2000 	ldr.w	r2, [r9]
 800e39a:	0c24      	lsrs	r4, r4, #16
 800e39c:	0c12      	lsrs	r2, r2, #16
 800e39e:	fb0a 2404 	mla	r4, sl, r4, r2
 800e3a2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e3a6:	b289      	uxth	r1, r1
 800e3a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e3ac:	45f4      	cmp	ip, lr
 800e3ae:	f849 1b04 	str.w	r1, [r9], #4
 800e3b2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e3b6:	d8e4      	bhi.n	800e382 <__multiply+0xaa>
 800e3b8:	9901      	ldr	r1, [sp, #4]
 800e3ba:	5072      	str	r2, [r6, r1]
 800e3bc:	9a03      	ldr	r2, [sp, #12]
 800e3be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e3c2:	3304      	adds	r3, #4
 800e3c4:	f1b9 0f00 	cmp.w	r9, #0
 800e3c8:	d01f      	beq.n	800e40a <__multiply+0x132>
 800e3ca:	6834      	ldr	r4, [r6, #0]
 800e3cc:	f105 0114 	add.w	r1, r5, #20
 800e3d0:	46b6      	mov	lr, r6
 800e3d2:	f04f 0a00 	mov.w	sl, #0
 800e3d6:	880a      	ldrh	r2, [r1, #0]
 800e3d8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e3dc:	fb09 b202 	mla	r2, r9, r2, fp
 800e3e0:	4492      	add	sl, r2
 800e3e2:	b2a4      	uxth	r4, r4
 800e3e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e3e8:	f84e 4b04 	str.w	r4, [lr], #4
 800e3ec:	f851 4b04 	ldr.w	r4, [r1], #4
 800e3f0:	f8be 2000 	ldrh.w	r2, [lr]
 800e3f4:	0c24      	lsrs	r4, r4, #16
 800e3f6:	fb09 2404 	mla	r4, r9, r4, r2
 800e3fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e3fe:	458c      	cmp	ip, r1
 800e400:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e404:	d8e7      	bhi.n	800e3d6 <__multiply+0xfe>
 800e406:	9a01      	ldr	r2, [sp, #4]
 800e408:	50b4      	str	r4, [r6, r2]
 800e40a:	3604      	adds	r6, #4
 800e40c:	e7a3      	b.n	800e356 <__multiply+0x7e>
 800e40e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e412:	2b00      	cmp	r3, #0
 800e414:	d1a5      	bne.n	800e362 <__multiply+0x8a>
 800e416:	3f01      	subs	r7, #1
 800e418:	e7a1      	b.n	800e35e <__multiply+0x86>
 800e41a:	bf00      	nop
 800e41c:	08010028 	.word	0x08010028
 800e420:	080100b8 	.word	0x080100b8

0800e424 <__pow5mult>:
 800e424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e428:	4615      	mov	r5, r2
 800e42a:	f012 0203 	ands.w	r2, r2, #3
 800e42e:	4606      	mov	r6, r0
 800e430:	460f      	mov	r7, r1
 800e432:	d007      	beq.n	800e444 <__pow5mult+0x20>
 800e434:	4c25      	ldr	r4, [pc, #148]	; (800e4cc <__pow5mult+0xa8>)
 800e436:	3a01      	subs	r2, #1
 800e438:	2300      	movs	r3, #0
 800e43a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e43e:	f7ff fe51 	bl	800e0e4 <__multadd>
 800e442:	4607      	mov	r7, r0
 800e444:	10ad      	asrs	r5, r5, #2
 800e446:	d03d      	beq.n	800e4c4 <__pow5mult+0xa0>
 800e448:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e44a:	b97c      	cbnz	r4, 800e46c <__pow5mult+0x48>
 800e44c:	2010      	movs	r0, #16
 800e44e:	f7ff fdcd 	bl	800dfec <malloc>
 800e452:	4602      	mov	r2, r0
 800e454:	6270      	str	r0, [r6, #36]	; 0x24
 800e456:	b928      	cbnz	r0, 800e464 <__pow5mult+0x40>
 800e458:	4b1d      	ldr	r3, [pc, #116]	; (800e4d0 <__pow5mult+0xac>)
 800e45a:	481e      	ldr	r0, [pc, #120]	; (800e4d4 <__pow5mult+0xb0>)
 800e45c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e460:	f7fe fba8 	bl	800cbb4 <__assert_func>
 800e464:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e468:	6004      	str	r4, [r0, #0]
 800e46a:	60c4      	str	r4, [r0, #12]
 800e46c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e470:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e474:	b94c      	cbnz	r4, 800e48a <__pow5mult+0x66>
 800e476:	f240 2171 	movw	r1, #625	; 0x271
 800e47a:	4630      	mov	r0, r6
 800e47c:	f7ff ff16 	bl	800e2ac <__i2b>
 800e480:	2300      	movs	r3, #0
 800e482:	f8c8 0008 	str.w	r0, [r8, #8]
 800e486:	4604      	mov	r4, r0
 800e488:	6003      	str	r3, [r0, #0]
 800e48a:	f04f 0900 	mov.w	r9, #0
 800e48e:	07eb      	lsls	r3, r5, #31
 800e490:	d50a      	bpl.n	800e4a8 <__pow5mult+0x84>
 800e492:	4639      	mov	r1, r7
 800e494:	4622      	mov	r2, r4
 800e496:	4630      	mov	r0, r6
 800e498:	f7ff ff1e 	bl	800e2d8 <__multiply>
 800e49c:	4639      	mov	r1, r7
 800e49e:	4680      	mov	r8, r0
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	f7ff fdfd 	bl	800e0a0 <_Bfree>
 800e4a6:	4647      	mov	r7, r8
 800e4a8:	106d      	asrs	r5, r5, #1
 800e4aa:	d00b      	beq.n	800e4c4 <__pow5mult+0xa0>
 800e4ac:	6820      	ldr	r0, [r4, #0]
 800e4ae:	b938      	cbnz	r0, 800e4c0 <__pow5mult+0x9c>
 800e4b0:	4622      	mov	r2, r4
 800e4b2:	4621      	mov	r1, r4
 800e4b4:	4630      	mov	r0, r6
 800e4b6:	f7ff ff0f 	bl	800e2d8 <__multiply>
 800e4ba:	6020      	str	r0, [r4, #0]
 800e4bc:	f8c0 9000 	str.w	r9, [r0]
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	e7e4      	b.n	800e48e <__pow5mult+0x6a>
 800e4c4:	4638      	mov	r0, r7
 800e4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4ca:	bf00      	nop
 800e4cc:	08010208 	.word	0x08010208
 800e4d0:	0800ff08 	.word	0x0800ff08
 800e4d4:	080100b8 	.word	0x080100b8

0800e4d8 <__lshift>:
 800e4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4dc:	460c      	mov	r4, r1
 800e4de:	6849      	ldr	r1, [r1, #4]
 800e4e0:	6923      	ldr	r3, [r4, #16]
 800e4e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4e6:	68a3      	ldr	r3, [r4, #8]
 800e4e8:	4607      	mov	r7, r0
 800e4ea:	4691      	mov	r9, r2
 800e4ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4f0:	f108 0601 	add.w	r6, r8, #1
 800e4f4:	42b3      	cmp	r3, r6
 800e4f6:	db0b      	blt.n	800e510 <__lshift+0x38>
 800e4f8:	4638      	mov	r0, r7
 800e4fa:	f7ff fd91 	bl	800e020 <_Balloc>
 800e4fe:	4605      	mov	r5, r0
 800e500:	b948      	cbnz	r0, 800e516 <__lshift+0x3e>
 800e502:	4602      	mov	r2, r0
 800e504:	4b28      	ldr	r3, [pc, #160]	; (800e5a8 <__lshift+0xd0>)
 800e506:	4829      	ldr	r0, [pc, #164]	; (800e5ac <__lshift+0xd4>)
 800e508:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e50c:	f7fe fb52 	bl	800cbb4 <__assert_func>
 800e510:	3101      	adds	r1, #1
 800e512:	005b      	lsls	r3, r3, #1
 800e514:	e7ee      	b.n	800e4f4 <__lshift+0x1c>
 800e516:	2300      	movs	r3, #0
 800e518:	f100 0114 	add.w	r1, r0, #20
 800e51c:	f100 0210 	add.w	r2, r0, #16
 800e520:	4618      	mov	r0, r3
 800e522:	4553      	cmp	r3, sl
 800e524:	db33      	blt.n	800e58e <__lshift+0xb6>
 800e526:	6920      	ldr	r0, [r4, #16]
 800e528:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e52c:	f104 0314 	add.w	r3, r4, #20
 800e530:	f019 091f 	ands.w	r9, r9, #31
 800e534:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e538:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e53c:	d02b      	beq.n	800e596 <__lshift+0xbe>
 800e53e:	f1c9 0e20 	rsb	lr, r9, #32
 800e542:	468a      	mov	sl, r1
 800e544:	2200      	movs	r2, #0
 800e546:	6818      	ldr	r0, [r3, #0]
 800e548:	fa00 f009 	lsl.w	r0, r0, r9
 800e54c:	4302      	orrs	r2, r0
 800e54e:	f84a 2b04 	str.w	r2, [sl], #4
 800e552:	f853 2b04 	ldr.w	r2, [r3], #4
 800e556:	459c      	cmp	ip, r3
 800e558:	fa22 f20e 	lsr.w	r2, r2, lr
 800e55c:	d8f3      	bhi.n	800e546 <__lshift+0x6e>
 800e55e:	ebac 0304 	sub.w	r3, ip, r4
 800e562:	3b15      	subs	r3, #21
 800e564:	f023 0303 	bic.w	r3, r3, #3
 800e568:	3304      	adds	r3, #4
 800e56a:	f104 0015 	add.w	r0, r4, #21
 800e56e:	4584      	cmp	ip, r0
 800e570:	bf38      	it	cc
 800e572:	2304      	movcc	r3, #4
 800e574:	50ca      	str	r2, [r1, r3]
 800e576:	b10a      	cbz	r2, 800e57c <__lshift+0xa4>
 800e578:	f108 0602 	add.w	r6, r8, #2
 800e57c:	3e01      	subs	r6, #1
 800e57e:	4638      	mov	r0, r7
 800e580:	612e      	str	r6, [r5, #16]
 800e582:	4621      	mov	r1, r4
 800e584:	f7ff fd8c 	bl	800e0a0 <_Bfree>
 800e588:	4628      	mov	r0, r5
 800e58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e58e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e592:	3301      	adds	r3, #1
 800e594:	e7c5      	b.n	800e522 <__lshift+0x4a>
 800e596:	3904      	subs	r1, #4
 800e598:	f853 2b04 	ldr.w	r2, [r3], #4
 800e59c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5a0:	459c      	cmp	ip, r3
 800e5a2:	d8f9      	bhi.n	800e598 <__lshift+0xc0>
 800e5a4:	e7ea      	b.n	800e57c <__lshift+0xa4>
 800e5a6:	bf00      	nop
 800e5a8:	08010028 	.word	0x08010028
 800e5ac:	080100b8 	.word	0x080100b8

0800e5b0 <__mcmp>:
 800e5b0:	b530      	push	{r4, r5, lr}
 800e5b2:	6902      	ldr	r2, [r0, #16]
 800e5b4:	690c      	ldr	r4, [r1, #16]
 800e5b6:	1b12      	subs	r2, r2, r4
 800e5b8:	d10e      	bne.n	800e5d8 <__mcmp+0x28>
 800e5ba:	f100 0314 	add.w	r3, r0, #20
 800e5be:	3114      	adds	r1, #20
 800e5c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e5c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e5c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e5cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e5d0:	42a5      	cmp	r5, r4
 800e5d2:	d003      	beq.n	800e5dc <__mcmp+0x2c>
 800e5d4:	d305      	bcc.n	800e5e2 <__mcmp+0x32>
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	4610      	mov	r0, r2
 800e5da:	bd30      	pop	{r4, r5, pc}
 800e5dc:	4283      	cmp	r3, r0
 800e5de:	d3f3      	bcc.n	800e5c8 <__mcmp+0x18>
 800e5e0:	e7fa      	b.n	800e5d8 <__mcmp+0x28>
 800e5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5e6:	e7f7      	b.n	800e5d8 <__mcmp+0x28>

0800e5e8 <__mdiff>:
 800e5e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ec:	460c      	mov	r4, r1
 800e5ee:	4606      	mov	r6, r0
 800e5f0:	4611      	mov	r1, r2
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	4617      	mov	r7, r2
 800e5f6:	f7ff ffdb 	bl	800e5b0 <__mcmp>
 800e5fa:	1e05      	subs	r5, r0, #0
 800e5fc:	d110      	bne.n	800e620 <__mdiff+0x38>
 800e5fe:	4629      	mov	r1, r5
 800e600:	4630      	mov	r0, r6
 800e602:	f7ff fd0d 	bl	800e020 <_Balloc>
 800e606:	b930      	cbnz	r0, 800e616 <__mdiff+0x2e>
 800e608:	4b39      	ldr	r3, [pc, #228]	; (800e6f0 <__mdiff+0x108>)
 800e60a:	4602      	mov	r2, r0
 800e60c:	f240 2132 	movw	r1, #562	; 0x232
 800e610:	4838      	ldr	r0, [pc, #224]	; (800e6f4 <__mdiff+0x10c>)
 800e612:	f7fe facf 	bl	800cbb4 <__assert_func>
 800e616:	2301      	movs	r3, #1
 800e618:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e61c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e620:	bfa4      	itt	ge
 800e622:	463b      	movge	r3, r7
 800e624:	4627      	movge	r7, r4
 800e626:	4630      	mov	r0, r6
 800e628:	6879      	ldr	r1, [r7, #4]
 800e62a:	bfa6      	itte	ge
 800e62c:	461c      	movge	r4, r3
 800e62e:	2500      	movge	r5, #0
 800e630:	2501      	movlt	r5, #1
 800e632:	f7ff fcf5 	bl	800e020 <_Balloc>
 800e636:	b920      	cbnz	r0, 800e642 <__mdiff+0x5a>
 800e638:	4b2d      	ldr	r3, [pc, #180]	; (800e6f0 <__mdiff+0x108>)
 800e63a:	4602      	mov	r2, r0
 800e63c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e640:	e7e6      	b.n	800e610 <__mdiff+0x28>
 800e642:	693e      	ldr	r6, [r7, #16]
 800e644:	60c5      	str	r5, [r0, #12]
 800e646:	6925      	ldr	r5, [r4, #16]
 800e648:	f107 0114 	add.w	r1, r7, #20
 800e64c:	f104 0914 	add.w	r9, r4, #20
 800e650:	f100 0e14 	add.w	lr, r0, #20
 800e654:	f107 0210 	add.w	r2, r7, #16
 800e658:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e65c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e660:	46f2      	mov	sl, lr
 800e662:	2700      	movs	r7, #0
 800e664:	f859 3b04 	ldr.w	r3, [r9], #4
 800e668:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e66c:	fa1f f883 	uxth.w	r8, r3
 800e670:	fa17 f78b 	uxtah	r7, r7, fp
 800e674:	0c1b      	lsrs	r3, r3, #16
 800e676:	eba7 0808 	sub.w	r8, r7, r8
 800e67a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e67e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e682:	fa1f f888 	uxth.w	r8, r8
 800e686:	141f      	asrs	r7, r3, #16
 800e688:	454d      	cmp	r5, r9
 800e68a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e68e:	f84a 3b04 	str.w	r3, [sl], #4
 800e692:	d8e7      	bhi.n	800e664 <__mdiff+0x7c>
 800e694:	1b2b      	subs	r3, r5, r4
 800e696:	3b15      	subs	r3, #21
 800e698:	f023 0303 	bic.w	r3, r3, #3
 800e69c:	3304      	adds	r3, #4
 800e69e:	3415      	adds	r4, #21
 800e6a0:	42a5      	cmp	r5, r4
 800e6a2:	bf38      	it	cc
 800e6a4:	2304      	movcc	r3, #4
 800e6a6:	4419      	add	r1, r3
 800e6a8:	4473      	add	r3, lr
 800e6aa:	469e      	mov	lr, r3
 800e6ac:	460d      	mov	r5, r1
 800e6ae:	4565      	cmp	r5, ip
 800e6b0:	d30e      	bcc.n	800e6d0 <__mdiff+0xe8>
 800e6b2:	f10c 0203 	add.w	r2, ip, #3
 800e6b6:	1a52      	subs	r2, r2, r1
 800e6b8:	f022 0203 	bic.w	r2, r2, #3
 800e6bc:	3903      	subs	r1, #3
 800e6be:	458c      	cmp	ip, r1
 800e6c0:	bf38      	it	cc
 800e6c2:	2200      	movcc	r2, #0
 800e6c4:	441a      	add	r2, r3
 800e6c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e6ca:	b17b      	cbz	r3, 800e6ec <__mdiff+0x104>
 800e6cc:	6106      	str	r6, [r0, #16]
 800e6ce:	e7a5      	b.n	800e61c <__mdiff+0x34>
 800e6d0:	f855 8b04 	ldr.w	r8, [r5], #4
 800e6d4:	fa17 f488 	uxtah	r4, r7, r8
 800e6d8:	1422      	asrs	r2, r4, #16
 800e6da:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e6de:	b2a4      	uxth	r4, r4
 800e6e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e6e4:	f84e 4b04 	str.w	r4, [lr], #4
 800e6e8:	1417      	asrs	r7, r2, #16
 800e6ea:	e7e0      	b.n	800e6ae <__mdiff+0xc6>
 800e6ec:	3e01      	subs	r6, #1
 800e6ee:	e7ea      	b.n	800e6c6 <__mdiff+0xde>
 800e6f0:	08010028 	.word	0x08010028
 800e6f4:	080100b8 	.word	0x080100b8

0800e6f8 <__ulp>:
 800e6f8:	b082      	sub	sp, #8
 800e6fa:	ed8d 0b00 	vstr	d0, [sp]
 800e6fe:	9b01      	ldr	r3, [sp, #4]
 800e700:	4912      	ldr	r1, [pc, #72]	; (800e74c <__ulp+0x54>)
 800e702:	4019      	ands	r1, r3
 800e704:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e708:	2900      	cmp	r1, #0
 800e70a:	dd05      	ble.n	800e718 <__ulp+0x20>
 800e70c:	2200      	movs	r2, #0
 800e70e:	460b      	mov	r3, r1
 800e710:	ec43 2b10 	vmov	d0, r2, r3
 800e714:	b002      	add	sp, #8
 800e716:	4770      	bx	lr
 800e718:	4249      	negs	r1, r1
 800e71a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e71e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e722:	f04f 0200 	mov.w	r2, #0
 800e726:	f04f 0300 	mov.w	r3, #0
 800e72a:	da04      	bge.n	800e736 <__ulp+0x3e>
 800e72c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e730:	fa41 f300 	asr.w	r3, r1, r0
 800e734:	e7ec      	b.n	800e710 <__ulp+0x18>
 800e736:	f1a0 0114 	sub.w	r1, r0, #20
 800e73a:	291e      	cmp	r1, #30
 800e73c:	bfda      	itte	le
 800e73e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e742:	fa20 f101 	lsrle.w	r1, r0, r1
 800e746:	2101      	movgt	r1, #1
 800e748:	460a      	mov	r2, r1
 800e74a:	e7e1      	b.n	800e710 <__ulp+0x18>
 800e74c:	7ff00000 	.word	0x7ff00000

0800e750 <__b2d>:
 800e750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e752:	6905      	ldr	r5, [r0, #16]
 800e754:	f100 0714 	add.w	r7, r0, #20
 800e758:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e75c:	1f2e      	subs	r6, r5, #4
 800e75e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e762:	4620      	mov	r0, r4
 800e764:	f7ff fd52 	bl	800e20c <__hi0bits>
 800e768:	f1c0 0320 	rsb	r3, r0, #32
 800e76c:	280a      	cmp	r0, #10
 800e76e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e7ec <__b2d+0x9c>
 800e772:	600b      	str	r3, [r1, #0]
 800e774:	dc14      	bgt.n	800e7a0 <__b2d+0x50>
 800e776:	f1c0 0e0b 	rsb	lr, r0, #11
 800e77a:	fa24 f10e 	lsr.w	r1, r4, lr
 800e77e:	42b7      	cmp	r7, r6
 800e780:	ea41 030c 	orr.w	r3, r1, ip
 800e784:	bf34      	ite	cc
 800e786:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e78a:	2100      	movcs	r1, #0
 800e78c:	3015      	adds	r0, #21
 800e78e:	fa04 f000 	lsl.w	r0, r4, r0
 800e792:	fa21 f10e 	lsr.w	r1, r1, lr
 800e796:	ea40 0201 	orr.w	r2, r0, r1
 800e79a:	ec43 2b10 	vmov	d0, r2, r3
 800e79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7a0:	42b7      	cmp	r7, r6
 800e7a2:	bf3a      	itte	cc
 800e7a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e7a8:	f1a5 0608 	subcc.w	r6, r5, #8
 800e7ac:	2100      	movcs	r1, #0
 800e7ae:	380b      	subs	r0, #11
 800e7b0:	d017      	beq.n	800e7e2 <__b2d+0x92>
 800e7b2:	f1c0 0c20 	rsb	ip, r0, #32
 800e7b6:	fa04 f500 	lsl.w	r5, r4, r0
 800e7ba:	42be      	cmp	r6, r7
 800e7bc:	fa21 f40c 	lsr.w	r4, r1, ip
 800e7c0:	ea45 0504 	orr.w	r5, r5, r4
 800e7c4:	bf8c      	ite	hi
 800e7c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e7ca:	2400      	movls	r4, #0
 800e7cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e7d0:	fa01 f000 	lsl.w	r0, r1, r0
 800e7d4:	fa24 f40c 	lsr.w	r4, r4, ip
 800e7d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e7dc:	ea40 0204 	orr.w	r2, r0, r4
 800e7e0:	e7db      	b.n	800e79a <__b2d+0x4a>
 800e7e2:	ea44 030c 	orr.w	r3, r4, ip
 800e7e6:	460a      	mov	r2, r1
 800e7e8:	e7d7      	b.n	800e79a <__b2d+0x4a>
 800e7ea:	bf00      	nop
 800e7ec:	3ff00000 	.word	0x3ff00000

0800e7f0 <__d2b>:
 800e7f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e7f4:	4689      	mov	r9, r1
 800e7f6:	2101      	movs	r1, #1
 800e7f8:	ec57 6b10 	vmov	r6, r7, d0
 800e7fc:	4690      	mov	r8, r2
 800e7fe:	f7ff fc0f 	bl	800e020 <_Balloc>
 800e802:	4604      	mov	r4, r0
 800e804:	b930      	cbnz	r0, 800e814 <__d2b+0x24>
 800e806:	4602      	mov	r2, r0
 800e808:	4b25      	ldr	r3, [pc, #148]	; (800e8a0 <__d2b+0xb0>)
 800e80a:	4826      	ldr	r0, [pc, #152]	; (800e8a4 <__d2b+0xb4>)
 800e80c:	f240 310a 	movw	r1, #778	; 0x30a
 800e810:	f7fe f9d0 	bl	800cbb4 <__assert_func>
 800e814:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e818:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e81c:	bb35      	cbnz	r5, 800e86c <__d2b+0x7c>
 800e81e:	2e00      	cmp	r6, #0
 800e820:	9301      	str	r3, [sp, #4]
 800e822:	d028      	beq.n	800e876 <__d2b+0x86>
 800e824:	4668      	mov	r0, sp
 800e826:	9600      	str	r6, [sp, #0]
 800e828:	f7ff fd10 	bl	800e24c <__lo0bits>
 800e82c:	9900      	ldr	r1, [sp, #0]
 800e82e:	b300      	cbz	r0, 800e872 <__d2b+0x82>
 800e830:	9a01      	ldr	r2, [sp, #4]
 800e832:	f1c0 0320 	rsb	r3, r0, #32
 800e836:	fa02 f303 	lsl.w	r3, r2, r3
 800e83a:	430b      	orrs	r3, r1
 800e83c:	40c2      	lsrs	r2, r0
 800e83e:	6163      	str	r3, [r4, #20]
 800e840:	9201      	str	r2, [sp, #4]
 800e842:	9b01      	ldr	r3, [sp, #4]
 800e844:	61a3      	str	r3, [r4, #24]
 800e846:	2b00      	cmp	r3, #0
 800e848:	bf14      	ite	ne
 800e84a:	2202      	movne	r2, #2
 800e84c:	2201      	moveq	r2, #1
 800e84e:	6122      	str	r2, [r4, #16]
 800e850:	b1d5      	cbz	r5, 800e888 <__d2b+0x98>
 800e852:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e856:	4405      	add	r5, r0
 800e858:	f8c9 5000 	str.w	r5, [r9]
 800e85c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e860:	f8c8 0000 	str.w	r0, [r8]
 800e864:	4620      	mov	r0, r4
 800e866:	b003      	add	sp, #12
 800e868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e86c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e870:	e7d5      	b.n	800e81e <__d2b+0x2e>
 800e872:	6161      	str	r1, [r4, #20]
 800e874:	e7e5      	b.n	800e842 <__d2b+0x52>
 800e876:	a801      	add	r0, sp, #4
 800e878:	f7ff fce8 	bl	800e24c <__lo0bits>
 800e87c:	9b01      	ldr	r3, [sp, #4]
 800e87e:	6163      	str	r3, [r4, #20]
 800e880:	2201      	movs	r2, #1
 800e882:	6122      	str	r2, [r4, #16]
 800e884:	3020      	adds	r0, #32
 800e886:	e7e3      	b.n	800e850 <__d2b+0x60>
 800e888:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e88c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e890:	f8c9 0000 	str.w	r0, [r9]
 800e894:	6918      	ldr	r0, [r3, #16]
 800e896:	f7ff fcb9 	bl	800e20c <__hi0bits>
 800e89a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e89e:	e7df      	b.n	800e860 <__d2b+0x70>
 800e8a0:	08010028 	.word	0x08010028
 800e8a4:	080100b8 	.word	0x080100b8

0800e8a8 <__ratio>:
 800e8a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ac:	4688      	mov	r8, r1
 800e8ae:	4669      	mov	r1, sp
 800e8b0:	4681      	mov	r9, r0
 800e8b2:	f7ff ff4d 	bl	800e750 <__b2d>
 800e8b6:	a901      	add	r1, sp, #4
 800e8b8:	4640      	mov	r0, r8
 800e8ba:	ec55 4b10 	vmov	r4, r5, d0
 800e8be:	f7ff ff47 	bl	800e750 <__b2d>
 800e8c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e8c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e8ca:	eba3 0c02 	sub.w	ip, r3, r2
 800e8ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e8d2:	1a9b      	subs	r3, r3, r2
 800e8d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e8d8:	ec51 0b10 	vmov	r0, r1, d0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	bfd6      	itet	le
 800e8e0:	460a      	movle	r2, r1
 800e8e2:	462a      	movgt	r2, r5
 800e8e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e8e8:	468b      	mov	fp, r1
 800e8ea:	462f      	mov	r7, r5
 800e8ec:	bfd4      	ite	le
 800e8ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e8f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	ee10 2a10 	vmov	r2, s0
 800e8fc:	465b      	mov	r3, fp
 800e8fe:	4639      	mov	r1, r7
 800e900:	f7f1 ffac 	bl	800085c <__aeabi_ddiv>
 800e904:	ec41 0b10 	vmov	d0, r0, r1
 800e908:	b003      	add	sp, #12
 800e90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e90e <__copybits>:
 800e90e:	3901      	subs	r1, #1
 800e910:	b570      	push	{r4, r5, r6, lr}
 800e912:	1149      	asrs	r1, r1, #5
 800e914:	6914      	ldr	r4, [r2, #16]
 800e916:	3101      	adds	r1, #1
 800e918:	f102 0314 	add.w	r3, r2, #20
 800e91c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e920:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e924:	1f05      	subs	r5, r0, #4
 800e926:	42a3      	cmp	r3, r4
 800e928:	d30c      	bcc.n	800e944 <__copybits+0x36>
 800e92a:	1aa3      	subs	r3, r4, r2
 800e92c:	3b11      	subs	r3, #17
 800e92e:	f023 0303 	bic.w	r3, r3, #3
 800e932:	3211      	adds	r2, #17
 800e934:	42a2      	cmp	r2, r4
 800e936:	bf88      	it	hi
 800e938:	2300      	movhi	r3, #0
 800e93a:	4418      	add	r0, r3
 800e93c:	2300      	movs	r3, #0
 800e93e:	4288      	cmp	r0, r1
 800e940:	d305      	bcc.n	800e94e <__copybits+0x40>
 800e942:	bd70      	pop	{r4, r5, r6, pc}
 800e944:	f853 6b04 	ldr.w	r6, [r3], #4
 800e948:	f845 6f04 	str.w	r6, [r5, #4]!
 800e94c:	e7eb      	b.n	800e926 <__copybits+0x18>
 800e94e:	f840 3b04 	str.w	r3, [r0], #4
 800e952:	e7f4      	b.n	800e93e <__copybits+0x30>

0800e954 <__any_on>:
 800e954:	f100 0214 	add.w	r2, r0, #20
 800e958:	6900      	ldr	r0, [r0, #16]
 800e95a:	114b      	asrs	r3, r1, #5
 800e95c:	4298      	cmp	r0, r3
 800e95e:	b510      	push	{r4, lr}
 800e960:	db11      	blt.n	800e986 <__any_on+0x32>
 800e962:	dd0a      	ble.n	800e97a <__any_on+0x26>
 800e964:	f011 011f 	ands.w	r1, r1, #31
 800e968:	d007      	beq.n	800e97a <__any_on+0x26>
 800e96a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e96e:	fa24 f001 	lsr.w	r0, r4, r1
 800e972:	fa00 f101 	lsl.w	r1, r0, r1
 800e976:	428c      	cmp	r4, r1
 800e978:	d10b      	bne.n	800e992 <__any_on+0x3e>
 800e97a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e97e:	4293      	cmp	r3, r2
 800e980:	d803      	bhi.n	800e98a <__any_on+0x36>
 800e982:	2000      	movs	r0, #0
 800e984:	bd10      	pop	{r4, pc}
 800e986:	4603      	mov	r3, r0
 800e988:	e7f7      	b.n	800e97a <__any_on+0x26>
 800e98a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e98e:	2900      	cmp	r1, #0
 800e990:	d0f5      	beq.n	800e97e <__any_on+0x2a>
 800e992:	2001      	movs	r0, #1
 800e994:	e7f6      	b.n	800e984 <__any_on+0x30>

0800e996 <_calloc_r>:
 800e996:	b513      	push	{r0, r1, r4, lr}
 800e998:	434a      	muls	r2, r1
 800e99a:	4611      	mov	r1, r2
 800e99c:	9201      	str	r2, [sp, #4]
 800e99e:	f000 f859 	bl	800ea54 <_malloc_r>
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	b118      	cbz	r0, 800e9ae <_calloc_r+0x18>
 800e9a6:	9a01      	ldr	r2, [sp, #4]
 800e9a8:	2100      	movs	r1, #0
 800e9aa:	f7fc fd83 	bl	800b4b4 <memset>
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	b002      	add	sp, #8
 800e9b2:	bd10      	pop	{r4, pc}

0800e9b4 <_free_r>:
 800e9b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9b6:	2900      	cmp	r1, #0
 800e9b8:	d048      	beq.n	800ea4c <_free_r+0x98>
 800e9ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9be:	9001      	str	r0, [sp, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	f1a1 0404 	sub.w	r4, r1, #4
 800e9c6:	bfb8      	it	lt
 800e9c8:	18e4      	addlt	r4, r4, r3
 800e9ca:	f000 fe8d 	bl	800f6e8 <__malloc_lock>
 800e9ce:	4a20      	ldr	r2, [pc, #128]	; (800ea50 <_free_r+0x9c>)
 800e9d0:	9801      	ldr	r0, [sp, #4]
 800e9d2:	6813      	ldr	r3, [r2, #0]
 800e9d4:	4615      	mov	r5, r2
 800e9d6:	b933      	cbnz	r3, 800e9e6 <_free_r+0x32>
 800e9d8:	6063      	str	r3, [r4, #4]
 800e9da:	6014      	str	r4, [r2, #0]
 800e9dc:	b003      	add	sp, #12
 800e9de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9e2:	f000 be87 	b.w	800f6f4 <__malloc_unlock>
 800e9e6:	42a3      	cmp	r3, r4
 800e9e8:	d90b      	bls.n	800ea02 <_free_r+0x4e>
 800e9ea:	6821      	ldr	r1, [r4, #0]
 800e9ec:	1862      	adds	r2, r4, r1
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	bf04      	itt	eq
 800e9f2:	681a      	ldreq	r2, [r3, #0]
 800e9f4:	685b      	ldreq	r3, [r3, #4]
 800e9f6:	6063      	str	r3, [r4, #4]
 800e9f8:	bf04      	itt	eq
 800e9fa:	1852      	addeq	r2, r2, r1
 800e9fc:	6022      	streq	r2, [r4, #0]
 800e9fe:	602c      	str	r4, [r5, #0]
 800ea00:	e7ec      	b.n	800e9dc <_free_r+0x28>
 800ea02:	461a      	mov	r2, r3
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	b10b      	cbz	r3, 800ea0c <_free_r+0x58>
 800ea08:	42a3      	cmp	r3, r4
 800ea0a:	d9fa      	bls.n	800ea02 <_free_r+0x4e>
 800ea0c:	6811      	ldr	r1, [r2, #0]
 800ea0e:	1855      	adds	r5, r2, r1
 800ea10:	42a5      	cmp	r5, r4
 800ea12:	d10b      	bne.n	800ea2c <_free_r+0x78>
 800ea14:	6824      	ldr	r4, [r4, #0]
 800ea16:	4421      	add	r1, r4
 800ea18:	1854      	adds	r4, r2, r1
 800ea1a:	42a3      	cmp	r3, r4
 800ea1c:	6011      	str	r1, [r2, #0]
 800ea1e:	d1dd      	bne.n	800e9dc <_free_r+0x28>
 800ea20:	681c      	ldr	r4, [r3, #0]
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	6053      	str	r3, [r2, #4]
 800ea26:	4421      	add	r1, r4
 800ea28:	6011      	str	r1, [r2, #0]
 800ea2a:	e7d7      	b.n	800e9dc <_free_r+0x28>
 800ea2c:	d902      	bls.n	800ea34 <_free_r+0x80>
 800ea2e:	230c      	movs	r3, #12
 800ea30:	6003      	str	r3, [r0, #0]
 800ea32:	e7d3      	b.n	800e9dc <_free_r+0x28>
 800ea34:	6825      	ldr	r5, [r4, #0]
 800ea36:	1961      	adds	r1, r4, r5
 800ea38:	428b      	cmp	r3, r1
 800ea3a:	bf04      	itt	eq
 800ea3c:	6819      	ldreq	r1, [r3, #0]
 800ea3e:	685b      	ldreq	r3, [r3, #4]
 800ea40:	6063      	str	r3, [r4, #4]
 800ea42:	bf04      	itt	eq
 800ea44:	1949      	addeq	r1, r1, r5
 800ea46:	6021      	streq	r1, [r4, #0]
 800ea48:	6054      	str	r4, [r2, #4]
 800ea4a:	e7c7      	b.n	800e9dc <_free_r+0x28>
 800ea4c:	b003      	add	sp, #12
 800ea4e:	bd30      	pop	{r4, r5, pc}
 800ea50:	20004b54 	.word	0x20004b54

0800ea54 <_malloc_r>:
 800ea54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea56:	1ccd      	adds	r5, r1, #3
 800ea58:	f025 0503 	bic.w	r5, r5, #3
 800ea5c:	3508      	adds	r5, #8
 800ea5e:	2d0c      	cmp	r5, #12
 800ea60:	bf38      	it	cc
 800ea62:	250c      	movcc	r5, #12
 800ea64:	2d00      	cmp	r5, #0
 800ea66:	4606      	mov	r6, r0
 800ea68:	db01      	blt.n	800ea6e <_malloc_r+0x1a>
 800ea6a:	42a9      	cmp	r1, r5
 800ea6c:	d903      	bls.n	800ea76 <_malloc_r+0x22>
 800ea6e:	230c      	movs	r3, #12
 800ea70:	6033      	str	r3, [r6, #0]
 800ea72:	2000      	movs	r0, #0
 800ea74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea76:	f000 fe37 	bl	800f6e8 <__malloc_lock>
 800ea7a:	4921      	ldr	r1, [pc, #132]	; (800eb00 <_malloc_r+0xac>)
 800ea7c:	680a      	ldr	r2, [r1, #0]
 800ea7e:	4614      	mov	r4, r2
 800ea80:	b99c      	cbnz	r4, 800eaaa <_malloc_r+0x56>
 800ea82:	4f20      	ldr	r7, [pc, #128]	; (800eb04 <_malloc_r+0xb0>)
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	b923      	cbnz	r3, 800ea92 <_malloc_r+0x3e>
 800ea88:	4621      	mov	r1, r4
 800ea8a:	4630      	mov	r0, r6
 800ea8c:	f000 fafc 	bl	800f088 <_sbrk_r>
 800ea90:	6038      	str	r0, [r7, #0]
 800ea92:	4629      	mov	r1, r5
 800ea94:	4630      	mov	r0, r6
 800ea96:	f000 faf7 	bl	800f088 <_sbrk_r>
 800ea9a:	1c43      	adds	r3, r0, #1
 800ea9c:	d123      	bne.n	800eae6 <_malloc_r+0x92>
 800ea9e:	230c      	movs	r3, #12
 800eaa0:	6033      	str	r3, [r6, #0]
 800eaa2:	4630      	mov	r0, r6
 800eaa4:	f000 fe26 	bl	800f6f4 <__malloc_unlock>
 800eaa8:	e7e3      	b.n	800ea72 <_malloc_r+0x1e>
 800eaaa:	6823      	ldr	r3, [r4, #0]
 800eaac:	1b5b      	subs	r3, r3, r5
 800eaae:	d417      	bmi.n	800eae0 <_malloc_r+0x8c>
 800eab0:	2b0b      	cmp	r3, #11
 800eab2:	d903      	bls.n	800eabc <_malloc_r+0x68>
 800eab4:	6023      	str	r3, [r4, #0]
 800eab6:	441c      	add	r4, r3
 800eab8:	6025      	str	r5, [r4, #0]
 800eaba:	e004      	b.n	800eac6 <_malloc_r+0x72>
 800eabc:	6863      	ldr	r3, [r4, #4]
 800eabe:	42a2      	cmp	r2, r4
 800eac0:	bf0c      	ite	eq
 800eac2:	600b      	streq	r3, [r1, #0]
 800eac4:	6053      	strne	r3, [r2, #4]
 800eac6:	4630      	mov	r0, r6
 800eac8:	f000 fe14 	bl	800f6f4 <__malloc_unlock>
 800eacc:	f104 000b 	add.w	r0, r4, #11
 800ead0:	1d23      	adds	r3, r4, #4
 800ead2:	f020 0007 	bic.w	r0, r0, #7
 800ead6:	1ac2      	subs	r2, r0, r3
 800ead8:	d0cc      	beq.n	800ea74 <_malloc_r+0x20>
 800eada:	1a1b      	subs	r3, r3, r0
 800eadc:	50a3      	str	r3, [r4, r2]
 800eade:	e7c9      	b.n	800ea74 <_malloc_r+0x20>
 800eae0:	4622      	mov	r2, r4
 800eae2:	6864      	ldr	r4, [r4, #4]
 800eae4:	e7cc      	b.n	800ea80 <_malloc_r+0x2c>
 800eae6:	1cc4      	adds	r4, r0, #3
 800eae8:	f024 0403 	bic.w	r4, r4, #3
 800eaec:	42a0      	cmp	r0, r4
 800eaee:	d0e3      	beq.n	800eab8 <_malloc_r+0x64>
 800eaf0:	1a21      	subs	r1, r4, r0
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	f000 fac8 	bl	800f088 <_sbrk_r>
 800eaf8:	3001      	adds	r0, #1
 800eafa:	d1dd      	bne.n	800eab8 <_malloc_r+0x64>
 800eafc:	e7cf      	b.n	800ea9e <_malloc_r+0x4a>
 800eafe:	bf00      	nop
 800eb00:	20004b54 	.word	0x20004b54
 800eb04:	20004b58 	.word	0x20004b58

0800eb08 <__ssputs_r>:
 800eb08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb0c:	688e      	ldr	r6, [r1, #8]
 800eb0e:	429e      	cmp	r6, r3
 800eb10:	4682      	mov	sl, r0
 800eb12:	460c      	mov	r4, r1
 800eb14:	4690      	mov	r8, r2
 800eb16:	461f      	mov	r7, r3
 800eb18:	d838      	bhi.n	800eb8c <__ssputs_r+0x84>
 800eb1a:	898a      	ldrh	r2, [r1, #12]
 800eb1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eb20:	d032      	beq.n	800eb88 <__ssputs_r+0x80>
 800eb22:	6825      	ldr	r5, [r4, #0]
 800eb24:	6909      	ldr	r1, [r1, #16]
 800eb26:	eba5 0901 	sub.w	r9, r5, r1
 800eb2a:	6965      	ldr	r5, [r4, #20]
 800eb2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb34:	3301      	adds	r3, #1
 800eb36:	444b      	add	r3, r9
 800eb38:	106d      	asrs	r5, r5, #1
 800eb3a:	429d      	cmp	r5, r3
 800eb3c:	bf38      	it	cc
 800eb3e:	461d      	movcc	r5, r3
 800eb40:	0553      	lsls	r3, r2, #21
 800eb42:	d531      	bpl.n	800eba8 <__ssputs_r+0xa0>
 800eb44:	4629      	mov	r1, r5
 800eb46:	f7ff ff85 	bl	800ea54 <_malloc_r>
 800eb4a:	4606      	mov	r6, r0
 800eb4c:	b950      	cbnz	r0, 800eb64 <__ssputs_r+0x5c>
 800eb4e:	230c      	movs	r3, #12
 800eb50:	f8ca 3000 	str.w	r3, [sl]
 800eb54:	89a3      	ldrh	r3, [r4, #12]
 800eb56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb5a:	81a3      	strh	r3, [r4, #12]
 800eb5c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb64:	6921      	ldr	r1, [r4, #16]
 800eb66:	464a      	mov	r2, r9
 800eb68:	f7fc fc96 	bl	800b498 <memcpy>
 800eb6c:	89a3      	ldrh	r3, [r4, #12]
 800eb6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eb72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb76:	81a3      	strh	r3, [r4, #12]
 800eb78:	6126      	str	r6, [r4, #16]
 800eb7a:	6165      	str	r5, [r4, #20]
 800eb7c:	444e      	add	r6, r9
 800eb7e:	eba5 0509 	sub.w	r5, r5, r9
 800eb82:	6026      	str	r6, [r4, #0]
 800eb84:	60a5      	str	r5, [r4, #8]
 800eb86:	463e      	mov	r6, r7
 800eb88:	42be      	cmp	r6, r7
 800eb8a:	d900      	bls.n	800eb8e <__ssputs_r+0x86>
 800eb8c:	463e      	mov	r6, r7
 800eb8e:	4632      	mov	r2, r6
 800eb90:	6820      	ldr	r0, [r4, #0]
 800eb92:	4641      	mov	r1, r8
 800eb94:	f000 fd8e 	bl	800f6b4 <memmove>
 800eb98:	68a3      	ldr	r3, [r4, #8]
 800eb9a:	6822      	ldr	r2, [r4, #0]
 800eb9c:	1b9b      	subs	r3, r3, r6
 800eb9e:	4432      	add	r2, r6
 800eba0:	60a3      	str	r3, [r4, #8]
 800eba2:	6022      	str	r2, [r4, #0]
 800eba4:	2000      	movs	r0, #0
 800eba6:	e7db      	b.n	800eb60 <__ssputs_r+0x58>
 800eba8:	462a      	mov	r2, r5
 800ebaa:	f000 fda9 	bl	800f700 <_realloc_r>
 800ebae:	4606      	mov	r6, r0
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	d1e1      	bne.n	800eb78 <__ssputs_r+0x70>
 800ebb4:	6921      	ldr	r1, [r4, #16]
 800ebb6:	4650      	mov	r0, sl
 800ebb8:	f7ff fefc 	bl	800e9b4 <_free_r>
 800ebbc:	e7c7      	b.n	800eb4e <__ssputs_r+0x46>
	...

0800ebc0 <_svfiprintf_r>:
 800ebc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc4:	4698      	mov	r8, r3
 800ebc6:	898b      	ldrh	r3, [r1, #12]
 800ebc8:	061b      	lsls	r3, r3, #24
 800ebca:	b09d      	sub	sp, #116	; 0x74
 800ebcc:	4607      	mov	r7, r0
 800ebce:	460d      	mov	r5, r1
 800ebd0:	4614      	mov	r4, r2
 800ebd2:	d50e      	bpl.n	800ebf2 <_svfiprintf_r+0x32>
 800ebd4:	690b      	ldr	r3, [r1, #16]
 800ebd6:	b963      	cbnz	r3, 800ebf2 <_svfiprintf_r+0x32>
 800ebd8:	2140      	movs	r1, #64	; 0x40
 800ebda:	f7ff ff3b 	bl	800ea54 <_malloc_r>
 800ebde:	6028      	str	r0, [r5, #0]
 800ebe0:	6128      	str	r0, [r5, #16]
 800ebe2:	b920      	cbnz	r0, 800ebee <_svfiprintf_r+0x2e>
 800ebe4:	230c      	movs	r3, #12
 800ebe6:	603b      	str	r3, [r7, #0]
 800ebe8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebec:	e0d1      	b.n	800ed92 <_svfiprintf_r+0x1d2>
 800ebee:	2340      	movs	r3, #64	; 0x40
 800ebf0:	616b      	str	r3, [r5, #20]
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	9309      	str	r3, [sp, #36]	; 0x24
 800ebf6:	2320      	movs	r3, #32
 800ebf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec00:	2330      	movs	r3, #48	; 0x30
 800ec02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800edac <_svfiprintf_r+0x1ec>
 800ec06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec0a:	f04f 0901 	mov.w	r9, #1
 800ec0e:	4623      	mov	r3, r4
 800ec10:	469a      	mov	sl, r3
 800ec12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec16:	b10a      	cbz	r2, 800ec1c <_svfiprintf_r+0x5c>
 800ec18:	2a25      	cmp	r2, #37	; 0x25
 800ec1a:	d1f9      	bne.n	800ec10 <_svfiprintf_r+0x50>
 800ec1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ec20:	d00b      	beq.n	800ec3a <_svfiprintf_r+0x7a>
 800ec22:	465b      	mov	r3, fp
 800ec24:	4622      	mov	r2, r4
 800ec26:	4629      	mov	r1, r5
 800ec28:	4638      	mov	r0, r7
 800ec2a:	f7ff ff6d 	bl	800eb08 <__ssputs_r>
 800ec2e:	3001      	adds	r0, #1
 800ec30:	f000 80aa 	beq.w	800ed88 <_svfiprintf_r+0x1c8>
 800ec34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec36:	445a      	add	r2, fp
 800ec38:	9209      	str	r2, [sp, #36]	; 0x24
 800ec3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	f000 80a2 	beq.w	800ed88 <_svfiprintf_r+0x1c8>
 800ec44:	2300      	movs	r3, #0
 800ec46:	f04f 32ff 	mov.w	r2, #4294967295
 800ec4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec4e:	f10a 0a01 	add.w	sl, sl, #1
 800ec52:	9304      	str	r3, [sp, #16]
 800ec54:	9307      	str	r3, [sp, #28]
 800ec56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec5a:	931a      	str	r3, [sp, #104]	; 0x68
 800ec5c:	4654      	mov	r4, sl
 800ec5e:	2205      	movs	r2, #5
 800ec60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec64:	4851      	ldr	r0, [pc, #324]	; (800edac <_svfiprintf_r+0x1ec>)
 800ec66:	f7f1 fac3 	bl	80001f0 <memchr>
 800ec6a:	9a04      	ldr	r2, [sp, #16]
 800ec6c:	b9d8      	cbnz	r0, 800eca6 <_svfiprintf_r+0xe6>
 800ec6e:	06d0      	lsls	r0, r2, #27
 800ec70:	bf44      	itt	mi
 800ec72:	2320      	movmi	r3, #32
 800ec74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec78:	0711      	lsls	r1, r2, #28
 800ec7a:	bf44      	itt	mi
 800ec7c:	232b      	movmi	r3, #43	; 0x2b
 800ec7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec82:	f89a 3000 	ldrb.w	r3, [sl]
 800ec86:	2b2a      	cmp	r3, #42	; 0x2a
 800ec88:	d015      	beq.n	800ecb6 <_svfiprintf_r+0xf6>
 800ec8a:	9a07      	ldr	r2, [sp, #28]
 800ec8c:	4654      	mov	r4, sl
 800ec8e:	2000      	movs	r0, #0
 800ec90:	f04f 0c0a 	mov.w	ip, #10
 800ec94:	4621      	mov	r1, r4
 800ec96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec9a:	3b30      	subs	r3, #48	; 0x30
 800ec9c:	2b09      	cmp	r3, #9
 800ec9e:	d94e      	bls.n	800ed3e <_svfiprintf_r+0x17e>
 800eca0:	b1b0      	cbz	r0, 800ecd0 <_svfiprintf_r+0x110>
 800eca2:	9207      	str	r2, [sp, #28]
 800eca4:	e014      	b.n	800ecd0 <_svfiprintf_r+0x110>
 800eca6:	eba0 0308 	sub.w	r3, r0, r8
 800ecaa:	fa09 f303 	lsl.w	r3, r9, r3
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	9304      	str	r3, [sp, #16]
 800ecb2:	46a2      	mov	sl, r4
 800ecb4:	e7d2      	b.n	800ec5c <_svfiprintf_r+0x9c>
 800ecb6:	9b03      	ldr	r3, [sp, #12]
 800ecb8:	1d19      	adds	r1, r3, #4
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	9103      	str	r1, [sp, #12]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	bfbb      	ittet	lt
 800ecc2:	425b      	neglt	r3, r3
 800ecc4:	f042 0202 	orrlt.w	r2, r2, #2
 800ecc8:	9307      	strge	r3, [sp, #28]
 800ecca:	9307      	strlt	r3, [sp, #28]
 800eccc:	bfb8      	it	lt
 800ecce:	9204      	strlt	r2, [sp, #16]
 800ecd0:	7823      	ldrb	r3, [r4, #0]
 800ecd2:	2b2e      	cmp	r3, #46	; 0x2e
 800ecd4:	d10c      	bne.n	800ecf0 <_svfiprintf_r+0x130>
 800ecd6:	7863      	ldrb	r3, [r4, #1]
 800ecd8:	2b2a      	cmp	r3, #42	; 0x2a
 800ecda:	d135      	bne.n	800ed48 <_svfiprintf_r+0x188>
 800ecdc:	9b03      	ldr	r3, [sp, #12]
 800ecde:	1d1a      	adds	r2, r3, #4
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	9203      	str	r2, [sp, #12]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	bfb8      	it	lt
 800ece8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ecec:	3402      	adds	r4, #2
 800ecee:	9305      	str	r3, [sp, #20]
 800ecf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800edbc <_svfiprintf_r+0x1fc>
 800ecf4:	7821      	ldrb	r1, [r4, #0]
 800ecf6:	2203      	movs	r2, #3
 800ecf8:	4650      	mov	r0, sl
 800ecfa:	f7f1 fa79 	bl	80001f0 <memchr>
 800ecfe:	b140      	cbz	r0, 800ed12 <_svfiprintf_r+0x152>
 800ed00:	2340      	movs	r3, #64	; 0x40
 800ed02:	eba0 000a 	sub.w	r0, r0, sl
 800ed06:	fa03 f000 	lsl.w	r0, r3, r0
 800ed0a:	9b04      	ldr	r3, [sp, #16]
 800ed0c:	4303      	orrs	r3, r0
 800ed0e:	3401      	adds	r4, #1
 800ed10:	9304      	str	r3, [sp, #16]
 800ed12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed16:	4826      	ldr	r0, [pc, #152]	; (800edb0 <_svfiprintf_r+0x1f0>)
 800ed18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed1c:	2206      	movs	r2, #6
 800ed1e:	f7f1 fa67 	bl	80001f0 <memchr>
 800ed22:	2800      	cmp	r0, #0
 800ed24:	d038      	beq.n	800ed98 <_svfiprintf_r+0x1d8>
 800ed26:	4b23      	ldr	r3, [pc, #140]	; (800edb4 <_svfiprintf_r+0x1f4>)
 800ed28:	bb1b      	cbnz	r3, 800ed72 <_svfiprintf_r+0x1b2>
 800ed2a:	9b03      	ldr	r3, [sp, #12]
 800ed2c:	3307      	adds	r3, #7
 800ed2e:	f023 0307 	bic.w	r3, r3, #7
 800ed32:	3308      	adds	r3, #8
 800ed34:	9303      	str	r3, [sp, #12]
 800ed36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed38:	4433      	add	r3, r6
 800ed3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ed3c:	e767      	b.n	800ec0e <_svfiprintf_r+0x4e>
 800ed3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed42:	460c      	mov	r4, r1
 800ed44:	2001      	movs	r0, #1
 800ed46:	e7a5      	b.n	800ec94 <_svfiprintf_r+0xd4>
 800ed48:	2300      	movs	r3, #0
 800ed4a:	3401      	adds	r4, #1
 800ed4c:	9305      	str	r3, [sp, #20]
 800ed4e:	4619      	mov	r1, r3
 800ed50:	f04f 0c0a 	mov.w	ip, #10
 800ed54:	4620      	mov	r0, r4
 800ed56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed5a:	3a30      	subs	r2, #48	; 0x30
 800ed5c:	2a09      	cmp	r2, #9
 800ed5e:	d903      	bls.n	800ed68 <_svfiprintf_r+0x1a8>
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d0c5      	beq.n	800ecf0 <_svfiprintf_r+0x130>
 800ed64:	9105      	str	r1, [sp, #20]
 800ed66:	e7c3      	b.n	800ecf0 <_svfiprintf_r+0x130>
 800ed68:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e7f0      	b.n	800ed54 <_svfiprintf_r+0x194>
 800ed72:	ab03      	add	r3, sp, #12
 800ed74:	9300      	str	r3, [sp, #0]
 800ed76:	462a      	mov	r2, r5
 800ed78:	4b0f      	ldr	r3, [pc, #60]	; (800edb8 <_svfiprintf_r+0x1f8>)
 800ed7a:	a904      	add	r1, sp, #16
 800ed7c:	4638      	mov	r0, r7
 800ed7e:	f7fc fc41 	bl	800b604 <_printf_float>
 800ed82:	1c42      	adds	r2, r0, #1
 800ed84:	4606      	mov	r6, r0
 800ed86:	d1d6      	bne.n	800ed36 <_svfiprintf_r+0x176>
 800ed88:	89ab      	ldrh	r3, [r5, #12]
 800ed8a:	065b      	lsls	r3, r3, #25
 800ed8c:	f53f af2c 	bmi.w	800ebe8 <_svfiprintf_r+0x28>
 800ed90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed92:	b01d      	add	sp, #116	; 0x74
 800ed94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed98:	ab03      	add	r3, sp, #12
 800ed9a:	9300      	str	r3, [sp, #0]
 800ed9c:	462a      	mov	r2, r5
 800ed9e:	4b06      	ldr	r3, [pc, #24]	; (800edb8 <_svfiprintf_r+0x1f8>)
 800eda0:	a904      	add	r1, sp, #16
 800eda2:	4638      	mov	r0, r7
 800eda4:	f7fc fed2 	bl	800bb4c <_printf_i>
 800eda8:	e7eb      	b.n	800ed82 <_svfiprintf_r+0x1c2>
 800edaa:	bf00      	nop
 800edac:	08010214 	.word	0x08010214
 800edb0:	0801021e 	.word	0x0801021e
 800edb4:	0800b605 	.word	0x0800b605
 800edb8:	0800eb09 	.word	0x0800eb09
 800edbc:	0801021a 	.word	0x0801021a

0800edc0 <__sfputc_r>:
 800edc0:	6893      	ldr	r3, [r2, #8]
 800edc2:	3b01      	subs	r3, #1
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	b410      	push	{r4}
 800edc8:	6093      	str	r3, [r2, #8]
 800edca:	da08      	bge.n	800edde <__sfputc_r+0x1e>
 800edcc:	6994      	ldr	r4, [r2, #24]
 800edce:	42a3      	cmp	r3, r4
 800edd0:	db01      	blt.n	800edd6 <__sfputc_r+0x16>
 800edd2:	290a      	cmp	r1, #10
 800edd4:	d103      	bne.n	800edde <__sfputc_r+0x1e>
 800edd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edda:	f000 b977 	b.w	800f0cc <__swbuf_r>
 800edde:	6813      	ldr	r3, [r2, #0]
 800ede0:	1c58      	adds	r0, r3, #1
 800ede2:	6010      	str	r0, [r2, #0]
 800ede4:	7019      	strb	r1, [r3, #0]
 800ede6:	4608      	mov	r0, r1
 800ede8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edec:	4770      	bx	lr

0800edee <__sfputs_r>:
 800edee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edf0:	4606      	mov	r6, r0
 800edf2:	460f      	mov	r7, r1
 800edf4:	4614      	mov	r4, r2
 800edf6:	18d5      	adds	r5, r2, r3
 800edf8:	42ac      	cmp	r4, r5
 800edfa:	d101      	bne.n	800ee00 <__sfputs_r+0x12>
 800edfc:	2000      	movs	r0, #0
 800edfe:	e007      	b.n	800ee10 <__sfputs_r+0x22>
 800ee00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee04:	463a      	mov	r2, r7
 800ee06:	4630      	mov	r0, r6
 800ee08:	f7ff ffda 	bl	800edc0 <__sfputc_r>
 800ee0c:	1c43      	adds	r3, r0, #1
 800ee0e:	d1f3      	bne.n	800edf8 <__sfputs_r+0xa>
 800ee10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee14 <_vfiprintf_r>:
 800ee14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee18:	460d      	mov	r5, r1
 800ee1a:	b09d      	sub	sp, #116	; 0x74
 800ee1c:	4614      	mov	r4, r2
 800ee1e:	4698      	mov	r8, r3
 800ee20:	4606      	mov	r6, r0
 800ee22:	b118      	cbz	r0, 800ee2c <_vfiprintf_r+0x18>
 800ee24:	6983      	ldr	r3, [r0, #24]
 800ee26:	b90b      	cbnz	r3, 800ee2c <_vfiprintf_r+0x18>
 800ee28:	f000 fb40 	bl	800f4ac <__sinit>
 800ee2c:	4b89      	ldr	r3, [pc, #548]	; (800f054 <_vfiprintf_r+0x240>)
 800ee2e:	429d      	cmp	r5, r3
 800ee30:	d11b      	bne.n	800ee6a <_vfiprintf_r+0x56>
 800ee32:	6875      	ldr	r5, [r6, #4]
 800ee34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee36:	07d9      	lsls	r1, r3, #31
 800ee38:	d405      	bmi.n	800ee46 <_vfiprintf_r+0x32>
 800ee3a:	89ab      	ldrh	r3, [r5, #12]
 800ee3c:	059a      	lsls	r2, r3, #22
 800ee3e:	d402      	bmi.n	800ee46 <_vfiprintf_r+0x32>
 800ee40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee42:	f000 fbd1 	bl	800f5e8 <__retarget_lock_acquire_recursive>
 800ee46:	89ab      	ldrh	r3, [r5, #12]
 800ee48:	071b      	lsls	r3, r3, #28
 800ee4a:	d501      	bpl.n	800ee50 <_vfiprintf_r+0x3c>
 800ee4c:	692b      	ldr	r3, [r5, #16]
 800ee4e:	b9eb      	cbnz	r3, 800ee8c <_vfiprintf_r+0x78>
 800ee50:	4629      	mov	r1, r5
 800ee52:	4630      	mov	r0, r6
 800ee54:	f000 f99a 	bl	800f18c <__swsetup_r>
 800ee58:	b1c0      	cbz	r0, 800ee8c <_vfiprintf_r+0x78>
 800ee5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee5c:	07dc      	lsls	r4, r3, #31
 800ee5e:	d50e      	bpl.n	800ee7e <_vfiprintf_r+0x6a>
 800ee60:	f04f 30ff 	mov.w	r0, #4294967295
 800ee64:	b01d      	add	sp, #116	; 0x74
 800ee66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee6a:	4b7b      	ldr	r3, [pc, #492]	; (800f058 <_vfiprintf_r+0x244>)
 800ee6c:	429d      	cmp	r5, r3
 800ee6e:	d101      	bne.n	800ee74 <_vfiprintf_r+0x60>
 800ee70:	68b5      	ldr	r5, [r6, #8]
 800ee72:	e7df      	b.n	800ee34 <_vfiprintf_r+0x20>
 800ee74:	4b79      	ldr	r3, [pc, #484]	; (800f05c <_vfiprintf_r+0x248>)
 800ee76:	429d      	cmp	r5, r3
 800ee78:	bf08      	it	eq
 800ee7a:	68f5      	ldreq	r5, [r6, #12]
 800ee7c:	e7da      	b.n	800ee34 <_vfiprintf_r+0x20>
 800ee7e:	89ab      	ldrh	r3, [r5, #12]
 800ee80:	0598      	lsls	r0, r3, #22
 800ee82:	d4ed      	bmi.n	800ee60 <_vfiprintf_r+0x4c>
 800ee84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee86:	f000 fbb0 	bl	800f5ea <__retarget_lock_release_recursive>
 800ee8a:	e7e9      	b.n	800ee60 <_vfiprintf_r+0x4c>
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee90:	2320      	movs	r3, #32
 800ee92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee96:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee9a:	2330      	movs	r3, #48	; 0x30
 800ee9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f060 <_vfiprintf_r+0x24c>
 800eea0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eea4:	f04f 0901 	mov.w	r9, #1
 800eea8:	4623      	mov	r3, r4
 800eeaa:	469a      	mov	sl, r3
 800eeac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eeb0:	b10a      	cbz	r2, 800eeb6 <_vfiprintf_r+0xa2>
 800eeb2:	2a25      	cmp	r2, #37	; 0x25
 800eeb4:	d1f9      	bne.n	800eeaa <_vfiprintf_r+0x96>
 800eeb6:	ebba 0b04 	subs.w	fp, sl, r4
 800eeba:	d00b      	beq.n	800eed4 <_vfiprintf_r+0xc0>
 800eebc:	465b      	mov	r3, fp
 800eebe:	4622      	mov	r2, r4
 800eec0:	4629      	mov	r1, r5
 800eec2:	4630      	mov	r0, r6
 800eec4:	f7ff ff93 	bl	800edee <__sfputs_r>
 800eec8:	3001      	adds	r0, #1
 800eeca:	f000 80aa 	beq.w	800f022 <_vfiprintf_r+0x20e>
 800eece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eed0:	445a      	add	r2, fp
 800eed2:	9209      	str	r2, [sp, #36]	; 0x24
 800eed4:	f89a 3000 	ldrb.w	r3, [sl]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	f000 80a2 	beq.w	800f022 <_vfiprintf_r+0x20e>
 800eede:	2300      	movs	r3, #0
 800eee0:	f04f 32ff 	mov.w	r2, #4294967295
 800eee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eee8:	f10a 0a01 	add.w	sl, sl, #1
 800eeec:	9304      	str	r3, [sp, #16]
 800eeee:	9307      	str	r3, [sp, #28]
 800eef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eef4:	931a      	str	r3, [sp, #104]	; 0x68
 800eef6:	4654      	mov	r4, sl
 800eef8:	2205      	movs	r2, #5
 800eefa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eefe:	4858      	ldr	r0, [pc, #352]	; (800f060 <_vfiprintf_r+0x24c>)
 800ef00:	f7f1 f976 	bl	80001f0 <memchr>
 800ef04:	9a04      	ldr	r2, [sp, #16]
 800ef06:	b9d8      	cbnz	r0, 800ef40 <_vfiprintf_r+0x12c>
 800ef08:	06d1      	lsls	r1, r2, #27
 800ef0a:	bf44      	itt	mi
 800ef0c:	2320      	movmi	r3, #32
 800ef0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef12:	0713      	lsls	r3, r2, #28
 800ef14:	bf44      	itt	mi
 800ef16:	232b      	movmi	r3, #43	; 0x2b
 800ef18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ef20:	2b2a      	cmp	r3, #42	; 0x2a
 800ef22:	d015      	beq.n	800ef50 <_vfiprintf_r+0x13c>
 800ef24:	9a07      	ldr	r2, [sp, #28]
 800ef26:	4654      	mov	r4, sl
 800ef28:	2000      	movs	r0, #0
 800ef2a:	f04f 0c0a 	mov.w	ip, #10
 800ef2e:	4621      	mov	r1, r4
 800ef30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef34:	3b30      	subs	r3, #48	; 0x30
 800ef36:	2b09      	cmp	r3, #9
 800ef38:	d94e      	bls.n	800efd8 <_vfiprintf_r+0x1c4>
 800ef3a:	b1b0      	cbz	r0, 800ef6a <_vfiprintf_r+0x156>
 800ef3c:	9207      	str	r2, [sp, #28]
 800ef3e:	e014      	b.n	800ef6a <_vfiprintf_r+0x156>
 800ef40:	eba0 0308 	sub.w	r3, r0, r8
 800ef44:	fa09 f303 	lsl.w	r3, r9, r3
 800ef48:	4313      	orrs	r3, r2
 800ef4a:	9304      	str	r3, [sp, #16]
 800ef4c:	46a2      	mov	sl, r4
 800ef4e:	e7d2      	b.n	800eef6 <_vfiprintf_r+0xe2>
 800ef50:	9b03      	ldr	r3, [sp, #12]
 800ef52:	1d19      	adds	r1, r3, #4
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	9103      	str	r1, [sp, #12]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	bfbb      	ittet	lt
 800ef5c:	425b      	neglt	r3, r3
 800ef5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ef62:	9307      	strge	r3, [sp, #28]
 800ef64:	9307      	strlt	r3, [sp, #28]
 800ef66:	bfb8      	it	lt
 800ef68:	9204      	strlt	r2, [sp, #16]
 800ef6a:	7823      	ldrb	r3, [r4, #0]
 800ef6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ef6e:	d10c      	bne.n	800ef8a <_vfiprintf_r+0x176>
 800ef70:	7863      	ldrb	r3, [r4, #1]
 800ef72:	2b2a      	cmp	r3, #42	; 0x2a
 800ef74:	d135      	bne.n	800efe2 <_vfiprintf_r+0x1ce>
 800ef76:	9b03      	ldr	r3, [sp, #12]
 800ef78:	1d1a      	adds	r2, r3, #4
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	9203      	str	r2, [sp, #12]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	bfb8      	it	lt
 800ef82:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef86:	3402      	adds	r4, #2
 800ef88:	9305      	str	r3, [sp, #20]
 800ef8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f070 <_vfiprintf_r+0x25c>
 800ef8e:	7821      	ldrb	r1, [r4, #0]
 800ef90:	2203      	movs	r2, #3
 800ef92:	4650      	mov	r0, sl
 800ef94:	f7f1 f92c 	bl	80001f0 <memchr>
 800ef98:	b140      	cbz	r0, 800efac <_vfiprintf_r+0x198>
 800ef9a:	2340      	movs	r3, #64	; 0x40
 800ef9c:	eba0 000a 	sub.w	r0, r0, sl
 800efa0:	fa03 f000 	lsl.w	r0, r3, r0
 800efa4:	9b04      	ldr	r3, [sp, #16]
 800efa6:	4303      	orrs	r3, r0
 800efa8:	3401      	adds	r4, #1
 800efaa:	9304      	str	r3, [sp, #16]
 800efac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efb0:	482c      	ldr	r0, [pc, #176]	; (800f064 <_vfiprintf_r+0x250>)
 800efb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efb6:	2206      	movs	r2, #6
 800efb8:	f7f1 f91a 	bl	80001f0 <memchr>
 800efbc:	2800      	cmp	r0, #0
 800efbe:	d03f      	beq.n	800f040 <_vfiprintf_r+0x22c>
 800efc0:	4b29      	ldr	r3, [pc, #164]	; (800f068 <_vfiprintf_r+0x254>)
 800efc2:	bb1b      	cbnz	r3, 800f00c <_vfiprintf_r+0x1f8>
 800efc4:	9b03      	ldr	r3, [sp, #12]
 800efc6:	3307      	adds	r3, #7
 800efc8:	f023 0307 	bic.w	r3, r3, #7
 800efcc:	3308      	adds	r3, #8
 800efce:	9303      	str	r3, [sp, #12]
 800efd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efd2:	443b      	add	r3, r7
 800efd4:	9309      	str	r3, [sp, #36]	; 0x24
 800efd6:	e767      	b.n	800eea8 <_vfiprintf_r+0x94>
 800efd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800efdc:	460c      	mov	r4, r1
 800efde:	2001      	movs	r0, #1
 800efe0:	e7a5      	b.n	800ef2e <_vfiprintf_r+0x11a>
 800efe2:	2300      	movs	r3, #0
 800efe4:	3401      	adds	r4, #1
 800efe6:	9305      	str	r3, [sp, #20]
 800efe8:	4619      	mov	r1, r3
 800efea:	f04f 0c0a 	mov.w	ip, #10
 800efee:	4620      	mov	r0, r4
 800eff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eff4:	3a30      	subs	r2, #48	; 0x30
 800eff6:	2a09      	cmp	r2, #9
 800eff8:	d903      	bls.n	800f002 <_vfiprintf_r+0x1ee>
 800effa:	2b00      	cmp	r3, #0
 800effc:	d0c5      	beq.n	800ef8a <_vfiprintf_r+0x176>
 800effe:	9105      	str	r1, [sp, #20]
 800f000:	e7c3      	b.n	800ef8a <_vfiprintf_r+0x176>
 800f002:	fb0c 2101 	mla	r1, ip, r1, r2
 800f006:	4604      	mov	r4, r0
 800f008:	2301      	movs	r3, #1
 800f00a:	e7f0      	b.n	800efee <_vfiprintf_r+0x1da>
 800f00c:	ab03      	add	r3, sp, #12
 800f00e:	9300      	str	r3, [sp, #0]
 800f010:	462a      	mov	r2, r5
 800f012:	4b16      	ldr	r3, [pc, #88]	; (800f06c <_vfiprintf_r+0x258>)
 800f014:	a904      	add	r1, sp, #16
 800f016:	4630      	mov	r0, r6
 800f018:	f7fc faf4 	bl	800b604 <_printf_float>
 800f01c:	4607      	mov	r7, r0
 800f01e:	1c78      	adds	r0, r7, #1
 800f020:	d1d6      	bne.n	800efd0 <_vfiprintf_r+0x1bc>
 800f022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f024:	07d9      	lsls	r1, r3, #31
 800f026:	d405      	bmi.n	800f034 <_vfiprintf_r+0x220>
 800f028:	89ab      	ldrh	r3, [r5, #12]
 800f02a:	059a      	lsls	r2, r3, #22
 800f02c:	d402      	bmi.n	800f034 <_vfiprintf_r+0x220>
 800f02e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f030:	f000 fadb 	bl	800f5ea <__retarget_lock_release_recursive>
 800f034:	89ab      	ldrh	r3, [r5, #12]
 800f036:	065b      	lsls	r3, r3, #25
 800f038:	f53f af12 	bmi.w	800ee60 <_vfiprintf_r+0x4c>
 800f03c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f03e:	e711      	b.n	800ee64 <_vfiprintf_r+0x50>
 800f040:	ab03      	add	r3, sp, #12
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	462a      	mov	r2, r5
 800f046:	4b09      	ldr	r3, [pc, #36]	; (800f06c <_vfiprintf_r+0x258>)
 800f048:	a904      	add	r1, sp, #16
 800f04a:	4630      	mov	r0, r6
 800f04c:	f7fc fd7e 	bl	800bb4c <_printf_i>
 800f050:	e7e4      	b.n	800f01c <_vfiprintf_r+0x208>
 800f052:	bf00      	nop
 800f054:	08010348 	.word	0x08010348
 800f058:	08010368 	.word	0x08010368
 800f05c:	08010328 	.word	0x08010328
 800f060:	08010214 	.word	0x08010214
 800f064:	0801021e 	.word	0x0801021e
 800f068:	0800b605 	.word	0x0800b605
 800f06c:	0800edef 	.word	0x0800edef
 800f070:	0801021a 	.word	0x0801021a
 800f074:	00000000 	.word	0x00000000

0800f078 <nan>:
 800f078:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f080 <nan+0x8>
 800f07c:	4770      	bx	lr
 800f07e:	bf00      	nop
 800f080:	00000000 	.word	0x00000000
 800f084:	7ff80000 	.word	0x7ff80000

0800f088 <_sbrk_r>:
 800f088:	b538      	push	{r3, r4, r5, lr}
 800f08a:	4d06      	ldr	r5, [pc, #24]	; (800f0a4 <_sbrk_r+0x1c>)
 800f08c:	2300      	movs	r3, #0
 800f08e:	4604      	mov	r4, r0
 800f090:	4608      	mov	r0, r1
 800f092:	602b      	str	r3, [r5, #0]
 800f094:	f7f3 ff0c 	bl	8002eb0 <_sbrk>
 800f098:	1c43      	adds	r3, r0, #1
 800f09a:	d102      	bne.n	800f0a2 <_sbrk_r+0x1a>
 800f09c:	682b      	ldr	r3, [r5, #0]
 800f09e:	b103      	cbz	r3, 800f0a2 <_sbrk_r+0x1a>
 800f0a0:	6023      	str	r3, [r4, #0]
 800f0a2:	bd38      	pop	{r3, r4, r5, pc}
 800f0a4:	20005890 	.word	0x20005890

0800f0a8 <strncmp>:
 800f0a8:	b510      	push	{r4, lr}
 800f0aa:	b16a      	cbz	r2, 800f0c8 <strncmp+0x20>
 800f0ac:	3901      	subs	r1, #1
 800f0ae:	1884      	adds	r4, r0, r2
 800f0b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f0b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d103      	bne.n	800f0c4 <strncmp+0x1c>
 800f0bc:	42a0      	cmp	r0, r4
 800f0be:	d001      	beq.n	800f0c4 <strncmp+0x1c>
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d1f5      	bne.n	800f0b0 <strncmp+0x8>
 800f0c4:	1a98      	subs	r0, r3, r2
 800f0c6:	bd10      	pop	{r4, pc}
 800f0c8:	4610      	mov	r0, r2
 800f0ca:	e7fc      	b.n	800f0c6 <strncmp+0x1e>

0800f0cc <__swbuf_r>:
 800f0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ce:	460e      	mov	r6, r1
 800f0d0:	4614      	mov	r4, r2
 800f0d2:	4605      	mov	r5, r0
 800f0d4:	b118      	cbz	r0, 800f0de <__swbuf_r+0x12>
 800f0d6:	6983      	ldr	r3, [r0, #24]
 800f0d8:	b90b      	cbnz	r3, 800f0de <__swbuf_r+0x12>
 800f0da:	f000 f9e7 	bl	800f4ac <__sinit>
 800f0de:	4b21      	ldr	r3, [pc, #132]	; (800f164 <__swbuf_r+0x98>)
 800f0e0:	429c      	cmp	r4, r3
 800f0e2:	d12b      	bne.n	800f13c <__swbuf_r+0x70>
 800f0e4:	686c      	ldr	r4, [r5, #4]
 800f0e6:	69a3      	ldr	r3, [r4, #24]
 800f0e8:	60a3      	str	r3, [r4, #8]
 800f0ea:	89a3      	ldrh	r3, [r4, #12]
 800f0ec:	071a      	lsls	r2, r3, #28
 800f0ee:	d52f      	bpl.n	800f150 <__swbuf_r+0x84>
 800f0f0:	6923      	ldr	r3, [r4, #16]
 800f0f2:	b36b      	cbz	r3, 800f150 <__swbuf_r+0x84>
 800f0f4:	6923      	ldr	r3, [r4, #16]
 800f0f6:	6820      	ldr	r0, [r4, #0]
 800f0f8:	1ac0      	subs	r0, r0, r3
 800f0fa:	6963      	ldr	r3, [r4, #20]
 800f0fc:	b2f6      	uxtb	r6, r6
 800f0fe:	4283      	cmp	r3, r0
 800f100:	4637      	mov	r7, r6
 800f102:	dc04      	bgt.n	800f10e <__swbuf_r+0x42>
 800f104:	4621      	mov	r1, r4
 800f106:	4628      	mov	r0, r5
 800f108:	f000 f93c 	bl	800f384 <_fflush_r>
 800f10c:	bb30      	cbnz	r0, 800f15c <__swbuf_r+0x90>
 800f10e:	68a3      	ldr	r3, [r4, #8]
 800f110:	3b01      	subs	r3, #1
 800f112:	60a3      	str	r3, [r4, #8]
 800f114:	6823      	ldr	r3, [r4, #0]
 800f116:	1c5a      	adds	r2, r3, #1
 800f118:	6022      	str	r2, [r4, #0]
 800f11a:	701e      	strb	r6, [r3, #0]
 800f11c:	6963      	ldr	r3, [r4, #20]
 800f11e:	3001      	adds	r0, #1
 800f120:	4283      	cmp	r3, r0
 800f122:	d004      	beq.n	800f12e <__swbuf_r+0x62>
 800f124:	89a3      	ldrh	r3, [r4, #12]
 800f126:	07db      	lsls	r3, r3, #31
 800f128:	d506      	bpl.n	800f138 <__swbuf_r+0x6c>
 800f12a:	2e0a      	cmp	r6, #10
 800f12c:	d104      	bne.n	800f138 <__swbuf_r+0x6c>
 800f12e:	4621      	mov	r1, r4
 800f130:	4628      	mov	r0, r5
 800f132:	f000 f927 	bl	800f384 <_fflush_r>
 800f136:	b988      	cbnz	r0, 800f15c <__swbuf_r+0x90>
 800f138:	4638      	mov	r0, r7
 800f13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f13c:	4b0a      	ldr	r3, [pc, #40]	; (800f168 <__swbuf_r+0x9c>)
 800f13e:	429c      	cmp	r4, r3
 800f140:	d101      	bne.n	800f146 <__swbuf_r+0x7a>
 800f142:	68ac      	ldr	r4, [r5, #8]
 800f144:	e7cf      	b.n	800f0e6 <__swbuf_r+0x1a>
 800f146:	4b09      	ldr	r3, [pc, #36]	; (800f16c <__swbuf_r+0xa0>)
 800f148:	429c      	cmp	r4, r3
 800f14a:	bf08      	it	eq
 800f14c:	68ec      	ldreq	r4, [r5, #12]
 800f14e:	e7ca      	b.n	800f0e6 <__swbuf_r+0x1a>
 800f150:	4621      	mov	r1, r4
 800f152:	4628      	mov	r0, r5
 800f154:	f000 f81a 	bl	800f18c <__swsetup_r>
 800f158:	2800      	cmp	r0, #0
 800f15a:	d0cb      	beq.n	800f0f4 <__swbuf_r+0x28>
 800f15c:	f04f 37ff 	mov.w	r7, #4294967295
 800f160:	e7ea      	b.n	800f138 <__swbuf_r+0x6c>
 800f162:	bf00      	nop
 800f164:	08010348 	.word	0x08010348
 800f168:	08010368 	.word	0x08010368
 800f16c:	08010328 	.word	0x08010328

0800f170 <__ascii_wctomb>:
 800f170:	b149      	cbz	r1, 800f186 <__ascii_wctomb+0x16>
 800f172:	2aff      	cmp	r2, #255	; 0xff
 800f174:	bf85      	ittet	hi
 800f176:	238a      	movhi	r3, #138	; 0x8a
 800f178:	6003      	strhi	r3, [r0, #0]
 800f17a:	700a      	strbls	r2, [r1, #0]
 800f17c:	f04f 30ff 	movhi.w	r0, #4294967295
 800f180:	bf98      	it	ls
 800f182:	2001      	movls	r0, #1
 800f184:	4770      	bx	lr
 800f186:	4608      	mov	r0, r1
 800f188:	4770      	bx	lr
	...

0800f18c <__swsetup_r>:
 800f18c:	4b32      	ldr	r3, [pc, #200]	; (800f258 <__swsetup_r+0xcc>)
 800f18e:	b570      	push	{r4, r5, r6, lr}
 800f190:	681d      	ldr	r5, [r3, #0]
 800f192:	4606      	mov	r6, r0
 800f194:	460c      	mov	r4, r1
 800f196:	b125      	cbz	r5, 800f1a2 <__swsetup_r+0x16>
 800f198:	69ab      	ldr	r3, [r5, #24]
 800f19a:	b913      	cbnz	r3, 800f1a2 <__swsetup_r+0x16>
 800f19c:	4628      	mov	r0, r5
 800f19e:	f000 f985 	bl	800f4ac <__sinit>
 800f1a2:	4b2e      	ldr	r3, [pc, #184]	; (800f25c <__swsetup_r+0xd0>)
 800f1a4:	429c      	cmp	r4, r3
 800f1a6:	d10f      	bne.n	800f1c8 <__swsetup_r+0x3c>
 800f1a8:	686c      	ldr	r4, [r5, #4]
 800f1aa:	89a3      	ldrh	r3, [r4, #12]
 800f1ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1b0:	0719      	lsls	r1, r3, #28
 800f1b2:	d42c      	bmi.n	800f20e <__swsetup_r+0x82>
 800f1b4:	06dd      	lsls	r5, r3, #27
 800f1b6:	d411      	bmi.n	800f1dc <__swsetup_r+0x50>
 800f1b8:	2309      	movs	r3, #9
 800f1ba:	6033      	str	r3, [r6, #0]
 800f1bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f1c0:	81a3      	strh	r3, [r4, #12]
 800f1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c6:	e03e      	b.n	800f246 <__swsetup_r+0xba>
 800f1c8:	4b25      	ldr	r3, [pc, #148]	; (800f260 <__swsetup_r+0xd4>)
 800f1ca:	429c      	cmp	r4, r3
 800f1cc:	d101      	bne.n	800f1d2 <__swsetup_r+0x46>
 800f1ce:	68ac      	ldr	r4, [r5, #8]
 800f1d0:	e7eb      	b.n	800f1aa <__swsetup_r+0x1e>
 800f1d2:	4b24      	ldr	r3, [pc, #144]	; (800f264 <__swsetup_r+0xd8>)
 800f1d4:	429c      	cmp	r4, r3
 800f1d6:	bf08      	it	eq
 800f1d8:	68ec      	ldreq	r4, [r5, #12]
 800f1da:	e7e6      	b.n	800f1aa <__swsetup_r+0x1e>
 800f1dc:	0758      	lsls	r0, r3, #29
 800f1de:	d512      	bpl.n	800f206 <__swsetup_r+0x7a>
 800f1e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1e2:	b141      	cbz	r1, 800f1f6 <__swsetup_r+0x6a>
 800f1e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1e8:	4299      	cmp	r1, r3
 800f1ea:	d002      	beq.n	800f1f2 <__swsetup_r+0x66>
 800f1ec:	4630      	mov	r0, r6
 800f1ee:	f7ff fbe1 	bl	800e9b4 <_free_r>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	6363      	str	r3, [r4, #52]	; 0x34
 800f1f6:	89a3      	ldrh	r3, [r4, #12]
 800f1f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f1fc:	81a3      	strh	r3, [r4, #12]
 800f1fe:	2300      	movs	r3, #0
 800f200:	6063      	str	r3, [r4, #4]
 800f202:	6923      	ldr	r3, [r4, #16]
 800f204:	6023      	str	r3, [r4, #0]
 800f206:	89a3      	ldrh	r3, [r4, #12]
 800f208:	f043 0308 	orr.w	r3, r3, #8
 800f20c:	81a3      	strh	r3, [r4, #12]
 800f20e:	6923      	ldr	r3, [r4, #16]
 800f210:	b94b      	cbnz	r3, 800f226 <__swsetup_r+0x9a>
 800f212:	89a3      	ldrh	r3, [r4, #12]
 800f214:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f21c:	d003      	beq.n	800f226 <__swsetup_r+0x9a>
 800f21e:	4621      	mov	r1, r4
 800f220:	4630      	mov	r0, r6
 800f222:	f000 fa07 	bl	800f634 <__smakebuf_r>
 800f226:	89a0      	ldrh	r0, [r4, #12]
 800f228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f22c:	f010 0301 	ands.w	r3, r0, #1
 800f230:	d00a      	beq.n	800f248 <__swsetup_r+0xbc>
 800f232:	2300      	movs	r3, #0
 800f234:	60a3      	str	r3, [r4, #8]
 800f236:	6963      	ldr	r3, [r4, #20]
 800f238:	425b      	negs	r3, r3
 800f23a:	61a3      	str	r3, [r4, #24]
 800f23c:	6923      	ldr	r3, [r4, #16]
 800f23e:	b943      	cbnz	r3, 800f252 <__swsetup_r+0xc6>
 800f240:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f244:	d1ba      	bne.n	800f1bc <__swsetup_r+0x30>
 800f246:	bd70      	pop	{r4, r5, r6, pc}
 800f248:	0781      	lsls	r1, r0, #30
 800f24a:	bf58      	it	pl
 800f24c:	6963      	ldrpl	r3, [r4, #20]
 800f24e:	60a3      	str	r3, [r4, #8]
 800f250:	e7f4      	b.n	800f23c <__swsetup_r+0xb0>
 800f252:	2000      	movs	r0, #0
 800f254:	e7f7      	b.n	800f246 <__swsetup_r+0xba>
 800f256:	bf00      	nop
 800f258:	20000028 	.word	0x20000028
 800f25c:	08010348 	.word	0x08010348
 800f260:	08010368 	.word	0x08010368
 800f264:	08010328 	.word	0x08010328

0800f268 <abort>:
 800f268:	b508      	push	{r3, lr}
 800f26a:	2006      	movs	r0, #6
 800f26c:	f000 fa96 	bl	800f79c <raise>
 800f270:	2001      	movs	r0, #1
 800f272:	f7f3 fda5 	bl	8002dc0 <_exit>
	...

0800f278 <__sflush_r>:
 800f278:	898a      	ldrh	r2, [r1, #12]
 800f27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f27e:	4605      	mov	r5, r0
 800f280:	0710      	lsls	r0, r2, #28
 800f282:	460c      	mov	r4, r1
 800f284:	d458      	bmi.n	800f338 <__sflush_r+0xc0>
 800f286:	684b      	ldr	r3, [r1, #4]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	dc05      	bgt.n	800f298 <__sflush_r+0x20>
 800f28c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f28e:	2b00      	cmp	r3, #0
 800f290:	dc02      	bgt.n	800f298 <__sflush_r+0x20>
 800f292:	2000      	movs	r0, #0
 800f294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f29a:	2e00      	cmp	r6, #0
 800f29c:	d0f9      	beq.n	800f292 <__sflush_r+0x1a>
 800f29e:	2300      	movs	r3, #0
 800f2a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f2a4:	682f      	ldr	r7, [r5, #0]
 800f2a6:	602b      	str	r3, [r5, #0]
 800f2a8:	d032      	beq.n	800f310 <__sflush_r+0x98>
 800f2aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f2ac:	89a3      	ldrh	r3, [r4, #12]
 800f2ae:	075a      	lsls	r2, r3, #29
 800f2b0:	d505      	bpl.n	800f2be <__sflush_r+0x46>
 800f2b2:	6863      	ldr	r3, [r4, #4]
 800f2b4:	1ac0      	subs	r0, r0, r3
 800f2b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f2b8:	b10b      	cbz	r3, 800f2be <__sflush_r+0x46>
 800f2ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f2bc:	1ac0      	subs	r0, r0, r3
 800f2be:	2300      	movs	r3, #0
 800f2c0:	4602      	mov	r2, r0
 800f2c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2c4:	6a21      	ldr	r1, [r4, #32]
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	47b0      	blx	r6
 800f2ca:	1c43      	adds	r3, r0, #1
 800f2cc:	89a3      	ldrh	r3, [r4, #12]
 800f2ce:	d106      	bne.n	800f2de <__sflush_r+0x66>
 800f2d0:	6829      	ldr	r1, [r5, #0]
 800f2d2:	291d      	cmp	r1, #29
 800f2d4:	d82c      	bhi.n	800f330 <__sflush_r+0xb8>
 800f2d6:	4a2a      	ldr	r2, [pc, #168]	; (800f380 <__sflush_r+0x108>)
 800f2d8:	40ca      	lsrs	r2, r1
 800f2da:	07d6      	lsls	r6, r2, #31
 800f2dc:	d528      	bpl.n	800f330 <__sflush_r+0xb8>
 800f2de:	2200      	movs	r2, #0
 800f2e0:	6062      	str	r2, [r4, #4]
 800f2e2:	04d9      	lsls	r1, r3, #19
 800f2e4:	6922      	ldr	r2, [r4, #16]
 800f2e6:	6022      	str	r2, [r4, #0]
 800f2e8:	d504      	bpl.n	800f2f4 <__sflush_r+0x7c>
 800f2ea:	1c42      	adds	r2, r0, #1
 800f2ec:	d101      	bne.n	800f2f2 <__sflush_r+0x7a>
 800f2ee:	682b      	ldr	r3, [r5, #0]
 800f2f0:	b903      	cbnz	r3, 800f2f4 <__sflush_r+0x7c>
 800f2f2:	6560      	str	r0, [r4, #84]	; 0x54
 800f2f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2f6:	602f      	str	r7, [r5, #0]
 800f2f8:	2900      	cmp	r1, #0
 800f2fa:	d0ca      	beq.n	800f292 <__sflush_r+0x1a>
 800f2fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f300:	4299      	cmp	r1, r3
 800f302:	d002      	beq.n	800f30a <__sflush_r+0x92>
 800f304:	4628      	mov	r0, r5
 800f306:	f7ff fb55 	bl	800e9b4 <_free_r>
 800f30a:	2000      	movs	r0, #0
 800f30c:	6360      	str	r0, [r4, #52]	; 0x34
 800f30e:	e7c1      	b.n	800f294 <__sflush_r+0x1c>
 800f310:	6a21      	ldr	r1, [r4, #32]
 800f312:	2301      	movs	r3, #1
 800f314:	4628      	mov	r0, r5
 800f316:	47b0      	blx	r6
 800f318:	1c41      	adds	r1, r0, #1
 800f31a:	d1c7      	bne.n	800f2ac <__sflush_r+0x34>
 800f31c:	682b      	ldr	r3, [r5, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d0c4      	beq.n	800f2ac <__sflush_r+0x34>
 800f322:	2b1d      	cmp	r3, #29
 800f324:	d001      	beq.n	800f32a <__sflush_r+0xb2>
 800f326:	2b16      	cmp	r3, #22
 800f328:	d101      	bne.n	800f32e <__sflush_r+0xb6>
 800f32a:	602f      	str	r7, [r5, #0]
 800f32c:	e7b1      	b.n	800f292 <__sflush_r+0x1a>
 800f32e:	89a3      	ldrh	r3, [r4, #12]
 800f330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f334:	81a3      	strh	r3, [r4, #12]
 800f336:	e7ad      	b.n	800f294 <__sflush_r+0x1c>
 800f338:	690f      	ldr	r7, [r1, #16]
 800f33a:	2f00      	cmp	r7, #0
 800f33c:	d0a9      	beq.n	800f292 <__sflush_r+0x1a>
 800f33e:	0793      	lsls	r3, r2, #30
 800f340:	680e      	ldr	r6, [r1, #0]
 800f342:	bf08      	it	eq
 800f344:	694b      	ldreq	r3, [r1, #20]
 800f346:	600f      	str	r7, [r1, #0]
 800f348:	bf18      	it	ne
 800f34a:	2300      	movne	r3, #0
 800f34c:	eba6 0807 	sub.w	r8, r6, r7
 800f350:	608b      	str	r3, [r1, #8]
 800f352:	f1b8 0f00 	cmp.w	r8, #0
 800f356:	dd9c      	ble.n	800f292 <__sflush_r+0x1a>
 800f358:	6a21      	ldr	r1, [r4, #32]
 800f35a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f35c:	4643      	mov	r3, r8
 800f35e:	463a      	mov	r2, r7
 800f360:	4628      	mov	r0, r5
 800f362:	47b0      	blx	r6
 800f364:	2800      	cmp	r0, #0
 800f366:	dc06      	bgt.n	800f376 <__sflush_r+0xfe>
 800f368:	89a3      	ldrh	r3, [r4, #12]
 800f36a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f36e:	81a3      	strh	r3, [r4, #12]
 800f370:	f04f 30ff 	mov.w	r0, #4294967295
 800f374:	e78e      	b.n	800f294 <__sflush_r+0x1c>
 800f376:	4407      	add	r7, r0
 800f378:	eba8 0800 	sub.w	r8, r8, r0
 800f37c:	e7e9      	b.n	800f352 <__sflush_r+0xda>
 800f37e:	bf00      	nop
 800f380:	20400001 	.word	0x20400001

0800f384 <_fflush_r>:
 800f384:	b538      	push	{r3, r4, r5, lr}
 800f386:	690b      	ldr	r3, [r1, #16]
 800f388:	4605      	mov	r5, r0
 800f38a:	460c      	mov	r4, r1
 800f38c:	b913      	cbnz	r3, 800f394 <_fflush_r+0x10>
 800f38e:	2500      	movs	r5, #0
 800f390:	4628      	mov	r0, r5
 800f392:	bd38      	pop	{r3, r4, r5, pc}
 800f394:	b118      	cbz	r0, 800f39e <_fflush_r+0x1a>
 800f396:	6983      	ldr	r3, [r0, #24]
 800f398:	b90b      	cbnz	r3, 800f39e <_fflush_r+0x1a>
 800f39a:	f000 f887 	bl	800f4ac <__sinit>
 800f39e:	4b14      	ldr	r3, [pc, #80]	; (800f3f0 <_fflush_r+0x6c>)
 800f3a0:	429c      	cmp	r4, r3
 800f3a2:	d11b      	bne.n	800f3dc <_fflush_r+0x58>
 800f3a4:	686c      	ldr	r4, [r5, #4]
 800f3a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d0ef      	beq.n	800f38e <_fflush_r+0xa>
 800f3ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f3b0:	07d0      	lsls	r0, r2, #31
 800f3b2:	d404      	bmi.n	800f3be <_fflush_r+0x3a>
 800f3b4:	0599      	lsls	r1, r3, #22
 800f3b6:	d402      	bmi.n	800f3be <_fflush_r+0x3a>
 800f3b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3ba:	f000 f915 	bl	800f5e8 <__retarget_lock_acquire_recursive>
 800f3be:	4628      	mov	r0, r5
 800f3c0:	4621      	mov	r1, r4
 800f3c2:	f7ff ff59 	bl	800f278 <__sflush_r>
 800f3c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3c8:	07da      	lsls	r2, r3, #31
 800f3ca:	4605      	mov	r5, r0
 800f3cc:	d4e0      	bmi.n	800f390 <_fflush_r+0xc>
 800f3ce:	89a3      	ldrh	r3, [r4, #12]
 800f3d0:	059b      	lsls	r3, r3, #22
 800f3d2:	d4dd      	bmi.n	800f390 <_fflush_r+0xc>
 800f3d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3d6:	f000 f908 	bl	800f5ea <__retarget_lock_release_recursive>
 800f3da:	e7d9      	b.n	800f390 <_fflush_r+0xc>
 800f3dc:	4b05      	ldr	r3, [pc, #20]	; (800f3f4 <_fflush_r+0x70>)
 800f3de:	429c      	cmp	r4, r3
 800f3e0:	d101      	bne.n	800f3e6 <_fflush_r+0x62>
 800f3e2:	68ac      	ldr	r4, [r5, #8]
 800f3e4:	e7df      	b.n	800f3a6 <_fflush_r+0x22>
 800f3e6:	4b04      	ldr	r3, [pc, #16]	; (800f3f8 <_fflush_r+0x74>)
 800f3e8:	429c      	cmp	r4, r3
 800f3ea:	bf08      	it	eq
 800f3ec:	68ec      	ldreq	r4, [r5, #12]
 800f3ee:	e7da      	b.n	800f3a6 <_fflush_r+0x22>
 800f3f0:	08010348 	.word	0x08010348
 800f3f4:	08010368 	.word	0x08010368
 800f3f8:	08010328 	.word	0x08010328

0800f3fc <std>:
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	b510      	push	{r4, lr}
 800f400:	4604      	mov	r4, r0
 800f402:	e9c0 3300 	strd	r3, r3, [r0]
 800f406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f40a:	6083      	str	r3, [r0, #8]
 800f40c:	8181      	strh	r1, [r0, #12]
 800f40e:	6643      	str	r3, [r0, #100]	; 0x64
 800f410:	81c2      	strh	r2, [r0, #14]
 800f412:	6183      	str	r3, [r0, #24]
 800f414:	4619      	mov	r1, r3
 800f416:	2208      	movs	r2, #8
 800f418:	305c      	adds	r0, #92	; 0x5c
 800f41a:	f7fc f84b 	bl	800b4b4 <memset>
 800f41e:	4b05      	ldr	r3, [pc, #20]	; (800f434 <std+0x38>)
 800f420:	6263      	str	r3, [r4, #36]	; 0x24
 800f422:	4b05      	ldr	r3, [pc, #20]	; (800f438 <std+0x3c>)
 800f424:	62a3      	str	r3, [r4, #40]	; 0x28
 800f426:	4b05      	ldr	r3, [pc, #20]	; (800f43c <std+0x40>)
 800f428:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f42a:	4b05      	ldr	r3, [pc, #20]	; (800f440 <std+0x44>)
 800f42c:	6224      	str	r4, [r4, #32]
 800f42e:	6323      	str	r3, [r4, #48]	; 0x30
 800f430:	bd10      	pop	{r4, pc}
 800f432:	bf00      	nop
 800f434:	0800f7d5 	.word	0x0800f7d5
 800f438:	0800f7f7 	.word	0x0800f7f7
 800f43c:	0800f82f 	.word	0x0800f82f
 800f440:	0800f853 	.word	0x0800f853

0800f444 <_cleanup_r>:
 800f444:	4901      	ldr	r1, [pc, #4]	; (800f44c <_cleanup_r+0x8>)
 800f446:	f000 b8af 	b.w	800f5a8 <_fwalk_reent>
 800f44a:	bf00      	nop
 800f44c:	0800f385 	.word	0x0800f385

0800f450 <__sfmoreglue>:
 800f450:	b570      	push	{r4, r5, r6, lr}
 800f452:	1e4a      	subs	r2, r1, #1
 800f454:	2568      	movs	r5, #104	; 0x68
 800f456:	4355      	muls	r5, r2
 800f458:	460e      	mov	r6, r1
 800f45a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f45e:	f7ff faf9 	bl	800ea54 <_malloc_r>
 800f462:	4604      	mov	r4, r0
 800f464:	b140      	cbz	r0, 800f478 <__sfmoreglue+0x28>
 800f466:	2100      	movs	r1, #0
 800f468:	e9c0 1600 	strd	r1, r6, [r0]
 800f46c:	300c      	adds	r0, #12
 800f46e:	60a0      	str	r0, [r4, #8]
 800f470:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f474:	f7fc f81e 	bl	800b4b4 <memset>
 800f478:	4620      	mov	r0, r4
 800f47a:	bd70      	pop	{r4, r5, r6, pc}

0800f47c <__sfp_lock_acquire>:
 800f47c:	4801      	ldr	r0, [pc, #4]	; (800f484 <__sfp_lock_acquire+0x8>)
 800f47e:	f000 b8b3 	b.w	800f5e8 <__retarget_lock_acquire_recursive>
 800f482:	bf00      	nop
 800f484:	2000588c 	.word	0x2000588c

0800f488 <__sfp_lock_release>:
 800f488:	4801      	ldr	r0, [pc, #4]	; (800f490 <__sfp_lock_release+0x8>)
 800f48a:	f000 b8ae 	b.w	800f5ea <__retarget_lock_release_recursive>
 800f48e:	bf00      	nop
 800f490:	2000588c 	.word	0x2000588c

0800f494 <__sinit_lock_acquire>:
 800f494:	4801      	ldr	r0, [pc, #4]	; (800f49c <__sinit_lock_acquire+0x8>)
 800f496:	f000 b8a7 	b.w	800f5e8 <__retarget_lock_acquire_recursive>
 800f49a:	bf00      	nop
 800f49c:	20005887 	.word	0x20005887

0800f4a0 <__sinit_lock_release>:
 800f4a0:	4801      	ldr	r0, [pc, #4]	; (800f4a8 <__sinit_lock_release+0x8>)
 800f4a2:	f000 b8a2 	b.w	800f5ea <__retarget_lock_release_recursive>
 800f4a6:	bf00      	nop
 800f4a8:	20005887 	.word	0x20005887

0800f4ac <__sinit>:
 800f4ac:	b510      	push	{r4, lr}
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	f7ff fff0 	bl	800f494 <__sinit_lock_acquire>
 800f4b4:	69a3      	ldr	r3, [r4, #24]
 800f4b6:	b11b      	cbz	r3, 800f4c0 <__sinit+0x14>
 800f4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4bc:	f7ff bff0 	b.w	800f4a0 <__sinit_lock_release>
 800f4c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f4c4:	6523      	str	r3, [r4, #80]	; 0x50
 800f4c6:	4b13      	ldr	r3, [pc, #76]	; (800f514 <__sinit+0x68>)
 800f4c8:	4a13      	ldr	r2, [pc, #76]	; (800f518 <__sinit+0x6c>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800f4ce:	42a3      	cmp	r3, r4
 800f4d0:	bf04      	itt	eq
 800f4d2:	2301      	moveq	r3, #1
 800f4d4:	61a3      	streq	r3, [r4, #24]
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	f000 f820 	bl	800f51c <__sfp>
 800f4dc:	6060      	str	r0, [r4, #4]
 800f4de:	4620      	mov	r0, r4
 800f4e0:	f000 f81c 	bl	800f51c <__sfp>
 800f4e4:	60a0      	str	r0, [r4, #8]
 800f4e6:	4620      	mov	r0, r4
 800f4e8:	f000 f818 	bl	800f51c <__sfp>
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	60e0      	str	r0, [r4, #12]
 800f4f0:	2104      	movs	r1, #4
 800f4f2:	6860      	ldr	r0, [r4, #4]
 800f4f4:	f7ff ff82 	bl	800f3fc <std>
 800f4f8:	68a0      	ldr	r0, [r4, #8]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	2109      	movs	r1, #9
 800f4fe:	f7ff ff7d 	bl	800f3fc <std>
 800f502:	68e0      	ldr	r0, [r4, #12]
 800f504:	2202      	movs	r2, #2
 800f506:	2112      	movs	r1, #18
 800f508:	f7ff ff78 	bl	800f3fc <std>
 800f50c:	2301      	movs	r3, #1
 800f50e:	61a3      	str	r3, [r4, #24]
 800f510:	e7d2      	b.n	800f4b8 <__sinit+0xc>
 800f512:	bf00      	nop
 800f514:	0800fe80 	.word	0x0800fe80
 800f518:	0800f445 	.word	0x0800f445

0800f51c <__sfp>:
 800f51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f51e:	4607      	mov	r7, r0
 800f520:	f7ff ffac 	bl	800f47c <__sfp_lock_acquire>
 800f524:	4b1e      	ldr	r3, [pc, #120]	; (800f5a0 <__sfp+0x84>)
 800f526:	681e      	ldr	r6, [r3, #0]
 800f528:	69b3      	ldr	r3, [r6, #24]
 800f52a:	b913      	cbnz	r3, 800f532 <__sfp+0x16>
 800f52c:	4630      	mov	r0, r6
 800f52e:	f7ff ffbd 	bl	800f4ac <__sinit>
 800f532:	3648      	adds	r6, #72	; 0x48
 800f534:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f538:	3b01      	subs	r3, #1
 800f53a:	d503      	bpl.n	800f544 <__sfp+0x28>
 800f53c:	6833      	ldr	r3, [r6, #0]
 800f53e:	b30b      	cbz	r3, 800f584 <__sfp+0x68>
 800f540:	6836      	ldr	r6, [r6, #0]
 800f542:	e7f7      	b.n	800f534 <__sfp+0x18>
 800f544:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f548:	b9d5      	cbnz	r5, 800f580 <__sfp+0x64>
 800f54a:	4b16      	ldr	r3, [pc, #88]	; (800f5a4 <__sfp+0x88>)
 800f54c:	60e3      	str	r3, [r4, #12]
 800f54e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f552:	6665      	str	r5, [r4, #100]	; 0x64
 800f554:	f000 f847 	bl	800f5e6 <__retarget_lock_init_recursive>
 800f558:	f7ff ff96 	bl	800f488 <__sfp_lock_release>
 800f55c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f560:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f564:	6025      	str	r5, [r4, #0]
 800f566:	61a5      	str	r5, [r4, #24]
 800f568:	2208      	movs	r2, #8
 800f56a:	4629      	mov	r1, r5
 800f56c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f570:	f7fb ffa0 	bl	800b4b4 <memset>
 800f574:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f578:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f57c:	4620      	mov	r0, r4
 800f57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f580:	3468      	adds	r4, #104	; 0x68
 800f582:	e7d9      	b.n	800f538 <__sfp+0x1c>
 800f584:	2104      	movs	r1, #4
 800f586:	4638      	mov	r0, r7
 800f588:	f7ff ff62 	bl	800f450 <__sfmoreglue>
 800f58c:	4604      	mov	r4, r0
 800f58e:	6030      	str	r0, [r6, #0]
 800f590:	2800      	cmp	r0, #0
 800f592:	d1d5      	bne.n	800f540 <__sfp+0x24>
 800f594:	f7ff ff78 	bl	800f488 <__sfp_lock_release>
 800f598:	230c      	movs	r3, #12
 800f59a:	603b      	str	r3, [r7, #0]
 800f59c:	e7ee      	b.n	800f57c <__sfp+0x60>
 800f59e:	bf00      	nop
 800f5a0:	0800fe80 	.word	0x0800fe80
 800f5a4:	ffff0001 	.word	0xffff0001

0800f5a8 <_fwalk_reent>:
 800f5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5ac:	4606      	mov	r6, r0
 800f5ae:	4688      	mov	r8, r1
 800f5b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f5b4:	2700      	movs	r7, #0
 800f5b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f5ba:	f1b9 0901 	subs.w	r9, r9, #1
 800f5be:	d505      	bpl.n	800f5cc <_fwalk_reent+0x24>
 800f5c0:	6824      	ldr	r4, [r4, #0]
 800f5c2:	2c00      	cmp	r4, #0
 800f5c4:	d1f7      	bne.n	800f5b6 <_fwalk_reent+0xe>
 800f5c6:	4638      	mov	r0, r7
 800f5c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5cc:	89ab      	ldrh	r3, [r5, #12]
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	d907      	bls.n	800f5e2 <_fwalk_reent+0x3a>
 800f5d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	d003      	beq.n	800f5e2 <_fwalk_reent+0x3a>
 800f5da:	4629      	mov	r1, r5
 800f5dc:	4630      	mov	r0, r6
 800f5de:	47c0      	blx	r8
 800f5e0:	4307      	orrs	r7, r0
 800f5e2:	3568      	adds	r5, #104	; 0x68
 800f5e4:	e7e9      	b.n	800f5ba <_fwalk_reent+0x12>

0800f5e6 <__retarget_lock_init_recursive>:
 800f5e6:	4770      	bx	lr

0800f5e8 <__retarget_lock_acquire_recursive>:
 800f5e8:	4770      	bx	lr

0800f5ea <__retarget_lock_release_recursive>:
 800f5ea:	4770      	bx	lr

0800f5ec <__swhatbuf_r>:
 800f5ec:	b570      	push	{r4, r5, r6, lr}
 800f5ee:	460e      	mov	r6, r1
 800f5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5f4:	2900      	cmp	r1, #0
 800f5f6:	b096      	sub	sp, #88	; 0x58
 800f5f8:	4614      	mov	r4, r2
 800f5fa:	461d      	mov	r5, r3
 800f5fc:	da07      	bge.n	800f60e <__swhatbuf_r+0x22>
 800f5fe:	2300      	movs	r3, #0
 800f600:	602b      	str	r3, [r5, #0]
 800f602:	89b3      	ldrh	r3, [r6, #12]
 800f604:	061a      	lsls	r2, r3, #24
 800f606:	d410      	bmi.n	800f62a <__swhatbuf_r+0x3e>
 800f608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f60c:	e00e      	b.n	800f62c <__swhatbuf_r+0x40>
 800f60e:	466a      	mov	r2, sp
 800f610:	f000 f946 	bl	800f8a0 <_fstat_r>
 800f614:	2800      	cmp	r0, #0
 800f616:	dbf2      	blt.n	800f5fe <__swhatbuf_r+0x12>
 800f618:	9a01      	ldr	r2, [sp, #4]
 800f61a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f61e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f622:	425a      	negs	r2, r3
 800f624:	415a      	adcs	r2, r3
 800f626:	602a      	str	r2, [r5, #0]
 800f628:	e7ee      	b.n	800f608 <__swhatbuf_r+0x1c>
 800f62a:	2340      	movs	r3, #64	; 0x40
 800f62c:	2000      	movs	r0, #0
 800f62e:	6023      	str	r3, [r4, #0]
 800f630:	b016      	add	sp, #88	; 0x58
 800f632:	bd70      	pop	{r4, r5, r6, pc}

0800f634 <__smakebuf_r>:
 800f634:	898b      	ldrh	r3, [r1, #12]
 800f636:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f638:	079d      	lsls	r5, r3, #30
 800f63a:	4606      	mov	r6, r0
 800f63c:	460c      	mov	r4, r1
 800f63e:	d507      	bpl.n	800f650 <__smakebuf_r+0x1c>
 800f640:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f644:	6023      	str	r3, [r4, #0]
 800f646:	6123      	str	r3, [r4, #16]
 800f648:	2301      	movs	r3, #1
 800f64a:	6163      	str	r3, [r4, #20]
 800f64c:	b002      	add	sp, #8
 800f64e:	bd70      	pop	{r4, r5, r6, pc}
 800f650:	ab01      	add	r3, sp, #4
 800f652:	466a      	mov	r2, sp
 800f654:	f7ff ffca 	bl	800f5ec <__swhatbuf_r>
 800f658:	9900      	ldr	r1, [sp, #0]
 800f65a:	4605      	mov	r5, r0
 800f65c:	4630      	mov	r0, r6
 800f65e:	f7ff f9f9 	bl	800ea54 <_malloc_r>
 800f662:	b948      	cbnz	r0, 800f678 <__smakebuf_r+0x44>
 800f664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f668:	059a      	lsls	r2, r3, #22
 800f66a:	d4ef      	bmi.n	800f64c <__smakebuf_r+0x18>
 800f66c:	f023 0303 	bic.w	r3, r3, #3
 800f670:	f043 0302 	orr.w	r3, r3, #2
 800f674:	81a3      	strh	r3, [r4, #12]
 800f676:	e7e3      	b.n	800f640 <__smakebuf_r+0xc>
 800f678:	4b0d      	ldr	r3, [pc, #52]	; (800f6b0 <__smakebuf_r+0x7c>)
 800f67a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f67c:	89a3      	ldrh	r3, [r4, #12]
 800f67e:	6020      	str	r0, [r4, #0]
 800f680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f684:	81a3      	strh	r3, [r4, #12]
 800f686:	9b00      	ldr	r3, [sp, #0]
 800f688:	6163      	str	r3, [r4, #20]
 800f68a:	9b01      	ldr	r3, [sp, #4]
 800f68c:	6120      	str	r0, [r4, #16]
 800f68e:	b15b      	cbz	r3, 800f6a8 <__smakebuf_r+0x74>
 800f690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f694:	4630      	mov	r0, r6
 800f696:	f000 f915 	bl	800f8c4 <_isatty_r>
 800f69a:	b128      	cbz	r0, 800f6a8 <__smakebuf_r+0x74>
 800f69c:	89a3      	ldrh	r3, [r4, #12]
 800f69e:	f023 0303 	bic.w	r3, r3, #3
 800f6a2:	f043 0301 	orr.w	r3, r3, #1
 800f6a6:	81a3      	strh	r3, [r4, #12]
 800f6a8:	89a0      	ldrh	r0, [r4, #12]
 800f6aa:	4305      	orrs	r5, r0
 800f6ac:	81a5      	strh	r5, [r4, #12]
 800f6ae:	e7cd      	b.n	800f64c <__smakebuf_r+0x18>
 800f6b0:	0800f445 	.word	0x0800f445

0800f6b4 <memmove>:
 800f6b4:	4288      	cmp	r0, r1
 800f6b6:	b510      	push	{r4, lr}
 800f6b8:	eb01 0402 	add.w	r4, r1, r2
 800f6bc:	d902      	bls.n	800f6c4 <memmove+0x10>
 800f6be:	4284      	cmp	r4, r0
 800f6c0:	4623      	mov	r3, r4
 800f6c2:	d807      	bhi.n	800f6d4 <memmove+0x20>
 800f6c4:	1e43      	subs	r3, r0, #1
 800f6c6:	42a1      	cmp	r1, r4
 800f6c8:	d008      	beq.n	800f6dc <memmove+0x28>
 800f6ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6d2:	e7f8      	b.n	800f6c6 <memmove+0x12>
 800f6d4:	4402      	add	r2, r0
 800f6d6:	4601      	mov	r1, r0
 800f6d8:	428a      	cmp	r2, r1
 800f6da:	d100      	bne.n	800f6de <memmove+0x2a>
 800f6dc:	bd10      	pop	{r4, pc}
 800f6de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6e6:	e7f7      	b.n	800f6d8 <memmove+0x24>

0800f6e8 <__malloc_lock>:
 800f6e8:	4801      	ldr	r0, [pc, #4]	; (800f6f0 <__malloc_lock+0x8>)
 800f6ea:	f7ff bf7d 	b.w	800f5e8 <__retarget_lock_acquire_recursive>
 800f6ee:	bf00      	nop
 800f6f0:	20005888 	.word	0x20005888

0800f6f4 <__malloc_unlock>:
 800f6f4:	4801      	ldr	r0, [pc, #4]	; (800f6fc <__malloc_unlock+0x8>)
 800f6f6:	f7ff bf78 	b.w	800f5ea <__retarget_lock_release_recursive>
 800f6fa:	bf00      	nop
 800f6fc:	20005888 	.word	0x20005888

0800f700 <_realloc_r>:
 800f700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f702:	4607      	mov	r7, r0
 800f704:	4614      	mov	r4, r2
 800f706:	460e      	mov	r6, r1
 800f708:	b921      	cbnz	r1, 800f714 <_realloc_r+0x14>
 800f70a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f70e:	4611      	mov	r1, r2
 800f710:	f7ff b9a0 	b.w	800ea54 <_malloc_r>
 800f714:	b922      	cbnz	r2, 800f720 <_realloc_r+0x20>
 800f716:	f7ff f94d 	bl	800e9b4 <_free_r>
 800f71a:	4625      	mov	r5, r4
 800f71c:	4628      	mov	r0, r5
 800f71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f720:	f000 f8f2 	bl	800f908 <_malloc_usable_size_r>
 800f724:	42a0      	cmp	r0, r4
 800f726:	d20f      	bcs.n	800f748 <_realloc_r+0x48>
 800f728:	4621      	mov	r1, r4
 800f72a:	4638      	mov	r0, r7
 800f72c:	f7ff f992 	bl	800ea54 <_malloc_r>
 800f730:	4605      	mov	r5, r0
 800f732:	2800      	cmp	r0, #0
 800f734:	d0f2      	beq.n	800f71c <_realloc_r+0x1c>
 800f736:	4631      	mov	r1, r6
 800f738:	4622      	mov	r2, r4
 800f73a:	f7fb fead 	bl	800b498 <memcpy>
 800f73e:	4631      	mov	r1, r6
 800f740:	4638      	mov	r0, r7
 800f742:	f7ff f937 	bl	800e9b4 <_free_r>
 800f746:	e7e9      	b.n	800f71c <_realloc_r+0x1c>
 800f748:	4635      	mov	r5, r6
 800f74a:	e7e7      	b.n	800f71c <_realloc_r+0x1c>

0800f74c <_raise_r>:
 800f74c:	291f      	cmp	r1, #31
 800f74e:	b538      	push	{r3, r4, r5, lr}
 800f750:	4604      	mov	r4, r0
 800f752:	460d      	mov	r5, r1
 800f754:	d904      	bls.n	800f760 <_raise_r+0x14>
 800f756:	2316      	movs	r3, #22
 800f758:	6003      	str	r3, [r0, #0]
 800f75a:	f04f 30ff 	mov.w	r0, #4294967295
 800f75e:	bd38      	pop	{r3, r4, r5, pc}
 800f760:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f762:	b112      	cbz	r2, 800f76a <_raise_r+0x1e>
 800f764:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f768:	b94b      	cbnz	r3, 800f77e <_raise_r+0x32>
 800f76a:	4620      	mov	r0, r4
 800f76c:	f000 f830 	bl	800f7d0 <_getpid_r>
 800f770:	462a      	mov	r2, r5
 800f772:	4601      	mov	r1, r0
 800f774:	4620      	mov	r0, r4
 800f776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f77a:	f000 b817 	b.w	800f7ac <_kill_r>
 800f77e:	2b01      	cmp	r3, #1
 800f780:	d00a      	beq.n	800f798 <_raise_r+0x4c>
 800f782:	1c59      	adds	r1, r3, #1
 800f784:	d103      	bne.n	800f78e <_raise_r+0x42>
 800f786:	2316      	movs	r3, #22
 800f788:	6003      	str	r3, [r0, #0]
 800f78a:	2001      	movs	r0, #1
 800f78c:	e7e7      	b.n	800f75e <_raise_r+0x12>
 800f78e:	2400      	movs	r4, #0
 800f790:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f794:	4628      	mov	r0, r5
 800f796:	4798      	blx	r3
 800f798:	2000      	movs	r0, #0
 800f79a:	e7e0      	b.n	800f75e <_raise_r+0x12>

0800f79c <raise>:
 800f79c:	4b02      	ldr	r3, [pc, #8]	; (800f7a8 <raise+0xc>)
 800f79e:	4601      	mov	r1, r0
 800f7a0:	6818      	ldr	r0, [r3, #0]
 800f7a2:	f7ff bfd3 	b.w	800f74c <_raise_r>
 800f7a6:	bf00      	nop
 800f7a8:	20000028 	.word	0x20000028

0800f7ac <_kill_r>:
 800f7ac:	b538      	push	{r3, r4, r5, lr}
 800f7ae:	4d07      	ldr	r5, [pc, #28]	; (800f7cc <_kill_r+0x20>)
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	4608      	mov	r0, r1
 800f7b6:	4611      	mov	r1, r2
 800f7b8:	602b      	str	r3, [r5, #0]
 800f7ba:	f7f3 faf1 	bl	8002da0 <_kill>
 800f7be:	1c43      	adds	r3, r0, #1
 800f7c0:	d102      	bne.n	800f7c8 <_kill_r+0x1c>
 800f7c2:	682b      	ldr	r3, [r5, #0]
 800f7c4:	b103      	cbz	r3, 800f7c8 <_kill_r+0x1c>
 800f7c6:	6023      	str	r3, [r4, #0]
 800f7c8:	bd38      	pop	{r3, r4, r5, pc}
 800f7ca:	bf00      	nop
 800f7cc:	20005890 	.word	0x20005890

0800f7d0 <_getpid_r>:
 800f7d0:	f7f3 bade 	b.w	8002d90 <_getpid>

0800f7d4 <__sread>:
 800f7d4:	b510      	push	{r4, lr}
 800f7d6:	460c      	mov	r4, r1
 800f7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7dc:	f000 f89c 	bl	800f918 <_read_r>
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	bfab      	itete	ge
 800f7e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f7e6:	89a3      	ldrhlt	r3, [r4, #12]
 800f7e8:	181b      	addge	r3, r3, r0
 800f7ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f7ee:	bfac      	ite	ge
 800f7f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f7f2:	81a3      	strhlt	r3, [r4, #12]
 800f7f4:	bd10      	pop	{r4, pc}

0800f7f6 <__swrite>:
 800f7f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7fa:	461f      	mov	r7, r3
 800f7fc:	898b      	ldrh	r3, [r1, #12]
 800f7fe:	05db      	lsls	r3, r3, #23
 800f800:	4605      	mov	r5, r0
 800f802:	460c      	mov	r4, r1
 800f804:	4616      	mov	r6, r2
 800f806:	d505      	bpl.n	800f814 <__swrite+0x1e>
 800f808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f80c:	2302      	movs	r3, #2
 800f80e:	2200      	movs	r2, #0
 800f810:	f000 f868 	bl	800f8e4 <_lseek_r>
 800f814:	89a3      	ldrh	r3, [r4, #12]
 800f816:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f81a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f81e:	81a3      	strh	r3, [r4, #12]
 800f820:	4632      	mov	r2, r6
 800f822:	463b      	mov	r3, r7
 800f824:	4628      	mov	r0, r5
 800f826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f82a:	f000 b817 	b.w	800f85c <_write_r>

0800f82e <__sseek>:
 800f82e:	b510      	push	{r4, lr}
 800f830:	460c      	mov	r4, r1
 800f832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f836:	f000 f855 	bl	800f8e4 <_lseek_r>
 800f83a:	1c43      	adds	r3, r0, #1
 800f83c:	89a3      	ldrh	r3, [r4, #12]
 800f83e:	bf15      	itete	ne
 800f840:	6560      	strne	r0, [r4, #84]	; 0x54
 800f842:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f846:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f84a:	81a3      	strheq	r3, [r4, #12]
 800f84c:	bf18      	it	ne
 800f84e:	81a3      	strhne	r3, [r4, #12]
 800f850:	bd10      	pop	{r4, pc}

0800f852 <__sclose>:
 800f852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f856:	f000 b813 	b.w	800f880 <_close_r>
	...

0800f85c <_write_r>:
 800f85c:	b538      	push	{r3, r4, r5, lr}
 800f85e:	4d07      	ldr	r5, [pc, #28]	; (800f87c <_write_r+0x20>)
 800f860:	4604      	mov	r4, r0
 800f862:	4608      	mov	r0, r1
 800f864:	4611      	mov	r1, r2
 800f866:	2200      	movs	r2, #0
 800f868:	602a      	str	r2, [r5, #0]
 800f86a:	461a      	mov	r2, r3
 800f86c:	f7f3 facf 	bl	8002e0e <_write>
 800f870:	1c43      	adds	r3, r0, #1
 800f872:	d102      	bne.n	800f87a <_write_r+0x1e>
 800f874:	682b      	ldr	r3, [r5, #0]
 800f876:	b103      	cbz	r3, 800f87a <_write_r+0x1e>
 800f878:	6023      	str	r3, [r4, #0]
 800f87a:	bd38      	pop	{r3, r4, r5, pc}
 800f87c:	20005890 	.word	0x20005890

0800f880 <_close_r>:
 800f880:	b538      	push	{r3, r4, r5, lr}
 800f882:	4d06      	ldr	r5, [pc, #24]	; (800f89c <_close_r+0x1c>)
 800f884:	2300      	movs	r3, #0
 800f886:	4604      	mov	r4, r0
 800f888:	4608      	mov	r0, r1
 800f88a:	602b      	str	r3, [r5, #0]
 800f88c:	f7f3 fadb 	bl	8002e46 <_close>
 800f890:	1c43      	adds	r3, r0, #1
 800f892:	d102      	bne.n	800f89a <_close_r+0x1a>
 800f894:	682b      	ldr	r3, [r5, #0]
 800f896:	b103      	cbz	r3, 800f89a <_close_r+0x1a>
 800f898:	6023      	str	r3, [r4, #0]
 800f89a:	bd38      	pop	{r3, r4, r5, pc}
 800f89c:	20005890 	.word	0x20005890

0800f8a0 <_fstat_r>:
 800f8a0:	b538      	push	{r3, r4, r5, lr}
 800f8a2:	4d07      	ldr	r5, [pc, #28]	; (800f8c0 <_fstat_r+0x20>)
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	4604      	mov	r4, r0
 800f8a8:	4608      	mov	r0, r1
 800f8aa:	4611      	mov	r1, r2
 800f8ac:	602b      	str	r3, [r5, #0]
 800f8ae:	f7f3 fad6 	bl	8002e5e <_fstat>
 800f8b2:	1c43      	adds	r3, r0, #1
 800f8b4:	d102      	bne.n	800f8bc <_fstat_r+0x1c>
 800f8b6:	682b      	ldr	r3, [r5, #0]
 800f8b8:	b103      	cbz	r3, 800f8bc <_fstat_r+0x1c>
 800f8ba:	6023      	str	r3, [r4, #0]
 800f8bc:	bd38      	pop	{r3, r4, r5, pc}
 800f8be:	bf00      	nop
 800f8c0:	20005890 	.word	0x20005890

0800f8c4 <_isatty_r>:
 800f8c4:	b538      	push	{r3, r4, r5, lr}
 800f8c6:	4d06      	ldr	r5, [pc, #24]	; (800f8e0 <_isatty_r+0x1c>)
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	4608      	mov	r0, r1
 800f8ce:	602b      	str	r3, [r5, #0]
 800f8d0:	f7f3 fad5 	bl	8002e7e <_isatty>
 800f8d4:	1c43      	adds	r3, r0, #1
 800f8d6:	d102      	bne.n	800f8de <_isatty_r+0x1a>
 800f8d8:	682b      	ldr	r3, [r5, #0]
 800f8da:	b103      	cbz	r3, 800f8de <_isatty_r+0x1a>
 800f8dc:	6023      	str	r3, [r4, #0]
 800f8de:	bd38      	pop	{r3, r4, r5, pc}
 800f8e0:	20005890 	.word	0x20005890

0800f8e4 <_lseek_r>:
 800f8e4:	b538      	push	{r3, r4, r5, lr}
 800f8e6:	4d07      	ldr	r5, [pc, #28]	; (800f904 <_lseek_r+0x20>)
 800f8e8:	4604      	mov	r4, r0
 800f8ea:	4608      	mov	r0, r1
 800f8ec:	4611      	mov	r1, r2
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	602a      	str	r2, [r5, #0]
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	f7f3 face 	bl	8002e94 <_lseek>
 800f8f8:	1c43      	adds	r3, r0, #1
 800f8fa:	d102      	bne.n	800f902 <_lseek_r+0x1e>
 800f8fc:	682b      	ldr	r3, [r5, #0]
 800f8fe:	b103      	cbz	r3, 800f902 <_lseek_r+0x1e>
 800f900:	6023      	str	r3, [r4, #0]
 800f902:	bd38      	pop	{r3, r4, r5, pc}
 800f904:	20005890 	.word	0x20005890

0800f908 <_malloc_usable_size_r>:
 800f908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f90c:	1f18      	subs	r0, r3, #4
 800f90e:	2b00      	cmp	r3, #0
 800f910:	bfbc      	itt	lt
 800f912:	580b      	ldrlt	r3, [r1, r0]
 800f914:	18c0      	addlt	r0, r0, r3
 800f916:	4770      	bx	lr

0800f918 <_read_r>:
 800f918:	b538      	push	{r3, r4, r5, lr}
 800f91a:	4d07      	ldr	r5, [pc, #28]	; (800f938 <_read_r+0x20>)
 800f91c:	4604      	mov	r4, r0
 800f91e:	4608      	mov	r0, r1
 800f920:	4611      	mov	r1, r2
 800f922:	2200      	movs	r2, #0
 800f924:	602a      	str	r2, [r5, #0]
 800f926:	461a      	mov	r2, r3
 800f928:	f7f3 fa54 	bl	8002dd4 <_read>
 800f92c:	1c43      	adds	r3, r0, #1
 800f92e:	d102      	bne.n	800f936 <_read_r+0x1e>
 800f930:	682b      	ldr	r3, [r5, #0]
 800f932:	b103      	cbz	r3, 800f936 <_read_r+0x1e>
 800f934:	6023      	str	r3, [r4, #0]
 800f936:	bd38      	pop	{r3, r4, r5, pc}
 800f938:	20005890 	.word	0x20005890

0800f93c <trunc>:
 800f93c:	ec51 0b10 	vmov	r0, r1, d0
 800f940:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f944:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f948:	2b13      	cmp	r3, #19
 800f94a:	b5d0      	push	{r4, r6, r7, lr}
 800f94c:	460c      	mov	r4, r1
 800f94e:	dc10      	bgt.n	800f972 <trunc+0x36>
 800f950:	2b00      	cmp	r3, #0
 800f952:	bfa5      	ittet	ge
 800f954:	4a11      	ldrge	r2, [pc, #68]	; (800f99c <trunc+0x60>)
 800f956:	fa42 f303 	asrge.w	r3, r2, r3
 800f95a:	2100      	movlt	r1, #0
 800f95c:	2100      	movge	r1, #0
 800f95e:	bfb9      	ittee	lt
 800f960:	2000      	movlt	r0, #0
 800f962:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800f966:	2000      	movge	r0, #0
 800f968:	ea24 0103 	bicge.w	r1, r4, r3
 800f96c:	ec41 0b10 	vmov	d0, r0, r1
 800f970:	bdd0      	pop	{r4, r6, r7, pc}
 800f972:	2b33      	cmp	r3, #51	; 0x33
 800f974:	dd08      	ble.n	800f988 <trunc+0x4c>
 800f976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f97a:	d1f7      	bne.n	800f96c <trunc+0x30>
 800f97c:	ee10 2a10 	vmov	r2, s0
 800f980:	460b      	mov	r3, r1
 800f982:	f7f0 fc8b 	bl	800029c <__adddf3>
 800f986:	e7f1      	b.n	800f96c <trunc+0x30>
 800f988:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800f98c:	f04f 33ff 	mov.w	r3, #4294967295
 800f990:	fa23 f202 	lsr.w	r2, r3, r2
 800f994:	ea20 0602 	bic.w	r6, r0, r2
 800f998:	4630      	mov	r0, r6
 800f99a:	e7e7      	b.n	800f96c <trunc+0x30>
 800f99c:	000fffff 	.word	0x000fffff

0800f9a0 <_init>:
 800f9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9a2:	bf00      	nop
 800f9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9a6:	bc08      	pop	{r3}
 800f9a8:	469e      	mov	lr, r3
 800f9aa:	4770      	bx	lr

0800f9ac <_fini>:
 800f9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ae:	bf00      	nop
 800f9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9b2:	bc08      	pop	{r3}
 800f9b4:	469e      	mov	lr, r3
 800f9b6:	4770      	bx	lr
