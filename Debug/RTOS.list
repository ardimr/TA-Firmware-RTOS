
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f0  0800e278  0800e278  0001e278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea68  0800ea68  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea68  0800ea68  0001ea68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea70  0800ea70  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea70  0800ea70  0001ea70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea74  0800ea74  0001ea74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ea78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf0  200001e8  0800ec60  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004dd8  0800ec60  00024dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002274b  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041d1  00000000  00000000  00042963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  00046b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001958  00000000  00000000  000485e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a725  00000000  00000000  00049f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce8b  00000000  00000000  0006465d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f8f7  00000000  00000000  000814e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00120ddf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087d8  00000000  00000000  00120e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e260 	.word	0x0800e260

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800e260 	.word	0x0800e260

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <Write_MFRC522>:
 * Return value: None
 */

extern SPI_HandleTypeDef hspi1;

void Write_MFRC522(u_char addr, u_char val) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	u_char addr_bits = (((addr<<1) & 0x7E));
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001016:	b2db      	uxtb	r3, r3
 8001018:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2110      	movs	r1, #16
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <Write_MFRC522+0x58>)
 8001020:	f002 fbc0 	bl	80037a4 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi1, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8001024:	f107 010f 	add.w	r1, r7, #15
 8001028:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800102c:	2201      	movs	r2, #1
 800102e:	480a      	ldr	r0, [pc, #40]	; (8001058 <Write_MFRC522+0x5c>)
 8001030:	f004 f8c1 	bl	80051b6 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &val, 1, 500);
 8001034:	1db9      	adds	r1, r7, #6
 8001036:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800103a:	2201      	movs	r2, #1
 800103c:	4806      	ldr	r0, [pc, #24]	; (8001058 <Write_MFRC522+0x5c>)
 800103e:	f004 f8ba 	bl	80051b6 <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2110      	movs	r1, #16
 8001046:	4803      	ldr	r0, [pc, #12]	; (8001054 <Write_MFRC522+0x58>)
 8001048:	f002 fbac 	bl	80037a4 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40020000 	.word	0x40020000
 8001058:	20004c9c 	.word	0x20004c9c

0800105c <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	b25b      	sxtb	r3, r3
 800106c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001070:	b25b      	sxtb	r3, r3
 8001072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001076:	b25b      	sxtb	r3, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2110      	movs	r1, #16
 8001080:	480e      	ldr	r0, [pc, #56]	; (80010bc <Read_MFRC522+0x60>)
 8001082:	f002 fb8f 	bl	80037a4 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi1, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8001086:	f107 010e 	add.w	r1, r7, #14
 800108a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800108e:	2201      	movs	r2, #1
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <Read_MFRC522+0x64>)
 8001092:	f004 f890 	bl	80051b6 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, &rx_bits, 1, 500);
 8001096:	f107 010f 	add.w	r1, r7, #15
 800109a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800109e:	2201      	movs	r2, #1
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <Read_MFRC522+0x64>)
 80010a2:	f004 f9c4 	bl	800542e <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2110      	movs	r1, #16
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <Read_MFRC522+0x60>)
 80010ac:	f002 fb7a 	bl	80037a4 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020000 	.word	0x40020000
 80010c0:	20004c9c 	.word	0x20004c9c

080010c4 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ffc0 	bl	800105c <Read_MFRC522>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff85 	bl	8000ffc <Write_MFRC522>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	460a      	mov	r2, r1
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	4613      	mov	r3, r2
 8001108:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ffa5 	bl	800105c <Read_MFRC522>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001116:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800111a:	43db      	mvns	r3, r3
 800111c:	b25a      	sxtb	r2, r3
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	4013      	ands	r3, r2
 8001124:	b25b      	sxtb	r3, r3
 8001126:	b2da      	uxtb	r2, r3
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff65 	bl	8000ffc <Write_MFRC522>
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 800113e:	2103      	movs	r1, #3
 8001140:	2014      	movs	r0, #20
 8001142:	f7ff ffbf 	bl	80010c4 <SetBitMask>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}

0800114a <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800114e:	210f      	movs	r1, #15
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff ff53 	bl	8000ffc <Write_MFRC522>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2102      	movs	r1, #2
 8001164:	4812      	ldr	r0, [pc, #72]	; (80011b0 <MFRC522_Init+0x54>)
 8001166:	f002 fb1d 	bl	80037a4 <HAL_GPIO_WritePin>
  MFRC522_Reset();
 800116a:	f7ff ffee 	bl	800114a <MFRC522_Reset>


  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	202a      	movs	r0, #42	; 0x2a
 8001172:	f7ff ff43 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); 	// TModeReg[3..0] + TPrescalerReg
 8001176:	21a9      	movs	r1, #169	; 0xa9
 8001178:	202b      	movs	r0, #43	; 0x2b
 800117a:	f7ff ff3f 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 800117e:	2103      	movs	r1, #3
 8001180:	202d      	movs	r0, #45	; 0x2d
 8001182:	f7ff ff3b 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 8001186:	21e8      	movs	r1, #232	; 0xe8
 8001188:	202c      	movs	r0, #44	; 0x2c
 800118a:	f7ff ff37 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     			// force 100% ASK modulation
 800118e:	2140      	movs	r1, #64	; 0x40
 8001190:	2015      	movs	r0, #21
 8001192:	f7ff ff33 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       			// CRC Initial value 0x6363
 8001196:	213d      	movs	r1, #61	; 0x3d
 8001198:	2011      	movs	r0, #17
 800119a:	f7ff ff2f 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(RFCfgReg, (0x07<<4)); 			// Set RX Gain to Max
 800119e:	2170      	movs	r1, #112	; 0x70
 80011a0:	2026      	movs	r0, #38	; 0x26
 80011a2:	f7ff ff2b 	bl	8000ffc <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 80011a6:	f7ff ffc8 	bl	800113a <AntennaOn>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40020000 	.word	0x40020000

080011b4 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 80011c0:	2107      	movs	r1, #7
 80011c2:	200d      	movs	r0, #13
 80011c4:	f7ff ff1a 	bl	8000ffc <Write_MFRC522>

  TagType[0] = reqMode;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	79fa      	ldrb	r2, [r7, #7]
 80011cc:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2201      	movs	r2, #1
 80011d8:	6839      	ldr	r1, [r7, #0]
 80011da:	200c      	movs	r0, #12
 80011dc:	f000 f80f 	bl	80011fe <MFRC522_ToCard>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <MFRC522_Request+0x3c>
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	d001      	beq.n	80011f4 <MFRC522_Request+0x40>
    status = MI_ERR;
 80011f0:	2302      	movs	r3, #2
 80011f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 80011fe:	b590      	push	{r4, r7, lr}
 8001200:	b089      	sub	sp, #36	; 0x24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	4613      	mov	r3, r2
 800120e:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 8001210:	2302      	movs	r3, #2
 8001212:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 8001214:	2300      	movs	r3, #0
 8001216:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 8001218:	2300      	movs	r3, #0
 800121a:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b0c      	cmp	r3, #12
 8001220:	d006      	beq.n	8001230 <MFRC522_ToCard+0x32>
 8001222:	2b0e      	cmp	r3, #14
 8001224:	d109      	bne.n	800123a <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8001226:	2312      	movs	r3, #18
 8001228:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 800122a:	2310      	movs	r3, #16
 800122c:	777b      	strb	r3, [r7, #29]
        break;
 800122e:	e005      	b.n	800123c <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 8001230:	2377      	movs	r3, #119	; 0x77
 8001232:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 8001234:	2330      	movs	r3, #48	; 0x30
 8001236:	777b      	strb	r3, [r7, #29]
        break;
 8001238:	e000      	b.n	800123c <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 800123a:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 800123c:	7fbb      	ldrb	r3, [r7, #30]
 800123e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	2002      	movs	r0, #2
 8001248:	f7ff fed8 	bl	8000ffc <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	2004      	movs	r0, #4
 8001250:	f7ff ff53 	bl	80010fa <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 8001254:	2180      	movs	r1, #128	; 0x80
 8001256:	200a      	movs	r0, #10
 8001258:	f7ff ff34 	bl	80010c4 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 800125c:	2100      	movs	r1, #0
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff fecc 	bl	8000ffc <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	e00a      	b.n	8001280 <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	2009      	movs	r0, #9
 8001276:	f7ff fec1 	bl	8000ffc <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	3301      	adds	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	7bbb      	ldrb	r3, [r7, #14]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3f0      	bcc.n	800126a <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	4619      	mov	r1, r3
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff feb5 	bl	8000ffc <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2b0c      	cmp	r3, #12
 8001296:	d103      	bne.n	80012a0 <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	200d      	movs	r0, #13
 800129c:	f7ff ff12 	bl	80010c4 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80012a0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012a4:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 80012a6:	2004      	movs	r0, #4
 80012a8:	f7ff fed8 	bl	800105c <Read_MFRC522>
 80012ac:	4603      	mov	r3, r0
 80012ae:	773b      	strb	r3, [r7, #28]
    i--;
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00a      	beq.n	80012d2 <MFRC522_ToCard+0xd4>
 80012bc:	7f3b      	ldrb	r3, [r7, #28]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d105      	bne.n	80012d2 <MFRC522_ToCard+0xd4>
 80012c6:	7f3a      	ldrb	r2, [r7, #28]
 80012c8:	7f7b      	ldrb	r3, [r7, #29]
 80012ca:	4013      	ands	r3, r2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0e9      	beq.n	80012a6 <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	200d      	movs	r0, #13
 80012d6:	f7ff ff10 	bl	80010fa <ClearBitMask>

  if (i != 0)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d052      	beq.n	8001386 <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 80012e0:	2006      	movs	r0, #6
 80012e2:	f7ff febb 	bl	800105c <Read_MFRC522>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f003 031b 	and.w	r3, r3, #27
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d148      	bne.n	8001382 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 80012f4:	7f3a      	ldrb	r2, [r7, #28]
 80012f6:	7fbb      	ldrb	r3, [r7, #30]
 80012f8:	4013      	ands	r3, r2
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 8001304:	2301      	movs	r3, #1
 8001306:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b0c      	cmp	r3, #12
 800130c:	d13b      	bne.n	8001386 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 800130e:	200a      	movs	r0, #10
 8001310:	f7ff fea4 	bl	800105c <Read_MFRC522>
 8001314:	4603      	mov	r3, r0
 8001316:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001318:	200c      	movs	r0, #12
 800131a:	f7ff fe9f 	bl	800105c <Read_MFRC522>
 800131e:	4603      	mov	r3, r0
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8001326:	7dfb      	ldrb	r3, [r7, #23]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d008      	beq.n	800133e <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 800132c:	7f3b      	ldrb	r3, [r7, #28]
 800132e:	3b01      	subs	r3, #1
 8001330:	00da      	lsls	r2, r3, #3
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	4413      	add	r3, r2
 8001336:	461a      	mov	r2, r3
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e004      	b.n	8001348 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 800133e:	7f3b      	ldrb	r3, [r7, #28]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	461a      	mov	r2, r3
 8001344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001346:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8001348:	7f3b      	ldrb	r3, [r7, #28]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <MFRC522_ToCard+0x154>
        {
          n = 1;
 800134e:	2301      	movs	r3, #1
 8001350:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 8001352:	7f3b      	ldrb	r3, [r7, #28]
 8001354:	2b10      	cmp	r3, #16
 8001356:	d901      	bls.n	800135c <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 8001358:	2310      	movs	r3, #16
 800135a:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	e00a      	b.n	8001378 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	18d4      	adds	r4, r2, r3
 8001368:	2009      	movs	r0, #9
 800136a:	f7ff fe77 	bl	800105c <Read_MFRC522>
 800136e:	4603      	mov	r3, r0
 8001370:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	3301      	adds	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	7f3b      	ldrb	r3, [r7, #28]
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3f0      	bcc.n	8001362 <MFRC522_ToCard+0x164>
 8001380:	e001      	b.n	8001386 <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 8001382:	2302      	movs	r3, #2
 8001384:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8001386:	7ffb      	ldrb	r3, [r7, #31]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3724      	adds	r7, #36	; 0x24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}

08001390 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
 8001396:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 8001398:	2300      	movs	r3, #0
 800139a:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800139c:	2100      	movs	r1, #0
 800139e:	200d      	movs	r0, #13
 80013a0:	f7ff fe2c 	bl	8000ffc <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2293      	movs	r2, #147	; 0x93
 80013a8:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3301      	adds	r3, #1
 80013ae:	2220      	movs	r2, #32
 80013b0:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2202      	movs	r2, #2
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	200c      	movs	r0, #12
 80013c0:	f7ff ff1d 	bl	80011fe <MFRC522_ToCard>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d118      	bne.n	8001400 <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	73bb      	strb	r3, [r7, #14]
 80013d2:	e009      	b.n	80013e8 <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	7b7b      	ldrb	r3, [r7, #13]
 80013de:	4053      	eors	r3, r2
 80013e0:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 80013e2:	7bbb      	ldrb	r3, [r7, #14]
 80013e4:	3301      	adds	r3, #1
 80013e6:	73bb      	strb	r3, [r7, #14]
 80013e8:	7bbb      	ldrb	r3, [r7, #14]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d9f2      	bls.n	80013d4 <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	7b7a      	ldrb	r2, [r7, #13]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d001      	beq.n	8001400 <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 80013fc:	2302      	movs	r3, #2
 80013fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <nmea0183_checksum>:
void SDCard(void *argument);

/* USER CODE BEGIN PFP */
// function to calculate checksum of the NMEA sentence
// -4, but not -3 because the NMEA sentences are delimited with \r\n, and there also is the invisible \r in the end
int nmea0183_checksum(char *msg) {
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
	int checksum = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
	// the first $ sign and the last two bytes of original CRC + the * sign
	for (j = 1; j < strlen(msg) - 4; j++) {
 800141a:	2301      	movs	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	e00a      	b.n	8001436 <nmea0183_checksum+0x2c>
		checksum = checksum ^ (unsigned) msg[j];
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4053      	eors	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
	for (j = 1; j < strlen(msg) - 4; j++) {
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	3301      	adds	r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7fe fed2 	bl	80001e0 <strlen>
 800143c:	4603      	mov	r3, r0
 800143e:	1f1a      	subs	r2, r3, #4
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	429a      	cmp	r2, r3
 8001444:	d8ec      	bhi.n	8001420 <nmea0183_checksum+0x16>
	}
	return checksum;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b09a      	sub	sp, #104	; 0x68
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001456:	f001 fad7 	bl	8002a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145a:	f000 f87f 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145e:	f000 f9c1 	bl	80017e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001462:	f000 f99f 	bl	80017a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001466:	f000 f973 	bl	8001750 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800146a:	f000 f8e3 	bl	8001634 <MX_I2C1_Init>
  MX_SPI1_Init();
 800146e:	f000 f90f 	bl	8001690 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001472:	f000 f943 	bl	80016fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char txBuffer [100] = {};
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	2260      	movs	r2, #96	; 0x60
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f008 fc76 	bl	8009d74 <memset>
  sprintf(txBuffer, "Bismillah..\n");
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	4920      	ldr	r1, [pc, #128]	; (800150c <main+0xbc>)
 800148c:	4618      	mov	r0, r3
 800148e:	f009 f8e3 	bl	800a658 <siprintf>
  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 8001492:	1d39      	adds	r1, r7, #4
 8001494:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001498:	2264      	movs	r2, #100	; 0x64
 800149a:	481d      	ldr	r0, [pc, #116]	; (8001510 <main+0xc0>)
 800149c:	f004 fe77 	bl	800618e <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014a0:	f005 fdd8 	bl	8007054 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(Display, NULL, &DisplayTask_attributes);
 80014a4:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <main+0xc4>)
 80014a6:	2100      	movs	r1, #0
 80014a8:	481b      	ldr	r0, [pc, #108]	; (8001518 <main+0xc8>)
 80014aa:	f005 fe1d 	bl	80070e8 <osThreadNew>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a1a      	ldr	r2, [pc, #104]	; (800151c <main+0xcc>)
 80014b2:	6013      	str	r3, [r2, #0]

  /* creation of IMUTask */
  IMUTaskHandle = osThreadNew(IMU, NULL, &IMUTask_attributes);
 80014b4:	4a1a      	ldr	r2, [pc, #104]	; (8001520 <main+0xd0>)
 80014b6:	2100      	movs	r1, #0
 80014b8:	481a      	ldr	r0, [pc, #104]	; (8001524 <main+0xd4>)
 80014ba:	f005 fe15 	bl	80070e8 <osThreadNew>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a19      	ldr	r2, [pc, #100]	; (8001528 <main+0xd8>)
 80014c2:	6013      	str	r3, [r2, #0]

  /* creation of GPSTask */
  GPSTaskHandle = osThreadNew(GPS, NULL, &GPSTask_attributes);
 80014c4:	4a19      	ldr	r2, [pc, #100]	; (800152c <main+0xdc>)
 80014c6:	2100      	movs	r1, #0
 80014c8:	4819      	ldr	r0, [pc, #100]	; (8001530 <main+0xe0>)
 80014ca:	f005 fe0d 	bl	80070e8 <osThreadNew>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a18      	ldr	r2, [pc, #96]	; (8001534 <main+0xe4>)
 80014d2:	6013      	str	r3, [r2, #0]

  /* creation of AnalogReadingTa */
  AnalogReadingTaHandle = osThreadNew(AnalogReading, NULL, &AnalogReadingTa_attributes);
 80014d4:	4a18      	ldr	r2, [pc, #96]	; (8001538 <main+0xe8>)
 80014d6:	2100      	movs	r1, #0
 80014d8:	4818      	ldr	r0, [pc, #96]	; (800153c <main+0xec>)
 80014da:	f005 fe05 	bl	80070e8 <osThreadNew>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a17      	ldr	r2, [pc, #92]	; (8001540 <main+0xf0>)
 80014e2:	6013      	str	r3, [r2, #0]

  /* creation of RFIDTask */
  RFIDTaskHandle = osThreadNew(RFID, NULL, &RFIDTask_attributes);
 80014e4:	4a17      	ldr	r2, [pc, #92]	; (8001544 <main+0xf4>)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4817      	ldr	r0, [pc, #92]	; (8001548 <main+0xf8>)
 80014ea:	f005 fdfd 	bl	80070e8 <osThreadNew>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a16      	ldr	r2, [pc, #88]	; (800154c <main+0xfc>)
 80014f2:	6013      	str	r3, [r2, #0]

  /* creation of SDCardTask */
  SDCardTaskHandle = osThreadNew(SDCard, NULL, &SDCardTask_attributes);
 80014f4:	4a16      	ldr	r2, [pc, #88]	; (8001550 <main+0x100>)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4816      	ldr	r0, [pc, #88]	; (8001554 <main+0x104>)
 80014fa:	f005 fdf5 	bl	80070e8 <osThreadNew>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a15      	ldr	r2, [pc, #84]	; (8001558 <main+0x108>)
 8001502:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001504:	f005 fdca 	bl	800709c <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    /* Infinite loop */

  while (1)
 8001508:	e7fe      	b.n	8001508 <main+0xb8>
 800150a:	bf00      	nop
 800150c:	0800e2bc 	.word	0x0800e2bc
 8001510:	20004cf4 	.word	0x20004cf4
 8001514:	0800e468 	.word	0x0800e468
 8001518:	080018c5 	.word	0x080018c5
 800151c:	20004c98 	.word	0x20004c98
 8001520:	0800e48c 	.word	0x0800e48c
 8001524:	0800199d 	.word	0x0800199d
 8001528:	20004b94 	.word	0x20004b94
 800152c:	0800e4b0 	.word	0x0800e4b0
 8001530:	08001a29 	.word	0x08001a29
 8001534:	20004d38 	.word	0x20004d38
 8001538:	0800e4d4 	.word	0x0800e4d4
 800153c:	08002021 	.word	0x08002021
 8001540:	20004b38 	.word	0x20004b38
 8001544:	0800e4f8 	.word	0x0800e4f8
 8001548:	08002031 	.word	0x08002031
 800154c:	20004c94 	.word	0x20004c94
 8001550:	0800e51c 	.word	0x0800e51c
 8001554:	080021c9 	.word	0x080021c9
 8001558:	20004b3c 	.word	0x20004b3c

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b094      	sub	sp, #80	; 0x50
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2230      	movs	r2, #48	; 0x30
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f008 fc02 	bl	8009d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	4b29      	ldr	r3, [pc, #164]	; (800162c <SystemClock_Config+0xd0>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	4a28      	ldr	r2, [pc, #160]	; (800162c <SystemClock_Config+0xd0>)
 800158a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158e:	6413      	str	r3, [r2, #64]	; 0x40
 8001590:	4b26      	ldr	r3, [pc, #152]	; (800162c <SystemClock_Config+0xd0>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	4b23      	ldr	r3, [pc, #140]	; (8001630 <SystemClock_Config+0xd4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015a8:	4a21      	ldr	r2, [pc, #132]	; (8001630 <SystemClock_Config+0xd4>)
 80015aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <SystemClock_Config+0xd4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015bc:	2302      	movs	r3, #2
 80015be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c0:	2301      	movs	r3, #1
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c4:	2310      	movs	r3, #16
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c8:	2302      	movs	r3, #2
 80015ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015cc:	2300      	movs	r3, #0
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015d0:	2310      	movs	r3, #16
 80015d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015da:	2304      	movs	r3, #4
 80015dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015de:	2307      	movs	r3, #7
 80015e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 f8b6 	bl	8004758 <HAL_RCC_OscConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015f2:	f000 fe03 	bl	80021fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f6:	230f      	movs	r3, #15
 80015f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015fa:	2302      	movs	r3, #2
 80015fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2102      	movs	r1, #2
 8001612:	4618      	mov	r0, r3
 8001614:	f003 fb18 	bl	8004c48 <HAL_RCC_ClockConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800161e:	f000 fded 	bl	80021fc <Error_Handler>
  }
}
 8001622:	bf00      	nop
 8001624:	3750      	adds	r7, #80	; 0x50
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40007000 	.word	0x40007000

08001634 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_I2C1_Init+0x50>)
 800163a:	4a13      	ldr	r2, [pc, #76]	; (8001688 <MX_I2C1_Init+0x54>)
 800163c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_I2C1_Init+0x50>)
 8001640:	4a12      	ldr	r2, [pc, #72]	; (800168c <MX_I2C1_Init+0x58>)
 8001642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_I2C1_Init+0x50>)
 8001652:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001656:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <MX_I2C1_Init+0x50>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_I2C1_Init+0x50>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <MX_I2C1_Init+0x50>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_I2C1_Init+0x50>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001670:	4804      	ldr	r0, [pc, #16]	; (8001684 <MX_I2C1_Init+0x50>)
 8001672:	f002 f8b1 	bl	80037d8 <HAL_I2C_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800167c:	f000 fdbe 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20004b40 	.word	0x20004b40
 8001688:	40005400 	.word	0x40005400
 800168c:	000186a0 	.word	0x000186a0

08001690 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MX_SPI1_Init+0x64>)
 8001696:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <MX_SPI1_Init+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800169a:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <MX_SPI1_Init+0x64>)
 800169c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MX_SPI1_Init+0x64>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MX_SPI1_Init+0x64>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_SPI1_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_SPI1_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_SPI1_Init+0x64>)
 80016bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_SPI1_Init+0x64>)
 80016c4:	2218      	movs	r2, #24
 80016c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <MX_SPI1_Init+0x64>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_SPI1_Init+0x64>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <MX_SPI1_Init+0x64>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_SPI1_Init+0x64>)
 80016dc:	220a      	movs	r2, #10
 80016de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <MX_SPI1_Init+0x64>)
 80016e2:	f003 fcdf 	bl	80050a4 <HAL_SPI_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016ec:	f000 fd86 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20004c9c 	.word	0x20004c9c
 80016f8:	40013000 	.word	0x40013000

080016fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <MX_USART1_UART_Init+0x50>)
 8001704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001708:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800170c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001734:	f004 fcde 	bl	80060f4 <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800173e:	f000 fd5d 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20004c50 	.word	0x20004c50
 800174c:	40011000 	.word	0x40011000

08001750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_USART2_UART_Init+0x4c>)
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <MX_USART2_UART_Init+0x50>)
 8001758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <MX_USART2_UART_Init+0x4c>)
 800175c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_USART2_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_USART2_UART_Init+0x4c>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_USART2_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_USART2_UART_Init+0x4c>)
 8001776:	220c      	movs	r2, #12
 8001778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <MX_USART2_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_USART2_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_USART2_UART_Init+0x4c>)
 8001788:	f004 fcb4 	bl	80060f4 <HAL_UART_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001792:	f000 fd33 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20004cf4 	.word	0x20004cf4
 80017a0:	40004400 	.word	0x40004400

080017a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_DMA_Init+0x3c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <MX_DMA_Init+0x3c>)
 80017b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_DMA_Init+0x3c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2105      	movs	r1, #5
 80017ca:	203a      	movs	r0, #58	; 0x3a
 80017cc:	f001 fa3a 	bl	8002c44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017d0:	203a      	movs	r0, #58	; 0x3a
 80017d2:	f001 fa53 	bl	8002c7c <HAL_NVIC_EnableIRQ>

}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800

080017e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <MX_GPIO_Init+0xd0>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a2c      	ldr	r2, [pc, #176]	; (80018b4 <MX_GPIO_Init+0xd0>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <MX_GPIO_Init+0xd0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <MX_GPIO_Init+0xd0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a25      	ldr	r2, [pc, #148]	; (80018b4 <MX_GPIO_Init+0xd0>)
 8001820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <MX_GPIO_Init+0xd0>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <MX_GPIO_Init+0xd0>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <MX_GPIO_Init+0xd0>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <MX_GPIO_Init+0xd0>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <MX_GPIO_Init+0xd0>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <MX_GPIO_Init+0xd0>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <MX_GPIO_Init+0xd0>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFID_RST_Pin|RFID_CS_Pin, GPIO_PIN_SET);
 800186a:	2201      	movs	r2, #1
 800186c:	2112      	movs	r1, #18
 800186e:	4812      	ldr	r0, [pc, #72]	; (80018b8 <MX_GPIO_Init+0xd4>)
 8001870:	f001 ff98 	bl	80037a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <MX_GPIO_Init+0xd8>)
 800187c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <MX_GPIO_Init+0xdc>)
 800188a:	f001 fe07 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_RST_Pin RFID_CS_Pin */
  GPIO_InitStruct.Pin = RFID_RST_Pin|RFID_CS_Pin;
 800188e:	2312      	movs	r3, #18
 8001890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001896:	2301      	movs	r3, #1
 8001898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	4804      	ldr	r0, [pc, #16]	; (80018b8 <MX_GPIO_Init+0xd4>)
 80018a6:	f001 fdf9 	bl	800349c <HAL_GPIO_Init>

}
 80018aa:	bf00      	nop
 80018ac:	3728      	adds	r7, #40	; 0x28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020000 	.word	0x40020000
 80018bc:	10210000 	.word	0x10210000
 80018c0:	40020800 	.word	0x40020800

080018c4 <Display>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Display */
void Display(void *argument)
{
 80018c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c6:	b0c1      	sub	sp, #260	; 0x104
 80018c8:	af08      	add	r7, sp, #32
 80018ca:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN 5 */
	char txBuffer [200] = {};
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	f107 0318 	add.w	r3, r7, #24
 80018d4:	22c4      	movs	r2, #196	; 0xc4
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f008 fa4b 	bl	8009d74 <memset>
	sprintf(txBuffer, "Running Display Task..\n");
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4928      	ldr	r1, [pc, #160]	; (8001984 <Display+0xc0>)
 80018e4:	4618      	mov	r0, r3
 80018e6:	f008 feb7 	bl	800a658 <siprintf>
  /* Infinite loop */
	uint8_t identification = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  for(;;)
  {
	  if (identification == 1){
 80018f0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d106      	bne.n	8001906 <Display+0x42>
		  xTaskNotifyGive(IMUTaskHandle);
 80018f8:	4b23      	ldr	r3, [pc, #140]	; (8001988 <Display+0xc4>)
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	2300      	movs	r3, #0
 80018fe:	2202      	movs	r2, #2
 8001900:	2100      	movs	r1, #0
 8001902:	f007 f965 	bl	8008bd0 <xTaskGenericNotify>
	  }

	  if(UID[0]== 0x29){
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <Display+0xc8>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b29      	cmp	r3, #41	; 0x29
 800190c:	d103      	bne.n	8001916 <Display+0x52>
		  identification = 1;
 800190e:	2301      	movs	r3, #1
 8001910:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8001914:	e002      	b.n	800191c <Display+0x58>
	  } else {
		  identification = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	  }
	  sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\t ID : %x-%x-%x-%x\n",
 800191c:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <Display+0xcc>)
 800191e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001922:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <Display+0xcc>)
 8001924:	ed93 7b04 	vldr	d7, [r3, #16]
 8001928:	4919      	ldr	r1, [pc, #100]	; (8001990 <Display+0xcc>)
 800192a:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
			  	  	  	  MPU6050.Ax, MPU6050.Ay,MPU6050.Az, UID[0],UID[1],UID[2],UID[3]);
 800192e:	4e17      	ldr	r6, [pc, #92]	; (800198c <Display+0xc8>)
 8001930:	7836      	ldrb	r6, [r6, #0]
	  sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\t ID : %x-%x-%x-%x\n",
 8001932:	60be      	str	r6, [r7, #8]
			  	  	  	  MPU6050.Ax, MPU6050.Ay,MPU6050.Az, UID[0],UID[1],UID[2],UID[3]);
 8001934:	4e15      	ldr	r6, [pc, #84]	; (800198c <Display+0xc8>)
 8001936:	7876      	ldrb	r6, [r6, #1]
	  sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\t ID : %x-%x-%x-%x\n",
 8001938:	607e      	str	r6, [r7, #4]
			  	  	  	  MPU6050.Ax, MPU6050.Ay,MPU6050.Az, UID[0],UID[1],UID[2],UID[3]);
 800193a:	4e14      	ldr	r6, [pc, #80]	; (800198c <Display+0xc8>)
 800193c:	78b6      	ldrb	r6, [r6, #2]
	  sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\t ID : %x-%x-%x-%x\n",
 800193e:	4632      	mov	r2, r6
			  	  	  	  MPU6050.Ax, MPU6050.Ay,MPU6050.Az, UID[0],UID[1],UID[2],UID[3]);
 8001940:	4e12      	ldr	r6, [pc, #72]	; (800198c <Display+0xc8>)
 8001942:	78f6      	ldrb	r6, [r6, #3]
	  sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\t ID : %x-%x-%x-%x\n",
 8001944:	4633      	mov	r3, r6
 8001946:	f107 0614 	add.w	r6, r7, #20
 800194a:	9307      	str	r3, [sp, #28]
 800194c:	9206      	str	r2, [sp, #24]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	9305      	str	r3, [sp, #20]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	9304      	str	r3, [sp, #16]
 8001956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800195a:	ed8d 7b00 	vstr	d7, [sp]
 800195e:	4622      	mov	r2, r4
 8001960:	462b      	mov	r3, r5
 8001962:	490c      	ldr	r1, [pc, #48]	; (8001994 <Display+0xd0>)
 8001964:	4630      	mov	r0, r6
 8001966:	f008 fe77 	bl	800a658 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
 800196a:	f107 0114 	add.w	r1, r7, #20
 800196e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001972:	22c8      	movs	r2, #200	; 0xc8
 8001974:	4808      	ldr	r0, [pc, #32]	; (8001998 <Display+0xd4>)
 8001976:	f004 fc0a 	bl	800618e <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(10);
 800197a:	200a      	movs	r0, #10
 800197c:	f005 fc46 	bl	800720c <osDelay>
	  if (identification == 1){
 8001980:	e7b6      	b.n	80018f0 <Display+0x2c>
 8001982:	bf00      	nop
 8001984:	0800e2cc 	.word	0x0800e2cc
 8001988:	20004b94 	.word	0x20004b94
 800198c:	20000204 	.word	0x20000204
 8001990:	20004b98 	.word	0x20004b98
 8001994:	0800e2e4 	.word	0x0800e2e4
 8001998:	20004cf4 	.word	0x20004cf4

0800199c <IMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IMU */
void IMU(void *argument)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b09c      	sub	sp, #112	; 0x70
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IMU */
	char txBuffer[100]= {};
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	2260      	movs	r2, #96	; 0x60
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f008 f9df 	bl	8009d74 <memset>
	sprintf(txBuffer, "Running IMU Task..\n");
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	4916      	ldr	r1, [pc, #88]	; (8001a14 <IMU+0x78>)
 80019bc:	4618      	mov	r0, r3
 80019be:	f008 fe4b 	bl	800a658 <siprintf>

	uint8_t ID = MPU6050_Init(&hi2c1);
 80019c2:	4815      	ldr	r0, [pc, #84]	; (8001a18 <IMU+0x7c>)
 80019c4:	f000 fc1f 	bl	8002206 <MPU6050_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(txBuffer,"Id : %d Initialization Success .. \n", ID);
 80019ce:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	4911      	ldr	r1, [pc, #68]	; (8001a1c <IMU+0x80>)
 80019d8:	4618      	mov	r0, r3
 80019da:	f008 fe3d 	bl	800a658 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, sizeof(txBuffer), 100);
 80019de:	f107 0108 	add.w	r1, r7, #8
 80019e2:	2364      	movs	r3, #100	; 0x64
 80019e4:	2264      	movs	r2, #100	; 0x64
 80019e6:	480e      	ldr	r0, [pc, #56]	; (8001a20 <IMU+0x84>)
 80019e8:	f004 fbd1 	bl	800618e <HAL_UART_Transmit>
	//Clearing Buffer
	memset(txBuffer,0,sizeof(txBuffer));
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	2264      	movs	r2, #100	; 0x64
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f008 f9bd 	bl	8009d74 <memset>
  /* Infinite loop */
  for(;;)
  {
	//Blocking Until Notified
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 80019fa:	f04f 31ff 	mov.w	r1, #4294967295
 80019fe:	2001      	movs	r0, #1
 8001a00:	f007 f89e 	bl	8008b40 <ulTaskNotifyTake>
	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <IMU+0x88>)
 8001a06:	4804      	ldr	r0, [pc, #16]	; (8001a18 <IMU+0x7c>)
 8001a08:	f000 fc76 	bl	80022f8 <MPU6050_Read_Accel>
//	sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\n", MPU6050.Ax, MPU6050.Ay,MPU6050.Az );
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(100);
 8001a0c:	2064      	movs	r0, #100	; 0x64
 8001a0e:	f005 fbfd 	bl	800720c <osDelay>
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8001a12:	e7f2      	b.n	80019fa <IMU+0x5e>
 8001a14:	0800e318 	.word	0x0800e318
 8001a18:	20004b40 	.word	0x20004b40
 8001a1c:	0800e32c 	.word	0x0800e32c
 8001a20:	20004cf4 	.word	0x20004cf4
 8001a24:	20004b98 	.word	0x20004b98

08001a28 <GPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPS */
void GPS(void *argument)
{
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	f5ad 7d6e 	sub.w	sp, sp, #952	; 0x3b8
 8001a2e:	af04      	add	r7, sp, #16
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	6018      	str	r0, [r3, #0]

	  char hH[2]; // hours
	  char mM[2]; // minutes
	  char sS[2]; // seconds

	  uint8_t cnt = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393

	  HAL_UART_Receive_DMA(&huart1, buff, 255);
 8001a3a:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8001a3e:	22ff      	movs	r2, #255	; 0xff
 8001a40:	4619      	mov	r1, r3
 8001a42:	487b      	ldr	r0, [pc, #492]	; (8001c30 <GPS+0x208>)
 8001a44:	f004 fc35 	bl	80062b2 <HAL_UART_Receive_DMA>

	  HAL_UART_Transmit(&huart2, (unsigned char *) "Start\n", 6, 500);
 8001a48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a4c:	2206      	movs	r2, #6
 8001a4e:	4979      	ldr	r1, [pc, #484]	; (8001c34 <GPS+0x20c>)
 8001a50:	4879      	ldr	r0, [pc, #484]	; (8001c38 <GPS+0x210>)
 8001a52:	f004 fb9c 	bl	800618e <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  char txBuffer[200] = {};
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	3304      	adds	r3, #4
 8001a60:	22c4      	movs	r2, #196	; 0xc4
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f008 f985 	bl	8009d74 <memset>
	  sprintf(txBuffer,"\nFlag : %d", flag);
 8001a6a:	4b74      	ldr	r3, [pc, #464]	; (8001c3c <GPS+0x214>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	4972      	ldr	r1, [pc, #456]	; (8001c40 <GPS+0x218>)
 8001a76:	4618      	mov	r0, r3
 8001a78:	f008 fdee 	bl	800a658 <siprintf>
	  //	  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
	  if (flag) {
 8001a7c:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <GPS+0x214>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 82c7 	beq.w	8002014 <GPS+0x5ec>
	  	memset(buffStr, 0, 255);
 8001a86:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001a8a:	22ff      	movs	r2, #255	; 0xff
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f008 f970 	bl	8009d74 <memset>
	  	sprintf(buffStr, "%s", buff);
 8001a94:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8001a98:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001a9c:	4969      	ldr	r1, [pc, #420]	; (8001c44 <GPS+0x21c>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f008 fdda 	bl	800a658 <siprintf>
	  //HAL_UART_Transmit(&huart2, (uint8_t *)buffStr, sizeof(buffStr), 70);
	  // splitting the buffStr by the "\n" delimiter with the strsep() C function
	  // see http://www.manpagez.com/man/3/strsep/
	  	char *token, *string;
	  	// actually splitting the string by "\n" delimiter
	  	string = strdup(buffStr);
 8001aa4:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f008 fe19 	bl	800a6e0 <strdup>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ab6:	601a      	str	r2, [r3, #0]
	  	while ((token = strsep(&string, "\n")) != NULL) {
 8001ab8:	e281      	b.n	8001fbe <GPS+0x596>
	  		memset(nmeaSnt, 0, 80);
 8001aba:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001abe:	2250      	movs	r2, #80	; 0x50
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f008 f956 	bl	8009d74 <memset>
	  		sprintf(nmeaSnt, "%s", token);
 8001ac8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001acc:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8001ad0:	495c      	ldr	r1, [pc, #368]	; (8001c44 <GPS+0x21c>)
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f008 fdc0 	bl	800a658 <siprintf>

	  		memset(txBuffer,0,sizeof(txBuffer));
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	22c8      	movs	r2, #200	; 0xc8
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f008 f947 	bl	8009d74 <memset>
	  //HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 100);
	  // selecting only $GNGLL sentences, combined GPS and GLONAS
	  // on my GPS sensor this good NMEA sentence is always 50 characters
	  		if ((strstr(nmeaSnt, "$GPGGA") != 0) && (strlen(nmeaSnt) > 49) &&(strlen(nmeaSnt) <90) && strstr(nmeaSnt, "*") != 0) {
 8001ae6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001aea:	4957      	ldr	r1, [pc, #348]	; (8001c48 <GPS+0x220>)
 8001aec:	4618      	mov	r0, r3
 8001aee:	f008 fe19 	bl	800a724 <strstr>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 8262 	beq.w	8001fbe <GPS+0x596>
 8001afa:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fb6e 	bl	80001e0 <strlen>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b31      	cmp	r3, #49	; 0x31
 8001b08:	f240 8259 	bls.w	8001fbe <GPS+0x596>
 8001b0c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fb65 	bl	80001e0 <strlen>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b59      	cmp	r3, #89	; 0x59
 8001b1a:	f200 8250 	bhi.w	8001fbe <GPS+0x596>
 8001b1e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001b22:	212a      	movs	r1, #42	; 0x2a
 8001b24:	4618      	mov	r0, r3
 8001b26:	f008 fdc6 	bl	800a6b6 <strchr>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 8246 	beq.w	8001fbe <GPS+0x596>
	  			rawSum = strstr(nmeaSnt, "*");
 8001b32:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001b36:	212a      	movs	r1, #42	; 0x2a
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f008 fdbc 	bl	800a6b6 <strchr>
 8001b3e:	f8c7 0384 	str.w	r0, [r7, #900]	; 0x384
	  			memcpy(smNmbr, &rawSum[1], 2);
 8001b42:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8001b46:	3301      	adds	r3, #1
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001b50:	801a      	strh	r2, [r3, #0]
	  			smNmbr[2] = '\0';
 8001b52:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001b56:	2200      	movs	r2, #0
 8001b58:	709a      	strb	r2, [r3, #2]

	  			uint8_t intSum = nmea0183_checksum(nmeaSnt);
 8001b5a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fc53 	bl	800140a <nmea0183_checksum>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f887 3383 	strb.w	r3, [r7, #899]	; 0x383
	  			char hex[2];
	  			// "%X" unsigned hexadecimal integer (capital letters)
	  			sprintf(hex, "%X", intSum);
 8001b6a:	f897 2383 	ldrb.w	r2, [r7, #899]	; 0x383
 8001b6e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b72:	4936      	ldr	r1, [pc, #216]	; (8001c4c <GPS+0x224>)
 8001b74:	4618      	mov	r0, r3
 8001b76:	f008 fd6f 	bl	800a658 <siprintf>

	  			// checksum data verification, if OK, then we can really trust
	  			// the data in the the NMEA sentence
	  			if (strstr(smNmbr, hex) != NULL) {
 8001b7a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8001b7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f008 fdcd 	bl	800a724 <strstr>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 8216 	beq.w	8001fbe <GPS+0x596>
	  				cnt = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
	  //			sprintf(txBuffer,"pV : %s\n", pV);
	  			// splitting the good NMEA sentence into the tokens by the comma delimiter
	  				for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8001b98:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001b9c:	492c      	ldr	r1, [pc, #176]	; (8001c50 <GPS+0x228>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f009 fc0c 	bl	800b3bc <strtok>
 8001ba4:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
 8001ba8:	e069      	b.n	8001c7e <GPS+0x256>
	  					memset(txBuffer,0,sizeof(txBuffer));
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	22c8      	movs	r2, #200	; 0xc8
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f008 f8de 	bl	8009d74 <memset>
	  					sprintf(txBuffer,"pV[%d] : %s\n",cnt, pV);
 8001bb8:	f897 2393 	ldrb.w	r2, [r7, #915]	; 0x393
 8001bbc:	f107 000c 	add.w	r0, r7, #12
 8001bc0:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8001bc4:	4923      	ldr	r1, [pc, #140]	; (8001c54 <GPS+0x22c>)
 8001bc6:	f008 fd47 	bl	800a658 <siprintf>
	  //				HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 100);
	  					switch (cnt) {
 8001bca:	f897 3393 	ldrb.w	r3, [r7, #915]	; 0x393
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d849      	bhi.n	8001c68 <GPS+0x240>
 8001bd4:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <GPS+0x1b4>)
 8001bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bda:	bf00      	nop
 8001bdc:	08001bf1 	.word	0x08001bf1
 8001be0:	08001c01 	.word	0x08001c01
 8001be4:	08001c11 	.word	0x08001c11
 8001be8:	08001c21 	.word	0x08001c21
 8001bec:	08001c59 	.word	0x08001c59
	  						case 1:
	  							  utcRaw = strdup(pV);
 8001bf0:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8001bf4:	f008 fd74 	bl	800a6e0 <strdup>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
	  							  break;
 8001bfe:	e033      	b.n	8001c68 <GPS+0x240>
	  						case 2:
	  							  latRaw = strdup(pV);
 8001c00:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8001c04:	f008 fd6c 	bl	800a6e0 <strdup>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
	  							  break;
 8001c0e:	e02b      	b.n	8001c68 <GPS+0x240>
	  						case 3:
	  							  hemNS = strdup(pV);
 8001c10:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8001c14:	f008 fd64 	bl	800a6e0 <strdup>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
	  							  break;
 8001c1e:	e023      	b.n	8001c68 <GPS+0x240>
	  						case 4:
	  							  lonRaw = strdup(pV);
 8001c20:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8001c24:	f008 fd5c 	bl	800a6e0 <strdup>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
	  							  break;
 8001c2e:	e01b      	b.n	8001c68 <GPS+0x240>
 8001c30:	20004c50 	.word	0x20004c50
 8001c34:	0800e350 	.word	0x0800e350
 8001c38:	20004cf4 	.word	0x20004cf4
 8001c3c:	20000218 	.word	0x20000218
 8001c40:	0800e358 	.word	0x0800e358
 8001c44:	0800e364 	.word	0x0800e364
 8001c48:	0800e368 	.word	0x0800e368
 8001c4c:	0800e370 	.word	0x0800e370
 8001c50:	0800e374 	.word	0x0800e374
 8001c54:	0800e378 	.word	0x0800e378
	  						case 5:
	  							  hemEW = strdup(pV);
 8001c58:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8001c5c:	f008 fd40 	bl	800a6e0 <strdup>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
	  							  break;
 8001c66:	bf00      	nop
	  					}
	  					cnt++;
 8001c68:	f897 3393 	ldrb.w	r3, [r7, #915]	; 0x393
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
	  				for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8001c72:	49db      	ldr	r1, [pc, #876]	; (8001fe0 <GPS+0x5b8>)
 8001c74:	2000      	movs	r0, #0
 8001c76:	f009 fba1 	bl	800b3bc <strtok>
 8001c7a:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
 8001c7e:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d191      	bne.n	8001baa <GPS+0x182>
	  				} //end for

	  				//Converting Longitude and Latitude into Float
	  				latitude = atof(latRaw);
 8001c86:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 8001c8a:	f008 f837 	bl	8009cfc <atof>
 8001c8e:	ec53 2b10 	vmov	r2, r3, d0
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f7fe ffaf 	bl	8000bf8 <__aeabi_d2f>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4ad1      	ldr	r2, [pc, #836]	; (8001fe4 <GPS+0x5bc>)
 8001c9e:	6013      	str	r3, [r2, #0]
	  				longitude = atof(lonRaw);
 8001ca0:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8001ca4:	f008 f82a 	bl	8009cfc <atof>
 8001ca8:	ec53 2b10 	vmov	r2, r3, d0
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7fe ffa2 	bl	8000bf8 <__aeabi_d2f>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4acc      	ldr	r2, [pc, #816]	; (8001fe8 <GPS+0x5c0>)
 8001cb8:	6013      	str	r3, [r2, #0]

	  				if (*hemNS == 'S') {
 8001cba:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b53      	cmp	r3, #83	; 0x53
 8001cc2:	d112      	bne.n	8001cea <GPS+0x2c2>
	  					latitude  *= -1.0;
 8001cc4:	4bc7      	ldr	r3, [pc, #796]	; (8001fe4 <GPS+0x5bc>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fc45 	bl	8000558 <__aeabi_f2d>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f7fe ff8f 	bl	8000bf8 <__aeabi_d2f>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	ee07 3a90 	vmov	s15, r3
 8001ce0:	eef1 7a67 	vneg.f32	s15, s15
 8001ce4:	4bbf      	ldr	r3, [pc, #764]	; (8001fe4 <GPS+0x5bc>)
 8001ce6:	edc3 7a00 	vstr	s15, [r3]
	  				}
	  				if (*hemEW == 'W') {
 8001cea:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b57      	cmp	r3, #87	; 0x57
 8001cf2:	d112      	bne.n	8001d1a <GPS+0x2f2>
	  					longitude *= -1.0;
 8001cf4:	4bbc      	ldr	r3, [pc, #752]	; (8001fe8 <GPS+0x5c0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc2d 	bl	8000558 <__aeabi_f2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe ff77 	bl	8000bf8 <__aeabi_d2f>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	ee07 3a90 	vmov	s15, r3
 8001d10:	eef1 7a67 	vneg.f32	s15, s15
 8001d14:	4bb4      	ldr	r3, [pc, #720]	; (8001fe8 <GPS+0x5c0>)
 8001d16:	edc3 7a00 	vstr	s15, [r3]
	  				}
	  				char * token;
	  				//Get LatitudeDegree
	  				token = strtok(latRaw, ".");
 8001d1a:	49b4      	ldr	r1, [pc, #720]	; (8001fec <GPS+0x5c4>)
 8001d1c:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 8001d20:	f009 fb4c 	bl	800b3bc <strtok>
 8001d24:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(latDg, 0, sizeof(latDg));
 8001d28:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001d2c:	220a      	movs	r2, #10
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f008 f81f 	bl	8009d74 <memset>
	  //			memcpy(latDg, token, strlen(token));
	  				sprintf(latDg, token);
 8001d36:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001d3a:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f008 fc8a 	bl	800a658 <siprintf>
	  				//Get Minutes
	  				token = strtok(NULL,".");
 8001d44:	49a9      	ldr	r1, [pc, #676]	; (8001fec <GPS+0x5c4>)
 8001d46:	2000      	movs	r0, #0
 8001d48:	f009 fb38 	bl	800b3bc <strtok>
 8001d4c:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(latMS, 0, sizeof(latMS));
 8001d50:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d54:	2214      	movs	r2, #20
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f008 f80b 	bl	8009d74 <memset>
	  //			memcpy(latMS, token, strlen(token));
	  				sprintf(latMS, token);
 8001d5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d62:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8001d66:	4618      	mov	r0, r3
 8001d68:	f008 fc76 	bl	800a658 <siprintf>
	  //			latMS[7] = '.';

	  				//Get longitude Degree
	  				float degrees = trunc(latitude / 100.0f);
 8001d6c:	4b9d      	ldr	r3, [pc, #628]	; (8001fe4 <GPS+0x5bc>)
 8001d6e:	edd3 7a00 	vldr	s15, [r3]
 8001d72:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8001ff0 <GPS+0x5c8>
 8001d76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d7a:	ee16 0a90 	vmov	r0, s13
 8001d7e:	f7fe fbeb 	bl	8000558 <__aeabi_f2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	ec43 2b10 	vmov	d0, r2, r3
 8001d8a:	f00c fa37 	bl	800e1fc <trunc>
 8001d8e:	ec53 2b10 	vmov	r2, r3, d0
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7fe ff2f 	bl	8000bf8 <__aeabi_d2f>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
	  				float minutes = latitude - (degrees * 100.0f);
 8001da0:	4b90      	ldr	r3, [pc, #576]	; (8001fe4 <GPS+0x5bc>)
 8001da2:	ed93 7a00 	vldr	s14, [r3]
 8001da6:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 8001daa:	eddf 6a91 	vldr	s13, [pc, #580]	; 8001ff0 <GPS+0x5c8>
 8001dae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db6:	edc7 7add 	vstr	s15, [r7, #884]	; 0x374
	  				latitude = degrees + (minutes / 60.0f);
 8001dba:	edd7 7add 	vldr	s15, [r7, #884]	; 0x374
 8001dbe:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8001ff4 <GPS+0x5cc>
 8001dc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001dc6:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 8001dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dce:	4b85      	ldr	r3, [pc, #532]	; (8001fe4 <GPS+0x5bc>)
 8001dd0:	edc3 7a00 	vstr	s15, [r3]

	  				degrees = trunc(longitude / 100.0f);
 8001dd4:	4b84      	ldr	r3, [pc, #528]	; (8001fe8 <GPS+0x5c0>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001ff0 <GPS+0x5c8>
 8001dde:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001de2:	ee16 0a90 	vmov	r0, s13
 8001de6:	f7fe fbb7 	bl	8000558 <__aeabi_f2d>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	ec43 2b10 	vmov	d0, r2, r3
 8001df2:	f00c fa03 	bl	800e1fc <trunc>
 8001df6:	ec53 2b10 	vmov	r2, r3, d0
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe fefb 	bl	8000bf8 <__aeabi_d2f>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
	  				minutes = longitude - (degrees * 100.0f);
 8001e08:	4b77      	ldr	r3, [pc, #476]	; (8001fe8 <GPS+0x5c0>)
 8001e0a:	ed93 7a00 	vldr	s14, [r3]
 8001e0e:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 8001e12:	eddf 6a77 	vldr	s13, [pc, #476]	; 8001ff0 <GPS+0x5c8>
 8001e16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e1e:	edc7 7add 	vstr	s15, [r7, #884]	; 0x374
	  				longitude = degrees + (minutes / 60.0f);
 8001e22:	edd7 7add 	vldr	s15, [r7, #884]	; 0x374
 8001e26:	eddf 6a73 	vldr	s13, [pc, #460]	; 8001ff4 <GPS+0x5cc>
 8001e2a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e2e:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 8001e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e36:	4b6c      	ldr	r3, [pc, #432]	; (8001fe8 <GPS+0x5c0>)
 8001e38:	edc3 7a00 	vstr	s15, [r3]


	  				token = strtok(lonRaw, ".");
 8001e3c:	496b      	ldr	r1, [pc, #428]	; (8001fec <GPS+0x5c4>)
 8001e3e:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8001e42:	f009 fabb 	bl	800b3bc <strtok>
 8001e46:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(lonDg, 0, sizeof(lonDg));
 8001e4a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e4e:	220a      	movs	r2, #10
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f007 ff8e 	bl	8009d74 <memset>
	  				memcpy(lonDg, token, strlen(token));
 8001e58:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 8001e5c:	f7fe f9c0 	bl	80001e0 <strlen>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e66:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f007 ff74 	bl	8009d58 <memcpy>

	  				token = strtok(NULL, ".");
 8001e70:	495e      	ldr	r1, [pc, #376]	; (8001fec <GPS+0x5c4>)
 8001e72:	2000      	movs	r0, #0
 8001e74:	f009 faa2 	bl	800b3bc <strtok>
 8001e78:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(lonMS, 0, sizeof(lonMS));
 8001e7c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e80:	220a      	movs	r2, #10
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f007 ff75 	bl	8009d74 <memset>
	  				memcpy(lonMS, token, strlen(token));
 8001e8a:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 8001e8e:	f7fe f9a7 	bl	80001e0 <strlen>
 8001e92:	4602      	mov	r2, r0
 8001e94:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e98:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f007 ff5b 	bl	8009d58 <memcpy>

	  				memset(txBuffer,0,sizeof(txBuffer));
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	22c8      	movs	r2, #200	; 0xc8
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f007 ff62 	bl	8009d74 <memset>
	  				sprintf(txBuffer, "latDg : %s latMs : %s lonDg : %s lonMs : %s\n",latDg,latMS,lonDg,lonMS );
 8001eb0:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001eb4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001eb8:	f107 000c 	add.w	r0, r7, #12
 8001ebc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	494b      	ldr	r1, [pc, #300]	; (8001ff8 <GPS+0x5d0>)
 8001ecc:	f008 fbc4 	bl	800a658 <siprintf>
 8001ed0:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	b29a      	uxth	r2, r3
	  //		  HAL_UART_Transmit(&huart2, (unsigned char *)txBuffer, sizeof(txBuffer), 100);

	  					  //converting the UTC time in the hh:mm:ss format
	  				memcpy(hH, &utcRaw[0], 2);
 8001ed8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001edc:	801a      	strh	r2, [r3, #0]
	  				hH[2] = '\0';
 8001ede:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	709a      	strb	r2, [r3, #2]

	  				memcpy(mM, &utcRaw[2], 2);
 8001ee6:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8001eea:	3302      	adds	r3, #2
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ef4:	801a      	strh	r2, [r3, #0]
	  				mM[2] = '\0';
 8001ef6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001efa:	2200      	movs	r2, #0
 8001efc:	709a      	strb	r2, [r3, #2]

	  				memcpy(sS, &utcRaw[4], 2);
 8001efe:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8001f02:	3304      	adds	r3, #4
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f0c:	801a      	strh	r2, [r3, #0]
	  				sS[2] = '\0';
 8001f0e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f12:	2200      	movs	r2, #0
 8001f14:	709a      	strb	r2, [r3, #2]
//	  				float latDg_f = atof(latDg)/100.0;
//	  				float latMS_f = atof(latMS)/60.0;
//	  				float lonDg_f = atof(lonDg)/100.0;
//	  				float lonMS_f = atof(lonMS)/60.0;

	  				strcpy(strUTC, hH);
 8001f16:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4837      	ldr	r0, [pc, #220]	; (8001ffc <GPS+0x5d4>)
 8001f1e:	f008 fbd7 	bl	800a6d0 <strcpy>
	  				strcat(strUTC, ":");
 8001f22:	4836      	ldr	r0, [pc, #216]	; (8001ffc <GPS+0x5d4>)
 8001f24:	f7fe f95c 	bl	80001e0 <strlen>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b33      	ldr	r3, [pc, #204]	; (8001ffc <GPS+0x5d4>)
 8001f2e:	4413      	add	r3, r2
 8001f30:	4933      	ldr	r1, [pc, #204]	; (8002000 <GPS+0x5d8>)
 8001f32:	461a      	mov	r2, r3
 8001f34:	460b      	mov	r3, r1
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	8013      	strh	r3, [r2, #0]
	  				strcat(strUTC, mM);
 8001f3a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f3e:	4619      	mov	r1, r3
 8001f40:	482e      	ldr	r0, [pc, #184]	; (8001ffc <GPS+0x5d4>)
 8001f42:	f008 fba9 	bl	800a698 <strcat>
	  				strcat(strUTC, ":");
 8001f46:	482d      	ldr	r0, [pc, #180]	; (8001ffc <GPS+0x5d4>)
 8001f48:	f7fe f94a 	bl	80001e0 <strlen>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <GPS+0x5d4>)
 8001f52:	4413      	add	r3, r2
 8001f54:	492a      	ldr	r1, [pc, #168]	; (8002000 <GPS+0x5d8>)
 8001f56:	461a      	mov	r2, r3
 8001f58:	460b      	mov	r3, r1
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	8013      	strh	r3, [r2, #0]
	  				strcat(strUTC, sS);
 8001f5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f62:	4619      	mov	r1, r3
 8001f64:	4825      	ldr	r0, [pc, #148]	; (8001ffc <GPS+0x5d4>)
 8001f66:	f008 fb97 	bl	800a698 <strcat>
	  				strUTC[8] = '\0';
 8001f6a:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <GPS+0x5d4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	721a      	strb	r2, [r3, #8]

	  				memset(txBuffer,0,sizeof(txBuffer));
 8001f70:	f107 030c 	add.w	r3, r7, #12
 8001f74:	22c8      	movs	r2, #200	; 0xc8
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f007 fefb 	bl	8009d74 <memset>
	  				sprintf(txBuffer, "Latitude : %f Longitude : %f UTC : %s\n",latitude,longitude, strUTC);
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <GPS+0x5bc>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fae8 	bl	8000558 <__aeabi_f2d>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	460d      	mov	r5, r1
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <GPS+0x5c0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fae1 	bl	8000558 <__aeabi_f2d>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	f107 000c 	add.w	r0, r7, #12
 8001f9e:	4917      	ldr	r1, [pc, #92]	; (8001ffc <GPS+0x5d4>)
 8001fa0:	9102      	str	r1, [sp, #8]
 8001fa2:	e9cd 2300 	strd	r2, r3, [sp]
 8001fa6:	4622      	mov	r2, r4
 8001fa8:	462b      	mov	r3, r5
 8001faa:	4916      	ldr	r1, [pc, #88]	; (8002004 <GPS+0x5dc>)
 8001fac:	f008 fb54 	bl	800a658 <siprintf>
	  				HAL_UART_Transmit(&huart2, (unsigned char *)txBuffer, sizeof(txBuffer), 100);
 8001fb0:	f107 010c 	add.w	r1, r7, #12
 8001fb4:	2364      	movs	r3, #100	; 0x64
 8001fb6:	22c8      	movs	r2, #200	; 0xc8
 8001fb8:	4813      	ldr	r0, [pc, #76]	; (8002008 <GPS+0x5e0>)
 8001fba:	f004 f8e8 	bl	800618e <HAL_UART_Transmit>
	  	while ((token = strsep(&string, "\n")) != NULL) {
 8001fbe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001fc2:	4912      	ldr	r1, [pc, #72]	; (800200c <GPS+0x5e4>)
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f008 fba8 	bl	800a71a <strsep>
 8001fca:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
 8001fce:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f47f ad71 	bne.w	8001aba <GPS+0x92>

	  			} //end of the chekcsum data verification
	  		} //end of %GPPGA Sentences selection
	  	}// end of splotting the buffstr by the "\n" delimiter with strsep() c function
	  	flag = 0;
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <GPS+0x5e8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
 8001fde:	e019      	b.n	8002014 <GPS+0x5ec>
 8001fe0:	0800e374 	.word	0x0800e374
 8001fe4:	20000208 	.word	0x20000208
 8001fe8:	2000020c 	.word	0x2000020c
 8001fec:	0800e388 	.word	0x0800e388
 8001ff0:	42c80000 	.word	0x42c80000
 8001ff4:	42700000 	.word	0x42700000
 8001ff8:	0800e38c 	.word	0x0800e38c
 8001ffc:	20000210 	.word	0x20000210
 8002000:	0800e3bc 	.word	0x0800e3bc
 8002004:	0800e3c0 	.word	0x0800e3c0
 8002008:	20004cf4 	.word	0x20004cf4
 800200c:	0800e3e8 	.word	0x0800e3e8
 8002010:	20000218 	.word	0x20000218
	  }
	  osDelay(500);
 8002014:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002018:	f005 f8f8 	bl	800720c <osDelay>
  {
 800201c:	e51b      	b.n	8001a56 <GPS+0x2e>
 800201e:	bf00      	nop

08002020 <AnalogReading>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AnalogReading */
void AnalogReading(void *argument)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AnalogReading */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002028:	2001      	movs	r0, #1
 800202a:	f005 f8ef 	bl	800720c <osDelay>
 800202e:	e7fb      	b.n	8002028 <AnalogReading+0x8>

08002030 <RFID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RFID */
void RFID(void *argument)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b0a5      	sub	sp, #148	; 0x94
 8002034:	af02      	add	r7, sp, #8
 8002036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RFID */
	char txBuffer [100] ={};
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	2260      	movs	r2, #96	; 0x60
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f007 fe95 	bl	8009d74 <memset>
	u_char status, checksum1, cardstr[MAX_LEN];
	MFRC522_Init();
 800204a:	f7ff f887 	bl	800115c <MFRC522_Init>
	status = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	while (status == 0){
 8002054:	e018      	b.n	8002088 <RFID+0x58>
		status = Read_MFRC522(VersionReg);
 8002056:	2037      	movs	r0, #55	; 0x37
 8002058:	f7ff f800 	bl	800105c <Read_MFRC522>
 800205c:	4603      	mov	r3, r0
 800205e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		sprintf(txBuffer,"Running RC522 ver :%x\n", status);
 8002062:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002066:	f107 0318 	add.w	r3, r7, #24
 800206a:	4950      	ldr	r1, [pc, #320]	; (80021ac <RFID+0x17c>)
 800206c:	4618      	mov	r0, r3
 800206e:	f008 faf3 	bl	800a658 <siprintf>
		HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
 8002072:	f107 0118 	add.w	r1, r7, #24
 8002076:	f241 3388 	movw	r3, #5000	; 0x1388
 800207a:	2264      	movs	r2, #100	; 0x64
 800207c:	484c      	ldr	r0, [pc, #304]	; (80021b0 <RFID+0x180>)
 800207e:	f004 f886 	bl	800618e <HAL_UART_Transmit>
		osDelay(100);
 8002082:	2064      	movs	r0, #100	; 0x64
 8002084:	f005 f8c2 	bl	800720c <osDelay>
	while (status == 0){
 8002088:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0e2      	beq.n	8002056 <RFID+0x26>
	}
	//Printing to PC
	memset(txBuffer,0,sizeof(txBuffer));
 8002090:	f107 0318 	add.w	r3, r7, #24
 8002094:	2264      	movs	r2, #100	; 0x64
 8002096:	2100      	movs	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f007 fe6b 	bl	8009d74 <memset>
	status = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	osDelay(100);
 80020a4:	2064      	movs	r0, #100	; 0x64
 80020a6:	f005 f8b1 	bl	800720c <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  status = MFRC522_Request(PICC_REQIDL, cardstr);
 80020aa:	f107 0308 	add.w	r3, r7, #8
 80020ae:	4619      	mov	r1, r3
 80020b0:	2026      	movs	r0, #38	; 0x26
 80020b2:	f7ff f87f 	bl	80011b4 <MFRC522_Request>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	  if(status == MI_OK){
 80020bc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d160      	bne.n	8002186 <RFID+0x156>
		  sprintf(txBuffer,"Card detected ..\n");
 80020c4:	f107 0318 	add.w	r3, r7, #24
 80020c8:	493a      	ldr	r1, [pc, #232]	; (80021b4 <RFID+0x184>)
 80020ca:	4618      	mov	r0, r3
 80020cc:	f008 fac4 	bl	800a658 <siprintf>
		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 80020d0:	f107 0118 	add.w	r1, r7, #24
 80020d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020d8:	2264      	movs	r2, #100	; 0x64
 80020da:	4835      	ldr	r0, [pc, #212]	; (80021b0 <RFID+0x180>)
 80020dc:	f004 f857 	bl	800618e <HAL_UART_Transmit>
		  sprintf(txBuffer,"Card Type : %x %x %x\n", cardstr[0],cardstr[1],cardstr[2]);
 80020e0:	7a3b      	ldrb	r3, [r7, #8]
 80020e2:	461a      	mov	r2, r3
 80020e4:	7a7b      	ldrb	r3, [r7, #9]
 80020e6:	4619      	mov	r1, r3
 80020e8:	7abb      	ldrb	r3, [r7, #10]
 80020ea:	f107 0018 	add.w	r0, r7, #24
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	460b      	mov	r3, r1
 80020f2:	4931      	ldr	r1, [pc, #196]	; (80021b8 <RFID+0x188>)
 80020f4:	f008 fab0 	bl	800a658 <siprintf>
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
		  memset(txBuffer,0,sizeof(txBuffer));
 80020f8:	f107 0318 	add.w	r3, r7, #24
 80020fc:	2264      	movs	r2, #100	; 0x64
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f007 fe37 	bl	8009d74 <memset>

		  //Anti-collision, return card serial number == 4 bytes
		  status = MFRC522_Anticoll(cardstr);
 8002106:	f107 0308 	add.w	r3, r7, #8
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff f940 	bl	8001390 <MFRC522_Anticoll>
 8002110:	4603      	mov	r3, r0
 8002112:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  if (status == MI_OK){
 8002116:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800211a:	2b00      	cmp	r3, #0
 800211c:	d142      	bne.n	80021a4 <RFID+0x174>
			  checksum1 = cardstr[0] ^ cardstr[1] ^ cardstr[2] ^ cardstr[3];
 800211e:	7a3a      	ldrb	r2, [r7, #8]
 8002120:	7a7b      	ldrb	r3, [r7, #9]
 8002122:	4053      	eors	r3, r2
 8002124:	b2da      	uxtb	r2, r3
 8002126:	7abb      	ldrb	r3, [r7, #10]
 8002128:	4053      	eors	r3, r2
 800212a:	b2da      	uxtb	r2, r3
 800212c:	7afb      	ldrb	r3, [r7, #11]
 800212e:	4053      	eors	r3, r2
 8002130:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  for(int i = 0; i <4 ;i++){
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800213a:	e010      	b.n	800215e <RFID+0x12e>
				  UID[i]=cardstr[i];
 800213c:	f107 0208 	add.w	r2, r7, #8
 8002140:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002144:	4413      	add	r3, r2
 8002146:	7819      	ldrb	r1, [r3, #0]
 8002148:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <RFID+0x18c>)
 800214a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800214e:	4413      	add	r3, r2
 8002150:	460a      	mov	r2, r1
 8002152:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i <4 ;i++){
 8002154:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002158:	3301      	adds	r3, #1
 800215a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800215e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002162:	2b03      	cmp	r3, #3
 8002164:	ddea      	ble.n	800213c <RFID+0x10c>
			  }
			  sprintf(txBuffer,"UID: %x %x %x %x\n\r",(u_char)cardstr[0], (u_char)cardstr[1],(u_char)cardstr[2],(u_char)cardstr[3]);
 8002166:	7a3b      	ldrb	r3, [r7, #8]
 8002168:	4619      	mov	r1, r3
 800216a:	7a7b      	ldrb	r3, [r7, #9]
 800216c:	461c      	mov	r4, r3
 800216e:	7abb      	ldrb	r3, [r7, #10]
 8002170:	7afa      	ldrb	r2, [r7, #11]
 8002172:	f107 0018 	add.w	r0, r7, #24
 8002176:	9201      	str	r2, [sp, #4]
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	4623      	mov	r3, r4
 800217c:	460a      	mov	r2, r1
 800217e:	4910      	ldr	r1, [pc, #64]	; (80021c0 <RFID+0x190>)
 8002180:	f008 fa6a 	bl	800a658 <siprintf>
 8002184:	e00e      	b.n	80021a4 <RFID+0x174>
//			  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
		  }
	  }
	  else {
		  memset(txBuffer,0,sizeof(txBuffer));
 8002186:	f107 0318 	add.w	r3, r7, #24
 800218a:	2264      	movs	r2, #100	; 0x64
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f007 fdf0 	bl	8009d74 <memset>
		  sprintf(txBuffer,"Status :%x\n", status);
 8002194:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002198:	f107 0318 	add.w	r3, r7, #24
 800219c:	4909      	ldr	r1, [pc, #36]	; (80021c4 <RFID+0x194>)
 800219e:	4618      	mov	r0, r3
 80021a0:	f008 fa5a 	bl	800a658 <siprintf>
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
		  //		  sprintf(txBuffer,"Finding ..\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
	  }
    osDelay(100);
 80021a4:	2064      	movs	r0, #100	; 0x64
 80021a6:	f005 f831 	bl	800720c <osDelay>
	  status = MFRC522_Request(PICC_REQIDL, cardstr);
 80021aa:	e77e      	b.n	80020aa <RFID+0x7a>
 80021ac:	0800e3ec 	.word	0x0800e3ec
 80021b0:	20004cf4 	.word	0x20004cf4
 80021b4:	0800e404 	.word	0x0800e404
 80021b8:	0800e418 	.word	0x0800e418
 80021bc:	20000204 	.word	0x20000204
 80021c0:	0800e430 	.word	0x0800e430
 80021c4:	0800e444 	.word	0x0800e444

080021c8 <SDCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SDCard */
void SDCard(void *argument)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDCard */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80021d0:	2001      	movs	r0, #1
 80021d2:	f005 f81b 	bl	800720c <osDelay>
 80021d6:	e7fb      	b.n	80021d0 <SDCard+0x8>

080021d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021ea:	f000 fc2f 	bl	8002a4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40010000 	.word	0x40010000

080021fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002200:	b672      	cpsid	i
}
 8002202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002204:	e7fe      	b.n	8002204 <Error_Handler+0x8>

08002206 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002206:	b580      	push	{r7, lr}
 8002208:	b088      	sub	sp, #32
 800220a:	af04      	add	r7, sp, #16
 800220c:	6078      	str	r0, [r7, #4]
    uint8_t registerContents;


    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_DEVID_REG, 1, &check, 1, i2c_timeout);
 800220e:	2364      	movs	r3, #100	; 0x64
 8002210:	9302      	str	r3, [sp, #8]
 8002212:	2301      	movs	r3, #1
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	f107 030f 	add.w	r3, r7, #15
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2301      	movs	r3, #1
 800221e:	2200      	movs	r2, #0
 8002220:	21a6      	movs	r1, #166	; 0xa6
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f001 fd16 	bl	8003c54 <HAL_I2C_Mem_Read>
    if (check == 0xE5)  // 0xE5 will be returned by the sensor if everything goes well
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	2be5      	cmp	r3, #229	; 0xe5
 800222c:	d15e      	bne.n	80022ec <MPU6050_Init+0xe6>
    {
        // power management register 0X2D we should write all 0's to wake the sensor up
        Data = 0x0;
 800222e:	2300      	movs	r3, #0
 8002230:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 8002232:	2364      	movs	r3, #100	; 0x64
 8002234:	9302      	str	r3, [sp, #8]
 8002236:	2301      	movs	r3, #1
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	f107 030e 	add.w	r3, r7, #14
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2301      	movs	r3, #1
 8002242:	222d      	movs	r2, #45	; 0x2d
 8002244:	21a6      	movs	r1, #166	; 0xa6
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f001 fc0a 	bl	8003a60 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 800224c:	2064      	movs	r0, #100	; 0x64
 800224e:	f000 fc1d 	bl	8002a8c <HAL_Delay>

        // Set DATA FORMAT
        Data = 0x0B;
 8002252:	230b      	movs	r3, #11
 8002254:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_DATA_FORMAT_REG, 1, &Data, 1, i2c_timeout);
 8002256:	2364      	movs	r3, #100	; 0x64
 8002258:	9302      	str	r3, [sp, #8]
 800225a:	2301      	movs	r3, #1
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	f107 030e 	add.w	r3, r7, #14
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	2301      	movs	r3, #1
 8002266:	2231      	movs	r2, #49	; 0x31
 8002268:	21a6      	movs	r1, #166	; 0xa6
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f001 fbf8 	bl	8003a60 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8002270:	2064      	movs	r0, #100	; 0x64
 8002272:	f000 fc0b 	bl	8002a8c <HAL_Delay>

        // Get the current register contents, so we don't clobber the power bit
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 8002276:	2364      	movs	r3, #100	; 0x64
 8002278:	9302      	str	r3, [sp, #8]
 800227a:	2301      	movs	r3, #1
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	f107 030d 	add.w	r3, r7, #13
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2301      	movs	r3, #1
 8002286:	222c      	movs	r2, #44	; 0x2c
 8002288:	21a6      	movs	r1, #166	; 0xa6
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f001 fce2 	bl	8003c54 <HAL_I2C_Mem_Read>
        registerContents &= 0x10;
 8002290:	7b7b      	ldrb	r3, [r7, #13]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	b2db      	uxtb	r3, r3
 8002298:	737b      	strb	r3, [r7, #13]
        registerContents |= ADXL345_3200HZ;
 800229a:	7b7b      	ldrb	r3, [r7, #13]
 800229c:	f043 030f 	orr.w	r3, r3, #15
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	737b      	strb	r3, [r7, #13]

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 80022a4:	2364      	movs	r3, #100	; 0x64
 80022a6:	9302      	str	r3, [sp, #8]
 80022a8:	2301      	movs	r3, #1
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	f107 030d 	add.w	r3, r7, #13
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2301      	movs	r3, #1
 80022b4:	222c      	movs	r2, #44	; 0x2c
 80022b6:	21a6      	movs	r1, #166	; 0xa6
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f001 fbd1 	bl	8003a60 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80022be:	2064      	movs	r0, #100	; 0x64
 80022c0:	f000 fbe4 	bl	8002a8c <HAL_Delay>

        // Set Power Control to Measurement mode
        Data = 0x08;
 80022c4:	2308      	movs	r3, #8
 80022c6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 80022c8:	2364      	movs	r3, #100	; 0x64
 80022ca:	9302      	str	r3, [sp, #8]
 80022cc:	2301      	movs	r3, #1
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	f107 030e 	add.w	r3, r7, #14
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2301      	movs	r3, #1
 80022d8:	222d      	movs	r2, #45	; 0x2d
 80022da:	21a6      	movs	r1, #166	; 0xa6
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f001 fbbf 	bl	8003a60 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80022e2:	2064      	movs	r0, #100	; 0x64
 80022e4:	f000 fbd2 	bl	8002a8c <HAL_Delay>

        return check;
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	e000      	b.n	80022ee <MPU6050_Init+0xe8>
    }
    return 1;
 80022ec:	2301      	movs	r3, #1
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <MPU6050_Read_Accel>:
	}
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, address, 1, &offset, 1, i2c_timeout);

	return offset;
}
void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af04      	add	r7, sp, #16
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8002302:	2364      	movs	r3, #100	; 0x64
 8002304:	9302      	str	r3, [sp, #8]
 8002306:	2306      	movs	r3, #6
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	f107 0308 	add.w	r3, r7, #8
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	2301      	movs	r3, #1
 8002312:	2232      	movs	r2, #50	; 0x32
 8002314:	21a6      	movs	r1, #166	; 0xa6
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f001 fc9c 	bl	8003c54 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[1] << 8 | Rec_Data[0]);
 800231c:	7a7b      	ldrb	r3, [r7, #9]
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	b21a      	sxth	r2, r3
 8002322:	7a3b      	ldrb	r3, [r7, #8]
 8002324:	b21b      	sxth	r3, r3
 8002326:	4313      	orrs	r3, r2
 8002328:	b21a      	sxth	r2, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[3] << 8 | Rec_Data[2]);
 800232e:	7afb      	ldrb	r3, [r7, #11]
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	b21a      	sxth	r2, r3
 8002334:	7abb      	ldrb	r3, [r7, #10]
 8002336:	b21b      	sxth	r3, r3
 8002338:	4313      	orrs	r3, r2
 800233a:	b21a      	sxth	r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[5] << 8 | Rec_Data[4]);
 8002340:	7b7b      	ldrb	r3, [r7, #13]
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	b21a      	sxth	r2, r3
 8002346:	7b3b      	ldrb	r3, [r7, #12]
 8002348:	b21b      	sxth	r3, r3
 800234a:	4313      	orrs	r3, r2
 800234c:	b21a      	sxth	r2, r3
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW * scale_factor / GRAVITY;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002358:	ee07 3a90 	vmov	s15, r3
 800235c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002360:	4b27      	ldr	r3, [pc, #156]	; (8002400 <MPU6050_Read_Accel+0x108>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236a:	ee17 0a90 	vmov	r0, s15
 800236e:	f7fe f8f3 	bl	8000558 <__aeabi_f2d>
 8002372:	a321      	add	r3, pc, #132	; (adr r3, 80023f8 <MPU6050_Read_Accel+0x100>)
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	f7fe fa70 	bl	800085c <__aeabi_ddiv>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	6839      	ldr	r1, [r7, #0]
 8002382:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW * scale_factor / GRAVITY;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800238c:	ee07 3a90 	vmov	s15, r3
 8002390:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002394:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <MPU6050_Read_Accel+0x108>)
 8002396:	edd3 7a00 	vldr	s15, [r3]
 800239a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239e:	ee17 0a90 	vmov	r0, s15
 80023a2:	f7fe f8d9 	bl	8000558 <__aeabi_f2d>
 80023a6:	a314      	add	r3, pc, #80	; (adr r3, 80023f8 <MPU6050_Read_Accel+0x100>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe fa56 	bl	800085c <__aeabi_ddiv>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	6839      	ldr	r1, [r7, #0]
 80023b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW * scale_factor / GRAVITY;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023c0:	ee07 3a90 	vmov	s15, r3
 80023c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023c8:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <MPU6050_Read_Accel+0x108>)
 80023ca:	edd3 7a00 	vldr	s15, [r3]
 80023ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d2:	ee17 0a90 	vmov	r0, s15
 80023d6:	f7fe f8bf 	bl	8000558 <__aeabi_f2d>
 80023da:	a307      	add	r3, pc, #28	; (adr r3, 80023f8 <MPU6050_Read_Accel+0x100>)
 80023dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e0:	f7fe fa3c 	bl	800085c <__aeabi_ddiv>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	6839      	ldr	r1, [r7, #0]
 80023ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	3a92a305 	.word	0x3a92a305
 80023fc:	40239d01 	.word	0x40239d01
 8002400:	20000000 	.word	0x20000000

08002404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_MspInit+0x54>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	4a11      	ldr	r2, [pc, #68]	; (8002458 <HAL_MspInit+0x54>)
 8002414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002418:	6453      	str	r3, [r2, #68]	; 0x44
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_MspInit+0x54>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_MspInit+0x54>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <HAL_MspInit+0x54>)
 8002430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002434:	6413      	str	r3, [r2, #64]	; 0x40
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <HAL_MspInit+0x54>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	210f      	movs	r1, #15
 8002446:	f06f 0001 	mvn.w	r0, #1
 800244a:	f000 fbfb 	bl	8002c44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800

0800245c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <HAL_I2C_MspInit+0x84>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d12b      	bne.n	80024d6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <HAL_I2C_MspInit+0x88>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a17      	ldr	r2, [pc, #92]	; (80024e4 <HAL_I2C_MspInit+0x88>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <HAL_I2C_MspInit+0x88>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800249a:	23c0      	movs	r3, #192	; 0xc0
 800249c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800249e:	2312      	movs	r3, #18
 80024a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a2:	2301      	movs	r3, #1
 80024a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a6:	2303      	movs	r3, #3
 80024a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024aa:	2304      	movs	r3, #4
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	480c      	ldr	r0, [pc, #48]	; (80024e8 <HAL_I2C_MspInit+0x8c>)
 80024b6:	f000 fff1 	bl	800349c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_I2C_MspInit+0x88>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <HAL_I2C_MspInit+0x88>)
 80024c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_I2C_MspInit+0x88>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024d6:	bf00      	nop
 80024d8:	3728      	adds	r7, #40	; 0x28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40005400 	.word	0x40005400
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020400 	.word	0x40020400

080024ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a19      	ldr	r2, [pc, #100]	; (8002570 <HAL_SPI_MspInit+0x84>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d12b      	bne.n	8002566 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <HAL_SPI_MspInit+0x88>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	4a17      	ldr	r2, [pc, #92]	; (8002574 <HAL_SPI_MspInit+0x88>)
 8002518:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800251c:	6453      	str	r3, [r2, #68]	; 0x44
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_SPI_MspInit+0x88>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_SPI_MspInit+0x88>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a10      	ldr	r2, [pc, #64]	; (8002574 <HAL_SPI_MspInit+0x88>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <HAL_SPI_MspInit+0x88>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002546:	23e0      	movs	r3, #224	; 0xe0
 8002548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800254e:	2301      	movs	r3, #1
 8002550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002552:	2303      	movs	r3, #3
 8002554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002556:	2305      	movs	r3, #5
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	4619      	mov	r1, r3
 8002560:	4805      	ldr	r0, [pc, #20]	; (8002578 <HAL_SPI_MspInit+0x8c>)
 8002562:	f000 ff9b 	bl	800349c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002566:	bf00      	nop
 8002568:	3728      	adds	r7, #40	; 0x28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40013000 	.word	0x40013000
 8002574:	40023800 	.word	0x40023800
 8002578:	40020000 	.word	0x40020000

0800257c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08c      	sub	sp, #48	; 0x30
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a4e      	ldr	r2, [pc, #312]	; (80026d4 <HAL_UART_MspInit+0x158>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d164      	bne.n	8002668 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	4b4d      	ldr	r3, [pc, #308]	; (80026d8 <HAL_UART_MspInit+0x15c>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a4c      	ldr	r2, [pc, #304]	; (80026d8 <HAL_UART_MspInit+0x15c>)
 80025a8:	f043 0310 	orr.w	r3, r3, #16
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b4a      	ldr	r3, [pc, #296]	; (80026d8 <HAL_UART_MspInit+0x15c>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	4b46      	ldr	r3, [pc, #280]	; (80026d8 <HAL_UART_MspInit+0x15c>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a45      	ldr	r2, [pc, #276]	; (80026d8 <HAL_UART_MspInit+0x15c>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b43      	ldr	r3, [pc, #268]	; (80026d8 <HAL_UART_MspInit+0x15c>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025e8:	2307      	movs	r3, #7
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ec:	f107 031c 	add.w	r3, r7, #28
 80025f0:	4619      	mov	r1, r3
 80025f2:	483a      	ldr	r0, [pc, #232]	; (80026dc <HAL_UART_MspInit+0x160>)
 80025f4:	f000 ff52 	bl	800349c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80025f8:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <HAL_UART_MspInit+0x164>)
 80025fa:	4a3a      	ldr	r2, [pc, #232]	; (80026e4 <HAL_UART_MspInit+0x168>)
 80025fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80025fe:	4b38      	ldr	r3, [pc, #224]	; (80026e0 <HAL_UART_MspInit+0x164>)
 8002600:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002604:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002606:	4b36      	ldr	r3, [pc, #216]	; (80026e0 <HAL_UART_MspInit+0x164>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800260c:	4b34      	ldr	r3, [pc, #208]	; (80026e0 <HAL_UART_MspInit+0x164>)
 800260e:	2200      	movs	r2, #0
 8002610:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002612:	4b33      	ldr	r3, [pc, #204]	; (80026e0 <HAL_UART_MspInit+0x164>)
 8002614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002618:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800261a:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <HAL_UART_MspInit+0x164>)
 800261c:	2200      	movs	r2, #0
 800261e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002620:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <HAL_UART_MspInit+0x164>)
 8002622:	2200      	movs	r2, #0
 8002624:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002626:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <HAL_UART_MspInit+0x164>)
 8002628:	f44f 7280 	mov.w	r2, #256	; 0x100
 800262c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800262e:	4b2c      	ldr	r3, [pc, #176]	; (80026e0 <HAL_UART_MspInit+0x164>)
 8002630:	2200      	movs	r2, #0
 8002632:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002634:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <HAL_UART_MspInit+0x164>)
 8002636:	2200      	movs	r2, #0
 8002638:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800263a:	4829      	ldr	r0, [pc, #164]	; (80026e0 <HAL_UART_MspInit+0x164>)
 800263c:	f000 fb2c 	bl	8002c98 <HAL_DMA_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002646:	f7ff fdd9 	bl	80021fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a24      	ldr	r2, [pc, #144]	; (80026e0 <HAL_UART_MspInit+0x164>)
 800264e:	639a      	str	r2, [r3, #56]	; 0x38
 8002650:	4a23      	ldr	r2, [pc, #140]	; (80026e0 <HAL_UART_MspInit+0x164>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2105      	movs	r1, #5
 800265a:	2025      	movs	r0, #37	; 0x25
 800265c:	f000 faf2 	bl	8002c44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002660:	2025      	movs	r0, #37	; 0x25
 8002662:	f000 fb0b 	bl	8002c7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002666:	e030      	b.n	80026ca <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1e      	ldr	r2, [pc, #120]	; (80026e8 <HAL_UART_MspInit+0x16c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d12b      	bne.n	80026ca <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <HAL_UART_MspInit+0x15c>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <HAL_UART_MspInit+0x15c>)
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_UART_MspInit+0x15c>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_UART_MspInit+0x15c>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a10      	ldr	r2, [pc, #64]	; (80026d8 <HAL_UART_MspInit+0x15c>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <HAL_UART_MspInit+0x15c>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026aa:	230c      	movs	r3, #12
 80026ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ba:	2307      	movs	r3, #7
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 031c 	add.w	r3, r7, #28
 80026c2:	4619      	mov	r1, r3
 80026c4:	4805      	ldr	r0, [pc, #20]	; (80026dc <HAL_UART_MspInit+0x160>)
 80026c6:	f000 fee9 	bl	800349c <HAL_GPIO_Init>
}
 80026ca:	bf00      	nop
 80026cc:	3730      	adds	r7, #48	; 0x30
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40011000 	.word	0x40011000
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40020000 	.word	0x40020000
 80026e0:	20004bf0 	.word	0x20004bf0
 80026e4:	40026440 	.word	0x40026440
 80026e8:	40004400 	.word	0x40004400

080026ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08c      	sub	sp, #48	; 0x30
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80026fc:	2200      	movs	r2, #0
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	2019      	movs	r0, #25
 8002702:	f000 fa9f 	bl	8002c44 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002706:	2019      	movs	r0, #25
 8002708:	f000 fab8 	bl	8002c7c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	4b1e      	ldr	r3, [pc, #120]	; (800278c <HAL_InitTick+0xa0>)
 8002712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002714:	4a1d      	ldr	r2, [pc, #116]	; (800278c <HAL_InitTick+0xa0>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6453      	str	r3, [r2, #68]	; 0x44
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_InitTick+0xa0>)
 800271e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002728:	f107 0210 	add.w	r2, r7, #16
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f002 fc84 	bl	8005040 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002738:	f002 fc6e 	bl	8005018 <HAL_RCC_GetPCLK2Freq>
 800273c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	4a13      	ldr	r2, [pc, #76]	; (8002790 <HAL_InitTick+0xa4>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	0c9b      	lsrs	r3, r3, #18
 8002748:	3b01      	subs	r3, #1
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <HAL_InitTick+0xa8>)
 800274e:	4a12      	ldr	r2, [pc, #72]	; (8002798 <HAL_InitTick+0xac>)
 8002750:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002752:	4b10      	ldr	r3, [pc, #64]	; (8002794 <HAL_InitTick+0xa8>)
 8002754:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002758:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800275a:	4a0e      	ldr	r2, [pc, #56]	; (8002794 <HAL_InitTick+0xa8>)
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <HAL_InitTick+0xa8>)
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_InitTick+0xa8>)
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800276c:	4809      	ldr	r0, [pc, #36]	; (8002794 <HAL_InitTick+0xa8>)
 800276e:	f003 fa41 	bl	8005bf4 <HAL_TIM_Base_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d104      	bne.n	8002782 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002778:	4806      	ldr	r0, [pc, #24]	; (8002794 <HAL_InitTick+0xa8>)
 800277a:	f003 fa95 	bl	8005ca8 <HAL_TIM_Base_Start_IT>
 800277e:	4603      	mov	r3, r0
 8002780:	e000      	b.n	8002784 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
}
 8002784:	4618      	mov	r0, r3
 8002786:	3730      	adds	r7, #48	; 0x30
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	431bde83 	.word	0x431bde83
 8002794:	20004d3c 	.word	0x20004d3c
 8002798:	40010000 	.word	0x40010000

0800279c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027a0:	e7fe      	b.n	80027a0 <NMI_Handler+0x4>

080027a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a6:	e7fe      	b.n	80027a6 <HardFault_Handler+0x4>

080027a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ac:	e7fe      	b.n	80027ac <MemManage_Handler+0x4>

080027ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b2:	e7fe      	b.n	80027b2 <BusFault_Handler+0x4>

080027b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <UsageFault_Handler+0x4>

080027ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80027ce:	f003 facd 	bl	8005d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20004d3c 	.word	0x20004d3c

080027dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <USART1_IRQHandler+0x10>)
 80027e2:	f003 fd97 	bl	8006314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20004c50 	.word	0x20004c50

080027f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <DMA2_Stream2_IRQHandler+0x10>)
 80027f6:	f000 fbe7 	bl	8002fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20004bf0 	.word	0x20004bf0

08002804 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
	return 1;
 8002808:	2301      	movs	r3, #1
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <_kill>:

int _kill(int pid, int sig)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800281e:	f007 fa71 	bl	8009d04 <__errno>
 8002822:	4603      	mov	r3, r0
 8002824:	2216      	movs	r2, #22
 8002826:	601a      	str	r2, [r3, #0]
	return -1;
 8002828:	f04f 33ff 	mov.w	r3, #4294967295
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <_exit>:

void _exit (int status)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800283c:	f04f 31ff 	mov.w	r1, #4294967295
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff ffe7 	bl	8002814 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002846:	e7fe      	b.n	8002846 <_exit+0x12>

08002848 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	e00a      	b.n	8002870 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800285a:	f3af 8000 	nop.w
 800285e:	4601      	mov	r1, r0
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	60ba      	str	r2, [r7, #8]
 8002866:	b2ca      	uxtb	r2, r1
 8002868:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	3301      	adds	r3, #1
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	429a      	cmp	r2, r3
 8002876:	dbf0      	blt.n	800285a <_read+0x12>
	}

return len;
 8002878:	687b      	ldr	r3, [r7, #4]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b086      	sub	sp, #24
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	e009      	b.n	80028a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	60ba      	str	r2, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	3301      	adds	r3, #1
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	dbf1      	blt.n	8002894 <_write+0x12>
	}
	return len;
 80028b0:	687b      	ldr	r3, [r7, #4]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_close>:

int _close(int file)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
	return -1;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028e2:	605a      	str	r2, [r3, #4]
	return 0;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_isatty>:

int _isatty(int file)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
	return 1;
 80028fa:	2301      	movs	r3, #1
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
	return 0;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800292c:	4a14      	ldr	r2, [pc, #80]	; (8002980 <_sbrk+0x5c>)
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <_sbrk+0x60>)
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <_sbrk+0x64>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <_sbrk+0x64>)
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <_sbrk+0x68>)
 8002944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <_sbrk+0x64>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	429a      	cmp	r2, r3
 8002952:	d207      	bcs.n	8002964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002954:	f007 f9d6 	bl	8009d04 <__errno>
 8002958:	4603      	mov	r3, r0
 800295a:	220c      	movs	r2, #12
 800295c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295
 8002962:	e009      	b.n	8002978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <_sbrk+0x64>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800296a:	4b07      	ldr	r3, [pc, #28]	; (8002988 <_sbrk+0x64>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	4a05      	ldr	r2, [pc, #20]	; (8002988 <_sbrk+0x64>)
 8002974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002976:	68fb      	ldr	r3, [r7, #12]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20018000 	.word	0x20018000
 8002984:	00000400 	.word	0x00000400
 8002988:	2000021c 	.word	0x2000021c
 800298c:	20004dd8 	.word	0x20004dd8

08002990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <SystemInit+0x20>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	4a05      	ldr	r2, [pc, #20]	; (80029b0 <SystemInit+0x20>)
 800299c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029b8:	480d      	ldr	r0, [pc, #52]	; (80029f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029ba:	490e      	ldr	r1, [pc, #56]	; (80029f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029bc:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c0:	e002      	b.n	80029c8 <LoopCopyDataInit>

080029c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029c6:	3304      	adds	r3, #4

080029c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029cc:	d3f9      	bcc.n	80029c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ce:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029d0:	4c0b      	ldr	r4, [pc, #44]	; (8002a00 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d4:	e001      	b.n	80029da <LoopFillZerobss>

080029d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d8:	3204      	adds	r2, #4

080029da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029dc:	d3fb      	bcc.n	80029d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029de:	f7ff ffd7 	bl	8002990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029e2:	f007 f995 	bl	8009d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029e6:	f7fe fd33 	bl	8001450 <main>
  bx  lr    
 80029ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80029f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80029f8:	0800ea78 	.word	0x0800ea78
  ldr r2, =_sbss
 80029fc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002a00:	20004dd8 	.word	0x20004dd8

08002a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a04:	e7fe      	b.n	8002a04 <ADC_IRQHandler>
	...

08002a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <HAL_Init+0x40>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0d      	ldr	r2, [pc, #52]	; (8002a48 <HAL_Init+0x40>)
 8002a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_Init+0x40>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <HAL_Init+0x40>)
 8002a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <HAL_Init+0x40>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <HAL_Init+0x40>)
 8002a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a30:	2003      	movs	r0, #3
 8002a32:	f000 f8fc 	bl	8002c2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a36:	2000      	movs	r0, #0
 8002a38:	f7ff fe58 	bl	80026ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a3c:	f7ff fce2 	bl	8002404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40023c00 	.word	0x40023c00

08002a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_IncTick+0x20>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_IncTick+0x24>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <HAL_IncTick+0x24>)
 8002a5e:	6013      	str	r3, [r2, #0]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	2000000c 	.word	0x2000000c
 8002a70:	20004d84 	.word	0x20004d84

08002a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return uwTick;
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <HAL_GetTick+0x14>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20004d84 	.word	0x20004d84

08002a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a94:	f7ff ffee 	bl	8002a74 <HAL_GetTick>
 8002a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa4:	d005      	beq.n	8002ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <HAL_Delay+0x44>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ab2:	bf00      	nop
 8002ab4:	f7ff ffde 	bl	8002a74 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d8f7      	bhi.n	8002ab4 <HAL_Delay+0x28>
  {
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	2000000c 	.word	0x2000000c

08002ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af0:	4013      	ands	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b06:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <__NVIC_SetPriorityGrouping+0x44>)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	60d3      	str	r3, [r2, #12]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <__NVIC_GetPriorityGrouping+0x18>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	f003 0307 	and.w	r3, r3, #7
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	db0b      	blt.n	8002b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	f003 021f 	and.w	r2, r3, #31
 8002b50:	4907      	ldr	r1, [pc, #28]	; (8002b70 <__NVIC_EnableIRQ+0x38>)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	2001      	movs	r0, #1
 8002b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	e000e100 	.word	0xe000e100

08002b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	6039      	str	r1, [r7, #0]
 8002b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	db0a      	blt.n	8002b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	490c      	ldr	r1, [pc, #48]	; (8002bc0 <__NVIC_SetPriority+0x4c>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	0112      	lsls	r2, r2, #4
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	440b      	add	r3, r1
 8002b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b9c:	e00a      	b.n	8002bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4908      	ldr	r1, [pc, #32]	; (8002bc4 <__NVIC_SetPriority+0x50>)
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	3b04      	subs	r3, #4
 8002bac:	0112      	lsls	r2, r2, #4
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	761a      	strb	r2, [r3, #24]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000e100 	.word	0xe000e100
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f1c3 0307 	rsb	r3, r3, #7
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	bf28      	it	cs
 8002be6:	2304      	movcs	r3, #4
 8002be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3304      	adds	r3, #4
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d902      	bls.n	8002bf8 <NVIC_EncodePriority+0x30>
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3b03      	subs	r3, #3
 8002bf6:	e000      	b.n	8002bfa <NVIC_EncodePriority+0x32>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43da      	mvns	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c10:	f04f 31ff 	mov.w	r1, #4294967295
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	43d9      	mvns	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	4313      	orrs	r3, r2
         );
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3724      	adds	r7, #36	; 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ff4c 	bl	8002ad4 <__NVIC_SetPriorityGrouping>
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c56:	f7ff ff61 	bl	8002b1c <__NVIC_GetPriorityGrouping>
 8002c5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	6978      	ldr	r0, [r7, #20]
 8002c62:	f7ff ffb1 	bl	8002bc8 <NVIC_EncodePriority>
 8002c66:	4602      	mov	r2, r0
 8002c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff ff80 	bl	8002b74 <__NVIC_SetPriority>
}
 8002c74:	bf00      	nop
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff ff54 	bl	8002b38 <__NVIC_EnableIRQ>
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ca4:	f7ff fee6 	bl	8002a74 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e099      	b.n	8002de8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd4:	e00f      	b.n	8002cf6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cd6:	f7ff fecd 	bl	8002a74 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	d908      	bls.n	8002cf6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2203      	movs	r2, #3
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e078      	b.n	8002de8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1e8      	bne.n	8002cd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4b38      	ldr	r3, [pc, #224]	; (8002df0 <HAL_DMA_Init+0x158>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d107      	bne.n	8002d60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f023 0307 	bic.w	r3, r3, #7
 8002d76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d117      	bne.n	8002dba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00e      	beq.n	8002dba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fb01 	bl	80033a4 <DMA_CheckFifoParam>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2240      	movs	r2, #64	; 0x40
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002db6:	2301      	movs	r3, #1
 8002db8:	e016      	b.n	8002de8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fab8 	bl	8003338 <DMA_CalcBaseAndBitshift>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	223f      	movs	r2, #63	; 0x3f
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	f010803f 	.word	0xf010803f

08002df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_DMA_Start_IT+0x26>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e040      	b.n	8002e9c <HAL_DMA_Start_IT+0xa8>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d12f      	bne.n	8002e8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2202      	movs	r2, #2
 8002e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fa4a 	bl	80032dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4c:	223f      	movs	r2, #63	; 0x3f
 8002e4e:	409a      	lsls	r2, r3
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0216 	orr.w	r2, r2, #22
 8002e62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d007      	beq.n	8002e7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0208 	orr.w	r2, r2, #8
 8002e7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	e005      	b.n	8002e9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e96:	2302      	movs	r3, #2
 8002e98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002eb2:	f7ff fddf 	bl	8002a74 <HAL_GetTick>
 8002eb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d008      	beq.n	8002ed6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2280      	movs	r2, #128	; 0x80
 8002ec8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e052      	b.n	8002f7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0216 	bic.w	r2, r2, #22
 8002ee4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ef4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d103      	bne.n	8002f06 <HAL_DMA_Abort+0x62>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0208 	bic.w	r2, r2, #8
 8002f14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f26:	e013      	b.n	8002f50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f28:	f7ff fda4 	bl	8002a74 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b05      	cmp	r3, #5
 8002f34:	d90c      	bls.n	8002f50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2203      	movs	r2, #3
 8002f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e015      	b.n	8002f7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1e4      	bne.n	8002f28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	223f      	movs	r2, #63	; 0x3f
 8002f64:	409a      	lsls	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d004      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2280      	movs	r2, #128	; 0x80
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00c      	b.n	8002fbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2205      	movs	r2, #5
 8002fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fd4:	4b92      	ldr	r3, [pc, #584]	; (8003220 <HAL_DMA_IRQHandler+0x258>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a92      	ldr	r2, [pc, #584]	; (8003224 <HAL_DMA_IRQHandler+0x25c>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	0a9b      	lsrs	r3, r3, #10
 8002fe0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff2:	2208      	movs	r2, #8
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d01a      	beq.n	8003034 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d013      	beq.n	8003034 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0204 	bic.w	r2, r2, #4
 800301a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	2208      	movs	r2, #8
 8003022:	409a      	lsls	r2, r3
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302c:	f043 0201 	orr.w	r2, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003038:	2201      	movs	r2, #1
 800303a:	409a      	lsls	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d012      	beq.n	800306a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00b      	beq.n	800306a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003056:	2201      	movs	r2, #1
 8003058:	409a      	lsls	r2, r3
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	f043 0202 	orr.w	r2, r3, #2
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306e:	2204      	movs	r2, #4
 8003070:	409a      	lsls	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d012      	beq.n	80030a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00b      	beq.n	80030a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	2204      	movs	r2, #4
 800308e:	409a      	lsls	r2, r3
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	f043 0204 	orr.w	r2, r3, #4
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a4:	2210      	movs	r2, #16
 80030a6:	409a      	lsls	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d043      	beq.n	8003138 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d03c      	beq.n	8003138 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c2:	2210      	movs	r2, #16
 80030c4:	409a      	lsls	r2, r3
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d018      	beq.n	800310a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d108      	bne.n	80030f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d024      	beq.n	8003138 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	4798      	blx	r3
 80030f6:	e01f      	b.n	8003138 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01b      	beq.n	8003138 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	4798      	blx	r3
 8003108:	e016      	b.n	8003138 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003114:	2b00      	cmp	r3, #0
 8003116:	d107      	bne.n	8003128 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0208 	bic.w	r2, r2, #8
 8003126:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	2220      	movs	r2, #32
 800313e:	409a      	lsls	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 808e 	beq.w	8003266 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8086 	beq.w	8003266 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315e:	2220      	movs	r2, #32
 8003160:	409a      	lsls	r2, r3
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b05      	cmp	r3, #5
 8003170:	d136      	bne.n	80031e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0216 	bic.w	r2, r2, #22
 8003180:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003190:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d103      	bne.n	80031a2 <HAL_DMA_IRQHandler+0x1da>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0208 	bic.w	r2, r2, #8
 80031b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b6:	223f      	movs	r2, #63	; 0x3f
 80031b8:	409a      	lsls	r2, r3
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d07d      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	4798      	blx	r3
        }
        return;
 80031de:	e078      	b.n	80032d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d01c      	beq.n	8003228 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d108      	bne.n	800320e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003200:	2b00      	cmp	r3, #0
 8003202:	d030      	beq.n	8003266 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	4798      	blx	r3
 800320c:	e02b      	b.n	8003266 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d027      	beq.n	8003266 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	4798      	blx	r3
 800321e:	e022      	b.n	8003266 <HAL_DMA_IRQHandler+0x29e>
 8003220:	20000004 	.word	0x20000004
 8003224:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10f      	bne.n	8003256 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0210 	bic.w	r2, r2, #16
 8003244:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326a:	2b00      	cmp	r3, #0
 800326c:	d032      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d022      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2205      	movs	r2, #5
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	3301      	adds	r3, #1
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	429a      	cmp	r2, r3
 800329c:	d307      	bcc.n	80032ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1f2      	bne.n	8003292 <HAL_DMA_IRQHandler+0x2ca>
 80032ac:	e000      	b.n	80032b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80032ae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
 80032d0:	e000      	b.n	80032d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80032d2:	bf00      	nop
    }
  }
}
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop

080032dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d108      	bne.n	800331c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800331a:	e007      	b.n	800332c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	60da      	str	r2, [r3, #12]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	3b10      	subs	r3, #16
 8003348:	4a14      	ldr	r2, [pc, #80]	; (800339c <DMA_CalcBaseAndBitshift+0x64>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003352:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <DMA_CalcBaseAndBitshift+0x68>)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d909      	bls.n	800337a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800336e:	f023 0303 	bic.w	r3, r3, #3
 8003372:	1d1a      	adds	r2, r3, #4
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	659a      	str	r2, [r3, #88]	; 0x58
 8003378:	e007      	b.n	800338a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003382:	f023 0303 	bic.w	r3, r3, #3
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	aaaaaaab 	.word	0xaaaaaaab
 80033a0:	0800e558 	.word	0x0800e558

080033a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d11f      	bne.n	80033fe <DMA_CheckFifoParam+0x5a>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d856      	bhi.n	8003472 <DMA_CheckFifoParam+0xce>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <DMA_CheckFifoParam+0x28>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	080033dd 	.word	0x080033dd
 80033d0:	080033ef 	.word	0x080033ef
 80033d4:	080033dd 	.word	0x080033dd
 80033d8:	08003473 	.word	0x08003473
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d046      	beq.n	8003476 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ec:	e043      	b.n	8003476 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033f6:	d140      	bne.n	800347a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033fc:	e03d      	b.n	800347a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003406:	d121      	bne.n	800344c <DMA_CheckFifoParam+0xa8>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b03      	cmp	r3, #3
 800340c:	d837      	bhi.n	800347e <DMA_CheckFifoParam+0xda>
 800340e:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <DMA_CheckFifoParam+0x70>)
 8003410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003414:	08003425 	.word	0x08003425
 8003418:	0800342b 	.word	0x0800342b
 800341c:	08003425 	.word	0x08003425
 8003420:	0800343d 	.word	0x0800343d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
      break;
 8003428:	e030      	b.n	800348c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d025      	beq.n	8003482 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800343a:	e022      	b.n	8003482 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003444:	d11f      	bne.n	8003486 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800344a:	e01c      	b.n	8003486 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d903      	bls.n	800345a <DMA_CheckFifoParam+0xb6>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d003      	beq.n	8003460 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003458:	e018      	b.n	800348c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
      break;
 800345e:	e015      	b.n	800348c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00e      	beq.n	800348a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
      break;
 8003470:	e00b      	b.n	800348a <DMA_CheckFifoParam+0xe6>
      break;
 8003472:	bf00      	nop
 8003474:	e00a      	b.n	800348c <DMA_CheckFifoParam+0xe8>
      break;
 8003476:	bf00      	nop
 8003478:	e008      	b.n	800348c <DMA_CheckFifoParam+0xe8>
      break;
 800347a:	bf00      	nop
 800347c:	e006      	b.n	800348c <DMA_CheckFifoParam+0xe8>
      break;
 800347e:	bf00      	nop
 8003480:	e004      	b.n	800348c <DMA_CheckFifoParam+0xe8>
      break;
 8003482:	bf00      	nop
 8003484:	e002      	b.n	800348c <DMA_CheckFifoParam+0xe8>
      break;   
 8003486:	bf00      	nop
 8003488:	e000      	b.n	800348c <DMA_CheckFifoParam+0xe8>
      break;
 800348a:	bf00      	nop
    }
  } 
  
  return status; 
 800348c:	7bfb      	ldrb	r3, [r7, #15]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop

0800349c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	; 0x24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	e159      	b.n	800376c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034b8:	2201      	movs	r2, #1
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	f040 8148 	bne.w	8003766 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d005      	beq.n	80034ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d130      	bne.n	8003550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	2203      	movs	r2, #3
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4013      	ands	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003524:	2201      	movs	r2, #1
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 0201 	and.w	r2, r3, #1
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b03      	cmp	r3, #3
 800355a:	d017      	beq.n	800358c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	2203      	movs	r2, #3
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d123      	bne.n	80035e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	08da      	lsrs	r2, r3, #3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3208      	adds	r2, #8
 80035a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	220f      	movs	r2, #15
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	08da      	lsrs	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3208      	adds	r2, #8
 80035da:	69b9      	ldr	r1, [r7, #24]
 80035dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	2203      	movs	r2, #3
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0203 	and.w	r2, r3, #3
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 80a2 	beq.w	8003766 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	4b57      	ldr	r3, [pc, #348]	; (8003784 <HAL_GPIO_Init+0x2e8>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	4a56      	ldr	r2, [pc, #344]	; (8003784 <HAL_GPIO_Init+0x2e8>)
 800362c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003630:	6453      	str	r3, [r2, #68]	; 0x44
 8003632:	4b54      	ldr	r3, [pc, #336]	; (8003784 <HAL_GPIO_Init+0x2e8>)
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800363e:	4a52      	ldr	r2, [pc, #328]	; (8003788 <HAL_GPIO_Init+0x2ec>)
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	089b      	lsrs	r3, r3, #2
 8003644:	3302      	adds	r3, #2
 8003646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	220f      	movs	r2, #15
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a49      	ldr	r2, [pc, #292]	; (800378c <HAL_GPIO_Init+0x2f0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d019      	beq.n	800369e <HAL_GPIO_Init+0x202>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a48      	ldr	r2, [pc, #288]	; (8003790 <HAL_GPIO_Init+0x2f4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_GPIO_Init+0x1fe>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a47      	ldr	r2, [pc, #284]	; (8003794 <HAL_GPIO_Init+0x2f8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00d      	beq.n	8003696 <HAL_GPIO_Init+0x1fa>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a46      	ldr	r2, [pc, #280]	; (8003798 <HAL_GPIO_Init+0x2fc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d007      	beq.n	8003692 <HAL_GPIO_Init+0x1f6>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a45      	ldr	r2, [pc, #276]	; (800379c <HAL_GPIO_Init+0x300>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d101      	bne.n	800368e <HAL_GPIO_Init+0x1f2>
 800368a:	2304      	movs	r3, #4
 800368c:	e008      	b.n	80036a0 <HAL_GPIO_Init+0x204>
 800368e:	2307      	movs	r3, #7
 8003690:	e006      	b.n	80036a0 <HAL_GPIO_Init+0x204>
 8003692:	2303      	movs	r3, #3
 8003694:	e004      	b.n	80036a0 <HAL_GPIO_Init+0x204>
 8003696:	2302      	movs	r3, #2
 8003698:	e002      	b.n	80036a0 <HAL_GPIO_Init+0x204>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_GPIO_Init+0x204>
 800369e:	2300      	movs	r3, #0
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	f002 0203 	and.w	r2, r2, #3
 80036a6:	0092      	lsls	r2, r2, #2
 80036a8:	4093      	lsls	r3, r2
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036b0:	4935      	ldr	r1, [pc, #212]	; (8003788 <HAL_GPIO_Init+0x2ec>)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	089b      	lsrs	r3, r3, #2
 80036b6:	3302      	adds	r3, #2
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036be:	4b38      	ldr	r3, [pc, #224]	; (80037a0 <HAL_GPIO_Init+0x304>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e2:	4a2f      	ldr	r2, [pc, #188]	; (80037a0 <HAL_GPIO_Init+0x304>)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036e8:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <HAL_GPIO_Init+0x304>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800370c:	4a24      	ldr	r2, [pc, #144]	; (80037a0 <HAL_GPIO_Init+0x304>)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003712:	4b23      	ldr	r3, [pc, #140]	; (80037a0 <HAL_GPIO_Init+0x304>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	43db      	mvns	r3, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4013      	ands	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003736:	4a1a      	ldr	r2, [pc, #104]	; (80037a0 <HAL_GPIO_Init+0x304>)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800373c:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <HAL_GPIO_Init+0x304>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	43db      	mvns	r3, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4013      	ands	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003760:	4a0f      	ldr	r2, [pc, #60]	; (80037a0 <HAL_GPIO_Init+0x304>)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	3301      	adds	r3, #1
 800376a:	61fb      	str	r3, [r7, #28]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b0f      	cmp	r3, #15
 8003770:	f67f aea2 	bls.w	80034b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	3724      	adds	r7, #36	; 0x24
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800
 8003788:	40013800 	.word	0x40013800
 800378c:	40020000 	.word	0x40020000
 8003790:	40020400 	.word	0x40020400
 8003794:	40020800 	.word	0x40020800
 8003798:	40020c00 	.word	0x40020c00
 800379c:	40021000 	.word	0x40021000
 80037a0:	40013c00 	.word	0x40013c00

080037a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	807b      	strh	r3, [r7, #2]
 80037b0:	4613      	mov	r3, r2
 80037b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037b4:	787b      	ldrb	r3, [r7, #1]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ba:	887a      	ldrh	r2, [r7, #2]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037c0:	e003      	b.n	80037ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037c2:	887b      	ldrh	r3, [r7, #2]
 80037c4:	041a      	lsls	r2, r3, #16
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	619a      	str	r2, [r3, #24]
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e12b      	b.n	8003a42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fe fe2c 	bl	800245c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2224      	movs	r2, #36	; 0x24
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800382a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800383a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800383c:	f001 fbd8 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 8003840:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4a81      	ldr	r2, [pc, #516]	; (8003a4c <HAL_I2C_Init+0x274>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d807      	bhi.n	800385c <HAL_I2C_Init+0x84>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4a80      	ldr	r2, [pc, #512]	; (8003a50 <HAL_I2C_Init+0x278>)
 8003850:	4293      	cmp	r3, r2
 8003852:	bf94      	ite	ls
 8003854:	2301      	movls	r3, #1
 8003856:	2300      	movhi	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e006      	b.n	800386a <HAL_I2C_Init+0x92>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4a7d      	ldr	r2, [pc, #500]	; (8003a54 <HAL_I2C_Init+0x27c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	bf94      	ite	ls
 8003864:	2301      	movls	r3, #1
 8003866:	2300      	movhi	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0e7      	b.n	8003a42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4a78      	ldr	r2, [pc, #480]	; (8003a58 <HAL_I2C_Init+0x280>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	0c9b      	lsrs	r3, r3, #18
 800387c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	4a6a      	ldr	r2, [pc, #424]	; (8003a4c <HAL_I2C_Init+0x274>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d802      	bhi.n	80038ac <HAL_I2C_Init+0xd4>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3301      	adds	r3, #1
 80038aa:	e009      	b.n	80038c0 <HAL_I2C_Init+0xe8>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	4a69      	ldr	r2, [pc, #420]	; (8003a5c <HAL_I2C_Init+0x284>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	099b      	lsrs	r3, r3, #6
 80038be:	3301      	adds	r3, #1
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	430b      	orrs	r3, r1
 80038c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	495c      	ldr	r1, [pc, #368]	; (8003a4c <HAL_I2C_Init+0x274>)
 80038dc:	428b      	cmp	r3, r1
 80038de:	d819      	bhi.n	8003914 <HAL_I2C_Init+0x13c>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1e59      	subs	r1, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ee:	1c59      	adds	r1, r3, #1
 80038f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038f4:	400b      	ands	r3, r1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <HAL_I2C_Init+0x138>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1e59      	subs	r1, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	fbb1 f3f3 	udiv	r3, r1, r3
 8003908:	3301      	adds	r3, #1
 800390a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390e:	e051      	b.n	80039b4 <HAL_I2C_Init+0x1dc>
 8003910:	2304      	movs	r3, #4
 8003912:	e04f      	b.n	80039b4 <HAL_I2C_Init+0x1dc>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d111      	bne.n	8003940 <HAL_I2C_Init+0x168>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1e58      	subs	r0, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6859      	ldr	r1, [r3, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	440b      	add	r3, r1
 800392a:	fbb0 f3f3 	udiv	r3, r0, r3
 800392e:	3301      	adds	r3, #1
 8003930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf0c      	ite	eq
 8003938:	2301      	moveq	r3, #1
 800393a:	2300      	movne	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e012      	b.n	8003966 <HAL_I2C_Init+0x18e>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1e58      	subs	r0, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6859      	ldr	r1, [r3, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	0099      	lsls	r1, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	fbb0 f3f3 	udiv	r3, r0, r3
 8003956:	3301      	adds	r3, #1
 8003958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800395c:	2b00      	cmp	r3, #0
 800395e:	bf0c      	ite	eq
 8003960:	2301      	moveq	r3, #1
 8003962:	2300      	movne	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_Init+0x196>
 800396a:	2301      	movs	r3, #1
 800396c:	e022      	b.n	80039b4 <HAL_I2C_Init+0x1dc>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10e      	bne.n	8003994 <HAL_I2C_Init+0x1bc>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1e58      	subs	r0, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6859      	ldr	r1, [r3, #4]
 800397e:	460b      	mov	r3, r1
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	440b      	add	r3, r1
 8003984:	fbb0 f3f3 	udiv	r3, r0, r3
 8003988:	3301      	adds	r3, #1
 800398a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800398e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003992:	e00f      	b.n	80039b4 <HAL_I2C_Init+0x1dc>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1e58      	subs	r0, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	0099      	lsls	r1, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039aa:	3301      	adds	r3, #1
 80039ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	6809      	ldr	r1, [r1, #0]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69da      	ldr	r2, [r3, #28]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6911      	ldr	r1, [r2, #16]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68d2      	ldr	r2, [r2, #12]
 80039ee:	4311      	orrs	r1, r2
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	430b      	orrs	r3, r1
 80039f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695a      	ldr	r2, [r3, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	000186a0 	.word	0x000186a0
 8003a50:	001e847f 	.word	0x001e847f
 8003a54:	003d08ff 	.word	0x003d08ff
 8003a58:	431bde83 	.word	0x431bde83
 8003a5c:	10624dd3 	.word	0x10624dd3

08003a60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	817b      	strh	r3, [r7, #10]
 8003a72:	460b      	mov	r3, r1
 8003a74:	813b      	strh	r3, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a7a:	f7fe fffb 	bl	8002a74 <HAL_GetTick>
 8003a7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	f040 80d9 	bne.w	8003c40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	2319      	movs	r3, #25
 8003a94:	2201      	movs	r2, #1
 8003a96:	496d      	ldr	r1, [pc, #436]	; (8003c4c <HAL_I2C_Mem_Write+0x1ec>)
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 fc7f 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e0cc      	b.n	8003c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_I2C_Mem_Write+0x56>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e0c5      	b.n	8003c42 <HAL_I2C_Mem_Write+0x1e2>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d007      	beq.n	8003adc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2221      	movs	r2, #33	; 0x21
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2240      	movs	r2, #64	; 0x40
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a3a      	ldr	r2, [r7, #32]
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a4d      	ldr	r2, [pc, #308]	; (8003c50 <HAL_I2C_Mem_Write+0x1f0>)
 8003b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b1e:	88f8      	ldrh	r0, [r7, #6]
 8003b20:	893a      	ldrh	r2, [r7, #8]
 8003b22:	8979      	ldrh	r1, [r7, #10]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 fab6 	bl	80040a0 <I2C_RequestMemoryWrite>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d052      	beq.n	8003be0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e081      	b.n	8003c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fd00 	bl	8004548 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00d      	beq.n	8003b6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d107      	bne.n	8003b66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e06b      	b.n	8003c42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	781a      	ldrb	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d11b      	bne.n	8003be0 <HAL_I2C_Mem_Write+0x180>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d017      	beq.n	8003be0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	781a      	ldrb	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1aa      	bne.n	8003b3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 fcec 	bl	80045ca <I2C_WaitOnBTFFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00d      	beq.n	8003c14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d107      	bne.n	8003c10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e016      	b.n	8003c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	e000      	b.n	8003c42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c40:	2302      	movs	r3, #2
  }
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	00100002 	.word	0x00100002
 8003c50:	ffff0000 	.word	0xffff0000

08003c54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08c      	sub	sp, #48	; 0x30
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	4611      	mov	r1, r2
 8003c60:	461a      	mov	r2, r3
 8003c62:	4603      	mov	r3, r0
 8003c64:	817b      	strh	r3, [r7, #10]
 8003c66:	460b      	mov	r3, r1
 8003c68:	813b      	strh	r3, [r7, #8]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c6e:	f7fe ff01 	bl	8002a74 <HAL_GetTick>
 8003c72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	f040 8208 	bne.w	8004092 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	2319      	movs	r3, #25
 8003c88:	2201      	movs	r2, #1
 8003c8a:	497b      	ldr	r1, [pc, #492]	; (8003e78 <HAL_I2C_Mem_Read+0x224>)
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fb85 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e1fb      	b.n	8004094 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_I2C_Mem_Read+0x56>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e1f4      	b.n	8004094 <HAL_I2C_Mem_Read+0x440>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d007      	beq.n	8003cd0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2222      	movs	r2, #34	; 0x22
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2240      	movs	r2, #64	; 0x40
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4a5b      	ldr	r2, [pc, #364]	; (8003e7c <HAL_I2C_Mem_Read+0x228>)
 8003d10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d12:	88f8      	ldrh	r0, [r7, #6]
 8003d14:	893a      	ldrh	r2, [r7, #8]
 8003d16:	8979      	ldrh	r1, [r7, #10]
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	4603      	mov	r3, r0
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 fa52 	bl	80041cc <I2C_RequestMemoryRead>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e1b0      	b.n	8004094 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d113      	bne.n	8003d62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	623b      	str	r3, [r7, #32]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	623b      	str	r3, [r7, #32]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	623b      	str	r3, [r7, #32]
 8003d4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	e184      	b.n	800406c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d11b      	bne.n	8003da2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	61fb      	str	r3, [r7, #28]
 8003d8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	e164      	b.n	800406c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d11b      	bne.n	8003de2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	e144      	b.n	800406c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003df8:	e138      	b.n	800406c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	f200 80f1 	bhi.w	8003fe6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d123      	bne.n	8003e54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 fc1b 	bl	800464c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e139      	b.n	8004094 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e52:	e10b      	b.n	800406c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d14e      	bne.n	8003efa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e62:	2200      	movs	r2, #0
 8003e64:	4906      	ldr	r1, [pc, #24]	; (8003e80 <HAL_I2C_Mem_Read+0x22c>)
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 fa98 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e10e      	b.n	8004094 <HAL_I2C_Mem_Read+0x440>
 8003e76:	bf00      	nop
 8003e78:	00100002 	.word	0x00100002
 8003e7c:	ffff0000 	.word	0xffff0000
 8003e80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ef8:	e0b8      	b.n	800406c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f00:	2200      	movs	r2, #0
 8003f02:	4966      	ldr	r1, [pc, #408]	; (800409c <HAL_I2C_Mem_Read+0x448>)
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fa49 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0bf      	b.n	8004094 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	494f      	ldr	r1, [pc, #316]	; (800409c <HAL_I2C_Mem_Read+0x448>)
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fa1b 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e091      	b.n	8004094 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fe4:	e042      	b.n	800406c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 fb2e 	bl	800464c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e04c      	b.n	8004094 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b04      	cmp	r3, #4
 8004038:	d118      	bne.n	800406c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	f47f aec2 	bne.w	8003dfa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e000      	b.n	8004094 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004092:	2302      	movs	r3, #2
  }
}
 8004094:	4618      	mov	r0, r3
 8004096:	3728      	adds	r7, #40	; 0x28
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	00010004 	.word	0x00010004

080040a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	461a      	mov	r2, r3
 80040ae:	4603      	mov	r3, r0
 80040b0:	817b      	strh	r3, [r7, #10]
 80040b2:	460b      	mov	r3, r1
 80040b4:	813b      	strh	r3, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f960 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00d      	beq.n	80040fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f0:	d103      	bne.n	80040fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e05f      	b.n	80041be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040fe:	897b      	ldrh	r3, [r7, #10]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	461a      	mov	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800410c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	6a3a      	ldr	r2, [r7, #32]
 8004112:	492d      	ldr	r1, [pc, #180]	; (80041c8 <I2C_RequestMemoryWrite+0x128>)
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f998 	bl	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e04c      	b.n	80041be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800413a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413c:	6a39      	ldr	r1, [r7, #32]
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 fa02 	bl	8004548 <I2C_WaitOnTXEFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00d      	beq.n	8004166 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	2b04      	cmp	r3, #4
 8004150:	d107      	bne.n	8004162 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004160:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e02b      	b.n	80041be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d105      	bne.n	8004178 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800416c:	893b      	ldrh	r3, [r7, #8]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	611a      	str	r2, [r3, #16]
 8004176:	e021      	b.n	80041bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004178:	893b      	ldrh	r3, [r7, #8]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	b29b      	uxth	r3, r3
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004188:	6a39      	ldr	r1, [r7, #32]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f9dc 	bl	8004548 <I2C_WaitOnTXEFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2b04      	cmp	r3, #4
 800419c:	d107      	bne.n	80041ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e005      	b.n	80041be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041b2:	893b      	ldrh	r3, [r7, #8]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	00010002 	.word	0x00010002

080041cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	817b      	strh	r3, [r7, #10]
 80041de:	460b      	mov	r3, r1
 80041e0:	813b      	strh	r3, [r7, #8]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004204:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	2200      	movs	r2, #0
 800420e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f8c2 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00d      	beq.n	800423a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800422c:	d103      	bne.n	8004236 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004234:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e0aa      	b.n	8004390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800423a:	897b      	ldrh	r3, [r7, #10]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004248:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	6a3a      	ldr	r2, [r7, #32]
 800424e:	4952      	ldr	r1, [pc, #328]	; (8004398 <I2C_RequestMemoryRead+0x1cc>)
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f8fa 	bl	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e097      	b.n	8004390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004278:	6a39      	ldr	r1, [r7, #32]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f964 	bl	8004548 <I2C_WaitOnTXEFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00d      	beq.n	80042a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	2b04      	cmp	r3, #4
 800428c:	d107      	bne.n	800429e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e076      	b.n	8004390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d105      	bne.n	80042b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042a8:	893b      	ldrh	r3, [r7, #8]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	611a      	str	r2, [r3, #16]
 80042b2:	e021      	b.n	80042f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042b4:	893b      	ldrh	r3, [r7, #8]
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c4:	6a39      	ldr	r1, [r7, #32]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f93e 	bl	8004548 <I2C_WaitOnTXEFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00d      	beq.n	80042ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d107      	bne.n	80042ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e050      	b.n	8004390 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ee:	893b      	ldrh	r3, [r7, #8]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fa:	6a39      	ldr	r1, [r7, #32]
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f923 	bl	8004548 <I2C_WaitOnTXEFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00d      	beq.n	8004324 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	2b04      	cmp	r3, #4
 800430e:	d107      	bne.n	8004320 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e035      	b.n	8004390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004332:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	2200      	movs	r2, #0
 800433c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f82b 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00d      	beq.n	8004368 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800435a:	d103      	bne.n	8004364 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004362:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e013      	b.n	8004390 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004368:	897b      	ldrh	r3, [r7, #10]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	b2da      	uxtb	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	6a3a      	ldr	r2, [r7, #32]
 800437c:	4906      	ldr	r1, [pc, #24]	; (8004398 <I2C_RequestMemoryRead+0x1cc>)
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f863 	bl	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	00010002 	.word	0x00010002

0800439c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043ac:	e025      	b.n	80043fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d021      	beq.n	80043fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b6:	f7fe fb5d 	bl	8002a74 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d302      	bcc.n	80043cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d116      	bne.n	80043fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f043 0220 	orr.w	r2, r3, #32
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e023      	b.n	8004442 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	0c1b      	lsrs	r3, r3, #16
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d10d      	bne.n	8004420 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	43da      	mvns	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4013      	ands	r3, r2
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	bf0c      	ite	eq
 8004416:	2301      	moveq	r3, #1
 8004418:	2300      	movne	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	e00c      	b.n	800443a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	43da      	mvns	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4013      	ands	r3, r2
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	429a      	cmp	r2, r3
 800443e:	d0b6      	beq.n	80043ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
 8004456:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004458:	e051      	b.n	80044fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004468:	d123      	bne.n	80044b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004478:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004482:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f043 0204 	orr.w	r2, r3, #4
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e046      	b.n	8004540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d021      	beq.n	80044fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ba:	f7fe fadb 	bl	8002a74 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d302      	bcc.n	80044d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d116      	bne.n	80044fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f043 0220 	orr.w	r2, r3, #32
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e020      	b.n	8004540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d10c      	bne.n	8004522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	43da      	mvns	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4013      	ands	r3, r2
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	bf14      	ite	ne
 800451a:	2301      	movne	r3, #1
 800451c:	2300      	moveq	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	e00b      	b.n	800453a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	43da      	mvns	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	4013      	ands	r3, r2
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	bf14      	ite	ne
 8004534:	2301      	movne	r3, #1
 8004536:	2300      	moveq	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d18d      	bne.n	800445a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004554:	e02d      	b.n	80045b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f8ce 	bl	80046f8 <I2C_IsAcknowledgeFailed>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e02d      	b.n	80045c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d021      	beq.n	80045b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456e:	f7fe fa81 	bl	8002a74 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	429a      	cmp	r2, r3
 800457c:	d302      	bcc.n	8004584 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d116      	bne.n	80045b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f043 0220 	orr.w	r2, r3, #32
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e007      	b.n	80045c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045bc:	2b80      	cmp	r3, #128	; 0x80
 80045be:	d1ca      	bne.n	8004556 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045d6:	e02d      	b.n	8004634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f88d 	bl	80046f8 <I2C_IsAcknowledgeFailed>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e02d      	b.n	8004644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d021      	beq.n	8004634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f0:	f7fe fa40 	bl	8002a74 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d302      	bcc.n	8004606 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d116      	bne.n	8004634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	f043 0220 	orr.w	r2, r3, #32
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e007      	b.n	8004644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b04      	cmp	r3, #4
 8004640:	d1ca      	bne.n	80045d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004658:	e042      	b.n	80046e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b10      	cmp	r3, #16
 8004666:	d119      	bne.n	800469c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0210 	mvn.w	r2, #16
 8004670:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e029      	b.n	80046f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469c:	f7fe f9ea 	bl	8002a74 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d302      	bcc.n	80046b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d116      	bne.n	80046e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	f043 0220 	orr.w	r2, r3, #32
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e007      	b.n	80046f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b40      	cmp	r3, #64	; 0x40
 80046ec:	d1b5      	bne.n	800465a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470e:	d11b      	bne.n	8004748 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004718:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	f043 0204 	orr.w	r2, r3, #4
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e264      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d075      	beq.n	8004862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004776:	4ba3      	ldr	r3, [pc, #652]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 030c 	and.w	r3, r3, #12
 800477e:	2b04      	cmp	r3, #4
 8004780:	d00c      	beq.n	800479c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004782:	4ba0      	ldr	r3, [pc, #640]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800478a:	2b08      	cmp	r3, #8
 800478c:	d112      	bne.n	80047b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800478e:	4b9d      	ldr	r3, [pc, #628]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800479a:	d10b      	bne.n	80047b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479c:	4b99      	ldr	r3, [pc, #612]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d05b      	beq.n	8004860 <HAL_RCC_OscConfig+0x108>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d157      	bne.n	8004860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e23f      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047bc:	d106      	bne.n	80047cc <HAL_RCC_OscConfig+0x74>
 80047be:	4b91      	ldr	r3, [pc, #580]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a90      	ldr	r2, [pc, #576]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e01d      	b.n	8004808 <HAL_RCC_OscConfig+0xb0>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0x98>
 80047d6:	4b8b      	ldr	r3, [pc, #556]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a8a      	ldr	r2, [pc, #552]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80047dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	4b88      	ldr	r3, [pc, #544]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a87      	ldr	r2, [pc, #540]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	e00b      	b.n	8004808 <HAL_RCC_OscConfig+0xb0>
 80047f0:	4b84      	ldr	r3, [pc, #528]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a83      	ldr	r2, [pc, #524]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80047f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	4b81      	ldr	r3, [pc, #516]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a80      	ldr	r2, [pc, #512]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 8004802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d013      	beq.n	8004838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004810:	f7fe f930 	bl	8002a74 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004818:	f7fe f92c 	bl	8002a74 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b64      	cmp	r3, #100	; 0x64
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e204      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482a:	4b76      	ldr	r3, [pc, #472]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0xc0>
 8004836:	e014      	b.n	8004862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004838:	f7fe f91c 	bl	8002a74 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004840:	f7fe f918 	bl	8002a74 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e1f0      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004852:	4b6c      	ldr	r3, [pc, #432]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0xe8>
 800485e:	e000      	b.n	8004862 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d063      	beq.n	8004936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800486e:	4b65      	ldr	r3, [pc, #404]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800487a:	4b62      	ldr	r3, [pc, #392]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004882:	2b08      	cmp	r3, #8
 8004884:	d11c      	bne.n	80048c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004886:	4b5f      	ldr	r3, [pc, #380]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d116      	bne.n	80048c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004892:	4b5c      	ldr	r3, [pc, #368]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d005      	beq.n	80048aa <HAL_RCC_OscConfig+0x152>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d001      	beq.n	80048aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e1c4      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048aa:	4b56      	ldr	r3, [pc, #344]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	4952      	ldr	r1, [pc, #328]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048be:	e03a      	b.n	8004936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d020      	beq.n	800490a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048c8:	4b4f      	ldr	r3, [pc, #316]	; (8004a08 <HAL_RCC_OscConfig+0x2b0>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ce:	f7fe f8d1 	bl	8002a74 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048d6:	f7fe f8cd 	bl	8002a74 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e1a5      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e8:	4b46      	ldr	r3, [pc, #280]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f4:	4b43      	ldr	r3, [pc, #268]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4940      	ldr	r1, [pc, #256]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 8004904:	4313      	orrs	r3, r2
 8004906:	600b      	str	r3, [r1, #0]
 8004908:	e015      	b.n	8004936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800490a:	4b3f      	ldr	r3, [pc, #252]	; (8004a08 <HAL_RCC_OscConfig+0x2b0>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fe f8b0 	bl	8002a74 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004918:	f7fe f8ac 	bl	8002a74 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e184      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800492a:	4b36      	ldr	r3, [pc, #216]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d030      	beq.n	80049a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d016      	beq.n	8004978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800494a:	4b30      	ldr	r3, [pc, #192]	; (8004a0c <HAL_RCC_OscConfig+0x2b4>)
 800494c:	2201      	movs	r2, #1
 800494e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fe f890 	bl	8002a74 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004958:	f7fe f88c 	bl	8002a74 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e164      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800496a:	4b26      	ldr	r3, [pc, #152]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 800496c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0x200>
 8004976:	e015      	b.n	80049a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004978:	4b24      	ldr	r3, [pc, #144]	; (8004a0c <HAL_RCC_OscConfig+0x2b4>)
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497e:	f7fe f879 	bl	8002a74 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004986:	f7fe f875 	bl	8002a74 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e14d      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004998:	4b1a      	ldr	r3, [pc, #104]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 800499a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1f0      	bne.n	8004986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80a0 	beq.w	8004af2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049b2:	2300      	movs	r3, #0
 80049b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049b6:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10f      	bne.n	80049e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c2:	2300      	movs	r3, #0
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	4b0f      	ldr	r3, [pc, #60]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	4a0e      	ldr	r2, [pc, #56]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80049cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d0:	6413      	str	r3, [r2, #64]	; 0x40
 80049d2:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049de:	2301      	movs	r3, #1
 80049e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e2:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <HAL_RCC_OscConfig+0x2b8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d121      	bne.n	8004a32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ee:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <HAL_RCC_OscConfig+0x2b8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a07      	ldr	r2, [pc, #28]	; (8004a10 <HAL_RCC_OscConfig+0x2b8>)
 80049f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049fa:	f7fe f83b 	bl	8002a74 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a00:	e011      	b.n	8004a26 <HAL_RCC_OscConfig+0x2ce>
 8004a02:	bf00      	nop
 8004a04:	40023800 	.word	0x40023800
 8004a08:	42470000 	.word	0x42470000
 8004a0c:	42470e80 	.word	0x42470e80
 8004a10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a14:	f7fe f82e 	bl	8002a74 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e106      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a26:	4b85      	ldr	r3, [pc, #532]	; (8004c3c <HAL_RCC_OscConfig+0x4e4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f0      	beq.n	8004a14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d106      	bne.n	8004a48 <HAL_RCC_OscConfig+0x2f0>
 8004a3a:	4b81      	ldr	r3, [pc, #516]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	4a80      	ldr	r2, [pc, #512]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	6713      	str	r3, [r2, #112]	; 0x70
 8004a46:	e01c      	b.n	8004a82 <HAL_RCC_OscConfig+0x32a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b05      	cmp	r3, #5
 8004a4e:	d10c      	bne.n	8004a6a <HAL_RCC_OscConfig+0x312>
 8004a50:	4b7b      	ldr	r3, [pc, #492]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a54:	4a7a      	ldr	r2, [pc, #488]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004a56:	f043 0304 	orr.w	r3, r3, #4
 8004a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a5c:	4b78      	ldr	r3, [pc, #480]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a60:	4a77      	ldr	r2, [pc, #476]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004a62:	f043 0301 	orr.w	r3, r3, #1
 8004a66:	6713      	str	r3, [r2, #112]	; 0x70
 8004a68:	e00b      	b.n	8004a82 <HAL_RCC_OscConfig+0x32a>
 8004a6a:	4b75      	ldr	r3, [pc, #468]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6e:	4a74      	ldr	r2, [pc, #464]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004a70:	f023 0301 	bic.w	r3, r3, #1
 8004a74:	6713      	str	r3, [r2, #112]	; 0x70
 8004a76:	4b72      	ldr	r3, [pc, #456]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7a:	4a71      	ldr	r2, [pc, #452]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004a7c:	f023 0304 	bic.w	r3, r3, #4
 8004a80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d015      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8a:	f7fd fff3 	bl	8002a74 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a90:	e00a      	b.n	8004aa8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a92:	f7fd ffef 	bl	8002a74 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e0c5      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa8:	4b65      	ldr	r3, [pc, #404]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0ee      	beq.n	8004a92 <HAL_RCC_OscConfig+0x33a>
 8004ab4:	e014      	b.n	8004ae0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab6:	f7fd ffdd 	bl	8002a74 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004abc:	e00a      	b.n	8004ad4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004abe:	f7fd ffd9 	bl	8002a74 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e0af      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad4:	4b5a      	ldr	r3, [pc, #360]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1ee      	bne.n	8004abe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d105      	bne.n	8004af2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae6:	4b56      	ldr	r3, [pc, #344]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	4a55      	ldr	r2, [pc, #340]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 809b 	beq.w	8004c32 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004afc:	4b50      	ldr	r3, [pc, #320]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 030c 	and.w	r3, r3, #12
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d05c      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d141      	bne.n	8004b94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b10:	4b4c      	ldr	r3, [pc, #304]	; (8004c44 <HAL_RCC_OscConfig+0x4ec>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b16:	f7fd ffad 	bl	8002a74 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b1e:	f7fd ffa9 	bl	8002a74 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e081      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b30:	4b43      	ldr	r3, [pc, #268]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	019b      	lsls	r3, r3, #6
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	085b      	lsrs	r3, r3, #1
 8004b54:	3b01      	subs	r3, #1
 8004b56:	041b      	lsls	r3, r3, #16
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	061b      	lsls	r3, r3, #24
 8004b60:	4937      	ldr	r1, [pc, #220]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b66:	4b37      	ldr	r3, [pc, #220]	; (8004c44 <HAL_RCC_OscConfig+0x4ec>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6c:	f7fd ff82 	bl	8002a74 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b74:	f7fd ff7e 	bl	8002a74 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e056      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b86:	4b2e      	ldr	r3, [pc, #184]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0x41c>
 8004b92:	e04e      	b.n	8004c32 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b94:	4b2b      	ldr	r3, [pc, #172]	; (8004c44 <HAL_RCC_OscConfig+0x4ec>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9a:	f7fd ff6b 	bl	8002a74 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba2:	f7fd ff67 	bl	8002a74 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e03f      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb4:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1f0      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x44a>
 8004bc0:	e037      	b.n	8004c32 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e032      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bce:	4b1c      	ldr	r3, [pc, #112]	; (8004c40 <HAL_RCC_OscConfig+0x4e8>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d028      	beq.n	8004c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d121      	bne.n	8004c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d11a      	bne.n	8004c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bfe:	4013      	ands	r3, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d111      	bne.n	8004c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	3b01      	subs	r3, #1
 8004c18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d107      	bne.n	8004c2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d001      	beq.n	8004c32 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40007000 	.word	0x40007000
 8004c40:	40023800 	.word	0x40023800
 8004c44:	42470060 	.word	0x42470060

08004c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0cc      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c5c:	4b68      	ldr	r3, [pc, #416]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d90c      	bls.n	8004c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6a:	4b65      	ldr	r3, [pc, #404]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b63      	ldr	r3, [pc, #396]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0b8      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d020      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c9c:	4b59      	ldr	r3, [pc, #356]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	4a58      	ldr	r2, [pc, #352]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ca6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cb4:	4b53      	ldr	r3, [pc, #332]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	4a52      	ldr	r2, [pc, #328]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc0:	4b50      	ldr	r3, [pc, #320]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	494d      	ldr	r1, [pc, #308]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d044      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d107      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce6:	4b47      	ldr	r3, [pc, #284]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d119      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e07f      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d003      	beq.n	8004d06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d107      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d06:	4b3f      	ldr	r3, [pc, #252]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d109      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e06f      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d16:	4b3b      	ldr	r3, [pc, #236]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e067      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d26:	4b37      	ldr	r3, [pc, #220]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f023 0203 	bic.w	r2, r3, #3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	4934      	ldr	r1, [pc, #208]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d38:	f7fd fe9c 	bl	8002a74 <HAL_GetTick>
 8004d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3e:	e00a      	b.n	8004d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d40:	f7fd fe98 	bl	8002a74 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e04f      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d56:	4b2b      	ldr	r3, [pc, #172]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 020c 	and.w	r2, r3, #12
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d1eb      	bne.n	8004d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d68:	4b25      	ldr	r3, [pc, #148]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d20c      	bcs.n	8004d90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d76:	4b22      	ldr	r3, [pc, #136]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7e:	4b20      	ldr	r3, [pc, #128]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e032      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d9c:	4b19      	ldr	r3, [pc, #100]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	4916      	ldr	r1, [pc, #88]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dba:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	490e      	ldr	r1, [pc, #56]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dce:	f000 f821 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	091b      	lsrs	r3, r3, #4
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	490a      	ldr	r1, [pc, #40]	; (8004e08 <HAL_RCC_ClockConfig+0x1c0>)
 8004de0:	5ccb      	ldrb	r3, [r1, r3]
 8004de2:	fa22 f303 	lsr.w	r3, r2, r3
 8004de6:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <HAL_RCC_ClockConfig+0x1c4>)
 8004de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <HAL_RCC_ClockConfig+0x1c8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fd fc7c 	bl	80026ec <HAL_InitTick>

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40023c00 	.word	0x40023c00
 8004e04:	40023800 	.word	0x40023800
 8004e08:	0800e540 	.word	0x0800e540
 8004e0c:	20000004 	.word	0x20000004
 8004e10:	20000008 	.word	0x20000008

08004e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	607b      	str	r3, [r7, #4]
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	2300      	movs	r3, #0
 8004e26:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e2c:	4b67      	ldr	r3, [pc, #412]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 030c 	and.w	r3, r3, #12
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d00d      	beq.n	8004e54 <HAL_RCC_GetSysClockFreq+0x40>
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	f200 80bd 	bhi.w	8004fb8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_RCC_GetSysClockFreq+0x34>
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d003      	beq.n	8004e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e46:	e0b7      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e48:	4b61      	ldr	r3, [pc, #388]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e4a:	60bb      	str	r3, [r7, #8]
       break;
 8004e4c:	e0b7      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e4e:	4b61      	ldr	r3, [pc, #388]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004e50:	60bb      	str	r3, [r7, #8]
      break;
 8004e52:	e0b4      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e54:	4b5d      	ldr	r3, [pc, #372]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e5e:	4b5b      	ldr	r3, [pc, #364]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d04d      	beq.n	8004f06 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6a:	4b58      	ldr	r3, [pc, #352]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	099b      	lsrs	r3, r3, #6
 8004e70:	461a      	mov	r2, r3
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e7a:	f04f 0100 	mov.w	r1, #0
 8004e7e:	ea02 0800 	and.w	r8, r2, r0
 8004e82:	ea03 0901 	and.w	r9, r3, r1
 8004e86:	4640      	mov	r0, r8
 8004e88:	4649      	mov	r1, r9
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	014b      	lsls	r3, r1, #5
 8004e94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e98:	0142      	lsls	r2, r0, #5
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	ebb0 0008 	subs.w	r0, r0, r8
 8004ea2:	eb61 0109 	sbc.w	r1, r1, r9
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	018b      	lsls	r3, r1, #6
 8004eb0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004eb4:	0182      	lsls	r2, r0, #6
 8004eb6:	1a12      	subs	r2, r2, r0
 8004eb8:	eb63 0301 	sbc.w	r3, r3, r1
 8004ebc:	f04f 0000 	mov.w	r0, #0
 8004ec0:	f04f 0100 	mov.w	r1, #0
 8004ec4:	00d9      	lsls	r1, r3, #3
 8004ec6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eca:	00d0      	lsls	r0, r2, #3
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	eb12 0208 	adds.w	r2, r2, r8
 8004ed4:	eb43 0309 	adc.w	r3, r3, r9
 8004ed8:	f04f 0000 	mov.w	r0, #0
 8004edc:	f04f 0100 	mov.w	r1, #0
 8004ee0:	0259      	lsls	r1, r3, #9
 8004ee2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004ee6:	0250      	lsls	r0, r2, #9
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4610      	mov	r0, r2
 8004eee:	4619      	mov	r1, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	f7fb fece 	bl	8000c98 <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4613      	mov	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	e04a      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f06:	4b31      	ldr	r3, [pc, #196]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	099b      	lsrs	r3, r3, #6
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f16:	f04f 0100 	mov.w	r1, #0
 8004f1a:	ea02 0400 	and.w	r4, r2, r0
 8004f1e:	ea03 0501 	and.w	r5, r3, r1
 8004f22:	4620      	mov	r0, r4
 8004f24:	4629      	mov	r1, r5
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	f04f 0300 	mov.w	r3, #0
 8004f2e:	014b      	lsls	r3, r1, #5
 8004f30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f34:	0142      	lsls	r2, r0, #5
 8004f36:	4610      	mov	r0, r2
 8004f38:	4619      	mov	r1, r3
 8004f3a:	1b00      	subs	r0, r0, r4
 8004f3c:	eb61 0105 	sbc.w	r1, r1, r5
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	018b      	lsls	r3, r1, #6
 8004f4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f4e:	0182      	lsls	r2, r0, #6
 8004f50:	1a12      	subs	r2, r2, r0
 8004f52:	eb63 0301 	sbc.w	r3, r3, r1
 8004f56:	f04f 0000 	mov.w	r0, #0
 8004f5a:	f04f 0100 	mov.w	r1, #0
 8004f5e:	00d9      	lsls	r1, r3, #3
 8004f60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f64:	00d0      	lsls	r0, r2, #3
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	1912      	adds	r2, r2, r4
 8004f6c:	eb45 0303 	adc.w	r3, r5, r3
 8004f70:	f04f 0000 	mov.w	r0, #0
 8004f74:	f04f 0100 	mov.w	r1, #0
 8004f78:	0299      	lsls	r1, r3, #10
 8004f7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f7e:	0290      	lsls	r0, r2, #10
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4610      	mov	r0, r2
 8004f86:	4619      	mov	r1, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	f7fb fe82 	bl	8000c98 <__aeabi_uldivmod>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4613      	mov	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	0c1b      	lsrs	r3, r3, #16
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb4:	60bb      	str	r3, [r7, #8]
      break;
 8004fb6:	e002      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004fba:	60bb      	str	r3, [r7, #8]
      break;
 8004fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004fca:	bf00      	nop
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	00f42400 	.word	0x00f42400
 8004fd4:	007a1200 	.word	0x007a1200

08004fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fdc:	4b03      	ldr	r3, [pc, #12]	; (8004fec <HAL_RCC_GetHCLKFreq+0x14>)
 8004fde:	681b      	ldr	r3, [r3, #0]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20000004 	.word	0x20000004

08004ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ff4:	f7ff fff0 	bl	8004fd8 <HAL_RCC_GetHCLKFreq>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4b05      	ldr	r3, [pc, #20]	; (8005010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	0a9b      	lsrs	r3, r3, #10
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	4903      	ldr	r1, [pc, #12]	; (8005014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005006:	5ccb      	ldrb	r3, [r1, r3]
 8005008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800500c:	4618      	mov	r0, r3
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40023800 	.word	0x40023800
 8005014:	0800e550 	.word	0x0800e550

08005018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800501c:	f7ff ffdc 	bl	8004fd8 <HAL_RCC_GetHCLKFreq>
 8005020:	4602      	mov	r2, r0
 8005022:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	0b5b      	lsrs	r3, r3, #13
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	4903      	ldr	r1, [pc, #12]	; (800503c <HAL_RCC_GetPCLK2Freq+0x24>)
 800502e:	5ccb      	ldrb	r3, [r1, r3]
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005034:	4618      	mov	r0, r3
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40023800 	.word	0x40023800
 800503c:	0800e550 	.word	0x0800e550

08005040 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	220f      	movs	r2, #15
 800504e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005050:	4b12      	ldr	r3, [pc, #72]	; (800509c <HAL_RCC_GetClockConfig+0x5c>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0203 	and.w	r2, r3, #3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800505c:	4b0f      	ldr	r3, [pc, #60]	; (800509c <HAL_RCC_GetClockConfig+0x5c>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005068:	4b0c      	ldr	r3, [pc, #48]	; (800509c <HAL_RCC_GetClockConfig+0x5c>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005074:	4b09      	ldr	r3, [pc, #36]	; (800509c <HAL_RCC_GetClockConfig+0x5c>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	08db      	lsrs	r3, r3, #3
 800507a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005082:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <HAL_RCC_GetClockConfig+0x60>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0207 	and.w	r2, r3, #7
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	601a      	str	r2, [r3, #0]
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40023800 	.word	0x40023800
 80050a0:	40023c00 	.word	0x40023c00

080050a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e07b      	b.n	80051ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d108      	bne.n	80050d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050c6:	d009      	beq.n	80050dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	61da      	str	r2, [r3, #28]
 80050ce:	e005      	b.n	80050dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fd f9f8 	bl	80024ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005112:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005124:	431a      	orrs	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005160:	ea42 0103 	orr.w	r1, r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005168:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	0c1b      	lsrs	r3, r3, #16
 800517a:	f003 0104 	and.w	r1, r3, #4
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	f003 0210 	and.w	r2, r3, #16
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69da      	ldr	r2, [r3, #28]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800519c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b088      	sub	sp, #32
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	603b      	str	r3, [r7, #0]
 80051c2:	4613      	mov	r3, r2
 80051c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_SPI_Transmit+0x22>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e126      	b.n	8005426 <HAL_SPI_Transmit+0x270>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051e0:	f7fd fc48 	bl	8002a74 <HAL_GetTick>
 80051e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051e6:	88fb      	ldrh	r3, [r7, #6]
 80051e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d002      	beq.n	80051fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051f6:	2302      	movs	r3, #2
 80051f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051fa:	e10b      	b.n	8005414 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <HAL_SPI_Transmit+0x52>
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d102      	bne.n	800520e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800520c:	e102      	b.n	8005414 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2203      	movs	r2, #3
 8005212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	88fa      	ldrh	r2, [r7, #6]
 8005226:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	88fa      	ldrh	r2, [r7, #6]
 800522c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005254:	d10f      	bne.n	8005276 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005274:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005280:	2b40      	cmp	r3, #64	; 0x40
 8005282:	d007      	beq.n	8005294 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800529c:	d14b      	bne.n	8005336 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_SPI_Transmit+0xf6>
 80052a6:	8afb      	ldrh	r3, [r7, #22]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d13e      	bne.n	800532a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	881a      	ldrh	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	1c9a      	adds	r2, r3, #2
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052d0:	e02b      	b.n	800532a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d112      	bne.n	8005306 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e4:	881a      	ldrh	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f0:	1c9a      	adds	r2, r3, #2
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	86da      	strh	r2, [r3, #54]	; 0x36
 8005304:	e011      	b.n	800532a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005306:	f7fd fbb5 	bl	8002a74 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d803      	bhi.n	800531e <HAL_SPI_Transmit+0x168>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531c:	d102      	bne.n	8005324 <HAL_SPI_Transmit+0x16e>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005328:	e074      	b.n	8005414 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ce      	bne.n	80052d2 <HAL_SPI_Transmit+0x11c>
 8005334:	e04c      	b.n	80053d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <HAL_SPI_Transmit+0x18e>
 800533e:	8afb      	ldrh	r3, [r7, #22]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d140      	bne.n	80053c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	7812      	ldrb	r2, [r2, #0]
 8005350:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800536a:	e02c      	b.n	80053c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b02      	cmp	r3, #2
 8005378:	d113      	bne.n	80053a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	330c      	adds	r3, #12
 8005384:	7812      	ldrb	r2, [r2, #0]
 8005386:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	86da      	strh	r2, [r3, #54]	; 0x36
 80053a0:	e011      	b.n	80053c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053a2:	f7fd fb67 	bl	8002a74 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d803      	bhi.n	80053ba <HAL_SPI_Transmit+0x204>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d102      	bne.n	80053c0 <HAL_SPI_Transmit+0x20a>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d102      	bne.n	80053c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053c4:	e026      	b.n	8005414 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1cd      	bne.n	800536c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	6839      	ldr	r1, [r7, #0]
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 fbcb 	bl	8005b70 <SPI_EndRxTxTransaction>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10a      	bne.n	8005404 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ee:	2300      	movs	r3, #0
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	77fb      	strb	r3, [r7, #31]
 8005410:	e000      	b.n	8005414 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005412:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005424:	7ffb      	ldrb	r3, [r7, #31]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b088      	sub	sp, #32
 8005432:	af02      	add	r7, sp, #8
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	603b      	str	r3, [r7, #0]
 800543a:	4613      	mov	r3, r2
 800543c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800544a:	d112      	bne.n	8005472 <HAL_SPI_Receive+0x44>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10e      	bne.n	8005472 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2204      	movs	r2, #4
 8005458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800545c:	88fa      	ldrh	r2, [r7, #6]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	4613      	mov	r3, r2
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	68b9      	ldr	r1, [r7, #8]
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f8f1 	bl	8005650 <HAL_SPI_TransmitReceive>
 800546e:	4603      	mov	r3, r0
 8005470:	e0ea      	b.n	8005648 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_SPI_Receive+0x52>
 800547c:	2302      	movs	r3, #2
 800547e:	e0e3      	b.n	8005648 <HAL_SPI_Receive+0x21a>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005488:	f7fd faf4 	bl	8002a74 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b01      	cmp	r3, #1
 8005498:	d002      	beq.n	80054a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800549a:	2302      	movs	r3, #2
 800549c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800549e:	e0ca      	b.n	8005636 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_SPI_Receive+0x7e>
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d102      	bne.n	80054b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054b0:	e0c1      	b.n	8005636 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2204      	movs	r2, #4
 80054b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	88fa      	ldrh	r2, [r7, #6]
 80054ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	88fa      	ldrh	r2, [r7, #6]
 80054d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f8:	d10f      	bne.n	800551a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005508:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005518:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d007      	beq.n	8005538 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005536:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d162      	bne.n	8005606 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005540:	e02e      	b.n	80055a0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b01      	cmp	r3, #1
 800554e:	d115      	bne.n	800557c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f103 020c 	add.w	r2, r3, #12
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	7812      	ldrb	r2, [r2, #0]
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	87da      	strh	r2, [r3, #62]	; 0x3e
 800557a:	e011      	b.n	80055a0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800557c:	f7fd fa7a 	bl	8002a74 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d803      	bhi.n	8005594 <HAL_SPI_Receive+0x166>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005592:	d102      	bne.n	800559a <HAL_SPI_Receive+0x16c>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d102      	bne.n	80055a0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800559e:	e04a      	b.n	8005636 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1cb      	bne.n	8005542 <HAL_SPI_Receive+0x114>
 80055aa:	e031      	b.n	8005610 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d113      	bne.n	80055e2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	b292      	uxth	r2, r2
 80055c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	1c9a      	adds	r2, r3, #2
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055e0:	e011      	b.n	8005606 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055e2:	f7fd fa47 	bl	8002a74 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d803      	bhi.n	80055fa <HAL_SPI_Receive+0x1cc>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f8:	d102      	bne.n	8005600 <HAL_SPI_Receive+0x1d2>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d102      	bne.n	8005606 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005604:	e017      	b.n	8005636 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560a:	b29b      	uxth	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1cd      	bne.n	80055ac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	6839      	ldr	r1, [r7, #0]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fa45 	bl	8005aa4 <SPI_EndRxTransaction>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2220      	movs	r2, #32
 8005624:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	75fb      	strb	r3, [r7, #23]
 8005632:	e000      	b.n	8005636 <HAL_SPI_Receive+0x208>
  }

error :
 8005634:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005646:	7dfb      	ldrb	r3, [r7, #23]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08c      	sub	sp, #48	; 0x30
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800565e:	2301      	movs	r3, #1
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_SPI_TransmitReceive+0x26>
 8005672:	2302      	movs	r3, #2
 8005674:	e18a      	b.n	800598c <HAL_SPI_TransmitReceive+0x33c>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800567e:	f7fd f9f9 	bl	8002a74 <HAL_GetTick>
 8005682:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800568a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005694:	887b      	ldrh	r3, [r7, #2]
 8005696:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005698:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800569c:	2b01      	cmp	r3, #1
 800569e:	d00f      	beq.n	80056c0 <HAL_SPI_TransmitReceive+0x70>
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a6:	d107      	bne.n	80056b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d103      	bne.n	80056b8 <HAL_SPI_TransmitReceive+0x68>
 80056b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d003      	beq.n	80056c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80056b8:	2302      	movs	r3, #2
 80056ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80056be:	e15b      	b.n	8005978 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <HAL_SPI_TransmitReceive+0x82>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <HAL_SPI_TransmitReceive+0x82>
 80056cc:	887b      	ldrh	r3, [r7, #2]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d103      	bne.n	80056da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80056d8:	e14e      	b.n	8005978 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d003      	beq.n	80056ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2205      	movs	r2, #5
 80056ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	887a      	ldrh	r2, [r7, #2]
 80056fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	887a      	ldrh	r2, [r7, #2]
 8005704:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	887a      	ldrh	r2, [r7, #2]
 8005710:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	887a      	ldrh	r2, [r7, #2]
 8005716:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d007      	beq.n	8005742 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005740:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800574a:	d178      	bne.n	800583e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_SPI_TransmitReceive+0x10a>
 8005754:	8b7b      	ldrh	r3, [r7, #26]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d166      	bne.n	8005828 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	881a      	ldrh	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576a:	1c9a      	adds	r2, r3, #2
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005774:	b29b      	uxth	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800577e:	e053      	b.n	8005828 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b02      	cmp	r3, #2
 800578c:	d11b      	bne.n	80057c6 <HAL_SPI_TransmitReceive+0x176>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d016      	beq.n	80057c6 <HAL_SPI_TransmitReceive+0x176>
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	2b01      	cmp	r3, #1
 800579c:	d113      	bne.n	80057c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a2:	881a      	ldrh	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	1c9a      	adds	r2, r3, #2
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d119      	bne.n	8005808 <HAL_SPI_TransmitReceive+0x1b8>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d014      	beq.n	8005808 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	b292      	uxth	r2, r2
 80057ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	1c9a      	adds	r2, r3, #2
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005804:	2301      	movs	r3, #1
 8005806:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005808:	f7fd f934 	bl	8002a74 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005814:	429a      	cmp	r2, r3
 8005816:	d807      	bhi.n	8005828 <HAL_SPI_TransmitReceive+0x1d8>
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581e:	d003      	beq.n	8005828 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005826:	e0a7      	b.n	8005978 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1a6      	bne.n	8005780 <HAL_SPI_TransmitReceive+0x130>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1a1      	bne.n	8005780 <HAL_SPI_TransmitReceive+0x130>
 800583c:	e07c      	b.n	8005938 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <HAL_SPI_TransmitReceive+0x1fc>
 8005846:	8b7b      	ldrh	r3, [r7, #26]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d16b      	bne.n	8005924 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	330c      	adds	r3, #12
 8005856:	7812      	ldrb	r2, [r2, #0]
 8005858:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005868:	b29b      	uxth	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005872:	e057      	b.n	8005924 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b02      	cmp	r3, #2
 8005880:	d11c      	bne.n	80058bc <HAL_SPI_TransmitReceive+0x26c>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d017      	beq.n	80058bc <HAL_SPI_TransmitReceive+0x26c>
 800588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588e:	2b01      	cmp	r3, #1
 8005890:	d114      	bne.n	80058bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	330c      	adds	r3, #12
 800589c:	7812      	ldrb	r2, [r2, #0]
 800589e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d119      	bne.n	80058fe <HAL_SPI_TransmitReceive+0x2ae>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d014      	beq.n	80058fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058fa:	2301      	movs	r3, #1
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058fe:	f7fd f8b9 	bl	8002a74 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800590a:	429a      	cmp	r2, r3
 800590c:	d803      	bhi.n	8005916 <HAL_SPI_TransmitReceive+0x2c6>
 800590e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005914:	d102      	bne.n	800591c <HAL_SPI_TransmitReceive+0x2cc>
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	2b00      	cmp	r3, #0
 800591a:	d103      	bne.n	8005924 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005922:	e029      	b.n	8005978 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1a2      	bne.n	8005874 <HAL_SPI_TransmitReceive+0x224>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d19d      	bne.n	8005874 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800593a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f917 	bl	8005b70 <SPI_EndRxTxTransaction>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d006      	beq.n	8005956 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2220      	movs	r2, #32
 8005952:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005954:	e010      	b.n	8005978 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10b      	bne.n	8005976 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800595e:	2300      	movs	r3, #0
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	e000      	b.n	8005978 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005976:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005988:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800598c:	4618      	mov	r0, r3
 800598e:	3730      	adds	r7, #48	; 0x30
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	4613      	mov	r3, r2
 80059a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059a4:	f7fd f866 	bl	8002a74 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	4413      	add	r3, r2
 80059b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059b4:	f7fd f85e 	bl	8002a74 <HAL_GetTick>
 80059b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059ba:	4b39      	ldr	r3, [pc, #228]	; (8005aa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	015b      	lsls	r3, r3, #5
 80059c0:	0d1b      	lsrs	r3, r3, #20
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	fb02 f303 	mul.w	r3, r2, r3
 80059c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059ca:	e054      	b.n	8005a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d2:	d050      	beq.n	8005a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059d4:	f7fd f84e 	bl	8002a74 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d902      	bls.n	80059ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d13d      	bne.n	8005a66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a02:	d111      	bne.n	8005a28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a0c:	d004      	beq.n	8005a18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a16:	d107      	bne.n	8005a28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a30:	d10f      	bne.n	8005a52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e017      	b.n	8005a96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	bf0c      	ite	eq
 8005a86:	2301      	moveq	r3, #1
 8005a88:	2300      	movne	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d19b      	bne.n	80059cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3720      	adds	r7, #32
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000004 	.word	0x20000004

08005aa4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ab8:	d111      	bne.n	8005ade <SPI_EndRxTransaction+0x3a>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac2:	d004      	beq.n	8005ace <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005acc:	d107      	bne.n	8005ade <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005adc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ae6:	d12a      	bne.n	8005b3e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af0:	d012      	beq.n	8005b18 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2200      	movs	r2, #0
 8005afa:	2180      	movs	r1, #128	; 0x80
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7ff ff49 	bl	8005994 <SPI_WaitFlagStateUntilTimeout>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d02d      	beq.n	8005b64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0c:	f043 0220 	orr.w	r2, r3, #32
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e026      	b.n	8005b66 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	2101      	movs	r1, #1
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f7ff ff36 	bl	8005994 <SPI_WaitFlagStateUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d01a      	beq.n	8005b64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b32:	f043 0220 	orr.w	r2, r3, #32
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e013      	b.n	8005b66 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2200      	movs	r2, #0
 8005b46:	2101      	movs	r1, #1
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f7ff ff23 	bl	8005994 <SPI_WaitFlagStateUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b58:	f043 0220 	orr.w	r2, r3, #32
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e000      	b.n	8005b66 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b7c:	4b1b      	ldr	r3, [pc, #108]	; (8005bec <SPI_EndRxTxTransaction+0x7c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1b      	ldr	r2, [pc, #108]	; (8005bf0 <SPI_EndRxTxTransaction+0x80>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	0d5b      	lsrs	r3, r3, #21
 8005b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b8c:	fb02 f303 	mul.w	r3, r2, r3
 8005b90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b9a:	d112      	bne.n	8005bc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2180      	movs	r1, #128	; 0x80
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f7ff fef4 	bl	8005994 <SPI_WaitFlagStateUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d016      	beq.n	8005be0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb6:	f043 0220 	orr.w	r2, r3, #32
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e00f      	b.n	8005be2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00a      	beq.n	8005bde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd8:	2b80      	cmp	r3, #128	; 0x80
 8005bda:	d0f2      	beq.n	8005bc2 <SPI_EndRxTxTransaction+0x52>
 8005bdc:	e000      	b.n	8005be0 <SPI_EndRxTxTransaction+0x70>
        break;
 8005bde:	bf00      	nop
  }

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000004 	.word	0x20000004
 8005bf0:	165e9f81 	.word	0x165e9f81

08005bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e041      	b.n	8005c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f839 	bl	8005c92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f000 f9ca 	bl	8005fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
	...

08005ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d001      	beq.n	8005cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e044      	b.n	8005d4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 0201 	orr.w	r2, r2, #1
 8005cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a1e      	ldr	r2, [pc, #120]	; (8005d58 <HAL_TIM_Base_Start_IT+0xb0>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d018      	beq.n	8005d14 <HAL_TIM_Base_Start_IT+0x6c>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cea:	d013      	beq.n	8005d14 <HAL_TIM_Base_Start_IT+0x6c>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a1a      	ldr	r2, [pc, #104]	; (8005d5c <HAL_TIM_Base_Start_IT+0xb4>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00e      	beq.n	8005d14 <HAL_TIM_Base_Start_IT+0x6c>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a19      	ldr	r2, [pc, #100]	; (8005d60 <HAL_TIM_Base_Start_IT+0xb8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d009      	beq.n	8005d14 <HAL_TIM_Base_Start_IT+0x6c>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <HAL_TIM_Base_Start_IT+0xbc>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <HAL_TIM_Base_Start_IT+0x6c>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a16      	ldr	r2, [pc, #88]	; (8005d68 <HAL_TIM_Base_Start_IT+0xc0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d111      	bne.n	8005d38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b06      	cmp	r3, #6
 8005d24:	d010      	beq.n	8005d48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 0201 	orr.w	r2, r2, #1
 8005d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d36:	e007      	b.n	8005d48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40010000 	.word	0x40010000
 8005d5c:	40000400 	.word	0x40000400
 8005d60:	40000800 	.word	0x40000800
 8005d64:	40000c00 	.word	0x40000c00
 8005d68:	40014000 	.word	0x40014000

08005d6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d122      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d11b      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0202 	mvn.w	r2, #2
 8005d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f8ee 	bl	8005f90 <HAL_TIM_IC_CaptureCallback>
 8005db4:	e005      	b.n	8005dc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f8e0 	bl	8005f7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f8f1 	bl	8005fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0304 	and.w	r3, r3, #4
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d122      	bne.n	8005e1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d11b      	bne.n	8005e1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0204 	mvn.w	r2, #4
 8005dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2202      	movs	r2, #2
 8005df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f8c4 	bl	8005f90 <HAL_TIM_IC_CaptureCallback>
 8005e08:	e005      	b.n	8005e16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f8b6 	bl	8005f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f8c7 	bl	8005fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	d122      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f003 0308 	and.w	r3, r3, #8
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d11b      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0208 	mvn.w	r2, #8
 8005e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2204      	movs	r2, #4
 8005e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f89a 	bl	8005f90 <HAL_TIM_IC_CaptureCallback>
 8005e5c:	e005      	b.n	8005e6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f88c 	bl	8005f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f89d 	bl	8005fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0310 	and.w	r3, r3, #16
 8005e7a:	2b10      	cmp	r3, #16
 8005e7c:	d122      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d11b      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0210 	mvn.w	r2, #16
 8005e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2208      	movs	r2, #8
 8005e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f870 	bl	8005f90 <HAL_TIM_IC_CaptureCallback>
 8005eb0:	e005      	b.n	8005ebe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f862 	bl	8005f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f873 	bl	8005fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d107      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0201 	mvn.w	r2, #1
 8005ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fc f974 	bl	80021d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efa:	2b80      	cmp	r3, #128	; 0x80
 8005efc:	d10e      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f08:	2b80      	cmp	r3, #128	; 0x80
 8005f0a:	d107      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f8e2 	bl	80060e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f26:	2b40      	cmp	r3, #64	; 0x40
 8005f28:	d10e      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f34:	2b40      	cmp	r3, #64	; 0x40
 8005f36:	d107      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f838 	bl	8005fb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	d10e      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0320 	and.w	r3, r3, #32
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	d107      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0220 	mvn.w	r2, #32
 8005f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f8ac 	bl	80060cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a34      	ldr	r2, [pc, #208]	; (80060b0 <TIM_Base_SetConfig+0xe4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00f      	beq.n	8006004 <TIM_Base_SetConfig+0x38>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fea:	d00b      	beq.n	8006004 <TIM_Base_SetConfig+0x38>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a31      	ldr	r2, [pc, #196]	; (80060b4 <TIM_Base_SetConfig+0xe8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d007      	beq.n	8006004 <TIM_Base_SetConfig+0x38>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a30      	ldr	r2, [pc, #192]	; (80060b8 <TIM_Base_SetConfig+0xec>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d003      	beq.n	8006004 <TIM_Base_SetConfig+0x38>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a2f      	ldr	r2, [pc, #188]	; (80060bc <TIM_Base_SetConfig+0xf0>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d108      	bne.n	8006016 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a25      	ldr	r2, [pc, #148]	; (80060b0 <TIM_Base_SetConfig+0xe4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01b      	beq.n	8006056 <TIM_Base_SetConfig+0x8a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006024:	d017      	beq.n	8006056 <TIM_Base_SetConfig+0x8a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a22      	ldr	r2, [pc, #136]	; (80060b4 <TIM_Base_SetConfig+0xe8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <TIM_Base_SetConfig+0x8a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a21      	ldr	r2, [pc, #132]	; (80060b8 <TIM_Base_SetConfig+0xec>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00f      	beq.n	8006056 <TIM_Base_SetConfig+0x8a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a20      	ldr	r2, [pc, #128]	; (80060bc <TIM_Base_SetConfig+0xf0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00b      	beq.n	8006056 <TIM_Base_SetConfig+0x8a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a1f      	ldr	r2, [pc, #124]	; (80060c0 <TIM_Base_SetConfig+0xf4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d007      	beq.n	8006056 <TIM_Base_SetConfig+0x8a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a1e      	ldr	r2, [pc, #120]	; (80060c4 <TIM_Base_SetConfig+0xf8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d003      	beq.n	8006056 <TIM_Base_SetConfig+0x8a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a1d      	ldr	r2, [pc, #116]	; (80060c8 <TIM_Base_SetConfig+0xfc>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d108      	bne.n	8006068 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800605c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a08      	ldr	r2, [pc, #32]	; (80060b0 <TIM_Base_SetConfig+0xe4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d103      	bne.n	800609c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	615a      	str	r2, [r3, #20]
}
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40010000 	.word	0x40010000
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40000c00 	.word	0x40000c00
 80060c0:	40014000 	.word	0x40014000
 80060c4:	40014400 	.word	0x40014400
 80060c8:	40014800 	.word	0x40014800

080060cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e03f      	b.n	8006186 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fc fa2e 	bl	800257c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2224      	movs	r2, #36	; 0x24
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fd7f 	bl	8006c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800614c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695a      	ldr	r2, [r3, #20]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800615c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800616c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b08a      	sub	sp, #40	; 0x28
 8006192:	af02      	add	r7, sp, #8
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	603b      	str	r3, [r7, #0]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d17c      	bne.n	80062a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <HAL_UART_Transmit+0x2c>
 80061b4:	88fb      	ldrh	r3, [r7, #6]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e075      	b.n	80062aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_UART_Transmit+0x3e>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e06e      	b.n	80062aa <HAL_UART_Transmit+0x11c>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2221      	movs	r2, #33	; 0x21
 80061de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061e2:	f7fc fc47 	bl	8002a74 <HAL_GetTick>
 80061e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	88fa      	ldrh	r2, [r7, #6]
 80061ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	88fa      	ldrh	r2, [r7, #6]
 80061f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fc:	d108      	bne.n	8006210 <HAL_UART_Transmit+0x82>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d104      	bne.n	8006210 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	e003      	b.n	8006218 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006214:	2300      	movs	r3, #0
 8006216:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006220:	e02a      	b.n	8006278 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2200      	movs	r2, #0
 800622a:	2180      	movs	r1, #128	; 0x80
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 fb01 	bl	8006834 <UART_WaitOnFlagUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e036      	b.n	80062aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10b      	bne.n	800625a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006250:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	3302      	adds	r3, #2
 8006256:	61bb      	str	r3, [r7, #24]
 8006258:	e007      	b.n	800626a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	781a      	ldrb	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	3301      	adds	r3, #1
 8006268:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800626e:	b29b      	uxth	r3, r3
 8006270:	3b01      	subs	r3, #1
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1cf      	bne.n	8006222 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2200      	movs	r2, #0
 800628a:	2140      	movs	r1, #64	; 0x40
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 fad1 	bl	8006834 <UART_WaitOnFlagUntilTimeout>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e006      	b.n	80062aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	e000      	b.n	80062aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80062a8:	2302      	movs	r3, #2
  }
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3720      	adds	r7, #32
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	4613      	mov	r3, r2
 80062be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	d11d      	bne.n	8006308 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <HAL_UART_Receive_DMA+0x26>
 80062d2:	88fb      	ldrh	r3, [r7, #6]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e016      	b.n	800630a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <HAL_UART_Receive_DMA+0x38>
 80062e6:	2302      	movs	r3, #2
 80062e8:	e00f      	b.n	800630a <HAL_UART_Receive_DMA+0x58>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80062f8:	88fb      	ldrh	r3, [r7, #6]
 80062fa:	461a      	mov	r2, r3
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 fae2 	bl	80068c8 <UART_Start_Receive_DMA>
 8006304:	4603      	mov	r3, r0
 8006306:	e000      	b.n	800630a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006308:	2302      	movs	r3, #2
  }
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	; 0x28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006334:	2300      	movs	r3, #0
 8006336:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006338:	2300      	movs	r3, #0
 800633a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10d      	bne.n	8006366 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	f003 0320 	and.w	r3, r3, #32
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_UART_IRQHandler+0x52>
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fbd5 	bl	8006b0e <UART_Receive_IT>
      return;
 8006364:	e17c      	b.n	8006660 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 80b1 	beq.w	80064d0 <HAL_UART_IRQHandler+0x1bc>
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d105      	bne.n	8006384 <HAL_UART_IRQHandler+0x70>
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 80a6 	beq.w	80064d0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <HAL_UART_IRQHandler+0x90>
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006394:	2b00      	cmp	r3, #0
 8006396:	d005      	beq.n	80063a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639c:	f043 0201 	orr.w	r2, r3, #1
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <HAL_UART_IRQHandler+0xb0>
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063bc:	f043 0202 	orr.w	r2, r3, #2
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <HAL_UART_IRQHandler+0xd0>
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d005      	beq.n	80063e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063dc:	f043 0204 	orr.w	r2, r3, #4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00f      	beq.n	800640e <HAL_UART_IRQHandler+0xfa>
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d104      	bne.n	8006402 <HAL_UART_IRQHandler+0xee>
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d005      	beq.n	800640e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	f043 0208 	orr.w	r2, r3, #8
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 811f 	beq.w	8006656 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <HAL_UART_IRQHandler+0x11e>
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	f003 0320 	and.w	r3, r3, #32
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fb6e 	bl	8006b0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643c:	2b40      	cmp	r3, #64	; 0x40
 800643e:	bf0c      	ite	eq
 8006440:	2301      	moveq	r3, #1
 8006442:	2300      	movne	r3, #0
 8006444:	b2db      	uxtb	r3, r3
 8006446:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644c:	f003 0308 	and.w	r3, r3, #8
 8006450:	2b00      	cmp	r3, #0
 8006452:	d102      	bne.n	800645a <HAL_UART_IRQHandler+0x146>
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d031      	beq.n	80064be <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 faae 	bl	80069bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646a:	2b40      	cmp	r3, #64	; 0x40
 800646c:	d123      	bne.n	80064b6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695a      	ldr	r2, [r3, #20]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800647c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006482:	2b00      	cmp	r3, #0
 8006484:	d013      	beq.n	80064ae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	4a77      	ldr	r2, [pc, #476]	; (8006668 <HAL_UART_IRQHandler+0x354>)
 800648c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006492:	4618      	mov	r0, r3
 8006494:	f7fc fd76 	bl	8002f84 <HAL_DMA_Abort_IT>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d016      	beq.n	80064cc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064a8:	4610      	mov	r0, r2
 80064aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ac:	e00e      	b.n	80064cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f8fa 	bl	80066a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b4:	e00a      	b.n	80064cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f8f6 	bl	80066a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064bc:	e006      	b.n	80064cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f8f2 	bl	80066a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80064ca:	e0c4      	b.n	8006656 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064cc:	bf00      	nop
    return;
 80064ce:	e0c2      	b.n	8006656 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	f040 80a2 	bne.w	800661e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	f003 0310 	and.w	r3, r3, #16
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 809c 	beq.w	800661e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	f003 0310 	and.w	r3, r3, #16
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 8096 	beq.w	800661e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006512:	2b40      	cmp	r3, #64	; 0x40
 8006514:	d14f      	bne.n	80065b6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006520:	8a3b      	ldrh	r3, [r7, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 8099 	beq.w	800665a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800652c:	8a3a      	ldrh	r2, [r7, #16]
 800652e:	429a      	cmp	r2, r3
 8006530:	f080 8093 	bcs.w	800665a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8a3a      	ldrh	r2, [r7, #16]
 8006538:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006544:	d02b      	beq.n	800659e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006554:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	695a      	ldr	r2, [r3, #20]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0201 	bic.w	r2, r2, #1
 8006564:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695a      	ldr	r2, [r3, #20]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006574:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2220      	movs	r2, #32
 800657a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0210 	bic.w	r2, r2, #16
 8006592:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	4618      	mov	r0, r3
 800659a:	f7fc fc83 	bl	8002ea4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	4619      	mov	r1, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f884 	bl	80066bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80065b4:	e051      	b.n	800665a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065be:	b29b      	uxth	r3, r3
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d047      	beq.n	800665e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80065ce:	8a7b      	ldrh	r3, [r7, #18]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d044      	beq.n	800665e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065e2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695a      	ldr	r2, [r3, #20]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0201 	bic.w	r2, r2, #1
 80065f2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 0210 	bic.w	r2, r2, #16
 8006610:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006612:	8a7b      	ldrh	r3, [r7, #18]
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f850 	bl	80066bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800661c:	e01f      	b.n	800665e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <HAL_UART_IRQHandler+0x326>
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fa03 	bl	8006a3e <UART_Transmit_IT>
    return;
 8006638:	e012      	b.n	8006660 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00d      	beq.n	8006660 <HAL_UART_IRQHandler+0x34c>
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664a:	2b00      	cmp	r3, #0
 800664c:	d008      	beq.n	8006660 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fa45 	bl	8006ade <UART_EndTransmit_IT>
    return;
 8006654:	e004      	b.n	8006660 <HAL_UART_IRQHandler+0x34c>
    return;
 8006656:	bf00      	nop
 8006658:	e002      	b.n	8006660 <HAL_UART_IRQHandler+0x34c>
      return;
 800665a:	bf00      	nop
 800665c:	e000      	b.n	8006660 <HAL_UART_IRQHandler+0x34c>
      return;
 800665e:	bf00      	nop
  }
}
 8006660:	3728      	adds	r7, #40	; 0x28
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	08006a17 	.word	0x08006a17

0800666c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d12a      	bne.n	8006746 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006704:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695a      	ldr	r2, [r3, #20]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0201 	bic.w	r2, r2, #1
 8006714:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	695a      	ldr	r2, [r3, #20]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006724:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2220      	movs	r2, #32
 800672a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006732:	2b01      	cmp	r3, #1
 8006734:	d107      	bne.n	8006746 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0210 	bic.w	r2, r2, #16
 8006744:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	2b01      	cmp	r3, #1
 800674c:	d106      	bne.n	800675c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006752:	4619      	mov	r1, r3
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7ff ffb1 	bl	80066bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800675a:	e002      	b.n	8006762 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7ff ff8f 	bl	8006680 <HAL_UART_RxCpltCallback>
}
 8006762:	bf00      	nop
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006776:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677c:	2b01      	cmp	r3, #1
 800677e:	d108      	bne.n	8006792 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006784:	085b      	lsrs	r3, r3, #1
 8006786:	b29b      	uxth	r3, r3
 8006788:	4619      	mov	r1, r3
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f7ff ff96 	bl	80066bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006790:	e002      	b.n	8006798 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff ff7e 	bl	8006694 <HAL_UART_RxHalfCpltCallback>
}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067bc:	2b80      	cmp	r3, #128	; 0x80
 80067be:	bf0c      	ite	eq
 80067c0:	2301      	moveq	r3, #1
 80067c2:	2300      	movne	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b21      	cmp	r3, #33	; 0x21
 80067d2:	d108      	bne.n	80067e6 <UART_DMAError+0x46>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d005      	beq.n	80067e6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2200      	movs	r2, #0
 80067de:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80067e0:	68b8      	ldr	r0, [r7, #8]
 80067e2:	f000 f8d5 	bl	8006990 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f0:	2b40      	cmp	r3, #64	; 0x40
 80067f2:	bf0c      	ite	eq
 80067f4:	2301      	moveq	r3, #1
 80067f6:	2300      	movne	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b22      	cmp	r3, #34	; 0x22
 8006806:	d108      	bne.n	800681a <UART_DMAError+0x7a>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2200      	movs	r2, #0
 8006812:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006814:	68b8      	ldr	r0, [r7, #8]
 8006816:	f000 f8d1 	bl	80069bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	f043 0210 	orr.w	r2, r3, #16
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006826:	68b8      	ldr	r0, [r7, #8]
 8006828:	f7ff ff3e 	bl	80066a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800682c:	bf00      	nop
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	4613      	mov	r3, r2
 8006842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006844:	e02c      	b.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684c:	d028      	beq.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d007      	beq.n	8006864 <UART_WaitOnFlagUntilTimeout+0x30>
 8006854:	f7fc f90e 	bl	8002a74 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	429a      	cmp	r2, r3
 8006862:	d21d      	bcs.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006872:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	695a      	ldr	r2, [r3, #20]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0201 	bic.w	r2, r2, #1
 8006882:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2220      	movs	r2, #32
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2220      	movs	r2, #32
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e00f      	b.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	4013      	ands	r3, r2
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	bf0c      	ite	eq
 80068b0:	2301      	moveq	r3, #1
 80068b2:	2300      	movne	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d0c3      	beq.n	8006846 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	4613      	mov	r3, r2
 80068d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	88fa      	ldrh	r2, [r7, #6]
 80068e0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2222      	movs	r2, #34	; 0x22
 80068ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	4a23      	ldr	r2, [pc, #140]	; (8006984 <UART_Start_Receive_DMA+0xbc>)
 80068f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	4a22      	ldr	r2, [pc, #136]	; (8006988 <UART_Start_Receive_DMA+0xc0>)
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	4a21      	ldr	r2, [pc, #132]	; (800698c <UART_Start_Receive_DMA+0xc4>)
 8006906:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690c:	2200      	movs	r2, #0
 800690e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006910:	f107 0308 	add.w	r3, r7, #8
 8006914:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3304      	adds	r3, #4
 8006920:	4619      	mov	r1, r3
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	88fb      	ldrh	r3, [r7, #6]
 8006928:	f7fc fa64 	bl	8002df4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800692c:	2300      	movs	r3, #0
 800692e:	613b      	str	r3, [r7, #16]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	613b      	str	r3, [r7, #16]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006958:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695a      	ldr	r2, [r3, #20]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0201 	orr.w	r2, r2, #1
 8006968:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	695a      	ldr	r2, [r3, #20]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006978:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	080066d5 	.word	0x080066d5
 8006988:	0800676b 	.word	0x0800676b
 800698c:	080067a1 	.word	0x080067a1

08006990 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80069a6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68da      	ldr	r2, [r3, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80069d2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	695a      	ldr	r2, [r3, #20]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0201 	bic.w	r2, r2, #1
 80069e2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d107      	bne.n	80069fc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0210 	bic.w	r2, r2, #16
 80069fa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7ff fe39 	bl	80066a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b085      	sub	sp, #20
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b21      	cmp	r3, #33	; 0x21
 8006a50:	d13e      	bne.n	8006ad0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5a:	d114      	bne.n	8006a86 <UART_Transmit_IT+0x48>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d110      	bne.n	8006a86 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	1c9a      	adds	r2, r3, #2
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	621a      	str	r2, [r3, #32]
 8006a84:	e008      	b.n	8006a98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	1c59      	adds	r1, r3, #1
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6211      	str	r1, [r2, #32]
 8006a90:	781a      	ldrb	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10f      	bne.n	8006acc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	e000      	b.n	8006ad2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ad0:	2302      	movs	r3, #2
  }
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006af4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7ff fdb4 	bl	800666c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b22      	cmp	r3, #34	; 0x22
 8006b20:	f040 8087 	bne.w	8006c32 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2c:	d117      	bne.n	8006b5e <UART_Receive_IT+0x50>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d113      	bne.n	8006b5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b56:	1c9a      	adds	r2, r3, #2
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b5c:	e026      	b.n	8006bac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b62:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b70:	d007      	beq.n	8006b82 <UART_Receive_IT+0x74>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10a      	bne.n	8006b90 <UART_Receive_IT+0x82>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d106      	bne.n	8006b90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	e008      	b.n	8006ba2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d136      	bne.n	8006c2e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0220 	bic.w	r2, r2, #32
 8006bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695a      	ldr	r2, [r3, #20]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0201 	bic.w	r2, r2, #1
 8006bee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d10e      	bne.n	8006c1e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0210 	bic.w	r2, r2, #16
 8006c0e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7ff fd50 	bl	80066bc <HAL_UARTEx_RxEventCallback>
 8006c1c:	e002      	b.n	8006c24 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff fd2e 	bl	8006680 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e002      	b.n	8006c34 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	e000      	b.n	8006c34 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006c32:	2302      	movs	r3, #2
  }
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c40:	b09f      	sub	sp, #124	; 0x7c
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c52:	68d9      	ldr	r1, [r3, #12]
 8006c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	ea40 0301 	orr.w	r3, r0, r1
 8006c5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c60:	689a      	ldr	r2, [r3, #8]
 8006c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	431a      	orrs	r2, r3
 8006c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c80:	f021 010c 	bic.w	r1, r1, #12
 8006c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c8a:	430b      	orrs	r3, r1
 8006c8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c9a:	6999      	ldr	r1, [r3, #24]
 8006c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	ea40 0301 	orr.w	r3, r0, r1
 8006ca4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	4bc5      	ldr	r3, [pc, #788]	; (8006fc0 <UART_SetConfig+0x384>)
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d004      	beq.n	8006cba <UART_SetConfig+0x7e>
 8006cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	4bc3      	ldr	r3, [pc, #780]	; (8006fc4 <UART_SetConfig+0x388>)
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d103      	bne.n	8006cc2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cba:	f7fe f9ad 	bl	8005018 <HAL_RCC_GetPCLK2Freq>
 8006cbe:	6778      	str	r0, [r7, #116]	; 0x74
 8006cc0:	e002      	b.n	8006cc8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cc2:	f7fe f995 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 8006cc6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cd0:	f040 80b6 	bne.w	8006e40 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cd6:	461c      	mov	r4, r3
 8006cd8:	f04f 0500 	mov.w	r5, #0
 8006cdc:	4622      	mov	r2, r4
 8006cde:	462b      	mov	r3, r5
 8006ce0:	1891      	adds	r1, r2, r2
 8006ce2:	6439      	str	r1, [r7, #64]	; 0x40
 8006ce4:	415b      	adcs	r3, r3
 8006ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cec:	1912      	adds	r2, r2, r4
 8006cee:	eb45 0303 	adc.w	r3, r5, r3
 8006cf2:	f04f 0000 	mov.w	r0, #0
 8006cf6:	f04f 0100 	mov.w	r1, #0
 8006cfa:	00d9      	lsls	r1, r3, #3
 8006cfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d00:	00d0      	lsls	r0, r2, #3
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	1911      	adds	r1, r2, r4
 8006d08:	6639      	str	r1, [r7, #96]	; 0x60
 8006d0a:	416b      	adcs	r3, r5
 8006d0c:	667b      	str	r3, [r7, #100]	; 0x64
 8006d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	461a      	mov	r2, r3
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	1891      	adds	r1, r2, r2
 8006d1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d1c:	415b      	adcs	r3, r3
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d24:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006d28:	f7f9 ffb6 	bl	8000c98 <__aeabi_uldivmod>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4ba5      	ldr	r3, [pc, #660]	; (8006fc8 <UART_SetConfig+0x38c>)
 8006d32:	fba3 2302 	umull	r2, r3, r3, r2
 8006d36:	095b      	lsrs	r3, r3, #5
 8006d38:	011e      	lsls	r6, r3, #4
 8006d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d3c:	461c      	mov	r4, r3
 8006d3e:	f04f 0500 	mov.w	r5, #0
 8006d42:	4622      	mov	r2, r4
 8006d44:	462b      	mov	r3, r5
 8006d46:	1891      	adds	r1, r2, r2
 8006d48:	6339      	str	r1, [r7, #48]	; 0x30
 8006d4a:	415b      	adcs	r3, r3
 8006d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d52:	1912      	adds	r2, r2, r4
 8006d54:	eb45 0303 	adc.w	r3, r5, r3
 8006d58:	f04f 0000 	mov.w	r0, #0
 8006d5c:	f04f 0100 	mov.w	r1, #0
 8006d60:	00d9      	lsls	r1, r3, #3
 8006d62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d66:	00d0      	lsls	r0, r2, #3
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	1911      	adds	r1, r2, r4
 8006d6e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d70:	416b      	adcs	r3, r5
 8006d72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	f04f 0300 	mov.w	r3, #0
 8006d7e:	1891      	adds	r1, r2, r2
 8006d80:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d82:	415b      	adcs	r3, r3
 8006d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006d8e:	f7f9 ff83 	bl	8000c98 <__aeabi_uldivmod>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	4b8c      	ldr	r3, [pc, #560]	; (8006fc8 <UART_SetConfig+0x38c>)
 8006d98:	fba3 1302 	umull	r1, r3, r3, r2
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	2164      	movs	r1, #100	; 0x64
 8006da0:	fb01 f303 	mul.w	r3, r1, r3
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	3332      	adds	r3, #50	; 0x32
 8006daa:	4a87      	ldr	r2, [pc, #540]	; (8006fc8 <UART_SetConfig+0x38c>)
 8006dac:	fba2 2303 	umull	r2, r3, r2, r3
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006db8:	441e      	add	r6, r3
 8006dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f04f 0100 	mov.w	r1, #0
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	1894      	adds	r4, r2, r2
 8006dc8:	623c      	str	r4, [r7, #32]
 8006dca:	415b      	adcs	r3, r3
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dd2:	1812      	adds	r2, r2, r0
 8006dd4:	eb41 0303 	adc.w	r3, r1, r3
 8006dd8:	f04f 0400 	mov.w	r4, #0
 8006ddc:	f04f 0500 	mov.w	r5, #0
 8006de0:	00dd      	lsls	r5, r3, #3
 8006de2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006de6:	00d4      	lsls	r4, r2, #3
 8006de8:	4622      	mov	r2, r4
 8006dea:	462b      	mov	r3, r5
 8006dec:	1814      	adds	r4, r2, r0
 8006dee:	653c      	str	r4, [r7, #80]	; 0x50
 8006df0:	414b      	adcs	r3, r1
 8006df2:	657b      	str	r3, [r7, #84]	; 0x54
 8006df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f04f 0300 	mov.w	r3, #0
 8006dfe:	1891      	adds	r1, r2, r2
 8006e00:	61b9      	str	r1, [r7, #24]
 8006e02:	415b      	adcs	r3, r3
 8006e04:	61fb      	str	r3, [r7, #28]
 8006e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e0e:	f7f9 ff43 	bl	8000c98 <__aeabi_uldivmod>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4b6c      	ldr	r3, [pc, #432]	; (8006fc8 <UART_SetConfig+0x38c>)
 8006e18:	fba3 1302 	umull	r1, r3, r3, r2
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	2164      	movs	r1, #100	; 0x64
 8006e20:	fb01 f303 	mul.w	r3, r1, r3
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	3332      	adds	r3, #50	; 0x32
 8006e2a:	4a67      	ldr	r2, [pc, #412]	; (8006fc8 <UART_SetConfig+0x38c>)
 8006e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	f003 0207 	and.w	r2, r3, #7
 8006e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4432      	add	r2, r6
 8006e3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e3e:	e0b9      	b.n	8006fb4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e42:	461c      	mov	r4, r3
 8006e44:	f04f 0500 	mov.w	r5, #0
 8006e48:	4622      	mov	r2, r4
 8006e4a:	462b      	mov	r3, r5
 8006e4c:	1891      	adds	r1, r2, r2
 8006e4e:	6139      	str	r1, [r7, #16]
 8006e50:	415b      	adcs	r3, r3
 8006e52:	617b      	str	r3, [r7, #20]
 8006e54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e58:	1912      	adds	r2, r2, r4
 8006e5a:	eb45 0303 	adc.w	r3, r5, r3
 8006e5e:	f04f 0000 	mov.w	r0, #0
 8006e62:	f04f 0100 	mov.w	r1, #0
 8006e66:	00d9      	lsls	r1, r3, #3
 8006e68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e6c:	00d0      	lsls	r0, r2, #3
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	eb12 0804 	adds.w	r8, r2, r4
 8006e76:	eb43 0905 	adc.w	r9, r3, r5
 8006e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f04f 0100 	mov.w	r1, #0
 8006e84:	f04f 0200 	mov.w	r2, #0
 8006e88:	f04f 0300 	mov.w	r3, #0
 8006e8c:	008b      	lsls	r3, r1, #2
 8006e8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e92:	0082      	lsls	r2, r0, #2
 8006e94:	4640      	mov	r0, r8
 8006e96:	4649      	mov	r1, r9
 8006e98:	f7f9 fefe 	bl	8000c98 <__aeabi_uldivmod>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4b49      	ldr	r3, [pc, #292]	; (8006fc8 <UART_SetConfig+0x38c>)
 8006ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	011e      	lsls	r6, r3, #4
 8006eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eac:	4618      	mov	r0, r3
 8006eae:	f04f 0100 	mov.w	r1, #0
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	1894      	adds	r4, r2, r2
 8006eb8:	60bc      	str	r4, [r7, #8]
 8006eba:	415b      	adcs	r3, r3
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ec2:	1812      	adds	r2, r2, r0
 8006ec4:	eb41 0303 	adc.w	r3, r1, r3
 8006ec8:	f04f 0400 	mov.w	r4, #0
 8006ecc:	f04f 0500 	mov.w	r5, #0
 8006ed0:	00dd      	lsls	r5, r3, #3
 8006ed2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ed6:	00d4      	lsls	r4, r2, #3
 8006ed8:	4622      	mov	r2, r4
 8006eda:	462b      	mov	r3, r5
 8006edc:	1814      	adds	r4, r2, r0
 8006ede:	64bc      	str	r4, [r7, #72]	; 0x48
 8006ee0:	414b      	adcs	r3, r1
 8006ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f04f 0100 	mov.w	r1, #0
 8006eee:	f04f 0200 	mov.w	r2, #0
 8006ef2:	f04f 0300 	mov.w	r3, #0
 8006ef6:	008b      	lsls	r3, r1, #2
 8006ef8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006efc:	0082      	lsls	r2, r0, #2
 8006efe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f02:	f7f9 fec9 	bl	8000c98 <__aeabi_uldivmod>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4b2f      	ldr	r3, [pc, #188]	; (8006fc8 <UART_SetConfig+0x38c>)
 8006f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f10:	095b      	lsrs	r3, r3, #5
 8006f12:	2164      	movs	r1, #100	; 0x64
 8006f14:	fb01 f303 	mul.w	r3, r1, r3
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	3332      	adds	r3, #50	; 0x32
 8006f1e:	4a2a      	ldr	r2, [pc, #168]	; (8006fc8 <UART_SetConfig+0x38c>)
 8006f20:	fba2 2303 	umull	r2, r3, r2, r3
 8006f24:	095b      	lsrs	r3, r3, #5
 8006f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f2a:	441e      	add	r6, r3
 8006f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f04f 0100 	mov.w	r1, #0
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	1894      	adds	r4, r2, r2
 8006f3a:	603c      	str	r4, [r7, #0]
 8006f3c:	415b      	adcs	r3, r3
 8006f3e:	607b      	str	r3, [r7, #4]
 8006f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f44:	1812      	adds	r2, r2, r0
 8006f46:	eb41 0303 	adc.w	r3, r1, r3
 8006f4a:	f04f 0400 	mov.w	r4, #0
 8006f4e:	f04f 0500 	mov.w	r5, #0
 8006f52:	00dd      	lsls	r5, r3, #3
 8006f54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f58:	00d4      	lsls	r4, r2, #3
 8006f5a:	4622      	mov	r2, r4
 8006f5c:	462b      	mov	r3, r5
 8006f5e:	eb12 0a00 	adds.w	sl, r2, r0
 8006f62:	eb43 0b01 	adc.w	fp, r3, r1
 8006f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f04f 0100 	mov.w	r1, #0
 8006f70:	f04f 0200 	mov.w	r2, #0
 8006f74:	f04f 0300 	mov.w	r3, #0
 8006f78:	008b      	lsls	r3, r1, #2
 8006f7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f7e:	0082      	lsls	r2, r0, #2
 8006f80:	4650      	mov	r0, sl
 8006f82:	4659      	mov	r1, fp
 8006f84:	f7f9 fe88 	bl	8000c98 <__aeabi_uldivmod>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4b0e      	ldr	r3, [pc, #56]	; (8006fc8 <UART_SetConfig+0x38c>)
 8006f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8006f92:	095b      	lsrs	r3, r3, #5
 8006f94:	2164      	movs	r1, #100	; 0x64
 8006f96:	fb01 f303 	mul.w	r3, r1, r3
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	3332      	adds	r3, #50	; 0x32
 8006fa0:	4a09      	ldr	r2, [pc, #36]	; (8006fc8 <UART_SetConfig+0x38c>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	095b      	lsrs	r3, r3, #5
 8006fa8:	f003 020f 	and.w	r2, r3, #15
 8006fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4432      	add	r2, r6
 8006fb2:	609a      	str	r2, [r3, #8]
}
 8006fb4:	bf00      	nop
 8006fb6:	377c      	adds	r7, #124	; 0x7c
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fbe:	bf00      	nop
 8006fc0:	40011000 	.word	0x40011000
 8006fc4:	40011400 	.word	0x40011400
 8006fc8:	51eb851f 	.word	0x51eb851f

08006fcc <__NVIC_SetPriority>:
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	6039      	str	r1, [r7, #0]
 8006fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	db0a      	blt.n	8006ff6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	490c      	ldr	r1, [pc, #48]	; (8007018 <__NVIC_SetPriority+0x4c>)
 8006fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fea:	0112      	lsls	r2, r2, #4
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	440b      	add	r3, r1
 8006ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006ff4:	e00a      	b.n	800700c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	4908      	ldr	r1, [pc, #32]	; (800701c <__NVIC_SetPriority+0x50>)
 8006ffc:	79fb      	ldrb	r3, [r7, #7]
 8006ffe:	f003 030f 	and.w	r3, r3, #15
 8007002:	3b04      	subs	r3, #4
 8007004:	0112      	lsls	r2, r2, #4
 8007006:	b2d2      	uxtb	r2, r2
 8007008:	440b      	add	r3, r1
 800700a:	761a      	strb	r2, [r3, #24]
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	e000e100 	.word	0xe000e100
 800701c:	e000ed00 	.word	0xe000ed00

08007020 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007024:	4b05      	ldr	r3, [pc, #20]	; (800703c <SysTick_Handler+0x1c>)
 8007026:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007028:	f001 fcfe 	bl	8008a28 <xTaskGetSchedulerState>
 800702c:	4603      	mov	r3, r0
 800702e:	2b01      	cmp	r3, #1
 8007030:	d001      	beq.n	8007036 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007032:	f002 fbe9 	bl	8009808 <xPortSysTickHandler>
  }
}
 8007036:	bf00      	nop
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	e000e010 	.word	0xe000e010

08007040 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007044:	2100      	movs	r1, #0
 8007046:	f06f 0004 	mvn.w	r0, #4
 800704a:	f7ff ffbf 	bl	8006fcc <__NVIC_SetPriority>
#endif
}
 800704e:	bf00      	nop
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800705a:	f3ef 8305 	mrs	r3, IPSR
 800705e:	603b      	str	r3, [r7, #0]
  return(result);
 8007060:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007066:	f06f 0305 	mvn.w	r3, #5
 800706a:	607b      	str	r3, [r7, #4]
 800706c:	e00c      	b.n	8007088 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800706e:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <osKernelInitialize+0x44>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d105      	bne.n	8007082 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007076:	4b08      	ldr	r3, [pc, #32]	; (8007098 <osKernelInitialize+0x44>)
 8007078:	2201      	movs	r2, #1
 800707a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800707c:	2300      	movs	r3, #0
 800707e:	607b      	str	r3, [r7, #4]
 8007080:	e002      	b.n	8007088 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007082:	f04f 33ff 	mov.w	r3, #4294967295
 8007086:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007088:	687b      	ldr	r3, [r7, #4]
}
 800708a:	4618      	mov	r0, r3
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	20000220 	.word	0x20000220

0800709c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070a2:	f3ef 8305 	mrs	r3, IPSR
 80070a6:	603b      	str	r3, [r7, #0]
  return(result);
 80070a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80070ae:	f06f 0305 	mvn.w	r3, #5
 80070b2:	607b      	str	r3, [r7, #4]
 80070b4:	e010      	b.n	80070d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80070b6:	4b0b      	ldr	r3, [pc, #44]	; (80070e4 <osKernelStart+0x48>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d109      	bne.n	80070d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80070be:	f7ff ffbf 	bl	8007040 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80070c2:	4b08      	ldr	r3, [pc, #32]	; (80070e4 <osKernelStart+0x48>)
 80070c4:	2202      	movs	r2, #2
 80070c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80070c8:	f001 f866 	bl	8008198 <vTaskStartScheduler>
      stat = osOK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	607b      	str	r3, [r7, #4]
 80070d0:	e002      	b.n	80070d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80070d2:	f04f 33ff 	mov.w	r3, #4294967295
 80070d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80070d8:	687b      	ldr	r3, [r7, #4]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20000220 	.word	0x20000220

080070e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08e      	sub	sp, #56	; 0x38
 80070ec:	af04      	add	r7, sp, #16
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070f8:	f3ef 8305 	mrs	r3, IPSR
 80070fc:	617b      	str	r3, [r7, #20]
  return(result);
 80070fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007100:	2b00      	cmp	r3, #0
 8007102:	d17e      	bne.n	8007202 <osThreadNew+0x11a>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d07b      	beq.n	8007202 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800710a:	2380      	movs	r3, #128	; 0x80
 800710c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800710e:	2318      	movs	r3, #24
 8007110:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007112:	2300      	movs	r3, #0
 8007114:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007116:	f04f 33ff 	mov.w	r3, #4294967295
 800711a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d045      	beq.n	80071ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <osThreadNew+0x48>
        name = attr->name;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d008      	beq.n	8007156 <osThreadNew+0x6e>
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	2b38      	cmp	r3, #56	; 0x38
 8007148:	d805      	bhi.n	8007156 <osThreadNew+0x6e>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <osThreadNew+0x72>
        return (NULL);
 8007156:	2300      	movs	r3, #0
 8007158:	e054      	b.n	8007204 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	089b      	lsrs	r3, r3, #2
 8007168:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00e      	beq.n	8007190 <osThreadNew+0xa8>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	2b5b      	cmp	r3, #91	; 0x5b
 8007178:	d90a      	bls.n	8007190 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800717e:	2b00      	cmp	r3, #0
 8007180:	d006      	beq.n	8007190 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <osThreadNew+0xa8>
        mem = 1;
 800718a:	2301      	movs	r3, #1
 800718c:	61bb      	str	r3, [r7, #24]
 800718e:	e010      	b.n	80071b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10c      	bne.n	80071b2 <osThreadNew+0xca>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d108      	bne.n	80071b2 <osThreadNew+0xca>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d104      	bne.n	80071b2 <osThreadNew+0xca>
          mem = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61bb      	str	r3, [r7, #24]
 80071ac:	e001      	b.n	80071b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d110      	bne.n	80071da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071c0:	9202      	str	r2, [sp, #8]
 80071c2:	9301      	str	r3, [sp, #4]
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	6a3a      	ldr	r2, [r7, #32]
 80071cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fe0c 	bl	8007dec <xTaskCreateStatic>
 80071d4:	4603      	mov	r3, r0
 80071d6:	613b      	str	r3, [r7, #16]
 80071d8:	e013      	b.n	8007202 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d110      	bne.n	8007202 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	f107 0310 	add.w	r3, r7, #16
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 fe57 	bl	8007ea6 <xTaskCreate>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d001      	beq.n	8007202 <osThreadNew+0x11a>
            hTask = NULL;
 80071fe:	2300      	movs	r3, #0
 8007200:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007202:	693b      	ldr	r3, [r7, #16]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3728      	adds	r7, #40	; 0x28
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007214:	f3ef 8305 	mrs	r3, IPSR
 8007218:	60bb      	str	r3, [r7, #8]
  return(result);
 800721a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800721c:	2b00      	cmp	r3, #0
 800721e:	d003      	beq.n	8007228 <osDelay+0x1c>
    stat = osErrorISR;
 8007220:	f06f 0305 	mvn.w	r3, #5
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	e007      	b.n	8007238 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007228:	2300      	movs	r3, #0
 800722a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 ff7c 	bl	8008130 <vTaskDelay>
    }
  }

  return (stat);
 8007238:	68fb      	ldr	r3, [r7, #12]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4a07      	ldr	r2, [pc, #28]	; (8007270 <vApplicationGetIdleTaskMemory+0x2c>)
 8007254:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	4a06      	ldr	r2, [pc, #24]	; (8007274 <vApplicationGetIdleTaskMemory+0x30>)
 800725a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2280      	movs	r2, #128	; 0x80
 8007260:	601a      	str	r2, [r3, #0]
}
 8007262:	bf00      	nop
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	20000224 	.word	0x20000224
 8007274:	20000280 	.word	0x20000280

08007278 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4a07      	ldr	r2, [pc, #28]	; (80072a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007288:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	4a06      	ldr	r2, [pc, #24]	; (80072a8 <vApplicationGetTimerTaskMemory+0x30>)
 800728e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007296:	601a      	str	r2, [r3, #0]
}
 8007298:	bf00      	nop
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	20000480 	.word	0x20000480
 80072a8:	200004dc 	.word	0x200004dc

080072ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f103 0208 	add.w	r2, r3, #8
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f04f 32ff 	mov.w	r2, #4294967295
 80072c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f103 0208 	add.w	r2, r3, #8
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f103 0208 	add.w	r2, r3, #8
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072fa:	bf00      	nop
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007306:	b480      	push	{r7}
 8007308:	b085      	sub	sp, #20
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	601a      	str	r2, [r3, #0]
}
 8007342:	bf00      	nop
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800734e:	b480      	push	{r7}
 8007350:	b085      	sub	sp, #20
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007364:	d103      	bne.n	800736e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	60fb      	str	r3, [r7, #12]
 800736c:	e00c      	b.n	8007388 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3308      	adds	r3, #8
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	e002      	b.n	800737c <vListInsert+0x2e>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	429a      	cmp	r2, r3
 8007386:	d2f6      	bcs.n	8007376 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	601a      	str	r2, [r3, #0]
}
 80073b4:	bf00      	nop
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6892      	ldr	r2, [r2, #8]
 80073d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6852      	ldr	r2, [r2, #4]
 80073e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d103      	bne.n	80073f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	1e5a      	subs	r2, r3, #1
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10a      	bne.n	800743e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800743e:	f002 f951 	bl	80096e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744a:	68f9      	ldr	r1, [r7, #12]
 800744c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800744e:	fb01 f303 	mul.w	r3, r1, r3
 8007452:	441a      	add	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746e:	3b01      	subs	r3, #1
 8007470:	68f9      	ldr	r1, [r7, #12]
 8007472:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007474:	fb01 f303 	mul.w	r3, r1, r3
 8007478:	441a      	add	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	22ff      	movs	r2, #255	; 0xff
 8007482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	22ff      	movs	r2, #255	; 0xff
 800748a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d114      	bne.n	80074be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01a      	beq.n	80074d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3310      	adds	r3, #16
 80074a0:	4618      	mov	r0, r3
 80074a2:	f001 f903 	bl	80086ac <xTaskRemoveFromEventList>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d012      	beq.n	80074d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80074ac:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <xQueueGenericReset+0xcc>)
 80074ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	e009      	b.n	80074d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3310      	adds	r3, #16
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff fef2 	bl	80072ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3324      	adds	r3, #36	; 0x24
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff feed 	bl	80072ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80074d2:	f002 f937 	bl	8009744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80074d6:	2301      	movs	r3, #1
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08e      	sub	sp, #56	; 0x38
 80074e8:	af02      	add	r7, sp, #8
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10a      	bne.n	800750e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800750a:	bf00      	nop
 800750c:	e7fe      	b.n	800750c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10a      	bne.n	800752a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007526:	bf00      	nop
 8007528:	e7fe      	b.n	8007528 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <xQueueGenericCreateStatic+0x52>
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <xQueueGenericCreateStatic+0x56>
 8007536:	2301      	movs	r3, #1
 8007538:	e000      	b.n	800753c <xQueueGenericCreateStatic+0x58>
 800753a:	2300      	movs	r3, #0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10a      	bne.n	8007556 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	623b      	str	r3, [r7, #32]
}
 8007552:	bf00      	nop
 8007554:	e7fe      	b.n	8007554 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d102      	bne.n	8007562 <xQueueGenericCreateStatic+0x7e>
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <xQueueGenericCreateStatic+0x82>
 8007562:	2301      	movs	r3, #1
 8007564:	e000      	b.n	8007568 <xQueueGenericCreateStatic+0x84>
 8007566:	2300      	movs	r3, #0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	61fb      	str	r3, [r7, #28]
}
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007582:	2350      	movs	r3, #80	; 0x50
 8007584:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2b50      	cmp	r3, #80	; 0x50
 800758a:	d00a      	beq.n	80075a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	61bb      	str	r3, [r7, #24]
}
 800759e:	bf00      	nop
 80075a0:	e7fe      	b.n	80075a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80075a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00d      	beq.n	80075ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	4613      	mov	r3, r2
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	68b9      	ldr	r1, [r7, #8]
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 f805 	bl	80075d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80075ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3730      	adds	r7, #48	; 0x30
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
 80075e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d103      	bne.n	80075f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	e002      	b.n	80075f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007602:	2101      	movs	r1, #1
 8007604:	69b8      	ldr	r0, [r7, #24]
 8007606:	f7ff ff05 	bl	8007414 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	78fa      	ldrb	r2, [r7, #3]
 800760e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007612:	bf00      	nop
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b08e      	sub	sp, #56	; 0x38
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800762a:	2300      	movs	r3, #0
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <xQueueGenericSend+0x32>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800764a:	bf00      	nop
 800764c:	e7fe      	b.n	800764c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d103      	bne.n	800765c <xQueueGenericSend+0x40>
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <xQueueGenericSend+0x44>
 800765c:	2301      	movs	r3, #1
 800765e:	e000      	b.n	8007662 <xQueueGenericSend+0x46>
 8007660:	2300      	movs	r3, #0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10a      	bne.n	800767c <xQueueGenericSend+0x60>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007678:	bf00      	nop
 800767a:	e7fe      	b.n	800767a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b02      	cmp	r3, #2
 8007680:	d103      	bne.n	800768a <xQueueGenericSend+0x6e>
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007686:	2b01      	cmp	r3, #1
 8007688:	d101      	bne.n	800768e <xQueueGenericSend+0x72>
 800768a:	2301      	movs	r3, #1
 800768c:	e000      	b.n	8007690 <xQueueGenericSend+0x74>
 800768e:	2300      	movs	r3, #0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10a      	bne.n	80076aa <xQueueGenericSend+0x8e>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	623b      	str	r3, [r7, #32]
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076aa:	f001 f9bd 	bl	8008a28 <xTaskGetSchedulerState>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d102      	bne.n	80076ba <xQueueGenericSend+0x9e>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <xQueueGenericSend+0xa2>
 80076ba:	2301      	movs	r3, #1
 80076bc:	e000      	b.n	80076c0 <xQueueGenericSend+0xa4>
 80076be:	2300      	movs	r3, #0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10a      	bne.n	80076da <xQueueGenericSend+0xbe>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	61fb      	str	r3, [r7, #28]
}
 80076d6:	bf00      	nop
 80076d8:	e7fe      	b.n	80076d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076da:	f002 f803 	bl	80096e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d302      	bcc.n	80076f0 <xQueueGenericSend+0xd4>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d129      	bne.n	8007744 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076f6:	f000 fa0b 	bl	8007b10 <prvCopyDataToQueue>
 80076fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	d010      	beq.n	8007726 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	3324      	adds	r3, #36	; 0x24
 8007708:	4618      	mov	r0, r3
 800770a:	f000 ffcf 	bl	80086ac <xTaskRemoveFromEventList>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d013      	beq.n	800773c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007714:	4b3f      	ldr	r3, [pc, #252]	; (8007814 <xQueueGenericSend+0x1f8>)
 8007716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	e00a      	b.n	800773c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800772c:	4b39      	ldr	r3, [pc, #228]	; (8007814 <xQueueGenericSend+0x1f8>)
 800772e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800773c:	f002 f802 	bl	8009744 <vPortExitCritical>
				return pdPASS;
 8007740:	2301      	movs	r3, #1
 8007742:	e063      	b.n	800780c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d103      	bne.n	8007752 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800774a:	f001 fffb 	bl	8009744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800774e:	2300      	movs	r3, #0
 8007750:	e05c      	b.n	800780c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007754:	2b00      	cmp	r3, #0
 8007756:	d106      	bne.n	8007766 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007758:	f107 0314 	add.w	r3, r7, #20
 800775c:	4618      	mov	r0, r3
 800775e:	f001 f809 	bl	8008774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007762:	2301      	movs	r3, #1
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007766:	f001 ffed 	bl	8009744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800776a:	f000 fd7b 	bl	8008264 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800776e:	f001 ffb9 	bl	80096e4 <vPortEnterCritical>
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007778:	b25b      	sxtb	r3, r3
 800777a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777e:	d103      	bne.n	8007788 <xQueueGenericSend+0x16c>
 8007780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800778e:	b25b      	sxtb	r3, r3
 8007790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007794:	d103      	bne.n	800779e <xQueueGenericSend+0x182>
 8007796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800779e:	f001 ffd1 	bl	8009744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077a2:	1d3a      	adds	r2, r7, #4
 80077a4:	f107 0314 	add.w	r3, r7, #20
 80077a8:	4611      	mov	r1, r2
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 fff8 	bl	80087a0 <xTaskCheckForTimeOut>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d124      	bne.n	8007800 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80077b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077b8:	f000 faa2 	bl	8007d00 <prvIsQueueFull>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d018      	beq.n	80077f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c4:	3310      	adds	r3, #16
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	4611      	mov	r1, r2
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 ff1e 	bl	800860c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80077d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077d2:	f000 fa2d 	bl	8007c30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80077d6:	f000 fd53 	bl	8008280 <xTaskResumeAll>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f47f af7c 	bne.w	80076da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80077e2:	4b0c      	ldr	r3, [pc, #48]	; (8007814 <xQueueGenericSend+0x1f8>)
 80077e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	e772      	b.n	80076da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80077f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077f6:	f000 fa1b 	bl	8007c30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077fa:	f000 fd41 	bl	8008280 <xTaskResumeAll>
 80077fe:	e76c      	b.n	80076da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007802:	f000 fa15 	bl	8007c30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007806:	f000 fd3b 	bl	8008280 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800780a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800780c:	4618      	mov	r0, r3
 800780e:	3738      	adds	r7, #56	; 0x38
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	e000ed04 	.word	0xe000ed04

08007818 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b090      	sub	sp, #64	; 0x40
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800782a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d103      	bne.n	8007854 <xQueueGenericSendFromISR+0x3c>
 800784c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <xQueueGenericSendFromISR+0x40>
 8007854:	2301      	movs	r3, #1
 8007856:	e000      	b.n	800785a <xQueueGenericSendFromISR+0x42>
 8007858:	2300      	movs	r3, #0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2b02      	cmp	r3, #2
 8007878:	d103      	bne.n	8007882 <xQueueGenericSendFromISR+0x6a>
 800787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787e:	2b01      	cmp	r3, #1
 8007880:	d101      	bne.n	8007886 <xQueueGenericSendFromISR+0x6e>
 8007882:	2301      	movs	r3, #1
 8007884:	e000      	b.n	8007888 <xQueueGenericSendFromISR+0x70>
 8007886:	2300      	movs	r3, #0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	623b      	str	r3, [r7, #32]
}
 800789e:	bf00      	nop
 80078a0:	e7fe      	b.n	80078a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078a2:	f002 f801 	bl	80098a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80078a6:	f3ef 8211 	mrs	r2, BASEPRI
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	61fa      	str	r2, [r7, #28]
 80078bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80078be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d302      	bcc.n	80078d4 <xQueueGenericSendFromISR+0xbc>
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d12f      	bne.n	8007934 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80078d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	68b9      	ldr	r1, [r7, #8]
 80078e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078ea:	f000 f911 	bl	8007b10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f6:	d112      	bne.n	800791e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d016      	beq.n	800792e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007902:	3324      	adds	r3, #36	; 0x24
 8007904:	4618      	mov	r0, r3
 8007906:	f000 fed1 	bl	80086ac <xTaskRemoveFromEventList>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00e      	beq.n	800792e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00b      	beq.n	800792e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	e007      	b.n	800792e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800791e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007922:	3301      	adds	r3, #1
 8007924:	b2db      	uxtb	r3, r3
 8007926:	b25a      	sxtb	r2, r3
 8007928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800792e:	2301      	movs	r3, #1
 8007930:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007932:	e001      	b.n	8007938 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007934:	2300      	movs	r3, #0
 8007936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007942:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007946:	4618      	mov	r0, r3
 8007948:	3740      	adds	r7, #64	; 0x40
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
	...

08007950 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08c      	sub	sp, #48	; 0x30
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800795c:	2300      	movs	r3, #0
 800795e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10a      	bne.n	8007980 <xQueueReceive+0x30>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	623b      	str	r3, [r7, #32]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d103      	bne.n	800798e <xQueueReceive+0x3e>
 8007986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <xQueueReceive+0x42>
 800798e:	2301      	movs	r3, #1
 8007990:	e000      	b.n	8007994 <xQueueReceive+0x44>
 8007992:	2300      	movs	r3, #0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10a      	bne.n	80079ae <xQueueReceive+0x5e>
	__asm volatile
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	61fb      	str	r3, [r7, #28]
}
 80079aa:	bf00      	nop
 80079ac:	e7fe      	b.n	80079ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079ae:	f001 f83b 	bl	8008a28 <xTaskGetSchedulerState>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d102      	bne.n	80079be <xQueueReceive+0x6e>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <xQueueReceive+0x72>
 80079be:	2301      	movs	r3, #1
 80079c0:	e000      	b.n	80079c4 <xQueueReceive+0x74>
 80079c2:	2300      	movs	r3, #0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10a      	bne.n	80079de <xQueueReceive+0x8e>
	__asm volatile
 80079c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	61bb      	str	r3, [r7, #24]
}
 80079da:	bf00      	nop
 80079dc:	e7fe      	b.n	80079dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079de:	f001 fe81 	bl	80096e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d01f      	beq.n	8007a2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079ee:	68b9      	ldr	r1, [r7, #8]
 80079f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079f2:	f000 f8f7 	bl	8007be4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	1e5a      	subs	r2, r3, #1
 80079fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00f      	beq.n	8007a26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	3310      	adds	r3, #16
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fe4e 	bl	80086ac <xTaskRemoveFromEventList>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d007      	beq.n	8007a26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a16:	4b3d      	ldr	r3, [pc, #244]	; (8007b0c <xQueueReceive+0x1bc>)
 8007a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a26:	f001 fe8d 	bl	8009744 <vPortExitCritical>
				return pdPASS;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e069      	b.n	8007b02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d103      	bne.n	8007a3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a34:	f001 fe86 	bl	8009744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	e062      	b.n	8007b02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a42:	f107 0310 	add.w	r3, r7, #16
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fe94 	bl	8008774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a50:	f001 fe78 	bl	8009744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a54:	f000 fc06 	bl	8008264 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a58:	f001 fe44 	bl	80096e4 <vPortEnterCritical>
 8007a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a62:	b25b      	sxtb	r3, r3
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a68:	d103      	bne.n	8007a72 <xQueueReceive+0x122>
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a78:	b25b      	sxtb	r3, r3
 8007a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7e:	d103      	bne.n	8007a88 <xQueueReceive+0x138>
 8007a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a88:	f001 fe5c 	bl	8009744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a8c:	1d3a      	adds	r2, r7, #4
 8007a8e:	f107 0310 	add.w	r3, r7, #16
 8007a92:	4611      	mov	r1, r2
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 fe83 	bl	80087a0 <xTaskCheckForTimeOut>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d123      	bne.n	8007ae8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aa2:	f000 f917 	bl	8007cd4 <prvIsQueueEmpty>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d017      	beq.n	8007adc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	3324      	adds	r3, #36	; 0x24
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 fda9 	bl	800860c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007abc:	f000 f8b8 	bl	8007c30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ac0:	f000 fbde 	bl	8008280 <xTaskResumeAll>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d189      	bne.n	80079de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007aca:	4b10      	ldr	r3, [pc, #64]	; (8007b0c <xQueueReceive+0x1bc>)
 8007acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	e780      	b.n	80079de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ade:	f000 f8a7 	bl	8007c30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ae2:	f000 fbcd 	bl	8008280 <xTaskResumeAll>
 8007ae6:	e77a      	b.n	80079de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aea:	f000 f8a1 	bl	8007c30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007aee:	f000 fbc7 	bl	8008280 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007af4:	f000 f8ee 	bl	8007cd4 <prvIsQueueEmpty>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f43f af6f 	beq.w	80079de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3730      	adds	r7, #48	; 0x30
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	e000ed04 	.word	0xe000ed04

08007b10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10d      	bne.n	8007b4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d14d      	bne.n	8007bd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 ff92 	bl	8008a64 <xTaskPriorityDisinherit>
 8007b40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	609a      	str	r2, [r3, #8]
 8007b48:	e043      	b.n	8007bd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d119      	bne.n	8007b84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6858      	ldr	r0, [r3, #4]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b58:	461a      	mov	r2, r3
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	f002 f8fc 	bl	8009d58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b68:	441a      	add	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d32b      	bcc.n	8007bd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	605a      	str	r2, [r3, #4]
 8007b82:	e026      	b.n	8007bd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	68d8      	ldr	r0, [r3, #12]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	68b9      	ldr	r1, [r7, #8]
 8007b90:	f002 f8e2 	bl	8009d58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9c:	425b      	negs	r3, r3
 8007b9e:	441a      	add	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	68da      	ldr	r2, [r3, #12]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d207      	bcs.n	8007bc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb8:	425b      	negs	r3, r3
 8007bba:	441a      	add	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d105      	bne.n	8007bd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	1c5a      	adds	r2, r3, #1
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007bda:	697b      	ldr	r3, [r7, #20]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d018      	beq.n	8007c28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	441a      	add	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d303      	bcc.n	8007c18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68d9      	ldr	r1, [r3, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c20:	461a      	mov	r2, r3
 8007c22:	6838      	ldr	r0, [r7, #0]
 8007c24:	f002 f898 	bl	8009d58 <memcpy>
	}
}
 8007c28:	bf00      	nop
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c38:	f001 fd54 	bl	80096e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c44:	e011      	b.n	8007c6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d012      	beq.n	8007c74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3324      	adds	r3, #36	; 0x24
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 fd2a 	bl	80086ac <xTaskRemoveFromEventList>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c5e:	f000 fe01 	bl	8008864 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	3b01      	subs	r3, #1
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	dce9      	bgt.n	8007c46 <prvUnlockQueue+0x16>
 8007c72:	e000      	b.n	8007c76 <prvUnlockQueue+0x46>
					break;
 8007c74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	22ff      	movs	r2, #255	; 0xff
 8007c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c7e:	f001 fd61 	bl	8009744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c82:	f001 fd2f 	bl	80096e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c8e:	e011      	b.n	8007cb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d012      	beq.n	8007cbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	3310      	adds	r3, #16
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 fd05 	bl	80086ac <xTaskRemoveFromEventList>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ca8:	f000 fddc 	bl	8008864 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007cac:	7bbb      	ldrb	r3, [r7, #14]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dce9      	bgt.n	8007c90 <prvUnlockQueue+0x60>
 8007cbc:	e000      	b.n	8007cc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007cbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	22ff      	movs	r2, #255	; 0xff
 8007cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007cc8:	f001 fd3c 	bl	8009744 <vPortExitCritical>
}
 8007ccc:	bf00      	nop
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cdc:	f001 fd02 	bl	80096e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d102      	bne.n	8007cee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	e001      	b.n	8007cf2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cf2:	f001 fd27 	bl	8009744 <vPortExitCritical>

	return xReturn;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d08:	f001 fcec 	bl	80096e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d102      	bne.n	8007d1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	e001      	b.n	8007d22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d22:	f001 fd0f 	bl	8009744 <vPortExitCritical>

	return xReturn;
 8007d26:	68fb      	ldr	r3, [r7, #12]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	e014      	b.n	8007d6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d40:	4a0f      	ldr	r2, [pc, #60]	; (8007d80 <vQueueAddToRegistry+0x50>)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10b      	bne.n	8007d64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d4c:	490c      	ldr	r1, [pc, #48]	; (8007d80 <vQueueAddToRegistry+0x50>)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d56:	4a0a      	ldr	r2, [pc, #40]	; (8007d80 <vQueueAddToRegistry+0x50>)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	4413      	add	r3, r2
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d62:	e006      	b.n	8007d72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3301      	adds	r3, #1
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b07      	cmp	r3, #7
 8007d6e:	d9e7      	bls.n	8007d40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	20004d88 	.word	0x20004d88

08007d84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d94:	f001 fca6 	bl	80096e4 <vPortEnterCritical>
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d9e:	b25b      	sxtb	r3, r3
 8007da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da4:	d103      	bne.n	8007dae <vQueueWaitForMessageRestricted+0x2a>
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007db4:	b25b      	sxtb	r3, r3
 8007db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dba:	d103      	bne.n	8007dc4 <vQueueWaitForMessageRestricted+0x40>
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dc4:	f001 fcbe 	bl	8009744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d106      	bne.n	8007dde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	3324      	adds	r3, #36	; 0x24
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	68b9      	ldr	r1, [r7, #8]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 fc3b 	bl	8008654 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007dde:	6978      	ldr	r0, [r7, #20]
 8007de0:	f7ff ff26 	bl	8007c30 <prvUnlockQueue>
	}
 8007de4:	bf00      	nop
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08e      	sub	sp, #56	; 0x38
 8007df0:	af04      	add	r7, sp, #16
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	623b      	str	r3, [r7, #32]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <xTaskCreateStatic+0x46>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	61fb      	str	r3, [r7, #28]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e32:	235c      	movs	r3, #92	; 0x5c
 8007e34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	2b5c      	cmp	r3, #92	; 0x5c
 8007e3a:	d00a      	beq.n	8007e52 <xTaskCreateStatic+0x66>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	61bb      	str	r3, [r7, #24]
}
 8007e4e:	bf00      	nop
 8007e50:	e7fe      	b.n	8007e50 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d01e      	beq.n	8007e98 <xTaskCreateStatic+0xac>
 8007e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d01b      	beq.n	8007e98 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	2202      	movs	r2, #2
 8007e6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e72:	2300      	movs	r3, #0
 8007e74:	9303      	str	r3, [sp, #12]
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	9302      	str	r3, [sp, #8]
 8007e7a:	f107 0314 	add.w	r3, r7, #20
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	68b9      	ldr	r1, [r7, #8]
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 f850 	bl	8007f30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e92:	f000 f8dd 	bl	8008050 <prvAddNewTaskToReadyList>
 8007e96:	e001      	b.n	8007e9c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e9c:	697b      	ldr	r3, [r7, #20]
	}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3728      	adds	r7, #40	; 0x28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b08c      	sub	sp, #48	; 0x30
 8007eaa:	af04      	add	r7, sp, #16
 8007eac:	60f8      	str	r0, [r7, #12]
 8007eae:	60b9      	str	r1, [r7, #8]
 8007eb0:	603b      	str	r3, [r7, #0]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007eb6:	88fb      	ldrh	r3, [r7, #6]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f001 fd34 	bl	8009928 <pvPortMalloc>
 8007ec0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00e      	beq.n	8007ee6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ec8:	205c      	movs	r0, #92	; 0x5c
 8007eca:	f001 fd2d 	bl	8009928 <pvPortMalloc>
 8007ece:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	631a      	str	r2, [r3, #48]	; 0x30
 8007edc:	e005      	b.n	8007eea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ede:	6978      	ldr	r0, [r7, #20]
 8007ee0:	f001 fdee 	bl	8009ac0 <vPortFree>
 8007ee4:	e001      	b.n	8007eea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d017      	beq.n	8007f20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ef8:	88fa      	ldrh	r2, [r7, #6]
 8007efa:	2300      	movs	r3, #0
 8007efc:	9303      	str	r3, [sp, #12]
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	9302      	str	r3, [sp, #8]
 8007f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68b9      	ldr	r1, [r7, #8]
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 f80e 	bl	8007f30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f14:	69f8      	ldr	r0, [r7, #28]
 8007f16:	f000 f89b 	bl	8008050 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	61bb      	str	r3, [r7, #24]
 8007f1e:	e002      	b.n	8007f26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f20:	f04f 33ff 	mov.w	r3, #4294967295
 8007f24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f26:	69bb      	ldr	r3, [r7, #24]
	}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3720      	adds	r7, #32
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	461a      	mov	r2, r3
 8007f48:	21a5      	movs	r1, #165	; 0xa5
 8007f4a:	f001 ff13 	bl	8009d74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	f023 0307 	bic.w	r3, r3, #7
 8007f66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	617b      	str	r3, [r7, #20]
}
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d01f      	beq.n	8007fce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f8e:	2300      	movs	r3, #0
 8007f90:	61fb      	str	r3, [r7, #28]
 8007f92:	e012      	b.n	8007fba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	4413      	add	r3, r2
 8007f9a:	7819      	ldrb	r1, [r3, #0]
 8007f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	3334      	adds	r3, #52	; 0x34
 8007fa4:	460a      	mov	r2, r1
 8007fa6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	4413      	add	r3, r2
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d006      	beq.n	8007fc2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	61fb      	str	r3, [r7, #28]
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	2b0f      	cmp	r3, #15
 8007fbe:	d9e9      	bls.n	8007f94 <prvInitialiseNewTask+0x64>
 8007fc0:	e000      	b.n	8007fc4 <prvInitialiseNewTask+0x94>
			{
				break;
 8007fc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fcc:	e003      	b.n	8007fd6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd8:	2b37      	cmp	r3, #55	; 0x37
 8007fda:	d901      	bls.n	8007fe0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fdc:	2337      	movs	r3, #55	; 0x37
 8007fde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fe4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	2200      	movs	r2, #0
 8007ff0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7ff f978 	bl	80072ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	3318      	adds	r3, #24
 8008000:	4618      	mov	r0, r3
 8008002:	f7ff f973 	bl	80072ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800800a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800801a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	2200      	movs	r2, #0
 8008020:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	68f9      	ldr	r1, [r7, #12]
 800802e:	69b8      	ldr	r0, [r7, #24]
 8008030:	f001 fa28 	bl	8009484 <pxPortInitialiseStack>
 8008034:	4602      	mov	r2, r0
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800803a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008046:	bf00      	nop
 8008048:	3720      	adds	r7, #32
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008058:	f001 fb44 	bl	80096e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800805c:	4b2d      	ldr	r3, [pc, #180]	; (8008114 <prvAddNewTaskToReadyList+0xc4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3301      	adds	r3, #1
 8008062:	4a2c      	ldr	r2, [pc, #176]	; (8008114 <prvAddNewTaskToReadyList+0xc4>)
 8008064:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008066:	4b2c      	ldr	r3, [pc, #176]	; (8008118 <prvAddNewTaskToReadyList+0xc8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d109      	bne.n	8008082 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800806e:	4a2a      	ldr	r2, [pc, #168]	; (8008118 <prvAddNewTaskToReadyList+0xc8>)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008074:	4b27      	ldr	r3, [pc, #156]	; (8008114 <prvAddNewTaskToReadyList+0xc4>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d110      	bne.n	800809e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800807c:	f000 fc16 	bl	80088ac <prvInitialiseTaskLists>
 8008080:	e00d      	b.n	800809e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008082:	4b26      	ldr	r3, [pc, #152]	; (800811c <prvAddNewTaskToReadyList+0xcc>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d109      	bne.n	800809e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800808a:	4b23      	ldr	r3, [pc, #140]	; (8008118 <prvAddNewTaskToReadyList+0xc8>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	429a      	cmp	r2, r3
 8008096:	d802      	bhi.n	800809e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008098:	4a1f      	ldr	r2, [pc, #124]	; (8008118 <prvAddNewTaskToReadyList+0xc8>)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800809e:	4b20      	ldr	r3, [pc, #128]	; (8008120 <prvAddNewTaskToReadyList+0xd0>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3301      	adds	r3, #1
 80080a4:	4a1e      	ldr	r2, [pc, #120]	; (8008120 <prvAddNewTaskToReadyList+0xd0>)
 80080a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80080a8:	4b1d      	ldr	r3, [pc, #116]	; (8008120 <prvAddNewTaskToReadyList+0xd0>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b4:	4b1b      	ldr	r3, [pc, #108]	; (8008124 <prvAddNewTaskToReadyList+0xd4>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d903      	bls.n	80080c4 <prvAddNewTaskToReadyList+0x74>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	4a18      	ldr	r2, [pc, #96]	; (8008124 <prvAddNewTaskToReadyList+0xd4>)
 80080c2:	6013      	str	r3, [r2, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c8:	4613      	mov	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4a15      	ldr	r2, [pc, #84]	; (8008128 <prvAddNewTaskToReadyList+0xd8>)
 80080d2:	441a      	add	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3304      	adds	r3, #4
 80080d8:	4619      	mov	r1, r3
 80080da:	4610      	mov	r0, r2
 80080dc:	f7ff f913 	bl	8007306 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080e0:	f001 fb30 	bl	8009744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080e4:	4b0d      	ldr	r3, [pc, #52]	; (800811c <prvAddNewTaskToReadyList+0xcc>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00e      	beq.n	800810a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080ec:	4b0a      	ldr	r3, [pc, #40]	; (8008118 <prvAddNewTaskToReadyList+0xc8>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d207      	bcs.n	800810a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080fa:	4b0c      	ldr	r3, [pc, #48]	; (800812c <prvAddNewTaskToReadyList+0xdc>)
 80080fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800810a:	bf00      	nop
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20000db0 	.word	0x20000db0
 8008118:	200008dc 	.word	0x200008dc
 800811c:	20000dbc 	.word	0x20000dbc
 8008120:	20000dcc 	.word	0x20000dcc
 8008124:	20000db8 	.word	0x20000db8
 8008128:	200008e0 	.word	0x200008e0
 800812c:	e000ed04 	.word	0xe000ed04

08008130 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008138:	2300      	movs	r3, #0
 800813a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d017      	beq.n	8008172 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008142:	4b13      	ldr	r3, [pc, #76]	; (8008190 <vTaskDelay+0x60>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <vTaskDelay+0x30>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	60bb      	str	r3, [r7, #8]
}
 800815c:	bf00      	nop
 800815e:	e7fe      	b.n	800815e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008160:	f000 f880 	bl	8008264 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008164:	2100      	movs	r1, #0
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fdea 	bl	8008d40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800816c:	f000 f888 	bl	8008280 <xTaskResumeAll>
 8008170:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d107      	bne.n	8008188 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008178:	4b06      	ldr	r3, [pc, #24]	; (8008194 <vTaskDelay+0x64>)
 800817a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008188:	bf00      	nop
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	20000dd8 	.word	0x20000dd8
 8008194:	e000ed04 	.word	0xe000ed04

08008198 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08a      	sub	sp, #40	; 0x28
 800819c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081a6:	463a      	mov	r2, r7
 80081a8:	1d39      	adds	r1, r7, #4
 80081aa:	f107 0308 	add.w	r3, r7, #8
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7ff f848 	bl	8007244 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	9202      	str	r2, [sp, #8]
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	2300      	movs	r3, #0
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	2300      	movs	r3, #0
 80081c4:	460a      	mov	r2, r1
 80081c6:	4921      	ldr	r1, [pc, #132]	; (800824c <vTaskStartScheduler+0xb4>)
 80081c8:	4821      	ldr	r0, [pc, #132]	; (8008250 <vTaskStartScheduler+0xb8>)
 80081ca:	f7ff fe0f 	bl	8007dec <xTaskCreateStatic>
 80081ce:	4603      	mov	r3, r0
 80081d0:	4a20      	ldr	r2, [pc, #128]	; (8008254 <vTaskStartScheduler+0xbc>)
 80081d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081d4:	4b1f      	ldr	r3, [pc, #124]	; (8008254 <vTaskStartScheduler+0xbc>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081dc:	2301      	movs	r3, #1
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	e001      	b.n	80081e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d102      	bne.n	80081f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80081ec:	f000 fdfc 	bl	8008de8 <xTimerCreateTimerTask>
 80081f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d116      	bne.n	8008226 <vTaskStartScheduler+0x8e>
	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	613b      	str	r3, [r7, #16]
}
 800820a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800820c:	4b12      	ldr	r3, [pc, #72]	; (8008258 <vTaskStartScheduler+0xc0>)
 800820e:	f04f 32ff 	mov.w	r2, #4294967295
 8008212:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008214:	4b11      	ldr	r3, [pc, #68]	; (800825c <vTaskStartScheduler+0xc4>)
 8008216:	2201      	movs	r2, #1
 8008218:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800821a:	4b11      	ldr	r3, [pc, #68]	; (8008260 <vTaskStartScheduler+0xc8>)
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008220:	f001 f9be 	bl	80095a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008224:	e00e      	b.n	8008244 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822c:	d10a      	bne.n	8008244 <vTaskStartScheduler+0xac>
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	60fb      	str	r3, [r7, #12]
}
 8008240:	bf00      	nop
 8008242:	e7fe      	b.n	8008242 <vTaskStartScheduler+0xaa>
}
 8008244:	bf00      	nop
 8008246:	3718      	adds	r7, #24
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	0800e450 	.word	0x0800e450
 8008250:	0800887d 	.word	0x0800887d
 8008254:	20000dd4 	.word	0x20000dd4
 8008258:	20000dd0 	.word	0x20000dd0
 800825c:	20000dbc 	.word	0x20000dbc
 8008260:	20000db4 	.word	0x20000db4

08008264 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008264:	b480      	push	{r7}
 8008266:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008268:	4b04      	ldr	r3, [pc, #16]	; (800827c <vTaskSuspendAll+0x18>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	3301      	adds	r3, #1
 800826e:	4a03      	ldr	r2, [pc, #12]	; (800827c <vTaskSuspendAll+0x18>)
 8008270:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008272:	bf00      	nop
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	20000dd8 	.word	0x20000dd8

08008280 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008286:	2300      	movs	r3, #0
 8008288:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800828a:	2300      	movs	r3, #0
 800828c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800828e:	4b42      	ldr	r3, [pc, #264]	; (8008398 <xTaskResumeAll+0x118>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10a      	bne.n	80082ac <xTaskResumeAll+0x2c>
	__asm volatile
 8008296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	603b      	str	r3, [r7, #0]
}
 80082a8:	bf00      	nop
 80082aa:	e7fe      	b.n	80082aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082ac:	f001 fa1a 	bl	80096e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082b0:	4b39      	ldr	r3, [pc, #228]	; (8008398 <xTaskResumeAll+0x118>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	4a38      	ldr	r2, [pc, #224]	; (8008398 <xTaskResumeAll+0x118>)
 80082b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ba:	4b37      	ldr	r3, [pc, #220]	; (8008398 <xTaskResumeAll+0x118>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d162      	bne.n	8008388 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082c2:	4b36      	ldr	r3, [pc, #216]	; (800839c <xTaskResumeAll+0x11c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d05e      	beq.n	8008388 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082ca:	e02f      	b.n	800832c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082cc:	4b34      	ldr	r3, [pc, #208]	; (80083a0 <xTaskResumeAll+0x120>)
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3318      	adds	r3, #24
 80082d8:	4618      	mov	r0, r3
 80082da:	f7ff f871 	bl	80073c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3304      	adds	r3, #4
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff f86c 	bl	80073c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ec:	4b2d      	ldr	r3, [pc, #180]	; (80083a4 <xTaskResumeAll+0x124>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d903      	bls.n	80082fc <xTaskResumeAll+0x7c>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f8:	4a2a      	ldr	r2, [pc, #168]	; (80083a4 <xTaskResumeAll+0x124>)
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008300:	4613      	mov	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4413      	add	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4a27      	ldr	r2, [pc, #156]	; (80083a8 <xTaskResumeAll+0x128>)
 800830a:	441a      	add	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	3304      	adds	r3, #4
 8008310:	4619      	mov	r1, r3
 8008312:	4610      	mov	r0, r2
 8008314:	f7fe fff7 	bl	8007306 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831c:	4b23      	ldr	r3, [pc, #140]	; (80083ac <xTaskResumeAll+0x12c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008322:	429a      	cmp	r2, r3
 8008324:	d302      	bcc.n	800832c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008326:	4b22      	ldr	r3, [pc, #136]	; (80083b0 <xTaskResumeAll+0x130>)
 8008328:	2201      	movs	r2, #1
 800832a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800832c:	4b1c      	ldr	r3, [pc, #112]	; (80083a0 <xTaskResumeAll+0x120>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1cb      	bne.n	80082cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800833a:	f000 fb55 	bl	80089e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800833e:	4b1d      	ldr	r3, [pc, #116]	; (80083b4 <xTaskResumeAll+0x134>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d010      	beq.n	800836c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800834a:	f000 f847 	bl	80083dc <xTaskIncrementTick>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008354:	4b16      	ldr	r3, [pc, #88]	; (80083b0 <xTaskResumeAll+0x130>)
 8008356:	2201      	movs	r2, #1
 8008358:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	3b01      	subs	r3, #1
 800835e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1f1      	bne.n	800834a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008366:	4b13      	ldr	r3, [pc, #76]	; (80083b4 <xTaskResumeAll+0x134>)
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800836c:	4b10      	ldr	r3, [pc, #64]	; (80083b0 <xTaskResumeAll+0x130>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d009      	beq.n	8008388 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008374:	2301      	movs	r3, #1
 8008376:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008378:	4b0f      	ldr	r3, [pc, #60]	; (80083b8 <xTaskResumeAll+0x138>)
 800837a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008388:	f001 f9dc 	bl	8009744 <vPortExitCritical>

	return xAlreadyYielded;
 800838c:	68bb      	ldr	r3, [r7, #8]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20000dd8 	.word	0x20000dd8
 800839c:	20000db0 	.word	0x20000db0
 80083a0:	20000d70 	.word	0x20000d70
 80083a4:	20000db8 	.word	0x20000db8
 80083a8:	200008e0 	.word	0x200008e0
 80083ac:	200008dc 	.word	0x200008dc
 80083b0:	20000dc4 	.word	0x20000dc4
 80083b4:	20000dc0 	.word	0x20000dc0
 80083b8:	e000ed04 	.word	0xe000ed04

080083bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083c2:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <xTaskGetTickCount+0x1c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083c8:	687b      	ldr	r3, [r7, #4]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	20000db4 	.word	0x20000db4

080083dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083e2:	2300      	movs	r3, #0
 80083e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083e6:	4b4f      	ldr	r3, [pc, #316]	; (8008524 <xTaskIncrementTick+0x148>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f040 808f 	bne.w	800850e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083f0:	4b4d      	ldr	r3, [pc, #308]	; (8008528 <xTaskIncrementTick+0x14c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3301      	adds	r3, #1
 80083f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083f8:	4a4b      	ldr	r2, [pc, #300]	; (8008528 <xTaskIncrementTick+0x14c>)
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d120      	bne.n	8008446 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008404:	4b49      	ldr	r3, [pc, #292]	; (800852c <xTaskIncrementTick+0x150>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00a      	beq.n	8008424 <xTaskIncrementTick+0x48>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	603b      	str	r3, [r7, #0]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <xTaskIncrementTick+0x46>
 8008424:	4b41      	ldr	r3, [pc, #260]	; (800852c <xTaskIncrementTick+0x150>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	4b41      	ldr	r3, [pc, #260]	; (8008530 <xTaskIncrementTick+0x154>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a3f      	ldr	r2, [pc, #252]	; (800852c <xTaskIncrementTick+0x150>)
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	4a3f      	ldr	r2, [pc, #252]	; (8008530 <xTaskIncrementTick+0x154>)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	4b3e      	ldr	r3, [pc, #248]	; (8008534 <xTaskIncrementTick+0x158>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3301      	adds	r3, #1
 800843e:	4a3d      	ldr	r2, [pc, #244]	; (8008534 <xTaskIncrementTick+0x158>)
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	f000 fad1 	bl	80089e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008446:	4b3c      	ldr	r3, [pc, #240]	; (8008538 <xTaskIncrementTick+0x15c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	429a      	cmp	r2, r3
 800844e:	d349      	bcc.n	80084e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008450:	4b36      	ldr	r3, [pc, #216]	; (800852c <xTaskIncrementTick+0x150>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d104      	bne.n	8008464 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800845a:	4b37      	ldr	r3, [pc, #220]	; (8008538 <xTaskIncrementTick+0x15c>)
 800845c:	f04f 32ff 	mov.w	r2, #4294967295
 8008460:	601a      	str	r2, [r3, #0]
					break;
 8008462:	e03f      	b.n	80084e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008464:	4b31      	ldr	r3, [pc, #196]	; (800852c <xTaskIncrementTick+0x150>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	429a      	cmp	r2, r3
 800847a:	d203      	bcs.n	8008484 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800847c:	4a2e      	ldr	r2, [pc, #184]	; (8008538 <xTaskIncrementTick+0x15c>)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008482:	e02f      	b.n	80084e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	3304      	adds	r3, #4
 8008488:	4618      	mov	r0, r3
 800848a:	f7fe ff99 	bl	80073c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008492:	2b00      	cmp	r3, #0
 8008494:	d004      	beq.n	80084a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	3318      	adds	r3, #24
 800849a:	4618      	mov	r0, r3
 800849c:	f7fe ff90 	bl	80073c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a4:	4b25      	ldr	r3, [pc, #148]	; (800853c <xTaskIncrementTick+0x160>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d903      	bls.n	80084b4 <xTaskIncrementTick+0xd8>
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b0:	4a22      	ldr	r2, [pc, #136]	; (800853c <xTaskIncrementTick+0x160>)
 80084b2:	6013      	str	r3, [r2, #0]
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b8:	4613      	mov	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4a1f      	ldr	r2, [pc, #124]	; (8008540 <xTaskIncrementTick+0x164>)
 80084c2:	441a      	add	r2, r3
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	3304      	adds	r3, #4
 80084c8:	4619      	mov	r1, r3
 80084ca:	4610      	mov	r0, r2
 80084cc:	f7fe ff1b 	bl	8007306 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d4:	4b1b      	ldr	r3, [pc, #108]	; (8008544 <xTaskIncrementTick+0x168>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084da:	429a      	cmp	r2, r3
 80084dc:	d3b8      	bcc.n	8008450 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80084de:	2301      	movs	r3, #1
 80084e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084e2:	e7b5      	b.n	8008450 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084e4:	4b17      	ldr	r3, [pc, #92]	; (8008544 <xTaskIncrementTick+0x168>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ea:	4915      	ldr	r1, [pc, #84]	; (8008540 <xTaskIncrementTick+0x164>)
 80084ec:	4613      	mov	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	440b      	add	r3, r1
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d901      	bls.n	8008500 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80084fc:	2301      	movs	r3, #1
 80084fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008500:	4b11      	ldr	r3, [pc, #68]	; (8008548 <xTaskIncrementTick+0x16c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d007      	beq.n	8008518 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008508:	2301      	movs	r3, #1
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	e004      	b.n	8008518 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800850e:	4b0f      	ldr	r3, [pc, #60]	; (800854c <xTaskIncrementTick+0x170>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3301      	adds	r3, #1
 8008514:	4a0d      	ldr	r2, [pc, #52]	; (800854c <xTaskIncrementTick+0x170>)
 8008516:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008518:	697b      	ldr	r3, [r7, #20]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20000dd8 	.word	0x20000dd8
 8008528:	20000db4 	.word	0x20000db4
 800852c:	20000d68 	.word	0x20000d68
 8008530:	20000d6c 	.word	0x20000d6c
 8008534:	20000dc8 	.word	0x20000dc8
 8008538:	20000dd0 	.word	0x20000dd0
 800853c:	20000db8 	.word	0x20000db8
 8008540:	200008e0 	.word	0x200008e0
 8008544:	200008dc 	.word	0x200008dc
 8008548:	20000dc4 	.word	0x20000dc4
 800854c:	20000dc0 	.word	0x20000dc0

08008550 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008556:	4b28      	ldr	r3, [pc, #160]	; (80085f8 <vTaskSwitchContext+0xa8>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d003      	beq.n	8008566 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800855e:	4b27      	ldr	r3, [pc, #156]	; (80085fc <vTaskSwitchContext+0xac>)
 8008560:	2201      	movs	r2, #1
 8008562:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008564:	e041      	b.n	80085ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008566:	4b25      	ldr	r3, [pc, #148]	; (80085fc <vTaskSwitchContext+0xac>)
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800856c:	4b24      	ldr	r3, [pc, #144]	; (8008600 <vTaskSwitchContext+0xb0>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	e010      	b.n	8008596 <vTaskSwitchContext+0x46>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10a      	bne.n	8008590 <vTaskSwitchContext+0x40>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	607b      	str	r3, [r7, #4]
}
 800858c:	bf00      	nop
 800858e:	e7fe      	b.n	800858e <vTaskSwitchContext+0x3e>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3b01      	subs	r3, #1
 8008594:	60fb      	str	r3, [r7, #12]
 8008596:	491b      	ldr	r1, [pc, #108]	; (8008604 <vTaskSwitchContext+0xb4>)
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	4613      	mov	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	440b      	add	r3, r1
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d0e4      	beq.n	8008574 <vTaskSwitchContext+0x24>
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	4613      	mov	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4a13      	ldr	r2, [pc, #76]	; (8008604 <vTaskSwitchContext+0xb4>)
 80085b6:	4413      	add	r3, r2
 80085b8:	60bb      	str	r3, [r7, #8]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	605a      	str	r2, [r3, #4]
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	3308      	adds	r3, #8
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d104      	bne.n	80085da <vTaskSwitchContext+0x8a>
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	605a      	str	r2, [r3, #4]
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	4a09      	ldr	r2, [pc, #36]	; (8008608 <vTaskSwitchContext+0xb8>)
 80085e2:	6013      	str	r3, [r2, #0]
 80085e4:	4a06      	ldr	r2, [pc, #24]	; (8008600 <vTaskSwitchContext+0xb0>)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6013      	str	r3, [r2, #0]
}
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	20000dd8 	.word	0x20000dd8
 80085fc:	20000dc4 	.word	0x20000dc4
 8008600:	20000db8 	.word	0x20000db8
 8008604:	200008e0 	.word	0x200008e0
 8008608:	200008dc 	.word	0x200008dc

0800860c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	60fb      	str	r3, [r7, #12]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008632:	4b07      	ldr	r3, [pc, #28]	; (8008650 <vTaskPlaceOnEventList+0x44>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3318      	adds	r3, #24
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7fe fe87 	bl	800734e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008640:	2101      	movs	r1, #1
 8008642:	6838      	ldr	r0, [r7, #0]
 8008644:	f000 fb7c 	bl	8008d40 <prvAddCurrentTaskToDelayedList>
}
 8008648:	bf00      	nop
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	200008dc 	.word	0x200008dc

08008654 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10a      	bne.n	800867c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	617b      	str	r3, [r7, #20]
}
 8008678:	bf00      	nop
 800867a:	e7fe      	b.n	800867a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800867c:	4b0a      	ldr	r3, [pc, #40]	; (80086a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3318      	adds	r3, #24
 8008682:	4619      	mov	r1, r3
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f7fe fe3e 	bl	8007306 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008690:	f04f 33ff 	mov.w	r3, #4294967295
 8008694:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008696:	6879      	ldr	r1, [r7, #4]
 8008698:	68b8      	ldr	r0, [r7, #8]
 800869a:	f000 fb51 	bl	8008d40 <prvAddCurrentTaskToDelayedList>
	}
 800869e:	bf00      	nop
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	200008dc 	.word	0x200008dc

080086ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10a      	bne.n	80086d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	60fb      	str	r3, [r7, #12]
}
 80086d4:	bf00      	nop
 80086d6:	e7fe      	b.n	80086d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	3318      	adds	r3, #24
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fe fe6f 	bl	80073c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086e2:	4b1e      	ldr	r3, [pc, #120]	; (800875c <xTaskRemoveFromEventList+0xb0>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d11d      	bne.n	8008726 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	3304      	adds	r3, #4
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fe fe66 	bl	80073c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f8:	4b19      	ldr	r3, [pc, #100]	; (8008760 <xTaskRemoveFromEventList+0xb4>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d903      	bls.n	8008708 <xTaskRemoveFromEventList+0x5c>
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	4a16      	ldr	r2, [pc, #88]	; (8008760 <xTaskRemoveFromEventList+0xb4>)
 8008706:	6013      	str	r3, [r2, #0]
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800870c:	4613      	mov	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4a13      	ldr	r2, [pc, #76]	; (8008764 <xTaskRemoveFromEventList+0xb8>)
 8008716:	441a      	add	r2, r3
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	3304      	adds	r3, #4
 800871c:	4619      	mov	r1, r3
 800871e:	4610      	mov	r0, r2
 8008720:	f7fe fdf1 	bl	8007306 <vListInsertEnd>
 8008724:	e005      	b.n	8008732 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	3318      	adds	r3, #24
 800872a:	4619      	mov	r1, r3
 800872c:	480e      	ldr	r0, [pc, #56]	; (8008768 <xTaskRemoveFromEventList+0xbc>)
 800872e:	f7fe fdea 	bl	8007306 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008736:	4b0d      	ldr	r3, [pc, #52]	; (800876c <xTaskRemoveFromEventList+0xc0>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	429a      	cmp	r2, r3
 800873e:	d905      	bls.n	800874c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008740:	2301      	movs	r3, #1
 8008742:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008744:	4b0a      	ldr	r3, [pc, #40]	; (8008770 <xTaskRemoveFromEventList+0xc4>)
 8008746:	2201      	movs	r2, #1
 8008748:	601a      	str	r2, [r3, #0]
 800874a:	e001      	b.n	8008750 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800874c:	2300      	movs	r3, #0
 800874e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008750:	697b      	ldr	r3, [r7, #20]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3718      	adds	r7, #24
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	20000dd8 	.word	0x20000dd8
 8008760:	20000db8 	.word	0x20000db8
 8008764:	200008e0 	.word	0x200008e0
 8008768:	20000d70 	.word	0x20000d70
 800876c:	200008dc 	.word	0x200008dc
 8008770:	20000dc4 	.word	0x20000dc4

08008774 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800877c:	4b06      	ldr	r3, [pc, #24]	; (8008798 <vTaskInternalSetTimeOutState+0x24>)
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008784:	4b05      	ldr	r3, [pc, #20]	; (800879c <vTaskInternalSetTimeOutState+0x28>)
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	605a      	str	r2, [r3, #4]
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	20000dc8 	.word	0x20000dc8
 800879c:	20000db4 	.word	0x20000db4

080087a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b088      	sub	sp, #32
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10a      	bne.n	80087c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	613b      	str	r3, [r7, #16]
}
 80087c2:	bf00      	nop
 80087c4:	e7fe      	b.n	80087c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10a      	bne.n	80087e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	60fb      	str	r3, [r7, #12]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80087e2:	f000 ff7f 	bl	80096e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087e6:	4b1d      	ldr	r3, [pc, #116]	; (800885c <xTaskCheckForTimeOut+0xbc>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	69ba      	ldr	r2, [r7, #24]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fe:	d102      	bne.n	8008806 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008800:	2300      	movs	r3, #0
 8008802:	61fb      	str	r3, [r7, #28]
 8008804:	e023      	b.n	800884e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	4b15      	ldr	r3, [pc, #84]	; (8008860 <xTaskCheckForTimeOut+0xc0>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d007      	beq.n	8008822 <xTaskCheckForTimeOut+0x82>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	429a      	cmp	r2, r3
 800881a:	d302      	bcc.n	8008822 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800881c:	2301      	movs	r3, #1
 800881e:	61fb      	str	r3, [r7, #28]
 8008820:	e015      	b.n	800884e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	429a      	cmp	r2, r3
 800882a:	d20b      	bcs.n	8008844 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	1ad2      	subs	r2, r2, r3
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7ff ff9b 	bl	8008774 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800883e:	2300      	movs	r3, #0
 8008840:	61fb      	str	r3, [r7, #28]
 8008842:	e004      	b.n	800884e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	2200      	movs	r2, #0
 8008848:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800884a:	2301      	movs	r3, #1
 800884c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800884e:	f000 ff79 	bl	8009744 <vPortExitCritical>

	return xReturn;
 8008852:	69fb      	ldr	r3, [r7, #28]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3720      	adds	r7, #32
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	20000db4 	.word	0x20000db4
 8008860:	20000dc8 	.word	0x20000dc8

08008864 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008864:	b480      	push	{r7}
 8008866:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008868:	4b03      	ldr	r3, [pc, #12]	; (8008878 <vTaskMissedYield+0x14>)
 800886a:	2201      	movs	r2, #1
 800886c:	601a      	str	r2, [r3, #0]
}
 800886e:	bf00      	nop
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	20000dc4 	.word	0x20000dc4

0800887c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008884:	f000 f852 	bl	800892c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008888:	4b06      	ldr	r3, [pc, #24]	; (80088a4 <prvIdleTask+0x28>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d9f9      	bls.n	8008884 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008890:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <prvIdleTask+0x2c>)
 8008892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008896:	601a      	str	r2, [r3, #0]
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80088a0:	e7f0      	b.n	8008884 <prvIdleTask+0x8>
 80088a2:	bf00      	nop
 80088a4:	200008e0 	.word	0x200008e0
 80088a8:	e000ed04 	.word	0xe000ed04

080088ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088b2:	2300      	movs	r3, #0
 80088b4:	607b      	str	r3, [r7, #4]
 80088b6:	e00c      	b.n	80088d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4a12      	ldr	r2, [pc, #72]	; (800890c <prvInitialiseTaskLists+0x60>)
 80088c4:	4413      	add	r3, r2
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fe fcf0 	bl	80072ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	3301      	adds	r3, #1
 80088d0:	607b      	str	r3, [r7, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b37      	cmp	r3, #55	; 0x37
 80088d6:	d9ef      	bls.n	80088b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088d8:	480d      	ldr	r0, [pc, #52]	; (8008910 <prvInitialiseTaskLists+0x64>)
 80088da:	f7fe fce7 	bl	80072ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088de:	480d      	ldr	r0, [pc, #52]	; (8008914 <prvInitialiseTaskLists+0x68>)
 80088e0:	f7fe fce4 	bl	80072ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088e4:	480c      	ldr	r0, [pc, #48]	; (8008918 <prvInitialiseTaskLists+0x6c>)
 80088e6:	f7fe fce1 	bl	80072ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088ea:	480c      	ldr	r0, [pc, #48]	; (800891c <prvInitialiseTaskLists+0x70>)
 80088ec:	f7fe fcde 	bl	80072ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088f0:	480b      	ldr	r0, [pc, #44]	; (8008920 <prvInitialiseTaskLists+0x74>)
 80088f2:	f7fe fcdb 	bl	80072ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088f6:	4b0b      	ldr	r3, [pc, #44]	; (8008924 <prvInitialiseTaskLists+0x78>)
 80088f8:	4a05      	ldr	r2, [pc, #20]	; (8008910 <prvInitialiseTaskLists+0x64>)
 80088fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088fc:	4b0a      	ldr	r3, [pc, #40]	; (8008928 <prvInitialiseTaskLists+0x7c>)
 80088fe:	4a05      	ldr	r2, [pc, #20]	; (8008914 <prvInitialiseTaskLists+0x68>)
 8008900:	601a      	str	r2, [r3, #0]
}
 8008902:	bf00      	nop
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	200008e0 	.word	0x200008e0
 8008910:	20000d40 	.word	0x20000d40
 8008914:	20000d54 	.word	0x20000d54
 8008918:	20000d70 	.word	0x20000d70
 800891c:	20000d84 	.word	0x20000d84
 8008920:	20000d9c 	.word	0x20000d9c
 8008924:	20000d68 	.word	0x20000d68
 8008928:	20000d6c 	.word	0x20000d6c

0800892c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008932:	e019      	b.n	8008968 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008934:	f000 fed6 	bl	80096e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008938:	4b10      	ldr	r3, [pc, #64]	; (800897c <prvCheckTasksWaitingTermination+0x50>)
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	3304      	adds	r3, #4
 8008944:	4618      	mov	r0, r3
 8008946:	f7fe fd3b 	bl	80073c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800894a:	4b0d      	ldr	r3, [pc, #52]	; (8008980 <prvCheckTasksWaitingTermination+0x54>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3b01      	subs	r3, #1
 8008950:	4a0b      	ldr	r2, [pc, #44]	; (8008980 <prvCheckTasksWaitingTermination+0x54>)
 8008952:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008954:	4b0b      	ldr	r3, [pc, #44]	; (8008984 <prvCheckTasksWaitingTermination+0x58>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3b01      	subs	r3, #1
 800895a:	4a0a      	ldr	r2, [pc, #40]	; (8008984 <prvCheckTasksWaitingTermination+0x58>)
 800895c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800895e:	f000 fef1 	bl	8009744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f810 	bl	8008988 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008968:	4b06      	ldr	r3, [pc, #24]	; (8008984 <prvCheckTasksWaitingTermination+0x58>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1e1      	bne.n	8008934 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008970:	bf00      	nop
 8008972:	bf00      	nop
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	20000d84 	.word	0x20000d84
 8008980:	20000db0 	.word	0x20000db0
 8008984:	20000d98 	.word	0x20000d98

08008988 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008996:	2b00      	cmp	r3, #0
 8008998:	d108      	bne.n	80089ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899e:	4618      	mov	r0, r3
 80089a0:	f001 f88e 	bl	8009ac0 <vPortFree>
				vPortFree( pxTCB );
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f001 f88b 	bl	8009ac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80089aa:	e018      	b.n	80089de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d103      	bne.n	80089be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f001 f882 	bl	8009ac0 <vPortFree>
	}
 80089bc:	e00f      	b.n	80089de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d00a      	beq.n	80089de <prvDeleteTCB+0x56>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	60fb      	str	r3, [r7, #12]
}
 80089da:	bf00      	nop
 80089dc:	e7fe      	b.n	80089dc <prvDeleteTCB+0x54>
	}
 80089de:	bf00      	nop
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089ee:	4b0c      	ldr	r3, [pc, #48]	; (8008a20 <prvResetNextTaskUnblockTime+0x38>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d104      	bne.n	8008a02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089f8:	4b0a      	ldr	r3, [pc, #40]	; (8008a24 <prvResetNextTaskUnblockTime+0x3c>)
 80089fa:	f04f 32ff 	mov.w	r2, #4294967295
 80089fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a00:	e008      	b.n	8008a14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a02:	4b07      	ldr	r3, [pc, #28]	; (8008a20 <prvResetNextTaskUnblockTime+0x38>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	4a04      	ldr	r2, [pc, #16]	; (8008a24 <prvResetNextTaskUnblockTime+0x3c>)
 8008a12:	6013      	str	r3, [r2, #0]
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	20000d68 	.word	0x20000d68
 8008a24:	20000dd0 	.word	0x20000dd0

08008a28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a2e:	4b0b      	ldr	r3, [pc, #44]	; (8008a5c <xTaskGetSchedulerState+0x34>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d102      	bne.n	8008a3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a36:	2301      	movs	r3, #1
 8008a38:	607b      	str	r3, [r7, #4]
 8008a3a:	e008      	b.n	8008a4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a3c:	4b08      	ldr	r3, [pc, #32]	; (8008a60 <xTaskGetSchedulerState+0x38>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d102      	bne.n	8008a4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a44:	2302      	movs	r3, #2
 8008a46:	607b      	str	r3, [r7, #4]
 8008a48:	e001      	b.n	8008a4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a4e:	687b      	ldr	r3, [r7, #4]
	}
 8008a50:	4618      	mov	r0, r3
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	20000dbc 	.word	0x20000dbc
 8008a60:	20000dd8 	.word	0x20000dd8

08008a64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a70:	2300      	movs	r3, #0
 8008a72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d056      	beq.n	8008b28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a7a:	4b2e      	ldr	r3, [pc, #184]	; (8008b34 <xTaskPriorityDisinherit+0xd0>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d00a      	beq.n	8008a9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	60fb      	str	r3, [r7, #12]
}
 8008a96:	bf00      	nop
 8008a98:	e7fe      	b.n	8008a98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10a      	bne.n	8008ab8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	60bb      	str	r3, [r7, #8]
}
 8008ab4:	bf00      	nop
 8008ab6:	e7fe      	b.n	8008ab6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008abc:	1e5a      	subs	r2, r3, #1
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d02c      	beq.n	8008b28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d128      	bne.n	8008b28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe fc70 	bl	80073c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af8:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <xTaskPriorityDisinherit+0xd4>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d903      	bls.n	8008b08 <xTaskPriorityDisinherit+0xa4>
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	4a0c      	ldr	r2, [pc, #48]	; (8008b38 <xTaskPriorityDisinherit+0xd4>)
 8008b06:	6013      	str	r3, [r2, #0]
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4a09      	ldr	r2, [pc, #36]	; (8008b3c <xTaskPriorityDisinherit+0xd8>)
 8008b16:	441a      	add	r2, r3
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4610      	mov	r0, r2
 8008b20:	f7fe fbf1 	bl	8007306 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b24:	2301      	movs	r3, #1
 8008b26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b28:	697b      	ldr	r3, [r7, #20]
	}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	200008dc 	.word	0x200008dc
 8008b38:	20000db8 	.word	0x20000db8
 8008b3c:	200008e0 	.word	0x200008e0

08008b40 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8008b4a:	f000 fdcb 	bl	80096e4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8008b4e:	4b1e      	ldr	r3, [pc, #120]	; (8008bc8 <ulTaskNotifyTake+0x88>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d113      	bne.n	8008b80 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008b58:	4b1b      	ldr	r3, [pc, #108]	; (8008bc8 <ulTaskNotifyTake+0x88>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00b      	beq.n	8008b80 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b68:	2101      	movs	r1, #1
 8008b6a:	6838      	ldr	r0, [r7, #0]
 8008b6c:	f000 f8e8 	bl	8008d40 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008b70:	4b16      	ldr	r3, [pc, #88]	; (8008bcc <ulTaskNotifyTake+0x8c>)
 8008b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008b80:	f000 fde0 	bl	8009744 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008b84:	f000 fdae 	bl	80096e4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8008b88:	4b0f      	ldr	r3, [pc, #60]	; (8008bc8 <ulTaskNotifyTake+0x88>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00c      	beq.n	8008bb0 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d004      	beq.n	8008ba6 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <ulTaskNotifyTake+0x88>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	655a      	str	r2, [r3, #84]	; 0x54
 8008ba4:	e004      	b.n	8008bb0 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8008ba6:	4b08      	ldr	r3, [pc, #32]	; (8008bc8 <ulTaskNotifyTake+0x88>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	3a01      	subs	r2, #1
 8008bae:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008bb0:	4b05      	ldr	r3, [pc, #20]	; (8008bc8 <ulTaskNotifyTake+0x88>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8008bba:	f000 fdc3 	bl	8009744 <vPortExitCritical>

		return ulReturn;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
	}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	200008dc 	.word	0x200008dc
 8008bcc:	e000ed04 	.word	0xe000ed04

08008bd0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b08a      	sub	sp, #40	; 0x28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	603b      	str	r3, [r7, #0]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008be0:	2301      	movs	r3, #1
 8008be2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10a      	bne.n	8008c00 <xTaskGenericNotify+0x30>
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	61bb      	str	r3, [r7, #24]
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008c04:	f000 fd6e 	bl	80096e4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008c1c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	2202      	movs	r2, #2
 8008c22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	2b04      	cmp	r3, #4
 8008c2a:	d828      	bhi.n	8008c7e <xTaskGenericNotify+0xae>
 8008c2c:	a201      	add	r2, pc, #4	; (adr r2, 8008c34 <xTaskGenericNotify+0x64>)
 8008c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c32:	bf00      	nop
 8008c34:	08008c9f 	.word	0x08008c9f
 8008c38:	08008c49 	.word	0x08008c49
 8008c3c:	08008c57 	.word	0x08008c57
 8008c40:	08008c63 	.word	0x08008c63
 8008c44:	08008c6b 	.word	0x08008c6b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008c48:	6a3b      	ldr	r3, [r7, #32]
 8008c4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	431a      	orrs	r2, r3
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008c54:	e026      	b.n	8008ca4 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5a:	1c5a      	adds	r2, r3, #1
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008c60:	e020      	b.n	8008ca4 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008c62:	6a3b      	ldr	r3, [r7, #32]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008c68:	e01c      	b.n	8008ca4 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008c6a:	7ffb      	ldrb	r3, [r7, #31]
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d003      	beq.n	8008c78 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008c76:	e015      	b.n	8008ca4 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008c7c:	e012      	b.n	8008ca4 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c86:	d00c      	beq.n	8008ca2 <xTaskGenericNotify+0xd2>
	__asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	617b      	str	r3, [r7, #20]
}
 8008c9a:	bf00      	nop
 8008c9c:	e7fe      	b.n	8008c9c <xTaskGenericNotify+0xcc>
					break;
 8008c9e:	bf00      	nop
 8008ca0:	e000      	b.n	8008ca4 <xTaskGenericNotify+0xd4>

					break;
 8008ca2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008ca4:	7ffb      	ldrb	r3, [r7, #31]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d13a      	bne.n	8008d20 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008caa:	6a3b      	ldr	r3, [r7, #32]
 8008cac:	3304      	adds	r3, #4
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe fb86 	bl	80073c0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb8:	4b1d      	ldr	r3, [pc, #116]	; (8008d30 <xTaskGenericNotify+0x160>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d903      	bls.n	8008cc8 <xTaskGenericNotify+0xf8>
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc4:	4a1a      	ldr	r2, [pc, #104]	; (8008d30 <xTaskGenericNotify+0x160>)
 8008cc6:	6013      	str	r3, [r2, #0]
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ccc:	4613      	mov	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4a17      	ldr	r2, [pc, #92]	; (8008d34 <xTaskGenericNotify+0x164>)
 8008cd6:	441a      	add	r2, r3
 8008cd8:	6a3b      	ldr	r3, [r7, #32]
 8008cda:	3304      	adds	r3, #4
 8008cdc:	4619      	mov	r1, r3
 8008cde:	4610      	mov	r0, r2
 8008ce0:	f7fe fb11 	bl	8007306 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00a      	beq.n	8008d02 <xTaskGenericNotify+0x132>
	__asm volatile
 8008cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	613b      	str	r3, [r7, #16]
}
 8008cfe:	bf00      	nop
 8008d00:	e7fe      	b.n	8008d00 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d06:	4b0c      	ldr	r3, [pc, #48]	; (8008d38 <xTaskGenericNotify+0x168>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d907      	bls.n	8008d20 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008d10:	4b0a      	ldr	r3, [pc, #40]	; (8008d3c <xTaskGenericNotify+0x16c>)
 8008d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008d20:	f000 fd10 	bl	8009744 <vPortExitCritical>

		return xReturn;
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3728      	adds	r7, #40	; 0x28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	20000db8 	.word	0x20000db8
 8008d34:	200008e0 	.word	0x200008e0
 8008d38:	200008dc 	.word	0x200008dc
 8008d3c:	e000ed04 	.word	0xe000ed04

08008d40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d4a:	4b21      	ldr	r3, [pc, #132]	; (8008dd0 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d50:	4b20      	ldr	r3, [pc, #128]	; (8008dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3304      	adds	r3, #4
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fe fb32 	bl	80073c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d62:	d10a      	bne.n	8008d7a <prvAddCurrentTaskToDelayedList+0x3a>
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d007      	beq.n	8008d7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d6a:	4b1a      	ldr	r3, [pc, #104]	; (8008dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3304      	adds	r3, #4
 8008d70:	4619      	mov	r1, r3
 8008d72:	4819      	ldr	r0, [pc, #100]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d74:	f7fe fac7 	bl	8007306 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d78:	e026      	b.n	8008dc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4413      	add	r3, r2
 8008d80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d82:	4b14      	ldr	r3, [pc, #80]	; (8008dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d209      	bcs.n	8008da6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d92:	4b12      	ldr	r3, [pc, #72]	; (8008ddc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	4b0f      	ldr	r3, [pc, #60]	; (8008dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4610      	mov	r0, r2
 8008da0:	f7fe fad5 	bl	800734e <vListInsert>
}
 8008da4:	e010      	b.n	8008dc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008da6:	4b0e      	ldr	r3, [pc, #56]	; (8008de0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3304      	adds	r3, #4
 8008db0:	4619      	mov	r1, r3
 8008db2:	4610      	mov	r0, r2
 8008db4:	f7fe facb 	bl	800734e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008db8:	4b0a      	ldr	r3, [pc, #40]	; (8008de4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d202      	bcs.n	8008dc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008dc2:	4a08      	ldr	r2, [pc, #32]	; (8008de4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	6013      	str	r3, [r2, #0]
}
 8008dc8:	bf00      	nop
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20000db4 	.word	0x20000db4
 8008dd4:	200008dc 	.word	0x200008dc
 8008dd8:	20000d9c 	.word	0x20000d9c
 8008ddc:	20000d6c 	.word	0x20000d6c
 8008de0:	20000d68 	.word	0x20000d68
 8008de4:	20000dd0 	.word	0x20000dd0

08008de8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b08a      	sub	sp, #40	; 0x28
 8008dec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008dee:	2300      	movs	r3, #0
 8008df0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008df2:	f000 fb07 	bl	8009404 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008df6:	4b1c      	ldr	r3, [pc, #112]	; (8008e68 <xTimerCreateTimerTask+0x80>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d021      	beq.n	8008e42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e06:	1d3a      	adds	r2, r7, #4
 8008e08:	f107 0108 	add.w	r1, r7, #8
 8008e0c:	f107 030c 	add.w	r3, r7, #12
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fe fa31 	bl	8007278 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	9202      	str	r2, [sp, #8]
 8008e1e:	9301      	str	r3, [sp, #4]
 8008e20:	2302      	movs	r3, #2
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	2300      	movs	r3, #0
 8008e26:	460a      	mov	r2, r1
 8008e28:	4910      	ldr	r1, [pc, #64]	; (8008e6c <xTimerCreateTimerTask+0x84>)
 8008e2a:	4811      	ldr	r0, [pc, #68]	; (8008e70 <xTimerCreateTimerTask+0x88>)
 8008e2c:	f7fe ffde 	bl	8007dec <xTaskCreateStatic>
 8008e30:	4603      	mov	r3, r0
 8008e32:	4a10      	ldr	r2, [pc, #64]	; (8008e74 <xTimerCreateTimerTask+0x8c>)
 8008e34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e36:	4b0f      	ldr	r3, [pc, #60]	; (8008e74 <xTimerCreateTimerTask+0x8c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10a      	bne.n	8008e5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4c:	f383 8811 	msr	BASEPRI, r3
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	613b      	str	r3, [r7, #16]
}
 8008e5a:	bf00      	nop
 8008e5c:	e7fe      	b.n	8008e5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e5e:	697b      	ldr	r3, [r7, #20]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	20000e0c 	.word	0x20000e0c
 8008e6c:	0800e458 	.word	0x0800e458
 8008e70:	08008fad 	.word	0x08008fad
 8008e74:	20000e10 	.word	0x20000e10

08008e78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08a      	sub	sp, #40	; 0x28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
 8008e84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e86:	2300      	movs	r3, #0
 8008e88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10a      	bne.n	8008ea6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	623b      	str	r3, [r7, #32]
}
 8008ea2:	bf00      	nop
 8008ea4:	e7fe      	b.n	8008ea4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ea6:	4b1a      	ldr	r3, [pc, #104]	; (8008f10 <xTimerGenericCommand+0x98>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d02a      	beq.n	8008f04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	2b05      	cmp	r3, #5
 8008ebe:	dc18      	bgt.n	8008ef2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ec0:	f7ff fdb2 	bl	8008a28 <xTaskGetSchedulerState>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d109      	bne.n	8008ede <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008eca:	4b11      	ldr	r3, [pc, #68]	; (8008f10 <xTimerGenericCommand+0x98>)
 8008ecc:	6818      	ldr	r0, [r3, #0]
 8008ece:	f107 0110 	add.w	r1, r7, #16
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ed6:	f7fe fba1 	bl	800761c <xQueueGenericSend>
 8008eda:	6278      	str	r0, [r7, #36]	; 0x24
 8008edc:	e012      	b.n	8008f04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ede:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <xTimerGenericCommand+0x98>)
 8008ee0:	6818      	ldr	r0, [r3, #0]
 8008ee2:	f107 0110 	add.w	r1, r7, #16
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f7fe fb97 	bl	800761c <xQueueGenericSend>
 8008eee:	6278      	str	r0, [r7, #36]	; 0x24
 8008ef0:	e008      	b.n	8008f04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ef2:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <xTimerGenericCommand+0x98>)
 8008ef4:	6818      	ldr	r0, [r3, #0]
 8008ef6:	f107 0110 	add.w	r1, r7, #16
 8008efa:	2300      	movs	r3, #0
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	f7fe fc8b 	bl	8007818 <xQueueGenericSendFromISR>
 8008f02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3728      	adds	r7, #40	; 0x28
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20000e0c 	.word	0x20000e0c

08008f14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b088      	sub	sp, #32
 8008f18:	af02      	add	r7, sp, #8
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f1e:	4b22      	ldr	r3, [pc, #136]	; (8008fa8 <prvProcessExpiredTimer+0x94>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fe fa47 	bl	80073c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d022      	beq.n	8008f86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	699a      	ldr	r2, [r3, #24]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	18d1      	adds	r1, r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	6978      	ldr	r0, [r7, #20]
 8008f4e:	f000 f8d1 	bl	80090f4 <prvInsertTimerInActiveList>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d01f      	beq.n	8008f98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f58:	2300      	movs	r3, #0
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	2100      	movs	r1, #0
 8008f62:	6978      	ldr	r0, [r7, #20]
 8008f64:	f7ff ff88 	bl	8008e78 <xTimerGenericCommand>
 8008f68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d113      	bne.n	8008f98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	60fb      	str	r3, [r7, #12]
}
 8008f82:	bf00      	nop
 8008f84:	e7fe      	b.n	8008f84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f8c:	f023 0301 	bic.w	r3, r3, #1
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	6a1b      	ldr	r3, [r3, #32]
 8008f9c:	6978      	ldr	r0, [r7, #20]
 8008f9e:	4798      	blx	r3
}
 8008fa0:	bf00      	nop
 8008fa2:	3718      	adds	r7, #24
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	20000e04 	.word	0x20000e04

08008fac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fb4:	f107 0308 	add.w	r3, r7, #8
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 f857 	bl	800906c <prvGetNextExpireTime>
 8008fbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f000 f803 	bl	8008fd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008fca:	f000 f8d5 	bl	8009178 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fce:	e7f1      	b.n	8008fb4 <prvTimerTask+0x8>

08008fd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008fda:	f7ff f943 	bl	8008264 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fde:	f107 0308 	add.w	r3, r7, #8
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 f866 	bl	80090b4 <prvSampleTimeNow>
 8008fe8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d130      	bne.n	8009052 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d10a      	bne.n	800900c <prvProcessTimerOrBlockTask+0x3c>
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d806      	bhi.n	800900c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ffe:	f7ff f93f 	bl	8008280 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009002:	68f9      	ldr	r1, [r7, #12]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7ff ff85 	bl	8008f14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800900a:	e024      	b.n	8009056 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d008      	beq.n	8009024 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009012:	4b13      	ldr	r3, [pc, #76]	; (8009060 <prvProcessTimerOrBlockTask+0x90>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d101      	bne.n	8009020 <prvProcessTimerOrBlockTask+0x50>
 800901c:	2301      	movs	r3, #1
 800901e:	e000      	b.n	8009022 <prvProcessTimerOrBlockTask+0x52>
 8009020:	2300      	movs	r3, #0
 8009022:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009024:	4b0f      	ldr	r3, [pc, #60]	; (8009064 <prvProcessTimerOrBlockTask+0x94>)
 8009026:	6818      	ldr	r0, [r3, #0]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	4619      	mov	r1, r3
 8009032:	f7fe fea7 	bl	8007d84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009036:	f7ff f923 	bl	8008280 <xTaskResumeAll>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10a      	bne.n	8009056 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009040:	4b09      	ldr	r3, [pc, #36]	; (8009068 <prvProcessTimerOrBlockTask+0x98>)
 8009042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	f3bf 8f6f 	isb	sy
}
 8009050:	e001      	b.n	8009056 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009052:	f7ff f915 	bl	8008280 <xTaskResumeAll>
}
 8009056:	bf00      	nop
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20000e08 	.word	0x20000e08
 8009064:	20000e0c 	.word	0x20000e0c
 8009068:	e000ed04 	.word	0xe000ed04

0800906c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009074:	4b0e      	ldr	r3, [pc, #56]	; (80090b0 <prvGetNextExpireTime+0x44>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <prvGetNextExpireTime+0x16>
 800907e:	2201      	movs	r2, #1
 8009080:	e000      	b.n	8009084 <prvGetNextExpireTime+0x18>
 8009082:	2200      	movs	r2, #0
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d105      	bne.n	800909c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009090:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <prvGetNextExpireTime+0x44>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	60fb      	str	r3, [r7, #12]
 800909a:	e001      	b.n	80090a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800909c:	2300      	movs	r3, #0
 800909e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80090a0:	68fb      	ldr	r3, [r7, #12]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	20000e04 	.word	0x20000e04

080090b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80090bc:	f7ff f97e 	bl	80083bc <xTaskGetTickCount>
 80090c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80090c2:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <prvSampleTimeNow+0x3c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d205      	bcs.n	80090d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80090cc:	f000 f936 	bl	800933c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	e002      	b.n	80090de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80090de:	4a04      	ldr	r2, [pc, #16]	; (80090f0 <prvSampleTimeNow+0x3c>)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80090e4:	68fb      	ldr	r3, [r7, #12]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20000e14 	.word	0x20000e14

080090f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
 8009100:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009102:	2300      	movs	r3, #0
 8009104:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	429a      	cmp	r2, r3
 8009118:	d812      	bhi.n	8009140 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	1ad2      	subs	r2, r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	429a      	cmp	r2, r3
 8009126:	d302      	bcc.n	800912e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009128:	2301      	movs	r3, #1
 800912a:	617b      	str	r3, [r7, #20]
 800912c:	e01b      	b.n	8009166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800912e:	4b10      	ldr	r3, [pc, #64]	; (8009170 <prvInsertTimerInActiveList+0x7c>)
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	3304      	adds	r3, #4
 8009136:	4619      	mov	r1, r3
 8009138:	4610      	mov	r0, r2
 800913a:	f7fe f908 	bl	800734e <vListInsert>
 800913e:	e012      	b.n	8009166 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	429a      	cmp	r2, r3
 8009146:	d206      	bcs.n	8009156 <prvInsertTimerInActiveList+0x62>
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	429a      	cmp	r2, r3
 800914e:	d302      	bcc.n	8009156 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009150:	2301      	movs	r3, #1
 8009152:	617b      	str	r3, [r7, #20]
 8009154:	e007      	b.n	8009166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009156:	4b07      	ldr	r3, [pc, #28]	; (8009174 <prvInsertTimerInActiveList+0x80>)
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3304      	adds	r3, #4
 800915e:	4619      	mov	r1, r3
 8009160:	4610      	mov	r0, r2
 8009162:	f7fe f8f4 	bl	800734e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009166:	697b      	ldr	r3, [r7, #20]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3718      	adds	r7, #24
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	20000e08 	.word	0x20000e08
 8009174:	20000e04 	.word	0x20000e04

08009178 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b08e      	sub	sp, #56	; 0x38
 800917c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800917e:	e0ca      	b.n	8009316 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	da18      	bge.n	80091b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009186:	1d3b      	adds	r3, r7, #4
 8009188:	3304      	adds	r3, #4
 800918a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800918c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10a      	bne.n	80091a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	61fb      	str	r3, [r7, #28]
}
 80091a4:	bf00      	nop
 80091a6:	e7fe      	b.n	80091a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80091a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ae:	6850      	ldr	r0, [r2, #4]
 80091b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091b2:	6892      	ldr	r2, [r2, #8]
 80091b4:	4611      	mov	r1, r2
 80091b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f2c0 80aa 	blt.w	8009314 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80091c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c6:	695b      	ldr	r3, [r3, #20]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d004      	beq.n	80091d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ce:	3304      	adds	r3, #4
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fe f8f5 	bl	80073c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091d6:	463b      	mov	r3, r7
 80091d8:	4618      	mov	r0, r3
 80091da:	f7ff ff6b 	bl	80090b4 <prvSampleTimeNow>
 80091de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b09      	cmp	r3, #9
 80091e4:	f200 8097 	bhi.w	8009316 <prvProcessReceivedCommands+0x19e>
 80091e8:	a201      	add	r2, pc, #4	; (adr r2, 80091f0 <prvProcessReceivedCommands+0x78>)
 80091ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ee:	bf00      	nop
 80091f0:	08009219 	.word	0x08009219
 80091f4:	08009219 	.word	0x08009219
 80091f8:	08009219 	.word	0x08009219
 80091fc:	0800928d 	.word	0x0800928d
 8009200:	080092a1 	.word	0x080092a1
 8009204:	080092eb 	.word	0x080092eb
 8009208:	08009219 	.word	0x08009219
 800920c:	08009219 	.word	0x08009219
 8009210:	0800928d 	.word	0x0800928d
 8009214:	080092a1 	.word	0x080092a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800921e:	f043 0301 	orr.w	r3, r3, #1
 8009222:	b2da      	uxtb	r2, r3
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	18d1      	adds	r1, r2, r3
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009238:	f7ff ff5c 	bl	80090f4 <prvInsertTimerInActiveList>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d069      	beq.n	8009316 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009248:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d05e      	beq.n	8009316 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	441a      	add	r2, r3
 8009260:	2300      	movs	r3, #0
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	2300      	movs	r3, #0
 8009266:	2100      	movs	r1, #0
 8009268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800926a:	f7ff fe05 	bl	8008e78 <xTimerGenericCommand>
 800926e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d14f      	bne.n	8009316 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	61bb      	str	r3, [r7, #24]
}
 8009288:	bf00      	nop
 800928a:	e7fe      	b.n	800928a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800928c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009292:	f023 0301 	bic.w	r3, r3, #1
 8009296:	b2da      	uxtb	r2, r3
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800929e:	e03a      	b.n	8009316 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092a6:	f043 0301 	orr.w	r3, r3, #1
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10a      	bne.n	80092d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	617b      	str	r3, [r7, #20]
}
 80092d2:	bf00      	nop
 80092d4:	e7fe      	b.n	80092d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80092d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d8:	699a      	ldr	r2, [r3, #24]
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	18d1      	adds	r1, r2, r3
 80092de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e4:	f7ff ff06 	bl	80090f4 <prvInsertTimerInActiveList>
					break;
 80092e8:	e015      	b.n	8009316 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092f0:	f003 0302 	and.w	r3, r3, #2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d103      	bne.n	8009300 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80092f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092fa:	f000 fbe1 	bl	8009ac0 <vPortFree>
 80092fe:	e00a      	b.n	8009316 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009306:	f023 0301 	bic.w	r3, r3, #1
 800930a:	b2da      	uxtb	r2, r3
 800930c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009312:	e000      	b.n	8009316 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009314:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009316:	4b08      	ldr	r3, [pc, #32]	; (8009338 <prvProcessReceivedCommands+0x1c0>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	1d39      	adds	r1, r7, #4
 800931c:	2200      	movs	r2, #0
 800931e:	4618      	mov	r0, r3
 8009320:	f7fe fb16 	bl	8007950 <xQueueReceive>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	f47f af2a 	bne.w	8009180 <prvProcessReceivedCommands+0x8>
	}
}
 800932c:	bf00      	nop
 800932e:	bf00      	nop
 8009330:	3730      	adds	r7, #48	; 0x30
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20000e0c 	.word	0x20000e0c

0800933c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b088      	sub	sp, #32
 8009340:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009342:	e048      	b.n	80093d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009344:	4b2d      	ldr	r3, [pc, #180]	; (80093fc <prvSwitchTimerLists+0xc0>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800934e:	4b2b      	ldr	r3, [pc, #172]	; (80093fc <prvSwitchTimerLists+0xc0>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	3304      	adds	r3, #4
 800935c:	4618      	mov	r0, r3
 800935e:	f7fe f82f 	bl	80073c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6a1b      	ldr	r3, [r3, #32]
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009370:	f003 0304 	and.w	r3, r3, #4
 8009374:	2b00      	cmp	r3, #0
 8009376:	d02e      	beq.n	80093d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	4413      	add	r3, r2
 8009380:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	429a      	cmp	r2, r3
 8009388:	d90e      	bls.n	80093a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009396:	4b19      	ldr	r3, [pc, #100]	; (80093fc <prvSwitchTimerLists+0xc0>)
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	3304      	adds	r3, #4
 800939e:	4619      	mov	r1, r3
 80093a0:	4610      	mov	r0, r2
 80093a2:	f7fd ffd4 	bl	800734e <vListInsert>
 80093a6:	e016      	b.n	80093d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093a8:	2300      	movs	r3, #0
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	2300      	movs	r3, #0
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	2100      	movs	r1, #0
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f7ff fd60 	bl	8008e78 <xTimerGenericCommand>
 80093b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10a      	bne.n	80093d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	603b      	str	r3, [r7, #0]
}
 80093d2:	bf00      	nop
 80093d4:	e7fe      	b.n	80093d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093d6:	4b09      	ldr	r3, [pc, #36]	; (80093fc <prvSwitchTimerLists+0xc0>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1b1      	bne.n	8009344 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80093e0:	4b06      	ldr	r3, [pc, #24]	; (80093fc <prvSwitchTimerLists+0xc0>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80093e6:	4b06      	ldr	r3, [pc, #24]	; (8009400 <prvSwitchTimerLists+0xc4>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a04      	ldr	r2, [pc, #16]	; (80093fc <prvSwitchTimerLists+0xc0>)
 80093ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80093ee:	4a04      	ldr	r2, [pc, #16]	; (8009400 <prvSwitchTimerLists+0xc4>)
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	6013      	str	r3, [r2, #0]
}
 80093f4:	bf00      	nop
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	20000e04 	.word	0x20000e04
 8009400:	20000e08 	.word	0x20000e08

08009404 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800940a:	f000 f96b 	bl	80096e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800940e:	4b15      	ldr	r3, [pc, #84]	; (8009464 <prvCheckForValidListAndQueue+0x60>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d120      	bne.n	8009458 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009416:	4814      	ldr	r0, [pc, #80]	; (8009468 <prvCheckForValidListAndQueue+0x64>)
 8009418:	f7fd ff48 	bl	80072ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800941c:	4813      	ldr	r0, [pc, #76]	; (800946c <prvCheckForValidListAndQueue+0x68>)
 800941e:	f7fd ff45 	bl	80072ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009422:	4b13      	ldr	r3, [pc, #76]	; (8009470 <prvCheckForValidListAndQueue+0x6c>)
 8009424:	4a10      	ldr	r2, [pc, #64]	; (8009468 <prvCheckForValidListAndQueue+0x64>)
 8009426:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009428:	4b12      	ldr	r3, [pc, #72]	; (8009474 <prvCheckForValidListAndQueue+0x70>)
 800942a:	4a10      	ldr	r2, [pc, #64]	; (800946c <prvCheckForValidListAndQueue+0x68>)
 800942c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800942e:	2300      	movs	r3, #0
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	4b11      	ldr	r3, [pc, #68]	; (8009478 <prvCheckForValidListAndQueue+0x74>)
 8009434:	4a11      	ldr	r2, [pc, #68]	; (800947c <prvCheckForValidListAndQueue+0x78>)
 8009436:	2110      	movs	r1, #16
 8009438:	200a      	movs	r0, #10
 800943a:	f7fe f853 	bl	80074e4 <xQueueGenericCreateStatic>
 800943e:	4603      	mov	r3, r0
 8009440:	4a08      	ldr	r2, [pc, #32]	; (8009464 <prvCheckForValidListAndQueue+0x60>)
 8009442:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009444:	4b07      	ldr	r3, [pc, #28]	; (8009464 <prvCheckForValidListAndQueue+0x60>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d005      	beq.n	8009458 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800944c:	4b05      	ldr	r3, [pc, #20]	; (8009464 <prvCheckForValidListAndQueue+0x60>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	490b      	ldr	r1, [pc, #44]	; (8009480 <prvCheckForValidListAndQueue+0x7c>)
 8009452:	4618      	mov	r0, r3
 8009454:	f7fe fc6c 	bl	8007d30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009458:	f000 f974 	bl	8009744 <vPortExitCritical>
}
 800945c:	bf00      	nop
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	20000e0c 	.word	0x20000e0c
 8009468:	20000ddc 	.word	0x20000ddc
 800946c:	20000df0 	.word	0x20000df0
 8009470:	20000e04 	.word	0x20000e04
 8009474:	20000e08 	.word	0x20000e08
 8009478:	20000eb8 	.word	0x20000eb8
 800947c:	20000e18 	.word	0x20000e18
 8009480:	0800e460 	.word	0x0800e460

08009484 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3b04      	subs	r3, #4
 8009494:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800949c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	3b04      	subs	r3, #4
 80094a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	f023 0201 	bic.w	r2, r3, #1
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3b04      	subs	r3, #4
 80094b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094b4:	4a0c      	ldr	r2, [pc, #48]	; (80094e8 <pxPortInitialiseStack+0x64>)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	3b14      	subs	r3, #20
 80094be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3b04      	subs	r3, #4
 80094ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f06f 0202 	mvn.w	r2, #2
 80094d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	3b20      	subs	r3, #32
 80094d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094da:	68fb      	ldr	r3, [r7, #12]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	080094ed 	.word	0x080094ed

080094ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094f2:	2300      	movs	r3, #0
 80094f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094f6:	4b12      	ldr	r3, [pc, #72]	; (8009540 <prvTaskExitError+0x54>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fe:	d00a      	beq.n	8009516 <prvTaskExitError+0x2a>
	__asm volatile
 8009500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009504:	f383 8811 	msr	BASEPRI, r3
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	60fb      	str	r3, [r7, #12]
}
 8009512:	bf00      	nop
 8009514:	e7fe      	b.n	8009514 <prvTaskExitError+0x28>
	__asm volatile
 8009516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	60bb      	str	r3, [r7, #8]
}
 8009528:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800952a:	bf00      	nop
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0fc      	beq.n	800952c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009532:	bf00      	nop
 8009534:	bf00      	nop
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	20000010 	.word	0x20000010
	...

08009550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009550:	4b07      	ldr	r3, [pc, #28]	; (8009570 <pxCurrentTCBConst2>)
 8009552:	6819      	ldr	r1, [r3, #0]
 8009554:	6808      	ldr	r0, [r1, #0]
 8009556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955a:	f380 8809 	msr	PSP, r0
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f04f 0000 	mov.w	r0, #0
 8009566:	f380 8811 	msr	BASEPRI, r0
 800956a:	4770      	bx	lr
 800956c:	f3af 8000 	nop.w

08009570 <pxCurrentTCBConst2>:
 8009570:	200008dc 	.word	0x200008dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009574:	bf00      	nop
 8009576:	bf00      	nop

08009578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009578:	4808      	ldr	r0, [pc, #32]	; (800959c <prvPortStartFirstTask+0x24>)
 800957a:	6800      	ldr	r0, [r0, #0]
 800957c:	6800      	ldr	r0, [r0, #0]
 800957e:	f380 8808 	msr	MSP, r0
 8009582:	f04f 0000 	mov.w	r0, #0
 8009586:	f380 8814 	msr	CONTROL, r0
 800958a:	b662      	cpsie	i
 800958c:	b661      	cpsie	f
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	df00      	svc	0
 8009598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800959a:	bf00      	nop
 800959c:	e000ed08 	.word	0xe000ed08

080095a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80095a6:	4b46      	ldr	r3, [pc, #280]	; (80096c0 <xPortStartScheduler+0x120>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a46      	ldr	r2, [pc, #280]	; (80096c4 <xPortStartScheduler+0x124>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d10a      	bne.n	80095c6 <xPortStartScheduler+0x26>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	613b      	str	r3, [r7, #16]
}
 80095c2:	bf00      	nop
 80095c4:	e7fe      	b.n	80095c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095c6:	4b3e      	ldr	r3, [pc, #248]	; (80096c0 <xPortStartScheduler+0x120>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a3f      	ldr	r2, [pc, #252]	; (80096c8 <xPortStartScheduler+0x128>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d10a      	bne.n	80095e6 <xPortStartScheduler+0x46>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	60fb      	str	r3, [r7, #12]
}
 80095e2:	bf00      	nop
 80095e4:	e7fe      	b.n	80095e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095e6:	4b39      	ldr	r3, [pc, #228]	; (80096cc <xPortStartScheduler+0x12c>)
 80095e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	22ff      	movs	r2, #255	; 0xff
 80095f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009600:	78fb      	ldrb	r3, [r7, #3]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009608:	b2da      	uxtb	r2, r3
 800960a:	4b31      	ldr	r3, [pc, #196]	; (80096d0 <xPortStartScheduler+0x130>)
 800960c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800960e:	4b31      	ldr	r3, [pc, #196]	; (80096d4 <xPortStartScheduler+0x134>)
 8009610:	2207      	movs	r2, #7
 8009612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009614:	e009      	b.n	800962a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009616:	4b2f      	ldr	r3, [pc, #188]	; (80096d4 <xPortStartScheduler+0x134>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3b01      	subs	r3, #1
 800961c:	4a2d      	ldr	r2, [pc, #180]	; (80096d4 <xPortStartScheduler+0x134>)
 800961e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	005b      	lsls	r3, r3, #1
 8009626:	b2db      	uxtb	r3, r3
 8009628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800962a:	78fb      	ldrb	r3, [r7, #3]
 800962c:	b2db      	uxtb	r3, r3
 800962e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009632:	2b80      	cmp	r3, #128	; 0x80
 8009634:	d0ef      	beq.n	8009616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009636:	4b27      	ldr	r3, [pc, #156]	; (80096d4 <xPortStartScheduler+0x134>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f1c3 0307 	rsb	r3, r3, #7
 800963e:	2b04      	cmp	r3, #4
 8009640:	d00a      	beq.n	8009658 <xPortStartScheduler+0xb8>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	60bb      	str	r3, [r7, #8]
}
 8009654:	bf00      	nop
 8009656:	e7fe      	b.n	8009656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009658:	4b1e      	ldr	r3, [pc, #120]	; (80096d4 <xPortStartScheduler+0x134>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	4a1d      	ldr	r2, [pc, #116]	; (80096d4 <xPortStartScheduler+0x134>)
 8009660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009662:	4b1c      	ldr	r3, [pc, #112]	; (80096d4 <xPortStartScheduler+0x134>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800966a:	4a1a      	ldr	r2, [pc, #104]	; (80096d4 <xPortStartScheduler+0x134>)
 800966c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	b2da      	uxtb	r2, r3
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009676:	4b18      	ldr	r3, [pc, #96]	; (80096d8 <xPortStartScheduler+0x138>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a17      	ldr	r2, [pc, #92]	; (80096d8 <xPortStartScheduler+0x138>)
 800967c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009682:	4b15      	ldr	r3, [pc, #84]	; (80096d8 <xPortStartScheduler+0x138>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a14      	ldr	r2, [pc, #80]	; (80096d8 <xPortStartScheduler+0x138>)
 8009688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800968c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800968e:	f000 f8dd 	bl	800984c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009692:	4b12      	ldr	r3, [pc, #72]	; (80096dc <xPortStartScheduler+0x13c>)
 8009694:	2200      	movs	r2, #0
 8009696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009698:	f000 f8fc 	bl	8009894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800969c:	4b10      	ldr	r3, [pc, #64]	; (80096e0 <xPortStartScheduler+0x140>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a0f      	ldr	r2, [pc, #60]	; (80096e0 <xPortStartScheduler+0x140>)
 80096a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80096a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80096a8:	f7ff ff66 	bl	8009578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80096ac:	f7fe ff50 	bl	8008550 <vTaskSwitchContext>
	prvTaskExitError();
 80096b0:	f7ff ff1c 	bl	80094ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	e000ed00 	.word	0xe000ed00
 80096c4:	410fc271 	.word	0x410fc271
 80096c8:	410fc270 	.word	0x410fc270
 80096cc:	e000e400 	.word	0xe000e400
 80096d0:	20000f08 	.word	0x20000f08
 80096d4:	20000f0c 	.word	0x20000f0c
 80096d8:	e000ed20 	.word	0xe000ed20
 80096dc:	20000010 	.word	0x20000010
 80096e0:	e000ef34 	.word	0xe000ef34

080096e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
	__asm volatile
 80096ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ee:	f383 8811 	msr	BASEPRI, r3
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	f3bf 8f4f 	dsb	sy
 80096fa:	607b      	str	r3, [r7, #4]
}
 80096fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096fe:	4b0f      	ldr	r3, [pc, #60]	; (800973c <vPortEnterCritical+0x58>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3301      	adds	r3, #1
 8009704:	4a0d      	ldr	r2, [pc, #52]	; (800973c <vPortEnterCritical+0x58>)
 8009706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009708:	4b0c      	ldr	r3, [pc, #48]	; (800973c <vPortEnterCritical+0x58>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d10f      	bne.n	8009730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009710:	4b0b      	ldr	r3, [pc, #44]	; (8009740 <vPortEnterCritical+0x5c>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00a      	beq.n	8009730 <vPortEnterCritical+0x4c>
	__asm volatile
 800971a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	603b      	str	r3, [r7, #0]
}
 800972c:	bf00      	nop
 800972e:	e7fe      	b.n	800972e <vPortEnterCritical+0x4a>
	}
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	20000010 	.word	0x20000010
 8009740:	e000ed04 	.word	0xe000ed04

08009744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800974a:	4b12      	ldr	r3, [pc, #72]	; (8009794 <vPortExitCritical+0x50>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10a      	bne.n	8009768 <vPortExitCritical+0x24>
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	607b      	str	r3, [r7, #4]
}
 8009764:	bf00      	nop
 8009766:	e7fe      	b.n	8009766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009768:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <vPortExitCritical+0x50>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3b01      	subs	r3, #1
 800976e:	4a09      	ldr	r2, [pc, #36]	; (8009794 <vPortExitCritical+0x50>)
 8009770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009772:	4b08      	ldr	r3, [pc, #32]	; (8009794 <vPortExitCritical+0x50>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d105      	bne.n	8009786 <vPortExitCritical+0x42>
 800977a:	2300      	movs	r3, #0
 800977c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	f383 8811 	msr	BASEPRI, r3
}
 8009784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009786:	bf00      	nop
 8009788:	370c      	adds	r7, #12
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	20000010 	.word	0x20000010
	...

080097a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80097a0:	f3ef 8009 	mrs	r0, PSP
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	4b15      	ldr	r3, [pc, #84]	; (8009800 <pxCurrentTCBConst>)
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	f01e 0f10 	tst.w	lr, #16
 80097b0:	bf08      	it	eq
 80097b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ba:	6010      	str	r0, [r2, #0]
 80097bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097c4:	f380 8811 	msr	BASEPRI, r0
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f7fe febe 	bl	8008550 <vTaskSwitchContext>
 80097d4:	f04f 0000 	mov.w	r0, #0
 80097d8:	f380 8811 	msr	BASEPRI, r0
 80097dc:	bc09      	pop	{r0, r3}
 80097de:	6819      	ldr	r1, [r3, #0]
 80097e0:	6808      	ldr	r0, [r1, #0]
 80097e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e6:	f01e 0f10 	tst.w	lr, #16
 80097ea:	bf08      	it	eq
 80097ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097f0:	f380 8809 	msr	PSP, r0
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	f3af 8000 	nop.w

08009800 <pxCurrentTCBConst>:
 8009800:	200008dc 	.word	0x200008dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop

08009808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	607b      	str	r3, [r7, #4]
}
 8009820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009822:	f7fe fddb 	bl	80083dc <xTaskIncrementTick>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800982c:	4b06      	ldr	r3, [pc, #24]	; (8009848 <xPortSysTickHandler+0x40>)
 800982e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	2300      	movs	r3, #0
 8009836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	f383 8811 	msr	BASEPRI, r3
}
 800983e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009840:	bf00      	nop
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	e000ed04 	.word	0xe000ed04

0800984c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009850:	4b0b      	ldr	r3, [pc, #44]	; (8009880 <vPortSetupTimerInterrupt+0x34>)
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009856:	4b0b      	ldr	r3, [pc, #44]	; (8009884 <vPortSetupTimerInterrupt+0x38>)
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800985c:	4b0a      	ldr	r3, [pc, #40]	; (8009888 <vPortSetupTimerInterrupt+0x3c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a0a      	ldr	r2, [pc, #40]	; (800988c <vPortSetupTimerInterrupt+0x40>)
 8009862:	fba2 2303 	umull	r2, r3, r2, r3
 8009866:	099b      	lsrs	r3, r3, #6
 8009868:	4a09      	ldr	r2, [pc, #36]	; (8009890 <vPortSetupTimerInterrupt+0x44>)
 800986a:	3b01      	subs	r3, #1
 800986c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800986e:	4b04      	ldr	r3, [pc, #16]	; (8009880 <vPortSetupTimerInterrupt+0x34>)
 8009870:	2207      	movs	r2, #7
 8009872:	601a      	str	r2, [r3, #0]
}
 8009874:	bf00      	nop
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	e000e010 	.word	0xe000e010
 8009884:	e000e018 	.word	0xe000e018
 8009888:	20000004 	.word	0x20000004
 800988c:	10624dd3 	.word	0x10624dd3
 8009890:	e000e014 	.word	0xe000e014

08009894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80098a4 <vPortEnableVFP+0x10>
 8009898:	6801      	ldr	r1, [r0, #0]
 800989a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800989e:	6001      	str	r1, [r0, #0]
 80098a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80098a2:	bf00      	nop
 80098a4:	e000ed88 	.word	0xe000ed88

080098a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098ae:	f3ef 8305 	mrs	r3, IPSR
 80098b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b0f      	cmp	r3, #15
 80098b8:	d914      	bls.n	80098e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098ba:	4a17      	ldr	r2, [pc, #92]	; (8009918 <vPortValidateInterruptPriority+0x70>)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4413      	add	r3, r2
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098c4:	4b15      	ldr	r3, [pc, #84]	; (800991c <vPortValidateInterruptPriority+0x74>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	7afa      	ldrb	r2, [r7, #11]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d20a      	bcs.n	80098e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	607b      	str	r3, [r7, #4]
}
 80098e0:	bf00      	nop
 80098e2:	e7fe      	b.n	80098e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098e4:	4b0e      	ldr	r3, [pc, #56]	; (8009920 <vPortValidateInterruptPriority+0x78>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80098ec:	4b0d      	ldr	r3, [pc, #52]	; (8009924 <vPortValidateInterruptPriority+0x7c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d90a      	bls.n	800990a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80098f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	603b      	str	r3, [r7, #0]
}
 8009906:	bf00      	nop
 8009908:	e7fe      	b.n	8009908 <vPortValidateInterruptPriority+0x60>
	}
 800990a:	bf00      	nop
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	e000e3f0 	.word	0xe000e3f0
 800991c:	20000f08 	.word	0x20000f08
 8009920:	e000ed0c 	.word	0xe000ed0c
 8009924:	20000f0c 	.word	0x20000f0c

08009928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08a      	sub	sp, #40	; 0x28
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009930:	2300      	movs	r3, #0
 8009932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009934:	f7fe fc96 	bl	8008264 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009938:	4b5b      	ldr	r3, [pc, #364]	; (8009aa8 <pvPortMalloc+0x180>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d101      	bne.n	8009944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009940:	f000 f920 	bl	8009b84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009944:	4b59      	ldr	r3, [pc, #356]	; (8009aac <pvPortMalloc+0x184>)
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4013      	ands	r3, r2
 800994c:	2b00      	cmp	r3, #0
 800994e:	f040 8093 	bne.w	8009a78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d01d      	beq.n	8009994 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009958:	2208      	movs	r2, #8
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4413      	add	r3, r2
 800995e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f003 0307 	and.w	r3, r3, #7
 8009966:	2b00      	cmp	r3, #0
 8009968:	d014      	beq.n	8009994 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f023 0307 	bic.w	r3, r3, #7
 8009970:	3308      	adds	r3, #8
 8009972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00a      	beq.n	8009994 <pvPortMalloc+0x6c>
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	617b      	str	r3, [r7, #20]
}
 8009990:	bf00      	nop
 8009992:	e7fe      	b.n	8009992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d06e      	beq.n	8009a78 <pvPortMalloc+0x150>
 800999a:	4b45      	ldr	r3, [pc, #276]	; (8009ab0 <pvPortMalloc+0x188>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d869      	bhi.n	8009a78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80099a4:	4b43      	ldr	r3, [pc, #268]	; (8009ab4 <pvPortMalloc+0x18c>)
 80099a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80099a8:	4b42      	ldr	r3, [pc, #264]	; (8009ab4 <pvPortMalloc+0x18c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099ae:	e004      	b.n	80099ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d903      	bls.n	80099cc <pvPortMalloc+0xa4>
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1f1      	bne.n	80099b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099cc:	4b36      	ldr	r3, [pc, #216]	; (8009aa8 <pvPortMalloc+0x180>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d050      	beq.n	8009a78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099d6:	6a3b      	ldr	r3, [r7, #32]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2208      	movs	r2, #8
 80099dc:	4413      	add	r3, r2
 80099de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	1ad2      	subs	r2, r2, r3
 80099f0:	2308      	movs	r3, #8
 80099f2:	005b      	lsls	r3, r3, #1
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d91f      	bls.n	8009a38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4413      	add	r3, r2
 80099fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	f003 0307 	and.w	r3, r3, #7
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00a      	beq.n	8009a20 <pvPortMalloc+0xf8>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	613b      	str	r3, [r7, #16]
}
 8009a1c:	bf00      	nop
 8009a1e:	e7fe      	b.n	8009a1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	1ad2      	subs	r2, r2, r3
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a32:	69b8      	ldr	r0, [r7, #24]
 8009a34:	f000 f908 	bl	8009c48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a38:	4b1d      	ldr	r3, [pc, #116]	; (8009ab0 <pvPortMalloc+0x188>)
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	4a1b      	ldr	r2, [pc, #108]	; (8009ab0 <pvPortMalloc+0x188>)
 8009a44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a46:	4b1a      	ldr	r3, [pc, #104]	; (8009ab0 <pvPortMalloc+0x188>)
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	4b1b      	ldr	r3, [pc, #108]	; (8009ab8 <pvPortMalloc+0x190>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d203      	bcs.n	8009a5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a52:	4b17      	ldr	r3, [pc, #92]	; (8009ab0 <pvPortMalloc+0x188>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a18      	ldr	r2, [pc, #96]	; (8009ab8 <pvPortMalloc+0x190>)
 8009a58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	685a      	ldr	r2, [r3, #4]
 8009a5e:	4b13      	ldr	r3, [pc, #76]	; (8009aac <pvPortMalloc+0x184>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	431a      	orrs	r2, r3
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a6e:	4b13      	ldr	r3, [pc, #76]	; (8009abc <pvPortMalloc+0x194>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	3301      	adds	r3, #1
 8009a74:	4a11      	ldr	r2, [pc, #68]	; (8009abc <pvPortMalloc+0x194>)
 8009a76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a78:	f7fe fc02 	bl	8008280 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	f003 0307 	and.w	r3, r3, #7
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00a      	beq.n	8009a9c <pvPortMalloc+0x174>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	60fb      	str	r3, [r7, #12]
}
 8009a98:	bf00      	nop
 8009a9a:	e7fe      	b.n	8009a9a <pvPortMalloc+0x172>
	return pvReturn;
 8009a9c:	69fb      	ldr	r3, [r7, #28]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3728      	adds	r7, #40	; 0x28
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	20004b18 	.word	0x20004b18
 8009aac:	20004b2c 	.word	0x20004b2c
 8009ab0:	20004b1c 	.word	0x20004b1c
 8009ab4:	20004b10 	.word	0x20004b10
 8009ab8:	20004b20 	.word	0x20004b20
 8009abc:	20004b24 	.word	0x20004b24

08009ac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d04d      	beq.n	8009b6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ad2:	2308      	movs	r3, #8
 8009ad4:	425b      	negs	r3, r3
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	4413      	add	r3, r2
 8009ada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	4b24      	ldr	r3, [pc, #144]	; (8009b78 <vPortFree+0xb8>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4013      	ands	r3, r2
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10a      	bne.n	8009b04 <vPortFree+0x44>
	__asm volatile
 8009aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	60fb      	str	r3, [r7, #12]
}
 8009b00:	bf00      	nop
 8009b02:	e7fe      	b.n	8009b02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00a      	beq.n	8009b22 <vPortFree+0x62>
	__asm volatile
 8009b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	60bb      	str	r3, [r7, #8]
}
 8009b1e:	bf00      	nop
 8009b20:	e7fe      	b.n	8009b20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	4b14      	ldr	r3, [pc, #80]	; (8009b78 <vPortFree+0xb8>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4013      	ands	r3, r2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d01e      	beq.n	8009b6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d11a      	bne.n	8009b6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	4b0e      	ldr	r3, [pc, #56]	; (8009b78 <vPortFree+0xb8>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	43db      	mvns	r3, r3
 8009b42:	401a      	ands	r2, r3
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b48:	f7fe fb8c 	bl	8008264 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	4b0a      	ldr	r3, [pc, #40]	; (8009b7c <vPortFree+0xbc>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4413      	add	r3, r2
 8009b56:	4a09      	ldr	r2, [pc, #36]	; (8009b7c <vPortFree+0xbc>)
 8009b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b5a:	6938      	ldr	r0, [r7, #16]
 8009b5c:	f000 f874 	bl	8009c48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b60:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <vPortFree+0xc0>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3301      	adds	r3, #1
 8009b66:	4a06      	ldr	r2, [pc, #24]	; (8009b80 <vPortFree+0xc0>)
 8009b68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b6a:	f7fe fb89 	bl	8008280 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b6e:	bf00      	nop
 8009b70:	3718      	adds	r7, #24
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20004b2c 	.word	0x20004b2c
 8009b7c:	20004b1c 	.word	0x20004b1c
 8009b80:	20004b28 	.word	0x20004b28

08009b84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009b8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b90:	4b27      	ldr	r3, [pc, #156]	; (8009c30 <prvHeapInit+0xac>)
 8009b92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00c      	beq.n	8009bb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	3307      	adds	r3, #7
 8009ba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f023 0307 	bic.w	r3, r3, #7
 8009baa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	4a1f      	ldr	r2, [pc, #124]	; (8009c30 <prvHeapInit+0xac>)
 8009bb4:	4413      	add	r3, r2
 8009bb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009bbc:	4a1d      	ldr	r2, [pc, #116]	; (8009c34 <prvHeapInit+0xb0>)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009bc2:	4b1c      	ldr	r3, [pc, #112]	; (8009c34 <prvHeapInit+0xb0>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	4413      	add	r3, r2
 8009bce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bd0:	2208      	movs	r2, #8
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	1a9b      	subs	r3, r3, r2
 8009bd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f023 0307 	bic.w	r3, r3, #7
 8009bde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	4a15      	ldr	r2, [pc, #84]	; (8009c38 <prvHeapInit+0xb4>)
 8009be4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009be6:	4b14      	ldr	r3, [pc, #80]	; (8009c38 <prvHeapInit+0xb4>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2200      	movs	r2, #0
 8009bec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bee:	4b12      	ldr	r3, [pc, #72]	; (8009c38 <prvHeapInit+0xb4>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	1ad2      	subs	r2, r2, r3
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c04:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <prvHeapInit+0xb4>)
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	4a0a      	ldr	r2, [pc, #40]	; (8009c3c <prvHeapInit+0xb8>)
 8009c12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	4a09      	ldr	r2, [pc, #36]	; (8009c40 <prvHeapInit+0xbc>)
 8009c1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c1c:	4b09      	ldr	r3, [pc, #36]	; (8009c44 <prvHeapInit+0xc0>)
 8009c1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c22:	601a      	str	r2, [r3, #0]
}
 8009c24:	bf00      	nop
 8009c26:	3714      	adds	r7, #20
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	20000f10 	.word	0x20000f10
 8009c34:	20004b10 	.word	0x20004b10
 8009c38:	20004b18 	.word	0x20004b18
 8009c3c:	20004b20 	.word	0x20004b20
 8009c40:	20004b1c 	.word	0x20004b1c
 8009c44:	20004b2c 	.word	0x20004b2c

08009c48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c50:	4b28      	ldr	r3, [pc, #160]	; (8009cf4 <prvInsertBlockIntoFreeList+0xac>)
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	e002      	b.n	8009c5c <prvInsertBlockIntoFreeList+0x14>
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	60fb      	str	r3, [r7, #12]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d8f7      	bhi.n	8009c56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	4413      	add	r3, r2
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d108      	bne.n	8009c8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	441a      	add	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	441a      	add	r2, r3
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d118      	bne.n	8009cd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	4b15      	ldr	r3, [pc, #84]	; (8009cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d00d      	beq.n	8009cc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685a      	ldr	r2, [r3, #4]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	441a      	add	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	e008      	b.n	8009cd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cc6:	4b0c      	ldr	r3, [pc, #48]	; (8009cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	601a      	str	r2, [r3, #0]
 8009cce:	e003      	b.n	8009cd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d002      	beq.n	8009ce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ce6:	bf00      	nop
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	20004b10 	.word	0x20004b10
 8009cf8:	20004b18 	.word	0x20004b18

08009cfc <atof>:
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	f001 bb51 	b.w	800b3a4 <strtod>
	...

08009d04 <__errno>:
 8009d04:	4b01      	ldr	r3, [pc, #4]	; (8009d0c <__errno+0x8>)
 8009d06:	6818      	ldr	r0, [r3, #0]
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	20000014 	.word	0x20000014

08009d10 <__libc_init_array>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	4d0d      	ldr	r5, [pc, #52]	; (8009d48 <__libc_init_array+0x38>)
 8009d14:	4c0d      	ldr	r4, [pc, #52]	; (8009d4c <__libc_init_array+0x3c>)
 8009d16:	1b64      	subs	r4, r4, r5
 8009d18:	10a4      	asrs	r4, r4, #2
 8009d1a:	2600      	movs	r6, #0
 8009d1c:	42a6      	cmp	r6, r4
 8009d1e:	d109      	bne.n	8009d34 <__libc_init_array+0x24>
 8009d20:	4d0b      	ldr	r5, [pc, #44]	; (8009d50 <__libc_init_array+0x40>)
 8009d22:	4c0c      	ldr	r4, [pc, #48]	; (8009d54 <__libc_init_array+0x44>)
 8009d24:	f004 fa9c 	bl	800e260 <_init>
 8009d28:	1b64      	subs	r4, r4, r5
 8009d2a:	10a4      	asrs	r4, r4, #2
 8009d2c:	2600      	movs	r6, #0
 8009d2e:	42a6      	cmp	r6, r4
 8009d30:	d105      	bne.n	8009d3e <__libc_init_array+0x2e>
 8009d32:	bd70      	pop	{r4, r5, r6, pc}
 8009d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d38:	4798      	blx	r3
 8009d3a:	3601      	adds	r6, #1
 8009d3c:	e7ee      	b.n	8009d1c <__libc_init_array+0xc>
 8009d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d42:	4798      	blx	r3
 8009d44:	3601      	adds	r6, #1
 8009d46:	e7f2      	b.n	8009d2e <__libc_init_array+0x1e>
 8009d48:	0800ea70 	.word	0x0800ea70
 8009d4c:	0800ea70 	.word	0x0800ea70
 8009d50:	0800ea70 	.word	0x0800ea70
 8009d54:	0800ea74 	.word	0x0800ea74

08009d58 <memcpy>:
 8009d58:	440a      	add	r2, r1
 8009d5a:	4291      	cmp	r1, r2
 8009d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d60:	d100      	bne.n	8009d64 <memcpy+0xc>
 8009d62:	4770      	bx	lr
 8009d64:	b510      	push	{r4, lr}
 8009d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d6e:	4291      	cmp	r1, r2
 8009d70:	d1f9      	bne.n	8009d66 <memcpy+0xe>
 8009d72:	bd10      	pop	{r4, pc}

08009d74 <memset>:
 8009d74:	4402      	add	r2, r0
 8009d76:	4603      	mov	r3, r0
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d100      	bne.n	8009d7e <memset+0xa>
 8009d7c:	4770      	bx	lr
 8009d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d82:	e7f9      	b.n	8009d78 <memset+0x4>

08009d84 <__cvt>:
 8009d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d88:	ec55 4b10 	vmov	r4, r5, d0
 8009d8c:	2d00      	cmp	r5, #0
 8009d8e:	460e      	mov	r6, r1
 8009d90:	4619      	mov	r1, r3
 8009d92:	462b      	mov	r3, r5
 8009d94:	bfbb      	ittet	lt
 8009d96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d9a:	461d      	movlt	r5, r3
 8009d9c:	2300      	movge	r3, #0
 8009d9e:	232d      	movlt	r3, #45	; 0x2d
 8009da0:	700b      	strb	r3, [r1, #0]
 8009da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009da4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009da8:	4691      	mov	r9, r2
 8009daa:	f023 0820 	bic.w	r8, r3, #32
 8009dae:	bfbc      	itt	lt
 8009db0:	4622      	movlt	r2, r4
 8009db2:	4614      	movlt	r4, r2
 8009db4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009db8:	d005      	beq.n	8009dc6 <__cvt+0x42>
 8009dba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009dbe:	d100      	bne.n	8009dc2 <__cvt+0x3e>
 8009dc0:	3601      	adds	r6, #1
 8009dc2:	2102      	movs	r1, #2
 8009dc4:	e000      	b.n	8009dc8 <__cvt+0x44>
 8009dc6:	2103      	movs	r1, #3
 8009dc8:	ab03      	add	r3, sp, #12
 8009dca:	9301      	str	r3, [sp, #4]
 8009dcc:	ab02      	add	r3, sp, #8
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	ec45 4b10 	vmov	d0, r4, r5
 8009dd4:	4653      	mov	r3, sl
 8009dd6:	4632      	mov	r2, r6
 8009dd8:	f001 fbf6 	bl	800b5c8 <_dtoa_r>
 8009ddc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009de0:	4607      	mov	r7, r0
 8009de2:	d102      	bne.n	8009dea <__cvt+0x66>
 8009de4:	f019 0f01 	tst.w	r9, #1
 8009de8:	d022      	beq.n	8009e30 <__cvt+0xac>
 8009dea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009dee:	eb07 0906 	add.w	r9, r7, r6
 8009df2:	d110      	bne.n	8009e16 <__cvt+0x92>
 8009df4:	783b      	ldrb	r3, [r7, #0]
 8009df6:	2b30      	cmp	r3, #48	; 0x30
 8009df8:	d10a      	bne.n	8009e10 <__cvt+0x8c>
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	4620      	mov	r0, r4
 8009e00:	4629      	mov	r1, r5
 8009e02:	f7f6 fe69 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e06:	b918      	cbnz	r0, 8009e10 <__cvt+0x8c>
 8009e08:	f1c6 0601 	rsb	r6, r6, #1
 8009e0c:	f8ca 6000 	str.w	r6, [sl]
 8009e10:	f8da 3000 	ldr.w	r3, [sl]
 8009e14:	4499      	add	r9, r3
 8009e16:	2200      	movs	r2, #0
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	f7f6 fe5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e22:	b108      	cbz	r0, 8009e28 <__cvt+0xa4>
 8009e24:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e28:	2230      	movs	r2, #48	; 0x30
 8009e2a:	9b03      	ldr	r3, [sp, #12]
 8009e2c:	454b      	cmp	r3, r9
 8009e2e:	d307      	bcc.n	8009e40 <__cvt+0xbc>
 8009e30:	9b03      	ldr	r3, [sp, #12]
 8009e32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e34:	1bdb      	subs	r3, r3, r7
 8009e36:	4638      	mov	r0, r7
 8009e38:	6013      	str	r3, [r2, #0]
 8009e3a:	b004      	add	sp, #16
 8009e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e40:	1c59      	adds	r1, r3, #1
 8009e42:	9103      	str	r1, [sp, #12]
 8009e44:	701a      	strb	r2, [r3, #0]
 8009e46:	e7f0      	b.n	8009e2a <__cvt+0xa6>

08009e48 <__exponent>:
 8009e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2900      	cmp	r1, #0
 8009e4e:	bfb8      	it	lt
 8009e50:	4249      	neglt	r1, r1
 8009e52:	f803 2b02 	strb.w	r2, [r3], #2
 8009e56:	bfb4      	ite	lt
 8009e58:	222d      	movlt	r2, #45	; 0x2d
 8009e5a:	222b      	movge	r2, #43	; 0x2b
 8009e5c:	2909      	cmp	r1, #9
 8009e5e:	7042      	strb	r2, [r0, #1]
 8009e60:	dd2a      	ble.n	8009eb8 <__exponent+0x70>
 8009e62:	f10d 0407 	add.w	r4, sp, #7
 8009e66:	46a4      	mov	ip, r4
 8009e68:	270a      	movs	r7, #10
 8009e6a:	46a6      	mov	lr, r4
 8009e6c:	460a      	mov	r2, r1
 8009e6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009e72:	fb07 1516 	mls	r5, r7, r6, r1
 8009e76:	3530      	adds	r5, #48	; 0x30
 8009e78:	2a63      	cmp	r2, #99	; 0x63
 8009e7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009e7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009e82:	4631      	mov	r1, r6
 8009e84:	dcf1      	bgt.n	8009e6a <__exponent+0x22>
 8009e86:	3130      	adds	r1, #48	; 0x30
 8009e88:	f1ae 0502 	sub.w	r5, lr, #2
 8009e8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009e90:	1c44      	adds	r4, r0, #1
 8009e92:	4629      	mov	r1, r5
 8009e94:	4561      	cmp	r1, ip
 8009e96:	d30a      	bcc.n	8009eae <__exponent+0x66>
 8009e98:	f10d 0209 	add.w	r2, sp, #9
 8009e9c:	eba2 020e 	sub.w	r2, r2, lr
 8009ea0:	4565      	cmp	r5, ip
 8009ea2:	bf88      	it	hi
 8009ea4:	2200      	movhi	r2, #0
 8009ea6:	4413      	add	r3, r2
 8009ea8:	1a18      	subs	r0, r3, r0
 8009eaa:	b003      	add	sp, #12
 8009eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009eb2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009eb6:	e7ed      	b.n	8009e94 <__exponent+0x4c>
 8009eb8:	2330      	movs	r3, #48	; 0x30
 8009eba:	3130      	adds	r1, #48	; 0x30
 8009ebc:	7083      	strb	r3, [r0, #2]
 8009ebe:	70c1      	strb	r1, [r0, #3]
 8009ec0:	1d03      	adds	r3, r0, #4
 8009ec2:	e7f1      	b.n	8009ea8 <__exponent+0x60>

08009ec4 <_printf_float>:
 8009ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec8:	ed2d 8b02 	vpush	{d8}
 8009ecc:	b08d      	sub	sp, #52	; 0x34
 8009ece:	460c      	mov	r4, r1
 8009ed0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ed4:	4616      	mov	r6, r2
 8009ed6:	461f      	mov	r7, r3
 8009ed8:	4605      	mov	r5, r0
 8009eda:	f002 fce3 	bl	800c8a4 <_localeconv_r>
 8009ede:	f8d0 a000 	ldr.w	sl, [r0]
 8009ee2:	4650      	mov	r0, sl
 8009ee4:	f7f6 f97c 	bl	80001e0 <strlen>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	930a      	str	r3, [sp, #40]	; 0x28
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	9305      	str	r3, [sp, #20]
 8009ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ef4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ef8:	3307      	adds	r3, #7
 8009efa:	f023 0307 	bic.w	r3, r3, #7
 8009efe:	f103 0208 	add.w	r2, r3, #8
 8009f02:	f8c8 2000 	str.w	r2, [r8]
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009f12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f16:	9307      	str	r3, [sp, #28]
 8009f18:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f1c:	ee08 0a10 	vmov	s16, r0
 8009f20:	4b9f      	ldr	r3, [pc, #636]	; (800a1a0 <_printf_float+0x2dc>)
 8009f22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f26:	f04f 32ff 	mov.w	r2, #4294967295
 8009f2a:	f7f6 fe07 	bl	8000b3c <__aeabi_dcmpun>
 8009f2e:	bb88      	cbnz	r0, 8009f94 <_printf_float+0xd0>
 8009f30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f34:	4b9a      	ldr	r3, [pc, #616]	; (800a1a0 <_printf_float+0x2dc>)
 8009f36:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3a:	f7f6 fde1 	bl	8000b00 <__aeabi_dcmple>
 8009f3e:	bb48      	cbnz	r0, 8009f94 <_printf_float+0xd0>
 8009f40:	2200      	movs	r2, #0
 8009f42:	2300      	movs	r3, #0
 8009f44:	4640      	mov	r0, r8
 8009f46:	4649      	mov	r1, r9
 8009f48:	f7f6 fdd0 	bl	8000aec <__aeabi_dcmplt>
 8009f4c:	b110      	cbz	r0, 8009f54 <_printf_float+0x90>
 8009f4e:	232d      	movs	r3, #45	; 0x2d
 8009f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f54:	4b93      	ldr	r3, [pc, #588]	; (800a1a4 <_printf_float+0x2e0>)
 8009f56:	4894      	ldr	r0, [pc, #592]	; (800a1a8 <_printf_float+0x2e4>)
 8009f58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009f5c:	bf94      	ite	ls
 8009f5e:	4698      	movls	r8, r3
 8009f60:	4680      	movhi	r8, r0
 8009f62:	2303      	movs	r3, #3
 8009f64:	6123      	str	r3, [r4, #16]
 8009f66:	9b05      	ldr	r3, [sp, #20]
 8009f68:	f023 0204 	bic.w	r2, r3, #4
 8009f6c:	6022      	str	r2, [r4, #0]
 8009f6e:	f04f 0900 	mov.w	r9, #0
 8009f72:	9700      	str	r7, [sp, #0]
 8009f74:	4633      	mov	r3, r6
 8009f76:	aa0b      	add	r2, sp, #44	; 0x2c
 8009f78:	4621      	mov	r1, r4
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f000 f9d8 	bl	800a330 <_printf_common>
 8009f80:	3001      	adds	r0, #1
 8009f82:	f040 8090 	bne.w	800a0a6 <_printf_float+0x1e2>
 8009f86:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8a:	b00d      	add	sp, #52	; 0x34
 8009f8c:	ecbd 8b02 	vpop	{d8}
 8009f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f94:	4642      	mov	r2, r8
 8009f96:	464b      	mov	r3, r9
 8009f98:	4640      	mov	r0, r8
 8009f9a:	4649      	mov	r1, r9
 8009f9c:	f7f6 fdce 	bl	8000b3c <__aeabi_dcmpun>
 8009fa0:	b140      	cbz	r0, 8009fb4 <_printf_float+0xf0>
 8009fa2:	464b      	mov	r3, r9
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	bfbc      	itt	lt
 8009fa8:	232d      	movlt	r3, #45	; 0x2d
 8009faa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009fae:	487f      	ldr	r0, [pc, #508]	; (800a1ac <_printf_float+0x2e8>)
 8009fb0:	4b7f      	ldr	r3, [pc, #508]	; (800a1b0 <_printf_float+0x2ec>)
 8009fb2:	e7d1      	b.n	8009f58 <_printf_float+0x94>
 8009fb4:	6863      	ldr	r3, [r4, #4]
 8009fb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009fba:	9206      	str	r2, [sp, #24]
 8009fbc:	1c5a      	adds	r2, r3, #1
 8009fbe:	d13f      	bne.n	800a040 <_printf_float+0x17c>
 8009fc0:	2306      	movs	r3, #6
 8009fc2:	6063      	str	r3, [r4, #4]
 8009fc4:	9b05      	ldr	r3, [sp, #20]
 8009fc6:	6861      	ldr	r1, [r4, #4]
 8009fc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009fcc:	2300      	movs	r3, #0
 8009fce:	9303      	str	r3, [sp, #12]
 8009fd0:	ab0a      	add	r3, sp, #40	; 0x28
 8009fd2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009fd6:	ab09      	add	r3, sp, #36	; 0x24
 8009fd8:	ec49 8b10 	vmov	d0, r8, r9
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	6022      	str	r2, [r4, #0]
 8009fe0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	f7ff fecd 	bl	8009d84 <__cvt>
 8009fea:	9b06      	ldr	r3, [sp, #24]
 8009fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fee:	2b47      	cmp	r3, #71	; 0x47
 8009ff0:	4680      	mov	r8, r0
 8009ff2:	d108      	bne.n	800a006 <_printf_float+0x142>
 8009ff4:	1cc8      	adds	r0, r1, #3
 8009ff6:	db02      	blt.n	8009ffe <_printf_float+0x13a>
 8009ff8:	6863      	ldr	r3, [r4, #4]
 8009ffa:	4299      	cmp	r1, r3
 8009ffc:	dd41      	ble.n	800a082 <_printf_float+0x1be>
 8009ffe:	f1ab 0b02 	sub.w	fp, fp, #2
 800a002:	fa5f fb8b 	uxtb.w	fp, fp
 800a006:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a00a:	d820      	bhi.n	800a04e <_printf_float+0x18a>
 800a00c:	3901      	subs	r1, #1
 800a00e:	465a      	mov	r2, fp
 800a010:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a014:	9109      	str	r1, [sp, #36]	; 0x24
 800a016:	f7ff ff17 	bl	8009e48 <__exponent>
 800a01a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a01c:	1813      	adds	r3, r2, r0
 800a01e:	2a01      	cmp	r2, #1
 800a020:	4681      	mov	r9, r0
 800a022:	6123      	str	r3, [r4, #16]
 800a024:	dc02      	bgt.n	800a02c <_printf_float+0x168>
 800a026:	6822      	ldr	r2, [r4, #0]
 800a028:	07d2      	lsls	r2, r2, #31
 800a02a:	d501      	bpl.n	800a030 <_printf_float+0x16c>
 800a02c:	3301      	adds	r3, #1
 800a02e:	6123      	str	r3, [r4, #16]
 800a030:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a034:	2b00      	cmp	r3, #0
 800a036:	d09c      	beq.n	8009f72 <_printf_float+0xae>
 800a038:	232d      	movs	r3, #45	; 0x2d
 800a03a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a03e:	e798      	b.n	8009f72 <_printf_float+0xae>
 800a040:	9a06      	ldr	r2, [sp, #24]
 800a042:	2a47      	cmp	r2, #71	; 0x47
 800a044:	d1be      	bne.n	8009fc4 <_printf_float+0x100>
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1bc      	bne.n	8009fc4 <_printf_float+0x100>
 800a04a:	2301      	movs	r3, #1
 800a04c:	e7b9      	b.n	8009fc2 <_printf_float+0xfe>
 800a04e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a052:	d118      	bne.n	800a086 <_printf_float+0x1c2>
 800a054:	2900      	cmp	r1, #0
 800a056:	6863      	ldr	r3, [r4, #4]
 800a058:	dd0b      	ble.n	800a072 <_printf_float+0x1ae>
 800a05a:	6121      	str	r1, [r4, #16]
 800a05c:	b913      	cbnz	r3, 800a064 <_printf_float+0x1a0>
 800a05e:	6822      	ldr	r2, [r4, #0]
 800a060:	07d0      	lsls	r0, r2, #31
 800a062:	d502      	bpl.n	800a06a <_printf_float+0x1a6>
 800a064:	3301      	adds	r3, #1
 800a066:	440b      	add	r3, r1
 800a068:	6123      	str	r3, [r4, #16]
 800a06a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a06c:	f04f 0900 	mov.w	r9, #0
 800a070:	e7de      	b.n	800a030 <_printf_float+0x16c>
 800a072:	b913      	cbnz	r3, 800a07a <_printf_float+0x1b6>
 800a074:	6822      	ldr	r2, [r4, #0]
 800a076:	07d2      	lsls	r2, r2, #31
 800a078:	d501      	bpl.n	800a07e <_printf_float+0x1ba>
 800a07a:	3302      	adds	r3, #2
 800a07c:	e7f4      	b.n	800a068 <_printf_float+0x1a4>
 800a07e:	2301      	movs	r3, #1
 800a080:	e7f2      	b.n	800a068 <_printf_float+0x1a4>
 800a082:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a088:	4299      	cmp	r1, r3
 800a08a:	db05      	blt.n	800a098 <_printf_float+0x1d4>
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	6121      	str	r1, [r4, #16]
 800a090:	07d8      	lsls	r0, r3, #31
 800a092:	d5ea      	bpl.n	800a06a <_printf_float+0x1a6>
 800a094:	1c4b      	adds	r3, r1, #1
 800a096:	e7e7      	b.n	800a068 <_printf_float+0x1a4>
 800a098:	2900      	cmp	r1, #0
 800a09a:	bfd4      	ite	le
 800a09c:	f1c1 0202 	rsble	r2, r1, #2
 800a0a0:	2201      	movgt	r2, #1
 800a0a2:	4413      	add	r3, r2
 800a0a4:	e7e0      	b.n	800a068 <_printf_float+0x1a4>
 800a0a6:	6823      	ldr	r3, [r4, #0]
 800a0a8:	055a      	lsls	r2, r3, #21
 800a0aa:	d407      	bmi.n	800a0bc <_printf_float+0x1f8>
 800a0ac:	6923      	ldr	r3, [r4, #16]
 800a0ae:	4642      	mov	r2, r8
 800a0b0:	4631      	mov	r1, r6
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	47b8      	blx	r7
 800a0b6:	3001      	adds	r0, #1
 800a0b8:	d12c      	bne.n	800a114 <_printf_float+0x250>
 800a0ba:	e764      	b.n	8009f86 <_printf_float+0xc2>
 800a0bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a0c0:	f240 80e0 	bls.w	800a284 <_printf_float+0x3c0>
 800a0c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	f7f6 fd04 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d034      	beq.n	800a13e <_printf_float+0x27a>
 800a0d4:	4a37      	ldr	r2, [pc, #220]	; (800a1b4 <_printf_float+0x2f0>)
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	4631      	mov	r1, r6
 800a0da:	4628      	mov	r0, r5
 800a0dc:	47b8      	blx	r7
 800a0de:	3001      	adds	r0, #1
 800a0e0:	f43f af51 	beq.w	8009f86 <_printf_float+0xc2>
 800a0e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	db02      	blt.n	800a0f2 <_printf_float+0x22e>
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	07d8      	lsls	r0, r3, #31
 800a0f0:	d510      	bpl.n	800a114 <_printf_float+0x250>
 800a0f2:	ee18 3a10 	vmov	r3, s16
 800a0f6:	4652      	mov	r2, sl
 800a0f8:	4631      	mov	r1, r6
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	47b8      	blx	r7
 800a0fe:	3001      	adds	r0, #1
 800a100:	f43f af41 	beq.w	8009f86 <_printf_float+0xc2>
 800a104:	f04f 0800 	mov.w	r8, #0
 800a108:	f104 091a 	add.w	r9, r4, #26
 800a10c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a10e:	3b01      	subs	r3, #1
 800a110:	4543      	cmp	r3, r8
 800a112:	dc09      	bgt.n	800a128 <_printf_float+0x264>
 800a114:	6823      	ldr	r3, [r4, #0]
 800a116:	079b      	lsls	r3, r3, #30
 800a118:	f100 8105 	bmi.w	800a326 <_printf_float+0x462>
 800a11c:	68e0      	ldr	r0, [r4, #12]
 800a11e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a120:	4298      	cmp	r0, r3
 800a122:	bfb8      	it	lt
 800a124:	4618      	movlt	r0, r3
 800a126:	e730      	b.n	8009f8a <_printf_float+0xc6>
 800a128:	2301      	movs	r3, #1
 800a12a:	464a      	mov	r2, r9
 800a12c:	4631      	mov	r1, r6
 800a12e:	4628      	mov	r0, r5
 800a130:	47b8      	blx	r7
 800a132:	3001      	adds	r0, #1
 800a134:	f43f af27 	beq.w	8009f86 <_printf_float+0xc2>
 800a138:	f108 0801 	add.w	r8, r8, #1
 800a13c:	e7e6      	b.n	800a10c <_printf_float+0x248>
 800a13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a140:	2b00      	cmp	r3, #0
 800a142:	dc39      	bgt.n	800a1b8 <_printf_float+0x2f4>
 800a144:	4a1b      	ldr	r2, [pc, #108]	; (800a1b4 <_printf_float+0x2f0>)
 800a146:	2301      	movs	r3, #1
 800a148:	4631      	mov	r1, r6
 800a14a:	4628      	mov	r0, r5
 800a14c:	47b8      	blx	r7
 800a14e:	3001      	adds	r0, #1
 800a150:	f43f af19 	beq.w	8009f86 <_printf_float+0xc2>
 800a154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a158:	4313      	orrs	r3, r2
 800a15a:	d102      	bne.n	800a162 <_printf_float+0x29e>
 800a15c:	6823      	ldr	r3, [r4, #0]
 800a15e:	07d9      	lsls	r1, r3, #31
 800a160:	d5d8      	bpl.n	800a114 <_printf_float+0x250>
 800a162:	ee18 3a10 	vmov	r3, s16
 800a166:	4652      	mov	r2, sl
 800a168:	4631      	mov	r1, r6
 800a16a:	4628      	mov	r0, r5
 800a16c:	47b8      	blx	r7
 800a16e:	3001      	adds	r0, #1
 800a170:	f43f af09 	beq.w	8009f86 <_printf_float+0xc2>
 800a174:	f04f 0900 	mov.w	r9, #0
 800a178:	f104 0a1a 	add.w	sl, r4, #26
 800a17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a17e:	425b      	negs	r3, r3
 800a180:	454b      	cmp	r3, r9
 800a182:	dc01      	bgt.n	800a188 <_printf_float+0x2c4>
 800a184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a186:	e792      	b.n	800a0ae <_printf_float+0x1ea>
 800a188:	2301      	movs	r3, #1
 800a18a:	4652      	mov	r2, sl
 800a18c:	4631      	mov	r1, r6
 800a18e:	4628      	mov	r0, r5
 800a190:	47b8      	blx	r7
 800a192:	3001      	adds	r0, #1
 800a194:	f43f aef7 	beq.w	8009f86 <_printf_float+0xc2>
 800a198:	f109 0901 	add.w	r9, r9, #1
 800a19c:	e7ee      	b.n	800a17c <_printf_float+0x2b8>
 800a19e:	bf00      	nop
 800a1a0:	7fefffff 	.word	0x7fefffff
 800a1a4:	0800e564 	.word	0x0800e564
 800a1a8:	0800e568 	.word	0x0800e568
 800a1ac:	0800e570 	.word	0x0800e570
 800a1b0:	0800e56c 	.word	0x0800e56c
 800a1b4:	0800e574 	.word	0x0800e574
 800a1b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	bfa8      	it	ge
 800a1c0:	461a      	movge	r2, r3
 800a1c2:	2a00      	cmp	r2, #0
 800a1c4:	4691      	mov	r9, r2
 800a1c6:	dc37      	bgt.n	800a238 <_printf_float+0x374>
 800a1c8:	f04f 0b00 	mov.w	fp, #0
 800a1cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1d0:	f104 021a 	add.w	r2, r4, #26
 800a1d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1d6:	9305      	str	r3, [sp, #20]
 800a1d8:	eba3 0309 	sub.w	r3, r3, r9
 800a1dc:	455b      	cmp	r3, fp
 800a1de:	dc33      	bgt.n	800a248 <_printf_float+0x384>
 800a1e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	db3b      	blt.n	800a260 <_printf_float+0x39c>
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	07da      	lsls	r2, r3, #31
 800a1ec:	d438      	bmi.n	800a260 <_printf_float+0x39c>
 800a1ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1f0:	9b05      	ldr	r3, [sp, #20]
 800a1f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1f4:	1ad3      	subs	r3, r2, r3
 800a1f6:	eba2 0901 	sub.w	r9, r2, r1
 800a1fa:	4599      	cmp	r9, r3
 800a1fc:	bfa8      	it	ge
 800a1fe:	4699      	movge	r9, r3
 800a200:	f1b9 0f00 	cmp.w	r9, #0
 800a204:	dc35      	bgt.n	800a272 <_printf_float+0x3ae>
 800a206:	f04f 0800 	mov.w	r8, #0
 800a20a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a20e:	f104 0a1a 	add.w	sl, r4, #26
 800a212:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a216:	1a9b      	subs	r3, r3, r2
 800a218:	eba3 0309 	sub.w	r3, r3, r9
 800a21c:	4543      	cmp	r3, r8
 800a21e:	f77f af79 	ble.w	800a114 <_printf_float+0x250>
 800a222:	2301      	movs	r3, #1
 800a224:	4652      	mov	r2, sl
 800a226:	4631      	mov	r1, r6
 800a228:	4628      	mov	r0, r5
 800a22a:	47b8      	blx	r7
 800a22c:	3001      	adds	r0, #1
 800a22e:	f43f aeaa 	beq.w	8009f86 <_printf_float+0xc2>
 800a232:	f108 0801 	add.w	r8, r8, #1
 800a236:	e7ec      	b.n	800a212 <_printf_float+0x34e>
 800a238:	4613      	mov	r3, r2
 800a23a:	4631      	mov	r1, r6
 800a23c:	4642      	mov	r2, r8
 800a23e:	4628      	mov	r0, r5
 800a240:	47b8      	blx	r7
 800a242:	3001      	adds	r0, #1
 800a244:	d1c0      	bne.n	800a1c8 <_printf_float+0x304>
 800a246:	e69e      	b.n	8009f86 <_printf_float+0xc2>
 800a248:	2301      	movs	r3, #1
 800a24a:	4631      	mov	r1, r6
 800a24c:	4628      	mov	r0, r5
 800a24e:	9205      	str	r2, [sp, #20]
 800a250:	47b8      	blx	r7
 800a252:	3001      	adds	r0, #1
 800a254:	f43f ae97 	beq.w	8009f86 <_printf_float+0xc2>
 800a258:	9a05      	ldr	r2, [sp, #20]
 800a25a:	f10b 0b01 	add.w	fp, fp, #1
 800a25e:	e7b9      	b.n	800a1d4 <_printf_float+0x310>
 800a260:	ee18 3a10 	vmov	r3, s16
 800a264:	4652      	mov	r2, sl
 800a266:	4631      	mov	r1, r6
 800a268:	4628      	mov	r0, r5
 800a26a:	47b8      	blx	r7
 800a26c:	3001      	adds	r0, #1
 800a26e:	d1be      	bne.n	800a1ee <_printf_float+0x32a>
 800a270:	e689      	b.n	8009f86 <_printf_float+0xc2>
 800a272:	9a05      	ldr	r2, [sp, #20]
 800a274:	464b      	mov	r3, r9
 800a276:	4442      	add	r2, r8
 800a278:	4631      	mov	r1, r6
 800a27a:	4628      	mov	r0, r5
 800a27c:	47b8      	blx	r7
 800a27e:	3001      	adds	r0, #1
 800a280:	d1c1      	bne.n	800a206 <_printf_float+0x342>
 800a282:	e680      	b.n	8009f86 <_printf_float+0xc2>
 800a284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a286:	2a01      	cmp	r2, #1
 800a288:	dc01      	bgt.n	800a28e <_printf_float+0x3ca>
 800a28a:	07db      	lsls	r3, r3, #31
 800a28c:	d538      	bpl.n	800a300 <_printf_float+0x43c>
 800a28e:	2301      	movs	r3, #1
 800a290:	4642      	mov	r2, r8
 800a292:	4631      	mov	r1, r6
 800a294:	4628      	mov	r0, r5
 800a296:	47b8      	blx	r7
 800a298:	3001      	adds	r0, #1
 800a29a:	f43f ae74 	beq.w	8009f86 <_printf_float+0xc2>
 800a29e:	ee18 3a10 	vmov	r3, s16
 800a2a2:	4652      	mov	r2, sl
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	47b8      	blx	r7
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	f43f ae6b 	beq.w	8009f86 <_printf_float+0xc2>
 800a2b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f7f6 fc0e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2bc:	b9d8      	cbnz	r0, 800a2f6 <_printf_float+0x432>
 800a2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c0:	f108 0201 	add.w	r2, r8, #1
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	4631      	mov	r1, r6
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	47b8      	blx	r7
 800a2cc:	3001      	adds	r0, #1
 800a2ce:	d10e      	bne.n	800a2ee <_printf_float+0x42a>
 800a2d0:	e659      	b.n	8009f86 <_printf_float+0xc2>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	4652      	mov	r2, sl
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	4628      	mov	r0, r5
 800a2da:	47b8      	blx	r7
 800a2dc:	3001      	adds	r0, #1
 800a2de:	f43f ae52 	beq.w	8009f86 <_printf_float+0xc2>
 800a2e2:	f108 0801 	add.w	r8, r8, #1
 800a2e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	4543      	cmp	r3, r8
 800a2ec:	dcf1      	bgt.n	800a2d2 <_printf_float+0x40e>
 800a2ee:	464b      	mov	r3, r9
 800a2f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a2f4:	e6dc      	b.n	800a0b0 <_printf_float+0x1ec>
 800a2f6:	f04f 0800 	mov.w	r8, #0
 800a2fa:	f104 0a1a 	add.w	sl, r4, #26
 800a2fe:	e7f2      	b.n	800a2e6 <_printf_float+0x422>
 800a300:	2301      	movs	r3, #1
 800a302:	4642      	mov	r2, r8
 800a304:	e7df      	b.n	800a2c6 <_printf_float+0x402>
 800a306:	2301      	movs	r3, #1
 800a308:	464a      	mov	r2, r9
 800a30a:	4631      	mov	r1, r6
 800a30c:	4628      	mov	r0, r5
 800a30e:	47b8      	blx	r7
 800a310:	3001      	adds	r0, #1
 800a312:	f43f ae38 	beq.w	8009f86 <_printf_float+0xc2>
 800a316:	f108 0801 	add.w	r8, r8, #1
 800a31a:	68e3      	ldr	r3, [r4, #12]
 800a31c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a31e:	1a5b      	subs	r3, r3, r1
 800a320:	4543      	cmp	r3, r8
 800a322:	dcf0      	bgt.n	800a306 <_printf_float+0x442>
 800a324:	e6fa      	b.n	800a11c <_printf_float+0x258>
 800a326:	f04f 0800 	mov.w	r8, #0
 800a32a:	f104 0919 	add.w	r9, r4, #25
 800a32e:	e7f4      	b.n	800a31a <_printf_float+0x456>

0800a330 <_printf_common>:
 800a330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a334:	4616      	mov	r6, r2
 800a336:	4699      	mov	r9, r3
 800a338:	688a      	ldr	r2, [r1, #8]
 800a33a:	690b      	ldr	r3, [r1, #16]
 800a33c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a340:	4293      	cmp	r3, r2
 800a342:	bfb8      	it	lt
 800a344:	4613      	movlt	r3, r2
 800a346:	6033      	str	r3, [r6, #0]
 800a348:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a34c:	4607      	mov	r7, r0
 800a34e:	460c      	mov	r4, r1
 800a350:	b10a      	cbz	r2, 800a356 <_printf_common+0x26>
 800a352:	3301      	adds	r3, #1
 800a354:	6033      	str	r3, [r6, #0]
 800a356:	6823      	ldr	r3, [r4, #0]
 800a358:	0699      	lsls	r1, r3, #26
 800a35a:	bf42      	ittt	mi
 800a35c:	6833      	ldrmi	r3, [r6, #0]
 800a35e:	3302      	addmi	r3, #2
 800a360:	6033      	strmi	r3, [r6, #0]
 800a362:	6825      	ldr	r5, [r4, #0]
 800a364:	f015 0506 	ands.w	r5, r5, #6
 800a368:	d106      	bne.n	800a378 <_printf_common+0x48>
 800a36a:	f104 0a19 	add.w	sl, r4, #25
 800a36e:	68e3      	ldr	r3, [r4, #12]
 800a370:	6832      	ldr	r2, [r6, #0]
 800a372:	1a9b      	subs	r3, r3, r2
 800a374:	42ab      	cmp	r3, r5
 800a376:	dc26      	bgt.n	800a3c6 <_printf_common+0x96>
 800a378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a37c:	1e13      	subs	r3, r2, #0
 800a37e:	6822      	ldr	r2, [r4, #0]
 800a380:	bf18      	it	ne
 800a382:	2301      	movne	r3, #1
 800a384:	0692      	lsls	r2, r2, #26
 800a386:	d42b      	bmi.n	800a3e0 <_printf_common+0xb0>
 800a388:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a38c:	4649      	mov	r1, r9
 800a38e:	4638      	mov	r0, r7
 800a390:	47c0      	blx	r8
 800a392:	3001      	adds	r0, #1
 800a394:	d01e      	beq.n	800a3d4 <_printf_common+0xa4>
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	68e5      	ldr	r5, [r4, #12]
 800a39a:	6832      	ldr	r2, [r6, #0]
 800a39c:	f003 0306 	and.w	r3, r3, #6
 800a3a0:	2b04      	cmp	r3, #4
 800a3a2:	bf08      	it	eq
 800a3a4:	1aad      	subeq	r5, r5, r2
 800a3a6:	68a3      	ldr	r3, [r4, #8]
 800a3a8:	6922      	ldr	r2, [r4, #16]
 800a3aa:	bf0c      	ite	eq
 800a3ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3b0:	2500      	movne	r5, #0
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	bfc4      	itt	gt
 800a3b6:	1a9b      	subgt	r3, r3, r2
 800a3b8:	18ed      	addgt	r5, r5, r3
 800a3ba:	2600      	movs	r6, #0
 800a3bc:	341a      	adds	r4, #26
 800a3be:	42b5      	cmp	r5, r6
 800a3c0:	d11a      	bne.n	800a3f8 <_printf_common+0xc8>
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	e008      	b.n	800a3d8 <_printf_common+0xa8>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	4652      	mov	r2, sl
 800a3ca:	4649      	mov	r1, r9
 800a3cc:	4638      	mov	r0, r7
 800a3ce:	47c0      	blx	r8
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d103      	bne.n	800a3dc <_printf_common+0xac>
 800a3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3dc:	3501      	adds	r5, #1
 800a3de:	e7c6      	b.n	800a36e <_printf_common+0x3e>
 800a3e0:	18e1      	adds	r1, r4, r3
 800a3e2:	1c5a      	adds	r2, r3, #1
 800a3e4:	2030      	movs	r0, #48	; 0x30
 800a3e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3ea:	4422      	add	r2, r4
 800a3ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3f4:	3302      	adds	r3, #2
 800a3f6:	e7c7      	b.n	800a388 <_printf_common+0x58>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	4622      	mov	r2, r4
 800a3fc:	4649      	mov	r1, r9
 800a3fe:	4638      	mov	r0, r7
 800a400:	47c0      	blx	r8
 800a402:	3001      	adds	r0, #1
 800a404:	d0e6      	beq.n	800a3d4 <_printf_common+0xa4>
 800a406:	3601      	adds	r6, #1
 800a408:	e7d9      	b.n	800a3be <_printf_common+0x8e>
	...

0800a40c <_printf_i>:
 800a40c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a410:	460c      	mov	r4, r1
 800a412:	4691      	mov	r9, r2
 800a414:	7e27      	ldrb	r7, [r4, #24]
 800a416:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a418:	2f78      	cmp	r7, #120	; 0x78
 800a41a:	4680      	mov	r8, r0
 800a41c:	469a      	mov	sl, r3
 800a41e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a422:	d807      	bhi.n	800a434 <_printf_i+0x28>
 800a424:	2f62      	cmp	r7, #98	; 0x62
 800a426:	d80a      	bhi.n	800a43e <_printf_i+0x32>
 800a428:	2f00      	cmp	r7, #0
 800a42a:	f000 80d8 	beq.w	800a5de <_printf_i+0x1d2>
 800a42e:	2f58      	cmp	r7, #88	; 0x58
 800a430:	f000 80a3 	beq.w	800a57a <_printf_i+0x16e>
 800a434:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a438:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a43c:	e03a      	b.n	800a4b4 <_printf_i+0xa8>
 800a43e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a442:	2b15      	cmp	r3, #21
 800a444:	d8f6      	bhi.n	800a434 <_printf_i+0x28>
 800a446:	a001      	add	r0, pc, #4	; (adr r0, 800a44c <_printf_i+0x40>)
 800a448:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a44c:	0800a4a5 	.word	0x0800a4a5
 800a450:	0800a4b9 	.word	0x0800a4b9
 800a454:	0800a435 	.word	0x0800a435
 800a458:	0800a435 	.word	0x0800a435
 800a45c:	0800a435 	.word	0x0800a435
 800a460:	0800a435 	.word	0x0800a435
 800a464:	0800a4b9 	.word	0x0800a4b9
 800a468:	0800a435 	.word	0x0800a435
 800a46c:	0800a435 	.word	0x0800a435
 800a470:	0800a435 	.word	0x0800a435
 800a474:	0800a435 	.word	0x0800a435
 800a478:	0800a5c5 	.word	0x0800a5c5
 800a47c:	0800a4e9 	.word	0x0800a4e9
 800a480:	0800a5a7 	.word	0x0800a5a7
 800a484:	0800a435 	.word	0x0800a435
 800a488:	0800a435 	.word	0x0800a435
 800a48c:	0800a5e7 	.word	0x0800a5e7
 800a490:	0800a435 	.word	0x0800a435
 800a494:	0800a4e9 	.word	0x0800a4e9
 800a498:	0800a435 	.word	0x0800a435
 800a49c:	0800a435 	.word	0x0800a435
 800a4a0:	0800a5af 	.word	0x0800a5af
 800a4a4:	680b      	ldr	r3, [r1, #0]
 800a4a6:	1d1a      	adds	r2, r3, #4
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	600a      	str	r2, [r1, #0]
 800a4ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e0a3      	b.n	800a600 <_printf_i+0x1f4>
 800a4b8:	6825      	ldr	r5, [r4, #0]
 800a4ba:	6808      	ldr	r0, [r1, #0]
 800a4bc:	062e      	lsls	r6, r5, #24
 800a4be:	f100 0304 	add.w	r3, r0, #4
 800a4c2:	d50a      	bpl.n	800a4da <_printf_i+0xce>
 800a4c4:	6805      	ldr	r5, [r0, #0]
 800a4c6:	600b      	str	r3, [r1, #0]
 800a4c8:	2d00      	cmp	r5, #0
 800a4ca:	da03      	bge.n	800a4d4 <_printf_i+0xc8>
 800a4cc:	232d      	movs	r3, #45	; 0x2d
 800a4ce:	426d      	negs	r5, r5
 800a4d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4d4:	485e      	ldr	r0, [pc, #376]	; (800a650 <_printf_i+0x244>)
 800a4d6:	230a      	movs	r3, #10
 800a4d8:	e019      	b.n	800a50e <_printf_i+0x102>
 800a4da:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a4de:	6805      	ldr	r5, [r0, #0]
 800a4e0:	600b      	str	r3, [r1, #0]
 800a4e2:	bf18      	it	ne
 800a4e4:	b22d      	sxthne	r5, r5
 800a4e6:	e7ef      	b.n	800a4c8 <_printf_i+0xbc>
 800a4e8:	680b      	ldr	r3, [r1, #0]
 800a4ea:	6825      	ldr	r5, [r4, #0]
 800a4ec:	1d18      	adds	r0, r3, #4
 800a4ee:	6008      	str	r0, [r1, #0]
 800a4f0:	0628      	lsls	r0, r5, #24
 800a4f2:	d501      	bpl.n	800a4f8 <_printf_i+0xec>
 800a4f4:	681d      	ldr	r5, [r3, #0]
 800a4f6:	e002      	b.n	800a4fe <_printf_i+0xf2>
 800a4f8:	0669      	lsls	r1, r5, #25
 800a4fa:	d5fb      	bpl.n	800a4f4 <_printf_i+0xe8>
 800a4fc:	881d      	ldrh	r5, [r3, #0]
 800a4fe:	4854      	ldr	r0, [pc, #336]	; (800a650 <_printf_i+0x244>)
 800a500:	2f6f      	cmp	r7, #111	; 0x6f
 800a502:	bf0c      	ite	eq
 800a504:	2308      	moveq	r3, #8
 800a506:	230a      	movne	r3, #10
 800a508:	2100      	movs	r1, #0
 800a50a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a50e:	6866      	ldr	r6, [r4, #4]
 800a510:	60a6      	str	r6, [r4, #8]
 800a512:	2e00      	cmp	r6, #0
 800a514:	bfa2      	ittt	ge
 800a516:	6821      	ldrge	r1, [r4, #0]
 800a518:	f021 0104 	bicge.w	r1, r1, #4
 800a51c:	6021      	strge	r1, [r4, #0]
 800a51e:	b90d      	cbnz	r5, 800a524 <_printf_i+0x118>
 800a520:	2e00      	cmp	r6, #0
 800a522:	d04d      	beq.n	800a5c0 <_printf_i+0x1b4>
 800a524:	4616      	mov	r6, r2
 800a526:	fbb5 f1f3 	udiv	r1, r5, r3
 800a52a:	fb03 5711 	mls	r7, r3, r1, r5
 800a52e:	5dc7      	ldrb	r7, [r0, r7]
 800a530:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a534:	462f      	mov	r7, r5
 800a536:	42bb      	cmp	r3, r7
 800a538:	460d      	mov	r5, r1
 800a53a:	d9f4      	bls.n	800a526 <_printf_i+0x11a>
 800a53c:	2b08      	cmp	r3, #8
 800a53e:	d10b      	bne.n	800a558 <_printf_i+0x14c>
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	07df      	lsls	r7, r3, #31
 800a544:	d508      	bpl.n	800a558 <_printf_i+0x14c>
 800a546:	6923      	ldr	r3, [r4, #16]
 800a548:	6861      	ldr	r1, [r4, #4]
 800a54a:	4299      	cmp	r1, r3
 800a54c:	bfde      	ittt	le
 800a54e:	2330      	movle	r3, #48	; 0x30
 800a550:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a554:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a558:	1b92      	subs	r2, r2, r6
 800a55a:	6122      	str	r2, [r4, #16]
 800a55c:	f8cd a000 	str.w	sl, [sp]
 800a560:	464b      	mov	r3, r9
 800a562:	aa03      	add	r2, sp, #12
 800a564:	4621      	mov	r1, r4
 800a566:	4640      	mov	r0, r8
 800a568:	f7ff fee2 	bl	800a330 <_printf_common>
 800a56c:	3001      	adds	r0, #1
 800a56e:	d14c      	bne.n	800a60a <_printf_i+0x1fe>
 800a570:	f04f 30ff 	mov.w	r0, #4294967295
 800a574:	b004      	add	sp, #16
 800a576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a57a:	4835      	ldr	r0, [pc, #212]	; (800a650 <_printf_i+0x244>)
 800a57c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	680e      	ldr	r6, [r1, #0]
 800a584:	061f      	lsls	r7, r3, #24
 800a586:	f856 5b04 	ldr.w	r5, [r6], #4
 800a58a:	600e      	str	r6, [r1, #0]
 800a58c:	d514      	bpl.n	800a5b8 <_printf_i+0x1ac>
 800a58e:	07d9      	lsls	r1, r3, #31
 800a590:	bf44      	itt	mi
 800a592:	f043 0320 	orrmi.w	r3, r3, #32
 800a596:	6023      	strmi	r3, [r4, #0]
 800a598:	b91d      	cbnz	r5, 800a5a2 <_printf_i+0x196>
 800a59a:	6823      	ldr	r3, [r4, #0]
 800a59c:	f023 0320 	bic.w	r3, r3, #32
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	2310      	movs	r3, #16
 800a5a4:	e7b0      	b.n	800a508 <_printf_i+0xfc>
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	f043 0320 	orr.w	r3, r3, #32
 800a5ac:	6023      	str	r3, [r4, #0]
 800a5ae:	2378      	movs	r3, #120	; 0x78
 800a5b0:	4828      	ldr	r0, [pc, #160]	; (800a654 <_printf_i+0x248>)
 800a5b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5b6:	e7e3      	b.n	800a580 <_printf_i+0x174>
 800a5b8:	065e      	lsls	r6, r3, #25
 800a5ba:	bf48      	it	mi
 800a5bc:	b2ad      	uxthmi	r5, r5
 800a5be:	e7e6      	b.n	800a58e <_printf_i+0x182>
 800a5c0:	4616      	mov	r6, r2
 800a5c2:	e7bb      	b.n	800a53c <_printf_i+0x130>
 800a5c4:	680b      	ldr	r3, [r1, #0]
 800a5c6:	6826      	ldr	r6, [r4, #0]
 800a5c8:	6960      	ldr	r0, [r4, #20]
 800a5ca:	1d1d      	adds	r5, r3, #4
 800a5cc:	600d      	str	r5, [r1, #0]
 800a5ce:	0635      	lsls	r5, r6, #24
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	d501      	bpl.n	800a5d8 <_printf_i+0x1cc>
 800a5d4:	6018      	str	r0, [r3, #0]
 800a5d6:	e002      	b.n	800a5de <_printf_i+0x1d2>
 800a5d8:	0671      	lsls	r1, r6, #25
 800a5da:	d5fb      	bpl.n	800a5d4 <_printf_i+0x1c8>
 800a5dc:	8018      	strh	r0, [r3, #0]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	6123      	str	r3, [r4, #16]
 800a5e2:	4616      	mov	r6, r2
 800a5e4:	e7ba      	b.n	800a55c <_printf_i+0x150>
 800a5e6:	680b      	ldr	r3, [r1, #0]
 800a5e8:	1d1a      	adds	r2, r3, #4
 800a5ea:	600a      	str	r2, [r1, #0]
 800a5ec:	681e      	ldr	r6, [r3, #0]
 800a5ee:	6862      	ldr	r2, [r4, #4]
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f7f5 fdfc 	bl	80001f0 <memchr>
 800a5f8:	b108      	cbz	r0, 800a5fe <_printf_i+0x1f2>
 800a5fa:	1b80      	subs	r0, r0, r6
 800a5fc:	6060      	str	r0, [r4, #4]
 800a5fe:	6863      	ldr	r3, [r4, #4]
 800a600:	6123      	str	r3, [r4, #16]
 800a602:	2300      	movs	r3, #0
 800a604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a608:	e7a8      	b.n	800a55c <_printf_i+0x150>
 800a60a:	6923      	ldr	r3, [r4, #16]
 800a60c:	4632      	mov	r2, r6
 800a60e:	4649      	mov	r1, r9
 800a610:	4640      	mov	r0, r8
 800a612:	47d0      	blx	sl
 800a614:	3001      	adds	r0, #1
 800a616:	d0ab      	beq.n	800a570 <_printf_i+0x164>
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	079b      	lsls	r3, r3, #30
 800a61c:	d413      	bmi.n	800a646 <_printf_i+0x23a>
 800a61e:	68e0      	ldr	r0, [r4, #12]
 800a620:	9b03      	ldr	r3, [sp, #12]
 800a622:	4298      	cmp	r0, r3
 800a624:	bfb8      	it	lt
 800a626:	4618      	movlt	r0, r3
 800a628:	e7a4      	b.n	800a574 <_printf_i+0x168>
 800a62a:	2301      	movs	r3, #1
 800a62c:	4632      	mov	r2, r6
 800a62e:	4649      	mov	r1, r9
 800a630:	4640      	mov	r0, r8
 800a632:	47d0      	blx	sl
 800a634:	3001      	adds	r0, #1
 800a636:	d09b      	beq.n	800a570 <_printf_i+0x164>
 800a638:	3501      	adds	r5, #1
 800a63a:	68e3      	ldr	r3, [r4, #12]
 800a63c:	9903      	ldr	r1, [sp, #12]
 800a63e:	1a5b      	subs	r3, r3, r1
 800a640:	42ab      	cmp	r3, r5
 800a642:	dcf2      	bgt.n	800a62a <_printf_i+0x21e>
 800a644:	e7eb      	b.n	800a61e <_printf_i+0x212>
 800a646:	2500      	movs	r5, #0
 800a648:	f104 0619 	add.w	r6, r4, #25
 800a64c:	e7f5      	b.n	800a63a <_printf_i+0x22e>
 800a64e:	bf00      	nop
 800a650:	0800e576 	.word	0x0800e576
 800a654:	0800e587 	.word	0x0800e587

0800a658 <siprintf>:
 800a658:	b40e      	push	{r1, r2, r3}
 800a65a:	b500      	push	{lr}
 800a65c:	b09c      	sub	sp, #112	; 0x70
 800a65e:	ab1d      	add	r3, sp, #116	; 0x74
 800a660:	9002      	str	r0, [sp, #8]
 800a662:	9006      	str	r0, [sp, #24]
 800a664:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a668:	4809      	ldr	r0, [pc, #36]	; (800a690 <siprintf+0x38>)
 800a66a:	9107      	str	r1, [sp, #28]
 800a66c:	9104      	str	r1, [sp, #16]
 800a66e:	4909      	ldr	r1, [pc, #36]	; (800a694 <siprintf+0x3c>)
 800a670:	f853 2b04 	ldr.w	r2, [r3], #4
 800a674:	9105      	str	r1, [sp, #20]
 800a676:	6800      	ldr	r0, [r0, #0]
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	a902      	add	r1, sp, #8
 800a67c:	f002 ff00 	bl	800d480 <_svfiprintf_r>
 800a680:	9b02      	ldr	r3, [sp, #8]
 800a682:	2200      	movs	r2, #0
 800a684:	701a      	strb	r2, [r3, #0]
 800a686:	b01c      	add	sp, #112	; 0x70
 800a688:	f85d eb04 	ldr.w	lr, [sp], #4
 800a68c:	b003      	add	sp, #12
 800a68e:	4770      	bx	lr
 800a690:	20000014 	.word	0x20000014
 800a694:	ffff0208 	.word	0xffff0208

0800a698 <strcat>:
 800a698:	b510      	push	{r4, lr}
 800a69a:	4602      	mov	r2, r0
 800a69c:	7814      	ldrb	r4, [r2, #0]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	3201      	adds	r2, #1
 800a6a2:	2c00      	cmp	r4, #0
 800a6a4:	d1fa      	bne.n	800a69c <strcat+0x4>
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6b0:	2a00      	cmp	r2, #0
 800a6b2:	d1f9      	bne.n	800a6a8 <strcat+0x10>
 800a6b4:	bd10      	pop	{r4, pc}

0800a6b6 <strchr>:
 800a6b6:	b2c9      	uxtb	r1, r1
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6be:	b11a      	cbz	r2, 800a6c8 <strchr+0x12>
 800a6c0:	428a      	cmp	r2, r1
 800a6c2:	d1f9      	bne.n	800a6b8 <strchr+0x2>
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	4770      	bx	lr
 800a6c8:	2900      	cmp	r1, #0
 800a6ca:	bf18      	it	ne
 800a6cc:	2300      	movne	r3, #0
 800a6ce:	e7f9      	b.n	800a6c4 <strchr+0xe>

0800a6d0 <strcpy>:
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6d6:	f803 2b01 	strb.w	r2, [r3], #1
 800a6da:	2a00      	cmp	r2, #0
 800a6dc:	d1f9      	bne.n	800a6d2 <strcpy+0x2>
 800a6de:	4770      	bx	lr

0800a6e0 <strdup>:
 800a6e0:	4b02      	ldr	r3, [pc, #8]	; (800a6ec <strdup+0xc>)
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	6818      	ldr	r0, [r3, #0]
 800a6e6:	f000 b803 	b.w	800a6f0 <_strdup_r>
 800a6ea:	bf00      	nop
 800a6ec:	20000014 	.word	0x20000014

0800a6f0 <_strdup_r>:
 800a6f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	4608      	mov	r0, r1
 800a6f6:	460d      	mov	r5, r1
 800a6f8:	f7f5 fd72 	bl	80001e0 <strlen>
 800a6fc:	1c42      	adds	r2, r0, #1
 800a6fe:	4611      	mov	r1, r2
 800a700:	4620      	mov	r0, r4
 800a702:	9201      	str	r2, [sp, #4]
 800a704:	f002 fe06 	bl	800d314 <_malloc_r>
 800a708:	4604      	mov	r4, r0
 800a70a:	b118      	cbz	r0, 800a714 <_strdup_r+0x24>
 800a70c:	9a01      	ldr	r2, [sp, #4]
 800a70e:	4629      	mov	r1, r5
 800a710:	f7ff fb22 	bl	8009d58 <memcpy>
 800a714:	4620      	mov	r0, r4
 800a716:	b003      	add	sp, #12
 800a718:	bd30      	pop	{r4, r5, pc}

0800a71a <strsep>:
 800a71a:	4602      	mov	r2, r0
 800a71c:	2300      	movs	r3, #0
 800a71e:	6800      	ldr	r0, [r0, #0]
 800a720:	f000 be80 	b.w	800b424 <__strtok_r>

0800a724 <strstr>:
 800a724:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a726:	780c      	ldrb	r4, [r1, #0]
 800a728:	b164      	cbz	r4, 800a744 <strstr+0x20>
 800a72a:	4603      	mov	r3, r0
 800a72c:	781a      	ldrb	r2, [r3, #0]
 800a72e:	4618      	mov	r0, r3
 800a730:	1c5e      	adds	r6, r3, #1
 800a732:	b90a      	cbnz	r2, 800a738 <strstr+0x14>
 800a734:	4610      	mov	r0, r2
 800a736:	e005      	b.n	800a744 <strstr+0x20>
 800a738:	4294      	cmp	r4, r2
 800a73a:	d108      	bne.n	800a74e <strstr+0x2a>
 800a73c:	460d      	mov	r5, r1
 800a73e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a742:	b902      	cbnz	r2, 800a746 <strstr+0x22>
 800a744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a746:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a74a:	4297      	cmp	r7, r2
 800a74c:	d0f7      	beq.n	800a73e <strstr+0x1a>
 800a74e:	4633      	mov	r3, r6
 800a750:	e7ec      	b.n	800a72c <strstr+0x8>

0800a752 <sulp>:
 800a752:	b570      	push	{r4, r5, r6, lr}
 800a754:	4604      	mov	r4, r0
 800a756:	460d      	mov	r5, r1
 800a758:	ec45 4b10 	vmov	d0, r4, r5
 800a75c:	4616      	mov	r6, r2
 800a75e:	f002 fc2b 	bl	800cfb8 <__ulp>
 800a762:	ec51 0b10 	vmov	r0, r1, d0
 800a766:	b17e      	cbz	r6, 800a788 <sulp+0x36>
 800a768:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a76c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a770:	2b00      	cmp	r3, #0
 800a772:	dd09      	ble.n	800a788 <sulp+0x36>
 800a774:	051b      	lsls	r3, r3, #20
 800a776:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a77a:	2400      	movs	r4, #0
 800a77c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a780:	4622      	mov	r2, r4
 800a782:	462b      	mov	r3, r5
 800a784:	f7f5 ff40 	bl	8000608 <__aeabi_dmul>
 800a788:	bd70      	pop	{r4, r5, r6, pc}
 800a78a:	0000      	movs	r0, r0
 800a78c:	0000      	movs	r0, r0
	...

0800a790 <_strtod_l>:
 800a790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	b0a3      	sub	sp, #140	; 0x8c
 800a796:	461f      	mov	r7, r3
 800a798:	2300      	movs	r3, #0
 800a79a:	931e      	str	r3, [sp, #120]	; 0x78
 800a79c:	4ba4      	ldr	r3, [pc, #656]	; (800aa30 <_strtod_l+0x2a0>)
 800a79e:	9219      	str	r2, [sp, #100]	; 0x64
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	9307      	str	r3, [sp, #28]
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	4688      	mov	r8, r1
 800a7aa:	f7f5 fd19 	bl	80001e0 <strlen>
 800a7ae:	f04f 0a00 	mov.w	sl, #0
 800a7b2:	4605      	mov	r5, r0
 800a7b4:	f04f 0b00 	mov.w	fp, #0
 800a7b8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a7bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7be:	781a      	ldrb	r2, [r3, #0]
 800a7c0:	2a2b      	cmp	r2, #43	; 0x2b
 800a7c2:	d04c      	beq.n	800a85e <_strtod_l+0xce>
 800a7c4:	d839      	bhi.n	800a83a <_strtod_l+0xaa>
 800a7c6:	2a0d      	cmp	r2, #13
 800a7c8:	d832      	bhi.n	800a830 <_strtod_l+0xa0>
 800a7ca:	2a08      	cmp	r2, #8
 800a7cc:	d832      	bhi.n	800a834 <_strtod_l+0xa4>
 800a7ce:	2a00      	cmp	r2, #0
 800a7d0:	d03c      	beq.n	800a84c <_strtod_l+0xbc>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	930e      	str	r3, [sp, #56]	; 0x38
 800a7d6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a7d8:	7833      	ldrb	r3, [r6, #0]
 800a7da:	2b30      	cmp	r3, #48	; 0x30
 800a7dc:	f040 80b4 	bne.w	800a948 <_strtod_l+0x1b8>
 800a7e0:	7873      	ldrb	r3, [r6, #1]
 800a7e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a7e6:	2b58      	cmp	r3, #88	; 0x58
 800a7e8:	d16c      	bne.n	800a8c4 <_strtod_l+0x134>
 800a7ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7ec:	9301      	str	r3, [sp, #4]
 800a7ee:	ab1e      	add	r3, sp, #120	; 0x78
 800a7f0:	9702      	str	r7, [sp, #8]
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	4a8f      	ldr	r2, [pc, #572]	; (800aa34 <_strtod_l+0x2a4>)
 800a7f6:	ab1f      	add	r3, sp, #124	; 0x7c
 800a7f8:	a91d      	add	r1, sp, #116	; 0x74
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f001 fd4a 	bl	800c294 <__gethex>
 800a800:	f010 0707 	ands.w	r7, r0, #7
 800a804:	4605      	mov	r5, r0
 800a806:	d005      	beq.n	800a814 <_strtod_l+0x84>
 800a808:	2f06      	cmp	r7, #6
 800a80a:	d12a      	bne.n	800a862 <_strtod_l+0xd2>
 800a80c:	3601      	adds	r6, #1
 800a80e:	2300      	movs	r3, #0
 800a810:	961d      	str	r6, [sp, #116]	; 0x74
 800a812:	930e      	str	r3, [sp, #56]	; 0x38
 800a814:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a816:	2b00      	cmp	r3, #0
 800a818:	f040 8596 	bne.w	800b348 <_strtod_l+0xbb8>
 800a81c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a81e:	b1db      	cbz	r3, 800a858 <_strtod_l+0xc8>
 800a820:	4652      	mov	r2, sl
 800a822:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a826:	ec43 2b10 	vmov	d0, r2, r3
 800a82a:	b023      	add	sp, #140	; 0x8c
 800a82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a830:	2a20      	cmp	r2, #32
 800a832:	d1ce      	bne.n	800a7d2 <_strtod_l+0x42>
 800a834:	3301      	adds	r3, #1
 800a836:	931d      	str	r3, [sp, #116]	; 0x74
 800a838:	e7c0      	b.n	800a7bc <_strtod_l+0x2c>
 800a83a:	2a2d      	cmp	r2, #45	; 0x2d
 800a83c:	d1c9      	bne.n	800a7d2 <_strtod_l+0x42>
 800a83e:	2201      	movs	r2, #1
 800a840:	920e      	str	r2, [sp, #56]	; 0x38
 800a842:	1c5a      	adds	r2, r3, #1
 800a844:	921d      	str	r2, [sp, #116]	; 0x74
 800a846:	785b      	ldrb	r3, [r3, #1]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1c4      	bne.n	800a7d6 <_strtod_l+0x46>
 800a84c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a84e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a852:	2b00      	cmp	r3, #0
 800a854:	f040 8576 	bne.w	800b344 <_strtod_l+0xbb4>
 800a858:	4652      	mov	r2, sl
 800a85a:	465b      	mov	r3, fp
 800a85c:	e7e3      	b.n	800a826 <_strtod_l+0x96>
 800a85e:	2200      	movs	r2, #0
 800a860:	e7ee      	b.n	800a840 <_strtod_l+0xb0>
 800a862:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a864:	b13a      	cbz	r2, 800a876 <_strtod_l+0xe6>
 800a866:	2135      	movs	r1, #53	; 0x35
 800a868:	a820      	add	r0, sp, #128	; 0x80
 800a86a:	f002 fcb0 	bl	800d1ce <__copybits>
 800a86e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a870:	4620      	mov	r0, r4
 800a872:	f002 f875 	bl	800c960 <_Bfree>
 800a876:	3f01      	subs	r7, #1
 800a878:	2f05      	cmp	r7, #5
 800a87a:	d807      	bhi.n	800a88c <_strtod_l+0xfc>
 800a87c:	e8df f007 	tbb	[pc, r7]
 800a880:	1d180b0e 	.word	0x1d180b0e
 800a884:	030e      	.short	0x030e
 800a886:	f04f 0b00 	mov.w	fp, #0
 800a88a:	46da      	mov	sl, fp
 800a88c:	0728      	lsls	r0, r5, #28
 800a88e:	d5c1      	bpl.n	800a814 <_strtod_l+0x84>
 800a890:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a894:	e7be      	b.n	800a814 <_strtod_l+0x84>
 800a896:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800a89a:	e7f7      	b.n	800a88c <_strtod_l+0xfc>
 800a89c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800a8a0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a8a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a8a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a8aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a8ae:	e7ed      	b.n	800a88c <_strtod_l+0xfc>
 800a8b0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800aa38 <_strtod_l+0x2a8>
 800a8b4:	f04f 0a00 	mov.w	sl, #0
 800a8b8:	e7e8      	b.n	800a88c <_strtod_l+0xfc>
 800a8ba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a8be:	f04f 3aff 	mov.w	sl, #4294967295
 800a8c2:	e7e3      	b.n	800a88c <_strtod_l+0xfc>
 800a8c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8c6:	1c5a      	adds	r2, r3, #1
 800a8c8:	921d      	str	r2, [sp, #116]	; 0x74
 800a8ca:	785b      	ldrb	r3, [r3, #1]
 800a8cc:	2b30      	cmp	r3, #48	; 0x30
 800a8ce:	d0f9      	beq.n	800a8c4 <_strtod_l+0x134>
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d09f      	beq.n	800a814 <_strtod_l+0x84>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	f04f 0900 	mov.w	r9, #0
 800a8da:	9304      	str	r3, [sp, #16]
 800a8dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8de:	930a      	str	r3, [sp, #40]	; 0x28
 800a8e0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a8e4:	464f      	mov	r7, r9
 800a8e6:	220a      	movs	r2, #10
 800a8e8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a8ea:	7806      	ldrb	r6, [r0, #0]
 800a8ec:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a8f0:	b2d9      	uxtb	r1, r3
 800a8f2:	2909      	cmp	r1, #9
 800a8f4:	d92a      	bls.n	800a94c <_strtod_l+0x1bc>
 800a8f6:	9907      	ldr	r1, [sp, #28]
 800a8f8:	462a      	mov	r2, r5
 800a8fa:	f003 f835 	bl	800d968 <strncmp>
 800a8fe:	b398      	cbz	r0, 800a968 <_strtod_l+0x1d8>
 800a900:	2000      	movs	r0, #0
 800a902:	4633      	mov	r3, r6
 800a904:	463d      	mov	r5, r7
 800a906:	9007      	str	r0, [sp, #28]
 800a908:	4602      	mov	r2, r0
 800a90a:	2b65      	cmp	r3, #101	; 0x65
 800a90c:	d001      	beq.n	800a912 <_strtod_l+0x182>
 800a90e:	2b45      	cmp	r3, #69	; 0x45
 800a910:	d118      	bne.n	800a944 <_strtod_l+0x1b4>
 800a912:	b91d      	cbnz	r5, 800a91c <_strtod_l+0x18c>
 800a914:	9b04      	ldr	r3, [sp, #16]
 800a916:	4303      	orrs	r3, r0
 800a918:	d098      	beq.n	800a84c <_strtod_l+0xbc>
 800a91a:	2500      	movs	r5, #0
 800a91c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800a920:	f108 0301 	add.w	r3, r8, #1
 800a924:	931d      	str	r3, [sp, #116]	; 0x74
 800a926:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a92a:	2b2b      	cmp	r3, #43	; 0x2b
 800a92c:	d075      	beq.n	800aa1a <_strtod_l+0x28a>
 800a92e:	2b2d      	cmp	r3, #45	; 0x2d
 800a930:	d07b      	beq.n	800aa2a <_strtod_l+0x29a>
 800a932:	f04f 0c00 	mov.w	ip, #0
 800a936:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a93a:	2909      	cmp	r1, #9
 800a93c:	f240 8082 	bls.w	800aa44 <_strtod_l+0x2b4>
 800a940:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a944:	2600      	movs	r6, #0
 800a946:	e09d      	b.n	800aa84 <_strtod_l+0x2f4>
 800a948:	2300      	movs	r3, #0
 800a94a:	e7c4      	b.n	800a8d6 <_strtod_l+0x146>
 800a94c:	2f08      	cmp	r7, #8
 800a94e:	bfd8      	it	le
 800a950:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a952:	f100 0001 	add.w	r0, r0, #1
 800a956:	bfda      	itte	le
 800a958:	fb02 3301 	mlale	r3, r2, r1, r3
 800a95c:	9309      	strle	r3, [sp, #36]	; 0x24
 800a95e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a962:	3701      	adds	r7, #1
 800a964:	901d      	str	r0, [sp, #116]	; 0x74
 800a966:	e7bf      	b.n	800a8e8 <_strtod_l+0x158>
 800a968:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a96a:	195a      	adds	r2, r3, r5
 800a96c:	921d      	str	r2, [sp, #116]	; 0x74
 800a96e:	5d5b      	ldrb	r3, [r3, r5]
 800a970:	2f00      	cmp	r7, #0
 800a972:	d037      	beq.n	800a9e4 <_strtod_l+0x254>
 800a974:	9007      	str	r0, [sp, #28]
 800a976:	463d      	mov	r5, r7
 800a978:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a97c:	2a09      	cmp	r2, #9
 800a97e:	d912      	bls.n	800a9a6 <_strtod_l+0x216>
 800a980:	2201      	movs	r2, #1
 800a982:	e7c2      	b.n	800a90a <_strtod_l+0x17a>
 800a984:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a986:	1c5a      	adds	r2, r3, #1
 800a988:	921d      	str	r2, [sp, #116]	; 0x74
 800a98a:	785b      	ldrb	r3, [r3, #1]
 800a98c:	3001      	adds	r0, #1
 800a98e:	2b30      	cmp	r3, #48	; 0x30
 800a990:	d0f8      	beq.n	800a984 <_strtod_l+0x1f4>
 800a992:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a996:	2a08      	cmp	r2, #8
 800a998:	f200 84db 	bhi.w	800b352 <_strtod_l+0xbc2>
 800a99c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a99e:	9007      	str	r0, [sp, #28]
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	920a      	str	r2, [sp, #40]	; 0x28
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	3b30      	subs	r3, #48	; 0x30
 800a9a8:	f100 0201 	add.w	r2, r0, #1
 800a9ac:	d014      	beq.n	800a9d8 <_strtod_l+0x248>
 800a9ae:	9907      	ldr	r1, [sp, #28]
 800a9b0:	4411      	add	r1, r2
 800a9b2:	9107      	str	r1, [sp, #28]
 800a9b4:	462a      	mov	r2, r5
 800a9b6:	eb00 0e05 	add.w	lr, r0, r5
 800a9ba:	210a      	movs	r1, #10
 800a9bc:	4572      	cmp	r2, lr
 800a9be:	d113      	bne.n	800a9e8 <_strtod_l+0x258>
 800a9c0:	182a      	adds	r2, r5, r0
 800a9c2:	2a08      	cmp	r2, #8
 800a9c4:	f105 0501 	add.w	r5, r5, #1
 800a9c8:	4405      	add	r5, r0
 800a9ca:	dc1c      	bgt.n	800aa06 <_strtod_l+0x276>
 800a9cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9ce:	220a      	movs	r2, #10
 800a9d0:	fb02 3301 	mla	r3, r2, r1, r3
 800a9d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9da:	1c59      	adds	r1, r3, #1
 800a9dc:	911d      	str	r1, [sp, #116]	; 0x74
 800a9de:	785b      	ldrb	r3, [r3, #1]
 800a9e0:	4610      	mov	r0, r2
 800a9e2:	e7c9      	b.n	800a978 <_strtod_l+0x1e8>
 800a9e4:	4638      	mov	r0, r7
 800a9e6:	e7d2      	b.n	800a98e <_strtod_l+0x1fe>
 800a9e8:	2a08      	cmp	r2, #8
 800a9ea:	dc04      	bgt.n	800a9f6 <_strtod_l+0x266>
 800a9ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a9ee:	434e      	muls	r6, r1
 800a9f0:	9609      	str	r6, [sp, #36]	; 0x24
 800a9f2:	3201      	adds	r2, #1
 800a9f4:	e7e2      	b.n	800a9bc <_strtod_l+0x22c>
 800a9f6:	f102 0c01 	add.w	ip, r2, #1
 800a9fa:	f1bc 0f10 	cmp.w	ip, #16
 800a9fe:	bfd8      	it	le
 800aa00:	fb01 f909 	mulle.w	r9, r1, r9
 800aa04:	e7f5      	b.n	800a9f2 <_strtod_l+0x262>
 800aa06:	2d10      	cmp	r5, #16
 800aa08:	bfdc      	itt	le
 800aa0a:	220a      	movle	r2, #10
 800aa0c:	fb02 3909 	mlale	r9, r2, r9, r3
 800aa10:	e7e1      	b.n	800a9d6 <_strtod_l+0x246>
 800aa12:	2300      	movs	r3, #0
 800aa14:	9307      	str	r3, [sp, #28]
 800aa16:	2201      	movs	r2, #1
 800aa18:	e77c      	b.n	800a914 <_strtod_l+0x184>
 800aa1a:	f04f 0c00 	mov.w	ip, #0
 800aa1e:	f108 0302 	add.w	r3, r8, #2
 800aa22:	931d      	str	r3, [sp, #116]	; 0x74
 800aa24:	f898 3002 	ldrb.w	r3, [r8, #2]
 800aa28:	e785      	b.n	800a936 <_strtod_l+0x1a6>
 800aa2a:	f04f 0c01 	mov.w	ip, #1
 800aa2e:	e7f6      	b.n	800aa1e <_strtod_l+0x28e>
 800aa30:	0800e784 	.word	0x0800e784
 800aa34:	0800e598 	.word	0x0800e598
 800aa38:	7ff00000 	.word	0x7ff00000
 800aa3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa3e:	1c59      	adds	r1, r3, #1
 800aa40:	911d      	str	r1, [sp, #116]	; 0x74
 800aa42:	785b      	ldrb	r3, [r3, #1]
 800aa44:	2b30      	cmp	r3, #48	; 0x30
 800aa46:	d0f9      	beq.n	800aa3c <_strtod_l+0x2ac>
 800aa48:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800aa4c:	2908      	cmp	r1, #8
 800aa4e:	f63f af79 	bhi.w	800a944 <_strtod_l+0x1b4>
 800aa52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800aa56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa58:	9308      	str	r3, [sp, #32]
 800aa5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa5c:	1c59      	adds	r1, r3, #1
 800aa5e:	911d      	str	r1, [sp, #116]	; 0x74
 800aa60:	785b      	ldrb	r3, [r3, #1]
 800aa62:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800aa66:	2e09      	cmp	r6, #9
 800aa68:	d937      	bls.n	800aada <_strtod_l+0x34a>
 800aa6a:	9e08      	ldr	r6, [sp, #32]
 800aa6c:	1b89      	subs	r1, r1, r6
 800aa6e:	2908      	cmp	r1, #8
 800aa70:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800aa74:	dc02      	bgt.n	800aa7c <_strtod_l+0x2ec>
 800aa76:	4576      	cmp	r6, lr
 800aa78:	bfa8      	it	ge
 800aa7a:	4676      	movge	r6, lr
 800aa7c:	f1bc 0f00 	cmp.w	ip, #0
 800aa80:	d000      	beq.n	800aa84 <_strtod_l+0x2f4>
 800aa82:	4276      	negs	r6, r6
 800aa84:	2d00      	cmp	r5, #0
 800aa86:	d14f      	bne.n	800ab28 <_strtod_l+0x398>
 800aa88:	9904      	ldr	r1, [sp, #16]
 800aa8a:	4301      	orrs	r1, r0
 800aa8c:	f47f aec2 	bne.w	800a814 <_strtod_l+0x84>
 800aa90:	2a00      	cmp	r2, #0
 800aa92:	f47f aedb 	bne.w	800a84c <_strtod_l+0xbc>
 800aa96:	2b69      	cmp	r3, #105	; 0x69
 800aa98:	d027      	beq.n	800aaea <_strtod_l+0x35a>
 800aa9a:	dc24      	bgt.n	800aae6 <_strtod_l+0x356>
 800aa9c:	2b49      	cmp	r3, #73	; 0x49
 800aa9e:	d024      	beq.n	800aaea <_strtod_l+0x35a>
 800aaa0:	2b4e      	cmp	r3, #78	; 0x4e
 800aaa2:	f47f aed3 	bne.w	800a84c <_strtod_l+0xbc>
 800aaa6:	499e      	ldr	r1, [pc, #632]	; (800ad20 <_strtod_l+0x590>)
 800aaa8:	a81d      	add	r0, sp, #116	; 0x74
 800aaaa:	f001 fe4b 	bl	800c744 <__match>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	f43f aecc 	beq.w	800a84c <_strtod_l+0xbc>
 800aab4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	2b28      	cmp	r3, #40	; 0x28
 800aaba:	d12d      	bne.n	800ab18 <_strtod_l+0x388>
 800aabc:	4999      	ldr	r1, [pc, #612]	; (800ad24 <_strtod_l+0x594>)
 800aabe:	aa20      	add	r2, sp, #128	; 0x80
 800aac0:	a81d      	add	r0, sp, #116	; 0x74
 800aac2:	f001 fe53 	bl	800c76c <__hexnan>
 800aac6:	2805      	cmp	r0, #5
 800aac8:	d126      	bne.n	800ab18 <_strtod_l+0x388>
 800aaca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aacc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800aad0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800aad4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800aad8:	e69c      	b.n	800a814 <_strtod_l+0x84>
 800aada:	210a      	movs	r1, #10
 800aadc:	fb01 3e0e 	mla	lr, r1, lr, r3
 800aae0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800aae4:	e7b9      	b.n	800aa5a <_strtod_l+0x2ca>
 800aae6:	2b6e      	cmp	r3, #110	; 0x6e
 800aae8:	e7db      	b.n	800aaa2 <_strtod_l+0x312>
 800aaea:	498f      	ldr	r1, [pc, #572]	; (800ad28 <_strtod_l+0x598>)
 800aaec:	a81d      	add	r0, sp, #116	; 0x74
 800aaee:	f001 fe29 	bl	800c744 <__match>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	f43f aeaa 	beq.w	800a84c <_strtod_l+0xbc>
 800aaf8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aafa:	498c      	ldr	r1, [pc, #560]	; (800ad2c <_strtod_l+0x59c>)
 800aafc:	3b01      	subs	r3, #1
 800aafe:	a81d      	add	r0, sp, #116	; 0x74
 800ab00:	931d      	str	r3, [sp, #116]	; 0x74
 800ab02:	f001 fe1f 	bl	800c744 <__match>
 800ab06:	b910      	cbnz	r0, 800ab0e <_strtod_l+0x37e>
 800ab08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	931d      	str	r3, [sp, #116]	; 0x74
 800ab0e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ad3c <_strtod_l+0x5ac>
 800ab12:	f04f 0a00 	mov.w	sl, #0
 800ab16:	e67d      	b.n	800a814 <_strtod_l+0x84>
 800ab18:	4885      	ldr	r0, [pc, #532]	; (800ad30 <_strtod_l+0x5a0>)
 800ab1a:	f002 ff0d 	bl	800d938 <nan>
 800ab1e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ab22:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ab26:	e675      	b.n	800a814 <_strtod_l+0x84>
 800ab28:	9b07      	ldr	r3, [sp, #28]
 800ab2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab2c:	1af3      	subs	r3, r6, r3
 800ab2e:	2f00      	cmp	r7, #0
 800ab30:	bf08      	it	eq
 800ab32:	462f      	moveq	r7, r5
 800ab34:	2d10      	cmp	r5, #16
 800ab36:	9308      	str	r3, [sp, #32]
 800ab38:	46a8      	mov	r8, r5
 800ab3a:	bfa8      	it	ge
 800ab3c:	f04f 0810 	movge.w	r8, #16
 800ab40:	f7f5 fce8 	bl	8000514 <__aeabi_ui2d>
 800ab44:	2d09      	cmp	r5, #9
 800ab46:	4682      	mov	sl, r0
 800ab48:	468b      	mov	fp, r1
 800ab4a:	dd13      	ble.n	800ab74 <_strtod_l+0x3e4>
 800ab4c:	4b79      	ldr	r3, [pc, #484]	; (800ad34 <_strtod_l+0x5a4>)
 800ab4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ab52:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ab56:	f7f5 fd57 	bl	8000608 <__aeabi_dmul>
 800ab5a:	4682      	mov	sl, r0
 800ab5c:	4648      	mov	r0, r9
 800ab5e:	468b      	mov	fp, r1
 800ab60:	f7f5 fcd8 	bl	8000514 <__aeabi_ui2d>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4650      	mov	r0, sl
 800ab6a:	4659      	mov	r1, fp
 800ab6c:	f7f5 fb96 	bl	800029c <__adddf3>
 800ab70:	4682      	mov	sl, r0
 800ab72:	468b      	mov	fp, r1
 800ab74:	2d0f      	cmp	r5, #15
 800ab76:	dc38      	bgt.n	800abea <_strtod_l+0x45a>
 800ab78:	9b08      	ldr	r3, [sp, #32]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f43f ae4a 	beq.w	800a814 <_strtod_l+0x84>
 800ab80:	dd24      	ble.n	800abcc <_strtod_l+0x43c>
 800ab82:	2b16      	cmp	r3, #22
 800ab84:	dc0b      	bgt.n	800ab9e <_strtod_l+0x40e>
 800ab86:	4d6b      	ldr	r5, [pc, #428]	; (800ad34 <_strtod_l+0x5a4>)
 800ab88:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800ab8c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ab90:	4652      	mov	r2, sl
 800ab92:	465b      	mov	r3, fp
 800ab94:	f7f5 fd38 	bl	8000608 <__aeabi_dmul>
 800ab98:	4682      	mov	sl, r0
 800ab9a:	468b      	mov	fp, r1
 800ab9c:	e63a      	b.n	800a814 <_strtod_l+0x84>
 800ab9e:	9a08      	ldr	r2, [sp, #32]
 800aba0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800aba4:	4293      	cmp	r3, r2
 800aba6:	db20      	blt.n	800abea <_strtod_l+0x45a>
 800aba8:	4c62      	ldr	r4, [pc, #392]	; (800ad34 <_strtod_l+0x5a4>)
 800abaa:	f1c5 050f 	rsb	r5, r5, #15
 800abae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800abb2:	4652      	mov	r2, sl
 800abb4:	465b      	mov	r3, fp
 800abb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abba:	f7f5 fd25 	bl	8000608 <__aeabi_dmul>
 800abbe:	9b08      	ldr	r3, [sp, #32]
 800abc0:	1b5d      	subs	r5, r3, r5
 800abc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800abc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800abca:	e7e3      	b.n	800ab94 <_strtod_l+0x404>
 800abcc:	9b08      	ldr	r3, [sp, #32]
 800abce:	3316      	adds	r3, #22
 800abd0:	db0b      	blt.n	800abea <_strtod_l+0x45a>
 800abd2:	9b07      	ldr	r3, [sp, #28]
 800abd4:	4a57      	ldr	r2, [pc, #348]	; (800ad34 <_strtod_l+0x5a4>)
 800abd6:	1b9e      	subs	r6, r3, r6
 800abd8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800abdc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800abe0:	4650      	mov	r0, sl
 800abe2:	4659      	mov	r1, fp
 800abe4:	f7f5 fe3a 	bl	800085c <__aeabi_ddiv>
 800abe8:	e7d6      	b.n	800ab98 <_strtod_l+0x408>
 800abea:	9b08      	ldr	r3, [sp, #32]
 800abec:	eba5 0808 	sub.w	r8, r5, r8
 800abf0:	4498      	add	r8, r3
 800abf2:	f1b8 0f00 	cmp.w	r8, #0
 800abf6:	dd71      	ble.n	800acdc <_strtod_l+0x54c>
 800abf8:	f018 030f 	ands.w	r3, r8, #15
 800abfc:	d00a      	beq.n	800ac14 <_strtod_l+0x484>
 800abfe:	494d      	ldr	r1, [pc, #308]	; (800ad34 <_strtod_l+0x5a4>)
 800ac00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac04:	4652      	mov	r2, sl
 800ac06:	465b      	mov	r3, fp
 800ac08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac0c:	f7f5 fcfc 	bl	8000608 <__aeabi_dmul>
 800ac10:	4682      	mov	sl, r0
 800ac12:	468b      	mov	fp, r1
 800ac14:	f038 080f 	bics.w	r8, r8, #15
 800ac18:	d04d      	beq.n	800acb6 <_strtod_l+0x526>
 800ac1a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ac1e:	dd22      	ble.n	800ac66 <_strtod_l+0x4d6>
 800ac20:	2500      	movs	r5, #0
 800ac22:	462e      	mov	r6, r5
 800ac24:	9509      	str	r5, [sp, #36]	; 0x24
 800ac26:	9507      	str	r5, [sp, #28]
 800ac28:	2322      	movs	r3, #34	; 0x22
 800ac2a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ad3c <_strtod_l+0x5ac>
 800ac2e:	6023      	str	r3, [r4, #0]
 800ac30:	f04f 0a00 	mov.w	sl, #0
 800ac34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	f43f adec 	beq.w	800a814 <_strtod_l+0x84>
 800ac3c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f001 fe8e 	bl	800c960 <_Bfree>
 800ac44:	9907      	ldr	r1, [sp, #28]
 800ac46:	4620      	mov	r0, r4
 800ac48:	f001 fe8a 	bl	800c960 <_Bfree>
 800ac4c:	4631      	mov	r1, r6
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f001 fe86 	bl	800c960 <_Bfree>
 800ac54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac56:	4620      	mov	r0, r4
 800ac58:	f001 fe82 	bl	800c960 <_Bfree>
 800ac5c:	4629      	mov	r1, r5
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f001 fe7e 	bl	800c960 <_Bfree>
 800ac64:	e5d6      	b.n	800a814 <_strtod_l+0x84>
 800ac66:	2300      	movs	r3, #0
 800ac68:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ac6c:	4650      	mov	r0, sl
 800ac6e:	4659      	mov	r1, fp
 800ac70:	4699      	mov	r9, r3
 800ac72:	f1b8 0f01 	cmp.w	r8, #1
 800ac76:	dc21      	bgt.n	800acbc <_strtod_l+0x52c>
 800ac78:	b10b      	cbz	r3, 800ac7e <_strtod_l+0x4ee>
 800ac7a:	4682      	mov	sl, r0
 800ac7c:	468b      	mov	fp, r1
 800ac7e:	4b2e      	ldr	r3, [pc, #184]	; (800ad38 <_strtod_l+0x5a8>)
 800ac80:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ac84:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ac88:	4652      	mov	r2, sl
 800ac8a:	465b      	mov	r3, fp
 800ac8c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ac90:	f7f5 fcba 	bl	8000608 <__aeabi_dmul>
 800ac94:	4b29      	ldr	r3, [pc, #164]	; (800ad3c <_strtod_l+0x5ac>)
 800ac96:	460a      	mov	r2, r1
 800ac98:	400b      	ands	r3, r1
 800ac9a:	4929      	ldr	r1, [pc, #164]	; (800ad40 <_strtod_l+0x5b0>)
 800ac9c:	428b      	cmp	r3, r1
 800ac9e:	4682      	mov	sl, r0
 800aca0:	d8be      	bhi.n	800ac20 <_strtod_l+0x490>
 800aca2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aca6:	428b      	cmp	r3, r1
 800aca8:	bf86      	itte	hi
 800acaa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ad44 <_strtod_l+0x5b4>
 800acae:	f04f 3aff 	movhi.w	sl, #4294967295
 800acb2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800acb6:	2300      	movs	r3, #0
 800acb8:	9304      	str	r3, [sp, #16]
 800acba:	e081      	b.n	800adc0 <_strtod_l+0x630>
 800acbc:	f018 0f01 	tst.w	r8, #1
 800acc0:	d007      	beq.n	800acd2 <_strtod_l+0x542>
 800acc2:	4b1d      	ldr	r3, [pc, #116]	; (800ad38 <_strtod_l+0x5a8>)
 800acc4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800acc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800accc:	f7f5 fc9c 	bl	8000608 <__aeabi_dmul>
 800acd0:	2301      	movs	r3, #1
 800acd2:	f109 0901 	add.w	r9, r9, #1
 800acd6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800acda:	e7ca      	b.n	800ac72 <_strtod_l+0x4e2>
 800acdc:	d0eb      	beq.n	800acb6 <_strtod_l+0x526>
 800acde:	f1c8 0800 	rsb	r8, r8, #0
 800ace2:	f018 020f 	ands.w	r2, r8, #15
 800ace6:	d00a      	beq.n	800acfe <_strtod_l+0x56e>
 800ace8:	4b12      	ldr	r3, [pc, #72]	; (800ad34 <_strtod_l+0x5a4>)
 800acea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acee:	4650      	mov	r0, sl
 800acf0:	4659      	mov	r1, fp
 800acf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf6:	f7f5 fdb1 	bl	800085c <__aeabi_ddiv>
 800acfa:	4682      	mov	sl, r0
 800acfc:	468b      	mov	fp, r1
 800acfe:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ad02:	d0d8      	beq.n	800acb6 <_strtod_l+0x526>
 800ad04:	f1b8 0f1f 	cmp.w	r8, #31
 800ad08:	dd1e      	ble.n	800ad48 <_strtod_l+0x5b8>
 800ad0a:	2500      	movs	r5, #0
 800ad0c:	462e      	mov	r6, r5
 800ad0e:	9509      	str	r5, [sp, #36]	; 0x24
 800ad10:	9507      	str	r5, [sp, #28]
 800ad12:	2322      	movs	r3, #34	; 0x22
 800ad14:	f04f 0a00 	mov.w	sl, #0
 800ad18:	f04f 0b00 	mov.w	fp, #0
 800ad1c:	6023      	str	r3, [r4, #0]
 800ad1e:	e789      	b.n	800ac34 <_strtod_l+0x4a4>
 800ad20:	0800e571 	.word	0x0800e571
 800ad24:	0800e5ac 	.word	0x0800e5ac
 800ad28:	0800e569 	.word	0x0800e569
 800ad2c:	0800e69f 	.word	0x0800e69f
 800ad30:	0800e69b 	.word	0x0800e69b
 800ad34:	0800e820 	.word	0x0800e820
 800ad38:	0800e7f8 	.word	0x0800e7f8
 800ad3c:	7ff00000 	.word	0x7ff00000
 800ad40:	7ca00000 	.word	0x7ca00000
 800ad44:	7fefffff 	.word	0x7fefffff
 800ad48:	f018 0310 	ands.w	r3, r8, #16
 800ad4c:	bf18      	it	ne
 800ad4e:	236a      	movne	r3, #106	; 0x6a
 800ad50:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800b108 <_strtod_l+0x978>
 800ad54:	9304      	str	r3, [sp, #16]
 800ad56:	4650      	mov	r0, sl
 800ad58:	4659      	mov	r1, fp
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	f018 0f01 	tst.w	r8, #1
 800ad60:	d004      	beq.n	800ad6c <_strtod_l+0x5dc>
 800ad62:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ad66:	f7f5 fc4f 	bl	8000608 <__aeabi_dmul>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ad70:	f109 0908 	add.w	r9, r9, #8
 800ad74:	d1f2      	bne.n	800ad5c <_strtod_l+0x5cc>
 800ad76:	b10b      	cbz	r3, 800ad7c <_strtod_l+0x5ec>
 800ad78:	4682      	mov	sl, r0
 800ad7a:	468b      	mov	fp, r1
 800ad7c:	9b04      	ldr	r3, [sp, #16]
 800ad7e:	b1bb      	cbz	r3, 800adb0 <_strtod_l+0x620>
 800ad80:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ad84:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	4659      	mov	r1, fp
 800ad8c:	dd10      	ble.n	800adb0 <_strtod_l+0x620>
 800ad8e:	2b1f      	cmp	r3, #31
 800ad90:	f340 8128 	ble.w	800afe4 <_strtod_l+0x854>
 800ad94:	2b34      	cmp	r3, #52	; 0x34
 800ad96:	bfde      	ittt	le
 800ad98:	3b20      	suble	r3, #32
 800ad9a:	f04f 32ff 	movle.w	r2, #4294967295
 800ad9e:	fa02 f303 	lslle.w	r3, r2, r3
 800ada2:	f04f 0a00 	mov.w	sl, #0
 800ada6:	bfcc      	ite	gt
 800ada8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800adac:	ea03 0b01 	andle.w	fp, r3, r1
 800adb0:	2200      	movs	r2, #0
 800adb2:	2300      	movs	r3, #0
 800adb4:	4650      	mov	r0, sl
 800adb6:	4659      	mov	r1, fp
 800adb8:	f7f5 fe8e 	bl	8000ad8 <__aeabi_dcmpeq>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d1a4      	bne.n	800ad0a <_strtod_l+0x57a>
 800adc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800adc6:	462b      	mov	r3, r5
 800adc8:	463a      	mov	r2, r7
 800adca:	4620      	mov	r0, r4
 800adcc:	f001 fe34 	bl	800ca38 <__s2b>
 800add0:	9009      	str	r0, [sp, #36]	; 0x24
 800add2:	2800      	cmp	r0, #0
 800add4:	f43f af24 	beq.w	800ac20 <_strtod_l+0x490>
 800add8:	9b07      	ldr	r3, [sp, #28]
 800adda:	1b9e      	subs	r6, r3, r6
 800addc:	9b08      	ldr	r3, [sp, #32]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	bfb4      	ite	lt
 800ade2:	4633      	movlt	r3, r6
 800ade4:	2300      	movge	r3, #0
 800ade6:	9310      	str	r3, [sp, #64]	; 0x40
 800ade8:	9b08      	ldr	r3, [sp, #32]
 800adea:	2500      	movs	r5, #0
 800adec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800adf0:	9318      	str	r3, [sp, #96]	; 0x60
 800adf2:	462e      	mov	r6, r5
 800adf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf6:	4620      	mov	r0, r4
 800adf8:	6859      	ldr	r1, [r3, #4]
 800adfa:	f001 fd71 	bl	800c8e0 <_Balloc>
 800adfe:	9007      	str	r0, [sp, #28]
 800ae00:	2800      	cmp	r0, #0
 800ae02:	f43f af11 	beq.w	800ac28 <_strtod_l+0x498>
 800ae06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae08:	691a      	ldr	r2, [r3, #16]
 800ae0a:	3202      	adds	r2, #2
 800ae0c:	f103 010c 	add.w	r1, r3, #12
 800ae10:	0092      	lsls	r2, r2, #2
 800ae12:	300c      	adds	r0, #12
 800ae14:	f7fe ffa0 	bl	8009d58 <memcpy>
 800ae18:	ec4b ab10 	vmov	d0, sl, fp
 800ae1c:	aa20      	add	r2, sp, #128	; 0x80
 800ae1e:	a91f      	add	r1, sp, #124	; 0x7c
 800ae20:	4620      	mov	r0, r4
 800ae22:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ae26:	f002 f943 	bl	800d0b0 <__d2b>
 800ae2a:	901e      	str	r0, [sp, #120]	; 0x78
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	f43f aefb 	beq.w	800ac28 <_strtod_l+0x498>
 800ae32:	2101      	movs	r1, #1
 800ae34:	4620      	mov	r0, r4
 800ae36:	f001 fe99 	bl	800cb6c <__i2b>
 800ae3a:	4606      	mov	r6, r0
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	f43f aef3 	beq.w	800ac28 <_strtod_l+0x498>
 800ae42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ae44:	9904      	ldr	r1, [sp, #16]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	bfab      	itete	ge
 800ae4a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ae4c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ae4e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ae50:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ae54:	bfac      	ite	ge
 800ae56:	eb03 0902 	addge.w	r9, r3, r2
 800ae5a:	1ad7      	sublt	r7, r2, r3
 800ae5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ae5e:	eba3 0801 	sub.w	r8, r3, r1
 800ae62:	4490      	add	r8, r2
 800ae64:	4ba3      	ldr	r3, [pc, #652]	; (800b0f4 <_strtod_l+0x964>)
 800ae66:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae6a:	4598      	cmp	r8, r3
 800ae6c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ae70:	f280 80cc 	bge.w	800b00c <_strtod_l+0x87c>
 800ae74:	eba3 0308 	sub.w	r3, r3, r8
 800ae78:	2b1f      	cmp	r3, #31
 800ae7a:	eba2 0203 	sub.w	r2, r2, r3
 800ae7e:	f04f 0101 	mov.w	r1, #1
 800ae82:	f300 80b6 	bgt.w	800aff2 <_strtod_l+0x862>
 800ae86:	fa01 f303 	lsl.w	r3, r1, r3
 800ae8a:	9311      	str	r3, [sp, #68]	; 0x44
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	930c      	str	r3, [sp, #48]	; 0x30
 800ae90:	eb09 0802 	add.w	r8, r9, r2
 800ae94:	9b04      	ldr	r3, [sp, #16]
 800ae96:	45c1      	cmp	r9, r8
 800ae98:	4417      	add	r7, r2
 800ae9a:	441f      	add	r7, r3
 800ae9c:	464b      	mov	r3, r9
 800ae9e:	bfa8      	it	ge
 800aea0:	4643      	movge	r3, r8
 800aea2:	42bb      	cmp	r3, r7
 800aea4:	bfa8      	it	ge
 800aea6:	463b      	movge	r3, r7
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	bfc2      	ittt	gt
 800aeac:	eba8 0803 	subgt.w	r8, r8, r3
 800aeb0:	1aff      	subgt	r7, r7, r3
 800aeb2:	eba9 0903 	subgt.w	r9, r9, r3
 800aeb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	dd17      	ble.n	800aeec <_strtod_l+0x75c>
 800aebc:	4631      	mov	r1, r6
 800aebe:	461a      	mov	r2, r3
 800aec0:	4620      	mov	r0, r4
 800aec2:	f001 ff0f 	bl	800cce4 <__pow5mult>
 800aec6:	4606      	mov	r6, r0
 800aec8:	2800      	cmp	r0, #0
 800aeca:	f43f aead 	beq.w	800ac28 <_strtod_l+0x498>
 800aece:	4601      	mov	r1, r0
 800aed0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aed2:	4620      	mov	r0, r4
 800aed4:	f001 fe60 	bl	800cb98 <__multiply>
 800aed8:	900f      	str	r0, [sp, #60]	; 0x3c
 800aeda:	2800      	cmp	r0, #0
 800aedc:	f43f aea4 	beq.w	800ac28 <_strtod_l+0x498>
 800aee0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800aee2:	4620      	mov	r0, r4
 800aee4:	f001 fd3c 	bl	800c960 <_Bfree>
 800aee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aeea:	931e      	str	r3, [sp, #120]	; 0x78
 800aeec:	f1b8 0f00 	cmp.w	r8, #0
 800aef0:	f300 8091 	bgt.w	800b016 <_strtod_l+0x886>
 800aef4:	9b08      	ldr	r3, [sp, #32]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	dd08      	ble.n	800af0c <_strtod_l+0x77c>
 800aefa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aefc:	9907      	ldr	r1, [sp, #28]
 800aefe:	4620      	mov	r0, r4
 800af00:	f001 fef0 	bl	800cce4 <__pow5mult>
 800af04:	9007      	str	r0, [sp, #28]
 800af06:	2800      	cmp	r0, #0
 800af08:	f43f ae8e 	beq.w	800ac28 <_strtod_l+0x498>
 800af0c:	2f00      	cmp	r7, #0
 800af0e:	dd08      	ble.n	800af22 <_strtod_l+0x792>
 800af10:	9907      	ldr	r1, [sp, #28]
 800af12:	463a      	mov	r2, r7
 800af14:	4620      	mov	r0, r4
 800af16:	f001 ff3f 	bl	800cd98 <__lshift>
 800af1a:	9007      	str	r0, [sp, #28]
 800af1c:	2800      	cmp	r0, #0
 800af1e:	f43f ae83 	beq.w	800ac28 <_strtod_l+0x498>
 800af22:	f1b9 0f00 	cmp.w	r9, #0
 800af26:	dd08      	ble.n	800af3a <_strtod_l+0x7aa>
 800af28:	4631      	mov	r1, r6
 800af2a:	464a      	mov	r2, r9
 800af2c:	4620      	mov	r0, r4
 800af2e:	f001 ff33 	bl	800cd98 <__lshift>
 800af32:	4606      	mov	r6, r0
 800af34:	2800      	cmp	r0, #0
 800af36:	f43f ae77 	beq.w	800ac28 <_strtod_l+0x498>
 800af3a:	9a07      	ldr	r2, [sp, #28]
 800af3c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800af3e:	4620      	mov	r0, r4
 800af40:	f001 ffb2 	bl	800cea8 <__mdiff>
 800af44:	4605      	mov	r5, r0
 800af46:	2800      	cmp	r0, #0
 800af48:	f43f ae6e 	beq.w	800ac28 <_strtod_l+0x498>
 800af4c:	68c3      	ldr	r3, [r0, #12]
 800af4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800af50:	2300      	movs	r3, #0
 800af52:	60c3      	str	r3, [r0, #12]
 800af54:	4631      	mov	r1, r6
 800af56:	f001 ff8b 	bl	800ce70 <__mcmp>
 800af5a:	2800      	cmp	r0, #0
 800af5c:	da65      	bge.n	800b02a <_strtod_l+0x89a>
 800af5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af60:	ea53 030a 	orrs.w	r3, r3, sl
 800af64:	f040 8087 	bne.w	800b076 <_strtod_l+0x8e6>
 800af68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f040 8082 	bne.w	800b076 <_strtod_l+0x8e6>
 800af72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af76:	0d1b      	lsrs	r3, r3, #20
 800af78:	051b      	lsls	r3, r3, #20
 800af7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800af7e:	d97a      	bls.n	800b076 <_strtod_l+0x8e6>
 800af80:	696b      	ldr	r3, [r5, #20]
 800af82:	b913      	cbnz	r3, 800af8a <_strtod_l+0x7fa>
 800af84:	692b      	ldr	r3, [r5, #16]
 800af86:	2b01      	cmp	r3, #1
 800af88:	dd75      	ble.n	800b076 <_strtod_l+0x8e6>
 800af8a:	4629      	mov	r1, r5
 800af8c:	2201      	movs	r2, #1
 800af8e:	4620      	mov	r0, r4
 800af90:	f001 ff02 	bl	800cd98 <__lshift>
 800af94:	4631      	mov	r1, r6
 800af96:	4605      	mov	r5, r0
 800af98:	f001 ff6a 	bl	800ce70 <__mcmp>
 800af9c:	2800      	cmp	r0, #0
 800af9e:	dd6a      	ble.n	800b076 <_strtod_l+0x8e6>
 800afa0:	9904      	ldr	r1, [sp, #16]
 800afa2:	4a55      	ldr	r2, [pc, #340]	; (800b0f8 <_strtod_l+0x968>)
 800afa4:	465b      	mov	r3, fp
 800afa6:	2900      	cmp	r1, #0
 800afa8:	f000 8085 	beq.w	800b0b6 <_strtod_l+0x926>
 800afac:	ea02 010b 	and.w	r1, r2, fp
 800afb0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800afb4:	dc7f      	bgt.n	800b0b6 <_strtod_l+0x926>
 800afb6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800afba:	f77f aeaa 	ble.w	800ad12 <_strtod_l+0x582>
 800afbe:	4a4f      	ldr	r2, [pc, #316]	; (800b0fc <_strtod_l+0x96c>)
 800afc0:	2300      	movs	r3, #0
 800afc2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800afc6:	4650      	mov	r0, sl
 800afc8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800afcc:	4659      	mov	r1, fp
 800afce:	f7f5 fb1b 	bl	8000608 <__aeabi_dmul>
 800afd2:	460b      	mov	r3, r1
 800afd4:	4303      	orrs	r3, r0
 800afd6:	bf08      	it	eq
 800afd8:	2322      	moveq	r3, #34	; 0x22
 800afda:	4682      	mov	sl, r0
 800afdc:	468b      	mov	fp, r1
 800afde:	bf08      	it	eq
 800afe0:	6023      	streq	r3, [r4, #0]
 800afe2:	e62b      	b.n	800ac3c <_strtod_l+0x4ac>
 800afe4:	f04f 32ff 	mov.w	r2, #4294967295
 800afe8:	fa02 f303 	lsl.w	r3, r2, r3
 800afec:	ea03 0a0a 	and.w	sl, r3, sl
 800aff0:	e6de      	b.n	800adb0 <_strtod_l+0x620>
 800aff2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800aff6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800affa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800affe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b002:	fa01 f308 	lsl.w	r3, r1, r8
 800b006:	930c      	str	r3, [sp, #48]	; 0x30
 800b008:	9111      	str	r1, [sp, #68]	; 0x44
 800b00a:	e741      	b.n	800ae90 <_strtod_l+0x700>
 800b00c:	2300      	movs	r3, #0
 800b00e:	930c      	str	r3, [sp, #48]	; 0x30
 800b010:	2301      	movs	r3, #1
 800b012:	9311      	str	r3, [sp, #68]	; 0x44
 800b014:	e73c      	b.n	800ae90 <_strtod_l+0x700>
 800b016:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b018:	4642      	mov	r2, r8
 800b01a:	4620      	mov	r0, r4
 800b01c:	f001 febc 	bl	800cd98 <__lshift>
 800b020:	901e      	str	r0, [sp, #120]	; 0x78
 800b022:	2800      	cmp	r0, #0
 800b024:	f47f af66 	bne.w	800aef4 <_strtod_l+0x764>
 800b028:	e5fe      	b.n	800ac28 <_strtod_l+0x498>
 800b02a:	465f      	mov	r7, fp
 800b02c:	d16e      	bne.n	800b10c <_strtod_l+0x97c>
 800b02e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b030:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b034:	b342      	cbz	r2, 800b088 <_strtod_l+0x8f8>
 800b036:	4a32      	ldr	r2, [pc, #200]	; (800b100 <_strtod_l+0x970>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d128      	bne.n	800b08e <_strtod_l+0x8fe>
 800b03c:	9b04      	ldr	r3, [sp, #16]
 800b03e:	4650      	mov	r0, sl
 800b040:	b1eb      	cbz	r3, 800b07e <_strtod_l+0x8ee>
 800b042:	4a2d      	ldr	r2, [pc, #180]	; (800b0f8 <_strtod_l+0x968>)
 800b044:	403a      	ands	r2, r7
 800b046:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b04a:	f04f 31ff 	mov.w	r1, #4294967295
 800b04e:	d819      	bhi.n	800b084 <_strtod_l+0x8f4>
 800b050:	0d12      	lsrs	r2, r2, #20
 800b052:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b056:	fa01 f303 	lsl.w	r3, r1, r3
 800b05a:	4298      	cmp	r0, r3
 800b05c:	d117      	bne.n	800b08e <_strtod_l+0x8fe>
 800b05e:	4b29      	ldr	r3, [pc, #164]	; (800b104 <_strtod_l+0x974>)
 800b060:	429f      	cmp	r7, r3
 800b062:	d102      	bne.n	800b06a <_strtod_l+0x8da>
 800b064:	3001      	adds	r0, #1
 800b066:	f43f addf 	beq.w	800ac28 <_strtod_l+0x498>
 800b06a:	4b23      	ldr	r3, [pc, #140]	; (800b0f8 <_strtod_l+0x968>)
 800b06c:	403b      	ands	r3, r7
 800b06e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b072:	f04f 0a00 	mov.w	sl, #0
 800b076:	9b04      	ldr	r3, [sp, #16]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1a0      	bne.n	800afbe <_strtod_l+0x82e>
 800b07c:	e5de      	b.n	800ac3c <_strtod_l+0x4ac>
 800b07e:	f04f 33ff 	mov.w	r3, #4294967295
 800b082:	e7ea      	b.n	800b05a <_strtod_l+0x8ca>
 800b084:	460b      	mov	r3, r1
 800b086:	e7e8      	b.n	800b05a <_strtod_l+0x8ca>
 800b088:	ea53 030a 	orrs.w	r3, r3, sl
 800b08c:	d088      	beq.n	800afa0 <_strtod_l+0x810>
 800b08e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b090:	b1db      	cbz	r3, 800b0ca <_strtod_l+0x93a>
 800b092:	423b      	tst	r3, r7
 800b094:	d0ef      	beq.n	800b076 <_strtod_l+0x8e6>
 800b096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b098:	9a04      	ldr	r2, [sp, #16]
 800b09a:	4650      	mov	r0, sl
 800b09c:	4659      	mov	r1, fp
 800b09e:	b1c3      	cbz	r3, 800b0d2 <_strtod_l+0x942>
 800b0a0:	f7ff fb57 	bl	800a752 <sulp>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b0ac:	f7f5 f8f6 	bl	800029c <__adddf3>
 800b0b0:	4682      	mov	sl, r0
 800b0b2:	468b      	mov	fp, r1
 800b0b4:	e7df      	b.n	800b076 <_strtod_l+0x8e6>
 800b0b6:	4013      	ands	r3, r2
 800b0b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b0bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b0c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b0c4:	f04f 3aff 	mov.w	sl, #4294967295
 800b0c8:	e7d5      	b.n	800b076 <_strtod_l+0x8e6>
 800b0ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0cc:	ea13 0f0a 	tst.w	r3, sl
 800b0d0:	e7e0      	b.n	800b094 <_strtod_l+0x904>
 800b0d2:	f7ff fb3e 	bl	800a752 <sulp>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	460b      	mov	r3, r1
 800b0da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b0de:	f7f5 f8db 	bl	8000298 <__aeabi_dsub>
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	4682      	mov	sl, r0
 800b0e8:	468b      	mov	fp, r1
 800b0ea:	f7f5 fcf5 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	d0c1      	beq.n	800b076 <_strtod_l+0x8e6>
 800b0f2:	e60e      	b.n	800ad12 <_strtod_l+0x582>
 800b0f4:	fffffc02 	.word	0xfffffc02
 800b0f8:	7ff00000 	.word	0x7ff00000
 800b0fc:	39500000 	.word	0x39500000
 800b100:	000fffff 	.word	0x000fffff
 800b104:	7fefffff 	.word	0x7fefffff
 800b108:	0800e5c0 	.word	0x0800e5c0
 800b10c:	4631      	mov	r1, r6
 800b10e:	4628      	mov	r0, r5
 800b110:	f002 f82a 	bl	800d168 <__ratio>
 800b114:	ec59 8b10 	vmov	r8, r9, d0
 800b118:	ee10 0a10 	vmov	r0, s0
 800b11c:	2200      	movs	r2, #0
 800b11e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b122:	4649      	mov	r1, r9
 800b124:	f7f5 fcec 	bl	8000b00 <__aeabi_dcmple>
 800b128:	2800      	cmp	r0, #0
 800b12a:	d07c      	beq.n	800b226 <_strtod_l+0xa96>
 800b12c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d04c      	beq.n	800b1cc <_strtod_l+0xa3c>
 800b132:	4b95      	ldr	r3, [pc, #596]	; (800b388 <_strtod_l+0xbf8>)
 800b134:	2200      	movs	r2, #0
 800b136:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b13a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b388 <_strtod_l+0xbf8>
 800b13e:	f04f 0800 	mov.w	r8, #0
 800b142:	4b92      	ldr	r3, [pc, #584]	; (800b38c <_strtod_l+0xbfc>)
 800b144:	403b      	ands	r3, r7
 800b146:	9311      	str	r3, [sp, #68]	; 0x44
 800b148:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b14a:	4b91      	ldr	r3, [pc, #580]	; (800b390 <_strtod_l+0xc00>)
 800b14c:	429a      	cmp	r2, r3
 800b14e:	f040 80b2 	bne.w	800b2b6 <_strtod_l+0xb26>
 800b152:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b156:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b15a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b15e:	ec4b ab10 	vmov	d0, sl, fp
 800b162:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b166:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b16a:	f001 ff25 	bl	800cfb8 <__ulp>
 800b16e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b172:	ec53 2b10 	vmov	r2, r3, d0
 800b176:	f7f5 fa47 	bl	8000608 <__aeabi_dmul>
 800b17a:	4652      	mov	r2, sl
 800b17c:	465b      	mov	r3, fp
 800b17e:	f7f5 f88d 	bl	800029c <__adddf3>
 800b182:	460b      	mov	r3, r1
 800b184:	4981      	ldr	r1, [pc, #516]	; (800b38c <_strtod_l+0xbfc>)
 800b186:	4a83      	ldr	r2, [pc, #524]	; (800b394 <_strtod_l+0xc04>)
 800b188:	4019      	ands	r1, r3
 800b18a:	4291      	cmp	r1, r2
 800b18c:	4682      	mov	sl, r0
 800b18e:	d95e      	bls.n	800b24e <_strtod_l+0xabe>
 800b190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b192:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b196:	4293      	cmp	r3, r2
 800b198:	d103      	bne.n	800b1a2 <_strtod_l+0xa12>
 800b19a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b19c:	3301      	adds	r3, #1
 800b19e:	f43f ad43 	beq.w	800ac28 <_strtod_l+0x498>
 800b1a2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b3a0 <_strtod_l+0xc10>
 800b1a6:	f04f 3aff 	mov.w	sl, #4294967295
 800b1aa:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f001 fbd7 	bl	800c960 <_Bfree>
 800b1b2:	9907      	ldr	r1, [sp, #28]
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f001 fbd3 	bl	800c960 <_Bfree>
 800b1ba:	4631      	mov	r1, r6
 800b1bc:	4620      	mov	r0, r4
 800b1be:	f001 fbcf 	bl	800c960 <_Bfree>
 800b1c2:	4629      	mov	r1, r5
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f001 fbcb 	bl	800c960 <_Bfree>
 800b1ca:	e613      	b.n	800adf4 <_strtod_l+0x664>
 800b1cc:	f1ba 0f00 	cmp.w	sl, #0
 800b1d0:	d11b      	bne.n	800b20a <_strtod_l+0xa7a>
 800b1d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1d6:	b9f3      	cbnz	r3, 800b216 <_strtod_l+0xa86>
 800b1d8:	4b6b      	ldr	r3, [pc, #428]	; (800b388 <_strtod_l+0xbf8>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	4640      	mov	r0, r8
 800b1de:	4649      	mov	r1, r9
 800b1e0:	f7f5 fc84 	bl	8000aec <__aeabi_dcmplt>
 800b1e4:	b9d0      	cbnz	r0, 800b21c <_strtod_l+0xa8c>
 800b1e6:	4640      	mov	r0, r8
 800b1e8:	4649      	mov	r1, r9
 800b1ea:	4b6b      	ldr	r3, [pc, #428]	; (800b398 <_strtod_l+0xc08>)
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f7f5 fa0b 	bl	8000608 <__aeabi_dmul>
 800b1f2:	4680      	mov	r8, r0
 800b1f4:	4689      	mov	r9, r1
 800b1f6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b1fa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b1fe:	931b      	str	r3, [sp, #108]	; 0x6c
 800b200:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b204:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b208:	e79b      	b.n	800b142 <_strtod_l+0x9b2>
 800b20a:	f1ba 0f01 	cmp.w	sl, #1
 800b20e:	d102      	bne.n	800b216 <_strtod_l+0xa86>
 800b210:	2f00      	cmp	r7, #0
 800b212:	f43f ad7e 	beq.w	800ad12 <_strtod_l+0x582>
 800b216:	4b61      	ldr	r3, [pc, #388]	; (800b39c <_strtod_l+0xc0c>)
 800b218:	2200      	movs	r2, #0
 800b21a:	e78c      	b.n	800b136 <_strtod_l+0x9a6>
 800b21c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b398 <_strtod_l+0xc08>
 800b220:	f04f 0800 	mov.w	r8, #0
 800b224:	e7e7      	b.n	800b1f6 <_strtod_l+0xa66>
 800b226:	4b5c      	ldr	r3, [pc, #368]	; (800b398 <_strtod_l+0xc08>)
 800b228:	4640      	mov	r0, r8
 800b22a:	4649      	mov	r1, r9
 800b22c:	2200      	movs	r2, #0
 800b22e:	f7f5 f9eb 	bl	8000608 <__aeabi_dmul>
 800b232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b234:	4680      	mov	r8, r0
 800b236:	4689      	mov	r9, r1
 800b238:	b933      	cbnz	r3, 800b248 <_strtod_l+0xab8>
 800b23a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b23e:	9012      	str	r0, [sp, #72]	; 0x48
 800b240:	9313      	str	r3, [sp, #76]	; 0x4c
 800b242:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b246:	e7dd      	b.n	800b204 <_strtod_l+0xa74>
 800b248:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b24c:	e7f9      	b.n	800b242 <_strtod_l+0xab2>
 800b24e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b252:	9b04      	ldr	r3, [sp, #16]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1a8      	bne.n	800b1aa <_strtod_l+0xa1a>
 800b258:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b25c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b25e:	0d1b      	lsrs	r3, r3, #20
 800b260:	051b      	lsls	r3, r3, #20
 800b262:	429a      	cmp	r2, r3
 800b264:	d1a1      	bne.n	800b1aa <_strtod_l+0xa1a>
 800b266:	4640      	mov	r0, r8
 800b268:	4649      	mov	r1, r9
 800b26a:	f7f5 fd2d 	bl	8000cc8 <__aeabi_d2lz>
 800b26e:	f7f5 f99d 	bl	80005ac <__aeabi_l2d>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	4640      	mov	r0, r8
 800b278:	4649      	mov	r1, r9
 800b27a:	f7f5 f80d 	bl	8000298 <__aeabi_dsub>
 800b27e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b280:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b284:	ea43 030a 	orr.w	r3, r3, sl
 800b288:	4313      	orrs	r3, r2
 800b28a:	4680      	mov	r8, r0
 800b28c:	4689      	mov	r9, r1
 800b28e:	d053      	beq.n	800b338 <_strtod_l+0xba8>
 800b290:	a335      	add	r3, pc, #212	; (adr r3, 800b368 <_strtod_l+0xbd8>)
 800b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b296:	f7f5 fc29 	bl	8000aec <__aeabi_dcmplt>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	f47f acce 	bne.w	800ac3c <_strtod_l+0x4ac>
 800b2a0:	a333      	add	r3, pc, #204	; (adr r3, 800b370 <_strtod_l+0xbe0>)
 800b2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a6:	4640      	mov	r0, r8
 800b2a8:	4649      	mov	r1, r9
 800b2aa:	f7f5 fc3d 	bl	8000b28 <__aeabi_dcmpgt>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	f43f af7b 	beq.w	800b1aa <_strtod_l+0xa1a>
 800b2b4:	e4c2      	b.n	800ac3c <_strtod_l+0x4ac>
 800b2b6:	9b04      	ldr	r3, [sp, #16]
 800b2b8:	b333      	cbz	r3, 800b308 <_strtod_l+0xb78>
 800b2ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b2c0:	d822      	bhi.n	800b308 <_strtod_l+0xb78>
 800b2c2:	a32d      	add	r3, pc, #180	; (adr r3, 800b378 <_strtod_l+0xbe8>)
 800b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c8:	4640      	mov	r0, r8
 800b2ca:	4649      	mov	r1, r9
 800b2cc:	f7f5 fc18 	bl	8000b00 <__aeabi_dcmple>
 800b2d0:	b1a0      	cbz	r0, 800b2fc <_strtod_l+0xb6c>
 800b2d2:	4649      	mov	r1, r9
 800b2d4:	4640      	mov	r0, r8
 800b2d6:	f7f5 fc6f 	bl	8000bb8 <__aeabi_d2uiz>
 800b2da:	2801      	cmp	r0, #1
 800b2dc:	bf38      	it	cc
 800b2de:	2001      	movcc	r0, #1
 800b2e0:	f7f5 f918 	bl	8000514 <__aeabi_ui2d>
 800b2e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2e6:	4680      	mov	r8, r0
 800b2e8:	4689      	mov	r9, r1
 800b2ea:	bb13      	cbnz	r3, 800b332 <_strtod_l+0xba2>
 800b2ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2f0:	9014      	str	r0, [sp, #80]	; 0x50
 800b2f2:	9315      	str	r3, [sp, #84]	; 0x54
 800b2f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b2f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b2fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b300:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b304:	1a9b      	subs	r3, r3, r2
 800b306:	930d      	str	r3, [sp, #52]	; 0x34
 800b308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b30c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b310:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b314:	f001 fe50 	bl	800cfb8 <__ulp>
 800b318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b31c:	ec53 2b10 	vmov	r2, r3, d0
 800b320:	f7f5 f972 	bl	8000608 <__aeabi_dmul>
 800b324:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b328:	f7f4 ffb8 	bl	800029c <__adddf3>
 800b32c:	4682      	mov	sl, r0
 800b32e:	468b      	mov	fp, r1
 800b330:	e78f      	b.n	800b252 <_strtod_l+0xac2>
 800b332:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b336:	e7dd      	b.n	800b2f4 <_strtod_l+0xb64>
 800b338:	a311      	add	r3, pc, #68	; (adr r3, 800b380 <_strtod_l+0xbf0>)
 800b33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33e:	f7f5 fbd5 	bl	8000aec <__aeabi_dcmplt>
 800b342:	e7b4      	b.n	800b2ae <_strtod_l+0xb1e>
 800b344:	2300      	movs	r3, #0
 800b346:	930e      	str	r3, [sp, #56]	; 0x38
 800b348:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b34a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b34c:	6013      	str	r3, [r2, #0]
 800b34e:	f7ff ba65 	b.w	800a81c <_strtod_l+0x8c>
 800b352:	2b65      	cmp	r3, #101	; 0x65
 800b354:	f43f ab5d 	beq.w	800aa12 <_strtod_l+0x282>
 800b358:	2b45      	cmp	r3, #69	; 0x45
 800b35a:	f43f ab5a 	beq.w	800aa12 <_strtod_l+0x282>
 800b35e:	2201      	movs	r2, #1
 800b360:	f7ff bb92 	b.w	800aa88 <_strtod_l+0x2f8>
 800b364:	f3af 8000 	nop.w
 800b368:	94a03595 	.word	0x94a03595
 800b36c:	3fdfffff 	.word	0x3fdfffff
 800b370:	35afe535 	.word	0x35afe535
 800b374:	3fe00000 	.word	0x3fe00000
 800b378:	ffc00000 	.word	0xffc00000
 800b37c:	41dfffff 	.word	0x41dfffff
 800b380:	94a03595 	.word	0x94a03595
 800b384:	3fcfffff 	.word	0x3fcfffff
 800b388:	3ff00000 	.word	0x3ff00000
 800b38c:	7ff00000 	.word	0x7ff00000
 800b390:	7fe00000 	.word	0x7fe00000
 800b394:	7c9fffff 	.word	0x7c9fffff
 800b398:	3fe00000 	.word	0x3fe00000
 800b39c:	bff00000 	.word	0xbff00000
 800b3a0:	7fefffff 	.word	0x7fefffff

0800b3a4 <strtod>:
 800b3a4:	460a      	mov	r2, r1
 800b3a6:	4601      	mov	r1, r0
 800b3a8:	4802      	ldr	r0, [pc, #8]	; (800b3b4 <strtod+0x10>)
 800b3aa:	4b03      	ldr	r3, [pc, #12]	; (800b3b8 <strtod+0x14>)
 800b3ac:	6800      	ldr	r0, [r0, #0]
 800b3ae:	f7ff b9ef 	b.w	800a790 <_strtod_l>
 800b3b2:	bf00      	nop
 800b3b4:	20000014 	.word	0x20000014
 800b3b8:	2000007c 	.word	0x2000007c

0800b3bc <strtok>:
 800b3bc:	4b16      	ldr	r3, [pc, #88]	; (800b418 <strtok+0x5c>)
 800b3be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3c0:	681e      	ldr	r6, [r3, #0]
 800b3c2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b3c4:	4605      	mov	r5, r0
 800b3c6:	b9fc      	cbnz	r4, 800b408 <strtok+0x4c>
 800b3c8:	2050      	movs	r0, #80	; 0x50
 800b3ca:	9101      	str	r1, [sp, #4]
 800b3cc:	f001 fa6e 	bl	800c8ac <malloc>
 800b3d0:	9901      	ldr	r1, [sp, #4]
 800b3d2:	65b0      	str	r0, [r6, #88]	; 0x58
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	b920      	cbnz	r0, 800b3e2 <strtok+0x26>
 800b3d8:	4b10      	ldr	r3, [pc, #64]	; (800b41c <strtok+0x60>)
 800b3da:	4811      	ldr	r0, [pc, #68]	; (800b420 <strtok+0x64>)
 800b3dc:	2157      	movs	r1, #87	; 0x57
 800b3de:	f000 f849 	bl	800b474 <__assert_func>
 800b3e2:	e9c0 4400 	strd	r4, r4, [r0]
 800b3e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b3ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b3ee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b3f2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b3f6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b3fa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b3fe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b402:	6184      	str	r4, [r0, #24]
 800b404:	7704      	strb	r4, [r0, #28]
 800b406:	6244      	str	r4, [r0, #36]	; 0x24
 800b408:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b40a:	2301      	movs	r3, #1
 800b40c:	4628      	mov	r0, r5
 800b40e:	b002      	add	sp, #8
 800b410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b414:	f000 b806 	b.w	800b424 <__strtok_r>
 800b418:	20000014 	.word	0x20000014
 800b41c:	0800e5e8 	.word	0x0800e5e8
 800b420:	0800e5ff 	.word	0x0800e5ff

0800b424 <__strtok_r>:
 800b424:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b426:	b908      	cbnz	r0, 800b42c <__strtok_r+0x8>
 800b428:	6810      	ldr	r0, [r2, #0]
 800b42a:	b188      	cbz	r0, 800b450 <__strtok_r+0x2c>
 800b42c:	4604      	mov	r4, r0
 800b42e:	4620      	mov	r0, r4
 800b430:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b434:	460f      	mov	r7, r1
 800b436:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b43a:	b91e      	cbnz	r6, 800b444 <__strtok_r+0x20>
 800b43c:	b965      	cbnz	r5, 800b458 <__strtok_r+0x34>
 800b43e:	6015      	str	r5, [r2, #0]
 800b440:	4628      	mov	r0, r5
 800b442:	e005      	b.n	800b450 <__strtok_r+0x2c>
 800b444:	42b5      	cmp	r5, r6
 800b446:	d1f6      	bne.n	800b436 <__strtok_r+0x12>
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1f0      	bne.n	800b42e <__strtok_r+0xa>
 800b44c:	6014      	str	r4, [r2, #0]
 800b44e:	7003      	strb	r3, [r0, #0]
 800b450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b452:	461c      	mov	r4, r3
 800b454:	e00c      	b.n	800b470 <__strtok_r+0x4c>
 800b456:	b915      	cbnz	r5, 800b45e <__strtok_r+0x3a>
 800b458:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b45c:	460e      	mov	r6, r1
 800b45e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b462:	42ab      	cmp	r3, r5
 800b464:	d1f7      	bne.n	800b456 <__strtok_r+0x32>
 800b466:	2b00      	cmp	r3, #0
 800b468:	d0f3      	beq.n	800b452 <__strtok_r+0x2e>
 800b46a:	2300      	movs	r3, #0
 800b46c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b470:	6014      	str	r4, [r2, #0]
 800b472:	e7ed      	b.n	800b450 <__strtok_r+0x2c>

0800b474 <__assert_func>:
 800b474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b476:	4614      	mov	r4, r2
 800b478:	461a      	mov	r2, r3
 800b47a:	4b09      	ldr	r3, [pc, #36]	; (800b4a0 <__assert_func+0x2c>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4605      	mov	r5, r0
 800b480:	68d8      	ldr	r0, [r3, #12]
 800b482:	b14c      	cbz	r4, 800b498 <__assert_func+0x24>
 800b484:	4b07      	ldr	r3, [pc, #28]	; (800b4a4 <__assert_func+0x30>)
 800b486:	9100      	str	r1, [sp, #0]
 800b488:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b48c:	4906      	ldr	r1, [pc, #24]	; (800b4a8 <__assert_func+0x34>)
 800b48e:	462b      	mov	r3, r5
 800b490:	f000 fe86 	bl	800c1a0 <fiprintf>
 800b494:	f002 fb48 	bl	800db28 <abort>
 800b498:	4b04      	ldr	r3, [pc, #16]	; (800b4ac <__assert_func+0x38>)
 800b49a:	461c      	mov	r4, r3
 800b49c:	e7f3      	b.n	800b486 <__assert_func+0x12>
 800b49e:	bf00      	nop
 800b4a0:	20000014 	.word	0x20000014
 800b4a4:	0800e660 	.word	0x0800e660
 800b4a8:	0800e66d 	.word	0x0800e66d
 800b4ac:	0800e69b 	.word	0x0800e69b

0800b4b0 <quorem>:
 800b4b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b4:	6903      	ldr	r3, [r0, #16]
 800b4b6:	690c      	ldr	r4, [r1, #16]
 800b4b8:	42a3      	cmp	r3, r4
 800b4ba:	4607      	mov	r7, r0
 800b4bc:	f2c0 8081 	blt.w	800b5c2 <quorem+0x112>
 800b4c0:	3c01      	subs	r4, #1
 800b4c2:	f101 0814 	add.w	r8, r1, #20
 800b4c6:	f100 0514 	add.w	r5, r0, #20
 800b4ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4ce:	9301      	str	r3, [sp, #4]
 800b4d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b4d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b4e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b4e8:	d331      	bcc.n	800b54e <quorem+0x9e>
 800b4ea:	f04f 0e00 	mov.w	lr, #0
 800b4ee:	4640      	mov	r0, r8
 800b4f0:	46ac      	mov	ip, r5
 800b4f2:	46f2      	mov	sl, lr
 800b4f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b4f8:	b293      	uxth	r3, r2
 800b4fa:	fb06 e303 	mla	r3, r6, r3, lr
 800b4fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b502:	b29b      	uxth	r3, r3
 800b504:	ebaa 0303 	sub.w	r3, sl, r3
 800b508:	0c12      	lsrs	r2, r2, #16
 800b50a:	f8dc a000 	ldr.w	sl, [ip]
 800b50e:	fb06 e202 	mla	r2, r6, r2, lr
 800b512:	fa13 f38a 	uxtah	r3, r3, sl
 800b516:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b51a:	fa1f fa82 	uxth.w	sl, r2
 800b51e:	f8dc 2000 	ldr.w	r2, [ip]
 800b522:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b526:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b530:	4581      	cmp	r9, r0
 800b532:	f84c 3b04 	str.w	r3, [ip], #4
 800b536:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b53a:	d2db      	bcs.n	800b4f4 <quorem+0x44>
 800b53c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b540:	b92b      	cbnz	r3, 800b54e <quorem+0x9e>
 800b542:	9b01      	ldr	r3, [sp, #4]
 800b544:	3b04      	subs	r3, #4
 800b546:	429d      	cmp	r5, r3
 800b548:	461a      	mov	r2, r3
 800b54a:	d32e      	bcc.n	800b5aa <quorem+0xfa>
 800b54c:	613c      	str	r4, [r7, #16]
 800b54e:	4638      	mov	r0, r7
 800b550:	f001 fc8e 	bl	800ce70 <__mcmp>
 800b554:	2800      	cmp	r0, #0
 800b556:	db24      	blt.n	800b5a2 <quorem+0xf2>
 800b558:	3601      	adds	r6, #1
 800b55a:	4628      	mov	r0, r5
 800b55c:	f04f 0c00 	mov.w	ip, #0
 800b560:	f858 2b04 	ldr.w	r2, [r8], #4
 800b564:	f8d0 e000 	ldr.w	lr, [r0]
 800b568:	b293      	uxth	r3, r2
 800b56a:	ebac 0303 	sub.w	r3, ip, r3
 800b56e:	0c12      	lsrs	r2, r2, #16
 800b570:	fa13 f38e 	uxtah	r3, r3, lr
 800b574:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b578:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b582:	45c1      	cmp	r9, r8
 800b584:	f840 3b04 	str.w	r3, [r0], #4
 800b588:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b58c:	d2e8      	bcs.n	800b560 <quorem+0xb0>
 800b58e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b592:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b596:	b922      	cbnz	r2, 800b5a2 <quorem+0xf2>
 800b598:	3b04      	subs	r3, #4
 800b59a:	429d      	cmp	r5, r3
 800b59c:	461a      	mov	r2, r3
 800b59e:	d30a      	bcc.n	800b5b6 <quorem+0x106>
 800b5a0:	613c      	str	r4, [r7, #16]
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	b003      	add	sp, #12
 800b5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5aa:	6812      	ldr	r2, [r2, #0]
 800b5ac:	3b04      	subs	r3, #4
 800b5ae:	2a00      	cmp	r2, #0
 800b5b0:	d1cc      	bne.n	800b54c <quorem+0x9c>
 800b5b2:	3c01      	subs	r4, #1
 800b5b4:	e7c7      	b.n	800b546 <quorem+0x96>
 800b5b6:	6812      	ldr	r2, [r2, #0]
 800b5b8:	3b04      	subs	r3, #4
 800b5ba:	2a00      	cmp	r2, #0
 800b5bc:	d1f0      	bne.n	800b5a0 <quorem+0xf0>
 800b5be:	3c01      	subs	r4, #1
 800b5c0:	e7eb      	b.n	800b59a <quorem+0xea>
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	e7ee      	b.n	800b5a4 <quorem+0xf4>
	...

0800b5c8 <_dtoa_r>:
 800b5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5cc:	ed2d 8b02 	vpush	{d8}
 800b5d0:	ec57 6b10 	vmov	r6, r7, d0
 800b5d4:	b095      	sub	sp, #84	; 0x54
 800b5d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b5d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b5dc:	9105      	str	r1, [sp, #20]
 800b5de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b5e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5e8:	b975      	cbnz	r5, 800b608 <_dtoa_r+0x40>
 800b5ea:	2010      	movs	r0, #16
 800b5ec:	f001 f95e 	bl	800c8ac <malloc>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	6260      	str	r0, [r4, #36]	; 0x24
 800b5f4:	b920      	cbnz	r0, 800b600 <_dtoa_r+0x38>
 800b5f6:	4bb2      	ldr	r3, [pc, #712]	; (800b8c0 <_dtoa_r+0x2f8>)
 800b5f8:	21ea      	movs	r1, #234	; 0xea
 800b5fa:	48b2      	ldr	r0, [pc, #712]	; (800b8c4 <_dtoa_r+0x2fc>)
 800b5fc:	f7ff ff3a 	bl	800b474 <__assert_func>
 800b600:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b604:	6005      	str	r5, [r0, #0]
 800b606:	60c5      	str	r5, [r0, #12]
 800b608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b60a:	6819      	ldr	r1, [r3, #0]
 800b60c:	b151      	cbz	r1, 800b624 <_dtoa_r+0x5c>
 800b60e:	685a      	ldr	r2, [r3, #4]
 800b610:	604a      	str	r2, [r1, #4]
 800b612:	2301      	movs	r3, #1
 800b614:	4093      	lsls	r3, r2
 800b616:	608b      	str	r3, [r1, #8]
 800b618:	4620      	mov	r0, r4
 800b61a:	f001 f9a1 	bl	800c960 <_Bfree>
 800b61e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b620:	2200      	movs	r2, #0
 800b622:	601a      	str	r2, [r3, #0]
 800b624:	1e3b      	subs	r3, r7, #0
 800b626:	bfb9      	ittee	lt
 800b628:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b62c:	9303      	strlt	r3, [sp, #12]
 800b62e:	2300      	movge	r3, #0
 800b630:	f8c8 3000 	strge.w	r3, [r8]
 800b634:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b638:	4ba3      	ldr	r3, [pc, #652]	; (800b8c8 <_dtoa_r+0x300>)
 800b63a:	bfbc      	itt	lt
 800b63c:	2201      	movlt	r2, #1
 800b63e:	f8c8 2000 	strlt.w	r2, [r8]
 800b642:	ea33 0309 	bics.w	r3, r3, r9
 800b646:	d11b      	bne.n	800b680 <_dtoa_r+0xb8>
 800b648:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b64a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b64e:	6013      	str	r3, [r2, #0]
 800b650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b654:	4333      	orrs	r3, r6
 800b656:	f000 857a 	beq.w	800c14e <_dtoa_r+0xb86>
 800b65a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b65c:	b963      	cbnz	r3, 800b678 <_dtoa_r+0xb0>
 800b65e:	4b9b      	ldr	r3, [pc, #620]	; (800b8cc <_dtoa_r+0x304>)
 800b660:	e024      	b.n	800b6ac <_dtoa_r+0xe4>
 800b662:	4b9b      	ldr	r3, [pc, #620]	; (800b8d0 <_dtoa_r+0x308>)
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	3308      	adds	r3, #8
 800b668:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b66a:	6013      	str	r3, [r2, #0]
 800b66c:	9800      	ldr	r0, [sp, #0]
 800b66e:	b015      	add	sp, #84	; 0x54
 800b670:	ecbd 8b02 	vpop	{d8}
 800b674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b678:	4b94      	ldr	r3, [pc, #592]	; (800b8cc <_dtoa_r+0x304>)
 800b67a:	9300      	str	r3, [sp, #0]
 800b67c:	3303      	adds	r3, #3
 800b67e:	e7f3      	b.n	800b668 <_dtoa_r+0xa0>
 800b680:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b684:	2200      	movs	r2, #0
 800b686:	ec51 0b17 	vmov	r0, r1, d7
 800b68a:	2300      	movs	r3, #0
 800b68c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b690:	f7f5 fa22 	bl	8000ad8 <__aeabi_dcmpeq>
 800b694:	4680      	mov	r8, r0
 800b696:	b158      	cbz	r0, 800b6b0 <_dtoa_r+0xe8>
 800b698:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b69a:	2301      	movs	r3, #1
 800b69c:	6013      	str	r3, [r2, #0]
 800b69e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	f000 8551 	beq.w	800c148 <_dtoa_r+0xb80>
 800b6a6:	488b      	ldr	r0, [pc, #556]	; (800b8d4 <_dtoa_r+0x30c>)
 800b6a8:	6018      	str	r0, [r3, #0]
 800b6aa:	1e43      	subs	r3, r0, #1
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	e7dd      	b.n	800b66c <_dtoa_r+0xa4>
 800b6b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b6b4:	aa12      	add	r2, sp, #72	; 0x48
 800b6b6:	a913      	add	r1, sp, #76	; 0x4c
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f001 fcf9 	bl	800d0b0 <__d2b>
 800b6be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b6c2:	4683      	mov	fp, r0
 800b6c4:	2d00      	cmp	r5, #0
 800b6c6:	d07c      	beq.n	800b7c2 <_dtoa_r+0x1fa>
 800b6c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b6ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b6d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b6da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b6de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b6e2:	4b7d      	ldr	r3, [pc, #500]	; (800b8d8 <_dtoa_r+0x310>)
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	4639      	mov	r1, r7
 800b6ea:	f7f4 fdd5 	bl	8000298 <__aeabi_dsub>
 800b6ee:	a36e      	add	r3, pc, #440	; (adr r3, 800b8a8 <_dtoa_r+0x2e0>)
 800b6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f4:	f7f4 ff88 	bl	8000608 <__aeabi_dmul>
 800b6f8:	a36d      	add	r3, pc, #436	; (adr r3, 800b8b0 <_dtoa_r+0x2e8>)
 800b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fe:	f7f4 fdcd 	bl	800029c <__adddf3>
 800b702:	4606      	mov	r6, r0
 800b704:	4628      	mov	r0, r5
 800b706:	460f      	mov	r7, r1
 800b708:	f7f4 ff14 	bl	8000534 <__aeabi_i2d>
 800b70c:	a36a      	add	r3, pc, #424	; (adr r3, 800b8b8 <_dtoa_r+0x2f0>)
 800b70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b712:	f7f4 ff79 	bl	8000608 <__aeabi_dmul>
 800b716:	4602      	mov	r2, r0
 800b718:	460b      	mov	r3, r1
 800b71a:	4630      	mov	r0, r6
 800b71c:	4639      	mov	r1, r7
 800b71e:	f7f4 fdbd 	bl	800029c <__adddf3>
 800b722:	4606      	mov	r6, r0
 800b724:	460f      	mov	r7, r1
 800b726:	f7f5 fa1f 	bl	8000b68 <__aeabi_d2iz>
 800b72a:	2200      	movs	r2, #0
 800b72c:	4682      	mov	sl, r0
 800b72e:	2300      	movs	r3, #0
 800b730:	4630      	mov	r0, r6
 800b732:	4639      	mov	r1, r7
 800b734:	f7f5 f9da 	bl	8000aec <__aeabi_dcmplt>
 800b738:	b148      	cbz	r0, 800b74e <_dtoa_r+0x186>
 800b73a:	4650      	mov	r0, sl
 800b73c:	f7f4 fefa 	bl	8000534 <__aeabi_i2d>
 800b740:	4632      	mov	r2, r6
 800b742:	463b      	mov	r3, r7
 800b744:	f7f5 f9c8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b748:	b908      	cbnz	r0, 800b74e <_dtoa_r+0x186>
 800b74a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b74e:	f1ba 0f16 	cmp.w	sl, #22
 800b752:	d854      	bhi.n	800b7fe <_dtoa_r+0x236>
 800b754:	4b61      	ldr	r3, [pc, #388]	; (800b8dc <_dtoa_r+0x314>)
 800b756:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b762:	f7f5 f9c3 	bl	8000aec <__aeabi_dcmplt>
 800b766:	2800      	cmp	r0, #0
 800b768:	d04b      	beq.n	800b802 <_dtoa_r+0x23a>
 800b76a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b76e:	2300      	movs	r3, #0
 800b770:	930e      	str	r3, [sp, #56]	; 0x38
 800b772:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b774:	1b5d      	subs	r5, r3, r5
 800b776:	1e6b      	subs	r3, r5, #1
 800b778:	9304      	str	r3, [sp, #16]
 800b77a:	bf43      	ittte	mi
 800b77c:	2300      	movmi	r3, #0
 800b77e:	f1c5 0801 	rsbmi	r8, r5, #1
 800b782:	9304      	strmi	r3, [sp, #16]
 800b784:	f04f 0800 	movpl.w	r8, #0
 800b788:	f1ba 0f00 	cmp.w	sl, #0
 800b78c:	db3b      	blt.n	800b806 <_dtoa_r+0x23e>
 800b78e:	9b04      	ldr	r3, [sp, #16]
 800b790:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b794:	4453      	add	r3, sl
 800b796:	9304      	str	r3, [sp, #16]
 800b798:	2300      	movs	r3, #0
 800b79a:	9306      	str	r3, [sp, #24]
 800b79c:	9b05      	ldr	r3, [sp, #20]
 800b79e:	2b09      	cmp	r3, #9
 800b7a0:	d869      	bhi.n	800b876 <_dtoa_r+0x2ae>
 800b7a2:	2b05      	cmp	r3, #5
 800b7a4:	bfc4      	itt	gt
 800b7a6:	3b04      	subgt	r3, #4
 800b7a8:	9305      	strgt	r3, [sp, #20]
 800b7aa:	9b05      	ldr	r3, [sp, #20]
 800b7ac:	f1a3 0302 	sub.w	r3, r3, #2
 800b7b0:	bfcc      	ite	gt
 800b7b2:	2500      	movgt	r5, #0
 800b7b4:	2501      	movle	r5, #1
 800b7b6:	2b03      	cmp	r3, #3
 800b7b8:	d869      	bhi.n	800b88e <_dtoa_r+0x2c6>
 800b7ba:	e8df f003 	tbb	[pc, r3]
 800b7be:	4e2c      	.short	0x4e2c
 800b7c0:	5a4c      	.short	0x5a4c
 800b7c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b7c6:	441d      	add	r5, r3
 800b7c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b7cc:	2b20      	cmp	r3, #32
 800b7ce:	bfc1      	itttt	gt
 800b7d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b7d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b7d8:	fa09 f303 	lslgt.w	r3, r9, r3
 800b7dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b7e0:	bfda      	itte	le
 800b7e2:	f1c3 0320 	rsble	r3, r3, #32
 800b7e6:	fa06 f003 	lslle.w	r0, r6, r3
 800b7ea:	4318      	orrgt	r0, r3
 800b7ec:	f7f4 fe92 	bl	8000514 <__aeabi_ui2d>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	4606      	mov	r6, r0
 800b7f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b7f8:	3d01      	subs	r5, #1
 800b7fa:	9310      	str	r3, [sp, #64]	; 0x40
 800b7fc:	e771      	b.n	800b6e2 <_dtoa_r+0x11a>
 800b7fe:	2301      	movs	r3, #1
 800b800:	e7b6      	b.n	800b770 <_dtoa_r+0x1a8>
 800b802:	900e      	str	r0, [sp, #56]	; 0x38
 800b804:	e7b5      	b.n	800b772 <_dtoa_r+0x1aa>
 800b806:	f1ca 0300 	rsb	r3, sl, #0
 800b80a:	9306      	str	r3, [sp, #24]
 800b80c:	2300      	movs	r3, #0
 800b80e:	eba8 080a 	sub.w	r8, r8, sl
 800b812:	930d      	str	r3, [sp, #52]	; 0x34
 800b814:	e7c2      	b.n	800b79c <_dtoa_r+0x1d4>
 800b816:	2300      	movs	r3, #0
 800b818:	9308      	str	r3, [sp, #32]
 800b81a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	dc39      	bgt.n	800b894 <_dtoa_r+0x2cc>
 800b820:	f04f 0901 	mov.w	r9, #1
 800b824:	f8cd 9004 	str.w	r9, [sp, #4]
 800b828:	464b      	mov	r3, r9
 800b82a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b82e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b830:	2200      	movs	r2, #0
 800b832:	6042      	str	r2, [r0, #4]
 800b834:	2204      	movs	r2, #4
 800b836:	f102 0614 	add.w	r6, r2, #20
 800b83a:	429e      	cmp	r6, r3
 800b83c:	6841      	ldr	r1, [r0, #4]
 800b83e:	d92f      	bls.n	800b8a0 <_dtoa_r+0x2d8>
 800b840:	4620      	mov	r0, r4
 800b842:	f001 f84d 	bl	800c8e0 <_Balloc>
 800b846:	9000      	str	r0, [sp, #0]
 800b848:	2800      	cmp	r0, #0
 800b84a:	d14b      	bne.n	800b8e4 <_dtoa_r+0x31c>
 800b84c:	4b24      	ldr	r3, [pc, #144]	; (800b8e0 <_dtoa_r+0x318>)
 800b84e:	4602      	mov	r2, r0
 800b850:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b854:	e6d1      	b.n	800b5fa <_dtoa_r+0x32>
 800b856:	2301      	movs	r3, #1
 800b858:	e7de      	b.n	800b818 <_dtoa_r+0x250>
 800b85a:	2300      	movs	r3, #0
 800b85c:	9308      	str	r3, [sp, #32]
 800b85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b860:	eb0a 0903 	add.w	r9, sl, r3
 800b864:	f109 0301 	add.w	r3, r9, #1
 800b868:	2b01      	cmp	r3, #1
 800b86a:	9301      	str	r3, [sp, #4]
 800b86c:	bfb8      	it	lt
 800b86e:	2301      	movlt	r3, #1
 800b870:	e7dd      	b.n	800b82e <_dtoa_r+0x266>
 800b872:	2301      	movs	r3, #1
 800b874:	e7f2      	b.n	800b85c <_dtoa_r+0x294>
 800b876:	2501      	movs	r5, #1
 800b878:	2300      	movs	r3, #0
 800b87a:	9305      	str	r3, [sp, #20]
 800b87c:	9508      	str	r5, [sp, #32]
 800b87e:	f04f 39ff 	mov.w	r9, #4294967295
 800b882:	2200      	movs	r2, #0
 800b884:	f8cd 9004 	str.w	r9, [sp, #4]
 800b888:	2312      	movs	r3, #18
 800b88a:	9209      	str	r2, [sp, #36]	; 0x24
 800b88c:	e7cf      	b.n	800b82e <_dtoa_r+0x266>
 800b88e:	2301      	movs	r3, #1
 800b890:	9308      	str	r3, [sp, #32]
 800b892:	e7f4      	b.n	800b87e <_dtoa_r+0x2b6>
 800b894:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b898:	f8cd 9004 	str.w	r9, [sp, #4]
 800b89c:	464b      	mov	r3, r9
 800b89e:	e7c6      	b.n	800b82e <_dtoa_r+0x266>
 800b8a0:	3101      	adds	r1, #1
 800b8a2:	6041      	str	r1, [r0, #4]
 800b8a4:	0052      	lsls	r2, r2, #1
 800b8a6:	e7c6      	b.n	800b836 <_dtoa_r+0x26e>
 800b8a8:	636f4361 	.word	0x636f4361
 800b8ac:	3fd287a7 	.word	0x3fd287a7
 800b8b0:	8b60c8b3 	.word	0x8b60c8b3
 800b8b4:	3fc68a28 	.word	0x3fc68a28
 800b8b8:	509f79fb 	.word	0x509f79fb
 800b8bc:	3fd34413 	.word	0x3fd34413
 800b8c0:	0800e5e8 	.word	0x0800e5e8
 800b8c4:	0800e6a9 	.word	0x0800e6a9
 800b8c8:	7ff00000 	.word	0x7ff00000
 800b8cc:	0800e6a5 	.word	0x0800e6a5
 800b8d0:	0800e69c 	.word	0x0800e69c
 800b8d4:	0800e575 	.word	0x0800e575
 800b8d8:	3ff80000 	.word	0x3ff80000
 800b8dc:	0800e820 	.word	0x0800e820
 800b8e0:	0800e708 	.word	0x0800e708
 800b8e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8e6:	9a00      	ldr	r2, [sp, #0]
 800b8e8:	601a      	str	r2, [r3, #0]
 800b8ea:	9b01      	ldr	r3, [sp, #4]
 800b8ec:	2b0e      	cmp	r3, #14
 800b8ee:	f200 80ad 	bhi.w	800ba4c <_dtoa_r+0x484>
 800b8f2:	2d00      	cmp	r5, #0
 800b8f4:	f000 80aa 	beq.w	800ba4c <_dtoa_r+0x484>
 800b8f8:	f1ba 0f00 	cmp.w	sl, #0
 800b8fc:	dd36      	ble.n	800b96c <_dtoa_r+0x3a4>
 800b8fe:	4ac3      	ldr	r2, [pc, #780]	; (800bc0c <_dtoa_r+0x644>)
 800b900:	f00a 030f 	and.w	r3, sl, #15
 800b904:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b908:	ed93 7b00 	vldr	d7, [r3]
 800b90c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b910:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b914:	eeb0 8a47 	vmov.f32	s16, s14
 800b918:	eef0 8a67 	vmov.f32	s17, s15
 800b91c:	d016      	beq.n	800b94c <_dtoa_r+0x384>
 800b91e:	4bbc      	ldr	r3, [pc, #752]	; (800bc10 <_dtoa_r+0x648>)
 800b920:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b924:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b928:	f7f4 ff98 	bl	800085c <__aeabi_ddiv>
 800b92c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b930:	f007 070f 	and.w	r7, r7, #15
 800b934:	2503      	movs	r5, #3
 800b936:	4eb6      	ldr	r6, [pc, #728]	; (800bc10 <_dtoa_r+0x648>)
 800b938:	b957      	cbnz	r7, 800b950 <_dtoa_r+0x388>
 800b93a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b93e:	ec53 2b18 	vmov	r2, r3, d8
 800b942:	f7f4 ff8b 	bl	800085c <__aeabi_ddiv>
 800b946:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b94a:	e029      	b.n	800b9a0 <_dtoa_r+0x3d8>
 800b94c:	2502      	movs	r5, #2
 800b94e:	e7f2      	b.n	800b936 <_dtoa_r+0x36e>
 800b950:	07f9      	lsls	r1, r7, #31
 800b952:	d508      	bpl.n	800b966 <_dtoa_r+0x39e>
 800b954:	ec51 0b18 	vmov	r0, r1, d8
 800b958:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b95c:	f7f4 fe54 	bl	8000608 <__aeabi_dmul>
 800b960:	ec41 0b18 	vmov	d8, r0, r1
 800b964:	3501      	adds	r5, #1
 800b966:	107f      	asrs	r7, r7, #1
 800b968:	3608      	adds	r6, #8
 800b96a:	e7e5      	b.n	800b938 <_dtoa_r+0x370>
 800b96c:	f000 80a6 	beq.w	800babc <_dtoa_r+0x4f4>
 800b970:	f1ca 0600 	rsb	r6, sl, #0
 800b974:	4ba5      	ldr	r3, [pc, #660]	; (800bc0c <_dtoa_r+0x644>)
 800b976:	4fa6      	ldr	r7, [pc, #664]	; (800bc10 <_dtoa_r+0x648>)
 800b978:	f006 020f 	and.w	r2, r6, #15
 800b97c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b984:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b988:	f7f4 fe3e 	bl	8000608 <__aeabi_dmul>
 800b98c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b990:	1136      	asrs	r6, r6, #4
 800b992:	2300      	movs	r3, #0
 800b994:	2502      	movs	r5, #2
 800b996:	2e00      	cmp	r6, #0
 800b998:	f040 8085 	bne.w	800baa6 <_dtoa_r+0x4de>
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1d2      	bne.n	800b946 <_dtoa_r+0x37e>
 800b9a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f000 808c 	beq.w	800bac0 <_dtoa_r+0x4f8>
 800b9a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b9ac:	4b99      	ldr	r3, [pc, #612]	; (800bc14 <_dtoa_r+0x64c>)
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	4639      	mov	r1, r7
 800b9b4:	f7f5 f89a 	bl	8000aec <__aeabi_dcmplt>
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	f000 8081 	beq.w	800bac0 <_dtoa_r+0x4f8>
 800b9be:	9b01      	ldr	r3, [sp, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d07d      	beq.n	800bac0 <_dtoa_r+0x4f8>
 800b9c4:	f1b9 0f00 	cmp.w	r9, #0
 800b9c8:	dd3c      	ble.n	800ba44 <_dtoa_r+0x47c>
 800b9ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b9ce:	9307      	str	r3, [sp, #28]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	4b91      	ldr	r3, [pc, #580]	; (800bc18 <_dtoa_r+0x650>)
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	4639      	mov	r1, r7
 800b9d8:	f7f4 fe16 	bl	8000608 <__aeabi_dmul>
 800b9dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9e0:	3501      	adds	r5, #1
 800b9e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b9e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	f7f4 fda2 	bl	8000534 <__aeabi_i2d>
 800b9f0:	4632      	mov	r2, r6
 800b9f2:	463b      	mov	r3, r7
 800b9f4:	f7f4 fe08 	bl	8000608 <__aeabi_dmul>
 800b9f8:	4b88      	ldr	r3, [pc, #544]	; (800bc1c <_dtoa_r+0x654>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f7f4 fc4e 	bl	800029c <__adddf3>
 800ba00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ba04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba08:	9303      	str	r3, [sp, #12]
 800ba0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d15c      	bne.n	800baca <_dtoa_r+0x502>
 800ba10:	4b83      	ldr	r3, [pc, #524]	; (800bc20 <_dtoa_r+0x658>)
 800ba12:	2200      	movs	r2, #0
 800ba14:	4630      	mov	r0, r6
 800ba16:	4639      	mov	r1, r7
 800ba18:	f7f4 fc3e 	bl	8000298 <__aeabi_dsub>
 800ba1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba20:	4606      	mov	r6, r0
 800ba22:	460f      	mov	r7, r1
 800ba24:	f7f5 f880 	bl	8000b28 <__aeabi_dcmpgt>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	f040 8296 	bne.w	800bf5a <_dtoa_r+0x992>
 800ba2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ba32:	4630      	mov	r0, r6
 800ba34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba38:	4639      	mov	r1, r7
 800ba3a:	f7f5 f857 	bl	8000aec <__aeabi_dcmplt>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	f040 8288 	bne.w	800bf54 <_dtoa_r+0x98c>
 800ba44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ba48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f2c0 8158 	blt.w	800bd04 <_dtoa_r+0x73c>
 800ba54:	f1ba 0f0e 	cmp.w	sl, #14
 800ba58:	f300 8154 	bgt.w	800bd04 <_dtoa_r+0x73c>
 800ba5c:	4b6b      	ldr	r3, [pc, #428]	; (800bc0c <_dtoa_r+0x644>)
 800ba5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ba62:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f280 80e3 	bge.w	800bc34 <_dtoa_r+0x66c>
 800ba6e:	9b01      	ldr	r3, [sp, #4]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f300 80df 	bgt.w	800bc34 <_dtoa_r+0x66c>
 800ba76:	f040 826d 	bne.w	800bf54 <_dtoa_r+0x98c>
 800ba7a:	4b69      	ldr	r3, [pc, #420]	; (800bc20 <_dtoa_r+0x658>)
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	4640      	mov	r0, r8
 800ba80:	4649      	mov	r1, r9
 800ba82:	f7f4 fdc1 	bl	8000608 <__aeabi_dmul>
 800ba86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba8a:	f7f5 f843 	bl	8000b14 <__aeabi_dcmpge>
 800ba8e:	9e01      	ldr	r6, [sp, #4]
 800ba90:	4637      	mov	r7, r6
 800ba92:	2800      	cmp	r0, #0
 800ba94:	f040 8243 	bne.w	800bf1e <_dtoa_r+0x956>
 800ba98:	9d00      	ldr	r5, [sp, #0]
 800ba9a:	2331      	movs	r3, #49	; 0x31
 800ba9c:	f805 3b01 	strb.w	r3, [r5], #1
 800baa0:	f10a 0a01 	add.w	sl, sl, #1
 800baa4:	e23f      	b.n	800bf26 <_dtoa_r+0x95e>
 800baa6:	07f2      	lsls	r2, r6, #31
 800baa8:	d505      	bpl.n	800bab6 <_dtoa_r+0x4ee>
 800baaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800baae:	f7f4 fdab 	bl	8000608 <__aeabi_dmul>
 800bab2:	3501      	adds	r5, #1
 800bab4:	2301      	movs	r3, #1
 800bab6:	1076      	asrs	r6, r6, #1
 800bab8:	3708      	adds	r7, #8
 800baba:	e76c      	b.n	800b996 <_dtoa_r+0x3ce>
 800babc:	2502      	movs	r5, #2
 800babe:	e76f      	b.n	800b9a0 <_dtoa_r+0x3d8>
 800bac0:	9b01      	ldr	r3, [sp, #4]
 800bac2:	f8cd a01c 	str.w	sl, [sp, #28]
 800bac6:	930c      	str	r3, [sp, #48]	; 0x30
 800bac8:	e78d      	b.n	800b9e6 <_dtoa_r+0x41e>
 800baca:	9900      	ldr	r1, [sp, #0]
 800bacc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bad0:	4b4e      	ldr	r3, [pc, #312]	; (800bc0c <_dtoa_r+0x644>)
 800bad2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bad6:	4401      	add	r1, r0
 800bad8:	9102      	str	r1, [sp, #8]
 800bada:	9908      	ldr	r1, [sp, #32]
 800badc:	eeb0 8a47 	vmov.f32	s16, s14
 800bae0:	eef0 8a67 	vmov.f32	s17, s15
 800bae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bae8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800baec:	2900      	cmp	r1, #0
 800baee:	d045      	beq.n	800bb7c <_dtoa_r+0x5b4>
 800baf0:	494c      	ldr	r1, [pc, #304]	; (800bc24 <_dtoa_r+0x65c>)
 800baf2:	2000      	movs	r0, #0
 800baf4:	f7f4 feb2 	bl	800085c <__aeabi_ddiv>
 800baf8:	ec53 2b18 	vmov	r2, r3, d8
 800bafc:	f7f4 fbcc 	bl	8000298 <__aeabi_dsub>
 800bb00:	9d00      	ldr	r5, [sp, #0]
 800bb02:	ec41 0b18 	vmov	d8, r0, r1
 800bb06:	4639      	mov	r1, r7
 800bb08:	4630      	mov	r0, r6
 800bb0a:	f7f5 f82d 	bl	8000b68 <__aeabi_d2iz>
 800bb0e:	900c      	str	r0, [sp, #48]	; 0x30
 800bb10:	f7f4 fd10 	bl	8000534 <__aeabi_i2d>
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	4630      	mov	r0, r6
 800bb1a:	4639      	mov	r1, r7
 800bb1c:	f7f4 fbbc 	bl	8000298 <__aeabi_dsub>
 800bb20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb22:	3330      	adds	r3, #48	; 0x30
 800bb24:	f805 3b01 	strb.w	r3, [r5], #1
 800bb28:	ec53 2b18 	vmov	r2, r3, d8
 800bb2c:	4606      	mov	r6, r0
 800bb2e:	460f      	mov	r7, r1
 800bb30:	f7f4 ffdc 	bl	8000aec <__aeabi_dcmplt>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d165      	bne.n	800bc04 <_dtoa_r+0x63c>
 800bb38:	4632      	mov	r2, r6
 800bb3a:	463b      	mov	r3, r7
 800bb3c:	4935      	ldr	r1, [pc, #212]	; (800bc14 <_dtoa_r+0x64c>)
 800bb3e:	2000      	movs	r0, #0
 800bb40:	f7f4 fbaa 	bl	8000298 <__aeabi_dsub>
 800bb44:	ec53 2b18 	vmov	r2, r3, d8
 800bb48:	f7f4 ffd0 	bl	8000aec <__aeabi_dcmplt>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	f040 80b9 	bne.w	800bcc4 <_dtoa_r+0x6fc>
 800bb52:	9b02      	ldr	r3, [sp, #8]
 800bb54:	429d      	cmp	r5, r3
 800bb56:	f43f af75 	beq.w	800ba44 <_dtoa_r+0x47c>
 800bb5a:	4b2f      	ldr	r3, [pc, #188]	; (800bc18 <_dtoa_r+0x650>)
 800bb5c:	ec51 0b18 	vmov	r0, r1, d8
 800bb60:	2200      	movs	r2, #0
 800bb62:	f7f4 fd51 	bl	8000608 <__aeabi_dmul>
 800bb66:	4b2c      	ldr	r3, [pc, #176]	; (800bc18 <_dtoa_r+0x650>)
 800bb68:	ec41 0b18 	vmov	d8, r0, r1
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	4630      	mov	r0, r6
 800bb70:	4639      	mov	r1, r7
 800bb72:	f7f4 fd49 	bl	8000608 <__aeabi_dmul>
 800bb76:	4606      	mov	r6, r0
 800bb78:	460f      	mov	r7, r1
 800bb7a:	e7c4      	b.n	800bb06 <_dtoa_r+0x53e>
 800bb7c:	ec51 0b17 	vmov	r0, r1, d7
 800bb80:	f7f4 fd42 	bl	8000608 <__aeabi_dmul>
 800bb84:	9b02      	ldr	r3, [sp, #8]
 800bb86:	9d00      	ldr	r5, [sp, #0]
 800bb88:	930c      	str	r3, [sp, #48]	; 0x30
 800bb8a:	ec41 0b18 	vmov	d8, r0, r1
 800bb8e:	4639      	mov	r1, r7
 800bb90:	4630      	mov	r0, r6
 800bb92:	f7f4 ffe9 	bl	8000b68 <__aeabi_d2iz>
 800bb96:	9011      	str	r0, [sp, #68]	; 0x44
 800bb98:	f7f4 fccc 	bl	8000534 <__aeabi_i2d>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	4630      	mov	r0, r6
 800bba2:	4639      	mov	r1, r7
 800bba4:	f7f4 fb78 	bl	8000298 <__aeabi_dsub>
 800bba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbaa:	3330      	adds	r3, #48	; 0x30
 800bbac:	f805 3b01 	strb.w	r3, [r5], #1
 800bbb0:	9b02      	ldr	r3, [sp, #8]
 800bbb2:	429d      	cmp	r5, r3
 800bbb4:	4606      	mov	r6, r0
 800bbb6:	460f      	mov	r7, r1
 800bbb8:	f04f 0200 	mov.w	r2, #0
 800bbbc:	d134      	bne.n	800bc28 <_dtoa_r+0x660>
 800bbbe:	4b19      	ldr	r3, [pc, #100]	; (800bc24 <_dtoa_r+0x65c>)
 800bbc0:	ec51 0b18 	vmov	r0, r1, d8
 800bbc4:	f7f4 fb6a 	bl	800029c <__adddf3>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	460b      	mov	r3, r1
 800bbcc:	4630      	mov	r0, r6
 800bbce:	4639      	mov	r1, r7
 800bbd0:	f7f4 ffaa 	bl	8000b28 <__aeabi_dcmpgt>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d175      	bne.n	800bcc4 <_dtoa_r+0x6fc>
 800bbd8:	ec53 2b18 	vmov	r2, r3, d8
 800bbdc:	4911      	ldr	r1, [pc, #68]	; (800bc24 <_dtoa_r+0x65c>)
 800bbde:	2000      	movs	r0, #0
 800bbe0:	f7f4 fb5a 	bl	8000298 <__aeabi_dsub>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	4630      	mov	r0, r6
 800bbea:	4639      	mov	r1, r7
 800bbec:	f7f4 ff7e 	bl	8000aec <__aeabi_dcmplt>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	f43f af27 	beq.w	800ba44 <_dtoa_r+0x47c>
 800bbf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bbf8:	1e6b      	subs	r3, r5, #1
 800bbfa:	930c      	str	r3, [sp, #48]	; 0x30
 800bbfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bc00:	2b30      	cmp	r3, #48	; 0x30
 800bc02:	d0f8      	beq.n	800bbf6 <_dtoa_r+0x62e>
 800bc04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bc08:	e04a      	b.n	800bca0 <_dtoa_r+0x6d8>
 800bc0a:	bf00      	nop
 800bc0c:	0800e820 	.word	0x0800e820
 800bc10:	0800e7f8 	.word	0x0800e7f8
 800bc14:	3ff00000 	.word	0x3ff00000
 800bc18:	40240000 	.word	0x40240000
 800bc1c:	401c0000 	.word	0x401c0000
 800bc20:	40140000 	.word	0x40140000
 800bc24:	3fe00000 	.word	0x3fe00000
 800bc28:	4baf      	ldr	r3, [pc, #700]	; (800bee8 <_dtoa_r+0x920>)
 800bc2a:	f7f4 fced 	bl	8000608 <__aeabi_dmul>
 800bc2e:	4606      	mov	r6, r0
 800bc30:	460f      	mov	r7, r1
 800bc32:	e7ac      	b.n	800bb8e <_dtoa_r+0x5c6>
 800bc34:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bc38:	9d00      	ldr	r5, [sp, #0]
 800bc3a:	4642      	mov	r2, r8
 800bc3c:	464b      	mov	r3, r9
 800bc3e:	4630      	mov	r0, r6
 800bc40:	4639      	mov	r1, r7
 800bc42:	f7f4 fe0b 	bl	800085c <__aeabi_ddiv>
 800bc46:	f7f4 ff8f 	bl	8000b68 <__aeabi_d2iz>
 800bc4a:	9002      	str	r0, [sp, #8]
 800bc4c:	f7f4 fc72 	bl	8000534 <__aeabi_i2d>
 800bc50:	4642      	mov	r2, r8
 800bc52:	464b      	mov	r3, r9
 800bc54:	f7f4 fcd8 	bl	8000608 <__aeabi_dmul>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	4639      	mov	r1, r7
 800bc60:	f7f4 fb1a 	bl	8000298 <__aeabi_dsub>
 800bc64:	9e02      	ldr	r6, [sp, #8]
 800bc66:	9f01      	ldr	r7, [sp, #4]
 800bc68:	3630      	adds	r6, #48	; 0x30
 800bc6a:	f805 6b01 	strb.w	r6, [r5], #1
 800bc6e:	9e00      	ldr	r6, [sp, #0]
 800bc70:	1bae      	subs	r6, r5, r6
 800bc72:	42b7      	cmp	r7, r6
 800bc74:	4602      	mov	r2, r0
 800bc76:	460b      	mov	r3, r1
 800bc78:	d137      	bne.n	800bcea <_dtoa_r+0x722>
 800bc7a:	f7f4 fb0f 	bl	800029c <__adddf3>
 800bc7e:	4642      	mov	r2, r8
 800bc80:	464b      	mov	r3, r9
 800bc82:	4606      	mov	r6, r0
 800bc84:	460f      	mov	r7, r1
 800bc86:	f7f4 ff4f 	bl	8000b28 <__aeabi_dcmpgt>
 800bc8a:	b9c8      	cbnz	r0, 800bcc0 <_dtoa_r+0x6f8>
 800bc8c:	4642      	mov	r2, r8
 800bc8e:	464b      	mov	r3, r9
 800bc90:	4630      	mov	r0, r6
 800bc92:	4639      	mov	r1, r7
 800bc94:	f7f4 ff20 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc98:	b110      	cbz	r0, 800bca0 <_dtoa_r+0x6d8>
 800bc9a:	9b02      	ldr	r3, [sp, #8]
 800bc9c:	07d9      	lsls	r1, r3, #31
 800bc9e:	d40f      	bmi.n	800bcc0 <_dtoa_r+0x6f8>
 800bca0:	4620      	mov	r0, r4
 800bca2:	4659      	mov	r1, fp
 800bca4:	f000 fe5c 	bl	800c960 <_Bfree>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	702b      	strb	r3, [r5, #0]
 800bcac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcae:	f10a 0001 	add.w	r0, sl, #1
 800bcb2:	6018      	str	r0, [r3, #0]
 800bcb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f43f acd8 	beq.w	800b66c <_dtoa_r+0xa4>
 800bcbc:	601d      	str	r5, [r3, #0]
 800bcbe:	e4d5      	b.n	800b66c <_dtoa_r+0xa4>
 800bcc0:	f8cd a01c 	str.w	sl, [sp, #28]
 800bcc4:	462b      	mov	r3, r5
 800bcc6:	461d      	mov	r5, r3
 800bcc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bccc:	2a39      	cmp	r2, #57	; 0x39
 800bcce:	d108      	bne.n	800bce2 <_dtoa_r+0x71a>
 800bcd0:	9a00      	ldr	r2, [sp, #0]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d1f7      	bne.n	800bcc6 <_dtoa_r+0x6fe>
 800bcd6:	9a07      	ldr	r2, [sp, #28]
 800bcd8:	9900      	ldr	r1, [sp, #0]
 800bcda:	3201      	adds	r2, #1
 800bcdc:	9207      	str	r2, [sp, #28]
 800bcde:	2230      	movs	r2, #48	; 0x30
 800bce0:	700a      	strb	r2, [r1, #0]
 800bce2:	781a      	ldrb	r2, [r3, #0]
 800bce4:	3201      	adds	r2, #1
 800bce6:	701a      	strb	r2, [r3, #0]
 800bce8:	e78c      	b.n	800bc04 <_dtoa_r+0x63c>
 800bcea:	4b7f      	ldr	r3, [pc, #508]	; (800bee8 <_dtoa_r+0x920>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	f7f4 fc8b 	bl	8000608 <__aeabi_dmul>
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	460f      	mov	r7, r1
 800bcfa:	f7f4 feed 	bl	8000ad8 <__aeabi_dcmpeq>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d09b      	beq.n	800bc3a <_dtoa_r+0x672>
 800bd02:	e7cd      	b.n	800bca0 <_dtoa_r+0x6d8>
 800bd04:	9a08      	ldr	r2, [sp, #32]
 800bd06:	2a00      	cmp	r2, #0
 800bd08:	f000 80c4 	beq.w	800be94 <_dtoa_r+0x8cc>
 800bd0c:	9a05      	ldr	r2, [sp, #20]
 800bd0e:	2a01      	cmp	r2, #1
 800bd10:	f300 80a8 	bgt.w	800be64 <_dtoa_r+0x89c>
 800bd14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd16:	2a00      	cmp	r2, #0
 800bd18:	f000 80a0 	beq.w	800be5c <_dtoa_r+0x894>
 800bd1c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bd20:	9e06      	ldr	r6, [sp, #24]
 800bd22:	4645      	mov	r5, r8
 800bd24:	9a04      	ldr	r2, [sp, #16]
 800bd26:	2101      	movs	r1, #1
 800bd28:	441a      	add	r2, r3
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	4498      	add	r8, r3
 800bd2e:	9204      	str	r2, [sp, #16]
 800bd30:	f000 ff1c 	bl	800cb6c <__i2b>
 800bd34:	4607      	mov	r7, r0
 800bd36:	2d00      	cmp	r5, #0
 800bd38:	dd0b      	ble.n	800bd52 <_dtoa_r+0x78a>
 800bd3a:	9b04      	ldr	r3, [sp, #16]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	dd08      	ble.n	800bd52 <_dtoa_r+0x78a>
 800bd40:	42ab      	cmp	r3, r5
 800bd42:	9a04      	ldr	r2, [sp, #16]
 800bd44:	bfa8      	it	ge
 800bd46:	462b      	movge	r3, r5
 800bd48:	eba8 0803 	sub.w	r8, r8, r3
 800bd4c:	1aed      	subs	r5, r5, r3
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	9304      	str	r3, [sp, #16]
 800bd52:	9b06      	ldr	r3, [sp, #24]
 800bd54:	b1fb      	cbz	r3, 800bd96 <_dtoa_r+0x7ce>
 800bd56:	9b08      	ldr	r3, [sp, #32]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f000 809f 	beq.w	800be9c <_dtoa_r+0x8d4>
 800bd5e:	2e00      	cmp	r6, #0
 800bd60:	dd11      	ble.n	800bd86 <_dtoa_r+0x7be>
 800bd62:	4639      	mov	r1, r7
 800bd64:	4632      	mov	r2, r6
 800bd66:	4620      	mov	r0, r4
 800bd68:	f000 ffbc 	bl	800cce4 <__pow5mult>
 800bd6c:	465a      	mov	r2, fp
 800bd6e:	4601      	mov	r1, r0
 800bd70:	4607      	mov	r7, r0
 800bd72:	4620      	mov	r0, r4
 800bd74:	f000 ff10 	bl	800cb98 <__multiply>
 800bd78:	4659      	mov	r1, fp
 800bd7a:	9007      	str	r0, [sp, #28]
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f000 fdef 	bl	800c960 <_Bfree>
 800bd82:	9b07      	ldr	r3, [sp, #28]
 800bd84:	469b      	mov	fp, r3
 800bd86:	9b06      	ldr	r3, [sp, #24]
 800bd88:	1b9a      	subs	r2, r3, r6
 800bd8a:	d004      	beq.n	800bd96 <_dtoa_r+0x7ce>
 800bd8c:	4659      	mov	r1, fp
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f000 ffa8 	bl	800cce4 <__pow5mult>
 800bd94:	4683      	mov	fp, r0
 800bd96:	2101      	movs	r1, #1
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f000 fee7 	bl	800cb6c <__i2b>
 800bd9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	4606      	mov	r6, r0
 800bda4:	dd7c      	ble.n	800bea0 <_dtoa_r+0x8d8>
 800bda6:	461a      	mov	r2, r3
 800bda8:	4601      	mov	r1, r0
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f000 ff9a 	bl	800cce4 <__pow5mult>
 800bdb0:	9b05      	ldr	r3, [sp, #20]
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	4606      	mov	r6, r0
 800bdb6:	dd76      	ble.n	800bea6 <_dtoa_r+0x8de>
 800bdb8:	2300      	movs	r3, #0
 800bdba:	9306      	str	r3, [sp, #24]
 800bdbc:	6933      	ldr	r3, [r6, #16]
 800bdbe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bdc2:	6918      	ldr	r0, [r3, #16]
 800bdc4:	f000 fe82 	bl	800cacc <__hi0bits>
 800bdc8:	f1c0 0020 	rsb	r0, r0, #32
 800bdcc:	9b04      	ldr	r3, [sp, #16]
 800bdce:	4418      	add	r0, r3
 800bdd0:	f010 001f 	ands.w	r0, r0, #31
 800bdd4:	f000 8086 	beq.w	800bee4 <_dtoa_r+0x91c>
 800bdd8:	f1c0 0320 	rsb	r3, r0, #32
 800bddc:	2b04      	cmp	r3, #4
 800bdde:	dd7f      	ble.n	800bee0 <_dtoa_r+0x918>
 800bde0:	f1c0 001c 	rsb	r0, r0, #28
 800bde4:	9b04      	ldr	r3, [sp, #16]
 800bde6:	4403      	add	r3, r0
 800bde8:	4480      	add	r8, r0
 800bdea:	4405      	add	r5, r0
 800bdec:	9304      	str	r3, [sp, #16]
 800bdee:	f1b8 0f00 	cmp.w	r8, #0
 800bdf2:	dd05      	ble.n	800be00 <_dtoa_r+0x838>
 800bdf4:	4659      	mov	r1, fp
 800bdf6:	4642      	mov	r2, r8
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f000 ffcd 	bl	800cd98 <__lshift>
 800bdfe:	4683      	mov	fp, r0
 800be00:	9b04      	ldr	r3, [sp, #16]
 800be02:	2b00      	cmp	r3, #0
 800be04:	dd05      	ble.n	800be12 <_dtoa_r+0x84a>
 800be06:	4631      	mov	r1, r6
 800be08:	461a      	mov	r2, r3
 800be0a:	4620      	mov	r0, r4
 800be0c:	f000 ffc4 	bl	800cd98 <__lshift>
 800be10:	4606      	mov	r6, r0
 800be12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be14:	2b00      	cmp	r3, #0
 800be16:	d069      	beq.n	800beec <_dtoa_r+0x924>
 800be18:	4631      	mov	r1, r6
 800be1a:	4658      	mov	r0, fp
 800be1c:	f001 f828 	bl	800ce70 <__mcmp>
 800be20:	2800      	cmp	r0, #0
 800be22:	da63      	bge.n	800beec <_dtoa_r+0x924>
 800be24:	2300      	movs	r3, #0
 800be26:	4659      	mov	r1, fp
 800be28:	220a      	movs	r2, #10
 800be2a:	4620      	mov	r0, r4
 800be2c:	f000 fdba 	bl	800c9a4 <__multadd>
 800be30:	9b08      	ldr	r3, [sp, #32]
 800be32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be36:	4683      	mov	fp, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f000 818f 	beq.w	800c15c <_dtoa_r+0xb94>
 800be3e:	4639      	mov	r1, r7
 800be40:	2300      	movs	r3, #0
 800be42:	220a      	movs	r2, #10
 800be44:	4620      	mov	r0, r4
 800be46:	f000 fdad 	bl	800c9a4 <__multadd>
 800be4a:	f1b9 0f00 	cmp.w	r9, #0
 800be4e:	4607      	mov	r7, r0
 800be50:	f300 808e 	bgt.w	800bf70 <_dtoa_r+0x9a8>
 800be54:	9b05      	ldr	r3, [sp, #20]
 800be56:	2b02      	cmp	r3, #2
 800be58:	dc50      	bgt.n	800befc <_dtoa_r+0x934>
 800be5a:	e089      	b.n	800bf70 <_dtoa_r+0x9a8>
 800be5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be62:	e75d      	b.n	800bd20 <_dtoa_r+0x758>
 800be64:	9b01      	ldr	r3, [sp, #4]
 800be66:	1e5e      	subs	r6, r3, #1
 800be68:	9b06      	ldr	r3, [sp, #24]
 800be6a:	42b3      	cmp	r3, r6
 800be6c:	bfbf      	itttt	lt
 800be6e:	9b06      	ldrlt	r3, [sp, #24]
 800be70:	9606      	strlt	r6, [sp, #24]
 800be72:	1af2      	sublt	r2, r6, r3
 800be74:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800be76:	bfb6      	itet	lt
 800be78:	189b      	addlt	r3, r3, r2
 800be7a:	1b9e      	subge	r6, r3, r6
 800be7c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800be7e:	9b01      	ldr	r3, [sp, #4]
 800be80:	bfb8      	it	lt
 800be82:	2600      	movlt	r6, #0
 800be84:	2b00      	cmp	r3, #0
 800be86:	bfb5      	itete	lt
 800be88:	eba8 0503 	sublt.w	r5, r8, r3
 800be8c:	9b01      	ldrge	r3, [sp, #4]
 800be8e:	2300      	movlt	r3, #0
 800be90:	4645      	movge	r5, r8
 800be92:	e747      	b.n	800bd24 <_dtoa_r+0x75c>
 800be94:	9e06      	ldr	r6, [sp, #24]
 800be96:	9f08      	ldr	r7, [sp, #32]
 800be98:	4645      	mov	r5, r8
 800be9a:	e74c      	b.n	800bd36 <_dtoa_r+0x76e>
 800be9c:	9a06      	ldr	r2, [sp, #24]
 800be9e:	e775      	b.n	800bd8c <_dtoa_r+0x7c4>
 800bea0:	9b05      	ldr	r3, [sp, #20]
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	dc18      	bgt.n	800bed8 <_dtoa_r+0x910>
 800bea6:	9b02      	ldr	r3, [sp, #8]
 800bea8:	b9b3      	cbnz	r3, 800bed8 <_dtoa_r+0x910>
 800beaa:	9b03      	ldr	r3, [sp, #12]
 800beac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800beb0:	b9a3      	cbnz	r3, 800bedc <_dtoa_r+0x914>
 800beb2:	9b03      	ldr	r3, [sp, #12]
 800beb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800beb8:	0d1b      	lsrs	r3, r3, #20
 800beba:	051b      	lsls	r3, r3, #20
 800bebc:	b12b      	cbz	r3, 800beca <_dtoa_r+0x902>
 800bebe:	9b04      	ldr	r3, [sp, #16]
 800bec0:	3301      	adds	r3, #1
 800bec2:	9304      	str	r3, [sp, #16]
 800bec4:	f108 0801 	add.w	r8, r8, #1
 800bec8:	2301      	movs	r3, #1
 800beca:	9306      	str	r3, [sp, #24]
 800becc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bece:	2b00      	cmp	r3, #0
 800bed0:	f47f af74 	bne.w	800bdbc <_dtoa_r+0x7f4>
 800bed4:	2001      	movs	r0, #1
 800bed6:	e779      	b.n	800bdcc <_dtoa_r+0x804>
 800bed8:	2300      	movs	r3, #0
 800beda:	e7f6      	b.n	800beca <_dtoa_r+0x902>
 800bedc:	9b02      	ldr	r3, [sp, #8]
 800bede:	e7f4      	b.n	800beca <_dtoa_r+0x902>
 800bee0:	d085      	beq.n	800bdee <_dtoa_r+0x826>
 800bee2:	4618      	mov	r0, r3
 800bee4:	301c      	adds	r0, #28
 800bee6:	e77d      	b.n	800bde4 <_dtoa_r+0x81c>
 800bee8:	40240000 	.word	0x40240000
 800beec:	9b01      	ldr	r3, [sp, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	dc38      	bgt.n	800bf64 <_dtoa_r+0x99c>
 800bef2:	9b05      	ldr	r3, [sp, #20]
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	dd35      	ble.n	800bf64 <_dtoa_r+0x99c>
 800bef8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800befc:	f1b9 0f00 	cmp.w	r9, #0
 800bf00:	d10d      	bne.n	800bf1e <_dtoa_r+0x956>
 800bf02:	4631      	mov	r1, r6
 800bf04:	464b      	mov	r3, r9
 800bf06:	2205      	movs	r2, #5
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f000 fd4b 	bl	800c9a4 <__multadd>
 800bf0e:	4601      	mov	r1, r0
 800bf10:	4606      	mov	r6, r0
 800bf12:	4658      	mov	r0, fp
 800bf14:	f000 ffac 	bl	800ce70 <__mcmp>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	f73f adbd 	bgt.w	800ba98 <_dtoa_r+0x4d0>
 800bf1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf20:	9d00      	ldr	r5, [sp, #0]
 800bf22:	ea6f 0a03 	mvn.w	sl, r3
 800bf26:	f04f 0800 	mov.w	r8, #0
 800bf2a:	4631      	mov	r1, r6
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f000 fd17 	bl	800c960 <_Bfree>
 800bf32:	2f00      	cmp	r7, #0
 800bf34:	f43f aeb4 	beq.w	800bca0 <_dtoa_r+0x6d8>
 800bf38:	f1b8 0f00 	cmp.w	r8, #0
 800bf3c:	d005      	beq.n	800bf4a <_dtoa_r+0x982>
 800bf3e:	45b8      	cmp	r8, r7
 800bf40:	d003      	beq.n	800bf4a <_dtoa_r+0x982>
 800bf42:	4641      	mov	r1, r8
 800bf44:	4620      	mov	r0, r4
 800bf46:	f000 fd0b 	bl	800c960 <_Bfree>
 800bf4a:	4639      	mov	r1, r7
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	f000 fd07 	bl	800c960 <_Bfree>
 800bf52:	e6a5      	b.n	800bca0 <_dtoa_r+0x6d8>
 800bf54:	2600      	movs	r6, #0
 800bf56:	4637      	mov	r7, r6
 800bf58:	e7e1      	b.n	800bf1e <_dtoa_r+0x956>
 800bf5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bf5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bf60:	4637      	mov	r7, r6
 800bf62:	e599      	b.n	800ba98 <_dtoa_r+0x4d0>
 800bf64:	9b08      	ldr	r3, [sp, #32]
 800bf66:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	f000 80fd 	beq.w	800c16a <_dtoa_r+0xba2>
 800bf70:	2d00      	cmp	r5, #0
 800bf72:	dd05      	ble.n	800bf80 <_dtoa_r+0x9b8>
 800bf74:	4639      	mov	r1, r7
 800bf76:	462a      	mov	r2, r5
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f000 ff0d 	bl	800cd98 <__lshift>
 800bf7e:	4607      	mov	r7, r0
 800bf80:	9b06      	ldr	r3, [sp, #24]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d05c      	beq.n	800c040 <_dtoa_r+0xa78>
 800bf86:	6879      	ldr	r1, [r7, #4]
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f000 fca9 	bl	800c8e0 <_Balloc>
 800bf8e:	4605      	mov	r5, r0
 800bf90:	b928      	cbnz	r0, 800bf9e <_dtoa_r+0x9d6>
 800bf92:	4b80      	ldr	r3, [pc, #512]	; (800c194 <_dtoa_r+0xbcc>)
 800bf94:	4602      	mov	r2, r0
 800bf96:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf9a:	f7ff bb2e 	b.w	800b5fa <_dtoa_r+0x32>
 800bf9e:	693a      	ldr	r2, [r7, #16]
 800bfa0:	3202      	adds	r2, #2
 800bfa2:	0092      	lsls	r2, r2, #2
 800bfa4:	f107 010c 	add.w	r1, r7, #12
 800bfa8:	300c      	adds	r0, #12
 800bfaa:	f7fd fed5 	bl	8009d58 <memcpy>
 800bfae:	2201      	movs	r2, #1
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f000 fef0 	bl	800cd98 <__lshift>
 800bfb8:	9b00      	ldr	r3, [sp, #0]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	9301      	str	r3, [sp, #4]
 800bfbe:	9b00      	ldr	r3, [sp, #0]
 800bfc0:	444b      	add	r3, r9
 800bfc2:	9307      	str	r3, [sp, #28]
 800bfc4:	9b02      	ldr	r3, [sp, #8]
 800bfc6:	f003 0301 	and.w	r3, r3, #1
 800bfca:	46b8      	mov	r8, r7
 800bfcc:	9306      	str	r3, [sp, #24]
 800bfce:	4607      	mov	r7, r0
 800bfd0:	9b01      	ldr	r3, [sp, #4]
 800bfd2:	4631      	mov	r1, r6
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	4658      	mov	r0, fp
 800bfd8:	9302      	str	r3, [sp, #8]
 800bfda:	f7ff fa69 	bl	800b4b0 <quorem>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	3330      	adds	r3, #48	; 0x30
 800bfe2:	9004      	str	r0, [sp, #16]
 800bfe4:	4641      	mov	r1, r8
 800bfe6:	4658      	mov	r0, fp
 800bfe8:	9308      	str	r3, [sp, #32]
 800bfea:	f000 ff41 	bl	800ce70 <__mcmp>
 800bfee:	463a      	mov	r2, r7
 800bff0:	4681      	mov	r9, r0
 800bff2:	4631      	mov	r1, r6
 800bff4:	4620      	mov	r0, r4
 800bff6:	f000 ff57 	bl	800cea8 <__mdiff>
 800bffa:	68c2      	ldr	r2, [r0, #12]
 800bffc:	9b08      	ldr	r3, [sp, #32]
 800bffe:	4605      	mov	r5, r0
 800c000:	bb02      	cbnz	r2, 800c044 <_dtoa_r+0xa7c>
 800c002:	4601      	mov	r1, r0
 800c004:	4658      	mov	r0, fp
 800c006:	f000 ff33 	bl	800ce70 <__mcmp>
 800c00a:	9b08      	ldr	r3, [sp, #32]
 800c00c:	4602      	mov	r2, r0
 800c00e:	4629      	mov	r1, r5
 800c010:	4620      	mov	r0, r4
 800c012:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c016:	f000 fca3 	bl	800c960 <_Bfree>
 800c01a:	9b05      	ldr	r3, [sp, #20]
 800c01c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c01e:	9d01      	ldr	r5, [sp, #4]
 800c020:	ea43 0102 	orr.w	r1, r3, r2
 800c024:	9b06      	ldr	r3, [sp, #24]
 800c026:	430b      	orrs	r3, r1
 800c028:	9b08      	ldr	r3, [sp, #32]
 800c02a:	d10d      	bne.n	800c048 <_dtoa_r+0xa80>
 800c02c:	2b39      	cmp	r3, #57	; 0x39
 800c02e:	d029      	beq.n	800c084 <_dtoa_r+0xabc>
 800c030:	f1b9 0f00 	cmp.w	r9, #0
 800c034:	dd01      	ble.n	800c03a <_dtoa_r+0xa72>
 800c036:	9b04      	ldr	r3, [sp, #16]
 800c038:	3331      	adds	r3, #49	; 0x31
 800c03a:	9a02      	ldr	r2, [sp, #8]
 800c03c:	7013      	strb	r3, [r2, #0]
 800c03e:	e774      	b.n	800bf2a <_dtoa_r+0x962>
 800c040:	4638      	mov	r0, r7
 800c042:	e7b9      	b.n	800bfb8 <_dtoa_r+0x9f0>
 800c044:	2201      	movs	r2, #1
 800c046:	e7e2      	b.n	800c00e <_dtoa_r+0xa46>
 800c048:	f1b9 0f00 	cmp.w	r9, #0
 800c04c:	db06      	blt.n	800c05c <_dtoa_r+0xa94>
 800c04e:	9905      	ldr	r1, [sp, #20]
 800c050:	ea41 0909 	orr.w	r9, r1, r9
 800c054:	9906      	ldr	r1, [sp, #24]
 800c056:	ea59 0101 	orrs.w	r1, r9, r1
 800c05a:	d120      	bne.n	800c09e <_dtoa_r+0xad6>
 800c05c:	2a00      	cmp	r2, #0
 800c05e:	ddec      	ble.n	800c03a <_dtoa_r+0xa72>
 800c060:	4659      	mov	r1, fp
 800c062:	2201      	movs	r2, #1
 800c064:	4620      	mov	r0, r4
 800c066:	9301      	str	r3, [sp, #4]
 800c068:	f000 fe96 	bl	800cd98 <__lshift>
 800c06c:	4631      	mov	r1, r6
 800c06e:	4683      	mov	fp, r0
 800c070:	f000 fefe 	bl	800ce70 <__mcmp>
 800c074:	2800      	cmp	r0, #0
 800c076:	9b01      	ldr	r3, [sp, #4]
 800c078:	dc02      	bgt.n	800c080 <_dtoa_r+0xab8>
 800c07a:	d1de      	bne.n	800c03a <_dtoa_r+0xa72>
 800c07c:	07da      	lsls	r2, r3, #31
 800c07e:	d5dc      	bpl.n	800c03a <_dtoa_r+0xa72>
 800c080:	2b39      	cmp	r3, #57	; 0x39
 800c082:	d1d8      	bne.n	800c036 <_dtoa_r+0xa6e>
 800c084:	9a02      	ldr	r2, [sp, #8]
 800c086:	2339      	movs	r3, #57	; 0x39
 800c088:	7013      	strb	r3, [r2, #0]
 800c08a:	462b      	mov	r3, r5
 800c08c:	461d      	mov	r5, r3
 800c08e:	3b01      	subs	r3, #1
 800c090:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c094:	2a39      	cmp	r2, #57	; 0x39
 800c096:	d050      	beq.n	800c13a <_dtoa_r+0xb72>
 800c098:	3201      	adds	r2, #1
 800c09a:	701a      	strb	r2, [r3, #0]
 800c09c:	e745      	b.n	800bf2a <_dtoa_r+0x962>
 800c09e:	2a00      	cmp	r2, #0
 800c0a0:	dd03      	ble.n	800c0aa <_dtoa_r+0xae2>
 800c0a2:	2b39      	cmp	r3, #57	; 0x39
 800c0a4:	d0ee      	beq.n	800c084 <_dtoa_r+0xabc>
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	e7c7      	b.n	800c03a <_dtoa_r+0xa72>
 800c0aa:	9a01      	ldr	r2, [sp, #4]
 800c0ac:	9907      	ldr	r1, [sp, #28]
 800c0ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c0b2:	428a      	cmp	r2, r1
 800c0b4:	d02a      	beq.n	800c10c <_dtoa_r+0xb44>
 800c0b6:	4659      	mov	r1, fp
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	220a      	movs	r2, #10
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f000 fc71 	bl	800c9a4 <__multadd>
 800c0c2:	45b8      	cmp	r8, r7
 800c0c4:	4683      	mov	fp, r0
 800c0c6:	f04f 0300 	mov.w	r3, #0
 800c0ca:	f04f 020a 	mov.w	r2, #10
 800c0ce:	4641      	mov	r1, r8
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	d107      	bne.n	800c0e4 <_dtoa_r+0xb1c>
 800c0d4:	f000 fc66 	bl	800c9a4 <__multadd>
 800c0d8:	4680      	mov	r8, r0
 800c0da:	4607      	mov	r7, r0
 800c0dc:	9b01      	ldr	r3, [sp, #4]
 800c0de:	3301      	adds	r3, #1
 800c0e0:	9301      	str	r3, [sp, #4]
 800c0e2:	e775      	b.n	800bfd0 <_dtoa_r+0xa08>
 800c0e4:	f000 fc5e 	bl	800c9a4 <__multadd>
 800c0e8:	4639      	mov	r1, r7
 800c0ea:	4680      	mov	r8, r0
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	220a      	movs	r2, #10
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f000 fc57 	bl	800c9a4 <__multadd>
 800c0f6:	4607      	mov	r7, r0
 800c0f8:	e7f0      	b.n	800c0dc <_dtoa_r+0xb14>
 800c0fa:	f1b9 0f00 	cmp.w	r9, #0
 800c0fe:	9a00      	ldr	r2, [sp, #0]
 800c100:	bfcc      	ite	gt
 800c102:	464d      	movgt	r5, r9
 800c104:	2501      	movle	r5, #1
 800c106:	4415      	add	r5, r2
 800c108:	f04f 0800 	mov.w	r8, #0
 800c10c:	4659      	mov	r1, fp
 800c10e:	2201      	movs	r2, #1
 800c110:	4620      	mov	r0, r4
 800c112:	9301      	str	r3, [sp, #4]
 800c114:	f000 fe40 	bl	800cd98 <__lshift>
 800c118:	4631      	mov	r1, r6
 800c11a:	4683      	mov	fp, r0
 800c11c:	f000 fea8 	bl	800ce70 <__mcmp>
 800c120:	2800      	cmp	r0, #0
 800c122:	dcb2      	bgt.n	800c08a <_dtoa_r+0xac2>
 800c124:	d102      	bne.n	800c12c <_dtoa_r+0xb64>
 800c126:	9b01      	ldr	r3, [sp, #4]
 800c128:	07db      	lsls	r3, r3, #31
 800c12a:	d4ae      	bmi.n	800c08a <_dtoa_r+0xac2>
 800c12c:	462b      	mov	r3, r5
 800c12e:	461d      	mov	r5, r3
 800c130:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c134:	2a30      	cmp	r2, #48	; 0x30
 800c136:	d0fa      	beq.n	800c12e <_dtoa_r+0xb66>
 800c138:	e6f7      	b.n	800bf2a <_dtoa_r+0x962>
 800c13a:	9a00      	ldr	r2, [sp, #0]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d1a5      	bne.n	800c08c <_dtoa_r+0xac4>
 800c140:	f10a 0a01 	add.w	sl, sl, #1
 800c144:	2331      	movs	r3, #49	; 0x31
 800c146:	e779      	b.n	800c03c <_dtoa_r+0xa74>
 800c148:	4b13      	ldr	r3, [pc, #76]	; (800c198 <_dtoa_r+0xbd0>)
 800c14a:	f7ff baaf 	b.w	800b6ac <_dtoa_r+0xe4>
 800c14e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c150:	2b00      	cmp	r3, #0
 800c152:	f47f aa86 	bne.w	800b662 <_dtoa_r+0x9a>
 800c156:	4b11      	ldr	r3, [pc, #68]	; (800c19c <_dtoa_r+0xbd4>)
 800c158:	f7ff baa8 	b.w	800b6ac <_dtoa_r+0xe4>
 800c15c:	f1b9 0f00 	cmp.w	r9, #0
 800c160:	dc03      	bgt.n	800c16a <_dtoa_r+0xba2>
 800c162:	9b05      	ldr	r3, [sp, #20]
 800c164:	2b02      	cmp	r3, #2
 800c166:	f73f aec9 	bgt.w	800befc <_dtoa_r+0x934>
 800c16a:	9d00      	ldr	r5, [sp, #0]
 800c16c:	4631      	mov	r1, r6
 800c16e:	4658      	mov	r0, fp
 800c170:	f7ff f99e 	bl	800b4b0 <quorem>
 800c174:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c178:	f805 3b01 	strb.w	r3, [r5], #1
 800c17c:	9a00      	ldr	r2, [sp, #0]
 800c17e:	1aaa      	subs	r2, r5, r2
 800c180:	4591      	cmp	r9, r2
 800c182:	ddba      	ble.n	800c0fa <_dtoa_r+0xb32>
 800c184:	4659      	mov	r1, fp
 800c186:	2300      	movs	r3, #0
 800c188:	220a      	movs	r2, #10
 800c18a:	4620      	mov	r0, r4
 800c18c:	f000 fc0a 	bl	800c9a4 <__multadd>
 800c190:	4683      	mov	fp, r0
 800c192:	e7eb      	b.n	800c16c <_dtoa_r+0xba4>
 800c194:	0800e708 	.word	0x0800e708
 800c198:	0800e574 	.word	0x0800e574
 800c19c:	0800e69c 	.word	0x0800e69c

0800c1a0 <fiprintf>:
 800c1a0:	b40e      	push	{r1, r2, r3}
 800c1a2:	b503      	push	{r0, r1, lr}
 800c1a4:	4601      	mov	r1, r0
 800c1a6:	ab03      	add	r3, sp, #12
 800c1a8:	4805      	ldr	r0, [pc, #20]	; (800c1c0 <fiprintf+0x20>)
 800c1aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1ae:	6800      	ldr	r0, [r0, #0]
 800c1b0:	9301      	str	r3, [sp, #4]
 800c1b2:	f001 fa8f 	bl	800d6d4 <_vfiprintf_r>
 800c1b6:	b002      	add	sp, #8
 800c1b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1bc:	b003      	add	sp, #12
 800c1be:	4770      	bx	lr
 800c1c0:	20000014 	.word	0x20000014

0800c1c4 <rshift>:
 800c1c4:	6903      	ldr	r3, [r0, #16]
 800c1c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c1ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c1d2:	f100 0414 	add.w	r4, r0, #20
 800c1d6:	dd45      	ble.n	800c264 <rshift+0xa0>
 800c1d8:	f011 011f 	ands.w	r1, r1, #31
 800c1dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c1e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c1e4:	d10c      	bne.n	800c200 <rshift+0x3c>
 800c1e6:	f100 0710 	add.w	r7, r0, #16
 800c1ea:	4629      	mov	r1, r5
 800c1ec:	42b1      	cmp	r1, r6
 800c1ee:	d334      	bcc.n	800c25a <rshift+0x96>
 800c1f0:	1a9b      	subs	r3, r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	1eea      	subs	r2, r5, #3
 800c1f6:	4296      	cmp	r6, r2
 800c1f8:	bf38      	it	cc
 800c1fa:	2300      	movcc	r3, #0
 800c1fc:	4423      	add	r3, r4
 800c1fe:	e015      	b.n	800c22c <rshift+0x68>
 800c200:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c204:	f1c1 0820 	rsb	r8, r1, #32
 800c208:	40cf      	lsrs	r7, r1
 800c20a:	f105 0e04 	add.w	lr, r5, #4
 800c20e:	46a1      	mov	r9, r4
 800c210:	4576      	cmp	r6, lr
 800c212:	46f4      	mov	ip, lr
 800c214:	d815      	bhi.n	800c242 <rshift+0x7e>
 800c216:	1a9b      	subs	r3, r3, r2
 800c218:	009a      	lsls	r2, r3, #2
 800c21a:	3a04      	subs	r2, #4
 800c21c:	3501      	adds	r5, #1
 800c21e:	42ae      	cmp	r6, r5
 800c220:	bf38      	it	cc
 800c222:	2200      	movcc	r2, #0
 800c224:	18a3      	adds	r3, r4, r2
 800c226:	50a7      	str	r7, [r4, r2]
 800c228:	b107      	cbz	r7, 800c22c <rshift+0x68>
 800c22a:	3304      	adds	r3, #4
 800c22c:	1b1a      	subs	r2, r3, r4
 800c22e:	42a3      	cmp	r3, r4
 800c230:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c234:	bf08      	it	eq
 800c236:	2300      	moveq	r3, #0
 800c238:	6102      	str	r2, [r0, #16]
 800c23a:	bf08      	it	eq
 800c23c:	6143      	streq	r3, [r0, #20]
 800c23e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c242:	f8dc c000 	ldr.w	ip, [ip]
 800c246:	fa0c fc08 	lsl.w	ip, ip, r8
 800c24a:	ea4c 0707 	orr.w	r7, ip, r7
 800c24e:	f849 7b04 	str.w	r7, [r9], #4
 800c252:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c256:	40cf      	lsrs	r7, r1
 800c258:	e7da      	b.n	800c210 <rshift+0x4c>
 800c25a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c25e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c262:	e7c3      	b.n	800c1ec <rshift+0x28>
 800c264:	4623      	mov	r3, r4
 800c266:	e7e1      	b.n	800c22c <rshift+0x68>

0800c268 <__hexdig_fun>:
 800c268:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c26c:	2b09      	cmp	r3, #9
 800c26e:	d802      	bhi.n	800c276 <__hexdig_fun+0xe>
 800c270:	3820      	subs	r0, #32
 800c272:	b2c0      	uxtb	r0, r0
 800c274:	4770      	bx	lr
 800c276:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c27a:	2b05      	cmp	r3, #5
 800c27c:	d801      	bhi.n	800c282 <__hexdig_fun+0x1a>
 800c27e:	3847      	subs	r0, #71	; 0x47
 800c280:	e7f7      	b.n	800c272 <__hexdig_fun+0xa>
 800c282:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c286:	2b05      	cmp	r3, #5
 800c288:	d801      	bhi.n	800c28e <__hexdig_fun+0x26>
 800c28a:	3827      	subs	r0, #39	; 0x27
 800c28c:	e7f1      	b.n	800c272 <__hexdig_fun+0xa>
 800c28e:	2000      	movs	r0, #0
 800c290:	4770      	bx	lr
	...

0800c294 <__gethex>:
 800c294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c298:	ed2d 8b02 	vpush	{d8}
 800c29c:	b089      	sub	sp, #36	; 0x24
 800c29e:	ee08 0a10 	vmov	s16, r0
 800c2a2:	9304      	str	r3, [sp, #16]
 800c2a4:	4bbc      	ldr	r3, [pc, #752]	; (800c598 <__gethex+0x304>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	9301      	str	r3, [sp, #4]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	468b      	mov	fp, r1
 800c2ae:	4690      	mov	r8, r2
 800c2b0:	f7f3 ff96 	bl	80001e0 <strlen>
 800c2b4:	9b01      	ldr	r3, [sp, #4]
 800c2b6:	f8db 2000 	ldr.w	r2, [fp]
 800c2ba:	4403      	add	r3, r0
 800c2bc:	4682      	mov	sl, r0
 800c2be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c2c2:	9305      	str	r3, [sp, #20]
 800c2c4:	1c93      	adds	r3, r2, #2
 800c2c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c2ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c2ce:	32fe      	adds	r2, #254	; 0xfe
 800c2d0:	18d1      	adds	r1, r2, r3
 800c2d2:	461f      	mov	r7, r3
 800c2d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c2d8:	9100      	str	r1, [sp, #0]
 800c2da:	2830      	cmp	r0, #48	; 0x30
 800c2dc:	d0f8      	beq.n	800c2d0 <__gethex+0x3c>
 800c2de:	f7ff ffc3 	bl	800c268 <__hexdig_fun>
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	d13a      	bne.n	800c35e <__gethex+0xca>
 800c2e8:	9901      	ldr	r1, [sp, #4]
 800c2ea:	4652      	mov	r2, sl
 800c2ec:	4638      	mov	r0, r7
 800c2ee:	f001 fb3b 	bl	800d968 <strncmp>
 800c2f2:	4605      	mov	r5, r0
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d168      	bne.n	800c3ca <__gethex+0x136>
 800c2f8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c2fc:	eb07 060a 	add.w	r6, r7, sl
 800c300:	f7ff ffb2 	bl	800c268 <__hexdig_fun>
 800c304:	2800      	cmp	r0, #0
 800c306:	d062      	beq.n	800c3ce <__gethex+0x13a>
 800c308:	4633      	mov	r3, r6
 800c30a:	7818      	ldrb	r0, [r3, #0]
 800c30c:	2830      	cmp	r0, #48	; 0x30
 800c30e:	461f      	mov	r7, r3
 800c310:	f103 0301 	add.w	r3, r3, #1
 800c314:	d0f9      	beq.n	800c30a <__gethex+0x76>
 800c316:	f7ff ffa7 	bl	800c268 <__hexdig_fun>
 800c31a:	2301      	movs	r3, #1
 800c31c:	fab0 f480 	clz	r4, r0
 800c320:	0964      	lsrs	r4, r4, #5
 800c322:	4635      	mov	r5, r6
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	463a      	mov	r2, r7
 800c328:	4616      	mov	r6, r2
 800c32a:	3201      	adds	r2, #1
 800c32c:	7830      	ldrb	r0, [r6, #0]
 800c32e:	f7ff ff9b 	bl	800c268 <__hexdig_fun>
 800c332:	2800      	cmp	r0, #0
 800c334:	d1f8      	bne.n	800c328 <__gethex+0x94>
 800c336:	9901      	ldr	r1, [sp, #4]
 800c338:	4652      	mov	r2, sl
 800c33a:	4630      	mov	r0, r6
 800c33c:	f001 fb14 	bl	800d968 <strncmp>
 800c340:	b980      	cbnz	r0, 800c364 <__gethex+0xd0>
 800c342:	b94d      	cbnz	r5, 800c358 <__gethex+0xc4>
 800c344:	eb06 050a 	add.w	r5, r6, sl
 800c348:	462a      	mov	r2, r5
 800c34a:	4616      	mov	r6, r2
 800c34c:	3201      	adds	r2, #1
 800c34e:	7830      	ldrb	r0, [r6, #0]
 800c350:	f7ff ff8a 	bl	800c268 <__hexdig_fun>
 800c354:	2800      	cmp	r0, #0
 800c356:	d1f8      	bne.n	800c34a <__gethex+0xb6>
 800c358:	1bad      	subs	r5, r5, r6
 800c35a:	00ad      	lsls	r5, r5, #2
 800c35c:	e004      	b.n	800c368 <__gethex+0xd4>
 800c35e:	2400      	movs	r4, #0
 800c360:	4625      	mov	r5, r4
 800c362:	e7e0      	b.n	800c326 <__gethex+0x92>
 800c364:	2d00      	cmp	r5, #0
 800c366:	d1f7      	bne.n	800c358 <__gethex+0xc4>
 800c368:	7833      	ldrb	r3, [r6, #0]
 800c36a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c36e:	2b50      	cmp	r3, #80	; 0x50
 800c370:	d13b      	bne.n	800c3ea <__gethex+0x156>
 800c372:	7873      	ldrb	r3, [r6, #1]
 800c374:	2b2b      	cmp	r3, #43	; 0x2b
 800c376:	d02c      	beq.n	800c3d2 <__gethex+0x13e>
 800c378:	2b2d      	cmp	r3, #45	; 0x2d
 800c37a:	d02e      	beq.n	800c3da <__gethex+0x146>
 800c37c:	1c71      	adds	r1, r6, #1
 800c37e:	f04f 0900 	mov.w	r9, #0
 800c382:	7808      	ldrb	r0, [r1, #0]
 800c384:	f7ff ff70 	bl	800c268 <__hexdig_fun>
 800c388:	1e43      	subs	r3, r0, #1
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	2b18      	cmp	r3, #24
 800c38e:	d82c      	bhi.n	800c3ea <__gethex+0x156>
 800c390:	f1a0 0210 	sub.w	r2, r0, #16
 800c394:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c398:	f7ff ff66 	bl	800c268 <__hexdig_fun>
 800c39c:	1e43      	subs	r3, r0, #1
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	2b18      	cmp	r3, #24
 800c3a2:	d91d      	bls.n	800c3e0 <__gethex+0x14c>
 800c3a4:	f1b9 0f00 	cmp.w	r9, #0
 800c3a8:	d000      	beq.n	800c3ac <__gethex+0x118>
 800c3aa:	4252      	negs	r2, r2
 800c3ac:	4415      	add	r5, r2
 800c3ae:	f8cb 1000 	str.w	r1, [fp]
 800c3b2:	b1e4      	cbz	r4, 800c3ee <__gethex+0x15a>
 800c3b4:	9b00      	ldr	r3, [sp, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	bf14      	ite	ne
 800c3ba:	2700      	movne	r7, #0
 800c3bc:	2706      	moveq	r7, #6
 800c3be:	4638      	mov	r0, r7
 800c3c0:	b009      	add	sp, #36	; 0x24
 800c3c2:	ecbd 8b02 	vpop	{d8}
 800c3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ca:	463e      	mov	r6, r7
 800c3cc:	4625      	mov	r5, r4
 800c3ce:	2401      	movs	r4, #1
 800c3d0:	e7ca      	b.n	800c368 <__gethex+0xd4>
 800c3d2:	f04f 0900 	mov.w	r9, #0
 800c3d6:	1cb1      	adds	r1, r6, #2
 800c3d8:	e7d3      	b.n	800c382 <__gethex+0xee>
 800c3da:	f04f 0901 	mov.w	r9, #1
 800c3de:	e7fa      	b.n	800c3d6 <__gethex+0x142>
 800c3e0:	230a      	movs	r3, #10
 800c3e2:	fb03 0202 	mla	r2, r3, r2, r0
 800c3e6:	3a10      	subs	r2, #16
 800c3e8:	e7d4      	b.n	800c394 <__gethex+0x100>
 800c3ea:	4631      	mov	r1, r6
 800c3ec:	e7df      	b.n	800c3ae <__gethex+0x11a>
 800c3ee:	1bf3      	subs	r3, r6, r7
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	4621      	mov	r1, r4
 800c3f4:	2b07      	cmp	r3, #7
 800c3f6:	dc0b      	bgt.n	800c410 <__gethex+0x17c>
 800c3f8:	ee18 0a10 	vmov	r0, s16
 800c3fc:	f000 fa70 	bl	800c8e0 <_Balloc>
 800c400:	4604      	mov	r4, r0
 800c402:	b940      	cbnz	r0, 800c416 <__gethex+0x182>
 800c404:	4b65      	ldr	r3, [pc, #404]	; (800c59c <__gethex+0x308>)
 800c406:	4602      	mov	r2, r0
 800c408:	21de      	movs	r1, #222	; 0xde
 800c40a:	4865      	ldr	r0, [pc, #404]	; (800c5a0 <__gethex+0x30c>)
 800c40c:	f7ff f832 	bl	800b474 <__assert_func>
 800c410:	3101      	adds	r1, #1
 800c412:	105b      	asrs	r3, r3, #1
 800c414:	e7ee      	b.n	800c3f4 <__gethex+0x160>
 800c416:	f100 0914 	add.w	r9, r0, #20
 800c41a:	f04f 0b00 	mov.w	fp, #0
 800c41e:	f1ca 0301 	rsb	r3, sl, #1
 800c422:	f8cd 9008 	str.w	r9, [sp, #8]
 800c426:	f8cd b000 	str.w	fp, [sp]
 800c42a:	9306      	str	r3, [sp, #24]
 800c42c:	42b7      	cmp	r7, r6
 800c42e:	d340      	bcc.n	800c4b2 <__gethex+0x21e>
 800c430:	9802      	ldr	r0, [sp, #8]
 800c432:	9b00      	ldr	r3, [sp, #0]
 800c434:	f840 3b04 	str.w	r3, [r0], #4
 800c438:	eba0 0009 	sub.w	r0, r0, r9
 800c43c:	1080      	asrs	r0, r0, #2
 800c43e:	0146      	lsls	r6, r0, #5
 800c440:	6120      	str	r0, [r4, #16]
 800c442:	4618      	mov	r0, r3
 800c444:	f000 fb42 	bl	800cacc <__hi0bits>
 800c448:	1a30      	subs	r0, r6, r0
 800c44a:	f8d8 6000 	ldr.w	r6, [r8]
 800c44e:	42b0      	cmp	r0, r6
 800c450:	dd63      	ble.n	800c51a <__gethex+0x286>
 800c452:	1b87      	subs	r7, r0, r6
 800c454:	4639      	mov	r1, r7
 800c456:	4620      	mov	r0, r4
 800c458:	f000 fedc 	bl	800d214 <__any_on>
 800c45c:	4682      	mov	sl, r0
 800c45e:	b1a8      	cbz	r0, 800c48c <__gethex+0x1f8>
 800c460:	1e7b      	subs	r3, r7, #1
 800c462:	1159      	asrs	r1, r3, #5
 800c464:	f003 021f 	and.w	r2, r3, #31
 800c468:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c46c:	f04f 0a01 	mov.w	sl, #1
 800c470:	fa0a f202 	lsl.w	r2, sl, r2
 800c474:	420a      	tst	r2, r1
 800c476:	d009      	beq.n	800c48c <__gethex+0x1f8>
 800c478:	4553      	cmp	r3, sl
 800c47a:	dd05      	ble.n	800c488 <__gethex+0x1f4>
 800c47c:	1eb9      	subs	r1, r7, #2
 800c47e:	4620      	mov	r0, r4
 800c480:	f000 fec8 	bl	800d214 <__any_on>
 800c484:	2800      	cmp	r0, #0
 800c486:	d145      	bne.n	800c514 <__gethex+0x280>
 800c488:	f04f 0a02 	mov.w	sl, #2
 800c48c:	4639      	mov	r1, r7
 800c48e:	4620      	mov	r0, r4
 800c490:	f7ff fe98 	bl	800c1c4 <rshift>
 800c494:	443d      	add	r5, r7
 800c496:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c49a:	42ab      	cmp	r3, r5
 800c49c:	da4c      	bge.n	800c538 <__gethex+0x2a4>
 800c49e:	ee18 0a10 	vmov	r0, s16
 800c4a2:	4621      	mov	r1, r4
 800c4a4:	f000 fa5c 	bl	800c960 <_Bfree>
 800c4a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	6013      	str	r3, [r2, #0]
 800c4ae:	27a3      	movs	r7, #163	; 0xa3
 800c4b0:	e785      	b.n	800c3be <__gethex+0x12a>
 800c4b2:	1e73      	subs	r3, r6, #1
 800c4b4:	9a05      	ldr	r2, [sp, #20]
 800c4b6:	9303      	str	r3, [sp, #12]
 800c4b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d019      	beq.n	800c4f4 <__gethex+0x260>
 800c4c0:	f1bb 0f20 	cmp.w	fp, #32
 800c4c4:	d107      	bne.n	800c4d6 <__gethex+0x242>
 800c4c6:	9b02      	ldr	r3, [sp, #8]
 800c4c8:	9a00      	ldr	r2, [sp, #0]
 800c4ca:	f843 2b04 	str.w	r2, [r3], #4
 800c4ce:	9302      	str	r3, [sp, #8]
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	9300      	str	r3, [sp, #0]
 800c4d4:	469b      	mov	fp, r3
 800c4d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c4da:	f7ff fec5 	bl	800c268 <__hexdig_fun>
 800c4de:	9b00      	ldr	r3, [sp, #0]
 800c4e0:	f000 000f 	and.w	r0, r0, #15
 800c4e4:	fa00 f00b 	lsl.w	r0, r0, fp
 800c4e8:	4303      	orrs	r3, r0
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	f10b 0b04 	add.w	fp, fp, #4
 800c4f0:	9b03      	ldr	r3, [sp, #12]
 800c4f2:	e00d      	b.n	800c510 <__gethex+0x27c>
 800c4f4:	9b03      	ldr	r3, [sp, #12]
 800c4f6:	9a06      	ldr	r2, [sp, #24]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	42bb      	cmp	r3, r7
 800c4fc:	d3e0      	bcc.n	800c4c0 <__gethex+0x22c>
 800c4fe:	4618      	mov	r0, r3
 800c500:	9901      	ldr	r1, [sp, #4]
 800c502:	9307      	str	r3, [sp, #28]
 800c504:	4652      	mov	r2, sl
 800c506:	f001 fa2f 	bl	800d968 <strncmp>
 800c50a:	9b07      	ldr	r3, [sp, #28]
 800c50c:	2800      	cmp	r0, #0
 800c50e:	d1d7      	bne.n	800c4c0 <__gethex+0x22c>
 800c510:	461e      	mov	r6, r3
 800c512:	e78b      	b.n	800c42c <__gethex+0x198>
 800c514:	f04f 0a03 	mov.w	sl, #3
 800c518:	e7b8      	b.n	800c48c <__gethex+0x1f8>
 800c51a:	da0a      	bge.n	800c532 <__gethex+0x29e>
 800c51c:	1a37      	subs	r7, r6, r0
 800c51e:	4621      	mov	r1, r4
 800c520:	ee18 0a10 	vmov	r0, s16
 800c524:	463a      	mov	r2, r7
 800c526:	f000 fc37 	bl	800cd98 <__lshift>
 800c52a:	1bed      	subs	r5, r5, r7
 800c52c:	4604      	mov	r4, r0
 800c52e:	f100 0914 	add.w	r9, r0, #20
 800c532:	f04f 0a00 	mov.w	sl, #0
 800c536:	e7ae      	b.n	800c496 <__gethex+0x202>
 800c538:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c53c:	42a8      	cmp	r0, r5
 800c53e:	dd72      	ble.n	800c626 <__gethex+0x392>
 800c540:	1b45      	subs	r5, r0, r5
 800c542:	42ae      	cmp	r6, r5
 800c544:	dc36      	bgt.n	800c5b4 <__gethex+0x320>
 800c546:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	d02a      	beq.n	800c5a4 <__gethex+0x310>
 800c54e:	2b03      	cmp	r3, #3
 800c550:	d02c      	beq.n	800c5ac <__gethex+0x318>
 800c552:	2b01      	cmp	r3, #1
 800c554:	d115      	bne.n	800c582 <__gethex+0x2ee>
 800c556:	42ae      	cmp	r6, r5
 800c558:	d113      	bne.n	800c582 <__gethex+0x2ee>
 800c55a:	2e01      	cmp	r6, #1
 800c55c:	d10b      	bne.n	800c576 <__gethex+0x2e2>
 800c55e:	9a04      	ldr	r2, [sp, #16]
 800c560:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c564:	6013      	str	r3, [r2, #0]
 800c566:	2301      	movs	r3, #1
 800c568:	6123      	str	r3, [r4, #16]
 800c56a:	f8c9 3000 	str.w	r3, [r9]
 800c56e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c570:	2762      	movs	r7, #98	; 0x62
 800c572:	601c      	str	r4, [r3, #0]
 800c574:	e723      	b.n	800c3be <__gethex+0x12a>
 800c576:	1e71      	subs	r1, r6, #1
 800c578:	4620      	mov	r0, r4
 800c57a:	f000 fe4b 	bl	800d214 <__any_on>
 800c57e:	2800      	cmp	r0, #0
 800c580:	d1ed      	bne.n	800c55e <__gethex+0x2ca>
 800c582:	ee18 0a10 	vmov	r0, s16
 800c586:	4621      	mov	r1, r4
 800c588:	f000 f9ea 	bl	800c960 <_Bfree>
 800c58c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c58e:	2300      	movs	r3, #0
 800c590:	6013      	str	r3, [r2, #0]
 800c592:	2750      	movs	r7, #80	; 0x50
 800c594:	e713      	b.n	800c3be <__gethex+0x12a>
 800c596:	bf00      	nop
 800c598:	0800e784 	.word	0x0800e784
 800c59c:	0800e708 	.word	0x0800e708
 800c5a0:	0800e719 	.word	0x0800e719
 800c5a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1eb      	bne.n	800c582 <__gethex+0x2ee>
 800c5aa:	e7d8      	b.n	800c55e <__gethex+0x2ca>
 800c5ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d1d5      	bne.n	800c55e <__gethex+0x2ca>
 800c5b2:	e7e6      	b.n	800c582 <__gethex+0x2ee>
 800c5b4:	1e6f      	subs	r7, r5, #1
 800c5b6:	f1ba 0f00 	cmp.w	sl, #0
 800c5ba:	d131      	bne.n	800c620 <__gethex+0x38c>
 800c5bc:	b127      	cbz	r7, 800c5c8 <__gethex+0x334>
 800c5be:	4639      	mov	r1, r7
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	f000 fe27 	bl	800d214 <__any_on>
 800c5c6:	4682      	mov	sl, r0
 800c5c8:	117b      	asrs	r3, r7, #5
 800c5ca:	2101      	movs	r1, #1
 800c5cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c5d0:	f007 071f 	and.w	r7, r7, #31
 800c5d4:	fa01 f707 	lsl.w	r7, r1, r7
 800c5d8:	421f      	tst	r7, r3
 800c5da:	4629      	mov	r1, r5
 800c5dc:	4620      	mov	r0, r4
 800c5de:	bf18      	it	ne
 800c5e0:	f04a 0a02 	orrne.w	sl, sl, #2
 800c5e4:	1b76      	subs	r6, r6, r5
 800c5e6:	f7ff fded 	bl	800c1c4 <rshift>
 800c5ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c5ee:	2702      	movs	r7, #2
 800c5f0:	f1ba 0f00 	cmp.w	sl, #0
 800c5f4:	d048      	beq.n	800c688 <__gethex+0x3f4>
 800c5f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d015      	beq.n	800c62a <__gethex+0x396>
 800c5fe:	2b03      	cmp	r3, #3
 800c600:	d017      	beq.n	800c632 <__gethex+0x39e>
 800c602:	2b01      	cmp	r3, #1
 800c604:	d109      	bne.n	800c61a <__gethex+0x386>
 800c606:	f01a 0f02 	tst.w	sl, #2
 800c60a:	d006      	beq.n	800c61a <__gethex+0x386>
 800c60c:	f8d9 0000 	ldr.w	r0, [r9]
 800c610:	ea4a 0a00 	orr.w	sl, sl, r0
 800c614:	f01a 0f01 	tst.w	sl, #1
 800c618:	d10e      	bne.n	800c638 <__gethex+0x3a4>
 800c61a:	f047 0710 	orr.w	r7, r7, #16
 800c61e:	e033      	b.n	800c688 <__gethex+0x3f4>
 800c620:	f04f 0a01 	mov.w	sl, #1
 800c624:	e7d0      	b.n	800c5c8 <__gethex+0x334>
 800c626:	2701      	movs	r7, #1
 800c628:	e7e2      	b.n	800c5f0 <__gethex+0x35c>
 800c62a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c62c:	f1c3 0301 	rsb	r3, r3, #1
 800c630:	9315      	str	r3, [sp, #84]	; 0x54
 800c632:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c634:	2b00      	cmp	r3, #0
 800c636:	d0f0      	beq.n	800c61a <__gethex+0x386>
 800c638:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c63c:	f104 0314 	add.w	r3, r4, #20
 800c640:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c644:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c648:	f04f 0c00 	mov.w	ip, #0
 800c64c:	4618      	mov	r0, r3
 800c64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c652:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c656:	d01c      	beq.n	800c692 <__gethex+0x3fe>
 800c658:	3201      	adds	r2, #1
 800c65a:	6002      	str	r2, [r0, #0]
 800c65c:	2f02      	cmp	r7, #2
 800c65e:	f104 0314 	add.w	r3, r4, #20
 800c662:	d13f      	bne.n	800c6e4 <__gethex+0x450>
 800c664:	f8d8 2000 	ldr.w	r2, [r8]
 800c668:	3a01      	subs	r2, #1
 800c66a:	42b2      	cmp	r2, r6
 800c66c:	d10a      	bne.n	800c684 <__gethex+0x3f0>
 800c66e:	1171      	asrs	r1, r6, #5
 800c670:	2201      	movs	r2, #1
 800c672:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c676:	f006 061f 	and.w	r6, r6, #31
 800c67a:	fa02 f606 	lsl.w	r6, r2, r6
 800c67e:	421e      	tst	r6, r3
 800c680:	bf18      	it	ne
 800c682:	4617      	movne	r7, r2
 800c684:	f047 0720 	orr.w	r7, r7, #32
 800c688:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c68a:	601c      	str	r4, [r3, #0]
 800c68c:	9b04      	ldr	r3, [sp, #16]
 800c68e:	601d      	str	r5, [r3, #0]
 800c690:	e695      	b.n	800c3be <__gethex+0x12a>
 800c692:	4299      	cmp	r1, r3
 800c694:	f843 cc04 	str.w	ip, [r3, #-4]
 800c698:	d8d8      	bhi.n	800c64c <__gethex+0x3b8>
 800c69a:	68a3      	ldr	r3, [r4, #8]
 800c69c:	459b      	cmp	fp, r3
 800c69e:	db19      	blt.n	800c6d4 <__gethex+0x440>
 800c6a0:	6861      	ldr	r1, [r4, #4]
 800c6a2:	ee18 0a10 	vmov	r0, s16
 800c6a6:	3101      	adds	r1, #1
 800c6a8:	f000 f91a 	bl	800c8e0 <_Balloc>
 800c6ac:	4681      	mov	r9, r0
 800c6ae:	b918      	cbnz	r0, 800c6b8 <__gethex+0x424>
 800c6b0:	4b1a      	ldr	r3, [pc, #104]	; (800c71c <__gethex+0x488>)
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	2184      	movs	r1, #132	; 0x84
 800c6b6:	e6a8      	b.n	800c40a <__gethex+0x176>
 800c6b8:	6922      	ldr	r2, [r4, #16]
 800c6ba:	3202      	adds	r2, #2
 800c6bc:	f104 010c 	add.w	r1, r4, #12
 800c6c0:	0092      	lsls	r2, r2, #2
 800c6c2:	300c      	adds	r0, #12
 800c6c4:	f7fd fb48 	bl	8009d58 <memcpy>
 800c6c8:	4621      	mov	r1, r4
 800c6ca:	ee18 0a10 	vmov	r0, s16
 800c6ce:	f000 f947 	bl	800c960 <_Bfree>
 800c6d2:	464c      	mov	r4, r9
 800c6d4:	6923      	ldr	r3, [r4, #16]
 800c6d6:	1c5a      	adds	r2, r3, #1
 800c6d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c6dc:	6122      	str	r2, [r4, #16]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	615a      	str	r2, [r3, #20]
 800c6e2:	e7bb      	b.n	800c65c <__gethex+0x3c8>
 800c6e4:	6922      	ldr	r2, [r4, #16]
 800c6e6:	455a      	cmp	r2, fp
 800c6e8:	dd0b      	ble.n	800c702 <__gethex+0x46e>
 800c6ea:	2101      	movs	r1, #1
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f7ff fd69 	bl	800c1c4 <rshift>
 800c6f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6f6:	3501      	adds	r5, #1
 800c6f8:	42ab      	cmp	r3, r5
 800c6fa:	f6ff aed0 	blt.w	800c49e <__gethex+0x20a>
 800c6fe:	2701      	movs	r7, #1
 800c700:	e7c0      	b.n	800c684 <__gethex+0x3f0>
 800c702:	f016 061f 	ands.w	r6, r6, #31
 800c706:	d0fa      	beq.n	800c6fe <__gethex+0x46a>
 800c708:	449a      	add	sl, r3
 800c70a:	f1c6 0620 	rsb	r6, r6, #32
 800c70e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c712:	f000 f9db 	bl	800cacc <__hi0bits>
 800c716:	42b0      	cmp	r0, r6
 800c718:	dbe7      	blt.n	800c6ea <__gethex+0x456>
 800c71a:	e7f0      	b.n	800c6fe <__gethex+0x46a>
 800c71c:	0800e708 	.word	0x0800e708

0800c720 <L_shift>:
 800c720:	f1c2 0208 	rsb	r2, r2, #8
 800c724:	0092      	lsls	r2, r2, #2
 800c726:	b570      	push	{r4, r5, r6, lr}
 800c728:	f1c2 0620 	rsb	r6, r2, #32
 800c72c:	6843      	ldr	r3, [r0, #4]
 800c72e:	6804      	ldr	r4, [r0, #0]
 800c730:	fa03 f506 	lsl.w	r5, r3, r6
 800c734:	432c      	orrs	r4, r5
 800c736:	40d3      	lsrs	r3, r2
 800c738:	6004      	str	r4, [r0, #0]
 800c73a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c73e:	4288      	cmp	r0, r1
 800c740:	d3f4      	bcc.n	800c72c <L_shift+0xc>
 800c742:	bd70      	pop	{r4, r5, r6, pc}

0800c744 <__match>:
 800c744:	b530      	push	{r4, r5, lr}
 800c746:	6803      	ldr	r3, [r0, #0]
 800c748:	3301      	adds	r3, #1
 800c74a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c74e:	b914      	cbnz	r4, 800c756 <__match+0x12>
 800c750:	6003      	str	r3, [r0, #0]
 800c752:	2001      	movs	r0, #1
 800c754:	bd30      	pop	{r4, r5, pc}
 800c756:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c75a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c75e:	2d19      	cmp	r5, #25
 800c760:	bf98      	it	ls
 800c762:	3220      	addls	r2, #32
 800c764:	42a2      	cmp	r2, r4
 800c766:	d0f0      	beq.n	800c74a <__match+0x6>
 800c768:	2000      	movs	r0, #0
 800c76a:	e7f3      	b.n	800c754 <__match+0x10>

0800c76c <__hexnan>:
 800c76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c770:	680b      	ldr	r3, [r1, #0]
 800c772:	6801      	ldr	r1, [r0, #0]
 800c774:	115e      	asrs	r6, r3, #5
 800c776:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c77a:	f013 031f 	ands.w	r3, r3, #31
 800c77e:	b087      	sub	sp, #28
 800c780:	bf18      	it	ne
 800c782:	3604      	addne	r6, #4
 800c784:	2500      	movs	r5, #0
 800c786:	1f37      	subs	r7, r6, #4
 800c788:	4682      	mov	sl, r0
 800c78a:	4690      	mov	r8, r2
 800c78c:	9301      	str	r3, [sp, #4]
 800c78e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c792:	46b9      	mov	r9, r7
 800c794:	463c      	mov	r4, r7
 800c796:	9502      	str	r5, [sp, #8]
 800c798:	46ab      	mov	fp, r5
 800c79a:	784a      	ldrb	r2, [r1, #1]
 800c79c:	1c4b      	adds	r3, r1, #1
 800c79e:	9303      	str	r3, [sp, #12]
 800c7a0:	b342      	cbz	r2, 800c7f4 <__hexnan+0x88>
 800c7a2:	4610      	mov	r0, r2
 800c7a4:	9105      	str	r1, [sp, #20]
 800c7a6:	9204      	str	r2, [sp, #16]
 800c7a8:	f7ff fd5e 	bl	800c268 <__hexdig_fun>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	d14f      	bne.n	800c850 <__hexnan+0xe4>
 800c7b0:	9a04      	ldr	r2, [sp, #16]
 800c7b2:	9905      	ldr	r1, [sp, #20]
 800c7b4:	2a20      	cmp	r2, #32
 800c7b6:	d818      	bhi.n	800c7ea <__hexnan+0x7e>
 800c7b8:	9b02      	ldr	r3, [sp, #8]
 800c7ba:	459b      	cmp	fp, r3
 800c7bc:	dd13      	ble.n	800c7e6 <__hexnan+0x7a>
 800c7be:	454c      	cmp	r4, r9
 800c7c0:	d206      	bcs.n	800c7d0 <__hexnan+0x64>
 800c7c2:	2d07      	cmp	r5, #7
 800c7c4:	dc04      	bgt.n	800c7d0 <__hexnan+0x64>
 800c7c6:	462a      	mov	r2, r5
 800c7c8:	4649      	mov	r1, r9
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f7ff ffa8 	bl	800c720 <L_shift>
 800c7d0:	4544      	cmp	r4, r8
 800c7d2:	d950      	bls.n	800c876 <__hexnan+0x10a>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	f1a4 0904 	sub.w	r9, r4, #4
 800c7da:	f844 3c04 	str.w	r3, [r4, #-4]
 800c7de:	f8cd b008 	str.w	fp, [sp, #8]
 800c7e2:	464c      	mov	r4, r9
 800c7e4:	461d      	mov	r5, r3
 800c7e6:	9903      	ldr	r1, [sp, #12]
 800c7e8:	e7d7      	b.n	800c79a <__hexnan+0x2e>
 800c7ea:	2a29      	cmp	r2, #41	; 0x29
 800c7ec:	d156      	bne.n	800c89c <__hexnan+0x130>
 800c7ee:	3102      	adds	r1, #2
 800c7f0:	f8ca 1000 	str.w	r1, [sl]
 800c7f4:	f1bb 0f00 	cmp.w	fp, #0
 800c7f8:	d050      	beq.n	800c89c <__hexnan+0x130>
 800c7fa:	454c      	cmp	r4, r9
 800c7fc:	d206      	bcs.n	800c80c <__hexnan+0xa0>
 800c7fe:	2d07      	cmp	r5, #7
 800c800:	dc04      	bgt.n	800c80c <__hexnan+0xa0>
 800c802:	462a      	mov	r2, r5
 800c804:	4649      	mov	r1, r9
 800c806:	4620      	mov	r0, r4
 800c808:	f7ff ff8a 	bl	800c720 <L_shift>
 800c80c:	4544      	cmp	r4, r8
 800c80e:	d934      	bls.n	800c87a <__hexnan+0x10e>
 800c810:	f1a8 0204 	sub.w	r2, r8, #4
 800c814:	4623      	mov	r3, r4
 800c816:	f853 1b04 	ldr.w	r1, [r3], #4
 800c81a:	f842 1f04 	str.w	r1, [r2, #4]!
 800c81e:	429f      	cmp	r7, r3
 800c820:	d2f9      	bcs.n	800c816 <__hexnan+0xaa>
 800c822:	1b3b      	subs	r3, r7, r4
 800c824:	f023 0303 	bic.w	r3, r3, #3
 800c828:	3304      	adds	r3, #4
 800c82a:	3401      	adds	r4, #1
 800c82c:	3e03      	subs	r6, #3
 800c82e:	42b4      	cmp	r4, r6
 800c830:	bf88      	it	hi
 800c832:	2304      	movhi	r3, #4
 800c834:	4443      	add	r3, r8
 800c836:	2200      	movs	r2, #0
 800c838:	f843 2b04 	str.w	r2, [r3], #4
 800c83c:	429f      	cmp	r7, r3
 800c83e:	d2fb      	bcs.n	800c838 <__hexnan+0xcc>
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	b91b      	cbnz	r3, 800c84c <__hexnan+0xe0>
 800c844:	4547      	cmp	r7, r8
 800c846:	d127      	bne.n	800c898 <__hexnan+0x12c>
 800c848:	2301      	movs	r3, #1
 800c84a:	603b      	str	r3, [r7, #0]
 800c84c:	2005      	movs	r0, #5
 800c84e:	e026      	b.n	800c89e <__hexnan+0x132>
 800c850:	3501      	adds	r5, #1
 800c852:	2d08      	cmp	r5, #8
 800c854:	f10b 0b01 	add.w	fp, fp, #1
 800c858:	dd06      	ble.n	800c868 <__hexnan+0xfc>
 800c85a:	4544      	cmp	r4, r8
 800c85c:	d9c3      	bls.n	800c7e6 <__hexnan+0x7a>
 800c85e:	2300      	movs	r3, #0
 800c860:	f844 3c04 	str.w	r3, [r4, #-4]
 800c864:	2501      	movs	r5, #1
 800c866:	3c04      	subs	r4, #4
 800c868:	6822      	ldr	r2, [r4, #0]
 800c86a:	f000 000f 	and.w	r0, r0, #15
 800c86e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c872:	6022      	str	r2, [r4, #0]
 800c874:	e7b7      	b.n	800c7e6 <__hexnan+0x7a>
 800c876:	2508      	movs	r5, #8
 800c878:	e7b5      	b.n	800c7e6 <__hexnan+0x7a>
 800c87a:	9b01      	ldr	r3, [sp, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d0df      	beq.n	800c840 <__hexnan+0xd4>
 800c880:	f04f 32ff 	mov.w	r2, #4294967295
 800c884:	f1c3 0320 	rsb	r3, r3, #32
 800c888:	fa22 f303 	lsr.w	r3, r2, r3
 800c88c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c890:	401a      	ands	r2, r3
 800c892:	f846 2c04 	str.w	r2, [r6, #-4]
 800c896:	e7d3      	b.n	800c840 <__hexnan+0xd4>
 800c898:	3f04      	subs	r7, #4
 800c89a:	e7d1      	b.n	800c840 <__hexnan+0xd4>
 800c89c:	2004      	movs	r0, #4
 800c89e:	b007      	add	sp, #28
 800c8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c8a4 <_localeconv_r>:
 800c8a4:	4800      	ldr	r0, [pc, #0]	; (800c8a8 <_localeconv_r+0x4>)
 800c8a6:	4770      	bx	lr
 800c8a8:	2000016c 	.word	0x2000016c

0800c8ac <malloc>:
 800c8ac:	4b02      	ldr	r3, [pc, #8]	; (800c8b8 <malloc+0xc>)
 800c8ae:	4601      	mov	r1, r0
 800c8b0:	6818      	ldr	r0, [r3, #0]
 800c8b2:	f000 bd2f 	b.w	800d314 <_malloc_r>
 800c8b6:	bf00      	nop
 800c8b8:	20000014 	.word	0x20000014

0800c8bc <__ascii_mbtowc>:
 800c8bc:	b082      	sub	sp, #8
 800c8be:	b901      	cbnz	r1, 800c8c2 <__ascii_mbtowc+0x6>
 800c8c0:	a901      	add	r1, sp, #4
 800c8c2:	b142      	cbz	r2, 800c8d6 <__ascii_mbtowc+0x1a>
 800c8c4:	b14b      	cbz	r3, 800c8da <__ascii_mbtowc+0x1e>
 800c8c6:	7813      	ldrb	r3, [r2, #0]
 800c8c8:	600b      	str	r3, [r1, #0]
 800c8ca:	7812      	ldrb	r2, [r2, #0]
 800c8cc:	1e10      	subs	r0, r2, #0
 800c8ce:	bf18      	it	ne
 800c8d0:	2001      	movne	r0, #1
 800c8d2:	b002      	add	sp, #8
 800c8d4:	4770      	bx	lr
 800c8d6:	4610      	mov	r0, r2
 800c8d8:	e7fb      	b.n	800c8d2 <__ascii_mbtowc+0x16>
 800c8da:	f06f 0001 	mvn.w	r0, #1
 800c8de:	e7f8      	b.n	800c8d2 <__ascii_mbtowc+0x16>

0800c8e0 <_Balloc>:
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c8e4:	4604      	mov	r4, r0
 800c8e6:	460d      	mov	r5, r1
 800c8e8:	b976      	cbnz	r6, 800c908 <_Balloc+0x28>
 800c8ea:	2010      	movs	r0, #16
 800c8ec:	f7ff ffde 	bl	800c8ac <malloc>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	6260      	str	r0, [r4, #36]	; 0x24
 800c8f4:	b920      	cbnz	r0, 800c900 <_Balloc+0x20>
 800c8f6:	4b18      	ldr	r3, [pc, #96]	; (800c958 <_Balloc+0x78>)
 800c8f8:	4818      	ldr	r0, [pc, #96]	; (800c95c <_Balloc+0x7c>)
 800c8fa:	2166      	movs	r1, #102	; 0x66
 800c8fc:	f7fe fdba 	bl	800b474 <__assert_func>
 800c900:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c904:	6006      	str	r6, [r0, #0]
 800c906:	60c6      	str	r6, [r0, #12]
 800c908:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c90a:	68f3      	ldr	r3, [r6, #12]
 800c90c:	b183      	cbz	r3, 800c930 <_Balloc+0x50>
 800c90e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c916:	b9b8      	cbnz	r0, 800c948 <_Balloc+0x68>
 800c918:	2101      	movs	r1, #1
 800c91a:	fa01 f605 	lsl.w	r6, r1, r5
 800c91e:	1d72      	adds	r2, r6, #5
 800c920:	0092      	lsls	r2, r2, #2
 800c922:	4620      	mov	r0, r4
 800c924:	f000 fc97 	bl	800d256 <_calloc_r>
 800c928:	b160      	cbz	r0, 800c944 <_Balloc+0x64>
 800c92a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c92e:	e00e      	b.n	800c94e <_Balloc+0x6e>
 800c930:	2221      	movs	r2, #33	; 0x21
 800c932:	2104      	movs	r1, #4
 800c934:	4620      	mov	r0, r4
 800c936:	f000 fc8e 	bl	800d256 <_calloc_r>
 800c93a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c93c:	60f0      	str	r0, [r6, #12]
 800c93e:	68db      	ldr	r3, [r3, #12]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d1e4      	bne.n	800c90e <_Balloc+0x2e>
 800c944:	2000      	movs	r0, #0
 800c946:	bd70      	pop	{r4, r5, r6, pc}
 800c948:	6802      	ldr	r2, [r0, #0]
 800c94a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c94e:	2300      	movs	r3, #0
 800c950:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c954:	e7f7      	b.n	800c946 <_Balloc+0x66>
 800c956:	bf00      	nop
 800c958:	0800e5e8 	.word	0x0800e5e8
 800c95c:	0800e798 	.word	0x0800e798

0800c960 <_Bfree>:
 800c960:	b570      	push	{r4, r5, r6, lr}
 800c962:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c964:	4605      	mov	r5, r0
 800c966:	460c      	mov	r4, r1
 800c968:	b976      	cbnz	r6, 800c988 <_Bfree+0x28>
 800c96a:	2010      	movs	r0, #16
 800c96c:	f7ff ff9e 	bl	800c8ac <malloc>
 800c970:	4602      	mov	r2, r0
 800c972:	6268      	str	r0, [r5, #36]	; 0x24
 800c974:	b920      	cbnz	r0, 800c980 <_Bfree+0x20>
 800c976:	4b09      	ldr	r3, [pc, #36]	; (800c99c <_Bfree+0x3c>)
 800c978:	4809      	ldr	r0, [pc, #36]	; (800c9a0 <_Bfree+0x40>)
 800c97a:	218a      	movs	r1, #138	; 0x8a
 800c97c:	f7fe fd7a 	bl	800b474 <__assert_func>
 800c980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c984:	6006      	str	r6, [r0, #0]
 800c986:	60c6      	str	r6, [r0, #12]
 800c988:	b13c      	cbz	r4, 800c99a <_Bfree+0x3a>
 800c98a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c98c:	6862      	ldr	r2, [r4, #4]
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c994:	6021      	str	r1, [r4, #0]
 800c996:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c99a:	bd70      	pop	{r4, r5, r6, pc}
 800c99c:	0800e5e8 	.word	0x0800e5e8
 800c9a0:	0800e798 	.word	0x0800e798

0800c9a4 <__multadd>:
 800c9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a8:	690e      	ldr	r6, [r1, #16]
 800c9aa:	4607      	mov	r7, r0
 800c9ac:	4698      	mov	r8, r3
 800c9ae:	460c      	mov	r4, r1
 800c9b0:	f101 0014 	add.w	r0, r1, #20
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	6805      	ldr	r5, [r0, #0]
 800c9b8:	b2a9      	uxth	r1, r5
 800c9ba:	fb02 8101 	mla	r1, r2, r1, r8
 800c9be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c9c2:	0c2d      	lsrs	r5, r5, #16
 800c9c4:	fb02 c505 	mla	r5, r2, r5, ip
 800c9c8:	b289      	uxth	r1, r1
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c9d0:	429e      	cmp	r6, r3
 800c9d2:	f840 1b04 	str.w	r1, [r0], #4
 800c9d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c9da:	dcec      	bgt.n	800c9b6 <__multadd+0x12>
 800c9dc:	f1b8 0f00 	cmp.w	r8, #0
 800c9e0:	d022      	beq.n	800ca28 <__multadd+0x84>
 800c9e2:	68a3      	ldr	r3, [r4, #8]
 800c9e4:	42b3      	cmp	r3, r6
 800c9e6:	dc19      	bgt.n	800ca1c <__multadd+0x78>
 800c9e8:	6861      	ldr	r1, [r4, #4]
 800c9ea:	4638      	mov	r0, r7
 800c9ec:	3101      	adds	r1, #1
 800c9ee:	f7ff ff77 	bl	800c8e0 <_Balloc>
 800c9f2:	4605      	mov	r5, r0
 800c9f4:	b928      	cbnz	r0, 800ca02 <__multadd+0x5e>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	4b0d      	ldr	r3, [pc, #52]	; (800ca30 <__multadd+0x8c>)
 800c9fa:	480e      	ldr	r0, [pc, #56]	; (800ca34 <__multadd+0x90>)
 800c9fc:	21b5      	movs	r1, #181	; 0xb5
 800c9fe:	f7fe fd39 	bl	800b474 <__assert_func>
 800ca02:	6922      	ldr	r2, [r4, #16]
 800ca04:	3202      	adds	r2, #2
 800ca06:	f104 010c 	add.w	r1, r4, #12
 800ca0a:	0092      	lsls	r2, r2, #2
 800ca0c:	300c      	adds	r0, #12
 800ca0e:	f7fd f9a3 	bl	8009d58 <memcpy>
 800ca12:	4621      	mov	r1, r4
 800ca14:	4638      	mov	r0, r7
 800ca16:	f7ff ffa3 	bl	800c960 <_Bfree>
 800ca1a:	462c      	mov	r4, r5
 800ca1c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ca20:	3601      	adds	r6, #1
 800ca22:	f8c3 8014 	str.w	r8, [r3, #20]
 800ca26:	6126      	str	r6, [r4, #16]
 800ca28:	4620      	mov	r0, r4
 800ca2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca2e:	bf00      	nop
 800ca30:	0800e708 	.word	0x0800e708
 800ca34:	0800e798 	.word	0x0800e798

0800ca38 <__s2b>:
 800ca38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	4615      	mov	r5, r2
 800ca40:	461f      	mov	r7, r3
 800ca42:	2209      	movs	r2, #9
 800ca44:	3308      	adds	r3, #8
 800ca46:	4606      	mov	r6, r0
 800ca48:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca4c:	2100      	movs	r1, #0
 800ca4e:	2201      	movs	r2, #1
 800ca50:	429a      	cmp	r2, r3
 800ca52:	db09      	blt.n	800ca68 <__s2b+0x30>
 800ca54:	4630      	mov	r0, r6
 800ca56:	f7ff ff43 	bl	800c8e0 <_Balloc>
 800ca5a:	b940      	cbnz	r0, 800ca6e <__s2b+0x36>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	4b19      	ldr	r3, [pc, #100]	; (800cac4 <__s2b+0x8c>)
 800ca60:	4819      	ldr	r0, [pc, #100]	; (800cac8 <__s2b+0x90>)
 800ca62:	21ce      	movs	r1, #206	; 0xce
 800ca64:	f7fe fd06 	bl	800b474 <__assert_func>
 800ca68:	0052      	lsls	r2, r2, #1
 800ca6a:	3101      	adds	r1, #1
 800ca6c:	e7f0      	b.n	800ca50 <__s2b+0x18>
 800ca6e:	9b08      	ldr	r3, [sp, #32]
 800ca70:	6143      	str	r3, [r0, #20]
 800ca72:	2d09      	cmp	r5, #9
 800ca74:	f04f 0301 	mov.w	r3, #1
 800ca78:	6103      	str	r3, [r0, #16]
 800ca7a:	dd16      	ble.n	800caaa <__s2b+0x72>
 800ca7c:	f104 0909 	add.w	r9, r4, #9
 800ca80:	46c8      	mov	r8, r9
 800ca82:	442c      	add	r4, r5
 800ca84:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ca88:	4601      	mov	r1, r0
 800ca8a:	3b30      	subs	r3, #48	; 0x30
 800ca8c:	220a      	movs	r2, #10
 800ca8e:	4630      	mov	r0, r6
 800ca90:	f7ff ff88 	bl	800c9a4 <__multadd>
 800ca94:	45a0      	cmp	r8, r4
 800ca96:	d1f5      	bne.n	800ca84 <__s2b+0x4c>
 800ca98:	f1a5 0408 	sub.w	r4, r5, #8
 800ca9c:	444c      	add	r4, r9
 800ca9e:	1b2d      	subs	r5, r5, r4
 800caa0:	1963      	adds	r3, r4, r5
 800caa2:	42bb      	cmp	r3, r7
 800caa4:	db04      	blt.n	800cab0 <__s2b+0x78>
 800caa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caaa:	340a      	adds	r4, #10
 800caac:	2509      	movs	r5, #9
 800caae:	e7f6      	b.n	800ca9e <__s2b+0x66>
 800cab0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cab4:	4601      	mov	r1, r0
 800cab6:	3b30      	subs	r3, #48	; 0x30
 800cab8:	220a      	movs	r2, #10
 800caba:	4630      	mov	r0, r6
 800cabc:	f7ff ff72 	bl	800c9a4 <__multadd>
 800cac0:	e7ee      	b.n	800caa0 <__s2b+0x68>
 800cac2:	bf00      	nop
 800cac4:	0800e708 	.word	0x0800e708
 800cac8:	0800e798 	.word	0x0800e798

0800cacc <__hi0bits>:
 800cacc:	0c03      	lsrs	r3, r0, #16
 800cace:	041b      	lsls	r3, r3, #16
 800cad0:	b9d3      	cbnz	r3, 800cb08 <__hi0bits+0x3c>
 800cad2:	0400      	lsls	r0, r0, #16
 800cad4:	2310      	movs	r3, #16
 800cad6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cada:	bf04      	itt	eq
 800cadc:	0200      	lsleq	r0, r0, #8
 800cade:	3308      	addeq	r3, #8
 800cae0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cae4:	bf04      	itt	eq
 800cae6:	0100      	lsleq	r0, r0, #4
 800cae8:	3304      	addeq	r3, #4
 800caea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800caee:	bf04      	itt	eq
 800caf0:	0080      	lsleq	r0, r0, #2
 800caf2:	3302      	addeq	r3, #2
 800caf4:	2800      	cmp	r0, #0
 800caf6:	db05      	blt.n	800cb04 <__hi0bits+0x38>
 800caf8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cafc:	f103 0301 	add.w	r3, r3, #1
 800cb00:	bf08      	it	eq
 800cb02:	2320      	moveq	r3, #32
 800cb04:	4618      	mov	r0, r3
 800cb06:	4770      	bx	lr
 800cb08:	2300      	movs	r3, #0
 800cb0a:	e7e4      	b.n	800cad6 <__hi0bits+0xa>

0800cb0c <__lo0bits>:
 800cb0c:	6803      	ldr	r3, [r0, #0]
 800cb0e:	f013 0207 	ands.w	r2, r3, #7
 800cb12:	4601      	mov	r1, r0
 800cb14:	d00b      	beq.n	800cb2e <__lo0bits+0x22>
 800cb16:	07da      	lsls	r2, r3, #31
 800cb18:	d424      	bmi.n	800cb64 <__lo0bits+0x58>
 800cb1a:	0798      	lsls	r0, r3, #30
 800cb1c:	bf49      	itett	mi
 800cb1e:	085b      	lsrmi	r3, r3, #1
 800cb20:	089b      	lsrpl	r3, r3, #2
 800cb22:	2001      	movmi	r0, #1
 800cb24:	600b      	strmi	r3, [r1, #0]
 800cb26:	bf5c      	itt	pl
 800cb28:	600b      	strpl	r3, [r1, #0]
 800cb2a:	2002      	movpl	r0, #2
 800cb2c:	4770      	bx	lr
 800cb2e:	b298      	uxth	r0, r3
 800cb30:	b9b0      	cbnz	r0, 800cb60 <__lo0bits+0x54>
 800cb32:	0c1b      	lsrs	r3, r3, #16
 800cb34:	2010      	movs	r0, #16
 800cb36:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cb3a:	bf04      	itt	eq
 800cb3c:	0a1b      	lsreq	r3, r3, #8
 800cb3e:	3008      	addeq	r0, #8
 800cb40:	071a      	lsls	r2, r3, #28
 800cb42:	bf04      	itt	eq
 800cb44:	091b      	lsreq	r3, r3, #4
 800cb46:	3004      	addeq	r0, #4
 800cb48:	079a      	lsls	r2, r3, #30
 800cb4a:	bf04      	itt	eq
 800cb4c:	089b      	lsreq	r3, r3, #2
 800cb4e:	3002      	addeq	r0, #2
 800cb50:	07da      	lsls	r2, r3, #31
 800cb52:	d403      	bmi.n	800cb5c <__lo0bits+0x50>
 800cb54:	085b      	lsrs	r3, r3, #1
 800cb56:	f100 0001 	add.w	r0, r0, #1
 800cb5a:	d005      	beq.n	800cb68 <__lo0bits+0x5c>
 800cb5c:	600b      	str	r3, [r1, #0]
 800cb5e:	4770      	bx	lr
 800cb60:	4610      	mov	r0, r2
 800cb62:	e7e8      	b.n	800cb36 <__lo0bits+0x2a>
 800cb64:	2000      	movs	r0, #0
 800cb66:	4770      	bx	lr
 800cb68:	2020      	movs	r0, #32
 800cb6a:	4770      	bx	lr

0800cb6c <__i2b>:
 800cb6c:	b510      	push	{r4, lr}
 800cb6e:	460c      	mov	r4, r1
 800cb70:	2101      	movs	r1, #1
 800cb72:	f7ff feb5 	bl	800c8e0 <_Balloc>
 800cb76:	4602      	mov	r2, r0
 800cb78:	b928      	cbnz	r0, 800cb86 <__i2b+0x1a>
 800cb7a:	4b05      	ldr	r3, [pc, #20]	; (800cb90 <__i2b+0x24>)
 800cb7c:	4805      	ldr	r0, [pc, #20]	; (800cb94 <__i2b+0x28>)
 800cb7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cb82:	f7fe fc77 	bl	800b474 <__assert_func>
 800cb86:	2301      	movs	r3, #1
 800cb88:	6144      	str	r4, [r0, #20]
 800cb8a:	6103      	str	r3, [r0, #16]
 800cb8c:	bd10      	pop	{r4, pc}
 800cb8e:	bf00      	nop
 800cb90:	0800e708 	.word	0x0800e708
 800cb94:	0800e798 	.word	0x0800e798

0800cb98 <__multiply>:
 800cb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb9c:	4614      	mov	r4, r2
 800cb9e:	690a      	ldr	r2, [r1, #16]
 800cba0:	6923      	ldr	r3, [r4, #16]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	bfb8      	it	lt
 800cba6:	460b      	movlt	r3, r1
 800cba8:	460d      	mov	r5, r1
 800cbaa:	bfbc      	itt	lt
 800cbac:	4625      	movlt	r5, r4
 800cbae:	461c      	movlt	r4, r3
 800cbb0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cbb4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cbb8:	68ab      	ldr	r3, [r5, #8]
 800cbba:	6869      	ldr	r1, [r5, #4]
 800cbbc:	eb0a 0709 	add.w	r7, sl, r9
 800cbc0:	42bb      	cmp	r3, r7
 800cbc2:	b085      	sub	sp, #20
 800cbc4:	bfb8      	it	lt
 800cbc6:	3101      	addlt	r1, #1
 800cbc8:	f7ff fe8a 	bl	800c8e0 <_Balloc>
 800cbcc:	b930      	cbnz	r0, 800cbdc <__multiply+0x44>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	4b42      	ldr	r3, [pc, #264]	; (800ccdc <__multiply+0x144>)
 800cbd2:	4843      	ldr	r0, [pc, #268]	; (800cce0 <__multiply+0x148>)
 800cbd4:	f240 115d 	movw	r1, #349	; 0x15d
 800cbd8:	f7fe fc4c 	bl	800b474 <__assert_func>
 800cbdc:	f100 0614 	add.w	r6, r0, #20
 800cbe0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cbe4:	4633      	mov	r3, r6
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	4543      	cmp	r3, r8
 800cbea:	d31e      	bcc.n	800cc2a <__multiply+0x92>
 800cbec:	f105 0c14 	add.w	ip, r5, #20
 800cbf0:	f104 0314 	add.w	r3, r4, #20
 800cbf4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cbf8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cbfc:	9202      	str	r2, [sp, #8]
 800cbfe:	ebac 0205 	sub.w	r2, ip, r5
 800cc02:	3a15      	subs	r2, #21
 800cc04:	f022 0203 	bic.w	r2, r2, #3
 800cc08:	3204      	adds	r2, #4
 800cc0a:	f105 0115 	add.w	r1, r5, #21
 800cc0e:	458c      	cmp	ip, r1
 800cc10:	bf38      	it	cc
 800cc12:	2204      	movcc	r2, #4
 800cc14:	9201      	str	r2, [sp, #4]
 800cc16:	9a02      	ldr	r2, [sp, #8]
 800cc18:	9303      	str	r3, [sp, #12]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d808      	bhi.n	800cc30 <__multiply+0x98>
 800cc1e:	2f00      	cmp	r7, #0
 800cc20:	dc55      	bgt.n	800ccce <__multiply+0x136>
 800cc22:	6107      	str	r7, [r0, #16]
 800cc24:	b005      	add	sp, #20
 800cc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc2a:	f843 2b04 	str.w	r2, [r3], #4
 800cc2e:	e7db      	b.n	800cbe8 <__multiply+0x50>
 800cc30:	f8b3 a000 	ldrh.w	sl, [r3]
 800cc34:	f1ba 0f00 	cmp.w	sl, #0
 800cc38:	d020      	beq.n	800cc7c <__multiply+0xe4>
 800cc3a:	f105 0e14 	add.w	lr, r5, #20
 800cc3e:	46b1      	mov	r9, r6
 800cc40:	2200      	movs	r2, #0
 800cc42:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cc46:	f8d9 b000 	ldr.w	fp, [r9]
 800cc4a:	b2a1      	uxth	r1, r4
 800cc4c:	fa1f fb8b 	uxth.w	fp, fp
 800cc50:	fb0a b101 	mla	r1, sl, r1, fp
 800cc54:	4411      	add	r1, r2
 800cc56:	f8d9 2000 	ldr.w	r2, [r9]
 800cc5a:	0c24      	lsrs	r4, r4, #16
 800cc5c:	0c12      	lsrs	r2, r2, #16
 800cc5e:	fb0a 2404 	mla	r4, sl, r4, r2
 800cc62:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cc66:	b289      	uxth	r1, r1
 800cc68:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cc6c:	45f4      	cmp	ip, lr
 800cc6e:	f849 1b04 	str.w	r1, [r9], #4
 800cc72:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cc76:	d8e4      	bhi.n	800cc42 <__multiply+0xaa>
 800cc78:	9901      	ldr	r1, [sp, #4]
 800cc7a:	5072      	str	r2, [r6, r1]
 800cc7c:	9a03      	ldr	r2, [sp, #12]
 800cc7e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cc82:	3304      	adds	r3, #4
 800cc84:	f1b9 0f00 	cmp.w	r9, #0
 800cc88:	d01f      	beq.n	800ccca <__multiply+0x132>
 800cc8a:	6834      	ldr	r4, [r6, #0]
 800cc8c:	f105 0114 	add.w	r1, r5, #20
 800cc90:	46b6      	mov	lr, r6
 800cc92:	f04f 0a00 	mov.w	sl, #0
 800cc96:	880a      	ldrh	r2, [r1, #0]
 800cc98:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cc9c:	fb09 b202 	mla	r2, r9, r2, fp
 800cca0:	4492      	add	sl, r2
 800cca2:	b2a4      	uxth	r4, r4
 800cca4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cca8:	f84e 4b04 	str.w	r4, [lr], #4
 800ccac:	f851 4b04 	ldr.w	r4, [r1], #4
 800ccb0:	f8be 2000 	ldrh.w	r2, [lr]
 800ccb4:	0c24      	lsrs	r4, r4, #16
 800ccb6:	fb09 2404 	mla	r4, r9, r4, r2
 800ccba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ccbe:	458c      	cmp	ip, r1
 800ccc0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ccc4:	d8e7      	bhi.n	800cc96 <__multiply+0xfe>
 800ccc6:	9a01      	ldr	r2, [sp, #4]
 800ccc8:	50b4      	str	r4, [r6, r2]
 800ccca:	3604      	adds	r6, #4
 800cccc:	e7a3      	b.n	800cc16 <__multiply+0x7e>
 800ccce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d1a5      	bne.n	800cc22 <__multiply+0x8a>
 800ccd6:	3f01      	subs	r7, #1
 800ccd8:	e7a1      	b.n	800cc1e <__multiply+0x86>
 800ccda:	bf00      	nop
 800ccdc:	0800e708 	.word	0x0800e708
 800cce0:	0800e798 	.word	0x0800e798

0800cce4 <__pow5mult>:
 800cce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cce8:	4615      	mov	r5, r2
 800ccea:	f012 0203 	ands.w	r2, r2, #3
 800ccee:	4606      	mov	r6, r0
 800ccf0:	460f      	mov	r7, r1
 800ccf2:	d007      	beq.n	800cd04 <__pow5mult+0x20>
 800ccf4:	4c25      	ldr	r4, [pc, #148]	; (800cd8c <__pow5mult+0xa8>)
 800ccf6:	3a01      	subs	r2, #1
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ccfe:	f7ff fe51 	bl	800c9a4 <__multadd>
 800cd02:	4607      	mov	r7, r0
 800cd04:	10ad      	asrs	r5, r5, #2
 800cd06:	d03d      	beq.n	800cd84 <__pow5mult+0xa0>
 800cd08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cd0a:	b97c      	cbnz	r4, 800cd2c <__pow5mult+0x48>
 800cd0c:	2010      	movs	r0, #16
 800cd0e:	f7ff fdcd 	bl	800c8ac <malloc>
 800cd12:	4602      	mov	r2, r0
 800cd14:	6270      	str	r0, [r6, #36]	; 0x24
 800cd16:	b928      	cbnz	r0, 800cd24 <__pow5mult+0x40>
 800cd18:	4b1d      	ldr	r3, [pc, #116]	; (800cd90 <__pow5mult+0xac>)
 800cd1a:	481e      	ldr	r0, [pc, #120]	; (800cd94 <__pow5mult+0xb0>)
 800cd1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cd20:	f7fe fba8 	bl	800b474 <__assert_func>
 800cd24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd28:	6004      	str	r4, [r0, #0]
 800cd2a:	60c4      	str	r4, [r0, #12]
 800cd2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cd30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd34:	b94c      	cbnz	r4, 800cd4a <__pow5mult+0x66>
 800cd36:	f240 2171 	movw	r1, #625	; 0x271
 800cd3a:	4630      	mov	r0, r6
 800cd3c:	f7ff ff16 	bl	800cb6c <__i2b>
 800cd40:	2300      	movs	r3, #0
 800cd42:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd46:	4604      	mov	r4, r0
 800cd48:	6003      	str	r3, [r0, #0]
 800cd4a:	f04f 0900 	mov.w	r9, #0
 800cd4e:	07eb      	lsls	r3, r5, #31
 800cd50:	d50a      	bpl.n	800cd68 <__pow5mult+0x84>
 800cd52:	4639      	mov	r1, r7
 800cd54:	4622      	mov	r2, r4
 800cd56:	4630      	mov	r0, r6
 800cd58:	f7ff ff1e 	bl	800cb98 <__multiply>
 800cd5c:	4639      	mov	r1, r7
 800cd5e:	4680      	mov	r8, r0
 800cd60:	4630      	mov	r0, r6
 800cd62:	f7ff fdfd 	bl	800c960 <_Bfree>
 800cd66:	4647      	mov	r7, r8
 800cd68:	106d      	asrs	r5, r5, #1
 800cd6a:	d00b      	beq.n	800cd84 <__pow5mult+0xa0>
 800cd6c:	6820      	ldr	r0, [r4, #0]
 800cd6e:	b938      	cbnz	r0, 800cd80 <__pow5mult+0x9c>
 800cd70:	4622      	mov	r2, r4
 800cd72:	4621      	mov	r1, r4
 800cd74:	4630      	mov	r0, r6
 800cd76:	f7ff ff0f 	bl	800cb98 <__multiply>
 800cd7a:	6020      	str	r0, [r4, #0]
 800cd7c:	f8c0 9000 	str.w	r9, [r0]
 800cd80:	4604      	mov	r4, r0
 800cd82:	e7e4      	b.n	800cd4e <__pow5mult+0x6a>
 800cd84:	4638      	mov	r0, r7
 800cd86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd8a:	bf00      	nop
 800cd8c:	0800e8e8 	.word	0x0800e8e8
 800cd90:	0800e5e8 	.word	0x0800e5e8
 800cd94:	0800e798 	.word	0x0800e798

0800cd98 <__lshift>:
 800cd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd9c:	460c      	mov	r4, r1
 800cd9e:	6849      	ldr	r1, [r1, #4]
 800cda0:	6923      	ldr	r3, [r4, #16]
 800cda2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cda6:	68a3      	ldr	r3, [r4, #8]
 800cda8:	4607      	mov	r7, r0
 800cdaa:	4691      	mov	r9, r2
 800cdac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cdb0:	f108 0601 	add.w	r6, r8, #1
 800cdb4:	42b3      	cmp	r3, r6
 800cdb6:	db0b      	blt.n	800cdd0 <__lshift+0x38>
 800cdb8:	4638      	mov	r0, r7
 800cdba:	f7ff fd91 	bl	800c8e0 <_Balloc>
 800cdbe:	4605      	mov	r5, r0
 800cdc0:	b948      	cbnz	r0, 800cdd6 <__lshift+0x3e>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	4b28      	ldr	r3, [pc, #160]	; (800ce68 <__lshift+0xd0>)
 800cdc6:	4829      	ldr	r0, [pc, #164]	; (800ce6c <__lshift+0xd4>)
 800cdc8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cdcc:	f7fe fb52 	bl	800b474 <__assert_func>
 800cdd0:	3101      	adds	r1, #1
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	e7ee      	b.n	800cdb4 <__lshift+0x1c>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f100 0114 	add.w	r1, r0, #20
 800cddc:	f100 0210 	add.w	r2, r0, #16
 800cde0:	4618      	mov	r0, r3
 800cde2:	4553      	cmp	r3, sl
 800cde4:	db33      	blt.n	800ce4e <__lshift+0xb6>
 800cde6:	6920      	ldr	r0, [r4, #16]
 800cde8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cdec:	f104 0314 	add.w	r3, r4, #20
 800cdf0:	f019 091f 	ands.w	r9, r9, #31
 800cdf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cdf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cdfc:	d02b      	beq.n	800ce56 <__lshift+0xbe>
 800cdfe:	f1c9 0e20 	rsb	lr, r9, #32
 800ce02:	468a      	mov	sl, r1
 800ce04:	2200      	movs	r2, #0
 800ce06:	6818      	ldr	r0, [r3, #0]
 800ce08:	fa00 f009 	lsl.w	r0, r0, r9
 800ce0c:	4302      	orrs	r2, r0
 800ce0e:	f84a 2b04 	str.w	r2, [sl], #4
 800ce12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce16:	459c      	cmp	ip, r3
 800ce18:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce1c:	d8f3      	bhi.n	800ce06 <__lshift+0x6e>
 800ce1e:	ebac 0304 	sub.w	r3, ip, r4
 800ce22:	3b15      	subs	r3, #21
 800ce24:	f023 0303 	bic.w	r3, r3, #3
 800ce28:	3304      	adds	r3, #4
 800ce2a:	f104 0015 	add.w	r0, r4, #21
 800ce2e:	4584      	cmp	ip, r0
 800ce30:	bf38      	it	cc
 800ce32:	2304      	movcc	r3, #4
 800ce34:	50ca      	str	r2, [r1, r3]
 800ce36:	b10a      	cbz	r2, 800ce3c <__lshift+0xa4>
 800ce38:	f108 0602 	add.w	r6, r8, #2
 800ce3c:	3e01      	subs	r6, #1
 800ce3e:	4638      	mov	r0, r7
 800ce40:	612e      	str	r6, [r5, #16]
 800ce42:	4621      	mov	r1, r4
 800ce44:	f7ff fd8c 	bl	800c960 <_Bfree>
 800ce48:	4628      	mov	r0, r5
 800ce4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce52:	3301      	adds	r3, #1
 800ce54:	e7c5      	b.n	800cde2 <__lshift+0x4a>
 800ce56:	3904      	subs	r1, #4
 800ce58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce60:	459c      	cmp	ip, r3
 800ce62:	d8f9      	bhi.n	800ce58 <__lshift+0xc0>
 800ce64:	e7ea      	b.n	800ce3c <__lshift+0xa4>
 800ce66:	bf00      	nop
 800ce68:	0800e708 	.word	0x0800e708
 800ce6c:	0800e798 	.word	0x0800e798

0800ce70 <__mcmp>:
 800ce70:	b530      	push	{r4, r5, lr}
 800ce72:	6902      	ldr	r2, [r0, #16]
 800ce74:	690c      	ldr	r4, [r1, #16]
 800ce76:	1b12      	subs	r2, r2, r4
 800ce78:	d10e      	bne.n	800ce98 <__mcmp+0x28>
 800ce7a:	f100 0314 	add.w	r3, r0, #20
 800ce7e:	3114      	adds	r1, #20
 800ce80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ce84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ce88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ce8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ce90:	42a5      	cmp	r5, r4
 800ce92:	d003      	beq.n	800ce9c <__mcmp+0x2c>
 800ce94:	d305      	bcc.n	800cea2 <__mcmp+0x32>
 800ce96:	2201      	movs	r2, #1
 800ce98:	4610      	mov	r0, r2
 800ce9a:	bd30      	pop	{r4, r5, pc}
 800ce9c:	4283      	cmp	r3, r0
 800ce9e:	d3f3      	bcc.n	800ce88 <__mcmp+0x18>
 800cea0:	e7fa      	b.n	800ce98 <__mcmp+0x28>
 800cea2:	f04f 32ff 	mov.w	r2, #4294967295
 800cea6:	e7f7      	b.n	800ce98 <__mcmp+0x28>

0800cea8 <__mdiff>:
 800cea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceac:	460c      	mov	r4, r1
 800ceae:	4606      	mov	r6, r0
 800ceb0:	4611      	mov	r1, r2
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	4617      	mov	r7, r2
 800ceb6:	f7ff ffdb 	bl	800ce70 <__mcmp>
 800ceba:	1e05      	subs	r5, r0, #0
 800cebc:	d110      	bne.n	800cee0 <__mdiff+0x38>
 800cebe:	4629      	mov	r1, r5
 800cec0:	4630      	mov	r0, r6
 800cec2:	f7ff fd0d 	bl	800c8e0 <_Balloc>
 800cec6:	b930      	cbnz	r0, 800ced6 <__mdiff+0x2e>
 800cec8:	4b39      	ldr	r3, [pc, #228]	; (800cfb0 <__mdiff+0x108>)
 800ceca:	4602      	mov	r2, r0
 800cecc:	f240 2132 	movw	r1, #562	; 0x232
 800ced0:	4838      	ldr	r0, [pc, #224]	; (800cfb4 <__mdiff+0x10c>)
 800ced2:	f7fe facf 	bl	800b474 <__assert_func>
 800ced6:	2301      	movs	r3, #1
 800ced8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cedc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee0:	bfa4      	itt	ge
 800cee2:	463b      	movge	r3, r7
 800cee4:	4627      	movge	r7, r4
 800cee6:	4630      	mov	r0, r6
 800cee8:	6879      	ldr	r1, [r7, #4]
 800ceea:	bfa6      	itte	ge
 800ceec:	461c      	movge	r4, r3
 800ceee:	2500      	movge	r5, #0
 800cef0:	2501      	movlt	r5, #1
 800cef2:	f7ff fcf5 	bl	800c8e0 <_Balloc>
 800cef6:	b920      	cbnz	r0, 800cf02 <__mdiff+0x5a>
 800cef8:	4b2d      	ldr	r3, [pc, #180]	; (800cfb0 <__mdiff+0x108>)
 800cefa:	4602      	mov	r2, r0
 800cefc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cf00:	e7e6      	b.n	800ced0 <__mdiff+0x28>
 800cf02:	693e      	ldr	r6, [r7, #16]
 800cf04:	60c5      	str	r5, [r0, #12]
 800cf06:	6925      	ldr	r5, [r4, #16]
 800cf08:	f107 0114 	add.w	r1, r7, #20
 800cf0c:	f104 0914 	add.w	r9, r4, #20
 800cf10:	f100 0e14 	add.w	lr, r0, #20
 800cf14:	f107 0210 	add.w	r2, r7, #16
 800cf18:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cf1c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cf20:	46f2      	mov	sl, lr
 800cf22:	2700      	movs	r7, #0
 800cf24:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cf2c:	fa1f f883 	uxth.w	r8, r3
 800cf30:	fa17 f78b 	uxtah	r7, r7, fp
 800cf34:	0c1b      	lsrs	r3, r3, #16
 800cf36:	eba7 0808 	sub.w	r8, r7, r8
 800cf3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cf3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cf42:	fa1f f888 	uxth.w	r8, r8
 800cf46:	141f      	asrs	r7, r3, #16
 800cf48:	454d      	cmp	r5, r9
 800cf4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cf4e:	f84a 3b04 	str.w	r3, [sl], #4
 800cf52:	d8e7      	bhi.n	800cf24 <__mdiff+0x7c>
 800cf54:	1b2b      	subs	r3, r5, r4
 800cf56:	3b15      	subs	r3, #21
 800cf58:	f023 0303 	bic.w	r3, r3, #3
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	3415      	adds	r4, #21
 800cf60:	42a5      	cmp	r5, r4
 800cf62:	bf38      	it	cc
 800cf64:	2304      	movcc	r3, #4
 800cf66:	4419      	add	r1, r3
 800cf68:	4473      	add	r3, lr
 800cf6a:	469e      	mov	lr, r3
 800cf6c:	460d      	mov	r5, r1
 800cf6e:	4565      	cmp	r5, ip
 800cf70:	d30e      	bcc.n	800cf90 <__mdiff+0xe8>
 800cf72:	f10c 0203 	add.w	r2, ip, #3
 800cf76:	1a52      	subs	r2, r2, r1
 800cf78:	f022 0203 	bic.w	r2, r2, #3
 800cf7c:	3903      	subs	r1, #3
 800cf7e:	458c      	cmp	ip, r1
 800cf80:	bf38      	it	cc
 800cf82:	2200      	movcc	r2, #0
 800cf84:	441a      	add	r2, r3
 800cf86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cf8a:	b17b      	cbz	r3, 800cfac <__mdiff+0x104>
 800cf8c:	6106      	str	r6, [r0, #16]
 800cf8e:	e7a5      	b.n	800cedc <__mdiff+0x34>
 800cf90:	f855 8b04 	ldr.w	r8, [r5], #4
 800cf94:	fa17 f488 	uxtah	r4, r7, r8
 800cf98:	1422      	asrs	r2, r4, #16
 800cf9a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cf9e:	b2a4      	uxth	r4, r4
 800cfa0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cfa4:	f84e 4b04 	str.w	r4, [lr], #4
 800cfa8:	1417      	asrs	r7, r2, #16
 800cfaa:	e7e0      	b.n	800cf6e <__mdiff+0xc6>
 800cfac:	3e01      	subs	r6, #1
 800cfae:	e7ea      	b.n	800cf86 <__mdiff+0xde>
 800cfb0:	0800e708 	.word	0x0800e708
 800cfb4:	0800e798 	.word	0x0800e798

0800cfb8 <__ulp>:
 800cfb8:	b082      	sub	sp, #8
 800cfba:	ed8d 0b00 	vstr	d0, [sp]
 800cfbe:	9b01      	ldr	r3, [sp, #4]
 800cfc0:	4912      	ldr	r1, [pc, #72]	; (800d00c <__ulp+0x54>)
 800cfc2:	4019      	ands	r1, r3
 800cfc4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cfc8:	2900      	cmp	r1, #0
 800cfca:	dd05      	ble.n	800cfd8 <__ulp+0x20>
 800cfcc:	2200      	movs	r2, #0
 800cfce:	460b      	mov	r3, r1
 800cfd0:	ec43 2b10 	vmov	d0, r2, r3
 800cfd4:	b002      	add	sp, #8
 800cfd6:	4770      	bx	lr
 800cfd8:	4249      	negs	r1, r1
 800cfda:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cfde:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cfe2:	f04f 0200 	mov.w	r2, #0
 800cfe6:	f04f 0300 	mov.w	r3, #0
 800cfea:	da04      	bge.n	800cff6 <__ulp+0x3e>
 800cfec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cff0:	fa41 f300 	asr.w	r3, r1, r0
 800cff4:	e7ec      	b.n	800cfd0 <__ulp+0x18>
 800cff6:	f1a0 0114 	sub.w	r1, r0, #20
 800cffa:	291e      	cmp	r1, #30
 800cffc:	bfda      	itte	le
 800cffe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d002:	fa20 f101 	lsrle.w	r1, r0, r1
 800d006:	2101      	movgt	r1, #1
 800d008:	460a      	mov	r2, r1
 800d00a:	e7e1      	b.n	800cfd0 <__ulp+0x18>
 800d00c:	7ff00000 	.word	0x7ff00000

0800d010 <__b2d>:
 800d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d012:	6905      	ldr	r5, [r0, #16]
 800d014:	f100 0714 	add.w	r7, r0, #20
 800d018:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d01c:	1f2e      	subs	r6, r5, #4
 800d01e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d022:	4620      	mov	r0, r4
 800d024:	f7ff fd52 	bl	800cacc <__hi0bits>
 800d028:	f1c0 0320 	rsb	r3, r0, #32
 800d02c:	280a      	cmp	r0, #10
 800d02e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d0ac <__b2d+0x9c>
 800d032:	600b      	str	r3, [r1, #0]
 800d034:	dc14      	bgt.n	800d060 <__b2d+0x50>
 800d036:	f1c0 0e0b 	rsb	lr, r0, #11
 800d03a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d03e:	42b7      	cmp	r7, r6
 800d040:	ea41 030c 	orr.w	r3, r1, ip
 800d044:	bf34      	ite	cc
 800d046:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d04a:	2100      	movcs	r1, #0
 800d04c:	3015      	adds	r0, #21
 800d04e:	fa04 f000 	lsl.w	r0, r4, r0
 800d052:	fa21 f10e 	lsr.w	r1, r1, lr
 800d056:	ea40 0201 	orr.w	r2, r0, r1
 800d05a:	ec43 2b10 	vmov	d0, r2, r3
 800d05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d060:	42b7      	cmp	r7, r6
 800d062:	bf3a      	itte	cc
 800d064:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d068:	f1a5 0608 	subcc.w	r6, r5, #8
 800d06c:	2100      	movcs	r1, #0
 800d06e:	380b      	subs	r0, #11
 800d070:	d017      	beq.n	800d0a2 <__b2d+0x92>
 800d072:	f1c0 0c20 	rsb	ip, r0, #32
 800d076:	fa04 f500 	lsl.w	r5, r4, r0
 800d07a:	42be      	cmp	r6, r7
 800d07c:	fa21 f40c 	lsr.w	r4, r1, ip
 800d080:	ea45 0504 	orr.w	r5, r5, r4
 800d084:	bf8c      	ite	hi
 800d086:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d08a:	2400      	movls	r4, #0
 800d08c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d090:	fa01 f000 	lsl.w	r0, r1, r0
 800d094:	fa24 f40c 	lsr.w	r4, r4, ip
 800d098:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d09c:	ea40 0204 	orr.w	r2, r0, r4
 800d0a0:	e7db      	b.n	800d05a <__b2d+0x4a>
 800d0a2:	ea44 030c 	orr.w	r3, r4, ip
 800d0a6:	460a      	mov	r2, r1
 800d0a8:	e7d7      	b.n	800d05a <__b2d+0x4a>
 800d0aa:	bf00      	nop
 800d0ac:	3ff00000 	.word	0x3ff00000

0800d0b0 <__d2b>:
 800d0b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0b4:	4689      	mov	r9, r1
 800d0b6:	2101      	movs	r1, #1
 800d0b8:	ec57 6b10 	vmov	r6, r7, d0
 800d0bc:	4690      	mov	r8, r2
 800d0be:	f7ff fc0f 	bl	800c8e0 <_Balloc>
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	b930      	cbnz	r0, 800d0d4 <__d2b+0x24>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	4b25      	ldr	r3, [pc, #148]	; (800d160 <__d2b+0xb0>)
 800d0ca:	4826      	ldr	r0, [pc, #152]	; (800d164 <__d2b+0xb4>)
 800d0cc:	f240 310a 	movw	r1, #778	; 0x30a
 800d0d0:	f7fe f9d0 	bl	800b474 <__assert_func>
 800d0d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d0d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d0dc:	bb35      	cbnz	r5, 800d12c <__d2b+0x7c>
 800d0de:	2e00      	cmp	r6, #0
 800d0e0:	9301      	str	r3, [sp, #4]
 800d0e2:	d028      	beq.n	800d136 <__d2b+0x86>
 800d0e4:	4668      	mov	r0, sp
 800d0e6:	9600      	str	r6, [sp, #0]
 800d0e8:	f7ff fd10 	bl	800cb0c <__lo0bits>
 800d0ec:	9900      	ldr	r1, [sp, #0]
 800d0ee:	b300      	cbz	r0, 800d132 <__d2b+0x82>
 800d0f0:	9a01      	ldr	r2, [sp, #4]
 800d0f2:	f1c0 0320 	rsb	r3, r0, #32
 800d0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d0fa:	430b      	orrs	r3, r1
 800d0fc:	40c2      	lsrs	r2, r0
 800d0fe:	6163      	str	r3, [r4, #20]
 800d100:	9201      	str	r2, [sp, #4]
 800d102:	9b01      	ldr	r3, [sp, #4]
 800d104:	61a3      	str	r3, [r4, #24]
 800d106:	2b00      	cmp	r3, #0
 800d108:	bf14      	ite	ne
 800d10a:	2202      	movne	r2, #2
 800d10c:	2201      	moveq	r2, #1
 800d10e:	6122      	str	r2, [r4, #16]
 800d110:	b1d5      	cbz	r5, 800d148 <__d2b+0x98>
 800d112:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d116:	4405      	add	r5, r0
 800d118:	f8c9 5000 	str.w	r5, [r9]
 800d11c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d120:	f8c8 0000 	str.w	r0, [r8]
 800d124:	4620      	mov	r0, r4
 800d126:	b003      	add	sp, #12
 800d128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d12c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d130:	e7d5      	b.n	800d0de <__d2b+0x2e>
 800d132:	6161      	str	r1, [r4, #20]
 800d134:	e7e5      	b.n	800d102 <__d2b+0x52>
 800d136:	a801      	add	r0, sp, #4
 800d138:	f7ff fce8 	bl	800cb0c <__lo0bits>
 800d13c:	9b01      	ldr	r3, [sp, #4]
 800d13e:	6163      	str	r3, [r4, #20]
 800d140:	2201      	movs	r2, #1
 800d142:	6122      	str	r2, [r4, #16]
 800d144:	3020      	adds	r0, #32
 800d146:	e7e3      	b.n	800d110 <__d2b+0x60>
 800d148:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d14c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d150:	f8c9 0000 	str.w	r0, [r9]
 800d154:	6918      	ldr	r0, [r3, #16]
 800d156:	f7ff fcb9 	bl	800cacc <__hi0bits>
 800d15a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d15e:	e7df      	b.n	800d120 <__d2b+0x70>
 800d160:	0800e708 	.word	0x0800e708
 800d164:	0800e798 	.word	0x0800e798

0800d168 <__ratio>:
 800d168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d16c:	4688      	mov	r8, r1
 800d16e:	4669      	mov	r1, sp
 800d170:	4681      	mov	r9, r0
 800d172:	f7ff ff4d 	bl	800d010 <__b2d>
 800d176:	a901      	add	r1, sp, #4
 800d178:	4640      	mov	r0, r8
 800d17a:	ec55 4b10 	vmov	r4, r5, d0
 800d17e:	f7ff ff47 	bl	800d010 <__b2d>
 800d182:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d186:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d18a:	eba3 0c02 	sub.w	ip, r3, r2
 800d18e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d192:	1a9b      	subs	r3, r3, r2
 800d194:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d198:	ec51 0b10 	vmov	r0, r1, d0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	bfd6      	itet	le
 800d1a0:	460a      	movle	r2, r1
 800d1a2:	462a      	movgt	r2, r5
 800d1a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d1a8:	468b      	mov	fp, r1
 800d1aa:	462f      	mov	r7, r5
 800d1ac:	bfd4      	ite	le
 800d1ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d1b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	ee10 2a10 	vmov	r2, s0
 800d1bc:	465b      	mov	r3, fp
 800d1be:	4639      	mov	r1, r7
 800d1c0:	f7f3 fb4c 	bl	800085c <__aeabi_ddiv>
 800d1c4:	ec41 0b10 	vmov	d0, r0, r1
 800d1c8:	b003      	add	sp, #12
 800d1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1ce <__copybits>:
 800d1ce:	3901      	subs	r1, #1
 800d1d0:	b570      	push	{r4, r5, r6, lr}
 800d1d2:	1149      	asrs	r1, r1, #5
 800d1d4:	6914      	ldr	r4, [r2, #16]
 800d1d6:	3101      	adds	r1, #1
 800d1d8:	f102 0314 	add.w	r3, r2, #20
 800d1dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d1e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d1e4:	1f05      	subs	r5, r0, #4
 800d1e6:	42a3      	cmp	r3, r4
 800d1e8:	d30c      	bcc.n	800d204 <__copybits+0x36>
 800d1ea:	1aa3      	subs	r3, r4, r2
 800d1ec:	3b11      	subs	r3, #17
 800d1ee:	f023 0303 	bic.w	r3, r3, #3
 800d1f2:	3211      	adds	r2, #17
 800d1f4:	42a2      	cmp	r2, r4
 800d1f6:	bf88      	it	hi
 800d1f8:	2300      	movhi	r3, #0
 800d1fa:	4418      	add	r0, r3
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	4288      	cmp	r0, r1
 800d200:	d305      	bcc.n	800d20e <__copybits+0x40>
 800d202:	bd70      	pop	{r4, r5, r6, pc}
 800d204:	f853 6b04 	ldr.w	r6, [r3], #4
 800d208:	f845 6f04 	str.w	r6, [r5, #4]!
 800d20c:	e7eb      	b.n	800d1e6 <__copybits+0x18>
 800d20e:	f840 3b04 	str.w	r3, [r0], #4
 800d212:	e7f4      	b.n	800d1fe <__copybits+0x30>

0800d214 <__any_on>:
 800d214:	f100 0214 	add.w	r2, r0, #20
 800d218:	6900      	ldr	r0, [r0, #16]
 800d21a:	114b      	asrs	r3, r1, #5
 800d21c:	4298      	cmp	r0, r3
 800d21e:	b510      	push	{r4, lr}
 800d220:	db11      	blt.n	800d246 <__any_on+0x32>
 800d222:	dd0a      	ble.n	800d23a <__any_on+0x26>
 800d224:	f011 011f 	ands.w	r1, r1, #31
 800d228:	d007      	beq.n	800d23a <__any_on+0x26>
 800d22a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d22e:	fa24 f001 	lsr.w	r0, r4, r1
 800d232:	fa00 f101 	lsl.w	r1, r0, r1
 800d236:	428c      	cmp	r4, r1
 800d238:	d10b      	bne.n	800d252 <__any_on+0x3e>
 800d23a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d23e:	4293      	cmp	r3, r2
 800d240:	d803      	bhi.n	800d24a <__any_on+0x36>
 800d242:	2000      	movs	r0, #0
 800d244:	bd10      	pop	{r4, pc}
 800d246:	4603      	mov	r3, r0
 800d248:	e7f7      	b.n	800d23a <__any_on+0x26>
 800d24a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d24e:	2900      	cmp	r1, #0
 800d250:	d0f5      	beq.n	800d23e <__any_on+0x2a>
 800d252:	2001      	movs	r0, #1
 800d254:	e7f6      	b.n	800d244 <__any_on+0x30>

0800d256 <_calloc_r>:
 800d256:	b513      	push	{r0, r1, r4, lr}
 800d258:	434a      	muls	r2, r1
 800d25a:	4611      	mov	r1, r2
 800d25c:	9201      	str	r2, [sp, #4]
 800d25e:	f000 f859 	bl	800d314 <_malloc_r>
 800d262:	4604      	mov	r4, r0
 800d264:	b118      	cbz	r0, 800d26e <_calloc_r+0x18>
 800d266:	9a01      	ldr	r2, [sp, #4]
 800d268:	2100      	movs	r1, #0
 800d26a:	f7fc fd83 	bl	8009d74 <memset>
 800d26e:	4620      	mov	r0, r4
 800d270:	b002      	add	sp, #8
 800d272:	bd10      	pop	{r4, pc}

0800d274 <_free_r>:
 800d274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d276:	2900      	cmp	r1, #0
 800d278:	d048      	beq.n	800d30c <_free_r+0x98>
 800d27a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d27e:	9001      	str	r0, [sp, #4]
 800d280:	2b00      	cmp	r3, #0
 800d282:	f1a1 0404 	sub.w	r4, r1, #4
 800d286:	bfb8      	it	lt
 800d288:	18e4      	addlt	r4, r4, r3
 800d28a:	f000 fe8d 	bl	800dfa8 <__malloc_lock>
 800d28e:	4a20      	ldr	r2, [pc, #128]	; (800d310 <_free_r+0x9c>)
 800d290:	9801      	ldr	r0, [sp, #4]
 800d292:	6813      	ldr	r3, [r2, #0]
 800d294:	4615      	mov	r5, r2
 800d296:	b933      	cbnz	r3, 800d2a6 <_free_r+0x32>
 800d298:	6063      	str	r3, [r4, #4]
 800d29a:	6014      	str	r4, [r2, #0]
 800d29c:	b003      	add	sp, #12
 800d29e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2a2:	f000 be87 	b.w	800dfb4 <__malloc_unlock>
 800d2a6:	42a3      	cmp	r3, r4
 800d2a8:	d90b      	bls.n	800d2c2 <_free_r+0x4e>
 800d2aa:	6821      	ldr	r1, [r4, #0]
 800d2ac:	1862      	adds	r2, r4, r1
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	bf04      	itt	eq
 800d2b2:	681a      	ldreq	r2, [r3, #0]
 800d2b4:	685b      	ldreq	r3, [r3, #4]
 800d2b6:	6063      	str	r3, [r4, #4]
 800d2b8:	bf04      	itt	eq
 800d2ba:	1852      	addeq	r2, r2, r1
 800d2bc:	6022      	streq	r2, [r4, #0]
 800d2be:	602c      	str	r4, [r5, #0]
 800d2c0:	e7ec      	b.n	800d29c <_free_r+0x28>
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	b10b      	cbz	r3, 800d2cc <_free_r+0x58>
 800d2c8:	42a3      	cmp	r3, r4
 800d2ca:	d9fa      	bls.n	800d2c2 <_free_r+0x4e>
 800d2cc:	6811      	ldr	r1, [r2, #0]
 800d2ce:	1855      	adds	r5, r2, r1
 800d2d0:	42a5      	cmp	r5, r4
 800d2d2:	d10b      	bne.n	800d2ec <_free_r+0x78>
 800d2d4:	6824      	ldr	r4, [r4, #0]
 800d2d6:	4421      	add	r1, r4
 800d2d8:	1854      	adds	r4, r2, r1
 800d2da:	42a3      	cmp	r3, r4
 800d2dc:	6011      	str	r1, [r2, #0]
 800d2de:	d1dd      	bne.n	800d29c <_free_r+0x28>
 800d2e0:	681c      	ldr	r4, [r3, #0]
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	6053      	str	r3, [r2, #4]
 800d2e6:	4421      	add	r1, r4
 800d2e8:	6011      	str	r1, [r2, #0]
 800d2ea:	e7d7      	b.n	800d29c <_free_r+0x28>
 800d2ec:	d902      	bls.n	800d2f4 <_free_r+0x80>
 800d2ee:	230c      	movs	r3, #12
 800d2f0:	6003      	str	r3, [r0, #0]
 800d2f2:	e7d3      	b.n	800d29c <_free_r+0x28>
 800d2f4:	6825      	ldr	r5, [r4, #0]
 800d2f6:	1961      	adds	r1, r4, r5
 800d2f8:	428b      	cmp	r3, r1
 800d2fa:	bf04      	itt	eq
 800d2fc:	6819      	ldreq	r1, [r3, #0]
 800d2fe:	685b      	ldreq	r3, [r3, #4]
 800d300:	6063      	str	r3, [r4, #4]
 800d302:	bf04      	itt	eq
 800d304:	1949      	addeq	r1, r1, r5
 800d306:	6021      	streq	r1, [r4, #0]
 800d308:	6054      	str	r4, [r2, #4]
 800d30a:	e7c7      	b.n	800d29c <_free_r+0x28>
 800d30c:	b003      	add	sp, #12
 800d30e:	bd30      	pop	{r4, r5, pc}
 800d310:	20004b30 	.word	0x20004b30

0800d314 <_malloc_r>:
 800d314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d316:	1ccd      	adds	r5, r1, #3
 800d318:	f025 0503 	bic.w	r5, r5, #3
 800d31c:	3508      	adds	r5, #8
 800d31e:	2d0c      	cmp	r5, #12
 800d320:	bf38      	it	cc
 800d322:	250c      	movcc	r5, #12
 800d324:	2d00      	cmp	r5, #0
 800d326:	4606      	mov	r6, r0
 800d328:	db01      	blt.n	800d32e <_malloc_r+0x1a>
 800d32a:	42a9      	cmp	r1, r5
 800d32c:	d903      	bls.n	800d336 <_malloc_r+0x22>
 800d32e:	230c      	movs	r3, #12
 800d330:	6033      	str	r3, [r6, #0]
 800d332:	2000      	movs	r0, #0
 800d334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d336:	f000 fe37 	bl	800dfa8 <__malloc_lock>
 800d33a:	4921      	ldr	r1, [pc, #132]	; (800d3c0 <_malloc_r+0xac>)
 800d33c:	680a      	ldr	r2, [r1, #0]
 800d33e:	4614      	mov	r4, r2
 800d340:	b99c      	cbnz	r4, 800d36a <_malloc_r+0x56>
 800d342:	4f20      	ldr	r7, [pc, #128]	; (800d3c4 <_malloc_r+0xb0>)
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	b923      	cbnz	r3, 800d352 <_malloc_r+0x3e>
 800d348:	4621      	mov	r1, r4
 800d34a:	4630      	mov	r0, r6
 800d34c:	f000 fafc 	bl	800d948 <_sbrk_r>
 800d350:	6038      	str	r0, [r7, #0]
 800d352:	4629      	mov	r1, r5
 800d354:	4630      	mov	r0, r6
 800d356:	f000 faf7 	bl	800d948 <_sbrk_r>
 800d35a:	1c43      	adds	r3, r0, #1
 800d35c:	d123      	bne.n	800d3a6 <_malloc_r+0x92>
 800d35e:	230c      	movs	r3, #12
 800d360:	6033      	str	r3, [r6, #0]
 800d362:	4630      	mov	r0, r6
 800d364:	f000 fe26 	bl	800dfb4 <__malloc_unlock>
 800d368:	e7e3      	b.n	800d332 <_malloc_r+0x1e>
 800d36a:	6823      	ldr	r3, [r4, #0]
 800d36c:	1b5b      	subs	r3, r3, r5
 800d36e:	d417      	bmi.n	800d3a0 <_malloc_r+0x8c>
 800d370:	2b0b      	cmp	r3, #11
 800d372:	d903      	bls.n	800d37c <_malloc_r+0x68>
 800d374:	6023      	str	r3, [r4, #0]
 800d376:	441c      	add	r4, r3
 800d378:	6025      	str	r5, [r4, #0]
 800d37a:	e004      	b.n	800d386 <_malloc_r+0x72>
 800d37c:	6863      	ldr	r3, [r4, #4]
 800d37e:	42a2      	cmp	r2, r4
 800d380:	bf0c      	ite	eq
 800d382:	600b      	streq	r3, [r1, #0]
 800d384:	6053      	strne	r3, [r2, #4]
 800d386:	4630      	mov	r0, r6
 800d388:	f000 fe14 	bl	800dfb4 <__malloc_unlock>
 800d38c:	f104 000b 	add.w	r0, r4, #11
 800d390:	1d23      	adds	r3, r4, #4
 800d392:	f020 0007 	bic.w	r0, r0, #7
 800d396:	1ac2      	subs	r2, r0, r3
 800d398:	d0cc      	beq.n	800d334 <_malloc_r+0x20>
 800d39a:	1a1b      	subs	r3, r3, r0
 800d39c:	50a3      	str	r3, [r4, r2]
 800d39e:	e7c9      	b.n	800d334 <_malloc_r+0x20>
 800d3a0:	4622      	mov	r2, r4
 800d3a2:	6864      	ldr	r4, [r4, #4]
 800d3a4:	e7cc      	b.n	800d340 <_malloc_r+0x2c>
 800d3a6:	1cc4      	adds	r4, r0, #3
 800d3a8:	f024 0403 	bic.w	r4, r4, #3
 800d3ac:	42a0      	cmp	r0, r4
 800d3ae:	d0e3      	beq.n	800d378 <_malloc_r+0x64>
 800d3b0:	1a21      	subs	r1, r4, r0
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	f000 fac8 	bl	800d948 <_sbrk_r>
 800d3b8:	3001      	adds	r0, #1
 800d3ba:	d1dd      	bne.n	800d378 <_malloc_r+0x64>
 800d3bc:	e7cf      	b.n	800d35e <_malloc_r+0x4a>
 800d3be:	bf00      	nop
 800d3c0:	20004b30 	.word	0x20004b30
 800d3c4:	20004b34 	.word	0x20004b34

0800d3c8 <__ssputs_r>:
 800d3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3cc:	688e      	ldr	r6, [r1, #8]
 800d3ce:	429e      	cmp	r6, r3
 800d3d0:	4682      	mov	sl, r0
 800d3d2:	460c      	mov	r4, r1
 800d3d4:	4690      	mov	r8, r2
 800d3d6:	461f      	mov	r7, r3
 800d3d8:	d838      	bhi.n	800d44c <__ssputs_r+0x84>
 800d3da:	898a      	ldrh	r2, [r1, #12]
 800d3dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3e0:	d032      	beq.n	800d448 <__ssputs_r+0x80>
 800d3e2:	6825      	ldr	r5, [r4, #0]
 800d3e4:	6909      	ldr	r1, [r1, #16]
 800d3e6:	eba5 0901 	sub.w	r9, r5, r1
 800d3ea:	6965      	ldr	r5, [r4, #20]
 800d3ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	444b      	add	r3, r9
 800d3f8:	106d      	asrs	r5, r5, #1
 800d3fa:	429d      	cmp	r5, r3
 800d3fc:	bf38      	it	cc
 800d3fe:	461d      	movcc	r5, r3
 800d400:	0553      	lsls	r3, r2, #21
 800d402:	d531      	bpl.n	800d468 <__ssputs_r+0xa0>
 800d404:	4629      	mov	r1, r5
 800d406:	f7ff ff85 	bl	800d314 <_malloc_r>
 800d40a:	4606      	mov	r6, r0
 800d40c:	b950      	cbnz	r0, 800d424 <__ssputs_r+0x5c>
 800d40e:	230c      	movs	r3, #12
 800d410:	f8ca 3000 	str.w	r3, [sl]
 800d414:	89a3      	ldrh	r3, [r4, #12]
 800d416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d41a:	81a3      	strh	r3, [r4, #12]
 800d41c:	f04f 30ff 	mov.w	r0, #4294967295
 800d420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d424:	6921      	ldr	r1, [r4, #16]
 800d426:	464a      	mov	r2, r9
 800d428:	f7fc fc96 	bl	8009d58 <memcpy>
 800d42c:	89a3      	ldrh	r3, [r4, #12]
 800d42e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d436:	81a3      	strh	r3, [r4, #12]
 800d438:	6126      	str	r6, [r4, #16]
 800d43a:	6165      	str	r5, [r4, #20]
 800d43c:	444e      	add	r6, r9
 800d43e:	eba5 0509 	sub.w	r5, r5, r9
 800d442:	6026      	str	r6, [r4, #0]
 800d444:	60a5      	str	r5, [r4, #8]
 800d446:	463e      	mov	r6, r7
 800d448:	42be      	cmp	r6, r7
 800d44a:	d900      	bls.n	800d44e <__ssputs_r+0x86>
 800d44c:	463e      	mov	r6, r7
 800d44e:	4632      	mov	r2, r6
 800d450:	6820      	ldr	r0, [r4, #0]
 800d452:	4641      	mov	r1, r8
 800d454:	f000 fd8e 	bl	800df74 <memmove>
 800d458:	68a3      	ldr	r3, [r4, #8]
 800d45a:	6822      	ldr	r2, [r4, #0]
 800d45c:	1b9b      	subs	r3, r3, r6
 800d45e:	4432      	add	r2, r6
 800d460:	60a3      	str	r3, [r4, #8]
 800d462:	6022      	str	r2, [r4, #0]
 800d464:	2000      	movs	r0, #0
 800d466:	e7db      	b.n	800d420 <__ssputs_r+0x58>
 800d468:	462a      	mov	r2, r5
 800d46a:	f000 fda9 	bl	800dfc0 <_realloc_r>
 800d46e:	4606      	mov	r6, r0
 800d470:	2800      	cmp	r0, #0
 800d472:	d1e1      	bne.n	800d438 <__ssputs_r+0x70>
 800d474:	6921      	ldr	r1, [r4, #16]
 800d476:	4650      	mov	r0, sl
 800d478:	f7ff fefc 	bl	800d274 <_free_r>
 800d47c:	e7c7      	b.n	800d40e <__ssputs_r+0x46>
	...

0800d480 <_svfiprintf_r>:
 800d480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d484:	4698      	mov	r8, r3
 800d486:	898b      	ldrh	r3, [r1, #12]
 800d488:	061b      	lsls	r3, r3, #24
 800d48a:	b09d      	sub	sp, #116	; 0x74
 800d48c:	4607      	mov	r7, r0
 800d48e:	460d      	mov	r5, r1
 800d490:	4614      	mov	r4, r2
 800d492:	d50e      	bpl.n	800d4b2 <_svfiprintf_r+0x32>
 800d494:	690b      	ldr	r3, [r1, #16]
 800d496:	b963      	cbnz	r3, 800d4b2 <_svfiprintf_r+0x32>
 800d498:	2140      	movs	r1, #64	; 0x40
 800d49a:	f7ff ff3b 	bl	800d314 <_malloc_r>
 800d49e:	6028      	str	r0, [r5, #0]
 800d4a0:	6128      	str	r0, [r5, #16]
 800d4a2:	b920      	cbnz	r0, 800d4ae <_svfiprintf_r+0x2e>
 800d4a4:	230c      	movs	r3, #12
 800d4a6:	603b      	str	r3, [r7, #0]
 800d4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ac:	e0d1      	b.n	800d652 <_svfiprintf_r+0x1d2>
 800d4ae:	2340      	movs	r3, #64	; 0x40
 800d4b0:	616b      	str	r3, [r5, #20]
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d4b6:	2320      	movs	r3, #32
 800d4b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4c0:	2330      	movs	r3, #48	; 0x30
 800d4c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d66c <_svfiprintf_r+0x1ec>
 800d4c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4ca:	f04f 0901 	mov.w	r9, #1
 800d4ce:	4623      	mov	r3, r4
 800d4d0:	469a      	mov	sl, r3
 800d4d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4d6:	b10a      	cbz	r2, 800d4dc <_svfiprintf_r+0x5c>
 800d4d8:	2a25      	cmp	r2, #37	; 0x25
 800d4da:	d1f9      	bne.n	800d4d0 <_svfiprintf_r+0x50>
 800d4dc:	ebba 0b04 	subs.w	fp, sl, r4
 800d4e0:	d00b      	beq.n	800d4fa <_svfiprintf_r+0x7a>
 800d4e2:	465b      	mov	r3, fp
 800d4e4:	4622      	mov	r2, r4
 800d4e6:	4629      	mov	r1, r5
 800d4e8:	4638      	mov	r0, r7
 800d4ea:	f7ff ff6d 	bl	800d3c8 <__ssputs_r>
 800d4ee:	3001      	adds	r0, #1
 800d4f0:	f000 80aa 	beq.w	800d648 <_svfiprintf_r+0x1c8>
 800d4f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4f6:	445a      	add	r2, fp
 800d4f8:	9209      	str	r2, [sp, #36]	; 0x24
 800d4fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	f000 80a2 	beq.w	800d648 <_svfiprintf_r+0x1c8>
 800d504:	2300      	movs	r3, #0
 800d506:	f04f 32ff 	mov.w	r2, #4294967295
 800d50a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d50e:	f10a 0a01 	add.w	sl, sl, #1
 800d512:	9304      	str	r3, [sp, #16]
 800d514:	9307      	str	r3, [sp, #28]
 800d516:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d51a:	931a      	str	r3, [sp, #104]	; 0x68
 800d51c:	4654      	mov	r4, sl
 800d51e:	2205      	movs	r2, #5
 800d520:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d524:	4851      	ldr	r0, [pc, #324]	; (800d66c <_svfiprintf_r+0x1ec>)
 800d526:	f7f2 fe63 	bl	80001f0 <memchr>
 800d52a:	9a04      	ldr	r2, [sp, #16]
 800d52c:	b9d8      	cbnz	r0, 800d566 <_svfiprintf_r+0xe6>
 800d52e:	06d0      	lsls	r0, r2, #27
 800d530:	bf44      	itt	mi
 800d532:	2320      	movmi	r3, #32
 800d534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d538:	0711      	lsls	r1, r2, #28
 800d53a:	bf44      	itt	mi
 800d53c:	232b      	movmi	r3, #43	; 0x2b
 800d53e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d542:	f89a 3000 	ldrb.w	r3, [sl]
 800d546:	2b2a      	cmp	r3, #42	; 0x2a
 800d548:	d015      	beq.n	800d576 <_svfiprintf_r+0xf6>
 800d54a:	9a07      	ldr	r2, [sp, #28]
 800d54c:	4654      	mov	r4, sl
 800d54e:	2000      	movs	r0, #0
 800d550:	f04f 0c0a 	mov.w	ip, #10
 800d554:	4621      	mov	r1, r4
 800d556:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d55a:	3b30      	subs	r3, #48	; 0x30
 800d55c:	2b09      	cmp	r3, #9
 800d55e:	d94e      	bls.n	800d5fe <_svfiprintf_r+0x17e>
 800d560:	b1b0      	cbz	r0, 800d590 <_svfiprintf_r+0x110>
 800d562:	9207      	str	r2, [sp, #28]
 800d564:	e014      	b.n	800d590 <_svfiprintf_r+0x110>
 800d566:	eba0 0308 	sub.w	r3, r0, r8
 800d56a:	fa09 f303 	lsl.w	r3, r9, r3
 800d56e:	4313      	orrs	r3, r2
 800d570:	9304      	str	r3, [sp, #16]
 800d572:	46a2      	mov	sl, r4
 800d574:	e7d2      	b.n	800d51c <_svfiprintf_r+0x9c>
 800d576:	9b03      	ldr	r3, [sp, #12]
 800d578:	1d19      	adds	r1, r3, #4
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	9103      	str	r1, [sp, #12]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	bfbb      	ittet	lt
 800d582:	425b      	neglt	r3, r3
 800d584:	f042 0202 	orrlt.w	r2, r2, #2
 800d588:	9307      	strge	r3, [sp, #28]
 800d58a:	9307      	strlt	r3, [sp, #28]
 800d58c:	bfb8      	it	lt
 800d58e:	9204      	strlt	r2, [sp, #16]
 800d590:	7823      	ldrb	r3, [r4, #0]
 800d592:	2b2e      	cmp	r3, #46	; 0x2e
 800d594:	d10c      	bne.n	800d5b0 <_svfiprintf_r+0x130>
 800d596:	7863      	ldrb	r3, [r4, #1]
 800d598:	2b2a      	cmp	r3, #42	; 0x2a
 800d59a:	d135      	bne.n	800d608 <_svfiprintf_r+0x188>
 800d59c:	9b03      	ldr	r3, [sp, #12]
 800d59e:	1d1a      	adds	r2, r3, #4
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	9203      	str	r2, [sp, #12]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	bfb8      	it	lt
 800d5a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5ac:	3402      	adds	r4, #2
 800d5ae:	9305      	str	r3, [sp, #20]
 800d5b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d67c <_svfiprintf_r+0x1fc>
 800d5b4:	7821      	ldrb	r1, [r4, #0]
 800d5b6:	2203      	movs	r2, #3
 800d5b8:	4650      	mov	r0, sl
 800d5ba:	f7f2 fe19 	bl	80001f0 <memchr>
 800d5be:	b140      	cbz	r0, 800d5d2 <_svfiprintf_r+0x152>
 800d5c0:	2340      	movs	r3, #64	; 0x40
 800d5c2:	eba0 000a 	sub.w	r0, r0, sl
 800d5c6:	fa03 f000 	lsl.w	r0, r3, r0
 800d5ca:	9b04      	ldr	r3, [sp, #16]
 800d5cc:	4303      	orrs	r3, r0
 800d5ce:	3401      	adds	r4, #1
 800d5d0:	9304      	str	r3, [sp, #16]
 800d5d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5d6:	4826      	ldr	r0, [pc, #152]	; (800d670 <_svfiprintf_r+0x1f0>)
 800d5d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5dc:	2206      	movs	r2, #6
 800d5de:	f7f2 fe07 	bl	80001f0 <memchr>
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d038      	beq.n	800d658 <_svfiprintf_r+0x1d8>
 800d5e6:	4b23      	ldr	r3, [pc, #140]	; (800d674 <_svfiprintf_r+0x1f4>)
 800d5e8:	bb1b      	cbnz	r3, 800d632 <_svfiprintf_r+0x1b2>
 800d5ea:	9b03      	ldr	r3, [sp, #12]
 800d5ec:	3307      	adds	r3, #7
 800d5ee:	f023 0307 	bic.w	r3, r3, #7
 800d5f2:	3308      	adds	r3, #8
 800d5f4:	9303      	str	r3, [sp, #12]
 800d5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5f8:	4433      	add	r3, r6
 800d5fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d5fc:	e767      	b.n	800d4ce <_svfiprintf_r+0x4e>
 800d5fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800d602:	460c      	mov	r4, r1
 800d604:	2001      	movs	r0, #1
 800d606:	e7a5      	b.n	800d554 <_svfiprintf_r+0xd4>
 800d608:	2300      	movs	r3, #0
 800d60a:	3401      	adds	r4, #1
 800d60c:	9305      	str	r3, [sp, #20]
 800d60e:	4619      	mov	r1, r3
 800d610:	f04f 0c0a 	mov.w	ip, #10
 800d614:	4620      	mov	r0, r4
 800d616:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d61a:	3a30      	subs	r2, #48	; 0x30
 800d61c:	2a09      	cmp	r2, #9
 800d61e:	d903      	bls.n	800d628 <_svfiprintf_r+0x1a8>
 800d620:	2b00      	cmp	r3, #0
 800d622:	d0c5      	beq.n	800d5b0 <_svfiprintf_r+0x130>
 800d624:	9105      	str	r1, [sp, #20]
 800d626:	e7c3      	b.n	800d5b0 <_svfiprintf_r+0x130>
 800d628:	fb0c 2101 	mla	r1, ip, r1, r2
 800d62c:	4604      	mov	r4, r0
 800d62e:	2301      	movs	r3, #1
 800d630:	e7f0      	b.n	800d614 <_svfiprintf_r+0x194>
 800d632:	ab03      	add	r3, sp, #12
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	462a      	mov	r2, r5
 800d638:	4b0f      	ldr	r3, [pc, #60]	; (800d678 <_svfiprintf_r+0x1f8>)
 800d63a:	a904      	add	r1, sp, #16
 800d63c:	4638      	mov	r0, r7
 800d63e:	f7fc fc41 	bl	8009ec4 <_printf_float>
 800d642:	1c42      	adds	r2, r0, #1
 800d644:	4606      	mov	r6, r0
 800d646:	d1d6      	bne.n	800d5f6 <_svfiprintf_r+0x176>
 800d648:	89ab      	ldrh	r3, [r5, #12]
 800d64a:	065b      	lsls	r3, r3, #25
 800d64c:	f53f af2c 	bmi.w	800d4a8 <_svfiprintf_r+0x28>
 800d650:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d652:	b01d      	add	sp, #116	; 0x74
 800d654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d658:	ab03      	add	r3, sp, #12
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	462a      	mov	r2, r5
 800d65e:	4b06      	ldr	r3, [pc, #24]	; (800d678 <_svfiprintf_r+0x1f8>)
 800d660:	a904      	add	r1, sp, #16
 800d662:	4638      	mov	r0, r7
 800d664:	f7fc fed2 	bl	800a40c <_printf_i>
 800d668:	e7eb      	b.n	800d642 <_svfiprintf_r+0x1c2>
 800d66a:	bf00      	nop
 800d66c:	0800e8f4 	.word	0x0800e8f4
 800d670:	0800e8fe 	.word	0x0800e8fe
 800d674:	08009ec5 	.word	0x08009ec5
 800d678:	0800d3c9 	.word	0x0800d3c9
 800d67c:	0800e8fa 	.word	0x0800e8fa

0800d680 <__sfputc_r>:
 800d680:	6893      	ldr	r3, [r2, #8]
 800d682:	3b01      	subs	r3, #1
 800d684:	2b00      	cmp	r3, #0
 800d686:	b410      	push	{r4}
 800d688:	6093      	str	r3, [r2, #8]
 800d68a:	da08      	bge.n	800d69e <__sfputc_r+0x1e>
 800d68c:	6994      	ldr	r4, [r2, #24]
 800d68e:	42a3      	cmp	r3, r4
 800d690:	db01      	blt.n	800d696 <__sfputc_r+0x16>
 800d692:	290a      	cmp	r1, #10
 800d694:	d103      	bne.n	800d69e <__sfputc_r+0x1e>
 800d696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d69a:	f000 b977 	b.w	800d98c <__swbuf_r>
 800d69e:	6813      	ldr	r3, [r2, #0]
 800d6a0:	1c58      	adds	r0, r3, #1
 800d6a2:	6010      	str	r0, [r2, #0]
 800d6a4:	7019      	strb	r1, [r3, #0]
 800d6a6:	4608      	mov	r0, r1
 800d6a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6ac:	4770      	bx	lr

0800d6ae <__sfputs_r>:
 800d6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6b0:	4606      	mov	r6, r0
 800d6b2:	460f      	mov	r7, r1
 800d6b4:	4614      	mov	r4, r2
 800d6b6:	18d5      	adds	r5, r2, r3
 800d6b8:	42ac      	cmp	r4, r5
 800d6ba:	d101      	bne.n	800d6c0 <__sfputs_r+0x12>
 800d6bc:	2000      	movs	r0, #0
 800d6be:	e007      	b.n	800d6d0 <__sfputs_r+0x22>
 800d6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6c4:	463a      	mov	r2, r7
 800d6c6:	4630      	mov	r0, r6
 800d6c8:	f7ff ffda 	bl	800d680 <__sfputc_r>
 800d6cc:	1c43      	adds	r3, r0, #1
 800d6ce:	d1f3      	bne.n	800d6b8 <__sfputs_r+0xa>
 800d6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d6d4 <_vfiprintf_r>:
 800d6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d8:	460d      	mov	r5, r1
 800d6da:	b09d      	sub	sp, #116	; 0x74
 800d6dc:	4614      	mov	r4, r2
 800d6de:	4698      	mov	r8, r3
 800d6e0:	4606      	mov	r6, r0
 800d6e2:	b118      	cbz	r0, 800d6ec <_vfiprintf_r+0x18>
 800d6e4:	6983      	ldr	r3, [r0, #24]
 800d6e6:	b90b      	cbnz	r3, 800d6ec <_vfiprintf_r+0x18>
 800d6e8:	f000 fb40 	bl	800dd6c <__sinit>
 800d6ec:	4b89      	ldr	r3, [pc, #548]	; (800d914 <_vfiprintf_r+0x240>)
 800d6ee:	429d      	cmp	r5, r3
 800d6f0:	d11b      	bne.n	800d72a <_vfiprintf_r+0x56>
 800d6f2:	6875      	ldr	r5, [r6, #4]
 800d6f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6f6:	07d9      	lsls	r1, r3, #31
 800d6f8:	d405      	bmi.n	800d706 <_vfiprintf_r+0x32>
 800d6fa:	89ab      	ldrh	r3, [r5, #12]
 800d6fc:	059a      	lsls	r2, r3, #22
 800d6fe:	d402      	bmi.n	800d706 <_vfiprintf_r+0x32>
 800d700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d702:	f000 fbd1 	bl	800dea8 <__retarget_lock_acquire_recursive>
 800d706:	89ab      	ldrh	r3, [r5, #12]
 800d708:	071b      	lsls	r3, r3, #28
 800d70a:	d501      	bpl.n	800d710 <_vfiprintf_r+0x3c>
 800d70c:	692b      	ldr	r3, [r5, #16]
 800d70e:	b9eb      	cbnz	r3, 800d74c <_vfiprintf_r+0x78>
 800d710:	4629      	mov	r1, r5
 800d712:	4630      	mov	r0, r6
 800d714:	f000 f99a 	bl	800da4c <__swsetup_r>
 800d718:	b1c0      	cbz	r0, 800d74c <_vfiprintf_r+0x78>
 800d71a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d71c:	07dc      	lsls	r4, r3, #31
 800d71e:	d50e      	bpl.n	800d73e <_vfiprintf_r+0x6a>
 800d720:	f04f 30ff 	mov.w	r0, #4294967295
 800d724:	b01d      	add	sp, #116	; 0x74
 800d726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d72a:	4b7b      	ldr	r3, [pc, #492]	; (800d918 <_vfiprintf_r+0x244>)
 800d72c:	429d      	cmp	r5, r3
 800d72e:	d101      	bne.n	800d734 <_vfiprintf_r+0x60>
 800d730:	68b5      	ldr	r5, [r6, #8]
 800d732:	e7df      	b.n	800d6f4 <_vfiprintf_r+0x20>
 800d734:	4b79      	ldr	r3, [pc, #484]	; (800d91c <_vfiprintf_r+0x248>)
 800d736:	429d      	cmp	r5, r3
 800d738:	bf08      	it	eq
 800d73a:	68f5      	ldreq	r5, [r6, #12]
 800d73c:	e7da      	b.n	800d6f4 <_vfiprintf_r+0x20>
 800d73e:	89ab      	ldrh	r3, [r5, #12]
 800d740:	0598      	lsls	r0, r3, #22
 800d742:	d4ed      	bmi.n	800d720 <_vfiprintf_r+0x4c>
 800d744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d746:	f000 fbb0 	bl	800deaa <__retarget_lock_release_recursive>
 800d74a:	e7e9      	b.n	800d720 <_vfiprintf_r+0x4c>
 800d74c:	2300      	movs	r3, #0
 800d74e:	9309      	str	r3, [sp, #36]	; 0x24
 800d750:	2320      	movs	r3, #32
 800d752:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d756:	f8cd 800c 	str.w	r8, [sp, #12]
 800d75a:	2330      	movs	r3, #48	; 0x30
 800d75c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d920 <_vfiprintf_r+0x24c>
 800d760:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d764:	f04f 0901 	mov.w	r9, #1
 800d768:	4623      	mov	r3, r4
 800d76a:	469a      	mov	sl, r3
 800d76c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d770:	b10a      	cbz	r2, 800d776 <_vfiprintf_r+0xa2>
 800d772:	2a25      	cmp	r2, #37	; 0x25
 800d774:	d1f9      	bne.n	800d76a <_vfiprintf_r+0x96>
 800d776:	ebba 0b04 	subs.w	fp, sl, r4
 800d77a:	d00b      	beq.n	800d794 <_vfiprintf_r+0xc0>
 800d77c:	465b      	mov	r3, fp
 800d77e:	4622      	mov	r2, r4
 800d780:	4629      	mov	r1, r5
 800d782:	4630      	mov	r0, r6
 800d784:	f7ff ff93 	bl	800d6ae <__sfputs_r>
 800d788:	3001      	adds	r0, #1
 800d78a:	f000 80aa 	beq.w	800d8e2 <_vfiprintf_r+0x20e>
 800d78e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d790:	445a      	add	r2, fp
 800d792:	9209      	str	r2, [sp, #36]	; 0x24
 800d794:	f89a 3000 	ldrb.w	r3, [sl]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f000 80a2 	beq.w	800d8e2 <_vfiprintf_r+0x20e>
 800d79e:	2300      	movs	r3, #0
 800d7a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d7a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7a8:	f10a 0a01 	add.w	sl, sl, #1
 800d7ac:	9304      	str	r3, [sp, #16]
 800d7ae:	9307      	str	r3, [sp, #28]
 800d7b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7b4:	931a      	str	r3, [sp, #104]	; 0x68
 800d7b6:	4654      	mov	r4, sl
 800d7b8:	2205      	movs	r2, #5
 800d7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7be:	4858      	ldr	r0, [pc, #352]	; (800d920 <_vfiprintf_r+0x24c>)
 800d7c0:	f7f2 fd16 	bl	80001f0 <memchr>
 800d7c4:	9a04      	ldr	r2, [sp, #16]
 800d7c6:	b9d8      	cbnz	r0, 800d800 <_vfiprintf_r+0x12c>
 800d7c8:	06d1      	lsls	r1, r2, #27
 800d7ca:	bf44      	itt	mi
 800d7cc:	2320      	movmi	r3, #32
 800d7ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7d2:	0713      	lsls	r3, r2, #28
 800d7d4:	bf44      	itt	mi
 800d7d6:	232b      	movmi	r3, #43	; 0x2b
 800d7d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d7e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d7e2:	d015      	beq.n	800d810 <_vfiprintf_r+0x13c>
 800d7e4:	9a07      	ldr	r2, [sp, #28]
 800d7e6:	4654      	mov	r4, sl
 800d7e8:	2000      	movs	r0, #0
 800d7ea:	f04f 0c0a 	mov.w	ip, #10
 800d7ee:	4621      	mov	r1, r4
 800d7f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7f4:	3b30      	subs	r3, #48	; 0x30
 800d7f6:	2b09      	cmp	r3, #9
 800d7f8:	d94e      	bls.n	800d898 <_vfiprintf_r+0x1c4>
 800d7fa:	b1b0      	cbz	r0, 800d82a <_vfiprintf_r+0x156>
 800d7fc:	9207      	str	r2, [sp, #28]
 800d7fe:	e014      	b.n	800d82a <_vfiprintf_r+0x156>
 800d800:	eba0 0308 	sub.w	r3, r0, r8
 800d804:	fa09 f303 	lsl.w	r3, r9, r3
 800d808:	4313      	orrs	r3, r2
 800d80a:	9304      	str	r3, [sp, #16]
 800d80c:	46a2      	mov	sl, r4
 800d80e:	e7d2      	b.n	800d7b6 <_vfiprintf_r+0xe2>
 800d810:	9b03      	ldr	r3, [sp, #12]
 800d812:	1d19      	adds	r1, r3, #4
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	9103      	str	r1, [sp, #12]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	bfbb      	ittet	lt
 800d81c:	425b      	neglt	r3, r3
 800d81e:	f042 0202 	orrlt.w	r2, r2, #2
 800d822:	9307      	strge	r3, [sp, #28]
 800d824:	9307      	strlt	r3, [sp, #28]
 800d826:	bfb8      	it	lt
 800d828:	9204      	strlt	r2, [sp, #16]
 800d82a:	7823      	ldrb	r3, [r4, #0]
 800d82c:	2b2e      	cmp	r3, #46	; 0x2e
 800d82e:	d10c      	bne.n	800d84a <_vfiprintf_r+0x176>
 800d830:	7863      	ldrb	r3, [r4, #1]
 800d832:	2b2a      	cmp	r3, #42	; 0x2a
 800d834:	d135      	bne.n	800d8a2 <_vfiprintf_r+0x1ce>
 800d836:	9b03      	ldr	r3, [sp, #12]
 800d838:	1d1a      	adds	r2, r3, #4
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	9203      	str	r2, [sp, #12]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	bfb8      	it	lt
 800d842:	f04f 33ff 	movlt.w	r3, #4294967295
 800d846:	3402      	adds	r4, #2
 800d848:	9305      	str	r3, [sp, #20]
 800d84a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d930 <_vfiprintf_r+0x25c>
 800d84e:	7821      	ldrb	r1, [r4, #0]
 800d850:	2203      	movs	r2, #3
 800d852:	4650      	mov	r0, sl
 800d854:	f7f2 fccc 	bl	80001f0 <memchr>
 800d858:	b140      	cbz	r0, 800d86c <_vfiprintf_r+0x198>
 800d85a:	2340      	movs	r3, #64	; 0x40
 800d85c:	eba0 000a 	sub.w	r0, r0, sl
 800d860:	fa03 f000 	lsl.w	r0, r3, r0
 800d864:	9b04      	ldr	r3, [sp, #16]
 800d866:	4303      	orrs	r3, r0
 800d868:	3401      	adds	r4, #1
 800d86a:	9304      	str	r3, [sp, #16]
 800d86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d870:	482c      	ldr	r0, [pc, #176]	; (800d924 <_vfiprintf_r+0x250>)
 800d872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d876:	2206      	movs	r2, #6
 800d878:	f7f2 fcba 	bl	80001f0 <memchr>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d03f      	beq.n	800d900 <_vfiprintf_r+0x22c>
 800d880:	4b29      	ldr	r3, [pc, #164]	; (800d928 <_vfiprintf_r+0x254>)
 800d882:	bb1b      	cbnz	r3, 800d8cc <_vfiprintf_r+0x1f8>
 800d884:	9b03      	ldr	r3, [sp, #12]
 800d886:	3307      	adds	r3, #7
 800d888:	f023 0307 	bic.w	r3, r3, #7
 800d88c:	3308      	adds	r3, #8
 800d88e:	9303      	str	r3, [sp, #12]
 800d890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d892:	443b      	add	r3, r7
 800d894:	9309      	str	r3, [sp, #36]	; 0x24
 800d896:	e767      	b.n	800d768 <_vfiprintf_r+0x94>
 800d898:	fb0c 3202 	mla	r2, ip, r2, r3
 800d89c:	460c      	mov	r4, r1
 800d89e:	2001      	movs	r0, #1
 800d8a0:	e7a5      	b.n	800d7ee <_vfiprintf_r+0x11a>
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	3401      	adds	r4, #1
 800d8a6:	9305      	str	r3, [sp, #20]
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	f04f 0c0a 	mov.w	ip, #10
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8b4:	3a30      	subs	r2, #48	; 0x30
 800d8b6:	2a09      	cmp	r2, #9
 800d8b8:	d903      	bls.n	800d8c2 <_vfiprintf_r+0x1ee>
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d0c5      	beq.n	800d84a <_vfiprintf_r+0x176>
 800d8be:	9105      	str	r1, [sp, #20]
 800d8c0:	e7c3      	b.n	800d84a <_vfiprintf_r+0x176>
 800d8c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	e7f0      	b.n	800d8ae <_vfiprintf_r+0x1da>
 800d8cc:	ab03      	add	r3, sp, #12
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	462a      	mov	r2, r5
 800d8d2:	4b16      	ldr	r3, [pc, #88]	; (800d92c <_vfiprintf_r+0x258>)
 800d8d4:	a904      	add	r1, sp, #16
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	f7fc faf4 	bl	8009ec4 <_printf_float>
 800d8dc:	4607      	mov	r7, r0
 800d8de:	1c78      	adds	r0, r7, #1
 800d8e0:	d1d6      	bne.n	800d890 <_vfiprintf_r+0x1bc>
 800d8e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8e4:	07d9      	lsls	r1, r3, #31
 800d8e6:	d405      	bmi.n	800d8f4 <_vfiprintf_r+0x220>
 800d8e8:	89ab      	ldrh	r3, [r5, #12]
 800d8ea:	059a      	lsls	r2, r3, #22
 800d8ec:	d402      	bmi.n	800d8f4 <_vfiprintf_r+0x220>
 800d8ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8f0:	f000 fadb 	bl	800deaa <__retarget_lock_release_recursive>
 800d8f4:	89ab      	ldrh	r3, [r5, #12]
 800d8f6:	065b      	lsls	r3, r3, #25
 800d8f8:	f53f af12 	bmi.w	800d720 <_vfiprintf_r+0x4c>
 800d8fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8fe:	e711      	b.n	800d724 <_vfiprintf_r+0x50>
 800d900:	ab03      	add	r3, sp, #12
 800d902:	9300      	str	r3, [sp, #0]
 800d904:	462a      	mov	r2, r5
 800d906:	4b09      	ldr	r3, [pc, #36]	; (800d92c <_vfiprintf_r+0x258>)
 800d908:	a904      	add	r1, sp, #16
 800d90a:	4630      	mov	r0, r6
 800d90c:	f7fc fd7e 	bl	800a40c <_printf_i>
 800d910:	e7e4      	b.n	800d8dc <_vfiprintf_r+0x208>
 800d912:	bf00      	nop
 800d914:	0800ea28 	.word	0x0800ea28
 800d918:	0800ea48 	.word	0x0800ea48
 800d91c:	0800ea08 	.word	0x0800ea08
 800d920:	0800e8f4 	.word	0x0800e8f4
 800d924:	0800e8fe 	.word	0x0800e8fe
 800d928:	08009ec5 	.word	0x08009ec5
 800d92c:	0800d6af 	.word	0x0800d6af
 800d930:	0800e8fa 	.word	0x0800e8fa
 800d934:	00000000 	.word	0x00000000

0800d938 <nan>:
 800d938:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d940 <nan+0x8>
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop
 800d940:	00000000 	.word	0x00000000
 800d944:	7ff80000 	.word	0x7ff80000

0800d948 <_sbrk_r>:
 800d948:	b538      	push	{r3, r4, r5, lr}
 800d94a:	4d06      	ldr	r5, [pc, #24]	; (800d964 <_sbrk_r+0x1c>)
 800d94c:	2300      	movs	r3, #0
 800d94e:	4604      	mov	r4, r0
 800d950:	4608      	mov	r0, r1
 800d952:	602b      	str	r3, [r5, #0]
 800d954:	f7f4 ffe6 	bl	8002924 <_sbrk>
 800d958:	1c43      	adds	r3, r0, #1
 800d95a:	d102      	bne.n	800d962 <_sbrk_r+0x1a>
 800d95c:	682b      	ldr	r3, [r5, #0]
 800d95e:	b103      	cbz	r3, 800d962 <_sbrk_r+0x1a>
 800d960:	6023      	str	r3, [r4, #0]
 800d962:	bd38      	pop	{r3, r4, r5, pc}
 800d964:	20004dd4 	.word	0x20004dd4

0800d968 <strncmp>:
 800d968:	b510      	push	{r4, lr}
 800d96a:	b16a      	cbz	r2, 800d988 <strncmp+0x20>
 800d96c:	3901      	subs	r1, #1
 800d96e:	1884      	adds	r4, r0, r2
 800d970:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d974:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d978:	4293      	cmp	r3, r2
 800d97a:	d103      	bne.n	800d984 <strncmp+0x1c>
 800d97c:	42a0      	cmp	r0, r4
 800d97e:	d001      	beq.n	800d984 <strncmp+0x1c>
 800d980:	2b00      	cmp	r3, #0
 800d982:	d1f5      	bne.n	800d970 <strncmp+0x8>
 800d984:	1a98      	subs	r0, r3, r2
 800d986:	bd10      	pop	{r4, pc}
 800d988:	4610      	mov	r0, r2
 800d98a:	e7fc      	b.n	800d986 <strncmp+0x1e>

0800d98c <__swbuf_r>:
 800d98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d98e:	460e      	mov	r6, r1
 800d990:	4614      	mov	r4, r2
 800d992:	4605      	mov	r5, r0
 800d994:	b118      	cbz	r0, 800d99e <__swbuf_r+0x12>
 800d996:	6983      	ldr	r3, [r0, #24]
 800d998:	b90b      	cbnz	r3, 800d99e <__swbuf_r+0x12>
 800d99a:	f000 f9e7 	bl	800dd6c <__sinit>
 800d99e:	4b21      	ldr	r3, [pc, #132]	; (800da24 <__swbuf_r+0x98>)
 800d9a0:	429c      	cmp	r4, r3
 800d9a2:	d12b      	bne.n	800d9fc <__swbuf_r+0x70>
 800d9a4:	686c      	ldr	r4, [r5, #4]
 800d9a6:	69a3      	ldr	r3, [r4, #24]
 800d9a8:	60a3      	str	r3, [r4, #8]
 800d9aa:	89a3      	ldrh	r3, [r4, #12]
 800d9ac:	071a      	lsls	r2, r3, #28
 800d9ae:	d52f      	bpl.n	800da10 <__swbuf_r+0x84>
 800d9b0:	6923      	ldr	r3, [r4, #16]
 800d9b2:	b36b      	cbz	r3, 800da10 <__swbuf_r+0x84>
 800d9b4:	6923      	ldr	r3, [r4, #16]
 800d9b6:	6820      	ldr	r0, [r4, #0]
 800d9b8:	1ac0      	subs	r0, r0, r3
 800d9ba:	6963      	ldr	r3, [r4, #20]
 800d9bc:	b2f6      	uxtb	r6, r6
 800d9be:	4283      	cmp	r3, r0
 800d9c0:	4637      	mov	r7, r6
 800d9c2:	dc04      	bgt.n	800d9ce <__swbuf_r+0x42>
 800d9c4:	4621      	mov	r1, r4
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	f000 f93c 	bl	800dc44 <_fflush_r>
 800d9cc:	bb30      	cbnz	r0, 800da1c <__swbuf_r+0x90>
 800d9ce:	68a3      	ldr	r3, [r4, #8]
 800d9d0:	3b01      	subs	r3, #1
 800d9d2:	60a3      	str	r3, [r4, #8]
 800d9d4:	6823      	ldr	r3, [r4, #0]
 800d9d6:	1c5a      	adds	r2, r3, #1
 800d9d8:	6022      	str	r2, [r4, #0]
 800d9da:	701e      	strb	r6, [r3, #0]
 800d9dc:	6963      	ldr	r3, [r4, #20]
 800d9de:	3001      	adds	r0, #1
 800d9e0:	4283      	cmp	r3, r0
 800d9e2:	d004      	beq.n	800d9ee <__swbuf_r+0x62>
 800d9e4:	89a3      	ldrh	r3, [r4, #12]
 800d9e6:	07db      	lsls	r3, r3, #31
 800d9e8:	d506      	bpl.n	800d9f8 <__swbuf_r+0x6c>
 800d9ea:	2e0a      	cmp	r6, #10
 800d9ec:	d104      	bne.n	800d9f8 <__swbuf_r+0x6c>
 800d9ee:	4621      	mov	r1, r4
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	f000 f927 	bl	800dc44 <_fflush_r>
 800d9f6:	b988      	cbnz	r0, 800da1c <__swbuf_r+0x90>
 800d9f8:	4638      	mov	r0, r7
 800d9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9fc:	4b0a      	ldr	r3, [pc, #40]	; (800da28 <__swbuf_r+0x9c>)
 800d9fe:	429c      	cmp	r4, r3
 800da00:	d101      	bne.n	800da06 <__swbuf_r+0x7a>
 800da02:	68ac      	ldr	r4, [r5, #8]
 800da04:	e7cf      	b.n	800d9a6 <__swbuf_r+0x1a>
 800da06:	4b09      	ldr	r3, [pc, #36]	; (800da2c <__swbuf_r+0xa0>)
 800da08:	429c      	cmp	r4, r3
 800da0a:	bf08      	it	eq
 800da0c:	68ec      	ldreq	r4, [r5, #12]
 800da0e:	e7ca      	b.n	800d9a6 <__swbuf_r+0x1a>
 800da10:	4621      	mov	r1, r4
 800da12:	4628      	mov	r0, r5
 800da14:	f000 f81a 	bl	800da4c <__swsetup_r>
 800da18:	2800      	cmp	r0, #0
 800da1a:	d0cb      	beq.n	800d9b4 <__swbuf_r+0x28>
 800da1c:	f04f 37ff 	mov.w	r7, #4294967295
 800da20:	e7ea      	b.n	800d9f8 <__swbuf_r+0x6c>
 800da22:	bf00      	nop
 800da24:	0800ea28 	.word	0x0800ea28
 800da28:	0800ea48 	.word	0x0800ea48
 800da2c:	0800ea08 	.word	0x0800ea08

0800da30 <__ascii_wctomb>:
 800da30:	b149      	cbz	r1, 800da46 <__ascii_wctomb+0x16>
 800da32:	2aff      	cmp	r2, #255	; 0xff
 800da34:	bf85      	ittet	hi
 800da36:	238a      	movhi	r3, #138	; 0x8a
 800da38:	6003      	strhi	r3, [r0, #0]
 800da3a:	700a      	strbls	r2, [r1, #0]
 800da3c:	f04f 30ff 	movhi.w	r0, #4294967295
 800da40:	bf98      	it	ls
 800da42:	2001      	movls	r0, #1
 800da44:	4770      	bx	lr
 800da46:	4608      	mov	r0, r1
 800da48:	4770      	bx	lr
	...

0800da4c <__swsetup_r>:
 800da4c:	4b32      	ldr	r3, [pc, #200]	; (800db18 <__swsetup_r+0xcc>)
 800da4e:	b570      	push	{r4, r5, r6, lr}
 800da50:	681d      	ldr	r5, [r3, #0]
 800da52:	4606      	mov	r6, r0
 800da54:	460c      	mov	r4, r1
 800da56:	b125      	cbz	r5, 800da62 <__swsetup_r+0x16>
 800da58:	69ab      	ldr	r3, [r5, #24]
 800da5a:	b913      	cbnz	r3, 800da62 <__swsetup_r+0x16>
 800da5c:	4628      	mov	r0, r5
 800da5e:	f000 f985 	bl	800dd6c <__sinit>
 800da62:	4b2e      	ldr	r3, [pc, #184]	; (800db1c <__swsetup_r+0xd0>)
 800da64:	429c      	cmp	r4, r3
 800da66:	d10f      	bne.n	800da88 <__swsetup_r+0x3c>
 800da68:	686c      	ldr	r4, [r5, #4]
 800da6a:	89a3      	ldrh	r3, [r4, #12]
 800da6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da70:	0719      	lsls	r1, r3, #28
 800da72:	d42c      	bmi.n	800dace <__swsetup_r+0x82>
 800da74:	06dd      	lsls	r5, r3, #27
 800da76:	d411      	bmi.n	800da9c <__swsetup_r+0x50>
 800da78:	2309      	movs	r3, #9
 800da7a:	6033      	str	r3, [r6, #0]
 800da7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da80:	81a3      	strh	r3, [r4, #12]
 800da82:	f04f 30ff 	mov.w	r0, #4294967295
 800da86:	e03e      	b.n	800db06 <__swsetup_r+0xba>
 800da88:	4b25      	ldr	r3, [pc, #148]	; (800db20 <__swsetup_r+0xd4>)
 800da8a:	429c      	cmp	r4, r3
 800da8c:	d101      	bne.n	800da92 <__swsetup_r+0x46>
 800da8e:	68ac      	ldr	r4, [r5, #8]
 800da90:	e7eb      	b.n	800da6a <__swsetup_r+0x1e>
 800da92:	4b24      	ldr	r3, [pc, #144]	; (800db24 <__swsetup_r+0xd8>)
 800da94:	429c      	cmp	r4, r3
 800da96:	bf08      	it	eq
 800da98:	68ec      	ldreq	r4, [r5, #12]
 800da9a:	e7e6      	b.n	800da6a <__swsetup_r+0x1e>
 800da9c:	0758      	lsls	r0, r3, #29
 800da9e:	d512      	bpl.n	800dac6 <__swsetup_r+0x7a>
 800daa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800daa2:	b141      	cbz	r1, 800dab6 <__swsetup_r+0x6a>
 800daa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800daa8:	4299      	cmp	r1, r3
 800daaa:	d002      	beq.n	800dab2 <__swsetup_r+0x66>
 800daac:	4630      	mov	r0, r6
 800daae:	f7ff fbe1 	bl	800d274 <_free_r>
 800dab2:	2300      	movs	r3, #0
 800dab4:	6363      	str	r3, [r4, #52]	; 0x34
 800dab6:	89a3      	ldrh	r3, [r4, #12]
 800dab8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dabc:	81a3      	strh	r3, [r4, #12]
 800dabe:	2300      	movs	r3, #0
 800dac0:	6063      	str	r3, [r4, #4]
 800dac2:	6923      	ldr	r3, [r4, #16]
 800dac4:	6023      	str	r3, [r4, #0]
 800dac6:	89a3      	ldrh	r3, [r4, #12]
 800dac8:	f043 0308 	orr.w	r3, r3, #8
 800dacc:	81a3      	strh	r3, [r4, #12]
 800dace:	6923      	ldr	r3, [r4, #16]
 800dad0:	b94b      	cbnz	r3, 800dae6 <__swsetup_r+0x9a>
 800dad2:	89a3      	ldrh	r3, [r4, #12]
 800dad4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dadc:	d003      	beq.n	800dae6 <__swsetup_r+0x9a>
 800dade:	4621      	mov	r1, r4
 800dae0:	4630      	mov	r0, r6
 800dae2:	f000 fa07 	bl	800def4 <__smakebuf_r>
 800dae6:	89a0      	ldrh	r0, [r4, #12]
 800dae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800daec:	f010 0301 	ands.w	r3, r0, #1
 800daf0:	d00a      	beq.n	800db08 <__swsetup_r+0xbc>
 800daf2:	2300      	movs	r3, #0
 800daf4:	60a3      	str	r3, [r4, #8]
 800daf6:	6963      	ldr	r3, [r4, #20]
 800daf8:	425b      	negs	r3, r3
 800dafa:	61a3      	str	r3, [r4, #24]
 800dafc:	6923      	ldr	r3, [r4, #16]
 800dafe:	b943      	cbnz	r3, 800db12 <__swsetup_r+0xc6>
 800db00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db04:	d1ba      	bne.n	800da7c <__swsetup_r+0x30>
 800db06:	bd70      	pop	{r4, r5, r6, pc}
 800db08:	0781      	lsls	r1, r0, #30
 800db0a:	bf58      	it	pl
 800db0c:	6963      	ldrpl	r3, [r4, #20]
 800db0e:	60a3      	str	r3, [r4, #8]
 800db10:	e7f4      	b.n	800dafc <__swsetup_r+0xb0>
 800db12:	2000      	movs	r0, #0
 800db14:	e7f7      	b.n	800db06 <__swsetup_r+0xba>
 800db16:	bf00      	nop
 800db18:	20000014 	.word	0x20000014
 800db1c:	0800ea28 	.word	0x0800ea28
 800db20:	0800ea48 	.word	0x0800ea48
 800db24:	0800ea08 	.word	0x0800ea08

0800db28 <abort>:
 800db28:	b508      	push	{r3, lr}
 800db2a:	2006      	movs	r0, #6
 800db2c:	f000 fa96 	bl	800e05c <raise>
 800db30:	2001      	movs	r0, #1
 800db32:	f7f4 fe7f 	bl	8002834 <_exit>
	...

0800db38 <__sflush_r>:
 800db38:	898a      	ldrh	r2, [r1, #12]
 800db3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db3e:	4605      	mov	r5, r0
 800db40:	0710      	lsls	r0, r2, #28
 800db42:	460c      	mov	r4, r1
 800db44:	d458      	bmi.n	800dbf8 <__sflush_r+0xc0>
 800db46:	684b      	ldr	r3, [r1, #4]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	dc05      	bgt.n	800db58 <__sflush_r+0x20>
 800db4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db4e:	2b00      	cmp	r3, #0
 800db50:	dc02      	bgt.n	800db58 <__sflush_r+0x20>
 800db52:	2000      	movs	r0, #0
 800db54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db5a:	2e00      	cmp	r6, #0
 800db5c:	d0f9      	beq.n	800db52 <__sflush_r+0x1a>
 800db5e:	2300      	movs	r3, #0
 800db60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db64:	682f      	ldr	r7, [r5, #0]
 800db66:	602b      	str	r3, [r5, #0]
 800db68:	d032      	beq.n	800dbd0 <__sflush_r+0x98>
 800db6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db6c:	89a3      	ldrh	r3, [r4, #12]
 800db6e:	075a      	lsls	r2, r3, #29
 800db70:	d505      	bpl.n	800db7e <__sflush_r+0x46>
 800db72:	6863      	ldr	r3, [r4, #4]
 800db74:	1ac0      	subs	r0, r0, r3
 800db76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db78:	b10b      	cbz	r3, 800db7e <__sflush_r+0x46>
 800db7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db7c:	1ac0      	subs	r0, r0, r3
 800db7e:	2300      	movs	r3, #0
 800db80:	4602      	mov	r2, r0
 800db82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db84:	6a21      	ldr	r1, [r4, #32]
 800db86:	4628      	mov	r0, r5
 800db88:	47b0      	blx	r6
 800db8a:	1c43      	adds	r3, r0, #1
 800db8c:	89a3      	ldrh	r3, [r4, #12]
 800db8e:	d106      	bne.n	800db9e <__sflush_r+0x66>
 800db90:	6829      	ldr	r1, [r5, #0]
 800db92:	291d      	cmp	r1, #29
 800db94:	d82c      	bhi.n	800dbf0 <__sflush_r+0xb8>
 800db96:	4a2a      	ldr	r2, [pc, #168]	; (800dc40 <__sflush_r+0x108>)
 800db98:	40ca      	lsrs	r2, r1
 800db9a:	07d6      	lsls	r6, r2, #31
 800db9c:	d528      	bpl.n	800dbf0 <__sflush_r+0xb8>
 800db9e:	2200      	movs	r2, #0
 800dba0:	6062      	str	r2, [r4, #4]
 800dba2:	04d9      	lsls	r1, r3, #19
 800dba4:	6922      	ldr	r2, [r4, #16]
 800dba6:	6022      	str	r2, [r4, #0]
 800dba8:	d504      	bpl.n	800dbb4 <__sflush_r+0x7c>
 800dbaa:	1c42      	adds	r2, r0, #1
 800dbac:	d101      	bne.n	800dbb2 <__sflush_r+0x7a>
 800dbae:	682b      	ldr	r3, [r5, #0]
 800dbb0:	b903      	cbnz	r3, 800dbb4 <__sflush_r+0x7c>
 800dbb2:	6560      	str	r0, [r4, #84]	; 0x54
 800dbb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbb6:	602f      	str	r7, [r5, #0]
 800dbb8:	2900      	cmp	r1, #0
 800dbba:	d0ca      	beq.n	800db52 <__sflush_r+0x1a>
 800dbbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbc0:	4299      	cmp	r1, r3
 800dbc2:	d002      	beq.n	800dbca <__sflush_r+0x92>
 800dbc4:	4628      	mov	r0, r5
 800dbc6:	f7ff fb55 	bl	800d274 <_free_r>
 800dbca:	2000      	movs	r0, #0
 800dbcc:	6360      	str	r0, [r4, #52]	; 0x34
 800dbce:	e7c1      	b.n	800db54 <__sflush_r+0x1c>
 800dbd0:	6a21      	ldr	r1, [r4, #32]
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	47b0      	blx	r6
 800dbd8:	1c41      	adds	r1, r0, #1
 800dbda:	d1c7      	bne.n	800db6c <__sflush_r+0x34>
 800dbdc:	682b      	ldr	r3, [r5, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d0c4      	beq.n	800db6c <__sflush_r+0x34>
 800dbe2:	2b1d      	cmp	r3, #29
 800dbe4:	d001      	beq.n	800dbea <__sflush_r+0xb2>
 800dbe6:	2b16      	cmp	r3, #22
 800dbe8:	d101      	bne.n	800dbee <__sflush_r+0xb6>
 800dbea:	602f      	str	r7, [r5, #0]
 800dbec:	e7b1      	b.n	800db52 <__sflush_r+0x1a>
 800dbee:	89a3      	ldrh	r3, [r4, #12]
 800dbf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbf4:	81a3      	strh	r3, [r4, #12]
 800dbf6:	e7ad      	b.n	800db54 <__sflush_r+0x1c>
 800dbf8:	690f      	ldr	r7, [r1, #16]
 800dbfa:	2f00      	cmp	r7, #0
 800dbfc:	d0a9      	beq.n	800db52 <__sflush_r+0x1a>
 800dbfe:	0793      	lsls	r3, r2, #30
 800dc00:	680e      	ldr	r6, [r1, #0]
 800dc02:	bf08      	it	eq
 800dc04:	694b      	ldreq	r3, [r1, #20]
 800dc06:	600f      	str	r7, [r1, #0]
 800dc08:	bf18      	it	ne
 800dc0a:	2300      	movne	r3, #0
 800dc0c:	eba6 0807 	sub.w	r8, r6, r7
 800dc10:	608b      	str	r3, [r1, #8]
 800dc12:	f1b8 0f00 	cmp.w	r8, #0
 800dc16:	dd9c      	ble.n	800db52 <__sflush_r+0x1a>
 800dc18:	6a21      	ldr	r1, [r4, #32]
 800dc1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc1c:	4643      	mov	r3, r8
 800dc1e:	463a      	mov	r2, r7
 800dc20:	4628      	mov	r0, r5
 800dc22:	47b0      	blx	r6
 800dc24:	2800      	cmp	r0, #0
 800dc26:	dc06      	bgt.n	800dc36 <__sflush_r+0xfe>
 800dc28:	89a3      	ldrh	r3, [r4, #12]
 800dc2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc2e:	81a3      	strh	r3, [r4, #12]
 800dc30:	f04f 30ff 	mov.w	r0, #4294967295
 800dc34:	e78e      	b.n	800db54 <__sflush_r+0x1c>
 800dc36:	4407      	add	r7, r0
 800dc38:	eba8 0800 	sub.w	r8, r8, r0
 800dc3c:	e7e9      	b.n	800dc12 <__sflush_r+0xda>
 800dc3e:	bf00      	nop
 800dc40:	20400001 	.word	0x20400001

0800dc44 <_fflush_r>:
 800dc44:	b538      	push	{r3, r4, r5, lr}
 800dc46:	690b      	ldr	r3, [r1, #16]
 800dc48:	4605      	mov	r5, r0
 800dc4a:	460c      	mov	r4, r1
 800dc4c:	b913      	cbnz	r3, 800dc54 <_fflush_r+0x10>
 800dc4e:	2500      	movs	r5, #0
 800dc50:	4628      	mov	r0, r5
 800dc52:	bd38      	pop	{r3, r4, r5, pc}
 800dc54:	b118      	cbz	r0, 800dc5e <_fflush_r+0x1a>
 800dc56:	6983      	ldr	r3, [r0, #24]
 800dc58:	b90b      	cbnz	r3, 800dc5e <_fflush_r+0x1a>
 800dc5a:	f000 f887 	bl	800dd6c <__sinit>
 800dc5e:	4b14      	ldr	r3, [pc, #80]	; (800dcb0 <_fflush_r+0x6c>)
 800dc60:	429c      	cmp	r4, r3
 800dc62:	d11b      	bne.n	800dc9c <_fflush_r+0x58>
 800dc64:	686c      	ldr	r4, [r5, #4]
 800dc66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d0ef      	beq.n	800dc4e <_fflush_r+0xa>
 800dc6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc70:	07d0      	lsls	r0, r2, #31
 800dc72:	d404      	bmi.n	800dc7e <_fflush_r+0x3a>
 800dc74:	0599      	lsls	r1, r3, #22
 800dc76:	d402      	bmi.n	800dc7e <_fflush_r+0x3a>
 800dc78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc7a:	f000 f915 	bl	800dea8 <__retarget_lock_acquire_recursive>
 800dc7e:	4628      	mov	r0, r5
 800dc80:	4621      	mov	r1, r4
 800dc82:	f7ff ff59 	bl	800db38 <__sflush_r>
 800dc86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc88:	07da      	lsls	r2, r3, #31
 800dc8a:	4605      	mov	r5, r0
 800dc8c:	d4e0      	bmi.n	800dc50 <_fflush_r+0xc>
 800dc8e:	89a3      	ldrh	r3, [r4, #12]
 800dc90:	059b      	lsls	r3, r3, #22
 800dc92:	d4dd      	bmi.n	800dc50 <_fflush_r+0xc>
 800dc94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc96:	f000 f908 	bl	800deaa <__retarget_lock_release_recursive>
 800dc9a:	e7d9      	b.n	800dc50 <_fflush_r+0xc>
 800dc9c:	4b05      	ldr	r3, [pc, #20]	; (800dcb4 <_fflush_r+0x70>)
 800dc9e:	429c      	cmp	r4, r3
 800dca0:	d101      	bne.n	800dca6 <_fflush_r+0x62>
 800dca2:	68ac      	ldr	r4, [r5, #8]
 800dca4:	e7df      	b.n	800dc66 <_fflush_r+0x22>
 800dca6:	4b04      	ldr	r3, [pc, #16]	; (800dcb8 <_fflush_r+0x74>)
 800dca8:	429c      	cmp	r4, r3
 800dcaa:	bf08      	it	eq
 800dcac:	68ec      	ldreq	r4, [r5, #12]
 800dcae:	e7da      	b.n	800dc66 <_fflush_r+0x22>
 800dcb0:	0800ea28 	.word	0x0800ea28
 800dcb4:	0800ea48 	.word	0x0800ea48
 800dcb8:	0800ea08 	.word	0x0800ea08

0800dcbc <std>:
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	b510      	push	{r4, lr}
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	e9c0 3300 	strd	r3, r3, [r0]
 800dcc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcca:	6083      	str	r3, [r0, #8]
 800dccc:	8181      	strh	r1, [r0, #12]
 800dcce:	6643      	str	r3, [r0, #100]	; 0x64
 800dcd0:	81c2      	strh	r2, [r0, #14]
 800dcd2:	6183      	str	r3, [r0, #24]
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	2208      	movs	r2, #8
 800dcd8:	305c      	adds	r0, #92	; 0x5c
 800dcda:	f7fc f84b 	bl	8009d74 <memset>
 800dcde:	4b05      	ldr	r3, [pc, #20]	; (800dcf4 <std+0x38>)
 800dce0:	6263      	str	r3, [r4, #36]	; 0x24
 800dce2:	4b05      	ldr	r3, [pc, #20]	; (800dcf8 <std+0x3c>)
 800dce4:	62a3      	str	r3, [r4, #40]	; 0x28
 800dce6:	4b05      	ldr	r3, [pc, #20]	; (800dcfc <std+0x40>)
 800dce8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dcea:	4b05      	ldr	r3, [pc, #20]	; (800dd00 <std+0x44>)
 800dcec:	6224      	str	r4, [r4, #32]
 800dcee:	6323      	str	r3, [r4, #48]	; 0x30
 800dcf0:	bd10      	pop	{r4, pc}
 800dcf2:	bf00      	nop
 800dcf4:	0800e095 	.word	0x0800e095
 800dcf8:	0800e0b7 	.word	0x0800e0b7
 800dcfc:	0800e0ef 	.word	0x0800e0ef
 800dd00:	0800e113 	.word	0x0800e113

0800dd04 <_cleanup_r>:
 800dd04:	4901      	ldr	r1, [pc, #4]	; (800dd0c <_cleanup_r+0x8>)
 800dd06:	f000 b8af 	b.w	800de68 <_fwalk_reent>
 800dd0a:	bf00      	nop
 800dd0c:	0800dc45 	.word	0x0800dc45

0800dd10 <__sfmoreglue>:
 800dd10:	b570      	push	{r4, r5, r6, lr}
 800dd12:	1e4a      	subs	r2, r1, #1
 800dd14:	2568      	movs	r5, #104	; 0x68
 800dd16:	4355      	muls	r5, r2
 800dd18:	460e      	mov	r6, r1
 800dd1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd1e:	f7ff faf9 	bl	800d314 <_malloc_r>
 800dd22:	4604      	mov	r4, r0
 800dd24:	b140      	cbz	r0, 800dd38 <__sfmoreglue+0x28>
 800dd26:	2100      	movs	r1, #0
 800dd28:	e9c0 1600 	strd	r1, r6, [r0]
 800dd2c:	300c      	adds	r0, #12
 800dd2e:	60a0      	str	r0, [r4, #8]
 800dd30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dd34:	f7fc f81e 	bl	8009d74 <memset>
 800dd38:	4620      	mov	r0, r4
 800dd3a:	bd70      	pop	{r4, r5, r6, pc}

0800dd3c <__sfp_lock_acquire>:
 800dd3c:	4801      	ldr	r0, [pc, #4]	; (800dd44 <__sfp_lock_acquire+0x8>)
 800dd3e:	f000 b8b3 	b.w	800dea8 <__retarget_lock_acquire_recursive>
 800dd42:	bf00      	nop
 800dd44:	20004dd0 	.word	0x20004dd0

0800dd48 <__sfp_lock_release>:
 800dd48:	4801      	ldr	r0, [pc, #4]	; (800dd50 <__sfp_lock_release+0x8>)
 800dd4a:	f000 b8ae 	b.w	800deaa <__retarget_lock_release_recursive>
 800dd4e:	bf00      	nop
 800dd50:	20004dd0 	.word	0x20004dd0

0800dd54 <__sinit_lock_acquire>:
 800dd54:	4801      	ldr	r0, [pc, #4]	; (800dd5c <__sinit_lock_acquire+0x8>)
 800dd56:	f000 b8a7 	b.w	800dea8 <__retarget_lock_acquire_recursive>
 800dd5a:	bf00      	nop
 800dd5c:	20004dcb 	.word	0x20004dcb

0800dd60 <__sinit_lock_release>:
 800dd60:	4801      	ldr	r0, [pc, #4]	; (800dd68 <__sinit_lock_release+0x8>)
 800dd62:	f000 b8a2 	b.w	800deaa <__retarget_lock_release_recursive>
 800dd66:	bf00      	nop
 800dd68:	20004dcb 	.word	0x20004dcb

0800dd6c <__sinit>:
 800dd6c:	b510      	push	{r4, lr}
 800dd6e:	4604      	mov	r4, r0
 800dd70:	f7ff fff0 	bl	800dd54 <__sinit_lock_acquire>
 800dd74:	69a3      	ldr	r3, [r4, #24]
 800dd76:	b11b      	cbz	r3, 800dd80 <__sinit+0x14>
 800dd78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd7c:	f7ff bff0 	b.w	800dd60 <__sinit_lock_release>
 800dd80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dd84:	6523      	str	r3, [r4, #80]	; 0x50
 800dd86:	4b13      	ldr	r3, [pc, #76]	; (800ddd4 <__sinit+0x68>)
 800dd88:	4a13      	ldr	r2, [pc, #76]	; (800ddd8 <__sinit+0x6c>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	62a2      	str	r2, [r4, #40]	; 0x28
 800dd8e:	42a3      	cmp	r3, r4
 800dd90:	bf04      	itt	eq
 800dd92:	2301      	moveq	r3, #1
 800dd94:	61a3      	streq	r3, [r4, #24]
 800dd96:	4620      	mov	r0, r4
 800dd98:	f000 f820 	bl	800dddc <__sfp>
 800dd9c:	6060      	str	r0, [r4, #4]
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f000 f81c 	bl	800dddc <__sfp>
 800dda4:	60a0      	str	r0, [r4, #8]
 800dda6:	4620      	mov	r0, r4
 800dda8:	f000 f818 	bl	800dddc <__sfp>
 800ddac:	2200      	movs	r2, #0
 800ddae:	60e0      	str	r0, [r4, #12]
 800ddb0:	2104      	movs	r1, #4
 800ddb2:	6860      	ldr	r0, [r4, #4]
 800ddb4:	f7ff ff82 	bl	800dcbc <std>
 800ddb8:	68a0      	ldr	r0, [r4, #8]
 800ddba:	2201      	movs	r2, #1
 800ddbc:	2109      	movs	r1, #9
 800ddbe:	f7ff ff7d 	bl	800dcbc <std>
 800ddc2:	68e0      	ldr	r0, [r4, #12]
 800ddc4:	2202      	movs	r2, #2
 800ddc6:	2112      	movs	r1, #18
 800ddc8:	f7ff ff78 	bl	800dcbc <std>
 800ddcc:	2301      	movs	r3, #1
 800ddce:	61a3      	str	r3, [r4, #24]
 800ddd0:	e7d2      	b.n	800dd78 <__sinit+0xc>
 800ddd2:	bf00      	nop
 800ddd4:	0800e560 	.word	0x0800e560
 800ddd8:	0800dd05 	.word	0x0800dd05

0800dddc <__sfp>:
 800dddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddde:	4607      	mov	r7, r0
 800dde0:	f7ff ffac 	bl	800dd3c <__sfp_lock_acquire>
 800dde4:	4b1e      	ldr	r3, [pc, #120]	; (800de60 <__sfp+0x84>)
 800dde6:	681e      	ldr	r6, [r3, #0]
 800dde8:	69b3      	ldr	r3, [r6, #24]
 800ddea:	b913      	cbnz	r3, 800ddf2 <__sfp+0x16>
 800ddec:	4630      	mov	r0, r6
 800ddee:	f7ff ffbd 	bl	800dd6c <__sinit>
 800ddf2:	3648      	adds	r6, #72	; 0x48
 800ddf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ddf8:	3b01      	subs	r3, #1
 800ddfa:	d503      	bpl.n	800de04 <__sfp+0x28>
 800ddfc:	6833      	ldr	r3, [r6, #0]
 800ddfe:	b30b      	cbz	r3, 800de44 <__sfp+0x68>
 800de00:	6836      	ldr	r6, [r6, #0]
 800de02:	e7f7      	b.n	800ddf4 <__sfp+0x18>
 800de04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de08:	b9d5      	cbnz	r5, 800de40 <__sfp+0x64>
 800de0a:	4b16      	ldr	r3, [pc, #88]	; (800de64 <__sfp+0x88>)
 800de0c:	60e3      	str	r3, [r4, #12]
 800de0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de12:	6665      	str	r5, [r4, #100]	; 0x64
 800de14:	f000 f847 	bl	800dea6 <__retarget_lock_init_recursive>
 800de18:	f7ff ff96 	bl	800dd48 <__sfp_lock_release>
 800de1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800de20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800de24:	6025      	str	r5, [r4, #0]
 800de26:	61a5      	str	r5, [r4, #24]
 800de28:	2208      	movs	r2, #8
 800de2a:	4629      	mov	r1, r5
 800de2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800de30:	f7fb ffa0 	bl	8009d74 <memset>
 800de34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de3c:	4620      	mov	r0, r4
 800de3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de40:	3468      	adds	r4, #104	; 0x68
 800de42:	e7d9      	b.n	800ddf8 <__sfp+0x1c>
 800de44:	2104      	movs	r1, #4
 800de46:	4638      	mov	r0, r7
 800de48:	f7ff ff62 	bl	800dd10 <__sfmoreglue>
 800de4c:	4604      	mov	r4, r0
 800de4e:	6030      	str	r0, [r6, #0]
 800de50:	2800      	cmp	r0, #0
 800de52:	d1d5      	bne.n	800de00 <__sfp+0x24>
 800de54:	f7ff ff78 	bl	800dd48 <__sfp_lock_release>
 800de58:	230c      	movs	r3, #12
 800de5a:	603b      	str	r3, [r7, #0]
 800de5c:	e7ee      	b.n	800de3c <__sfp+0x60>
 800de5e:	bf00      	nop
 800de60:	0800e560 	.word	0x0800e560
 800de64:	ffff0001 	.word	0xffff0001

0800de68 <_fwalk_reent>:
 800de68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de6c:	4606      	mov	r6, r0
 800de6e:	4688      	mov	r8, r1
 800de70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800de74:	2700      	movs	r7, #0
 800de76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de7a:	f1b9 0901 	subs.w	r9, r9, #1
 800de7e:	d505      	bpl.n	800de8c <_fwalk_reent+0x24>
 800de80:	6824      	ldr	r4, [r4, #0]
 800de82:	2c00      	cmp	r4, #0
 800de84:	d1f7      	bne.n	800de76 <_fwalk_reent+0xe>
 800de86:	4638      	mov	r0, r7
 800de88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de8c:	89ab      	ldrh	r3, [r5, #12]
 800de8e:	2b01      	cmp	r3, #1
 800de90:	d907      	bls.n	800dea2 <_fwalk_reent+0x3a>
 800de92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de96:	3301      	adds	r3, #1
 800de98:	d003      	beq.n	800dea2 <_fwalk_reent+0x3a>
 800de9a:	4629      	mov	r1, r5
 800de9c:	4630      	mov	r0, r6
 800de9e:	47c0      	blx	r8
 800dea0:	4307      	orrs	r7, r0
 800dea2:	3568      	adds	r5, #104	; 0x68
 800dea4:	e7e9      	b.n	800de7a <_fwalk_reent+0x12>

0800dea6 <__retarget_lock_init_recursive>:
 800dea6:	4770      	bx	lr

0800dea8 <__retarget_lock_acquire_recursive>:
 800dea8:	4770      	bx	lr

0800deaa <__retarget_lock_release_recursive>:
 800deaa:	4770      	bx	lr

0800deac <__swhatbuf_r>:
 800deac:	b570      	push	{r4, r5, r6, lr}
 800deae:	460e      	mov	r6, r1
 800deb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deb4:	2900      	cmp	r1, #0
 800deb6:	b096      	sub	sp, #88	; 0x58
 800deb8:	4614      	mov	r4, r2
 800deba:	461d      	mov	r5, r3
 800debc:	da07      	bge.n	800dece <__swhatbuf_r+0x22>
 800debe:	2300      	movs	r3, #0
 800dec0:	602b      	str	r3, [r5, #0]
 800dec2:	89b3      	ldrh	r3, [r6, #12]
 800dec4:	061a      	lsls	r2, r3, #24
 800dec6:	d410      	bmi.n	800deea <__swhatbuf_r+0x3e>
 800dec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800decc:	e00e      	b.n	800deec <__swhatbuf_r+0x40>
 800dece:	466a      	mov	r2, sp
 800ded0:	f000 f946 	bl	800e160 <_fstat_r>
 800ded4:	2800      	cmp	r0, #0
 800ded6:	dbf2      	blt.n	800debe <__swhatbuf_r+0x12>
 800ded8:	9a01      	ldr	r2, [sp, #4]
 800deda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dede:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dee2:	425a      	negs	r2, r3
 800dee4:	415a      	adcs	r2, r3
 800dee6:	602a      	str	r2, [r5, #0]
 800dee8:	e7ee      	b.n	800dec8 <__swhatbuf_r+0x1c>
 800deea:	2340      	movs	r3, #64	; 0x40
 800deec:	2000      	movs	r0, #0
 800deee:	6023      	str	r3, [r4, #0]
 800def0:	b016      	add	sp, #88	; 0x58
 800def2:	bd70      	pop	{r4, r5, r6, pc}

0800def4 <__smakebuf_r>:
 800def4:	898b      	ldrh	r3, [r1, #12]
 800def6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800def8:	079d      	lsls	r5, r3, #30
 800defa:	4606      	mov	r6, r0
 800defc:	460c      	mov	r4, r1
 800defe:	d507      	bpl.n	800df10 <__smakebuf_r+0x1c>
 800df00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df04:	6023      	str	r3, [r4, #0]
 800df06:	6123      	str	r3, [r4, #16]
 800df08:	2301      	movs	r3, #1
 800df0a:	6163      	str	r3, [r4, #20]
 800df0c:	b002      	add	sp, #8
 800df0e:	bd70      	pop	{r4, r5, r6, pc}
 800df10:	ab01      	add	r3, sp, #4
 800df12:	466a      	mov	r2, sp
 800df14:	f7ff ffca 	bl	800deac <__swhatbuf_r>
 800df18:	9900      	ldr	r1, [sp, #0]
 800df1a:	4605      	mov	r5, r0
 800df1c:	4630      	mov	r0, r6
 800df1e:	f7ff f9f9 	bl	800d314 <_malloc_r>
 800df22:	b948      	cbnz	r0, 800df38 <__smakebuf_r+0x44>
 800df24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df28:	059a      	lsls	r2, r3, #22
 800df2a:	d4ef      	bmi.n	800df0c <__smakebuf_r+0x18>
 800df2c:	f023 0303 	bic.w	r3, r3, #3
 800df30:	f043 0302 	orr.w	r3, r3, #2
 800df34:	81a3      	strh	r3, [r4, #12]
 800df36:	e7e3      	b.n	800df00 <__smakebuf_r+0xc>
 800df38:	4b0d      	ldr	r3, [pc, #52]	; (800df70 <__smakebuf_r+0x7c>)
 800df3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800df3c:	89a3      	ldrh	r3, [r4, #12]
 800df3e:	6020      	str	r0, [r4, #0]
 800df40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df44:	81a3      	strh	r3, [r4, #12]
 800df46:	9b00      	ldr	r3, [sp, #0]
 800df48:	6163      	str	r3, [r4, #20]
 800df4a:	9b01      	ldr	r3, [sp, #4]
 800df4c:	6120      	str	r0, [r4, #16]
 800df4e:	b15b      	cbz	r3, 800df68 <__smakebuf_r+0x74>
 800df50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df54:	4630      	mov	r0, r6
 800df56:	f000 f915 	bl	800e184 <_isatty_r>
 800df5a:	b128      	cbz	r0, 800df68 <__smakebuf_r+0x74>
 800df5c:	89a3      	ldrh	r3, [r4, #12]
 800df5e:	f023 0303 	bic.w	r3, r3, #3
 800df62:	f043 0301 	orr.w	r3, r3, #1
 800df66:	81a3      	strh	r3, [r4, #12]
 800df68:	89a0      	ldrh	r0, [r4, #12]
 800df6a:	4305      	orrs	r5, r0
 800df6c:	81a5      	strh	r5, [r4, #12]
 800df6e:	e7cd      	b.n	800df0c <__smakebuf_r+0x18>
 800df70:	0800dd05 	.word	0x0800dd05

0800df74 <memmove>:
 800df74:	4288      	cmp	r0, r1
 800df76:	b510      	push	{r4, lr}
 800df78:	eb01 0402 	add.w	r4, r1, r2
 800df7c:	d902      	bls.n	800df84 <memmove+0x10>
 800df7e:	4284      	cmp	r4, r0
 800df80:	4623      	mov	r3, r4
 800df82:	d807      	bhi.n	800df94 <memmove+0x20>
 800df84:	1e43      	subs	r3, r0, #1
 800df86:	42a1      	cmp	r1, r4
 800df88:	d008      	beq.n	800df9c <memmove+0x28>
 800df8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df92:	e7f8      	b.n	800df86 <memmove+0x12>
 800df94:	4402      	add	r2, r0
 800df96:	4601      	mov	r1, r0
 800df98:	428a      	cmp	r2, r1
 800df9a:	d100      	bne.n	800df9e <memmove+0x2a>
 800df9c:	bd10      	pop	{r4, pc}
 800df9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dfa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dfa6:	e7f7      	b.n	800df98 <memmove+0x24>

0800dfa8 <__malloc_lock>:
 800dfa8:	4801      	ldr	r0, [pc, #4]	; (800dfb0 <__malloc_lock+0x8>)
 800dfaa:	f7ff bf7d 	b.w	800dea8 <__retarget_lock_acquire_recursive>
 800dfae:	bf00      	nop
 800dfb0:	20004dcc 	.word	0x20004dcc

0800dfb4 <__malloc_unlock>:
 800dfb4:	4801      	ldr	r0, [pc, #4]	; (800dfbc <__malloc_unlock+0x8>)
 800dfb6:	f7ff bf78 	b.w	800deaa <__retarget_lock_release_recursive>
 800dfba:	bf00      	nop
 800dfbc:	20004dcc 	.word	0x20004dcc

0800dfc0 <_realloc_r>:
 800dfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfc2:	4607      	mov	r7, r0
 800dfc4:	4614      	mov	r4, r2
 800dfc6:	460e      	mov	r6, r1
 800dfc8:	b921      	cbnz	r1, 800dfd4 <_realloc_r+0x14>
 800dfca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dfce:	4611      	mov	r1, r2
 800dfd0:	f7ff b9a0 	b.w	800d314 <_malloc_r>
 800dfd4:	b922      	cbnz	r2, 800dfe0 <_realloc_r+0x20>
 800dfd6:	f7ff f94d 	bl	800d274 <_free_r>
 800dfda:	4625      	mov	r5, r4
 800dfdc:	4628      	mov	r0, r5
 800dfde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfe0:	f000 f8f2 	bl	800e1c8 <_malloc_usable_size_r>
 800dfe4:	42a0      	cmp	r0, r4
 800dfe6:	d20f      	bcs.n	800e008 <_realloc_r+0x48>
 800dfe8:	4621      	mov	r1, r4
 800dfea:	4638      	mov	r0, r7
 800dfec:	f7ff f992 	bl	800d314 <_malloc_r>
 800dff0:	4605      	mov	r5, r0
 800dff2:	2800      	cmp	r0, #0
 800dff4:	d0f2      	beq.n	800dfdc <_realloc_r+0x1c>
 800dff6:	4631      	mov	r1, r6
 800dff8:	4622      	mov	r2, r4
 800dffa:	f7fb fead 	bl	8009d58 <memcpy>
 800dffe:	4631      	mov	r1, r6
 800e000:	4638      	mov	r0, r7
 800e002:	f7ff f937 	bl	800d274 <_free_r>
 800e006:	e7e9      	b.n	800dfdc <_realloc_r+0x1c>
 800e008:	4635      	mov	r5, r6
 800e00a:	e7e7      	b.n	800dfdc <_realloc_r+0x1c>

0800e00c <_raise_r>:
 800e00c:	291f      	cmp	r1, #31
 800e00e:	b538      	push	{r3, r4, r5, lr}
 800e010:	4604      	mov	r4, r0
 800e012:	460d      	mov	r5, r1
 800e014:	d904      	bls.n	800e020 <_raise_r+0x14>
 800e016:	2316      	movs	r3, #22
 800e018:	6003      	str	r3, [r0, #0]
 800e01a:	f04f 30ff 	mov.w	r0, #4294967295
 800e01e:	bd38      	pop	{r3, r4, r5, pc}
 800e020:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e022:	b112      	cbz	r2, 800e02a <_raise_r+0x1e>
 800e024:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e028:	b94b      	cbnz	r3, 800e03e <_raise_r+0x32>
 800e02a:	4620      	mov	r0, r4
 800e02c:	f000 f830 	bl	800e090 <_getpid_r>
 800e030:	462a      	mov	r2, r5
 800e032:	4601      	mov	r1, r0
 800e034:	4620      	mov	r0, r4
 800e036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e03a:	f000 b817 	b.w	800e06c <_kill_r>
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d00a      	beq.n	800e058 <_raise_r+0x4c>
 800e042:	1c59      	adds	r1, r3, #1
 800e044:	d103      	bne.n	800e04e <_raise_r+0x42>
 800e046:	2316      	movs	r3, #22
 800e048:	6003      	str	r3, [r0, #0]
 800e04a:	2001      	movs	r0, #1
 800e04c:	e7e7      	b.n	800e01e <_raise_r+0x12>
 800e04e:	2400      	movs	r4, #0
 800e050:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e054:	4628      	mov	r0, r5
 800e056:	4798      	blx	r3
 800e058:	2000      	movs	r0, #0
 800e05a:	e7e0      	b.n	800e01e <_raise_r+0x12>

0800e05c <raise>:
 800e05c:	4b02      	ldr	r3, [pc, #8]	; (800e068 <raise+0xc>)
 800e05e:	4601      	mov	r1, r0
 800e060:	6818      	ldr	r0, [r3, #0]
 800e062:	f7ff bfd3 	b.w	800e00c <_raise_r>
 800e066:	bf00      	nop
 800e068:	20000014 	.word	0x20000014

0800e06c <_kill_r>:
 800e06c:	b538      	push	{r3, r4, r5, lr}
 800e06e:	4d07      	ldr	r5, [pc, #28]	; (800e08c <_kill_r+0x20>)
 800e070:	2300      	movs	r3, #0
 800e072:	4604      	mov	r4, r0
 800e074:	4608      	mov	r0, r1
 800e076:	4611      	mov	r1, r2
 800e078:	602b      	str	r3, [r5, #0]
 800e07a:	f7f4 fbcb 	bl	8002814 <_kill>
 800e07e:	1c43      	adds	r3, r0, #1
 800e080:	d102      	bne.n	800e088 <_kill_r+0x1c>
 800e082:	682b      	ldr	r3, [r5, #0]
 800e084:	b103      	cbz	r3, 800e088 <_kill_r+0x1c>
 800e086:	6023      	str	r3, [r4, #0]
 800e088:	bd38      	pop	{r3, r4, r5, pc}
 800e08a:	bf00      	nop
 800e08c:	20004dd4 	.word	0x20004dd4

0800e090 <_getpid_r>:
 800e090:	f7f4 bbb8 	b.w	8002804 <_getpid>

0800e094 <__sread>:
 800e094:	b510      	push	{r4, lr}
 800e096:	460c      	mov	r4, r1
 800e098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e09c:	f000 f89c 	bl	800e1d8 <_read_r>
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	bfab      	itete	ge
 800e0a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e0a6:	89a3      	ldrhlt	r3, [r4, #12]
 800e0a8:	181b      	addge	r3, r3, r0
 800e0aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e0ae:	bfac      	ite	ge
 800e0b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e0b2:	81a3      	strhlt	r3, [r4, #12]
 800e0b4:	bd10      	pop	{r4, pc}

0800e0b6 <__swrite>:
 800e0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ba:	461f      	mov	r7, r3
 800e0bc:	898b      	ldrh	r3, [r1, #12]
 800e0be:	05db      	lsls	r3, r3, #23
 800e0c0:	4605      	mov	r5, r0
 800e0c2:	460c      	mov	r4, r1
 800e0c4:	4616      	mov	r6, r2
 800e0c6:	d505      	bpl.n	800e0d4 <__swrite+0x1e>
 800e0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0cc:	2302      	movs	r3, #2
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f000 f868 	bl	800e1a4 <_lseek_r>
 800e0d4:	89a3      	ldrh	r3, [r4, #12]
 800e0d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0de:	81a3      	strh	r3, [r4, #12]
 800e0e0:	4632      	mov	r2, r6
 800e0e2:	463b      	mov	r3, r7
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ea:	f000 b817 	b.w	800e11c <_write_r>

0800e0ee <__sseek>:
 800e0ee:	b510      	push	{r4, lr}
 800e0f0:	460c      	mov	r4, r1
 800e0f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0f6:	f000 f855 	bl	800e1a4 <_lseek_r>
 800e0fa:	1c43      	adds	r3, r0, #1
 800e0fc:	89a3      	ldrh	r3, [r4, #12]
 800e0fe:	bf15      	itete	ne
 800e100:	6560      	strne	r0, [r4, #84]	; 0x54
 800e102:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e106:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e10a:	81a3      	strheq	r3, [r4, #12]
 800e10c:	bf18      	it	ne
 800e10e:	81a3      	strhne	r3, [r4, #12]
 800e110:	bd10      	pop	{r4, pc}

0800e112 <__sclose>:
 800e112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e116:	f000 b813 	b.w	800e140 <_close_r>
	...

0800e11c <_write_r>:
 800e11c:	b538      	push	{r3, r4, r5, lr}
 800e11e:	4d07      	ldr	r5, [pc, #28]	; (800e13c <_write_r+0x20>)
 800e120:	4604      	mov	r4, r0
 800e122:	4608      	mov	r0, r1
 800e124:	4611      	mov	r1, r2
 800e126:	2200      	movs	r2, #0
 800e128:	602a      	str	r2, [r5, #0]
 800e12a:	461a      	mov	r2, r3
 800e12c:	f7f4 fba9 	bl	8002882 <_write>
 800e130:	1c43      	adds	r3, r0, #1
 800e132:	d102      	bne.n	800e13a <_write_r+0x1e>
 800e134:	682b      	ldr	r3, [r5, #0]
 800e136:	b103      	cbz	r3, 800e13a <_write_r+0x1e>
 800e138:	6023      	str	r3, [r4, #0]
 800e13a:	bd38      	pop	{r3, r4, r5, pc}
 800e13c:	20004dd4 	.word	0x20004dd4

0800e140 <_close_r>:
 800e140:	b538      	push	{r3, r4, r5, lr}
 800e142:	4d06      	ldr	r5, [pc, #24]	; (800e15c <_close_r+0x1c>)
 800e144:	2300      	movs	r3, #0
 800e146:	4604      	mov	r4, r0
 800e148:	4608      	mov	r0, r1
 800e14a:	602b      	str	r3, [r5, #0]
 800e14c:	f7f4 fbb5 	bl	80028ba <_close>
 800e150:	1c43      	adds	r3, r0, #1
 800e152:	d102      	bne.n	800e15a <_close_r+0x1a>
 800e154:	682b      	ldr	r3, [r5, #0]
 800e156:	b103      	cbz	r3, 800e15a <_close_r+0x1a>
 800e158:	6023      	str	r3, [r4, #0]
 800e15a:	bd38      	pop	{r3, r4, r5, pc}
 800e15c:	20004dd4 	.word	0x20004dd4

0800e160 <_fstat_r>:
 800e160:	b538      	push	{r3, r4, r5, lr}
 800e162:	4d07      	ldr	r5, [pc, #28]	; (800e180 <_fstat_r+0x20>)
 800e164:	2300      	movs	r3, #0
 800e166:	4604      	mov	r4, r0
 800e168:	4608      	mov	r0, r1
 800e16a:	4611      	mov	r1, r2
 800e16c:	602b      	str	r3, [r5, #0]
 800e16e:	f7f4 fbb0 	bl	80028d2 <_fstat>
 800e172:	1c43      	adds	r3, r0, #1
 800e174:	d102      	bne.n	800e17c <_fstat_r+0x1c>
 800e176:	682b      	ldr	r3, [r5, #0]
 800e178:	b103      	cbz	r3, 800e17c <_fstat_r+0x1c>
 800e17a:	6023      	str	r3, [r4, #0]
 800e17c:	bd38      	pop	{r3, r4, r5, pc}
 800e17e:	bf00      	nop
 800e180:	20004dd4 	.word	0x20004dd4

0800e184 <_isatty_r>:
 800e184:	b538      	push	{r3, r4, r5, lr}
 800e186:	4d06      	ldr	r5, [pc, #24]	; (800e1a0 <_isatty_r+0x1c>)
 800e188:	2300      	movs	r3, #0
 800e18a:	4604      	mov	r4, r0
 800e18c:	4608      	mov	r0, r1
 800e18e:	602b      	str	r3, [r5, #0]
 800e190:	f7f4 fbaf 	bl	80028f2 <_isatty>
 800e194:	1c43      	adds	r3, r0, #1
 800e196:	d102      	bne.n	800e19e <_isatty_r+0x1a>
 800e198:	682b      	ldr	r3, [r5, #0]
 800e19a:	b103      	cbz	r3, 800e19e <_isatty_r+0x1a>
 800e19c:	6023      	str	r3, [r4, #0]
 800e19e:	bd38      	pop	{r3, r4, r5, pc}
 800e1a0:	20004dd4 	.word	0x20004dd4

0800e1a4 <_lseek_r>:
 800e1a4:	b538      	push	{r3, r4, r5, lr}
 800e1a6:	4d07      	ldr	r5, [pc, #28]	; (800e1c4 <_lseek_r+0x20>)
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	4608      	mov	r0, r1
 800e1ac:	4611      	mov	r1, r2
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	602a      	str	r2, [r5, #0]
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	f7f4 fba8 	bl	8002908 <_lseek>
 800e1b8:	1c43      	adds	r3, r0, #1
 800e1ba:	d102      	bne.n	800e1c2 <_lseek_r+0x1e>
 800e1bc:	682b      	ldr	r3, [r5, #0]
 800e1be:	b103      	cbz	r3, 800e1c2 <_lseek_r+0x1e>
 800e1c0:	6023      	str	r3, [r4, #0]
 800e1c2:	bd38      	pop	{r3, r4, r5, pc}
 800e1c4:	20004dd4 	.word	0x20004dd4

0800e1c8 <_malloc_usable_size_r>:
 800e1c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1cc:	1f18      	subs	r0, r3, #4
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	bfbc      	itt	lt
 800e1d2:	580b      	ldrlt	r3, [r1, r0]
 800e1d4:	18c0      	addlt	r0, r0, r3
 800e1d6:	4770      	bx	lr

0800e1d8 <_read_r>:
 800e1d8:	b538      	push	{r3, r4, r5, lr}
 800e1da:	4d07      	ldr	r5, [pc, #28]	; (800e1f8 <_read_r+0x20>)
 800e1dc:	4604      	mov	r4, r0
 800e1de:	4608      	mov	r0, r1
 800e1e0:	4611      	mov	r1, r2
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	602a      	str	r2, [r5, #0]
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	f7f4 fb2e 	bl	8002848 <_read>
 800e1ec:	1c43      	adds	r3, r0, #1
 800e1ee:	d102      	bne.n	800e1f6 <_read_r+0x1e>
 800e1f0:	682b      	ldr	r3, [r5, #0]
 800e1f2:	b103      	cbz	r3, 800e1f6 <_read_r+0x1e>
 800e1f4:	6023      	str	r3, [r4, #0]
 800e1f6:	bd38      	pop	{r3, r4, r5, pc}
 800e1f8:	20004dd4 	.word	0x20004dd4

0800e1fc <trunc>:
 800e1fc:	ec51 0b10 	vmov	r0, r1, d0
 800e200:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e204:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e208:	2b13      	cmp	r3, #19
 800e20a:	b5d0      	push	{r4, r6, r7, lr}
 800e20c:	460c      	mov	r4, r1
 800e20e:	dc10      	bgt.n	800e232 <trunc+0x36>
 800e210:	2b00      	cmp	r3, #0
 800e212:	bfa5      	ittet	ge
 800e214:	4a11      	ldrge	r2, [pc, #68]	; (800e25c <trunc+0x60>)
 800e216:	fa42 f303 	asrge.w	r3, r2, r3
 800e21a:	2100      	movlt	r1, #0
 800e21c:	2100      	movge	r1, #0
 800e21e:	bfb9      	ittee	lt
 800e220:	2000      	movlt	r0, #0
 800e222:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800e226:	2000      	movge	r0, #0
 800e228:	ea24 0103 	bicge.w	r1, r4, r3
 800e22c:	ec41 0b10 	vmov	d0, r0, r1
 800e230:	bdd0      	pop	{r4, r6, r7, pc}
 800e232:	2b33      	cmp	r3, #51	; 0x33
 800e234:	dd08      	ble.n	800e248 <trunc+0x4c>
 800e236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e23a:	d1f7      	bne.n	800e22c <trunc+0x30>
 800e23c:	ee10 2a10 	vmov	r2, s0
 800e240:	460b      	mov	r3, r1
 800e242:	f7f2 f82b 	bl	800029c <__adddf3>
 800e246:	e7f1      	b.n	800e22c <trunc+0x30>
 800e248:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e24c:	f04f 33ff 	mov.w	r3, #4294967295
 800e250:	fa23 f202 	lsr.w	r2, r3, r2
 800e254:	ea20 0602 	bic.w	r6, r0, r2
 800e258:	4630      	mov	r0, r6
 800e25a:	e7e7      	b.n	800e22c <trunc+0x30>
 800e25c:	000fffff 	.word	0x000fffff

0800e260 <_init>:
 800e260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e262:	bf00      	nop
 800e264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e266:	bc08      	pop	{r3}
 800e268:	469e      	mov	lr, r3
 800e26a:	4770      	bx	lr

0800e26c <_fini>:
 800e26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e26e:	bf00      	nop
 800e270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e272:	bc08      	pop	{r3}
 800e274:	469e      	mov	lr, r3
 800e276:	4770      	bx	lr
