
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f54c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df8  0800f6f0  0800f6f0  0001f6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104e8  080104e8  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  080104e8  080104e8  000204e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104f0  080104f0  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104f0  080104f0  000204f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080104f4  080104f4  000204f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080104f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000093e4  20000200  080106f8  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200095e4  080106f8  000395e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026aa1  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a46  00000000  00000000  00056cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb0  00000000  00000000  0005b718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b20  00000000  00000000  0005d3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007117  00000000  00000000  0005eee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002109b  00000000  00000000  00065fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab9e4  00000000  00000000  0008709a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00132a7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092f0  00000000  00000000  00132ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f6d4 	.word	0x0800f6d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800f6d4 	.word	0x0800f6d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <Sim800_RxCallBack>:
/**
  * Call back function for release read SIM800 UART buffer.
  * @param NONE
  * @return SIM800 answer for command (char answer[64])
*/
void Sim800_RxCallBack(void) {
 8000ffc:	b5b0      	push	{r4, r5, r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <Sim800_RxCallBack+0x80>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	491d      	ldr	r1, [pc, #116]	; (800107c <Sim800_RxCallBack+0x80>)
 8001008:	600a      	str	r2, [r1, #0]
 800100a:	4a1d      	ldr	r2, [pc, #116]	; (8001080 <Sim800_RxCallBack+0x84>)
 800100c:	7811      	ldrb	r1, [r2, #0]
 800100e:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <Sim800_RxCallBack+0x88>)
 8001010:	54d1      	strb	r1, [r2, r3]

    x = false;
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <Sim800_RxCallBack+0x8c>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
    if (strstr((char *) rx_buffer, "\r\n") != NULL && rx_index == 2) {
 8001018:	491c      	ldr	r1, [pc, #112]	; (800108c <Sim800_RxCallBack+0x90>)
 800101a:	481a      	ldr	r0, [pc, #104]	; (8001084 <Sim800_RxCallBack+0x88>)
 800101c:	f009 f9e2 	bl	800a3e4 <strstr>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d007      	beq.n	8001036 <Sim800_RxCallBack+0x3a>
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <Sim800_RxCallBack+0x80>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d103      	bne.n	8001036 <Sim800_RxCallBack+0x3a>
        rx_index = 0;
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <Sim800_RxCallBack+0x80>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e01b      	b.n	800106e <Sim800_RxCallBack+0x72>
//        x = false;
    } else
    	if (strstr((char *) rx_buffer, "\r\n") != NULL) {
 8001036:	4915      	ldr	r1, [pc, #84]	; (800108c <Sim800_RxCallBack+0x90>)
 8001038:	4812      	ldr	r0, [pc, #72]	; (8001084 <Sim800_RxCallBack+0x88>)
 800103a:	f009 f9d3 	bl	800a3e4 <strstr>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d014      	beq.n	800106e <Sim800_RxCallBack+0x72>
        memcpy(answer, rx_buffer, sizeof(rx_buffer));
 8001044:	4a12      	ldr	r2, [pc, #72]	; (8001090 <Sim800_RxCallBack+0x94>)
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <Sim800_RxCallBack+0x88>)
 8001048:	4614      	mov	r4, r2
 800104a:	461d      	mov	r5, r3
 800104c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001050:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        rx_index = 0;
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <Sim800_RxCallBack+0x80>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
        memset(rx_buffer, 0, sizeof(rx_buffer));
 800105e:	2220      	movs	r2, #32
 8001060:	2100      	movs	r1, #0
 8001062:	4808      	ldr	r0, [pc, #32]	; (8001084 <Sim800_RxCallBack+0x88>)
 8001064:	f008 fce6 	bl	8009a34 <memset>
        x = true;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <Sim800_RxCallBack+0x8c>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 800106e:	2201      	movs	r2, #1
 8001070:	4903      	ldr	r1, [pc, #12]	; (8001080 <Sim800_RxCallBack+0x84>)
 8001072:	4808      	ldr	r0, [pc, #32]	; (8001094 <Sim800_RxCallBack+0x98>)
 8001074:	f004 f96d 	bl	8005352 <HAL_UART_Receive_IT>
}
 8001078:	bf00      	nop
 800107a:	bdb0      	pop	{r4, r5, r7, pc}
 800107c:	20000240 	.word	0x20000240
 8001080:	2000021c 	.word	0x2000021c
 8001084:	20000220 	.word	0x20000220
 8001088:	20000264 	.word	0x20000264
 800108c:	0800f6f0 	.word	0x0800f6f0
 8001090:	20000244 	.word	0x20000244
 8001094:	20007b5c 	.word	0x20007b5c

08001098 <nmea0183_checksum>:
void SendData(void *argument);

/* USER CODE BEGIN PFP */
// function to calculate checksum of the NMEA sentence
// -4, but not -3 because the NMEA sentences are delimited with \r\n, and there also is the invisible \r in the end
int nmea0183_checksum(char *msg) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	int checksum = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
	// the first $ sign and the last two bytes of original CRC + the * sign
	for (j = 1; j < strlen(msg) - 4; j++) {
 80010a8:	2301      	movs	r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	e00a      	b.n	80010c4 <nmea0183_checksum+0x2c>
		checksum = checksum ^ (unsigned) msg[j];
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	4413      	add	r3, r2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4053      	eors	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
	for (j = 1; j < strlen(msg) - 4; j++) {
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	3301      	adds	r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff f88b 	bl	80001e0 <strlen>
 80010ca:	4603      	mov	r3, r0
 80010cc:	1f1a      	subs	r2, r3, #4
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8ec      	bhi.n	80010ae <nmea0183_checksum+0x16>
	}
	return checksum;
 80010d4:	68fb      	ldr	r3, [r7, #12]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	if (huart == UART_SIM800) {
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a15      	ldr	r2, [pc, #84]	; (8001140 <HAL_UART_RxCpltCallback+0x60>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d120      	bne.n	8001132 <HAL_UART_RxCpltCallback+0x52>
		Sim800_RxCallBack();
 80010f0:	f7ff ff84 	bl	8000ffc <Sim800_RxCallBack>
		if(x){
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <HAL_UART_RxCpltCallback+0x64>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d01d      	beq.n	8001138 <HAL_UART_RxCpltCallback+0x58>
			if(strstr(answer,"CCLK")!=NULL){
 80010fc:	4912      	ldr	r1, [pc, #72]	; (8001148 <HAL_UART_RxCpltCallback+0x68>)
 80010fe:	4813      	ldr	r0, [pc, #76]	; (800114c <HAL_UART_RxCpltCallback+0x6c>)
 8001100:	f009 f970 	bl	800a3e4 <strstr>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d016      	beq.n	8001138 <HAL_UART_RxCpltCallback+0x58>
				memset(timestamp,0,sizeof(timestamp));
 800110a:	2220      	movs	r2, #32
 800110c:	2100      	movs	r1, #0
 800110e:	4810      	ldr	r0, [pc, #64]	; (8001150 <HAL_UART_RxCpltCallback+0x70>)
 8001110:	f008 fc90 	bl	8009a34 <memset>
				//copy answer to timestamp
				memcpy(timestamp,answer,sizeof(answer));
 8001114:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_UART_RxCpltCallback+0x70>)
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <HAL_UART_RxCpltCallback+0x6c>)
 8001118:	4614      	mov	r4, r2
 800111a:	461d      	mov	r5, r3
 800111c:	6828      	ldr	r0, [r5, #0]
 800111e:	6869      	ldr	r1, [r5, #4]
 8001120:	68aa      	ldr	r2, [r5, #8]
 8001122:	68eb      	ldr	r3, [r5, #12]
 8001124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001126:	6928      	ldr	r0, [r5, #16]
 8001128:	6969      	ldr	r1, [r5, #20]
 800112a:	69aa      	ldr	r2, [r5, #24]
 800112c:	69eb      	ldr	r3, [r5, #28]
 800112e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			}
		}
	} else {
		flag = 1; //GPS Flag
	}
}
 8001130:	e002      	b.n	8001138 <HAL_UART_RxCpltCallback+0x58>
		flag = 1; //GPS Flag
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_UART_RxCpltCallback+0x74>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bdb0      	pop	{r4, r5, r7, pc}
 8001140:	20007b5c 	.word	0x20007b5c
 8001144:	20000264 	.word	0x20000264
 8001148:	0800f850 	.word	0x0800f850
 800114c:	20000244 	.word	0x20000244
 8001150:	20000284 	.word	0x20000284
 8001154:	20000280 	.word	0x20000280

08001158 <distance_on_geoid>:
  int len = strlen(buffer);
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);

}

double distance_on_geoid(double lat1, double lon1, double lat2, double lon2) {
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b0a0      	sub	sp, #128	; 0x80
 800115c:	af00      	add	r7, sp, #0
 800115e:	ed87 0b06 	vstr	d0, [r7, #24]
 8001162:	ed87 1b04 	vstr	d1, [r7, #16]
 8001166:	ed87 2b02 	vstr	d2, [r7, #8]
 800116a:	ed87 3b00 	vstr	d3, [r7]

	// Convert degrees to radians
	lat1 = lat1 * M_PI / 180.0;
 800116e:	a38c      	add	r3, pc, #560	; (adr r3, 80013a0 <distance_on_geoid+0x248>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001178:	f7ff fa46 	bl	8000608 <__aeabi_dmul>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	4b89      	ldr	r3, [pc, #548]	; (80013b0 <distance_on_geoid+0x258>)
 800118a:	f7ff fb67 	bl	800085c <__aeabi_ddiv>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	e9c7 2306 	strd	r2, r3, [r7, #24]
	lon1 = lon1 * M_PI / 180.0;
 8001196:	a382      	add	r3, pc, #520	; (adr r3, 80013a0 <distance_on_geoid+0x248>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011a0:	f7ff fa32 	bl	8000608 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b7f      	ldr	r3, [pc, #508]	; (80013b0 <distance_on_geoid+0x258>)
 80011b2:	f7ff fb53 	bl	800085c <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	e9c7 2304 	strd	r2, r3, [r7, #16]

	lat2 = lat2 * M_PI / 180.0;
 80011be:	a378      	add	r3, pc, #480	; (adr r3, 80013a0 <distance_on_geoid+0x248>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011c8:	f7ff fa1e 	bl	8000608 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	4b75      	ldr	r3, [pc, #468]	; (80013b0 <distance_on_geoid+0x258>)
 80011da:	f7ff fb3f 	bl	800085c <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	lon2 = lon2 * M_PI / 180.0;
 80011e6:	a36e      	add	r3, pc, #440	; (adr r3, 80013a0 <distance_on_geoid+0x248>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011f0:	f7ff fa0a 	bl	8000608 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b6b      	ldr	r3, [pc, #428]	; (80013b0 <distance_on_geoid+0x258>)
 8001202:	f7ff fb2b 	bl	800085c <__aeabi_ddiv>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	e9c7 2300 	strd	r2, r3, [r7]

	// radius of earth in metres
	double r = 6378100;
 800120e:	a366      	add	r3, pc, #408	; (adr r3, 80013a8 <distance_on_geoid+0x250>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

	// P
	double rho1 = r * cos(lat1);
 8001218:	ed97 0b06 	vldr	d0, [r7, #24]
 800121c:	f00c fe50 	bl	800dec0 <cos>
 8001220:	ec53 2b10 	vmov	r2, r3, d0
 8001224:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001228:	f7ff f9ee 	bl	8000608 <__aeabi_dmul>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double z1 = r * sin(lat1);
 8001234:	ed97 0b06 	vldr	d0, [r7, #24]
 8001238:	f00c ff1e 	bl	800e078 <sin>
 800123c:	ec53 2b10 	vmov	r2, r3, d0
 8001240:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001244:	f7ff f9e0 	bl	8000608 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double x1 = rho1 * cos(lon1);
 8001250:	ed97 0b04 	vldr	d0, [r7, #16]
 8001254:	f00c fe34 	bl	800dec0 <cos>
 8001258:	ec53 2b10 	vmov	r2, r3, d0
 800125c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001260:	f7ff f9d2 	bl	8000608 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double y1 = rho1 * sin(lon1);
 800126c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001270:	f00c ff02 	bl	800e078 <sin>
 8001274:	ec53 2b10 	vmov	r2, r3, d0
 8001278:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800127c:	f7ff f9c4 	bl	8000608 <__aeabi_dmul>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	// Q
	double rho2 = r * cos(lat2);
 8001288:	ed97 0b02 	vldr	d0, [r7, #8]
 800128c:	f00c fe18 	bl	800dec0 <cos>
 8001290:	ec53 2b10 	vmov	r2, r3, d0
 8001294:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001298:	f7ff f9b6 	bl	8000608 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double z2 = r * sin(lat2);
 80012a4:	ed97 0b02 	vldr	d0, [r7, #8]
 80012a8:	f00c fee6 	bl	800e078 <sin>
 80012ac:	ec53 2b10 	vmov	r2, r3, d0
 80012b0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80012b4:	f7ff f9a8 	bl	8000608 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double x2 = rho2 * cos(lon2);
 80012c0:	ed97 0b00 	vldr	d0, [r7]
 80012c4:	f00c fdfc 	bl	800dec0 <cos>
 80012c8:	ec53 2b10 	vmov	r2, r3, d0
 80012cc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80012d0:	f7ff f99a 	bl	8000608 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double y2 = rho2 * sin(lon2);
 80012dc:	ed97 0b00 	vldr	d0, [r7]
 80012e0:	f00c feca 	bl	800e078 <sin>
 80012e4:	ec53 2b10 	vmov	r2, r3, d0
 80012e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80012ec:	f7ff f98c 	bl	8000608 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// Dot product
	double dot = (x1 * x2 + y1 * y2 + z1 * z2);
 80012f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80012fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001300:	f7ff f982 	bl	8000608 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4614      	mov	r4, r2
 800130a:	461d      	mov	r5, r3
 800130c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001310:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001314:	f7ff f978 	bl	8000608 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4620      	mov	r0, r4
 800131e:	4629      	mov	r1, r5
 8001320:	f7fe ffbc 	bl	800029c <__adddf3>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4614      	mov	r4, r2
 800132a:	461d      	mov	r5, r3
 800132c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001330:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001334:	f7ff f968 	bl	8000608 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4620      	mov	r0, r4
 800133e:	4629      	mov	r1, r5
 8001340:	f7fe ffac 	bl	800029c <__adddf3>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double cos_theta = dot / (r * r);
 800134c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001350:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001354:	f7ff f958 	bl	8000608 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001360:	f7ff fa7c 	bl	800085c <__aeabi_ddiv>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	double theta = acos(cos_theta);
 800136c:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001370:	f00c ff08 	bl	800e184 <acos>
 8001374:	ed87 0b08 	vstr	d0, [r7, #32]

	// Distance in Metres
	return r * theta;
 8001378:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800137c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001380:	f7ff f942 	bl	8000608 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	ec43 2b17 	vmov	d7, r2, r3
}
 800138c:	eeb0 0a47 	vmov.f32	s0, s14
 8001390:	eef0 0a67 	vmov.f32	s1, s15
 8001394:	3780      	adds	r7, #128	; 0x80
 8001396:	46bd      	mov	sp, r7
 8001398:	bdb0      	pop	{r4, r5, r7, pc}
 800139a:	bf00      	nop
 800139c:	f3af 8000 	nop.w
 80013a0:	54442d18 	.word	0x54442d18
 80013a4:	400921fb 	.word	0x400921fb
 80013a8:	00000000 	.word	0x00000000
 80013ac:	4158549d 	.word	0x4158549d
 80013b0:	40668000 	.word	0x40668000

080013b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b09a      	sub	sp, #104	; 0x68
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ba:	f001 fa65 	bl	8002888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013be:	f000 f853 	bl	8001468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c2:	f000 fa35 	bl	8001830 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c6:	f000 fa0b 	bl	80017e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013ca:	f000 f9b5 	bl	8001738 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013ce:	f000 f925 	bl	800161c <MX_I2C1_Init>
  MX_SPI1_Init();
 80013d2:	f000 f951 	bl	8001678 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80013d6:	f000 f985 	bl	80016e4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80013da:	f000 f8b1 	bl	8001540 <MX_ADC1_Init>
  MX_FATFS_Init();
 80013de:	f004 fea5 	bl	800612c <MX_FATFS_Init>
  MX_USART6_UART_Init();
 80013e2:	f000 f9d3 	bl	800178c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  char txBuffer [100] = {};
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	2260      	movs	r2, #96	; 0x60
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f008 fb1e 	bl	8009a34 <memset>
  sprintf(txBuffer, "Bismillah..\n");
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4912      	ldr	r1, [pc, #72]	; (8001444 <main+0x90>)
 80013fc:	4618      	mov	r0, r3
 80013fe:	f008 ff8b 	bl	800a318 <siprintf>
  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 8001402:	1d39      	adds	r1, r7, #4
 8001404:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001408:	2264      	movs	r2, #100	; 0x64
 800140a:	480f      	ldr	r0, [pc, #60]	; (8001448 <main+0x94>)
 800140c:	f003 ff0f 	bl	800522e <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001410:	f005 fc7a 	bl	8006d08 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MutexSPI1 */
  MutexSPI1Handle = osMutexNew(&MutexSPI1_attributes);
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <main+0x98>)
 8001416:	f005 fd6e 	bl	8006ef6 <osMutexNew>
 800141a:	4603      	mov	r3, r0
 800141c:	4a0c      	ldr	r2, [pc, #48]	; (8001450 <main+0x9c>)
 800141e:	6013      	str	r3, [r2, #0]

  /* creation of mutexIMU */
  mutexIMUHandle = osMutexNew(&mutexIMU_attributes);
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <main+0xa0>)
 8001422:	f005 fd68 	bl	8006ef6 <osMutexNew>
 8001426:	4603      	mov	r3, r0
 8001428:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <main+0xa4>)
 800142a:	6013      	str	r3, [r2, #0]

  /* creation of IMUTask */
//  IMUTaskHandle = osThreadNew(IMU, NULL, &IMUTask_attributes);

  /* creation of GPSTask */
  GPSTaskHandle = osThreadNew(GPS, NULL, &GPSTask_attributes);
 800142c:	4a0b      	ldr	r2, [pc, #44]	; (800145c <main+0xa8>)
 800142e:	2100      	movs	r1, #0
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <main+0xac>)
 8001432:	f005 fcb3 	bl	8006d9c <osThreadNew>
 8001436:	4603      	mov	r3, r0
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <main+0xb0>)
 800143a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800143c:	f005 fc88 	bl	8006d50 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    /* Infinite loop */

  while (1)
 8001440:	e7fe      	b.n	8001440 <main+0x8c>
 8001442:	bf00      	nop
 8001444:	0800f858 	.word	0x0800f858
 8001448:	20008c10 	.word	0x20008c10
 800144c:	0800fdc4 	.word	0x0800fdc4
 8001450:	20007770 	.word	0x20007770
 8001454:	0800fdd4 	.word	0x0800fdd4
 8001458:	200076f8 	.word	0x200076f8
 800145c:	0800fda0 	.word	0x0800fda0
 8001460:	08001971 	.word	0x08001971
 8001464:	20008c68 	.word	0x20008c68

08001468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b094      	sub	sp, #80	; 0x50
 800146c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	2230      	movs	r2, #48	; 0x30
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f008 fadc 	bl	8009a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	4b29      	ldr	r3, [pc, #164]	; (8001538 <SystemClock_Config+0xd0>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a28      	ldr	r2, [pc, #160]	; (8001538 <SystemClock_Config+0xd0>)
 8001496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
 800149c:	4b26      	ldr	r3, [pc, #152]	; (8001538 <SystemClock_Config+0xd0>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	4b23      	ldr	r3, [pc, #140]	; (800153c <SystemClock_Config+0xd4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014b4:	4a21      	ldr	r2, [pc, #132]	; (800153c <SystemClock_Config+0xd4>)
 80014b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <SystemClock_Config+0xd4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c8:	2302      	movs	r3, #2
 80014ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014cc:	2301      	movs	r3, #1
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d0:	2310      	movs	r3, #16
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d4:	2302      	movs	r3, #2
 80014d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014d8:	2300      	movs	r3, #0
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014dc:	2310      	movs	r3, #16
 80014de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014e6:	2304      	movs	r3, #4
 80014e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014ea:	2307      	movs	r3, #7
 80014ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ee:	f107 0320 	add.w	r3, r7, #32
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fc32 	bl	8003d5c <HAL_RCC_OscConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014fe:	f000 fdd5 	bl	80020ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001502:	230f      	movs	r3, #15
 8001504:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001506:	2302      	movs	r3, #2
 8001508:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800150e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001512:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	2102      	movs	r1, #2
 800151e:	4618      	mov	r0, r3
 8001520:	f002 fe94 	bl	800424c <HAL_RCC_ClockConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800152a:	f000 fdbf 	bl	80020ac <Error_Handler>
  }
}
 800152e:	bf00      	nop
 8001530:	3750      	adds	r7, #80	; 0x50
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800
 800153c:	40007000 	.word	0x40007000

08001540 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001546:	463b      	mov	r3, r7
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001552:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <MX_ADC1_Init+0xd0>)
 8001554:	4a2f      	ldr	r2, [pc, #188]	; (8001614 <MX_ADC1_Init+0xd4>)
 8001556:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001558:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <MX_ADC1_Init+0xd0>)
 800155a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800155e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <MX_ADC1_Init+0xd0>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001566:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <MX_ADC1_Init+0xd0>)
 8001568:	2201      	movs	r2, #1
 800156a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <MX_ADC1_Init+0xd0>)
 800156e:	2201      	movs	r2, #1
 8001570:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001572:	4b27      	ldr	r3, [pc, #156]	; (8001610 <MX_ADC1_Init+0xd0>)
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <MX_ADC1_Init+0xd0>)
 800157c:	2200      	movs	r2, #0
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001580:	4b23      	ldr	r3, [pc, #140]	; (8001610 <MX_ADC1_Init+0xd0>)
 8001582:	4a25      	ldr	r2, [pc, #148]	; (8001618 <MX_ADC1_Init+0xd8>)
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <MX_ADC1_Init+0xd0>)
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <MX_ADC1_Init+0xd0>)
 800158e:	2203      	movs	r2, #3
 8001590:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <MX_ADC1_Init+0xd0>)
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800159a:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <MX_ADC1_Init+0xd0>)
 800159c:	2201      	movs	r2, #1
 800159e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a0:	481b      	ldr	r0, [pc, #108]	; (8001610 <MX_ADC1_Init+0xd0>)
 80015a2:	f001 f9b3 	bl	800290c <HAL_ADC_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015ac:	f000 fd7e 	bl	80020ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80015b0:	230f      	movs	r3, #15
 80015b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015b4:	2301      	movs	r3, #1
 80015b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80015b8:	2307      	movs	r3, #7
 80015ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	4619      	mov	r1, r3
 80015c0:	4813      	ldr	r0, [pc, #76]	; (8001610 <MX_ADC1_Init+0xd0>)
 80015c2:	f001 f9e7 	bl	8002994 <HAL_ADC_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015cc:	f000 fd6e 	bl	80020ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015d0:	2308      	movs	r3, #8
 80015d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d8:	463b      	mov	r3, r7
 80015da:	4619      	mov	r1, r3
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <MX_ADC1_Init+0xd0>)
 80015de:	f001 f9d9 	bl	8002994 <HAL_ADC_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80015e8:	f000 fd60 	bl	80020ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80015ec:	2309      	movs	r3, #9
 80015ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80015f0:	2303      	movs	r3, #3
 80015f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f4:	463b      	mov	r3, r7
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_ADC1_Init+0xd0>)
 80015fa:	f001 f9cb 	bl	8002994 <HAL_ADC_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001604:	f000 fd52 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200078b4 	.word	0x200078b4
 8001614:	40012000 	.word	0x40012000
 8001618:	0f000001 	.word	0x0f000001

0800161c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <MX_I2C1_Init+0x50>)
 8001622:	4a13      	ldr	r2, [pc, #76]	; (8001670 <MX_I2C1_Init+0x54>)
 8001624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_I2C1_Init+0x50>)
 8001628:	4a12      	ldr	r2, [pc, #72]	; (8001674 <MX_I2C1_Init+0x58>)
 800162a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_I2C1_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_I2C1_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_I2C1_Init+0x50>)
 800163a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800163e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <MX_I2C1_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_I2C1_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <MX_I2C1_Init+0x50>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_I2C1_Init+0x50>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <MX_I2C1_Init+0x50>)
 800165a:	f002 fa3b 	bl	8003ad4 <HAL_I2C_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001664:	f000 fd22 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20007610 	.word	0x20007610
 8001670:	40005400 	.word	0x40005400
 8001674:	000186a0 	.word	0x000186a0

08001678 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800167c:	4b17      	ldr	r3, [pc, #92]	; (80016dc <MX_SPI1_Init+0x64>)
 800167e:	4a18      	ldr	r2, [pc, #96]	; (80016e0 <MX_SPI1_Init+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <MX_SPI1_Init+0x64>)
 8001684:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001688:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <MX_SPI1_Init+0x64>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <MX_SPI1_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_SPI1_Init+0x64>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_SPI1_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_SPI1_Init+0x64>)
 80016a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_SPI1_Init+0x64>)
 80016ac:	2230      	movs	r2, #48	; 0x30
 80016ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <MX_SPI1_Init+0x64>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_SPI1_Init+0x64>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <MX_SPI1_Init+0x64>)
 80016be:	2200      	movs	r2, #0
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_SPI1_Init+0x64>)
 80016c4:	220a      	movs	r2, #10
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	; (80016dc <MX_SPI1_Init+0x64>)
 80016ca:	f002 ffed 	bl	80046a8 <HAL_SPI_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016d4:	f000 fcea 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20008bb8 	.word	0x20008bb8
 80016e0:	40013000 	.word	0x40013000

080016e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_USART1_UART_Init+0x4c>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <MX_USART1_UART_Init+0x50>)
 80016ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <MX_USART1_UART_Init+0x4c>)
 80016f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_USART1_UART_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_USART1_UART_Init+0x4c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_USART1_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_USART1_UART_Init+0x4c>)
 800170a:	220c      	movs	r2, #12
 800170c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <MX_USART1_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_USART1_UART_Init+0x4c>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_USART1_UART_Init+0x4c>)
 800171c:	f003 fd3a 	bl	8005194 <HAL_UART_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001726:	f000 fcc1 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2000795c 	.word	0x2000795c
 8001734:	40011000 	.word	0x40011000

08001738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <MX_USART2_UART_Init+0x50>)
 8001740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001770:	f003 fd10 	bl	8005194 <HAL_UART_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800177a:	f000 fc97 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20008c10 	.word	0x20008c10
 8001788:	40004400 	.word	0x40004400

0800178c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <MX_USART6_UART_Init+0x50>)
 8001794:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 8001798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800179c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017c4:	f003 fce6 	bl	8005194 <HAL_UART_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017ce:	f000 fc6d 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20007b5c 	.word	0x20007b5c
 80017dc:	40011400 	.word	0x40011400

080017e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <MX_DMA_Init+0x4c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a0f      	ldr	r2, [pc, #60]	; (800182c <MX_DMA_Init+0x4c>)
 80017f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <MX_DMA_Init+0x4c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2105      	movs	r1, #5
 8001806:	2038      	movs	r0, #56	; 0x38
 8001808:	f001 fb9a 	bl	8002f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800180c:	2038      	movs	r0, #56	; 0x38
 800180e:	f001 fbb3 	bl	8002f78 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2105      	movs	r1, #5
 8001816:	203a      	movs	r0, #58	; 0x3a
 8001818:	f001 fb92 	bl	8002f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800181c:	203a      	movs	r0, #58	; 0x3a
 800181e:	f001 fbab 	bl	8002f78 <HAL_NVIC_EnableIRQ>

}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800

08001830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b44      	ldr	r3, [pc, #272]	; (800195c <MX_GPIO_Init+0x12c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a43      	ldr	r2, [pc, #268]	; (800195c <MX_GPIO_Init+0x12c>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b41      	ldr	r3, [pc, #260]	; (800195c <MX_GPIO_Init+0x12c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b3d      	ldr	r3, [pc, #244]	; (800195c <MX_GPIO_Init+0x12c>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a3c      	ldr	r2, [pc, #240]	; (800195c <MX_GPIO_Init+0x12c>)
 800186c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b3a      	ldr	r3, [pc, #232]	; (800195c <MX_GPIO_Init+0x12c>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	4b36      	ldr	r3, [pc, #216]	; (800195c <MX_GPIO_Init+0x12c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a35      	ldr	r2, [pc, #212]	; (800195c <MX_GPIO_Init+0x12c>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b33      	ldr	r3, [pc, #204]	; (800195c <MX_GPIO_Init+0x12c>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b2f      	ldr	r3, [pc, #188]	; (800195c <MX_GPIO_Init+0x12c>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a2e      	ldr	r2, [pc, #184]	; (800195c <MX_GPIO_Init+0x12c>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b2c      	ldr	r3, [pc, #176]	; (800195c <MX_GPIO_Init+0x12c>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFID_RST_Pin|RFID_CS_Pin, GPIO_PIN_SET);
 80018b6:	2201      	movs	r2, #1
 80018b8:	2112      	movs	r1, #18
 80018ba:	4829      	ldr	r0, [pc, #164]	; (8001960 <MX_GPIO_Init+0x130>)
 80018bc:	f002 f8f0 	bl	8003aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|POWER_SEL_Pin|IGNITION_LOGIC_Pin, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 7144 	mov.w	r1, #784	; 0x310
 80018c6:	4827      	ldr	r0, [pc, #156]	; (8001964 <MX_GPIO_Init+0x134>)
 80018c8:	f002 f8ea 	bl	8003aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018d2:	4b25      	ldr	r3, [pc, #148]	; (8001968 <MX_GPIO_Init+0x138>)
 80018d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	4820      	ldr	r0, [pc, #128]	; (8001964 <MX_GPIO_Init+0x134>)
 80018e2:	f001 ff59 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_RST_Pin RFID_CS_Pin */
  GPIO_InitStruct.Pin = RFID_RST_Pin|RFID_CS_Pin;
 80018e6:	2312      	movs	r3, #18
 80018e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4818      	ldr	r0, [pc, #96]	; (8001960 <MX_GPIO_Init+0x130>)
 80018fe:	f001 ff4b 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin POWER_SEL_Pin IGNITION_LOGIC_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|POWER_SEL_Pin|IGNITION_LOGIC_Pin;
 8001902:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001908:	2301      	movs	r3, #1
 800190a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	4812      	ldr	r0, [pc, #72]	; (8001964 <MX_GPIO_Init+0x134>)
 800191c:	f001 ff3c 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHARGING_SIGNAL_Pin */
  GPIO_InitStruct.Pin = CHARGING_SIGNAL_Pin;
 8001920:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001926:	2303      	movs	r3, #3
 8001928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHARGING_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	480d      	ldr	r0, [pc, #52]	; (800196c <MX_GPIO_Init+0x13c>)
 8001936:	f001 ff2f 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : IGNITION_SIGNAL_Pin */
  GPIO_InitStruct.Pin = IGNITION_SIGNAL_Pin;
 800193a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001944:	2301      	movs	r3, #1
 8001946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IGNITION_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4804      	ldr	r0, [pc, #16]	; (8001960 <MX_GPIO_Init+0x130>)
 8001950:	f001 ff22 	bl	8003798 <HAL_GPIO_Init>

}
 8001954:	bf00      	nop
 8001956:	3728      	adds	r7, #40	; 0x28
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40023800 	.word	0x40023800
 8001960:	40020000 	.word	0x40020000
 8001964:	40020800 	.word	0x40020800
 8001968:	10210000 	.word	0x10210000
 800196c:	40020400 	.word	0x40020400

08001970 <GPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPS */
void GPS(void *argument)
{
 8001970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001974:	f5ad 7d75 	sub.w	sp, sp, #980	; 0x3d4
 8001978:	af06      	add	r7, sp, #24
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN GPS */
	TickType_t tick_now,tick_prev,dtick = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394

	  char hH[2]; // hours
	  char mM[2]; // minutes
	  char sS[2]; // seconds

	  uint8_t cnt = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 339f 	strb.w	r3, [r7, #927]	; 0x39f

	  HAL_UART_Receive_DMA(&huart1, buff, 255);
 800198c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001990:	22ff      	movs	r2, #255	; 0xff
 8001992:	4619      	mov	r1, r3
 8001994:	4875      	ldr	r0, [pc, #468]	; (8001b6c <GPS+0x1fc>)
 8001996:	f003 fd0c 	bl	80053b2 <HAL_UART_Receive_DMA>

	  osDelay(pdMS_TO_TICKS(5000));
 800199a:	f241 3088 	movw	r0, #5000	; 0x1388
 800199e:	f005 fa8f 	bl	8006ec0 <osDelay>
	  HAL_UART_Transmit(&huart2, (unsigned char *) "Start\n", 6, 500);
 80019a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019a6:	2206      	movs	r2, #6
 80019a8:	4971      	ldr	r1, [pc, #452]	; (8001b70 <GPS+0x200>)
 80019aa:	4872      	ldr	r0, [pc, #456]	; (8001b74 <GPS+0x204>)
 80019ac:	f003 fc3f 	bl	800522e <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  char txBuffer[200] = {};
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	3304      	adds	r3, #4
 80019ba:	22c4      	movs	r2, #196	; 0xc4
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f008 f838 	bl	8009a34 <memset>
	  if (flag) {
 80019c4:	4b6c      	ldr	r3, [pc, #432]	; (8001b78 <GPS+0x208>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 8329 	beq.w	8002020 <GPS+0x6b0>
	  	memset(buffStr, 0, 255);
 80019ce:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80019d2:	22ff      	movs	r2, #255	; 0xff
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f008 f82c 	bl	8009a34 <memset>
	  	sprintf(buffStr, "%s", buff);
 80019dc:	f507 721e 	add.w	r2, r7, #632	; 0x278
 80019e0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80019e4:	4965      	ldr	r1, [pc, #404]	; (8001b7c <GPS+0x20c>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	f008 fc96 	bl	800a318 <siprintf>

	  	memset(txBuffer,0,sizeof(txBuffer));
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	22c8      	movs	r2, #200	; 0xc8
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f008 f81d 	bl	8009a34 <memset>
	  	sprintf(txBuffer, "GPS Available..\n");
 80019fa:	f107 0310 	add.w	r3, r7, #16
 80019fe:	4960      	ldr	r1, [pc, #384]	; (8001b80 <GPS+0x210>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f008 fc89 	bl	800a318 <siprintf>
	  	HAL_UART_Transmit(&huart2, (uint8_t *)buffStr, strlen(buffStr), 70);
 8001a06:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fbe8 	bl	80001e0 <strlen>
 8001a10:	4603      	mov	r3, r0
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8001a18:	2346      	movs	r3, #70	; 0x46
 8001a1a:	4856      	ldr	r0, [pc, #344]	; (8001b74 <GPS+0x204>)
 8001a1c:	f003 fc07 	bl	800522e <HAL_UART_Transmit>
	   /*splitting the buffStr by the "\n" delimiter with the strsep() C function
	   	 see http://www.manpagez.com/man/3/strsep/
	    */
	  	char *token, *string;
	  	// actually splitting the string by "\n" delimiter
	  	string = strdup(buffStr);
 8001a20:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001a24:	4618      	mov	r0, r3
 8001a26:	f008 fcbb 	bl	800a3a0 <strdup>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a32:	601a      	str	r2, [r3, #0]
	  	while ((token = strsep(&string, "\n")) != NULL) {
 8001a34:	e2e3      	b.n	8001ffe <GPS+0x68e>
	  		memset(nmeaSnt, 0, 80);
 8001a36:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a3a:	2250      	movs	r2, #80	; 0x50
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f007 fff8 	bl	8009a34 <memset>
	  		sprintf(nmeaSnt, "%s", token);
 8001a44:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a48:	f8d7 2390 	ldr.w	r2, [r7, #912]	; 0x390
 8001a4c:	494b      	ldr	r1, [pc, #300]	; (8001b7c <GPS+0x20c>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f008 fc62 	bl	800a318 <siprintf>
	  	  	  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 100);
	  	  	*/

	  		// selecting only $GNGLL sentences, combined GPS and GLONAS
	  		// on my GPS sensor this good NMEA sentence is always 50 characters
	  		if ((strstr(nmeaSnt, "$GNGGA") != 0) && (strlen(nmeaSnt) > 49) && strstr(nmeaSnt, "*") != 0) {
 8001a54:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a58:	494a      	ldr	r1, [pc, #296]	; (8001b84 <GPS+0x214>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f008 fcc2 	bl	800a3e4 <strstr>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 82cb 	beq.w	8001ffe <GPS+0x68e>
 8001a68:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fbb7 	bl	80001e0 <strlen>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b31      	cmp	r3, #49	; 0x31
 8001a76:	f240 82c2 	bls.w	8001ffe <GPS+0x68e>
 8001a7a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a7e:	212a      	movs	r1, #42	; 0x2a
 8001a80:	4618      	mov	r0, r3
 8001a82:	f008 fc78 	bl	800a376 <strchr>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 82b8 	beq.w	8001ffe <GPS+0x68e>
	  			rawSum = strstr(nmeaSnt, "*");
 8001a8e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a92:	212a      	movs	r1, #42	; 0x2a
 8001a94:	4618      	mov	r0, r3
 8001a96:	f008 fc6e 	bl	800a376 <strchr>
 8001a9a:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
	  			memcpy(smNmbr, &rawSum[1], 2);
 8001a9e:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001aac:	801a      	strh	r2, [r3, #0]
	  			smNmbr[2] = '\0';
 8001aae:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	709a      	strb	r2, [r3, #2]

	  			uint8_t intSum = nmea0183_checksum(nmeaSnt);
 8001ab6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff faec 	bl	8001098 <nmea0183_checksum>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f887 338b 	strb.w	r3, [r7, #907]	; 0x38b
	  			char hex[2];
	  			// "%X" unsigned hexadecimal integer (capital letters)
	  			sprintf(hex, "%X", intSum);
 8001ac6:	f897 238b 	ldrb.w	r2, [r7, #907]	; 0x38b
 8001aca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ace:	492e      	ldr	r1, [pc, #184]	; (8001b88 <GPS+0x218>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f008 fc21 	bl	800a318 <siprintf>

	  			// checksum data verification, if OK, then we can really trust
	  			// the data in the the NMEA sentence
	  			if (strstr(smNmbr, hex) != NULL) {
 8001ad6:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001ada:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f008 fc7f 	bl	800a3e4 <strstr>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 8288 	beq.w	8001ffe <GPS+0x68e>
	  				cnt = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 339f 	strb.w	r3, [r7, #927]	; 0x39f
	  				// splitting the good NMEA sentence into the tokens by the comma delimiter
	  				for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8001af4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001af8:	4924      	ldr	r1, [pc, #144]	; (8001b8c <GPS+0x21c>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f009 fabe 	bl	800b07c <strtok>
 8001b00:	f8c7 0398 	str.w	r0, [r7, #920]	; 0x398
 8001b04:	e057      	b.n	8001bb6 <GPS+0x246>
	  					/*
	  					memset(txBuffer,0,sizeof(txBuffer));
	  					sprintf(txBuffer,"pV[%d] : %s\n",cnt, pV);
	  					HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 100);
	  					*/
	  					switch (cnt) {
 8001b06:	f897 339f 	ldrb.w	r3, [r7, #927]	; 0x39f
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d847      	bhi.n	8001ba0 <GPS+0x230>
 8001b10:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <GPS+0x1a8>)
 8001b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b16:	bf00      	nop
 8001b18:	08001b2d 	.word	0x08001b2d
 8001b1c:	08001b3d 	.word	0x08001b3d
 8001b20:	08001b4d 	.word	0x08001b4d
 8001b24:	08001b5d 	.word	0x08001b5d
 8001b28:	08001b91 	.word	0x08001b91
	  						case 1:
	  							  utcRaw = strdup(pV);
 8001b2c:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8001b30:	f008 fc36 	bl	800a3a0 <strdup>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
	  							  break;
 8001b3a:	e031      	b.n	8001ba0 <GPS+0x230>
	  						case 2:
	  							  latRaw = strdup(pV);
 8001b3c:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8001b40:	f008 fc2e 	bl	800a3a0 <strdup>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
	  							  break;
 8001b4a:	e029      	b.n	8001ba0 <GPS+0x230>
	  						case 3:
	  							  hemNS = strdup(pV);
 8001b4c:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8001b50:	f008 fc26 	bl	800a3a0 <strdup>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
	  							  break;
 8001b5a:	e021      	b.n	8001ba0 <GPS+0x230>
	  						case 4:
	  							  lonRaw = strdup(pV);
 8001b5c:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8001b60:	f008 fc1e 	bl	800a3a0 <strdup>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
	  							  break;
 8001b6a:	e019      	b.n	8001ba0 <GPS+0x230>
 8001b6c:	2000795c 	.word	0x2000795c
 8001b70:	0800f920 	.word	0x0800f920
 8001b74:	20008c10 	.word	0x20008c10
 8001b78:	20000280 	.word	0x20000280
 8001b7c:	0800f928 	.word	0x0800f928
 8001b80:	0800f92c 	.word	0x0800f92c
 8001b84:	0800f940 	.word	0x0800f940
 8001b88:	0800f948 	.word	0x0800f948
 8001b8c:	0800f94c 	.word	0x0800f94c
	  						case 5:
	  							  hemEW = strdup(pV);
 8001b90:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8001b94:	f008 fc04 	bl	800a3a0 <strdup>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
	  							  break;
 8001b9e:	bf00      	nop
	  					}
	  					cnt++;
 8001ba0:	f897 339f 	ldrb.w	r3, [r7, #927]	; 0x39f
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f887 339f 	strb.w	r3, [r7, #927]	; 0x39f
	  				for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8001baa:	49da      	ldr	r1, [pc, #872]	; (8001f14 <GPS+0x5a4>)
 8001bac:	2000      	movs	r0, #0
 8001bae:	f009 fa65 	bl	800b07c <strtok>
 8001bb2:	f8c7 0398 	str.w	r0, [r7, #920]	; 0x398
 8001bb6:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1a3      	bne.n	8001b06 <GPS+0x196>
	  				} //end for

	  				//Converting Longitude and Latitude into Float
	  				latitude = atof(latRaw);
 8001bbe:	f8d7 03b0 	ldr.w	r0, [r7, #944]	; 0x3b0
 8001bc2:	f007 fefb 	bl	80099bc <atof>
 8001bc6:	eeb0 7a40 	vmov.f32	s14, s0
 8001bca:	eef0 7a60 	vmov.f32	s15, s1
 8001bce:	4bd2      	ldr	r3, [pc, #840]	; (8001f18 <GPS+0x5a8>)
 8001bd0:	ed83 7b00 	vstr	d7, [r3]
	  				longitude = atof(lonRaw);
 8001bd4:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 8001bd8:	f007 fef0 	bl	80099bc <atof>
 8001bdc:	eeb0 7a40 	vmov.f32	s14, s0
 8001be0:	eef0 7a60 	vmov.f32	s15, s1
 8001be4:	4bcd      	ldr	r3, [pc, #820]	; (8001f1c <GPS+0x5ac>)
 8001be6:	ed83 7b00 	vstr	d7, [r3]

	  				if (*hemNS == 'S') {
 8001bea:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b53      	cmp	r3, #83	; 0x53
 8001bf2:	d108      	bne.n	8001c06 <GPS+0x296>
	  					latitude  *= -1.0;
 8001bf4:	4bc8      	ldr	r3, [pc, #800]	; (8001f18 <GPS+0x5a8>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	4614      	mov	r4, r2
 8001bfc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c00:	4bc5      	ldr	r3, [pc, #788]	; (8001f18 <GPS+0x5a8>)
 8001c02:	e9c3 4500 	strd	r4, r5, [r3]
	  				}
	  				if (*hemEW == 'W') {
 8001c06:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b57      	cmp	r3, #87	; 0x57
 8001c0e:	d108      	bne.n	8001c22 <GPS+0x2b2>
	  					longitude *= -1.0;
 8001c10:	4bc2      	ldr	r3, [pc, #776]	; (8001f1c <GPS+0x5ac>)
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	4690      	mov	r8, r2
 8001c18:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001c1c:	4bbf      	ldr	r3, [pc, #764]	; (8001f1c <GPS+0x5ac>)
 8001c1e:	e9c3 8900 	strd	r8, r9, [r3]
	  				}
	  				char * token;

	  				//Get LatitudeDegree
	  				token = strtok(latRaw, ".");
 8001c22:	49bf      	ldr	r1, [pc, #764]	; (8001f20 <GPS+0x5b0>)
 8001c24:	f8d7 03b0 	ldr.w	r0, [r7, #944]	; 0x3b0
 8001c28:	f009 fa28 	bl	800b07c <strtok>
 8001c2c:	f8c7 0384 	str.w	r0, [r7, #900]	; 0x384
	  				memset(latDg, 0, sizeof(latDg));
 8001c30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c34:	220a      	movs	r2, #10
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f007 fefb 	bl	8009a34 <memset>
	  				sprintf(latDg, token);
 8001c3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c42:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8001c46:	4618      	mov	r0, r3
 8001c48:	f008 fb66 	bl	800a318 <siprintf>

	  				//Get Minutes
	  				token = strtok(NULL,".");
 8001c4c:	49b4      	ldr	r1, [pc, #720]	; (8001f20 <GPS+0x5b0>)
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f009 fa14 	bl	800b07c <strtok>
 8001c54:	f8c7 0384 	str.w	r0, [r7, #900]	; 0x384
	  				memset(latMS, 0, sizeof(latMS));
 8001c58:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001c5c:	2214      	movs	r2, #20
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f007 fee7 	bl	8009a34 <memset>
	  				sprintf(latMS, token);
 8001c66:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001c6a:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f008 fb52 	bl	800a318 <siprintf>

	  				//Get longitude Degree
	  				float degrees = trunc(latitude / 100.0f);
 8001c74:	4ba8      	ldr	r3, [pc, #672]	; (8001f18 <GPS+0x5a8>)
 8001c76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	4ba9      	ldr	r3, [pc, #676]	; (8001f24 <GPS+0x5b4>)
 8001c80:	f7fe fdec 	bl	800085c <__aeabi_ddiv>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	ec43 2b17 	vmov	d7, r2, r3
 8001c8c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c90:	eef0 0a67 	vmov.f32	s1, s15
 8001c94:	f00c fa44 	bl	800e120 <trunc>
 8001c98:	ec53 2b10 	vmov	r2, r3, d0
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f7fe ffaa 	bl	8000bf8 <__aeabi_d2f>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
	  				float minutes = latitude - (degrees * 100.0f);
 8001caa:	4b9b      	ldr	r3, [pc, #620]	; (8001f18 <GPS+0x5a8>)
 8001cac:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001cb0:	edd7 7ae0 	vldr	s15, [r7, #896]	; 0x380
 8001cb4:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8001f28 <GPS+0x5b8>
 8001cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cbc:	ee17 0a90 	vmov	r0, s15
 8001cc0:	f7fe fc4a 	bl	8000558 <__aeabi_f2d>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4650      	mov	r0, sl
 8001cca:	4659      	mov	r1, fp
 8001ccc:	f7fe fae4 	bl	8000298 <__aeabi_dsub>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f7fe ff8e 	bl	8000bf8 <__aeabi_d2f>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
	  				latitude = degrees + (minutes / 60.0f);
 8001ce2:	edd7 7adf 	vldr	s15, [r7, #892]	; 0x37c
 8001ce6:	eddf 6a91 	vldr	s13, [pc, #580]	; 8001f2c <GPS+0x5bc>
 8001cea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cee:	edd7 7ae0 	vldr	s15, [r7, #896]	; 0x380
 8001cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf6:	ee17 0a90 	vmov	r0, s15
 8001cfa:	f7fe fc2d 	bl	8000558 <__aeabi_f2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4985      	ldr	r1, [pc, #532]	; (8001f18 <GPS+0x5a8>)
 8001d04:	e9c1 2300 	strd	r2, r3, [r1]

	  				degrees = trunc(longitude / 100.0f);
 8001d08:	4b84      	ldr	r3, [pc, #528]	; (8001f1c <GPS+0x5ac>)
 8001d0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	4b84      	ldr	r3, [pc, #528]	; (8001f24 <GPS+0x5b4>)
 8001d14:	f7fe fda2 	bl	800085c <__aeabi_ddiv>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	ec43 2b17 	vmov	d7, r2, r3
 8001d20:	eeb0 0a47 	vmov.f32	s0, s14
 8001d24:	eef0 0a67 	vmov.f32	s1, s15
 8001d28:	f00c f9fa 	bl	800e120 <trunc>
 8001d2c:	ec53 2b10 	vmov	r2, r3, d0
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	f7fe ff60 	bl	8000bf8 <__aeabi_d2f>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
	  				minutes = longitude - (degrees * 100.0f);
 8001d3e:	4b77      	ldr	r3, [pc, #476]	; (8001f1c <GPS+0x5ac>)
 8001d40:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001d44:	edd7 7ae0 	vldr	s15, [r7, #896]	; 0x380
 8001d48:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001f28 <GPS+0x5b8>
 8001d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d50:	ee17 0a90 	vmov	r0, s15
 8001d54:	f7fe fc00 	bl	8000558 <__aeabi_f2d>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4650      	mov	r0, sl
 8001d5e:	4659      	mov	r1, fp
 8001d60:	f7fe fa9a 	bl	8000298 <__aeabi_dsub>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7fe ff44 	bl	8000bf8 <__aeabi_d2f>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
	  				longitude = degrees + (minutes / 60.0f);
 8001d76:	edd7 7adf 	vldr	s15, [r7, #892]	; 0x37c
 8001d7a:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001f2c <GPS+0x5bc>
 8001d7e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d82:	edd7 7ae0 	vldr	s15, [r7, #896]	; 0x380
 8001d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8a:	ee17 0a90 	vmov	r0, s15
 8001d8e:	f7fe fbe3 	bl	8000558 <__aeabi_f2d>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4961      	ldr	r1, [pc, #388]	; (8001f1c <GPS+0x5ac>)
 8001d98:	e9c1 2300 	strd	r2, r3, [r1]


	  				token = strtok(lonRaw, ".");
 8001d9c:	4960      	ldr	r1, [pc, #384]	; (8001f20 <GPS+0x5b0>)
 8001d9e:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 8001da2:	f009 f96b 	bl	800b07c <strtok>
 8001da6:	f8c7 0384 	str.w	r0, [r7, #900]	; 0x384
	  				memset(lonDg, 0, sizeof(lonDg));
 8001daa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001dae:	220a      	movs	r2, #10
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f007 fe3e 	bl	8009a34 <memset>
	  				memcpy(lonDg, token, strlen(token));
 8001db8:	f8d7 0384 	ldr.w	r0, [r7, #900]	; 0x384
 8001dbc:	f7fe fa10 	bl	80001e0 <strlen>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001dc6:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f007 fe24 	bl	8009a18 <memcpy>

	  				token = strtok(NULL, ".");
 8001dd0:	4953      	ldr	r1, [pc, #332]	; (8001f20 <GPS+0x5b0>)
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f009 f952 	bl	800b07c <strtok>
 8001dd8:	f8c7 0384 	str.w	r0, [r7, #900]	; 0x384
	  				memset(lonMS, 0, sizeof(lonMS));
 8001ddc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001de0:	220a      	movs	r2, #10
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f007 fe25 	bl	8009a34 <memset>
	  				memcpy(lonMS, token, strlen(token));
 8001dea:	f8d7 0384 	ldr.w	r0, [r7, #900]	; 0x384
 8001dee:	f7fe f9f7 	bl	80001e0 <strlen>
 8001df2:	4602      	mov	r2, r0
 8001df4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001df8:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f007 fe0b 	bl	8009a18 <memcpy>
 8001e02:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	b29a      	uxth	r2, r3

	  				//converting the UTC time in the hh:mm:ss format
	  				memcpy(hH, &utcRaw[0], 2);
 8001e0a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e0e:	801a      	strh	r2, [r3, #0]
	  				hH[2] = '\0';
 8001e10:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e14:	2200      	movs	r2, #0
 8001e16:	709a      	strb	r2, [r3, #2]

	  				memcpy(mM, &utcRaw[2], 2);
 8001e18:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e26:	801a      	strh	r2, [r3, #0]
	  				mM[2] = '\0';
 8001e28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	709a      	strb	r2, [r3, #2]

	  				memcpy(sS, &utcRaw[4], 2);
 8001e30:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001e34:	3304      	adds	r3, #4
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e3e:	801a      	strh	r2, [r3, #0]
	  				sS[2] = '\0';
 8001e40:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e44:	2200      	movs	r2, #0
 8001e46:	709a      	strb	r2, [r3, #2]

	  				strcpy(strUTC, hH);
 8001e48:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4838      	ldr	r0, [pc, #224]	; (8001f30 <GPS+0x5c0>)
 8001e50:	f008 fa9e 	bl	800a390 <strcpy>
	  				strcat(strUTC, ":");
 8001e54:	4836      	ldr	r0, [pc, #216]	; (8001f30 <GPS+0x5c0>)
 8001e56:	f7fe f9c3 	bl	80001e0 <strlen>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <GPS+0x5c0>)
 8001e60:	4413      	add	r3, r2
 8001e62:	4934      	ldr	r1, [pc, #208]	; (8001f34 <GPS+0x5c4>)
 8001e64:	461a      	mov	r2, r3
 8001e66:	460b      	mov	r3, r1
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	8013      	strh	r3, [r2, #0]
	  				strcat(strUTC, mM);
 8001e6c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e70:	4619      	mov	r1, r3
 8001e72:	482f      	ldr	r0, [pc, #188]	; (8001f30 <GPS+0x5c0>)
 8001e74:	f008 fa70 	bl	800a358 <strcat>
	  				strcat(strUTC, ":");
 8001e78:	482d      	ldr	r0, [pc, #180]	; (8001f30 <GPS+0x5c0>)
 8001e7a:	f7fe f9b1 	bl	80001e0 <strlen>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <GPS+0x5c0>)
 8001e84:	4413      	add	r3, r2
 8001e86:	492b      	ldr	r1, [pc, #172]	; (8001f34 <GPS+0x5c4>)
 8001e88:	461a      	mov	r2, r3
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	8013      	strh	r3, [r2, #0]
	  				strcat(strUTC, sS);
 8001e90:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e94:	4619      	mov	r1, r3
 8001e96:	4826      	ldr	r0, [pc, #152]	; (8001f30 <GPS+0x5c0>)
 8001e98:	f008 fa5e 	bl	800a358 <strcat>
	  				strUTC[8] = '\0';
 8001e9c:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <GPS+0x5c0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	721a      	strb	r2, [r3, #8]

	  				tick_now = xTaskGetTickCount();
 8001ea2:	f006 f9f1 	bl	8008288 <xTaskGetTickCount>
 8001ea6:	f8c7 0378 	str.w	r0, [r7, #888]	; 0x378
	  				dtick = tick_now - tick_prev;
 8001eaa:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8001eae:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
	  				tick_prev = tick_now;
 8001eb8:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8001ebc:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4

	  				//Calculate Distance
	  				GPS_distance = distance_on_geoid(prev_latitude, prev_longitude, latitude, longitude);
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <GPS+0x5c8>)
 8001ec2:	ed93 7b00 	vldr	d7, [r3]
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <GPS+0x5cc>)
 8001ec8:	ed93 6b00 	vldr	d6, [r3]
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <GPS+0x5a8>)
 8001ece:	ed93 5b00 	vldr	d5, [r3]
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <GPS+0x5ac>)
 8001ed4:	ed93 4b00 	vldr	d4, [r3]
 8001ed8:	eeb0 3a44 	vmov.f32	s6, s8
 8001edc:	eef0 3a64 	vmov.f32	s7, s9
 8001ee0:	eeb0 2a45 	vmov.f32	s4, s10
 8001ee4:	eef0 2a65 	vmov.f32	s5, s11
 8001ee8:	eeb0 1a46 	vmov.f32	s2, s12
 8001eec:	eef0 1a66 	vmov.f32	s3, s13
 8001ef0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ef4:	eef0 0a67 	vmov.f32	s1, s15
 8001ef8:	f7ff f92e 	bl	8001158 <distance_on_geoid>
 8001efc:	eeb0 7a40 	vmov.f32	s14, s0
 8001f00:	eef0 7a60 	vmov.f32	s15, s1
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <GPS+0x5d0>)
 8001f06:	ed83 7b00 	vstr	d7, [r3]
	  				GPS_speed    = (double) (GPS_distance/(pdTICKSTOMS(dtick))*1000); //ms to s
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <GPS+0x5d0>)
 8001f0c:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001f10:	e018      	b.n	8001f44 <GPS+0x5d4>
 8001f12:	bf00      	nop
 8001f14:	0800f94c 	.word	0x0800f94c
 8001f18:	20007ba0 	.word	0x20007ba0
 8001f1c:	20007a18 	.word	0x20007a18
 8001f20:	0800f950 	.word	0x0800f950
 8001f24:	40590000 	.word	0x40590000
 8001f28:	42c80000 	.word	0x42c80000
 8001f2c:	42700000 	.word	0x42700000
 8001f30:	20000278 	.word	0x20000278
 8001f34:	0800f954 	.word	0x0800f954
 8001f38:	20000268 	.word	0x20000268
 8001f3c:	20000270 	.word	0x20000270
 8001f40:	20007810 	.word	0x20007810
 8001f44:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8001f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f4c:	fb02 f303 	mul.w	r3, r2, r3
 8001f50:	4a40      	ldr	r2, [pc, #256]	; (8002054 <GPS+0x6e4>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	099b      	lsrs	r3, r3, #6
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fadb 	bl	8000514 <__aeabi_ui2d>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4650      	mov	r0, sl
 8001f64:	4659      	mov	r1, fp
 8001f66:	f7fe fc79 	bl	800085c <__aeabi_ddiv>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	4b38      	ldr	r3, [pc, #224]	; (8002058 <GPS+0x6e8>)
 8001f78:	f7fe fb46 	bl	8000608 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4936      	ldr	r1, [pc, #216]	; (800205c <GPS+0x6ec>)
 8001f82:	e9c1 2300 	strd	r2, r3, [r1]

	  				//Update previous location
	  				prev_latitude = latitude;
 8001f86:	4b36      	ldr	r3, [pc, #216]	; (8002060 <GPS+0x6f0>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	4935      	ldr	r1, [pc, #212]	; (8002064 <GPS+0x6f4>)
 8001f8e:	e9c1 2300 	strd	r2, r3, [r1]
	  				prev_longitude = longitude;
 8001f92:	4b35      	ldr	r3, [pc, #212]	; (8002068 <GPS+0x6f8>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	4934      	ldr	r1, [pc, #208]	; (800206c <GPS+0x6fc>)
 8001f9a:	e9c1 2300 	strd	r2, r3, [r1]

	  				memset(txBuffer,0,sizeof(txBuffer));
 8001f9e:	f107 0310 	add.w	r3, r7, #16
 8001fa2:	22c8      	movs	r2, #200	; 0xc8
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f007 fd44 	bl	8009a34 <memset>
	  				sprintf(txBuffer, "latitude : %f longitude : %f distance : %.2f speed : %.2f\n", latitude, longitude,GPS_distance,GPS_speed);
 8001fac:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <GPS+0x6f0>)
 8001fae:	ed93 7b00 	vldr	d7, [r3]
 8001fb2:	ed87 7b00 	vstr	d7, [r7]
 8001fb6:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <GPS+0x6f8>)
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	492c      	ldr	r1, [pc, #176]	; (8002070 <GPS+0x700>)
 8001fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fc2:	4e26      	ldr	r6, [pc, #152]	; (800205c <GPS+0x6ec>)
 8001fc4:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8001fc8:	f107 0610 	add.w	r6, r7, #16
 8001fcc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001fd4:	e9cd 2300 	strd	r2, r3, [sp]
 8001fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fdc:	4925      	ldr	r1, [pc, #148]	; (8002074 <GPS+0x704>)
 8001fde:	4630      	mov	r0, r6
 8001fe0:	f008 f99a 	bl	800a318 <siprintf>
	  				HAL_UART_Transmit(&huart2, (unsigned char *)txBuffer, strlen(txBuffer), 100);
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe f8f9 	bl	80001e0 <strlen>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	f107 0110 	add.w	r1, r7, #16
 8001ff6:	2364      	movs	r3, #100	; 0x64
 8001ff8:	481f      	ldr	r0, [pc, #124]	; (8002078 <GPS+0x708>)
 8001ffa:	f003 f918 	bl	800522e <HAL_UART_Transmit>
	  	while ((token = strsep(&string, "\n")) != NULL) {
 8001ffe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002002:	491e      	ldr	r1, [pc, #120]	; (800207c <GPS+0x70c>)
 8002004:	4618      	mov	r0, r3
 8002006:	f008 f9e8 	bl	800a3da <strsep>
 800200a:	f8c7 0390 	str.w	r0, [r7, #912]	; 0x390
 800200e:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8002012:	2b00      	cmp	r3, #0
 8002014:	f47f ad0f 	bne.w	8001a36 <GPS+0xc6>
	  			} //end of the chekcsum data verification
	  		} //end of %GPPGA Sentences selection
	  	}// end of splotting the buffstr by the "\n" delimiter with strsep() c function
	  	flag = 0;
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <GPS+0x710>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e013      	b.n	8002048 <GPS+0x6d8>

	  }
	  else {
		  memset(txBuffer,0,sizeof(txBuffer));
 8002020:	f107 0310 	add.w	r3, r7, #16
 8002024:	22c8      	movs	r2, #200	; 0xc8
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f007 fd03 	bl	8009a34 <memset>
		  sprintf(txBuffer,"GPS no signal..\n");
 800202e:	f107 0310 	add.w	r3, r7, #16
 8002032:	4914      	ldr	r1, [pc, #80]	; (8002084 <GPS+0x714>)
 8002034:	4618      	mov	r0, r3
 8002036:	f008 f96f 	bl	800a318 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *) txBuffer, sizeof(txBuffer), 100);
 800203a:	f107 0110 	add.w	r1, r7, #16
 800203e:	2364      	movs	r3, #100	; 0x64
 8002040:	22c8      	movs	r2, #200	; 0xc8
 8002042:	480d      	ldr	r0, [pc, #52]	; (8002078 <GPS+0x708>)
 8002044:	f003 f8f3 	bl	800522e <HAL_UART_Transmit>
	  }
	  osDelay(pdMS_TO_TICKS(GPS_TS));
 8002048:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800204c:	f004 ff38 	bl	8006ec0 <osDelay>
  {
 8002050:	e4ae      	b.n	80019b0 <GPS+0x40>
 8002052:	bf00      	nop
 8002054:	10624dd3 	.word	0x10624dd3
 8002058:	408f4000 	.word	0x408f4000
 800205c:	20007710 	.word	0x20007710
 8002060:	20007ba0 	.word	0x20007ba0
 8002064:	20000268 	.word	0x20000268
 8002068:	20007a18 	.word	0x20007a18
 800206c:	20000270 	.word	0x20000270
 8002070:	20007810 	.word	0x20007810
 8002074:	0800f958 	.word	0x0800f958
 8002078:	20008c10 	.word	0x20008c10
 800207c:	0800f994 	.word	0x0800f994
 8002080:	20000280 	.word	0x20000280
 8002084:	0800f998 	.word	0x0800f998

08002088 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800209a:	f000 fc17 	bl	80028cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40010000 	.word	0x40010000

080020ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b0:	b672      	cpsid	i
}
 80020b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <Error_Handler+0x8>
	...

080020b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_MspInit+0x54>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	4a11      	ldr	r2, [pc, #68]	; (800210c <HAL_MspInit+0x54>)
 80020c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020cc:	6453      	str	r3, [r2, #68]	; 0x44
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <HAL_MspInit+0x54>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_MspInit+0x54>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a0a      	ldr	r2, [pc, #40]	; (800210c <HAL_MspInit+0x54>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_MspInit+0x54>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	210f      	movs	r1, #15
 80020fa:	f06f 0001 	mvn.w	r0, #1
 80020fe:	f000 ff1f 	bl	8002f40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800

08002110 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a3c      	ldr	r2, [pc, #240]	; (8002220 <HAL_ADC_MspInit+0x110>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d171      	bne.n	8002216 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <HAL_ADC_MspInit+0x114>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a3a      	ldr	r2, [pc, #232]	; (8002224 <HAL_ADC_MspInit+0x114>)
 800213c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b38      	ldr	r3, [pc, #224]	; (8002224 <HAL_ADC_MspInit+0x114>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b34      	ldr	r3, [pc, #208]	; (8002224 <HAL_ADC_MspInit+0x114>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a33      	ldr	r2, [pc, #204]	; (8002224 <HAL_ADC_MspInit+0x114>)
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b31      	ldr	r3, [pc, #196]	; (8002224 <HAL_ADC_MspInit+0x114>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_ADC_MspInit+0x114>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a2c      	ldr	r2, [pc, #176]	; (8002224 <HAL_ADC_MspInit+0x114>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <HAL_ADC_MspInit+0x114>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BATT_LEVEL_Pin;
 8002186:	2320      	movs	r3, #32
 8002188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800218a:	2303      	movs	r3, #3
 800218c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	4619      	mov	r1, r3
 8002198:	4823      	ldr	r0, [pc, #140]	; (8002228 <HAL_ADC_MspInit+0x118>)
 800219a:	f001 fafd 	bl	8003798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ACCU_LEVEL_Pin|FUEL_LEVEL_Pin;
 800219e:	2303      	movs	r3, #3
 80021a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a2:	2303      	movs	r3, #3
 80021a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4619      	mov	r1, r3
 80021b0:	481e      	ldr	r0, [pc, #120]	; (800222c <HAL_ADC_MspInit+0x11c>)
 80021b2:	f001 faf1 	bl	8003798 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <HAL_ADC_MspInit+0x120>)
 80021b8:	4a1e      	ldr	r2, [pc, #120]	; (8002234 <HAL_ADC_MspInit+0x124>)
 80021ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80021bc:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <HAL_ADC_MspInit+0x120>)
 80021be:	2200      	movs	r2, #0
 80021c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_ADC_MspInit+0x120>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c8:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_ADC_MspInit+0x120>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021ce:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_ADC_MspInit+0x120>)
 80021d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <HAL_ADC_MspInit+0x120>)
 80021d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021de:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_ADC_MspInit+0x120>)
 80021e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021e6:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_ADC_MspInit+0x120>)
 80021e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <HAL_ADC_MspInit+0x120>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <HAL_ADC_MspInit+0x120>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021fa:	480d      	ldr	r0, [pc, #52]	; (8002230 <HAL_ADC_MspInit+0x120>)
 80021fc:	f000 feca 	bl	8002f94 <HAL_DMA_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002206:	f7ff ff51 	bl	80020ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a08      	ldr	r2, [pc, #32]	; (8002230 <HAL_ADC_MspInit+0x120>)
 800220e:	639a      	str	r2, [r3, #56]	; 0x38
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <HAL_ADC_MspInit+0x120>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002216:	bf00      	nop
 8002218:	3728      	adds	r7, #40	; 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40012000 	.word	0x40012000
 8002224:	40023800 	.word	0x40023800
 8002228:	40020800 	.word	0x40020800
 800222c:	40020400 	.word	0x40020400
 8002230:	200079b0 	.word	0x200079b0
 8002234:	40026410 	.word	0x40026410

08002238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a19      	ldr	r2, [pc, #100]	; (80022bc <HAL_I2C_MspInit+0x84>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d12b      	bne.n	80022b2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <HAL_I2C_MspInit+0x88>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a17      	ldr	r2, [pc, #92]	; (80022c0 <HAL_I2C_MspInit+0x88>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <HAL_I2C_MspInit+0x88>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002276:	23c0      	movs	r3, #192	; 0xc0
 8002278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800227a:	2312      	movs	r3, #18
 800227c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800227e:	2301      	movs	r3, #1
 8002280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002282:	2303      	movs	r3, #3
 8002284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002286:	2304      	movs	r3, #4
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4619      	mov	r1, r3
 8002290:	480c      	ldr	r0, [pc, #48]	; (80022c4 <HAL_I2C_MspInit+0x8c>)
 8002292:	f001 fa81 	bl	8003798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_I2C_MspInit+0x88>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <HAL_I2C_MspInit+0x88>)
 80022a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022a4:	6413      	str	r3, [r2, #64]	; 0x40
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_I2C_MspInit+0x88>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022b2:	bf00      	nop
 80022b4:	3728      	adds	r7, #40	; 0x28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40005400 	.word	0x40005400
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020400 	.word	0x40020400

080022c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a19      	ldr	r2, [pc, #100]	; (800234c <HAL_SPI_MspInit+0x84>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d12b      	bne.n	8002342 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <HAL_SPI_MspInit+0x88>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	4a17      	ldr	r2, [pc, #92]	; (8002350 <HAL_SPI_MspInit+0x88>)
 80022f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022f8:	6453      	str	r3, [r2, #68]	; 0x44
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_SPI_MspInit+0x88>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_SPI_MspInit+0x88>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a10      	ldr	r2, [pc, #64]	; (8002350 <HAL_SPI_MspInit+0x88>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_SPI_MspInit+0x88>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002322:	23e0      	movs	r3, #224	; 0xe0
 8002324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800232a:	2301      	movs	r3, #1
 800232c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232e:	2303      	movs	r3, #3
 8002330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002332:	2305      	movs	r3, #5
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4619      	mov	r1, r3
 800233c:	4805      	ldr	r0, [pc, #20]	; (8002354 <HAL_SPI_MspInit+0x8c>)
 800233e:	f001 fa2b 	bl	8003798 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002342:	bf00      	nop
 8002344:	3728      	adds	r7, #40	; 0x28
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40013000 	.word	0x40013000
 8002350:	40023800 	.word	0x40023800
 8002354:	40020000 	.word	0x40020000

08002358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08e      	sub	sp, #56	; 0x38
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a6b      	ldr	r2, [pc, #428]	; (8002524 <HAL_UART_MspInit+0x1cc>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d164      	bne.n	8002444 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
 800237e:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	4a69      	ldr	r2, [pc, #420]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 8002384:	f043 0310 	orr.w	r3, r3, #16
 8002388:	6453      	str	r3, [r2, #68]	; 0x44
 800238a:	4b67      	ldr	r3, [pc, #412]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	623b      	str	r3, [r7, #32]
 8002394:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	4b63      	ldr	r3, [pc, #396]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a62      	ldr	r2, [pc, #392]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b60      	ldr	r3, [pc, #384]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c0:	2303      	movs	r3, #3
 80023c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023c4:	2307      	movs	r3, #7
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023cc:	4619      	mov	r1, r3
 80023ce:	4857      	ldr	r0, [pc, #348]	; (800252c <HAL_UART_MspInit+0x1d4>)
 80023d0:	f001 f9e2 	bl	8003798 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80023d4:	4b56      	ldr	r3, [pc, #344]	; (8002530 <HAL_UART_MspInit+0x1d8>)
 80023d6:	4a57      	ldr	r2, [pc, #348]	; (8002534 <HAL_UART_MspInit+0x1dc>)
 80023d8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80023da:	4b55      	ldr	r3, [pc, #340]	; (8002530 <HAL_UART_MspInit+0x1d8>)
 80023dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023e2:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_UART_MspInit+0x1d8>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e8:	4b51      	ldr	r3, [pc, #324]	; (8002530 <HAL_UART_MspInit+0x1d8>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023ee:	4b50      	ldr	r3, [pc, #320]	; (8002530 <HAL_UART_MspInit+0x1d8>)
 80023f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023f6:	4b4e      	ldr	r3, [pc, #312]	; (8002530 <HAL_UART_MspInit+0x1d8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023fc:	4b4c      	ldr	r3, [pc, #304]	; (8002530 <HAL_UART_MspInit+0x1d8>)
 80023fe:	2200      	movs	r2, #0
 8002400:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002402:	4b4b      	ldr	r3, [pc, #300]	; (8002530 <HAL_UART_MspInit+0x1d8>)
 8002404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002408:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800240a:	4b49      	ldr	r3, [pc, #292]	; (8002530 <HAL_UART_MspInit+0x1d8>)
 800240c:	2200      	movs	r2, #0
 800240e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002410:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_UART_MspInit+0x1d8>)
 8002412:	2200      	movs	r2, #0
 8002414:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002416:	4846      	ldr	r0, [pc, #280]	; (8002530 <HAL_UART_MspInit+0x1d8>)
 8002418:	f000 fdbc 	bl	8002f94 <HAL_DMA_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002422:	f7ff fe43 	bl	80020ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a41      	ldr	r2, [pc, #260]	; (8002530 <HAL_UART_MspInit+0x1d8>)
 800242a:	639a      	str	r2, [r3, #56]	; 0x38
 800242c:	4a40      	ldr	r2, [pc, #256]	; (8002530 <HAL_UART_MspInit+0x1d8>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2105      	movs	r1, #5
 8002436:	2025      	movs	r0, #37	; 0x25
 8002438:	f000 fd82 	bl	8002f40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800243c:	2025      	movs	r0, #37	; 0x25
 800243e:	f000 fd9b 	bl	8002f78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002442:	e06a      	b.n	800251a <HAL_UART_MspInit+0x1c2>
  else if(huart->Instance==USART2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a3b      	ldr	r2, [pc, #236]	; (8002538 <HAL_UART_MspInit+0x1e0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d12c      	bne.n	80024a8 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART2_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	4b35      	ldr	r3, [pc, #212]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	4a34      	ldr	r2, [pc, #208]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 8002458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245c:	6413      	str	r3, [r2, #64]	; 0x40
 800245e:	4b32      	ldr	r3, [pc, #200]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	4b2e      	ldr	r3, [pc, #184]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a2d      	ldr	r2, [pc, #180]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b2b      	ldr	r3, [pc, #172]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002486:	230c      	movs	r3, #12
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002496:	2307      	movs	r3, #7
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249e:	4619      	mov	r1, r3
 80024a0:	4822      	ldr	r0, [pc, #136]	; (800252c <HAL_UART_MspInit+0x1d4>)
 80024a2:	f001 f979 	bl	8003798 <HAL_GPIO_Init>
}
 80024a6:	e038      	b.n	800251a <HAL_UART_MspInit+0x1c2>
  else if(huart->Instance==USART6)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a23      	ldr	r2, [pc, #140]	; (800253c <HAL_UART_MspInit+0x1e4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d133      	bne.n	800251a <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 80024bc:	f043 0320 	orr.w	r3, r3, #32
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b19      	ldr	r3, [pc, #100]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 80024d8:	f043 0304 	orr.w	r3, r3, #4
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024ea:	23c0      	movs	r3, #192	; 0xc0
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024fa:	2308      	movs	r3, #8
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002502:	4619      	mov	r1, r3
 8002504:	480e      	ldr	r0, [pc, #56]	; (8002540 <HAL_UART_MspInit+0x1e8>)
 8002506:	f001 f947 	bl	8003798 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800250a:	2200      	movs	r2, #0
 800250c:	2105      	movs	r1, #5
 800250e:	2047      	movs	r0, #71	; 0x47
 8002510:	f000 fd16 	bl	8002f40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002514:	2047      	movs	r0, #71	; 0x47
 8002516:	f000 fd2f 	bl	8002f78 <HAL_NVIC_EnableIRQ>
}
 800251a:	bf00      	nop
 800251c:	3738      	adds	r7, #56	; 0x38
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40011000 	.word	0x40011000
 8002528:	40023800 	.word	0x40023800
 800252c:	40020000 	.word	0x40020000
 8002530:	200078fc 	.word	0x200078fc
 8002534:	40026440 	.word	0x40026440
 8002538:	40004400 	.word	0x40004400
 800253c:	40011400 	.word	0x40011400
 8002540:	40020800 	.word	0x40020800

08002544 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002554:	2200      	movs	r2, #0
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	2019      	movs	r0, #25
 800255a:	f000 fcf1 	bl	8002f40 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800255e:	2019      	movs	r0, #25
 8002560:	f000 fd0a 	bl	8002f78 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_InitTick+0xa0>)
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	4a1d      	ldr	r2, [pc, #116]	; (80025e4 <HAL_InitTick+0xa0>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6453      	str	r3, [r2, #68]	; 0x44
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_InitTick+0xa0>)
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002580:	f107 0210 	add.w	r2, r7, #16
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f002 f85a 	bl	8004644 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002590:	f002 f844 	bl	800461c <HAL_RCC_GetPCLK2Freq>
 8002594:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <HAL_InitTick+0xa4>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0c9b      	lsrs	r3, r3, #18
 80025a0:	3b01      	subs	r3, #1
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_InitTick+0xa8>)
 80025a6:	4a12      	ldr	r2, [pc, #72]	; (80025f0 <HAL_InitTick+0xac>)
 80025a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_InitTick+0xa8>)
 80025ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80025b2:	4a0e      	ldr	r2, [pc, #56]	; (80025ec <HAL_InitTick+0xa8>)
 80025b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <HAL_InitTick+0xa8>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_InitTick+0xa8>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80025c4:	4809      	ldr	r0, [pc, #36]	; (80025ec <HAL_InitTick+0xa8>)
 80025c6:	f002 fb65 	bl	8004c94 <HAL_TIM_Base_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d104      	bne.n	80025da <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80025d0:	4806      	ldr	r0, [pc, #24]	; (80025ec <HAL_InitTick+0xa8>)
 80025d2:	f002 fbb9 	bl	8004d48 <HAL_TIM_Base_Start_IT>
 80025d6:	4603      	mov	r3, r0
 80025d8:	e000      	b.n	80025dc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3730      	adds	r7, #48	; 0x30
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40023800 	.word	0x40023800
 80025e8:	431bde83 	.word	0x431bde83
 80025ec:	200090d4 	.word	0x200090d4
 80025f0:	40010000 	.word	0x40010000

080025f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <NMI_Handler+0x4>

080025fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025fe:	e7fe      	b.n	80025fe <HardFault_Handler+0x4>

08002600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <MemManage_Handler+0x4>

08002606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800260a:	e7fe      	b.n	800260a <BusFault_Handler+0x4>

0800260c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <UsageFault_Handler+0x4>

08002612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002624:	4802      	ldr	r0, [pc, #8]	; (8002630 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002626:	f002 fbf1 	bl	8004e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200090d4 	.word	0x200090d4

08002634 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002638:	4802      	ldr	r0, [pc, #8]	; (8002644 <USART1_IRQHandler+0x10>)
 800263a:	f002 feeb 	bl	8005414 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	2000795c 	.word	0x2000795c

08002648 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800264c:	4802      	ldr	r0, [pc, #8]	; (8002658 <DMA2_Stream0_IRQHandler+0x10>)
 800264e:	f000 fe39 	bl	80032c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200079b0 	.word	0x200079b0

0800265c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002660:	4802      	ldr	r0, [pc, #8]	; (800266c <DMA2_Stream2_IRQHandler+0x10>)
 8002662:	f000 fe2f 	bl	80032c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200078fc 	.word	0x200078fc

08002670 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002674:	4802      	ldr	r0, [pc, #8]	; (8002680 <USART6_IRQHandler+0x10>)
 8002676:	f002 fecd 	bl	8005414 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20007b5c 	.word	0x20007b5c

08002684 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
	return 1;
 8002688:	2301      	movs	r3, #1
}
 800268a:	4618      	mov	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <_kill>:

int _kill(int pid, int sig)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800269e:	f007 f991 	bl	80099c4 <__errno>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2216      	movs	r2, #22
 80026a6:	601a      	str	r2, [r3, #0]
	return -1;
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <_exit>:

void _exit (int status)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ffe7 	bl	8002694 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026c6:	e7fe      	b.n	80026c6 <_exit+0x12>

080026c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	e00a      	b.n	80026f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026da:	f3af 8000 	nop.w
 80026de:	4601      	mov	r1, r0
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	60ba      	str	r2, [r7, #8]
 80026e6:	b2ca      	uxtb	r2, r1
 80026e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3301      	adds	r3, #1
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	dbf0      	blt.n	80026da <_read+0x12>
	}

return len;
 80026f8:	687b      	ldr	r3, [r7, #4]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	e009      	b.n	8002728 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	60ba      	str	r2, [r7, #8]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3301      	adds	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	429a      	cmp	r2, r3
 800272e:	dbf1      	blt.n	8002714 <_write+0x12>
	}
	return len;
 8002730:	687b      	ldr	r3, [r7, #4]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <_close>:

int _close(int file)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
	return -1;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002762:	605a      	str	r2, [r3, #4]
	return 0;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <_isatty>:

int _isatty(int file)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
	return 1;
 800277a:	2301      	movs	r3, #1
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
	return 0;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <_sbrk+0x5c>)
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <_sbrk+0x60>)
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <_sbrk+0x64>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <_sbrk+0x64>)
 80027c2:	4a12      	ldr	r2, [pc, #72]	; (800280c <_sbrk+0x68>)
 80027c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <_sbrk+0x64>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d207      	bcs.n	80027e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027d4:	f007 f8f6 	bl	80099c4 <__errno>
 80027d8:	4603      	mov	r3, r0
 80027da:	220c      	movs	r2, #12
 80027dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027de:	f04f 33ff 	mov.w	r3, #4294967295
 80027e2:	e009      	b.n	80027f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <_sbrk+0x64>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ea:	4b07      	ldr	r3, [pc, #28]	; (8002808 <_sbrk+0x64>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	4a05      	ldr	r2, [pc, #20]	; (8002808 <_sbrk+0x64>)
 80027f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027f6:	68fb      	ldr	r3, [r7, #12]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20018000 	.word	0x20018000
 8002804:	00000400 	.word	0x00000400
 8002808:	200002a4 	.word	0x200002a4
 800280c:	200095e8 	.word	0x200095e8

08002810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <SystemInit+0x20>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281a:	4a05      	ldr	r2, [pc, #20]	; (8002830 <SystemInit+0x20>)
 800281c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800286c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002838:	480d      	ldr	r0, [pc, #52]	; (8002870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800283a:	490e      	ldr	r1, [pc, #56]	; (8002874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800283c:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800283e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002840:	e002      	b.n	8002848 <LoopCopyDataInit>

08002842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002846:	3304      	adds	r3, #4

08002848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800284a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800284c:	d3f9      	bcc.n	8002842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800284e:	4a0b      	ldr	r2, [pc, #44]	; (800287c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002850:	4c0b      	ldr	r4, [pc, #44]	; (8002880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002854:	e001      	b.n	800285a <LoopFillZerobss>

08002856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002858:	3204      	adds	r2, #4

0800285a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800285a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800285c:	d3fb      	bcc.n	8002856 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800285e:	f7ff ffd7 	bl	8002810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002862:	f007 f8b5 	bl	80099d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002866:	f7fe fda5 	bl	80013b4 <main>
  bx  lr    
 800286a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800286c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002874:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002878:	080104f8 	.word	0x080104f8
  ldr r2, =_sbss
 800287c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002880:	200095e4 	.word	0x200095e4

08002884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002884:	e7fe      	b.n	8002884 <ADC_IRQHandler>
	...

08002888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800288c:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_Init+0x40>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <HAL_Init+0x40>)
 8002892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_Init+0x40>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <HAL_Init+0x40>)
 800289e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <HAL_Init+0x40>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <HAL_Init+0x40>)
 80028aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b0:	2003      	movs	r0, #3
 80028b2:	f000 fb3a 	bl	8002f2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7ff fe44 	bl	8002544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028bc:	f7ff fbfc 	bl	80020b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023c00 	.word	0x40023c00

080028cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_IncTick+0x20>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_IncTick+0x24>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4413      	add	r3, r2
 80028dc:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <HAL_IncTick+0x24>)
 80028de:	6013      	str	r3, [r2, #0]
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000008 	.word	0x20000008
 80028f0:	2000911c 	.word	0x2000911c

080028f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return uwTick;
 80028f8:	4b03      	ldr	r3, [pc, #12]	; (8002908 <HAL_GetTick+0x14>)
 80028fa:	681b      	ldr	r3, [r3, #0]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	2000911c 	.word	0x2000911c

0800290c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e033      	b.n	800298a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff fbf0 	bl	8002110 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	2b00      	cmp	r3, #0
 8002948:	d118      	bne.n	800297c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002952:	f023 0302 	bic.w	r3, r3, #2
 8002956:	f043 0202 	orr.w	r2, r3, #2
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f93a 	bl	8002bd8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f023 0303 	bic.w	r3, r3, #3
 8002972:	f043 0201 	orr.w	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
 800297a:	e001      	b.n	8002980 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x1c>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e105      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x228>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b09      	cmp	r3, #9
 80029be:	d925      	bls.n	8002a0c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68d9      	ldr	r1, [r3, #12]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	4613      	mov	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	3b1e      	subs	r3, #30
 80029d6:	2207      	movs	r2, #7
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43da      	mvns	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	400a      	ands	r2, r1
 80029e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68d9      	ldr	r1, [r3, #12]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	4618      	mov	r0, r3
 80029f8:	4603      	mov	r3, r0
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4403      	add	r3, r0
 80029fe:	3b1e      	subs	r3, #30
 8002a00:	409a      	lsls	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	e022      	b.n	8002a52 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6919      	ldr	r1, [r3, #16]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	4413      	add	r3, r2
 8002a20:	2207      	movs	r2, #7
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6919      	ldr	r1, [r3, #16]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	4603      	mov	r3, r0
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4403      	add	r3, r0
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d824      	bhi.n	8002aa4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	3b05      	subs	r3, #5
 8002a6c:	221f      	movs	r2, #31
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43da      	mvns	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	400a      	ands	r2, r1
 8002a7a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	4618      	mov	r0, r3
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	3b05      	subs	r3, #5
 8002a96:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	635a      	str	r2, [r3, #52]	; 0x34
 8002aa2:	e04c      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b0c      	cmp	r3, #12
 8002aaa:	d824      	bhi.n	8002af6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	3b23      	subs	r3, #35	; 0x23
 8002abe:	221f      	movs	r2, #31
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	400a      	ands	r2, r1
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	4618      	mov	r0, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3b23      	subs	r3, #35	; 0x23
 8002ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
 8002af4:	e023      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	3b41      	subs	r3, #65	; 0x41
 8002b08:	221f      	movs	r2, #31
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	400a      	ands	r2, r1
 8002b16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	4618      	mov	r0, r3
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	3b41      	subs	r3, #65	; 0x41
 8002b32:	fa00 f203 	lsl.w	r2, r0, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b3e:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <HAL_ADC_ConfigChannel+0x234>)
 8002b40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <HAL_ADC_ConfigChannel+0x238>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d109      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x1cc>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b12      	cmp	r3, #18
 8002b52:	d105      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a19      	ldr	r2, [pc, #100]	; (8002bcc <HAL_ADC_ConfigChannel+0x238>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d123      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x21e>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d003      	beq.n	8002b7a <HAL_ADC_ConfigChannel+0x1e6>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b11      	cmp	r3, #17
 8002b78:	d11b      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d111      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_ADC_ConfigChannel+0x23c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <HAL_ADC_ConfigChannel+0x240>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	0c9a      	lsrs	r2, r3, #18
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ba4:	e002      	b.n	8002bac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f9      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	40012300 	.word	0x40012300
 8002bcc:	40012000 	.word	0x40012000
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	431bde83 	.word	0x431bde83

08002bd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002be0:	4b79      	ldr	r3, [pc, #484]	; (8002dc8 <ADC_Init+0x1f0>)
 8002be2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	021a      	lsls	r2, r3, #8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6859      	ldr	r1, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6899      	ldr	r1, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	4a58      	ldr	r2, [pc, #352]	; (8002dcc <ADC_Init+0x1f4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d022      	beq.n	8002cb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6899      	ldr	r1, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ca0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6899      	ldr	r1, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	e00f      	b.n	8002cd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0202 	bic.w	r2, r2, #2
 8002ce4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6899      	ldr	r1, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	7e1b      	ldrb	r3, [r3, #24]
 8002cf0:	005a      	lsls	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d01b      	beq.n	8002d3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6859      	ldr	r1, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	035a      	lsls	r2, r3, #13
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	e007      	b.n	8002d4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	051a      	lsls	r2, r3, #20
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6899      	ldr	r1, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d8e:	025a      	lsls	r2, r3, #9
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6899      	ldr	r1, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	029a      	lsls	r2, r3, #10
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	609a      	str	r2, [r3, #8]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	40012300 	.word	0x40012300
 8002dcc:	0f000001 	.word	0x0f000001

08002dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <__NVIC_SetPriorityGrouping+0x44>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dec:	4013      	ands	r3, r2
 8002dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e02:	4a04      	ldr	r2, [pc, #16]	; (8002e14 <__NVIC_SetPriorityGrouping+0x44>)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	60d3      	str	r3, [r2, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <__NVIC_GetPriorityGrouping+0x18>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	0a1b      	lsrs	r3, r3, #8
 8002e22:	f003 0307 	and.w	r3, r3, #7
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	db0b      	blt.n	8002e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	f003 021f 	and.w	r2, r3, #31
 8002e4c:	4907      	ldr	r1, [pc, #28]	; (8002e6c <__NVIC_EnableIRQ+0x38>)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	2001      	movs	r0, #1
 8002e56:	fa00 f202 	lsl.w	r2, r0, r2
 8002e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000e100 	.word	0xe000e100

08002e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	6039      	str	r1, [r7, #0]
 8002e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	db0a      	blt.n	8002e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	490c      	ldr	r1, [pc, #48]	; (8002ebc <__NVIC_SetPriority+0x4c>)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	0112      	lsls	r2, r2, #4
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	440b      	add	r3, r1
 8002e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e98:	e00a      	b.n	8002eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	4908      	ldr	r1, [pc, #32]	; (8002ec0 <__NVIC_SetPriority+0x50>)
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	3b04      	subs	r3, #4
 8002ea8:	0112      	lsls	r2, r2, #4
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	440b      	add	r3, r1
 8002eae:	761a      	strb	r2, [r3, #24]
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000e100 	.word	0xe000e100
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	; 0x24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f1c3 0307 	rsb	r3, r3, #7
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	bf28      	it	cs
 8002ee2:	2304      	movcs	r3, #4
 8002ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d902      	bls.n	8002ef4 <NVIC_EncodePriority+0x30>
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3b03      	subs	r3, #3
 8002ef2:	e000      	b.n	8002ef6 <NVIC_EncodePriority+0x32>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43da      	mvns	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	401a      	ands	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	43d9      	mvns	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	4313      	orrs	r3, r2
         );
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3724      	adds	r7, #36	; 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff ff4c 	bl	8002dd0 <__NVIC_SetPriorityGrouping>
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f52:	f7ff ff61 	bl	8002e18 <__NVIC_GetPriorityGrouping>
 8002f56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	6978      	ldr	r0, [r7, #20]
 8002f5e:	f7ff ffb1 	bl	8002ec4 <NVIC_EncodePriority>
 8002f62:	4602      	mov	r2, r0
 8002f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff ff80 	bl	8002e70 <__NVIC_SetPriority>
}
 8002f70:	bf00      	nop
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff ff54 	bl	8002e34 <__NVIC_EnableIRQ>
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fa0:	f7ff fca8 	bl	80028f4 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e099      	b.n	80030e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fd0:	e00f      	b.n	8002ff2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fd2:	f7ff fc8f 	bl	80028f4 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	d908      	bls.n	8002ff2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e078      	b.n	80030e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e8      	bne.n	8002fd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	4b38      	ldr	r3, [pc, #224]	; (80030ec <HAL_DMA_Init+0x158>)
 800300c:	4013      	ands	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800301e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800302a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	2b04      	cmp	r3, #4
 800304a:	d107      	bne.n	800305c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	4313      	orrs	r3, r2
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f023 0307 	bic.w	r3, r3, #7
 8003072:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	2b04      	cmp	r3, #4
 8003084:	d117      	bne.n	80030b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00e      	beq.n	80030b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fb01 	bl	80036a0 <DMA_CheckFifoParam>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2240      	movs	r2, #64	; 0x40
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030b2:	2301      	movs	r3, #1
 80030b4:	e016      	b.n	80030e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fab8 	bl	8003634 <DMA_CalcBaseAndBitshift>
 80030c4:	4603      	mov	r3, r0
 80030c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	223f      	movs	r2, #63	; 0x3f
 80030ce:	409a      	lsls	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	f010803f 	.word	0xf010803f

080030f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_DMA_Start_IT+0x26>
 8003112:	2302      	movs	r3, #2
 8003114:	e040      	b.n	8003198 <HAL_DMA_Start_IT+0xa8>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d12f      	bne.n	800318a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2202      	movs	r2, #2
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fa4a 	bl	80035d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003148:	223f      	movs	r2, #63	; 0x3f
 800314a:	409a      	lsls	r2, r3
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0216 	orr.w	r2, r2, #22
 800315e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0208 	orr.w	r2, r2, #8
 8003176:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	e005      	b.n	8003196 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003192:	2302      	movs	r3, #2
 8003194:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003196:	7dfb      	ldrb	r3, [r7, #23]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031ae:	f7ff fba1 	bl	80028f4 <HAL_GetTick>
 80031b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d008      	beq.n	80031d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2280      	movs	r2, #128	; 0x80
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e052      	b.n	8003278 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0216 	bic.w	r2, r2, #22
 80031e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695a      	ldr	r2, [r3, #20]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d103      	bne.n	8003202 <HAL_DMA_Abort+0x62>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0208 	bic.w	r2, r2, #8
 8003210:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003222:	e013      	b.n	800324c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003224:	f7ff fb66 	bl	80028f4 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b05      	cmp	r3, #5
 8003230:	d90c      	bls.n	800324c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2203      	movs	r2, #3
 8003244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e015      	b.n	8003278 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1e4      	bne.n	8003224 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325e:	223f      	movs	r2, #63	; 0x3f
 8003260:	409a      	lsls	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d004      	beq.n	800329e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2280      	movs	r2, #128	; 0x80
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e00c      	b.n	80032b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2205      	movs	r2, #5
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032d0:	4b92      	ldr	r3, [pc, #584]	; (800351c <HAL_DMA_IRQHandler+0x258>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a92      	ldr	r2, [pc, #584]	; (8003520 <HAL_DMA_IRQHandler+0x25c>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	0a9b      	lsrs	r3, r3, #10
 80032dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ee:	2208      	movs	r2, #8
 80032f0:	409a      	lsls	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01a      	beq.n	8003330 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d013      	beq.n	8003330 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0204 	bic.w	r2, r2, #4
 8003316:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	2208      	movs	r2, #8
 800331e:	409a      	lsls	r2, r3
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003328:	f043 0201 	orr.w	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	2201      	movs	r2, #1
 8003336:	409a      	lsls	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d012      	beq.n	8003366 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003352:	2201      	movs	r2, #1
 8003354:	409a      	lsls	r2, r3
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	f043 0202 	orr.w	r2, r3, #2
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336a:	2204      	movs	r2, #4
 800336c:	409a      	lsls	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d012      	beq.n	800339c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00b      	beq.n	800339c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	2204      	movs	r2, #4
 800338a:	409a      	lsls	r2, r3
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	f043 0204 	orr.w	r2, r3, #4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a0:	2210      	movs	r2, #16
 80033a2:	409a      	lsls	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d043      	beq.n	8003434 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d03c      	beq.n	8003434 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033be:	2210      	movs	r2, #16
 80033c0:	409a      	lsls	r2, r3
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d018      	beq.n	8003406 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d108      	bne.n	80033f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d024      	beq.n	8003434 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	4798      	blx	r3
 80033f2:	e01f      	b.n	8003434 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	4798      	blx	r3
 8003404:	e016      	b.n	8003434 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d107      	bne.n	8003424 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0208 	bic.w	r2, r2, #8
 8003422:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	2220      	movs	r2, #32
 800343a:	409a      	lsls	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4013      	ands	r3, r2
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 808e 	beq.w	8003562 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8086 	beq.w	8003562 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345a:	2220      	movs	r2, #32
 800345c:	409a      	lsls	r2, r3
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b05      	cmp	r3, #5
 800346c:	d136      	bne.n	80034dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0216 	bic.w	r2, r2, #22
 800347c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800348c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <HAL_DMA_IRQHandler+0x1da>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0208 	bic.w	r2, r2, #8
 80034ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	223f      	movs	r2, #63	; 0x3f
 80034b4:	409a      	lsls	r2, r3
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d07d      	beq.n	80035ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
        }
        return;
 80034da:	e078      	b.n	80035ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d01c      	beq.n	8003524 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d108      	bne.n	800350a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d030      	beq.n	8003562 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4798      	blx	r3
 8003508:	e02b      	b.n	8003562 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350e:	2b00      	cmp	r3, #0
 8003510:	d027      	beq.n	8003562 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	4798      	blx	r3
 800351a:	e022      	b.n	8003562 <HAL_DMA_IRQHandler+0x29e>
 800351c:	20000000 	.word	0x20000000
 8003520:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10f      	bne.n	8003552 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0210 	bic.w	r2, r2, #16
 8003540:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	2b00      	cmp	r3, #0
 8003568:	d032      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d022      	beq.n	80035bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2205      	movs	r2, #5
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0201 	bic.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	3301      	adds	r3, #1
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	429a      	cmp	r2, r3
 8003598:	d307      	bcc.n	80035aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f2      	bne.n	800358e <HAL_DMA_IRQHandler+0x2ca>
 80035a8:	e000      	b.n	80035ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80035aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
 80035cc:	e000      	b.n	80035d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80035ce:	bf00      	nop
    }
  }
}
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop

080035d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b40      	cmp	r3, #64	; 0x40
 8003604:	d108      	bne.n	8003618 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003616:	e007      	b.n	8003628 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	60da      	str	r2, [r3, #12]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	3b10      	subs	r3, #16
 8003644:	4a14      	ldr	r2, [pc, #80]	; (8003698 <DMA_CalcBaseAndBitshift+0x64>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800364e:	4a13      	ldr	r2, [pc, #76]	; (800369c <DMA_CalcBaseAndBitshift+0x68>)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b03      	cmp	r3, #3
 8003660:	d909      	bls.n	8003676 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800366a:	f023 0303 	bic.w	r3, r3, #3
 800366e:	1d1a      	adds	r2, r3, #4
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	659a      	str	r2, [r3, #88]	; 0x58
 8003674:	e007      	b.n	8003686 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800367e:	f023 0303 	bic.w	r3, r3, #3
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	aaaaaaab 	.word	0xaaaaaaab
 800369c:	0800fdfc 	.word	0x0800fdfc

080036a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d11f      	bne.n	80036fa <DMA_CheckFifoParam+0x5a>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d856      	bhi.n	800376e <DMA_CheckFifoParam+0xce>
 80036c0:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <DMA_CheckFifoParam+0x28>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036d9 	.word	0x080036d9
 80036cc:	080036eb 	.word	0x080036eb
 80036d0:	080036d9 	.word	0x080036d9
 80036d4:	0800376f 	.word	0x0800376f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d046      	beq.n	8003772 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e8:	e043      	b.n	8003772 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036f2:	d140      	bne.n	8003776 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f8:	e03d      	b.n	8003776 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003702:	d121      	bne.n	8003748 <DMA_CheckFifoParam+0xa8>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d837      	bhi.n	800377a <DMA_CheckFifoParam+0xda>
 800370a:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <DMA_CheckFifoParam+0x70>)
 800370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003710:	08003721 	.word	0x08003721
 8003714:	08003727 	.word	0x08003727
 8003718:	08003721 	.word	0x08003721
 800371c:	08003739 	.word	0x08003739
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      break;
 8003724:	e030      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d025      	beq.n	800377e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003736:	e022      	b.n	800377e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003740:	d11f      	bne.n	8003782 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003746:	e01c      	b.n	8003782 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d903      	bls.n	8003756 <DMA_CheckFifoParam+0xb6>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d003      	beq.n	800375c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003754:	e018      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
      break;
 800375a:	e015      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00e      	beq.n	8003786 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
      break;
 800376c:	e00b      	b.n	8003786 <DMA_CheckFifoParam+0xe6>
      break;
 800376e:	bf00      	nop
 8003770:	e00a      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
      break;
 8003772:	bf00      	nop
 8003774:	e008      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
      break;
 8003776:	bf00      	nop
 8003778:	e006      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
      break;
 800377a:	bf00      	nop
 800377c:	e004      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
      break;
 800377e:	bf00      	nop
 8003780:	e002      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
      break;   
 8003782:	bf00      	nop
 8003784:	e000      	b.n	8003788 <DMA_CheckFifoParam+0xe8>
      break;
 8003786:	bf00      	nop
    }
  } 
  
  return status; 
 8003788:	7bfb      	ldrb	r3, [r7, #15]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop

08003798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003798:	b480      	push	{r7}
 800379a:	b089      	sub	sp, #36	; 0x24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	e159      	b.n	8003a68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037b4:	2201      	movs	r2, #1
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	f040 8148 	bne.w	8003a62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d005      	beq.n	80037ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d130      	bne.n	800384c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	2203      	movs	r2, #3
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003820:	2201      	movs	r2, #1
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 0201 	and.w	r2, r3, #1
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b03      	cmp	r3, #3
 8003856:	d017      	beq.n	8003888 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	2203      	movs	r2, #3
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d123      	bne.n	80038dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	08da      	lsrs	r2, r3, #3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3208      	adds	r2, #8
 800389c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	220f      	movs	r2, #15
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	08da      	lsrs	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3208      	adds	r2, #8
 80038d6:	69b9      	ldr	r1, [r7, #24]
 80038d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	2203      	movs	r2, #3
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0203 	and.w	r2, r3, #3
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80a2 	beq.w	8003a62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	4b57      	ldr	r3, [pc, #348]	; (8003a80 <HAL_GPIO_Init+0x2e8>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	4a56      	ldr	r2, [pc, #344]	; (8003a80 <HAL_GPIO_Init+0x2e8>)
 8003928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800392c:	6453      	str	r3, [r2, #68]	; 0x44
 800392e:	4b54      	ldr	r3, [pc, #336]	; (8003a80 <HAL_GPIO_Init+0x2e8>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800393a:	4a52      	ldr	r2, [pc, #328]	; (8003a84 <HAL_GPIO_Init+0x2ec>)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	3302      	adds	r3, #2
 8003942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	220f      	movs	r2, #15
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a49      	ldr	r2, [pc, #292]	; (8003a88 <HAL_GPIO_Init+0x2f0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d019      	beq.n	800399a <HAL_GPIO_Init+0x202>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a48      	ldr	r2, [pc, #288]	; (8003a8c <HAL_GPIO_Init+0x2f4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d013      	beq.n	8003996 <HAL_GPIO_Init+0x1fe>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a47      	ldr	r2, [pc, #284]	; (8003a90 <HAL_GPIO_Init+0x2f8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00d      	beq.n	8003992 <HAL_GPIO_Init+0x1fa>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a46      	ldr	r2, [pc, #280]	; (8003a94 <HAL_GPIO_Init+0x2fc>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d007      	beq.n	800398e <HAL_GPIO_Init+0x1f6>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a45      	ldr	r2, [pc, #276]	; (8003a98 <HAL_GPIO_Init+0x300>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d101      	bne.n	800398a <HAL_GPIO_Init+0x1f2>
 8003986:	2304      	movs	r3, #4
 8003988:	e008      	b.n	800399c <HAL_GPIO_Init+0x204>
 800398a:	2307      	movs	r3, #7
 800398c:	e006      	b.n	800399c <HAL_GPIO_Init+0x204>
 800398e:	2303      	movs	r3, #3
 8003990:	e004      	b.n	800399c <HAL_GPIO_Init+0x204>
 8003992:	2302      	movs	r3, #2
 8003994:	e002      	b.n	800399c <HAL_GPIO_Init+0x204>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <HAL_GPIO_Init+0x204>
 800399a:	2300      	movs	r3, #0
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	f002 0203 	and.w	r2, r2, #3
 80039a2:	0092      	lsls	r2, r2, #2
 80039a4:	4093      	lsls	r3, r2
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039ac:	4935      	ldr	r1, [pc, #212]	; (8003a84 <HAL_GPIO_Init+0x2ec>)
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	3302      	adds	r3, #2
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039ba:	4b38      	ldr	r3, [pc, #224]	; (8003a9c <HAL_GPIO_Init+0x304>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039de:	4a2f      	ldr	r2, [pc, #188]	; (8003a9c <HAL_GPIO_Init+0x304>)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039e4:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <HAL_GPIO_Init+0x304>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a08:	4a24      	ldr	r2, [pc, #144]	; (8003a9c <HAL_GPIO_Init+0x304>)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a0e:	4b23      	ldr	r3, [pc, #140]	; (8003a9c <HAL_GPIO_Init+0x304>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a32:	4a1a      	ldr	r2, [pc, #104]	; (8003a9c <HAL_GPIO_Init+0x304>)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a38:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <HAL_GPIO_Init+0x304>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a5c:	4a0f      	ldr	r2, [pc, #60]	; (8003a9c <HAL_GPIO_Init+0x304>)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3301      	adds	r3, #1
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b0f      	cmp	r3, #15
 8003a6c:	f67f aea2 	bls.w	80037b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	3724      	adds	r7, #36	; 0x24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40013800 	.word	0x40013800
 8003a88:	40020000 	.word	0x40020000
 8003a8c:	40020400 	.word	0x40020400
 8003a90:	40020800 	.word	0x40020800
 8003a94:	40020c00 	.word	0x40020c00
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40013c00 	.word	0x40013c00

08003aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	807b      	strh	r3, [r7, #2]
 8003aac:	4613      	mov	r3, r2
 8003aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ab0:	787b      	ldrb	r3, [r7, #1]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ab6:	887a      	ldrh	r2, [r7, #2]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003abc:	e003      	b.n	8003ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003abe:	887b      	ldrh	r3, [r7, #2]
 8003ac0:	041a      	lsls	r2, r3, #16
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	619a      	str	r2, [r3, #24]
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e12b      	b.n	8003d3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fe fb9c 	bl	8002238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b38:	f000 fd5c 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 8003b3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4a81      	ldr	r2, [pc, #516]	; (8003d48 <HAL_I2C_Init+0x274>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d807      	bhi.n	8003b58 <HAL_I2C_Init+0x84>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a80      	ldr	r2, [pc, #512]	; (8003d4c <HAL_I2C_Init+0x278>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	bf94      	ite	ls
 8003b50:	2301      	movls	r3, #1
 8003b52:	2300      	movhi	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	e006      	b.n	8003b66 <HAL_I2C_Init+0x92>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a7d      	ldr	r2, [pc, #500]	; (8003d50 <HAL_I2C_Init+0x27c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	bf94      	ite	ls
 8003b60:	2301      	movls	r3, #1
 8003b62:	2300      	movhi	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e0e7      	b.n	8003d3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a78      	ldr	r2, [pc, #480]	; (8003d54 <HAL_I2C_Init+0x280>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	0c9b      	lsrs	r3, r3, #18
 8003b78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4a6a      	ldr	r2, [pc, #424]	; (8003d48 <HAL_I2C_Init+0x274>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d802      	bhi.n	8003ba8 <HAL_I2C_Init+0xd4>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	e009      	b.n	8003bbc <HAL_I2C_Init+0xe8>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bae:	fb02 f303 	mul.w	r3, r2, r3
 8003bb2:	4a69      	ldr	r2, [pc, #420]	; (8003d58 <HAL_I2C_Init+0x284>)
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	099b      	lsrs	r3, r3, #6
 8003bba:	3301      	adds	r3, #1
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	495c      	ldr	r1, [pc, #368]	; (8003d48 <HAL_I2C_Init+0x274>)
 8003bd8:	428b      	cmp	r3, r1
 8003bda:	d819      	bhi.n	8003c10 <HAL_I2C_Init+0x13c>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1e59      	subs	r1, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bea:	1c59      	adds	r1, r3, #1
 8003bec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bf0:	400b      	ands	r3, r1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_I2C_Init+0x138>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1e59      	subs	r1, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0a:	e051      	b.n	8003cb0 <HAL_I2C_Init+0x1dc>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	e04f      	b.n	8003cb0 <HAL_I2C_Init+0x1dc>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d111      	bne.n	8003c3c <HAL_I2C_Init+0x168>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1e58      	subs	r0, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	440b      	add	r3, r1
 8003c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	e012      	b.n	8003c62 <HAL_I2C_Init+0x18e>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	1e58      	subs	r0, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6859      	ldr	r1, [r3, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	0099      	lsls	r1, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c52:	3301      	adds	r3, #1
 8003c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_Init+0x196>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e022      	b.n	8003cb0 <HAL_I2C_Init+0x1dc>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10e      	bne.n	8003c90 <HAL_I2C_Init+0x1bc>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1e58      	subs	r0, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6859      	ldr	r1, [r3, #4]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	440b      	add	r3, r1
 8003c80:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c84:	3301      	adds	r3, #1
 8003c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c8e:	e00f      	b.n	8003cb0 <HAL_I2C_Init+0x1dc>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	1e58      	subs	r0, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	0099      	lsls	r1, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	6809      	ldr	r1, [r1, #0]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69da      	ldr	r2, [r3, #28]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6911      	ldr	r1, [r2, #16]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68d2      	ldr	r2, [r2, #12]
 8003cea:	4311      	orrs	r1, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	000186a0 	.word	0x000186a0
 8003d4c:	001e847f 	.word	0x001e847f
 8003d50:	003d08ff 	.word	0x003d08ff
 8003d54:	431bde83 	.word	0x431bde83
 8003d58:	10624dd3 	.word	0x10624dd3

08003d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e264      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d075      	beq.n	8003e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d7a:	4ba3      	ldr	r3, [pc, #652]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d00c      	beq.n	8003da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d86:	4ba0      	ldr	r3, [pc, #640]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d112      	bne.n	8003db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d92:	4b9d      	ldr	r3, [pc, #628]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d9e:	d10b      	bne.n	8003db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da0:	4b99      	ldr	r3, [pc, #612]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d05b      	beq.n	8003e64 <HAL_RCC_OscConfig+0x108>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d157      	bne.n	8003e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e23f      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc0:	d106      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x74>
 8003dc2:	4b91      	ldr	r3, [pc, #580]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a90      	ldr	r2, [pc, #576]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	e01d      	b.n	8003e0c <HAL_RCC_OscConfig+0xb0>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCC_OscConfig+0x98>
 8003dda:	4b8b      	ldr	r3, [pc, #556]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a8a      	ldr	r2, [pc, #552]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	4b88      	ldr	r3, [pc, #544]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a87      	ldr	r2, [pc, #540]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	e00b      	b.n	8003e0c <HAL_RCC_OscConfig+0xb0>
 8003df4:	4b84      	ldr	r3, [pc, #528]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a83      	ldr	r2, [pc, #524]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	4b81      	ldr	r3, [pc, #516]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a80      	ldr	r2, [pc, #512]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d013      	beq.n	8003e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e14:	f7fe fd6e 	bl	80028f4 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e1c:	f7fe fd6a 	bl	80028f4 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	; 0x64
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e204      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2e:	4b76      	ldr	r3, [pc, #472]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0xc0>
 8003e3a:	e014      	b.n	8003e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3c:	f7fe fd5a 	bl	80028f4 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e44:	f7fe fd56 	bl	80028f4 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b64      	cmp	r3, #100	; 0x64
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e1f0      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e56:	4b6c      	ldr	r3, [pc, #432]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0xe8>
 8003e62:	e000      	b.n	8003e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d063      	beq.n	8003f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e72:	4b65      	ldr	r3, [pc, #404]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e7e:	4b62      	ldr	r3, [pc, #392]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d11c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e8a:	4b5f      	ldr	r3, [pc, #380]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d116      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e96:	4b5c      	ldr	r3, [pc, #368]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_RCC_OscConfig+0x152>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d001      	beq.n	8003eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e1c4      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eae:	4b56      	ldr	r3, [pc, #344]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4952      	ldr	r1, [pc, #328]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec2:	e03a      	b.n	8003f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d020      	beq.n	8003f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ecc:	4b4f      	ldr	r3, [pc, #316]	; (800400c <HAL_RCC_OscConfig+0x2b0>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed2:	f7fe fd0f 	bl	80028f4 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eda:	f7fe fd0b 	bl	80028f4 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e1a5      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eec:	4b46      	ldr	r3, [pc, #280]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef8:	4b43      	ldr	r3, [pc, #268]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	4940      	ldr	r1, [pc, #256]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	600b      	str	r3, [r1, #0]
 8003f0c:	e015      	b.n	8003f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f0e:	4b3f      	ldr	r3, [pc, #252]	; (800400c <HAL_RCC_OscConfig+0x2b0>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fe fcee 	bl	80028f4 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f1c:	f7fe fcea 	bl	80028f4 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e184      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2e:	4b36      	ldr	r3, [pc, #216]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f0      	bne.n	8003f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d030      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d016      	beq.n	8003f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f4e:	4b30      	ldr	r3, [pc, #192]	; (8004010 <HAL_RCC_OscConfig+0x2b4>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f54:	f7fe fcce 	bl	80028f4 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f5c:	f7fe fcca 	bl	80028f4 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e164      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6e:	4b26      	ldr	r3, [pc, #152]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0x200>
 8003f7a:	e015      	b.n	8003fa8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f7c:	4b24      	ldr	r3, [pc, #144]	; (8004010 <HAL_RCC_OscConfig+0x2b4>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f82:	f7fe fcb7 	bl	80028f4 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f8a:	f7fe fcb3 	bl	80028f4 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e14d      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f9c:	4b1a      	ldr	r3, [pc, #104]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f0      	bne.n	8003f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80a0 	beq.w	80040f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fba:	4b13      	ldr	r3, [pc, #76]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10f      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	4a0e      	ldr	r2, [pc, #56]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fde:	60bb      	str	r3, [r7, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <HAL_RCC_OscConfig+0x2b8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d121      	bne.n	8004036 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <HAL_RCC_OscConfig+0x2b8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a07      	ldr	r2, [pc, #28]	; (8004014 <HAL_RCC_OscConfig+0x2b8>)
 8003ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ffe:	f7fe fc79 	bl	80028f4 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004004:	e011      	b.n	800402a <HAL_RCC_OscConfig+0x2ce>
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
 800400c:	42470000 	.word	0x42470000
 8004010:	42470e80 	.word	0x42470e80
 8004014:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004018:	f7fe fc6c 	bl	80028f4 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e106      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402a:	4b85      	ldr	r3, [pc, #532]	; (8004240 <HAL_RCC_OscConfig+0x4e4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d106      	bne.n	800404c <HAL_RCC_OscConfig+0x2f0>
 800403e:	4b81      	ldr	r3, [pc, #516]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	4a80      	ldr	r2, [pc, #512]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	6713      	str	r3, [r2, #112]	; 0x70
 800404a:	e01c      	b.n	8004086 <HAL_RCC_OscConfig+0x32a>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b05      	cmp	r3, #5
 8004052:	d10c      	bne.n	800406e <HAL_RCC_OscConfig+0x312>
 8004054:	4b7b      	ldr	r3, [pc, #492]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	4a7a      	ldr	r2, [pc, #488]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 800405a:	f043 0304 	orr.w	r3, r3, #4
 800405e:	6713      	str	r3, [r2, #112]	; 0x70
 8004060:	4b78      	ldr	r3, [pc, #480]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	4a77      	ldr	r2, [pc, #476]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6713      	str	r3, [r2, #112]	; 0x70
 800406c:	e00b      	b.n	8004086 <HAL_RCC_OscConfig+0x32a>
 800406e:	4b75      	ldr	r3, [pc, #468]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	4a74      	ldr	r2, [pc, #464]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	6713      	str	r3, [r2, #112]	; 0x70
 800407a:	4b72      	ldr	r3, [pc, #456]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407e:	4a71      	ldr	r2, [pc, #452]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 8004080:	f023 0304 	bic.w	r3, r3, #4
 8004084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d015      	beq.n	80040ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408e:	f7fe fc31 	bl	80028f4 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004094:	e00a      	b.n	80040ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004096:	f7fe fc2d 	bl	80028f4 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e0c5      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ac:	4b65      	ldr	r3, [pc, #404]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0ee      	beq.n	8004096 <HAL_RCC_OscConfig+0x33a>
 80040b8:	e014      	b.n	80040e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ba:	f7fe fc1b 	bl	80028f4 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c0:	e00a      	b.n	80040d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c2:	f7fe fc17 	bl	80028f4 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e0af      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d8:	4b5a      	ldr	r3, [pc, #360]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1ee      	bne.n	80040c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d105      	bne.n	80040f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ea:	4b56      	ldr	r3, [pc, #344]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	4a55      	ldr	r2, [pc, #340]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 80040f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 809b 	beq.w	8004236 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004100:	4b50      	ldr	r3, [pc, #320]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b08      	cmp	r3, #8
 800410a:	d05c      	beq.n	80041c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d141      	bne.n	8004198 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004114:	4b4c      	ldr	r3, [pc, #304]	; (8004248 <HAL_RCC_OscConfig+0x4ec>)
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411a:	f7fe fbeb 	bl	80028f4 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004122:	f7fe fbe7 	bl	80028f4 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e081      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004134:	4b43      	ldr	r3, [pc, #268]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f0      	bne.n	8004122 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	019b      	lsls	r3, r3, #6
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004156:	085b      	lsrs	r3, r3, #1
 8004158:	3b01      	subs	r3, #1
 800415a:	041b      	lsls	r3, r3, #16
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004162:	061b      	lsls	r3, r3, #24
 8004164:	4937      	ldr	r1, [pc, #220]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 8004166:	4313      	orrs	r3, r2
 8004168:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800416a:	4b37      	ldr	r3, [pc, #220]	; (8004248 <HAL_RCC_OscConfig+0x4ec>)
 800416c:	2201      	movs	r2, #1
 800416e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fe fbc0 	bl	80028f4 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004178:	f7fe fbbc 	bl	80028f4 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e056      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418a:	4b2e      	ldr	r3, [pc, #184]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0x41c>
 8004196:	e04e      	b.n	8004236 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004198:	4b2b      	ldr	r3, [pc, #172]	; (8004248 <HAL_RCC_OscConfig+0x4ec>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419e:	f7fe fba9 	bl	80028f4 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a6:	f7fe fba5 	bl	80028f4 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e03f      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b8:	4b22      	ldr	r3, [pc, #136]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f0      	bne.n	80041a6 <HAL_RCC_OscConfig+0x44a>
 80041c4:	e037      	b.n	8004236 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e032      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041d2:	4b1c      	ldr	r3, [pc, #112]	; (8004244 <HAL_RCC_OscConfig+0x4e8>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d028      	beq.n	8004232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d121      	bne.n	8004232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d11a      	bne.n	8004232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004202:	4013      	ands	r3, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004208:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800420a:	4293      	cmp	r3, r2
 800420c:	d111      	bne.n	8004232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	085b      	lsrs	r3, r3, #1
 800421a:	3b01      	subs	r3, #1
 800421c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d107      	bne.n	8004232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800422e:	429a      	cmp	r2, r3
 8004230:	d001      	beq.n	8004236 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40007000 	.word	0x40007000
 8004244:	40023800 	.word	0x40023800
 8004248:	42470060 	.word	0x42470060

0800424c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0cc      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004260:	4b68      	ldr	r3, [pc, #416]	; (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d90c      	bls.n	8004288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426e:	4b65      	ldr	r3, [pc, #404]	; (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	4b63      	ldr	r3, [pc, #396]	; (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0b8      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d020      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a0:	4b59      	ldr	r3, [pc, #356]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4a58      	ldr	r2, [pc, #352]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042b8:	4b53      	ldr	r3, [pc, #332]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4a52      	ldr	r2, [pc, #328]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c4:	4b50      	ldr	r3, [pc, #320]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	494d      	ldr	r1, [pc, #308]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d044      	beq.n	800436c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d107      	bne.n	80042fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	4b47      	ldr	r3, [pc, #284]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d119      	bne.n	800432a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e07f      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d003      	beq.n	800430a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004306:	2b03      	cmp	r3, #3
 8004308:	d107      	bne.n	800431a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430a:	4b3f      	ldr	r3, [pc, #252]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e06f      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431a:	4b3b      	ldr	r3, [pc, #236]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e067      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800432a:	4b37      	ldr	r3, [pc, #220]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f023 0203 	bic.w	r2, r3, #3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4934      	ldr	r1, [pc, #208]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	4313      	orrs	r3, r2
 800433a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800433c:	f7fe fada 	bl	80028f4 <HAL_GetTick>
 8004340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	e00a      	b.n	800435a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004344:	f7fe fad6 	bl	80028f4 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004352:	4293      	cmp	r3, r2
 8004354:	d901      	bls.n	800435a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e04f      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	4b2b      	ldr	r3, [pc, #172]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 020c 	and.w	r2, r3, #12
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	429a      	cmp	r2, r3
 800436a:	d1eb      	bne.n	8004344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800436c:	4b25      	ldr	r3, [pc, #148]	; (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d20c      	bcs.n	8004394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b22      	ldr	r3, [pc, #136]	; (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004382:	4b20      	ldr	r3, [pc, #128]	; (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d001      	beq.n	8004394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e032      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a0:	4b19      	ldr	r3, [pc, #100]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4916      	ldr	r1, [pc, #88]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	490e      	ldr	r1, [pc, #56]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043d2:	f000 f821 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 80043d6:	4602      	mov	r2, r0
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	490a      	ldr	r1, [pc, #40]	; (800440c <HAL_RCC_ClockConfig+0x1c0>)
 80043e4:	5ccb      	ldrb	r3, [r1, r3]
 80043e6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ea:	4a09      	ldr	r2, [pc, #36]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 80043ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_ClockConfig+0x1c8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fe f8a6 	bl	8002544 <HAL_InitTick>

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40023c00 	.word	0x40023c00
 8004408:	40023800 	.word	0x40023800
 800440c:	0800fde4 	.word	0x0800fde4
 8004410:	20000000 	.word	0x20000000
 8004414:	20000004 	.word	0x20000004

08004418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	607b      	str	r3, [r7, #4]
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	2300      	movs	r3, #0
 800442a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004430:	4b67      	ldr	r3, [pc, #412]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 030c 	and.w	r3, r3, #12
 8004438:	2b08      	cmp	r3, #8
 800443a:	d00d      	beq.n	8004458 <HAL_RCC_GetSysClockFreq+0x40>
 800443c:	2b08      	cmp	r3, #8
 800443e:	f200 80bd 	bhi.w	80045bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0x34>
 8004446:	2b04      	cmp	r3, #4
 8004448:	d003      	beq.n	8004452 <HAL_RCC_GetSysClockFreq+0x3a>
 800444a:	e0b7      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800444c:	4b61      	ldr	r3, [pc, #388]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800444e:	60bb      	str	r3, [r7, #8]
       break;
 8004450:	e0b7      	b.n	80045c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004452:	4b61      	ldr	r3, [pc, #388]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004454:	60bb      	str	r3, [r7, #8]
      break;
 8004456:	e0b4      	b.n	80045c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004458:	4b5d      	ldr	r3, [pc, #372]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004460:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004462:	4b5b      	ldr	r3, [pc, #364]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d04d      	beq.n	800450a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800446e:	4b58      	ldr	r3, [pc, #352]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	099b      	lsrs	r3, r3, #6
 8004474:	461a      	mov	r2, r3
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800447e:	f04f 0100 	mov.w	r1, #0
 8004482:	ea02 0800 	and.w	r8, r2, r0
 8004486:	ea03 0901 	and.w	r9, r3, r1
 800448a:	4640      	mov	r0, r8
 800448c:	4649      	mov	r1, r9
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	014b      	lsls	r3, r1, #5
 8004498:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800449c:	0142      	lsls	r2, r0, #5
 800449e:	4610      	mov	r0, r2
 80044a0:	4619      	mov	r1, r3
 80044a2:	ebb0 0008 	subs.w	r0, r0, r8
 80044a6:	eb61 0109 	sbc.w	r1, r1, r9
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	018b      	lsls	r3, r1, #6
 80044b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044b8:	0182      	lsls	r2, r0, #6
 80044ba:	1a12      	subs	r2, r2, r0
 80044bc:	eb63 0301 	sbc.w	r3, r3, r1
 80044c0:	f04f 0000 	mov.w	r0, #0
 80044c4:	f04f 0100 	mov.w	r1, #0
 80044c8:	00d9      	lsls	r1, r3, #3
 80044ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044ce:	00d0      	lsls	r0, r2, #3
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	eb12 0208 	adds.w	r2, r2, r8
 80044d8:	eb43 0309 	adc.w	r3, r3, r9
 80044dc:	f04f 0000 	mov.w	r0, #0
 80044e0:	f04f 0100 	mov.w	r1, #0
 80044e4:	0259      	lsls	r1, r3, #9
 80044e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80044ea:	0250      	lsls	r0, r2, #9
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4610      	mov	r0, r2
 80044f2:	4619      	mov	r1, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	461a      	mov	r2, r3
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	f7fc fbcc 	bl	8000c98 <__aeabi_uldivmod>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4613      	mov	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	e04a      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800450a:	4b31      	ldr	r3, [pc, #196]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	099b      	lsrs	r3, r3, #6
 8004510:	461a      	mov	r2, r3
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	f240 10ff 	movw	r0, #511	; 0x1ff
 800451a:	f04f 0100 	mov.w	r1, #0
 800451e:	ea02 0400 	and.w	r4, r2, r0
 8004522:	ea03 0501 	and.w	r5, r3, r1
 8004526:	4620      	mov	r0, r4
 8004528:	4629      	mov	r1, r5
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	014b      	lsls	r3, r1, #5
 8004534:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004538:	0142      	lsls	r2, r0, #5
 800453a:	4610      	mov	r0, r2
 800453c:	4619      	mov	r1, r3
 800453e:	1b00      	subs	r0, r0, r4
 8004540:	eb61 0105 	sbc.w	r1, r1, r5
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	018b      	lsls	r3, r1, #6
 800454e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004552:	0182      	lsls	r2, r0, #6
 8004554:	1a12      	subs	r2, r2, r0
 8004556:	eb63 0301 	sbc.w	r3, r3, r1
 800455a:	f04f 0000 	mov.w	r0, #0
 800455e:	f04f 0100 	mov.w	r1, #0
 8004562:	00d9      	lsls	r1, r3, #3
 8004564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004568:	00d0      	lsls	r0, r2, #3
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	1912      	adds	r2, r2, r4
 8004570:	eb45 0303 	adc.w	r3, r5, r3
 8004574:	f04f 0000 	mov.w	r0, #0
 8004578:	f04f 0100 	mov.w	r1, #0
 800457c:	0299      	lsls	r1, r3, #10
 800457e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004582:	0290      	lsls	r0, r2, #10
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	461a      	mov	r2, r3
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	f7fc fb80 	bl	8000c98 <__aeabi_uldivmod>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4613      	mov	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	0c1b      	lsrs	r3, r3, #16
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	3301      	adds	r3, #1
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	60bb      	str	r3, [r7, #8]
      break;
 80045ba:	e002      	b.n	80045c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045be:	60bb      	str	r3, [r7, #8]
      break;
 80045c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045c2:	68bb      	ldr	r3, [r7, #8]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045ce:	bf00      	nop
 80045d0:	40023800 	.word	0x40023800
 80045d4:	00f42400 	.word	0x00f42400
 80045d8:	007a1200 	.word	0x007a1200

080045dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e0:	4b03      	ldr	r3, [pc, #12]	; (80045f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045e2:	681b      	ldr	r3, [r3, #0]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	20000000 	.word	0x20000000

080045f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045f8:	f7ff fff0 	bl	80045dc <HAL_RCC_GetHCLKFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b05      	ldr	r3, [pc, #20]	; (8004614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	0a9b      	lsrs	r3, r3, #10
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	4903      	ldr	r1, [pc, #12]	; (8004618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40023800 	.word	0x40023800
 8004618:	0800fdf4 	.word	0x0800fdf4

0800461c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004620:	f7ff ffdc 	bl	80045dc <HAL_RCC_GetHCLKFreq>
 8004624:	4602      	mov	r2, r0
 8004626:	4b05      	ldr	r3, [pc, #20]	; (800463c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	0b5b      	lsrs	r3, r3, #13
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	4903      	ldr	r1, [pc, #12]	; (8004640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004632:	5ccb      	ldrb	r3, [r1, r3]
 8004634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004638:	4618      	mov	r0, r3
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40023800 	.word	0x40023800
 8004640:	0800fdf4 	.word	0x0800fdf4

08004644 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	220f      	movs	r2, #15
 8004652:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004654:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 0203 	and.w	r2, r3, #3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <HAL_RCC_GetClockConfig+0x5c>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004678:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <HAL_RCC_GetClockConfig+0x5c>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	08db      	lsrs	r3, r3, #3
 800467e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <HAL_RCC_GetClockConfig+0x60>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0207 	and.w	r2, r3, #7
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	601a      	str	r2, [r3, #0]
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40023c00 	.word	0x40023c00

080046a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e07b      	b.n	80047b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d108      	bne.n	80046d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ca:	d009      	beq.n	80046e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	61da      	str	r2, [r3, #28]
 80046d2:	e005      	b.n	80046e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fd fde4 	bl	80022c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004716:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004764:	ea42 0103 	orr.w	r1, r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	0c1b      	lsrs	r3, r3, #16
 800477e:	f003 0104 	and.w	r1, r3, #4
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	f003 0210 	and.w	r2, r3, #16
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b08c      	sub	sp, #48	; 0x30
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047c8:	2301      	movs	r3, #1
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_SPI_TransmitReceive+0x26>
 80047dc:	2302      	movs	r3, #2
 80047de:	e18a      	b.n	8004af6 <HAL_SPI_TransmitReceive+0x33c>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047e8:	f7fe f884 	bl	80028f4 <HAL_GetTick>
 80047ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80047fe:	887b      	ldrh	r3, [r7, #2]
 8004800:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004802:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004806:	2b01      	cmp	r3, #1
 8004808:	d00f      	beq.n	800482a <HAL_SPI_TransmitReceive+0x70>
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004810:	d107      	bne.n	8004822 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d103      	bne.n	8004822 <HAL_SPI_TransmitReceive+0x68>
 800481a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800481e:	2b04      	cmp	r3, #4
 8004820:	d003      	beq.n	800482a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004822:	2302      	movs	r3, #2
 8004824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004828:	e15b      	b.n	8004ae2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_SPI_TransmitReceive+0x82>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_SPI_TransmitReceive+0x82>
 8004836:	887b      	ldrh	r3, [r7, #2]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d103      	bne.n	8004844 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004842:	e14e      	b.n	8004ae2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b04      	cmp	r3, #4
 800484e:	d003      	beq.n	8004858 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2205      	movs	r2, #5
 8004854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	887a      	ldrh	r2, [r7, #2]
 8004868:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	887a      	ldrh	r2, [r7, #2]
 800486e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	887a      	ldrh	r2, [r7, #2]
 800487a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	887a      	ldrh	r2, [r7, #2]
 8004880:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b40      	cmp	r3, #64	; 0x40
 800489a:	d007      	beq.n	80048ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048b4:	d178      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_SPI_TransmitReceive+0x10a>
 80048be:	8b7b      	ldrh	r3, [r7, #26]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d166      	bne.n	8004992 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	881a      	ldrh	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	1c9a      	adds	r2, r3, #2
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048e8:	e053      	b.n	8004992 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d11b      	bne.n	8004930 <HAL_SPI_TransmitReceive+0x176>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d016      	beq.n	8004930 <HAL_SPI_TransmitReceive+0x176>
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	2b01      	cmp	r3, #1
 8004906:	d113      	bne.n	8004930 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	881a      	ldrh	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	1c9a      	adds	r2, r3, #2
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b01      	cmp	r3, #1
 800493c:	d119      	bne.n	8004972 <HAL_SPI_TransmitReceive+0x1b8>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d014      	beq.n	8004972 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	b292      	uxth	r2, r2
 8004954:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	1c9a      	adds	r2, r3, #2
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800496e:	2301      	movs	r3, #1
 8004970:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004972:	f7fd ffbf 	bl	80028f4 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800497e:	429a      	cmp	r2, r3
 8004980:	d807      	bhi.n	8004992 <HAL_SPI_TransmitReceive+0x1d8>
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004988:	d003      	beq.n	8004992 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004990:	e0a7      	b.n	8004ae2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1a6      	bne.n	80048ea <HAL_SPI_TransmitReceive+0x130>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1a1      	bne.n	80048ea <HAL_SPI_TransmitReceive+0x130>
 80049a6:	e07c      	b.n	8004aa2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <HAL_SPI_TransmitReceive+0x1fc>
 80049b0:	8b7b      	ldrh	r3, [r7, #26]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d16b      	bne.n	8004a8e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	330c      	adds	r3, #12
 80049c0:	7812      	ldrb	r2, [r2, #0]
 80049c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049dc:	e057      	b.n	8004a8e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d11c      	bne.n	8004a26 <HAL_SPI_TransmitReceive+0x26c>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d017      	beq.n	8004a26 <HAL_SPI_TransmitReceive+0x26c>
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d114      	bne.n	8004a26 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	7812      	ldrb	r2, [r2, #0]
 8004a08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d119      	bne.n	8004a68 <HAL_SPI_TransmitReceive+0x2ae>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d014      	beq.n	8004a68 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a64:	2301      	movs	r3, #1
 8004a66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a68:	f7fd ff44 	bl	80028f4 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d803      	bhi.n	8004a80 <HAL_SPI_TransmitReceive+0x2c6>
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7e:	d102      	bne.n	8004a86 <HAL_SPI_TransmitReceive+0x2cc>
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d103      	bne.n	8004a8e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a8c:	e029      	b.n	8004ae2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1a2      	bne.n	80049de <HAL_SPI_TransmitReceive+0x224>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d19d      	bne.n	80049de <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f8b2 	bl	8004c10 <SPI_EndRxTxTransaction>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d006      	beq.n	8004ac0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004abe:	e010      	b.n	8004ae2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10b      	bne.n	8004ae0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	e000      	b.n	8004ae2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ae0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004af2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3730      	adds	r7, #48	; 0x30
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b10:	f7fd fef0 	bl	80028f4 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b20:	f7fd fee8 	bl	80028f4 <HAL_GetTick>
 8004b24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b26:	4b39      	ldr	r3, [pc, #228]	; (8004c0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	015b      	lsls	r3, r3, #5
 8004b2c:	0d1b      	lsrs	r3, r3, #20
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	fb02 f303 	mul.w	r3, r2, r3
 8004b34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b36:	e054      	b.n	8004be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3e:	d050      	beq.n	8004be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b40:	f7fd fed8 	bl	80028f4 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	69fa      	ldr	r2, [r7, #28]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d902      	bls.n	8004b56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d13d      	bne.n	8004bd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b6e:	d111      	bne.n	8004b94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b78:	d004      	beq.n	8004b84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b82:	d107      	bne.n	8004b94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b9c:	d10f      	bne.n	8004bbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e017      	b.n	8004c02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4013      	ands	r3, r2
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	bf0c      	ite	eq
 8004bf2:	2301      	moveq	r3, #1
 8004bf4:	2300      	movne	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d19b      	bne.n	8004b38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3720      	adds	r7, #32
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000000 	.word	0x20000000

08004c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	; (8004c8c <SPI_EndRxTxTransaction+0x7c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1b      	ldr	r2, [pc, #108]	; (8004c90 <SPI_EndRxTxTransaction+0x80>)
 8004c22:	fba2 2303 	umull	r2, r3, r2, r3
 8004c26:	0d5b      	lsrs	r3, r3, #21
 8004c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c2c:	fb02 f303 	mul.w	r3, r2, r3
 8004c30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c3a:	d112      	bne.n	8004c62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2200      	movs	r2, #0
 8004c44:	2180      	movs	r1, #128	; 0x80
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff ff5a 	bl	8004b00 <SPI_WaitFlagStateUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d016      	beq.n	8004c80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c56:	f043 0220 	orr.w	r2, r3, #32
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e00f      	b.n	8004c82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c78:	2b80      	cmp	r3, #128	; 0x80
 8004c7a:	d0f2      	beq.n	8004c62 <SPI_EndRxTxTransaction+0x52>
 8004c7c:	e000      	b.n	8004c80 <SPI_EndRxTxTransaction+0x70>
        break;
 8004c7e:	bf00      	nop
  }

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000000 	.word	0x20000000
 8004c90:	165e9f81 	.word	0x165e9f81

08004c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e041      	b.n	8004d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f839 	bl	8004d32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	f000 f9ca 	bl	800506c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
	...

08004d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d001      	beq.n	8004d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e044      	b.n	8004dea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1e      	ldr	r2, [pc, #120]	; (8004df8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d018      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x6c>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8a:	d013      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x6c>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a1a      	ldr	r2, [pc, #104]	; (8004dfc <HAL_TIM_Base_Start_IT+0xb4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00e      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x6c>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a19      	ldr	r2, [pc, #100]	; (8004e00 <HAL_TIM_Base_Start_IT+0xb8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d009      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x6c>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <HAL_TIM_Base_Start_IT+0xbc>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x6c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a16      	ldr	r2, [pc, #88]	; (8004e08 <HAL_TIM_Base_Start_IT+0xc0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d111      	bne.n	8004dd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b06      	cmp	r3, #6
 8004dc4:	d010      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd6:	e007      	b.n	8004de8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40010000 	.word	0x40010000
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800
 8004e04:	40000c00 	.word	0x40000c00
 8004e08:	40014000 	.word	0x40014000

08004e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d122      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d11b      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0202 	mvn.w	r2, #2
 8004e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f8ee 	bl	8005030 <HAL_TIM_IC_CaptureCallback>
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f8e0 	bl	800501c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f8f1 	bl	8005044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d122      	bne.n	8004ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d11b      	bne.n	8004ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0204 	mvn.w	r2, #4
 8004e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2202      	movs	r2, #2
 8004e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f8c4 	bl	8005030 <HAL_TIM_IC_CaptureCallback>
 8004ea8:	e005      	b.n	8004eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f8b6 	bl	800501c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f8c7 	bl	8005044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d122      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d11b      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0208 	mvn.w	r2, #8
 8004ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2204      	movs	r2, #4
 8004ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f89a 	bl	8005030 <HAL_TIM_IC_CaptureCallback>
 8004efc:	e005      	b.n	8004f0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f88c 	bl	800501c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f89d 	bl	8005044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b10      	cmp	r3, #16
 8004f1c:	d122      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d11b      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0210 	mvn.w	r2, #16
 8004f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2208      	movs	r2, #8
 8004f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f870 	bl	8005030 <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f862 	bl	800501c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f873 	bl	8005044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d10e      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d107      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0201 	mvn.w	r2, #1
 8004f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fd f87c 	bl	8002088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9a:	2b80      	cmp	r3, #128	; 0x80
 8004f9c:	d10e      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa8:	2b80      	cmp	r3, #128	; 0x80
 8004faa:	d107      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f8e2 	bl	8005180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d10e      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd4:	2b40      	cmp	r3, #64	; 0x40
 8004fd6:	d107      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f838 	bl	8005058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	d10e      	bne.n	8005014 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0320 	and.w	r3, r3, #32
 8005000:	2b20      	cmp	r3, #32
 8005002:	d107      	bne.n	8005014 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0220 	mvn.w	r2, #32
 800500c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8ac 	bl	800516c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005014:	bf00      	nop
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a34      	ldr	r2, [pc, #208]	; (8005150 <TIM_Base_SetConfig+0xe4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00f      	beq.n	80050a4 <TIM_Base_SetConfig+0x38>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508a:	d00b      	beq.n	80050a4 <TIM_Base_SetConfig+0x38>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a31      	ldr	r2, [pc, #196]	; (8005154 <TIM_Base_SetConfig+0xe8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d007      	beq.n	80050a4 <TIM_Base_SetConfig+0x38>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a30      	ldr	r2, [pc, #192]	; (8005158 <TIM_Base_SetConfig+0xec>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d003      	beq.n	80050a4 <TIM_Base_SetConfig+0x38>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a2f      	ldr	r2, [pc, #188]	; (800515c <TIM_Base_SetConfig+0xf0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d108      	bne.n	80050b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a25      	ldr	r2, [pc, #148]	; (8005150 <TIM_Base_SetConfig+0xe4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d01b      	beq.n	80050f6 <TIM_Base_SetConfig+0x8a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c4:	d017      	beq.n	80050f6 <TIM_Base_SetConfig+0x8a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a22      	ldr	r2, [pc, #136]	; (8005154 <TIM_Base_SetConfig+0xe8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d013      	beq.n	80050f6 <TIM_Base_SetConfig+0x8a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a21      	ldr	r2, [pc, #132]	; (8005158 <TIM_Base_SetConfig+0xec>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00f      	beq.n	80050f6 <TIM_Base_SetConfig+0x8a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a20      	ldr	r2, [pc, #128]	; (800515c <TIM_Base_SetConfig+0xf0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00b      	beq.n	80050f6 <TIM_Base_SetConfig+0x8a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <TIM_Base_SetConfig+0xf4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d007      	beq.n	80050f6 <TIM_Base_SetConfig+0x8a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a1e      	ldr	r2, [pc, #120]	; (8005164 <TIM_Base_SetConfig+0xf8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d003      	beq.n	80050f6 <TIM_Base_SetConfig+0x8a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a1d      	ldr	r2, [pc, #116]	; (8005168 <TIM_Base_SetConfig+0xfc>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d108      	bne.n	8005108 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a08      	ldr	r2, [pc, #32]	; (8005150 <TIM_Base_SetConfig+0xe4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d103      	bne.n	800513c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	615a      	str	r2, [r3, #20]
}
 8005142:	bf00      	nop
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40010000 	.word	0x40010000
 8005154:	40000400 	.word	0x40000400
 8005158:	40000800 	.word	0x40000800
 800515c:	40000c00 	.word	0x40000c00
 8005160:	40014000 	.word	0x40014000
 8005164:	40014400 	.word	0x40014400
 8005168:	40014800 	.word	0x40014800

0800516c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e03f      	b.n	8005226 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fd f8cc 	bl	8002358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2224      	movs	r2, #36	; 0x24
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fddf 	bl	8005d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695a      	ldr	r2, [r3, #20]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800520c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b08a      	sub	sp, #40	; 0x28
 8005232:	af02      	add	r7, sp, #8
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	603b      	str	r3, [r7, #0]
 800523a:	4613      	mov	r3, r2
 800523c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b20      	cmp	r3, #32
 800524c:	d17c      	bne.n	8005348 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <HAL_UART_Transmit+0x2c>
 8005254:	88fb      	ldrh	r3, [r7, #6]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e075      	b.n	800534a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005264:	2b01      	cmp	r3, #1
 8005266:	d101      	bne.n	800526c <HAL_UART_Transmit+0x3e>
 8005268:	2302      	movs	r3, #2
 800526a:	e06e      	b.n	800534a <HAL_UART_Transmit+0x11c>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2221      	movs	r2, #33	; 0x21
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005282:	f7fd fb37 	bl	80028f4 <HAL_GetTick>
 8005286:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	88fa      	ldrh	r2, [r7, #6]
 800528c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	88fa      	ldrh	r2, [r7, #6]
 8005292:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529c:	d108      	bne.n	80052b0 <HAL_UART_Transmit+0x82>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d104      	bne.n	80052b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	e003      	b.n	80052b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052c0:	e02a      	b.n	8005318 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2200      	movs	r2, #0
 80052ca:	2180      	movs	r1, #128	; 0x80
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 fb27 	bl	8005920 <UART_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e036      	b.n	800534a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10b      	bne.n	80052fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	3302      	adds	r3, #2
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	e007      	b.n	800530a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	781a      	ldrb	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	3301      	adds	r3, #1
 8005308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800530e:	b29b      	uxth	r3, r3
 8005310:	3b01      	subs	r3, #1
 8005312:	b29a      	uxth	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800531c:	b29b      	uxth	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1cf      	bne.n	80052c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2200      	movs	r2, #0
 800532a:	2140      	movs	r1, #64	; 0x40
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 faf7 	bl	8005920 <UART_WaitOnFlagUntilTimeout>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e006      	b.n	800534a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	e000      	b.n	800534a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005348:	2302      	movs	r3, #2
  }
}
 800534a:	4618      	mov	r0, r3
 800534c:	3720      	adds	r7, #32
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	60b9      	str	r1, [r7, #8]
 800535c:	4613      	mov	r3, r2
 800535e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b20      	cmp	r3, #32
 800536a:	d11d      	bne.n	80053a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_UART_Receive_IT+0x26>
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e016      	b.n	80053aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <HAL_UART_Receive_IT+0x38>
 8005386:	2302      	movs	r3, #2
 8005388:	e00f      	b.n	80053aa <HAL_UART_Receive_IT+0x58>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005398:	88fb      	ldrh	r3, [r7, #6]
 800539a:	461a      	mov	r2, r3
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fb08 	bl	80059b4 <UART_Start_Receive_IT>
 80053a4:	4603      	mov	r3, r0
 80053a6:	e000      	b.n	80053aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80053a8:	2302      	movs	r3, #2
  }
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	4613      	mov	r3, r2
 80053be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d11d      	bne.n	8005408 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <HAL_UART_Receive_DMA+0x26>
 80053d2:	88fb      	ldrh	r3, [r7, #6]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e016      	b.n	800540a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <HAL_UART_Receive_DMA+0x38>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e00f      	b.n	800540a <HAL_UART_Receive_DMA+0x58>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80053f8:	88fb      	ldrh	r3, [r7, #6]
 80053fa:	461a      	mov	r2, r3
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 fb12 	bl	8005a28 <UART_Start_Receive_DMA>
 8005404:	4603      	mov	r3, r0
 8005406:	e000      	b.n	800540a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005408:	2302      	movs	r3, #2
  }
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	; 0x28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005434:	2300      	movs	r3, #0
 8005436:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10d      	bne.n	8005466 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_UART_IRQHandler+0x52>
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fc05 	bl	8005c6e <UART_Receive_IT>
      return;
 8005464:	e17c      	b.n	8005760 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 80b1 	beq.w	80055d0 <HAL_UART_IRQHandler+0x1bc>
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d105      	bne.n	8005484 <HAL_UART_IRQHandler+0x70>
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 80a6 	beq.w	80055d0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <HAL_UART_IRQHandler+0x90>
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d005      	beq.n	80054a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	f043 0201 	orr.w	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <HAL_UART_IRQHandler+0xb0>
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	f043 0202 	orr.w	r2, r3, #2
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <HAL_UART_IRQHandler+0xd0>
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	f043 0204 	orr.w	r2, r3, #4
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00f      	beq.n	800550e <HAL_UART_IRQHandler+0xfa>
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	f003 0320 	and.w	r3, r3, #32
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d104      	bne.n	8005502 <HAL_UART_IRQHandler+0xee>
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f043 0208 	orr.w	r2, r3, #8
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 811f 	beq.w	8005756 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	f003 0320 	and.w	r3, r3, #32
 800551e:	2b00      	cmp	r3, #0
 8005520:	d007      	beq.n	8005532 <HAL_UART_IRQHandler+0x11e>
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fb9e 	bl	8005c6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553c:	2b40      	cmp	r3, #64	; 0x40
 800553e:	bf0c      	ite	eq
 8005540:	2301      	moveq	r3, #1
 8005542:	2300      	movne	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b00      	cmp	r3, #0
 8005552:	d102      	bne.n	800555a <HAL_UART_IRQHandler+0x146>
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d031      	beq.n	80055be <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fade 	bl	8005b1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d123      	bne.n	80055b6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695a      	ldr	r2, [r3, #20]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800557c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005582:	2b00      	cmp	r3, #0
 8005584:	d013      	beq.n	80055ae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	4a77      	ldr	r2, [pc, #476]	; (8005768 <HAL_UART_IRQHandler+0x354>)
 800558c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	4618      	mov	r0, r3
 8005594:	f7fd fe74 	bl	8003280 <HAL_DMA_Abort_IT>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d016      	beq.n	80055cc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055a8:	4610      	mov	r0, r2
 80055aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ac:	e00e      	b.n	80055cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f8f0 	bl	8005794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b4:	e00a      	b.n	80055cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f8ec 	bl	8005794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055bc:	e006      	b.n	80055cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f8e8 	bl	8005794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80055ca:	e0c4      	b.n	8005756 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055cc:	bf00      	nop
    return;
 80055ce:	e0c2      	b.n	8005756 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	f040 80a2 	bne.w	800571e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 809c 	beq.w	800571e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 8096 	beq.w	800571e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005612:	2b40      	cmp	r3, #64	; 0x40
 8005614:	d14f      	bne.n	80056b6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005620:	8a3b      	ldrh	r3, [r7, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 8099 	beq.w	800575a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800562c:	8a3a      	ldrh	r2, [r7, #16]
 800562e:	429a      	cmp	r2, r3
 8005630:	f080 8093 	bcs.w	800575a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8a3a      	ldrh	r2, [r7, #16]
 8005638:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005644:	d02b      	beq.n	800569e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005654:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695a      	ldr	r2, [r3, #20]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0201 	bic.w	r2, r2, #1
 8005664:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695a      	ldr	r2, [r3, #20]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005674:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0210 	bic.w	r2, r2, #16
 8005692:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	4618      	mov	r0, r3
 800569a:	f7fd fd81 	bl	80031a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	4619      	mov	r1, r3
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f87a 	bl	80057a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80056b4:	e051      	b.n	800575a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056be:	b29b      	uxth	r3, r3
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d047      	beq.n	800575e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80056ce:	8a7b      	ldrh	r3, [r7, #18]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d044      	beq.n	800575e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80056e2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0201 	bic.w	r2, r2, #1
 80056f2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0210 	bic.w	r2, r2, #16
 8005710:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005712:	8a7b      	ldrh	r3, [r7, #18]
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f846 	bl	80057a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800571c:	e01f      	b.n	800575e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005724:	2b00      	cmp	r3, #0
 8005726:	d008      	beq.n	800573a <HAL_UART_IRQHandler+0x326>
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fa33 	bl	8005b9e <UART_Transmit_IT>
    return;
 8005738:	e012      	b.n	8005760 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00d      	beq.n	8005760 <HAL_UART_IRQHandler+0x34c>
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d008      	beq.n	8005760 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fa75 	bl	8005c3e <UART_EndTransmit_IT>
    return;
 8005754:	e004      	b.n	8005760 <HAL_UART_IRQHandler+0x34c>
    return;
 8005756:	bf00      	nop
 8005758:	e002      	b.n	8005760 <HAL_UART_IRQHandler+0x34c>
      return;
 800575a:	bf00      	nop
 800575c:	e000      	b.n	8005760 <HAL_UART_IRQHandler+0x34c>
      return;
 800575e:	bf00      	nop
  }
}
 8005760:	3728      	adds	r7, #40	; 0x28
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	08005b77 	.word	0x08005b77

0800576c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d12a      	bne.n	8005832 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68da      	ldr	r2, [r3, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057f0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695a      	ldr	r2, [r3, #20]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695a      	ldr	r2, [r3, #20]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005810:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	2b01      	cmp	r3, #1
 8005820:	d107      	bne.n	8005832 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0210 	bic.w	r2, r2, #16
 8005830:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	2b01      	cmp	r3, #1
 8005838:	d106      	bne.n	8005848 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800583e:	4619      	mov	r1, r3
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7ff ffb1 	bl	80057a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005846:	e002      	b.n	800584e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f7fb fc49 	bl	80010e0 <HAL_UART_RxCpltCallback>
}
 800584e:	bf00      	nop
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005868:	2b01      	cmp	r3, #1
 800586a:	d108      	bne.n	800587e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005870:	085b      	lsrs	r3, r3, #1
 8005872:	b29b      	uxth	r3, r3
 8005874:	4619      	mov	r1, r3
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7ff ff96 	bl	80057a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800587c:	e002      	b.n	8005884 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f7ff ff7e 	bl	8005780 <HAL_UART_RxHalfCpltCallback>
}
 8005884:	bf00      	nop
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a8:	2b80      	cmp	r3, #128	; 0x80
 80058aa:	bf0c      	ite	eq
 80058ac:	2301      	moveq	r3, #1
 80058ae:	2300      	movne	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b21      	cmp	r3, #33	; 0x21
 80058be:	d108      	bne.n	80058d2 <UART_DMAError+0x46>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2200      	movs	r2, #0
 80058ca:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80058cc:	68b8      	ldr	r0, [r7, #8]
 80058ce:	f000 f90f 	bl	8005af0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058dc:	2b40      	cmp	r3, #64	; 0x40
 80058de:	bf0c      	ite	eq
 80058e0:	2301      	moveq	r3, #1
 80058e2:	2300      	movne	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b22      	cmp	r3, #34	; 0x22
 80058f2:	d108      	bne.n	8005906 <UART_DMAError+0x7a>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2200      	movs	r2, #0
 80058fe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005900:	68b8      	ldr	r0, [r7, #8]
 8005902:	f000 f90b 	bl	8005b1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f043 0210 	orr.w	r2, r3, #16
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005912:	68b8      	ldr	r0, [r7, #8]
 8005914:	f7ff ff3e 	bl	8005794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005918:	bf00      	nop
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	4613      	mov	r3, r2
 800592e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005930:	e02c      	b.n	800598c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005938:	d028      	beq.n	800598c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <UART_WaitOnFlagUntilTimeout+0x30>
 8005940:	f7fc ffd8 	bl	80028f4 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	429a      	cmp	r2, r3
 800594e:	d21d      	bcs.n	800598c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800595e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695a      	ldr	r2, [r3, #20]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0201 	bic.w	r2, r2, #1
 800596e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e00f      	b.n	80059ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	4013      	ands	r3, r2
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	429a      	cmp	r2, r3
 800599a:	bf0c      	ite	eq
 800599c:	2301      	moveq	r3, #1
 800599e:	2300      	movne	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d0c3      	beq.n	8005932 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	4613      	mov	r3, r2
 80059c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	88fa      	ldrh	r2, [r7, #6]
 80059cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	88fa      	ldrh	r2, [r7, #6]
 80059d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2222      	movs	r2, #34	; 0x22
 80059de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059f8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695a      	ldr	r2, [r3, #20]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0201 	orr.w	r2, r2, #1
 8005a08:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0220 	orr.w	r2, r2, #32
 8005a18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	4613      	mov	r3, r2
 8005a34:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	88fa      	ldrh	r2, [r7, #6]
 8005a40:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2222      	movs	r2, #34	; 0x22
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	4a23      	ldr	r2, [pc, #140]	; (8005ae4 <UART_Start_Receive_DMA+0xbc>)
 8005a56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	4a22      	ldr	r2, [pc, #136]	; (8005ae8 <UART_Start_Receive_DMA+0xc0>)
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	4a21      	ldr	r2, [pc, #132]	; (8005aec <UART_Start_Receive_DMA+0xc4>)
 8005a66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005a70:	f107 0308 	add.w	r3, r7, #8
 8005a74:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	4619      	mov	r1, r3
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	88fb      	ldrh	r3, [r7, #6]
 8005a88:	f7fd fb32 	bl	80030f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	613b      	str	r3, [r7, #16]
 8005aa0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ab8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	695a      	ldr	r2, [r3, #20]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f042 0201 	orr.w	r2, r2, #1
 8005ac8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ad8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	080057c1 	.word	0x080057c1
 8005ae8:	08005857 	.word	0x08005857
 8005aec:	0800588d 	.word	0x0800588d

08005af0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005b06:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b32:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695a      	ldr	r2, [r3, #20]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0201 	bic.w	r2, r2, #1
 8005b42:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d107      	bne.n	8005b5c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0210 	bic.w	r2, r2, #16
 8005b5a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f7ff fdff 	bl	8005794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b96:	bf00      	nop
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b21      	cmp	r3, #33	; 0x21
 8005bb0:	d13e      	bne.n	8005c30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bba:	d114      	bne.n	8005be6 <UART_Transmit_IT+0x48>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d110      	bne.n	8005be6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	1c9a      	adds	r2, r3, #2
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	621a      	str	r2, [r3, #32]
 8005be4:	e008      	b.n	8005bf8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	1c59      	adds	r1, r3, #1
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6211      	str	r1, [r2, #32]
 8005bf0:	781a      	ldrb	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	4619      	mov	r1, r3
 8005c06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10f      	bne.n	8005c2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e000      	b.n	8005c32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c30:	2302      	movs	r3, #2
  }
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff fd84 	bl	800576c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b22      	cmp	r3, #34	; 0x22
 8005c80:	f040 8087 	bne.w	8005d92 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8c:	d117      	bne.n	8005cbe <UART_Receive_IT+0x50>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d113      	bne.n	8005cbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb6:	1c9a      	adds	r2, r3, #2
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	629a      	str	r2, [r3, #40]	; 0x28
 8005cbc:	e026      	b.n	8005d0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd0:	d007      	beq.n	8005ce2 <UART_Receive_IT+0x74>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <UART_Receive_IT+0x82>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	701a      	strb	r2, [r3, #0]
 8005cee:	e008      	b.n	8005d02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d136      	bne.n	8005d8e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0220 	bic.w	r2, r2, #32
 8005d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695a      	ldr	r2, [r3, #20]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0201 	bic.w	r2, r2, #1
 8005d4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d10e      	bne.n	8005d7e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0210 	bic.w	r2, r2, #16
 8005d6e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d74:	4619      	mov	r1, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff fd16 	bl	80057a8 <HAL_UARTEx_RxEventCallback>
 8005d7c:	e002      	b.n	8005d84 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fb f9ae 	bl	80010e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e002      	b.n	8005d94 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e000      	b.n	8005d94 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005d92:	2302      	movs	r3, #2
  }
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da0:	b09f      	sub	sp, #124	; 0x7c
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db2:	68d9      	ldr	r1, [r3, #12]
 8005db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	ea40 0301 	orr.w	r3, r0, r1
 8005dbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005de0:	f021 010c 	bic.w	r1, r1, #12
 8005de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dea:	430b      	orrs	r3, r1
 8005dec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfa:	6999      	ldr	r1, [r3, #24]
 8005dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	ea40 0301 	orr.w	r3, r0, r1
 8005e04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4bc5      	ldr	r3, [pc, #788]	; (8006120 <UART_SetConfig+0x384>)
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d004      	beq.n	8005e1a <UART_SetConfig+0x7e>
 8005e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	4bc3      	ldr	r3, [pc, #780]	; (8006124 <UART_SetConfig+0x388>)
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d103      	bne.n	8005e22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e1a:	f7fe fbff 	bl	800461c <HAL_RCC_GetPCLK2Freq>
 8005e1e:	6778      	str	r0, [r7, #116]	; 0x74
 8005e20:	e002      	b.n	8005e28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e22:	f7fe fbe7 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 8005e26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e30:	f040 80b6 	bne.w	8005fa0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e36:	461c      	mov	r4, r3
 8005e38:	f04f 0500 	mov.w	r5, #0
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	462b      	mov	r3, r5
 8005e40:	1891      	adds	r1, r2, r2
 8005e42:	6439      	str	r1, [r7, #64]	; 0x40
 8005e44:	415b      	adcs	r3, r3
 8005e46:	647b      	str	r3, [r7, #68]	; 0x44
 8005e48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e4c:	1912      	adds	r2, r2, r4
 8005e4e:	eb45 0303 	adc.w	r3, r5, r3
 8005e52:	f04f 0000 	mov.w	r0, #0
 8005e56:	f04f 0100 	mov.w	r1, #0
 8005e5a:	00d9      	lsls	r1, r3, #3
 8005e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e60:	00d0      	lsls	r0, r2, #3
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	1911      	adds	r1, r2, r4
 8005e68:	6639      	str	r1, [r7, #96]	; 0x60
 8005e6a:	416b      	adcs	r3, r5
 8005e6c:	667b      	str	r3, [r7, #100]	; 0x64
 8005e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	461a      	mov	r2, r3
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	1891      	adds	r1, r2, r2
 8005e7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e7c:	415b      	adcs	r3, r3
 8005e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e88:	f7fa ff06 	bl	8000c98 <__aeabi_uldivmod>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4ba5      	ldr	r3, [pc, #660]	; (8006128 <UART_SetConfig+0x38c>)
 8005e92:	fba3 2302 	umull	r2, r3, r3, r2
 8005e96:	095b      	lsrs	r3, r3, #5
 8005e98:	011e      	lsls	r6, r3, #4
 8005e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e9c:	461c      	mov	r4, r3
 8005e9e:	f04f 0500 	mov.w	r5, #0
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	462b      	mov	r3, r5
 8005ea6:	1891      	adds	r1, r2, r2
 8005ea8:	6339      	str	r1, [r7, #48]	; 0x30
 8005eaa:	415b      	adcs	r3, r3
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
 8005eae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005eb2:	1912      	adds	r2, r2, r4
 8005eb4:	eb45 0303 	adc.w	r3, r5, r3
 8005eb8:	f04f 0000 	mov.w	r0, #0
 8005ebc:	f04f 0100 	mov.w	r1, #0
 8005ec0:	00d9      	lsls	r1, r3, #3
 8005ec2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ec6:	00d0      	lsls	r0, r2, #3
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	1911      	adds	r1, r2, r4
 8005ece:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ed0:	416b      	adcs	r3, r5
 8005ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	1891      	adds	r1, r2, r2
 8005ee0:	62b9      	str	r1, [r7, #40]	; 0x28
 8005ee2:	415b      	adcs	r3, r3
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ee6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005eea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005eee:	f7fa fed3 	bl	8000c98 <__aeabi_uldivmod>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4b8c      	ldr	r3, [pc, #560]	; (8006128 <UART_SetConfig+0x38c>)
 8005ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	2164      	movs	r1, #100	; 0x64
 8005f00:	fb01 f303 	mul.w	r3, r1, r3
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	3332      	adds	r3, #50	; 0x32
 8005f0a:	4a87      	ldr	r2, [pc, #540]	; (8006128 <UART_SetConfig+0x38c>)
 8005f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f18:	441e      	add	r6, r3
 8005f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f04f 0100 	mov.w	r1, #0
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	1894      	adds	r4, r2, r2
 8005f28:	623c      	str	r4, [r7, #32]
 8005f2a:	415b      	adcs	r3, r3
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f32:	1812      	adds	r2, r2, r0
 8005f34:	eb41 0303 	adc.w	r3, r1, r3
 8005f38:	f04f 0400 	mov.w	r4, #0
 8005f3c:	f04f 0500 	mov.w	r5, #0
 8005f40:	00dd      	lsls	r5, r3, #3
 8005f42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f46:	00d4      	lsls	r4, r2, #3
 8005f48:	4622      	mov	r2, r4
 8005f4a:	462b      	mov	r3, r5
 8005f4c:	1814      	adds	r4, r2, r0
 8005f4e:	653c      	str	r4, [r7, #80]	; 0x50
 8005f50:	414b      	adcs	r3, r1
 8005f52:	657b      	str	r3, [r7, #84]	; 0x54
 8005f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	1891      	adds	r1, r2, r2
 8005f60:	61b9      	str	r1, [r7, #24]
 8005f62:	415b      	adcs	r3, r3
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f6e:	f7fa fe93 	bl	8000c98 <__aeabi_uldivmod>
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4b6c      	ldr	r3, [pc, #432]	; (8006128 <UART_SetConfig+0x38c>)
 8005f78:	fba3 1302 	umull	r1, r3, r3, r2
 8005f7c:	095b      	lsrs	r3, r3, #5
 8005f7e:	2164      	movs	r1, #100	; 0x64
 8005f80:	fb01 f303 	mul.w	r3, r1, r3
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	3332      	adds	r3, #50	; 0x32
 8005f8a:	4a67      	ldr	r2, [pc, #412]	; (8006128 <UART_SetConfig+0x38c>)
 8005f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f90:	095b      	lsrs	r3, r3, #5
 8005f92:	f003 0207 	and.w	r2, r3, #7
 8005f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4432      	add	r2, r6
 8005f9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f9e:	e0b9      	b.n	8006114 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa2:	461c      	mov	r4, r3
 8005fa4:	f04f 0500 	mov.w	r5, #0
 8005fa8:	4622      	mov	r2, r4
 8005faa:	462b      	mov	r3, r5
 8005fac:	1891      	adds	r1, r2, r2
 8005fae:	6139      	str	r1, [r7, #16]
 8005fb0:	415b      	adcs	r3, r3
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fb8:	1912      	adds	r2, r2, r4
 8005fba:	eb45 0303 	adc.w	r3, r5, r3
 8005fbe:	f04f 0000 	mov.w	r0, #0
 8005fc2:	f04f 0100 	mov.w	r1, #0
 8005fc6:	00d9      	lsls	r1, r3, #3
 8005fc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fcc:	00d0      	lsls	r0, r2, #3
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	eb12 0804 	adds.w	r8, r2, r4
 8005fd6:	eb43 0905 	adc.w	r9, r3, r5
 8005fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f04f 0100 	mov.w	r1, #0
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	008b      	lsls	r3, r1, #2
 8005fee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ff2:	0082      	lsls	r2, r0, #2
 8005ff4:	4640      	mov	r0, r8
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	f7fa fe4e 	bl	8000c98 <__aeabi_uldivmod>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4b49      	ldr	r3, [pc, #292]	; (8006128 <UART_SetConfig+0x38c>)
 8006002:	fba3 2302 	umull	r2, r3, r3, r2
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	011e      	lsls	r6, r3, #4
 800600a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800600c:	4618      	mov	r0, r3
 800600e:	f04f 0100 	mov.w	r1, #0
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	1894      	adds	r4, r2, r2
 8006018:	60bc      	str	r4, [r7, #8]
 800601a:	415b      	adcs	r3, r3
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006022:	1812      	adds	r2, r2, r0
 8006024:	eb41 0303 	adc.w	r3, r1, r3
 8006028:	f04f 0400 	mov.w	r4, #0
 800602c:	f04f 0500 	mov.w	r5, #0
 8006030:	00dd      	lsls	r5, r3, #3
 8006032:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006036:	00d4      	lsls	r4, r2, #3
 8006038:	4622      	mov	r2, r4
 800603a:	462b      	mov	r3, r5
 800603c:	1814      	adds	r4, r2, r0
 800603e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006040:	414b      	adcs	r3, r1
 8006042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	4618      	mov	r0, r3
 800604a:	f04f 0100 	mov.w	r1, #0
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	008b      	lsls	r3, r1, #2
 8006058:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800605c:	0082      	lsls	r2, r0, #2
 800605e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006062:	f7fa fe19 	bl	8000c98 <__aeabi_uldivmod>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4b2f      	ldr	r3, [pc, #188]	; (8006128 <UART_SetConfig+0x38c>)
 800606c:	fba3 1302 	umull	r1, r3, r3, r2
 8006070:	095b      	lsrs	r3, r3, #5
 8006072:	2164      	movs	r1, #100	; 0x64
 8006074:	fb01 f303 	mul.w	r3, r1, r3
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	3332      	adds	r3, #50	; 0x32
 800607e:	4a2a      	ldr	r2, [pc, #168]	; (8006128 <UART_SetConfig+0x38c>)
 8006080:	fba2 2303 	umull	r2, r3, r2, r3
 8006084:	095b      	lsrs	r3, r3, #5
 8006086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800608a:	441e      	add	r6, r3
 800608c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800608e:	4618      	mov	r0, r3
 8006090:	f04f 0100 	mov.w	r1, #0
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	1894      	adds	r4, r2, r2
 800609a:	603c      	str	r4, [r7, #0]
 800609c:	415b      	adcs	r3, r3
 800609e:	607b      	str	r3, [r7, #4]
 80060a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a4:	1812      	adds	r2, r2, r0
 80060a6:	eb41 0303 	adc.w	r3, r1, r3
 80060aa:	f04f 0400 	mov.w	r4, #0
 80060ae:	f04f 0500 	mov.w	r5, #0
 80060b2:	00dd      	lsls	r5, r3, #3
 80060b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060b8:	00d4      	lsls	r4, r2, #3
 80060ba:	4622      	mov	r2, r4
 80060bc:	462b      	mov	r3, r5
 80060be:	eb12 0a00 	adds.w	sl, r2, r0
 80060c2:	eb43 0b01 	adc.w	fp, r3, r1
 80060c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f04f 0100 	mov.w	r1, #0
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	008b      	lsls	r3, r1, #2
 80060da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060de:	0082      	lsls	r2, r0, #2
 80060e0:	4650      	mov	r0, sl
 80060e2:	4659      	mov	r1, fp
 80060e4:	f7fa fdd8 	bl	8000c98 <__aeabi_uldivmod>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <UART_SetConfig+0x38c>)
 80060ee:	fba3 1302 	umull	r1, r3, r3, r2
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	2164      	movs	r1, #100	; 0x64
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	3332      	adds	r3, #50	; 0x32
 8006100:	4a09      	ldr	r2, [pc, #36]	; (8006128 <UART_SetConfig+0x38c>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	f003 020f 	and.w	r2, r3, #15
 800610c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4432      	add	r2, r6
 8006112:	609a      	str	r2, [r3, #8]
}
 8006114:	bf00      	nop
 8006116:	377c      	adds	r7, #124	; 0x7c
 8006118:	46bd      	mov	sp, r7
 800611a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611e:	bf00      	nop
 8006120:	40011000 	.word	0x40011000
 8006124:	40011400 	.word	0x40011400
 8006128:	51eb851f 	.word	0x51eb851f

0800612c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006130:	4904      	ldr	r1, [pc, #16]	; (8006144 <MX_FATFS_Init+0x18>)
 8006132:	4805      	ldr	r0, [pc, #20]	; (8006148 <MX_FATFS_Init+0x1c>)
 8006134:	f000 fd94 	bl	8006c60 <FATFS_LinkDriver>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	4b03      	ldr	r3, [pc, #12]	; (800614c <MX_FATFS_Init+0x20>)
 800613e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006140:	bf00      	nop
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20009120 	.word	0x20009120
 8006148:	2000000c 	.word	0x2000000c
 800614c:	20009124 	.word	0x20009124

08006150 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	4603      	mov	r3, r0
 8006158:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 800615a:	79fb      	ldrb	r3, [r7, #7]
 800615c:	4618      	mov	r0, r3
 800615e:	f000 f9df 	bl	8006520 <USER_SPI_initialize>
 8006162:	4603      	mov	r3, r0
 8006164:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	4603      	mov	r3, r0
 8006176:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fabc 	bl	80066f8 <USER_SPI_status>
 8006180:	4603      	mov	r3, r0
 8006182:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	607a      	str	r2, [r7, #4]
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800619c:	7bf8      	ldrb	r0, [r7, #15]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	f000 fabe 	bl	8006724 <USER_SPI_read>
 80061a8:	4603      	mov	r3, r0
 80061aa:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	607a      	str	r2, [r7, #4]
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	4603      	mov	r3, r0
 80061c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 80061c4:	7bf8      	ldrb	r0, [r7, #15]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	68b9      	ldr	r1, [r7, #8]
 80061cc:	f000 fb10 	bl	80067f0 <USER_SPI_write>
 80061d0:	4603      	mov	r3, r0
 80061d2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	603a      	str	r2, [r7, #0]
 80061e6:	71fb      	strb	r3, [r7, #7]
 80061e8:	460b      	mov	r3, r1
 80061ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	73fb      	strb	r3, [r7, #15]
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80061f0:	79fb      	ldrb	r3, [r7, #7]
 80061f2:	79b9      	ldrb	r1, [r7, #6]
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fb76 	bl	80068e8 <USER_SPI_ioctl>
 80061fc:	4603      	mov	r3, r0
 80061fe:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006210:	f7fc fb70 	bl	80028f4 <HAL_GetTick>
 8006214:	4603      	mov	r3, r0
 8006216:	4a04      	ldr	r2, [pc, #16]	; (8006228 <SPI_Timer_On+0x20>)
 8006218:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800621a:	4a04      	ldr	r2, [pc, #16]	; (800622c <SPI_Timer_On+0x24>)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6013      	str	r3, [r2, #0]
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	2000958c 	.word	0x2000958c
 800622c:	20009590 	.word	0x20009590

08006230 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006234:	f7fc fb5e 	bl	80028f4 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	4b06      	ldr	r3, [pc, #24]	; (8006254 <SPI_Timer_Status+0x24>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	1ad2      	subs	r2, r2, r3
 8006240:	4b05      	ldr	r3, [pc, #20]	; (8006258 <SPI_Timer_Status+0x28>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	429a      	cmp	r2, r3
 8006246:	bf34      	ite	cc
 8006248:	2301      	movcc	r3, #1
 800624a:	2300      	movcs	r3, #0
 800624c:	b2db      	uxtb	r3, r3
}
 800624e:	4618      	mov	r0, r3
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	2000958c 	.word	0x2000958c
 8006258:	20009590 	.word	0x20009590

0800625c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af02      	add	r7, sp, #8
 8006262:	4603      	mov	r3, r0
 8006264:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006266:	f107 020f 	add.w	r2, r7, #15
 800626a:	1df9      	adds	r1, r7, #7
 800626c:	2332      	movs	r3, #50	; 0x32
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	2301      	movs	r3, #1
 8006272:	4804      	ldr	r0, [pc, #16]	; (8006284 <xchg_spi+0x28>)
 8006274:	f7fe faa1 	bl	80047ba <HAL_SPI_TransmitReceive>
    return rxDat;
 8006278:	7bfb      	ldrb	r3, [r7, #15]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20008bb8 	.word	0x20008bb8

08006288 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006288:	b590      	push	{r4, r7, lr}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	e00a      	b.n	80062ae <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	18d4      	adds	r4, r2, r3
 800629e:	20ff      	movs	r0, #255	; 0xff
 80062a0:	f7ff ffdc 	bl	800625c <xchg_spi>
 80062a4:	4603      	mov	r3, r0
 80062a6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3301      	adds	r3, #1
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d3f0      	bcc.n	8006298 <rcvr_spi_multi+0x10>
	}
}
 80062b6:	bf00      	nop
 80062b8:	bf00      	nop
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd90      	pop	{r4, r7, pc}

080062c0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	e009      	b.n	80062e4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4413      	add	r3, r2
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff ffbf 	bl	800625c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3301      	adds	r3, #1
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d3f1      	bcc.n	80062d0 <xmit_spi_multi+0x10>
	}
}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b086      	sub	sp, #24
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80062fe:	f7fc faf9 	bl	80028f4 <HAL_GetTick>
 8006302:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006308:	20ff      	movs	r0, #255	; 0xff
 800630a:	f7ff ffa7 	bl	800625c <xchg_spi>
 800630e:	4603      	mov	r3, r0
 8006310:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006312:	7bfb      	ldrb	r3, [r7, #15]
 8006314:	2bff      	cmp	r3, #255	; 0xff
 8006316:	d007      	beq.n	8006328 <wait_ready+0x32>
 8006318:	f7fc faec 	bl	80028f4 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	429a      	cmp	r2, r3
 8006326:	d8ef      	bhi.n	8006308 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	2bff      	cmp	r3, #255	; 0xff
 800632c:	bf0c      	ite	eq
 800632e:	2301      	moveq	r3, #1
 8006330:	2300      	movne	r3, #0
 8006332:	b2db      	uxtb	r3, r3
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006340:	2201      	movs	r2, #1
 8006342:	2110      	movs	r1, #16
 8006344:	4803      	ldr	r0, [pc, #12]	; (8006354 <despiselect+0x18>)
 8006346:	f7fd fbab 	bl	8003aa0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800634a:	20ff      	movs	r0, #255	; 0xff
 800634c:	f7ff ff86 	bl	800625c <xchg_spi>

}
 8006350:	bf00      	nop
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40020800 	.word	0x40020800

08006358 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800635c:	2200      	movs	r2, #0
 800635e:	2110      	movs	r1, #16
 8006360:	4809      	ldr	r0, [pc, #36]	; (8006388 <spiselect+0x30>)
 8006362:	f7fd fb9d 	bl	8003aa0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006366:	20ff      	movs	r0, #255	; 0xff
 8006368:	f7ff ff78 	bl	800625c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800636c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006370:	f7ff ffc1 	bl	80062f6 <wait_ready>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <spiselect+0x26>
 800637a:	2301      	movs	r3, #1
 800637c:	e002      	b.n	8006384 <spiselect+0x2c>

	despiselect();
 800637e:	f7ff ffdd 	bl	800633c <despiselect>
	return 0;	/* Timeout */
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	bd80      	pop	{r7, pc}
 8006388:	40020800 	.word	0x40020800

0800638c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006396:	20c8      	movs	r0, #200	; 0xc8
 8006398:	f7ff ff36 	bl	8006208 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800639c:	20ff      	movs	r0, #255	; 0xff
 800639e:	f7ff ff5d 	bl	800625c <xchg_spi>
 80063a2:	4603      	mov	r3, r0
 80063a4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
 80063a8:	2bff      	cmp	r3, #255	; 0xff
 80063aa:	d104      	bne.n	80063b6 <rcvr_datablock+0x2a>
 80063ac:	f7ff ff40 	bl	8006230 <SPI_Timer_Status>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1f2      	bne.n	800639c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	2bfe      	cmp	r3, #254	; 0xfe
 80063ba:	d001      	beq.n	80063c0 <rcvr_datablock+0x34>
 80063bc:	2300      	movs	r3, #0
 80063be:	e00a      	b.n	80063d6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7ff ff60 	bl	8006288 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80063c8:	20ff      	movs	r0, #255	; 0xff
 80063ca:	f7ff ff47 	bl	800625c <xchg_spi>
 80063ce:	20ff      	movs	r0, #255	; 0xff
 80063d0:	f7ff ff44 	bl	800625c <xchg_spi>

	return 1;						/* Function succeeded */
 80063d4:	2301      	movs	r3, #1
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b084      	sub	sp, #16
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	460b      	mov	r3, r1
 80063e8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80063ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063ee:	f7ff ff82 	bl	80062f6 <wait_ready>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <xmit_datablock+0x1e>
 80063f8:	2300      	movs	r3, #0
 80063fa:	e01e      	b.n	800643a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80063fc:	78fb      	ldrb	r3, [r7, #3]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff ff2c 	bl	800625c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	2bfd      	cmp	r3, #253	; 0xfd
 8006408:	d016      	beq.n	8006438 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800640a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff ff56 	bl	80062c0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006414:	20ff      	movs	r0, #255	; 0xff
 8006416:	f7ff ff21 	bl	800625c <xchg_spi>
 800641a:	20ff      	movs	r0, #255	; 0xff
 800641c:	f7ff ff1e 	bl	800625c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006420:	20ff      	movs	r0, #255	; 0xff
 8006422:	f7ff ff1b 	bl	800625c <xchg_spi>
 8006426:	4603      	mov	r3, r0
 8006428:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800642a:	7bfb      	ldrb	r3, [r7, #15]
 800642c:	f003 031f 	and.w	r3, r3, #31
 8006430:	2b05      	cmp	r3, #5
 8006432:	d001      	beq.n	8006438 <xmit_datablock+0x5a>
 8006434:	2300      	movs	r3, #0
 8006436:	e000      	b.n	800643a <xmit_datablock+0x5c>
	}
	return 1;
 8006438:	2301      	movs	r3, #1
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	4603      	mov	r3, r0
 800644a:	6039      	str	r1, [r7, #0]
 800644c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800644e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006452:	2b00      	cmp	r3, #0
 8006454:	da0e      	bge.n	8006474 <send_cmd+0x32>
		cmd &= 0x7F;
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800645c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800645e:	2100      	movs	r1, #0
 8006460:	2037      	movs	r0, #55	; 0x37
 8006462:	f7ff ffee 	bl	8006442 <send_cmd>
 8006466:	4603      	mov	r3, r0
 8006468:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800646a:	7bbb      	ldrb	r3, [r7, #14]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d901      	bls.n	8006474 <send_cmd+0x32>
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	e051      	b.n	8006518 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006474:	79fb      	ldrb	r3, [r7, #7]
 8006476:	2b0c      	cmp	r3, #12
 8006478:	d008      	beq.n	800648c <send_cmd+0x4a>
		despiselect();
 800647a:	f7ff ff5f 	bl	800633c <despiselect>
		if (!spiselect()) return 0xFF;
 800647e:	f7ff ff6b 	bl	8006358 <spiselect>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <send_cmd+0x4a>
 8006488:	23ff      	movs	r3, #255	; 0xff
 800648a:	e045      	b.n	8006518 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006492:	b2db      	uxtb	r3, r3
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff fee1 	bl	800625c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	0e1b      	lsrs	r3, r3, #24
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff fedb 	bl	800625c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	0c1b      	lsrs	r3, r3, #16
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff fed5 	bl	800625c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	0a1b      	lsrs	r3, r3, #8
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff fecf 	bl	800625c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff feca 	bl	800625c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80064c8:	2301      	movs	r3, #1
 80064ca:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <send_cmd+0x94>
 80064d2:	2395      	movs	r3, #149	; 0x95
 80064d4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d101      	bne.n	80064e0 <send_cmd+0x9e>
 80064dc:	2387      	movs	r3, #135	; 0x87
 80064de:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7ff feba 	bl	800625c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80064e8:	79fb      	ldrb	r3, [r7, #7]
 80064ea:	2b0c      	cmp	r3, #12
 80064ec:	d102      	bne.n	80064f4 <send_cmd+0xb2>
 80064ee:	20ff      	movs	r0, #255	; 0xff
 80064f0:	f7ff feb4 	bl	800625c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80064f4:	230a      	movs	r3, #10
 80064f6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80064f8:	20ff      	movs	r0, #255	; 0xff
 80064fa:	f7ff feaf 	bl	800625c <xchg_spi>
 80064fe:	4603      	mov	r3, r0
 8006500:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006502:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006506:	2b00      	cmp	r3, #0
 8006508:	da05      	bge.n	8006516 <send_cmd+0xd4>
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	3b01      	subs	r3, #1
 800650e:	73fb      	strb	r3, [r7, #15]
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1f0      	bne.n	80064f8 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006516:	7bbb      	ldrb	r3, [r7, #14]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006520:	b590      	push	{r4, r7, lr}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	4603      	mov	r3, r0
 8006528:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <USER_SPI_initialize+0x14>
 8006530:	2301      	movs	r3, #1
 8006532:	e0d6      	b.n	80066e2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006534:	4b6d      	ldr	r3, [pc, #436]	; (80066ec <USER_SPI_initialize+0x1cc>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <USER_SPI_initialize+0x2a>
 8006542:	4b6a      	ldr	r3, [pc, #424]	; (80066ec <USER_SPI_initialize+0x1cc>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	e0cb      	b.n	80066e2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800654a:	4b69      	ldr	r3, [pc, #420]	; (80066f0 <USER_SPI_initialize+0x1d0>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006554:	4b66      	ldr	r3, [pc, #408]	; (80066f0 <USER_SPI_initialize+0x1d0>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800655c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800655e:	230a      	movs	r3, #10
 8006560:	73fb      	strb	r3, [r7, #15]
 8006562:	e005      	b.n	8006570 <USER_SPI_initialize+0x50>
 8006564:	20ff      	movs	r0, #255	; 0xff
 8006566:	f7ff fe79 	bl	800625c <xchg_spi>
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	3b01      	subs	r3, #1
 800656e:	73fb      	strb	r3, [r7, #15]
 8006570:	7bfb      	ldrb	r3, [r7, #15]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1f6      	bne.n	8006564 <USER_SPI_initialize+0x44>

	ty = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800657a:	2100      	movs	r1, #0
 800657c:	2000      	movs	r0, #0
 800657e:	f7ff ff60 	bl	8006442 <send_cmd>
 8006582:	4603      	mov	r3, r0
 8006584:	2b01      	cmp	r3, #1
 8006586:	f040 808b 	bne.w	80066a0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800658a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800658e:	f7ff fe3b 	bl	8006208 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006592:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006596:	2008      	movs	r0, #8
 8006598:	f7ff ff53 	bl	8006442 <send_cmd>
 800659c:	4603      	mov	r3, r0
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d151      	bne.n	8006646 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80065a2:	2300      	movs	r3, #0
 80065a4:	73fb      	strb	r3, [r7, #15]
 80065a6:	e00d      	b.n	80065c4 <USER_SPI_initialize+0xa4>
 80065a8:	7bfc      	ldrb	r4, [r7, #15]
 80065aa:	20ff      	movs	r0, #255	; 0xff
 80065ac:	f7ff fe56 	bl	800625c <xchg_spi>
 80065b0:	4603      	mov	r3, r0
 80065b2:	461a      	mov	r2, r3
 80065b4:	f107 0310 	add.w	r3, r7, #16
 80065b8:	4423      	add	r3, r4
 80065ba:	f803 2c08 	strb.w	r2, [r3, #-8]
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	3301      	adds	r3, #1
 80065c2:	73fb      	strb	r3, [r7, #15]
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d9ee      	bls.n	80065a8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80065ca:	7abb      	ldrb	r3, [r7, #10]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d167      	bne.n	80066a0 <USER_SPI_initialize+0x180>
 80065d0:	7afb      	ldrb	r3, [r7, #11]
 80065d2:	2baa      	cmp	r3, #170	; 0xaa
 80065d4:	d164      	bne.n	80066a0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80065d6:	bf00      	nop
 80065d8:	f7ff fe2a 	bl	8006230 <SPI_Timer_Status>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d007      	beq.n	80065f2 <USER_SPI_initialize+0xd2>
 80065e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80065e6:	20a9      	movs	r0, #169	; 0xa9
 80065e8:	f7ff ff2b 	bl	8006442 <send_cmd>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1f2      	bne.n	80065d8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80065f2:	f7ff fe1d 	bl	8006230 <SPI_Timer_Status>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d051      	beq.n	80066a0 <USER_SPI_initialize+0x180>
 80065fc:	2100      	movs	r1, #0
 80065fe:	203a      	movs	r0, #58	; 0x3a
 8006600:	f7ff ff1f 	bl	8006442 <send_cmd>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d14a      	bne.n	80066a0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800660a:	2300      	movs	r3, #0
 800660c:	73fb      	strb	r3, [r7, #15]
 800660e:	e00d      	b.n	800662c <USER_SPI_initialize+0x10c>
 8006610:	7bfc      	ldrb	r4, [r7, #15]
 8006612:	20ff      	movs	r0, #255	; 0xff
 8006614:	f7ff fe22 	bl	800625c <xchg_spi>
 8006618:	4603      	mov	r3, r0
 800661a:	461a      	mov	r2, r3
 800661c:	f107 0310 	add.w	r3, r7, #16
 8006620:	4423      	add	r3, r4
 8006622:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	3301      	adds	r3, #1
 800662a:	73fb      	strb	r3, [r7, #15]
 800662c:	7bfb      	ldrb	r3, [r7, #15]
 800662e:	2b03      	cmp	r3, #3
 8006630:	d9ee      	bls.n	8006610 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006632:	7a3b      	ldrb	r3, [r7, #8]
 8006634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <USER_SPI_initialize+0x120>
 800663c:	230c      	movs	r3, #12
 800663e:	e000      	b.n	8006642 <USER_SPI_initialize+0x122>
 8006640:	2304      	movs	r3, #4
 8006642:	737b      	strb	r3, [r7, #13]
 8006644:	e02c      	b.n	80066a0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006646:	2100      	movs	r1, #0
 8006648:	20a9      	movs	r0, #169	; 0xa9
 800664a:	f7ff fefa 	bl	8006442 <send_cmd>
 800664e:	4603      	mov	r3, r0
 8006650:	2b01      	cmp	r3, #1
 8006652:	d804      	bhi.n	800665e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006654:	2302      	movs	r3, #2
 8006656:	737b      	strb	r3, [r7, #13]
 8006658:	23a9      	movs	r3, #169	; 0xa9
 800665a:	73bb      	strb	r3, [r7, #14]
 800665c:	e003      	b.n	8006666 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800665e:	2301      	movs	r3, #1
 8006660:	737b      	strb	r3, [r7, #13]
 8006662:	2301      	movs	r3, #1
 8006664:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006666:	bf00      	nop
 8006668:	f7ff fde2 	bl	8006230 <SPI_Timer_Status>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d007      	beq.n	8006682 <USER_SPI_initialize+0x162>
 8006672:	7bbb      	ldrb	r3, [r7, #14]
 8006674:	2100      	movs	r1, #0
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff fee3 	bl	8006442 <send_cmd>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1f2      	bne.n	8006668 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006682:	f7ff fdd5 	bl	8006230 <SPI_Timer_Status>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d007      	beq.n	800669c <USER_SPI_initialize+0x17c>
 800668c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006690:	2010      	movs	r0, #16
 8006692:	f7ff fed6 	bl	8006442 <send_cmd>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <USER_SPI_initialize+0x180>
				ty = 0;
 800669c:	2300      	movs	r3, #0
 800669e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80066a0:	4a14      	ldr	r2, [pc, #80]	; (80066f4 <USER_SPI_initialize+0x1d4>)
 80066a2:	7b7b      	ldrb	r3, [r7, #13]
 80066a4:	7013      	strb	r3, [r2, #0]
	despiselect();
 80066a6:	f7ff fe49 	bl	800633c <despiselect>

	if (ty) {			/* OK */
 80066aa:	7b7b      	ldrb	r3, [r7, #13]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d012      	beq.n	80066d6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80066b0:	4b0f      	ldr	r3, [pc, #60]	; (80066f0 <USER_SPI_initialize+0x1d0>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80066ba:	4b0d      	ldr	r3, [pc, #52]	; (80066f0 <USER_SPI_initialize+0x1d0>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0218 	orr.w	r2, r2, #24
 80066c2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80066c4:	4b09      	ldr	r3, [pc, #36]	; (80066ec <USER_SPI_initialize+0x1cc>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	f023 0301 	bic.w	r3, r3, #1
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	4b06      	ldr	r3, [pc, #24]	; (80066ec <USER_SPI_initialize+0x1cc>)
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	e002      	b.n	80066dc <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80066d6:	4b05      	ldr	r3, [pc, #20]	; (80066ec <USER_SPI_initialize+0x1cc>)
 80066d8:	2201      	movs	r2, #1
 80066da:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80066dc:	4b03      	ldr	r3, [pc, #12]	; (80066ec <USER_SPI_initialize+0x1cc>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	b2db      	uxtb	r3, r3
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd90      	pop	{r4, r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20000020 	.word	0x20000020
 80066f0:	20008bb8 	.word	0x20008bb8
 80066f4:	200002a8 	.word	0x200002a8

080066f8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	4603      	mov	r3, r0
 8006700:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <USER_SPI_status+0x14>
 8006708:	2301      	movs	r3, #1
 800670a:	e002      	b.n	8006712 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800670c:	4b04      	ldr	r3, [pc, #16]	; (8006720 <USER_SPI_status+0x28>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	b2db      	uxtb	r3, r3
}
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	20000020 	.word	0x20000020

08006724 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	607a      	str	r2, [r7, #4]
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	4603      	mov	r3, r0
 8006732:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <USER_SPI_read+0x1c>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <USER_SPI_read+0x20>
 8006740:	2304      	movs	r3, #4
 8006742:	e04d      	b.n	80067e0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006744:	4b28      	ldr	r3, [pc, #160]	; (80067e8 <USER_SPI_read+0xc4>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	b2db      	uxtb	r3, r3
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <USER_SPI_read+0x32>
 8006752:	2303      	movs	r3, #3
 8006754:	e044      	b.n	80067e0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006756:	4b25      	ldr	r3, [pc, #148]	; (80067ec <USER_SPI_read+0xc8>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	f003 0308 	and.w	r3, r3, #8
 800675e:	2b00      	cmp	r3, #0
 8006760:	d102      	bne.n	8006768 <USER_SPI_read+0x44>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	025b      	lsls	r3, r3, #9
 8006766:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d111      	bne.n	8006792 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	2011      	movs	r0, #17
 8006772:	f7ff fe66 	bl	8006442 <send_cmd>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d129      	bne.n	80067d0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800677c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006780:	68b8      	ldr	r0, [r7, #8]
 8006782:	f7ff fe03 	bl	800638c <rcvr_datablock>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d021      	beq.n	80067d0 <USER_SPI_read+0xac>
			count = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	e01e      	b.n	80067d0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	2012      	movs	r0, #18
 8006796:	f7ff fe54 	bl	8006442 <send_cmd>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d117      	bne.n	80067d0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80067a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067a4:	68b8      	ldr	r0, [r7, #8]
 80067a6:	f7ff fdf1 	bl	800638c <rcvr_datablock>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <USER_SPI_read+0xa2>
				buff += 512;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80067b6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	603b      	str	r3, [r7, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1ed      	bne.n	80067a0 <USER_SPI_read+0x7c>
 80067c4:	e000      	b.n	80067c8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80067c6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80067c8:	2100      	movs	r1, #0
 80067ca:	200c      	movs	r0, #12
 80067cc:	f7ff fe39 	bl	8006442 <send_cmd>
		}
	}
	despiselect();
 80067d0:	f7ff fdb4 	bl	800633c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	bf14      	ite	ne
 80067da:	2301      	movne	r3, #1
 80067dc:	2300      	moveq	r3, #0
 80067de:	b2db      	uxtb	r3, r3
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20000020 	.word	0x20000020
 80067ec:	200002a8 	.word	0x200002a8

080067f0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	4603      	mov	r3, r0
 80067fe:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006800:	7bfb      	ldrb	r3, [r7, #15]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d102      	bne.n	800680c <USER_SPI_write+0x1c>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <USER_SPI_write+0x20>
 800680c:	2304      	movs	r3, #4
 800680e:	e063      	b.n	80068d8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006810:	4b33      	ldr	r3, [pc, #204]	; (80068e0 <USER_SPI_write+0xf0>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	b2db      	uxtb	r3, r3
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <USER_SPI_write+0x32>
 800681e:	2303      	movs	r3, #3
 8006820:	e05a      	b.n	80068d8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006822:	4b2f      	ldr	r3, [pc, #188]	; (80068e0 <USER_SPI_write+0xf0>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <USER_SPI_write+0x44>
 8006830:	2302      	movs	r3, #2
 8006832:	e051      	b.n	80068d8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006834:	4b2b      	ldr	r3, [pc, #172]	; (80068e4 <USER_SPI_write+0xf4>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	f003 0308 	and.w	r3, r3, #8
 800683c:	2b00      	cmp	r3, #0
 800683e:	d102      	bne.n	8006846 <USER_SPI_write+0x56>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	025b      	lsls	r3, r3, #9
 8006844:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d110      	bne.n	800686e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800684c:	6879      	ldr	r1, [r7, #4]
 800684e:	2018      	movs	r0, #24
 8006850:	f7ff fdf7 	bl	8006442 <send_cmd>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d136      	bne.n	80068c8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800685a:	21fe      	movs	r1, #254	; 0xfe
 800685c:	68b8      	ldr	r0, [r7, #8]
 800685e:	f7ff fdbe 	bl	80063de <xmit_datablock>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d02f      	beq.n	80068c8 <USER_SPI_write+0xd8>
			count = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	e02c      	b.n	80068c8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800686e:	4b1d      	ldr	r3, [pc, #116]	; (80068e4 <USER_SPI_write+0xf4>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	f003 0306 	and.w	r3, r3, #6
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <USER_SPI_write+0x92>
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	2097      	movs	r0, #151	; 0x97
 800687e:	f7ff fde0 	bl	8006442 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	2019      	movs	r0, #25
 8006886:	f7ff fddc 	bl	8006442 <send_cmd>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d11b      	bne.n	80068c8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006890:	21fc      	movs	r1, #252	; 0xfc
 8006892:	68b8      	ldr	r0, [r7, #8]
 8006894:	f7ff fda3 	bl	80063de <xmit_datablock>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <USER_SPI_write+0xc4>
				buff += 512;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80068a4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1ee      	bne.n	8006890 <USER_SPI_write+0xa0>
 80068b2:	e000      	b.n	80068b6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80068b4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80068b6:	21fd      	movs	r1, #253	; 0xfd
 80068b8:	2000      	movs	r0, #0
 80068ba:	f7ff fd90 	bl	80063de <xmit_datablock>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <USER_SPI_write+0xd8>
 80068c4:	2301      	movs	r3, #1
 80068c6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80068c8:	f7ff fd38 	bl	800633c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bf14      	ite	ne
 80068d2:	2301      	movne	r3, #1
 80068d4:	2300      	moveq	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	20000020 	.word	0x20000020
 80068e4:	200002a8 	.word	0x200002a8

080068e8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08c      	sub	sp, #48	; 0x30
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4603      	mov	r3, r0
 80068f0:	603a      	str	r2, [r7, #0]
 80068f2:	71fb      	strb	r3, [r7, #7]
 80068f4:	460b      	mov	r3, r1
 80068f6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80068f8:	79fb      	ldrb	r3, [r7, #7]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <USER_SPI_ioctl+0x1a>
 80068fe:	2304      	movs	r3, #4
 8006900:	e15a      	b.n	8006bb8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006902:	4baf      	ldr	r3, [pc, #700]	; (8006bc0 <USER_SPI_ioctl+0x2d8>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	b2db      	uxtb	r3, r3
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <USER_SPI_ioctl+0x2c>
 8006910:	2303      	movs	r3, #3
 8006912:	e151      	b.n	8006bb8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800691a:	79bb      	ldrb	r3, [r7, #6]
 800691c:	2b04      	cmp	r3, #4
 800691e:	f200 8136 	bhi.w	8006b8e <USER_SPI_ioctl+0x2a6>
 8006922:	a201      	add	r2, pc, #4	; (adr r2, 8006928 <USER_SPI_ioctl+0x40>)
 8006924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006928:	0800693d 	.word	0x0800693d
 800692c:	08006951 	.word	0x08006951
 8006930:	08006b8f 	.word	0x08006b8f
 8006934:	080069fd 	.word	0x080069fd
 8006938:	08006af3 	.word	0x08006af3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800693c:	f7ff fd0c 	bl	8006358 <spiselect>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 8127 	beq.w	8006b96 <USER_SPI_ioctl+0x2ae>
 8006948:	2300      	movs	r3, #0
 800694a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800694e:	e122      	b.n	8006b96 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006950:	2100      	movs	r1, #0
 8006952:	2009      	movs	r0, #9
 8006954:	f7ff fd75 	bl	8006442 <send_cmd>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	f040 811d 	bne.w	8006b9a <USER_SPI_ioctl+0x2b2>
 8006960:	f107 030c 	add.w	r3, r7, #12
 8006964:	2110      	movs	r1, #16
 8006966:	4618      	mov	r0, r3
 8006968:	f7ff fd10 	bl	800638c <rcvr_datablock>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 8113 	beq.w	8006b9a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006974:	7b3b      	ldrb	r3, [r7, #12]
 8006976:	099b      	lsrs	r3, r3, #6
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b01      	cmp	r3, #1
 800697c:	d111      	bne.n	80069a2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800697e:	7d7b      	ldrb	r3, [r7, #21]
 8006980:	461a      	mov	r2, r3
 8006982:	7d3b      	ldrb	r3, [r7, #20]
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	4413      	add	r3, r2
 8006988:	461a      	mov	r2, r3
 800698a:	7cfb      	ldrb	r3, [r7, #19]
 800698c:	041b      	lsls	r3, r3, #16
 800698e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006992:	4413      	add	r3, r2
 8006994:	3301      	adds	r3, #1
 8006996:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	029a      	lsls	r2, r3, #10
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	e028      	b.n	80069f4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80069a2:	7c7b      	ldrb	r3, [r7, #17]
 80069a4:	f003 030f 	and.w	r3, r3, #15
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	7dbb      	ldrb	r3, [r7, #22]
 80069ac:	09db      	lsrs	r3, r3, #7
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	4413      	add	r3, r2
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	7d7b      	ldrb	r3, [r7, #21]
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	f003 0306 	and.w	r3, r3, #6
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	4413      	add	r3, r2
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	3302      	adds	r3, #2
 80069c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80069ca:	7d3b      	ldrb	r3, [r7, #20]
 80069cc:	099b      	lsrs	r3, r3, #6
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	461a      	mov	r2, r3
 80069d2:	7cfb      	ldrb	r3, [r7, #19]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	441a      	add	r2, r3
 80069d8:	7cbb      	ldrb	r3, [r7, #18]
 80069da:	029b      	lsls	r3, r3, #10
 80069dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069e0:	4413      	add	r3, r2
 80069e2:	3301      	adds	r3, #1
 80069e4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80069e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80069ea:	3b09      	subs	r3, #9
 80069ec:	69fa      	ldr	r2, [r7, #28]
 80069ee:	409a      	lsls	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80069fa:	e0ce      	b.n	8006b9a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80069fc:	4b71      	ldr	r3, [pc, #452]	; (8006bc4 <USER_SPI_ioctl+0x2dc>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d031      	beq.n	8006a6c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006a08:	2100      	movs	r1, #0
 8006a0a:	208d      	movs	r0, #141	; 0x8d
 8006a0c:	f7ff fd19 	bl	8006442 <send_cmd>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f040 80c3 	bne.w	8006b9e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006a18:	20ff      	movs	r0, #255	; 0xff
 8006a1a:	f7ff fc1f 	bl	800625c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006a1e:	f107 030c 	add.w	r3, r7, #12
 8006a22:	2110      	movs	r1, #16
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7ff fcb1 	bl	800638c <rcvr_datablock>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80b6 	beq.w	8006b9e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006a32:	2330      	movs	r3, #48	; 0x30
 8006a34:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006a38:	e007      	b.n	8006a4a <USER_SPI_ioctl+0x162>
 8006a3a:	20ff      	movs	r0, #255	; 0xff
 8006a3c:	f7ff fc0e 	bl	800625c <xchg_spi>
 8006a40:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a44:	3b01      	subs	r3, #1
 8006a46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006a4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f3      	bne.n	8006a3a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006a52:	7dbb      	ldrb	r3, [r7, #22]
 8006a54:	091b      	lsrs	r3, r3, #4
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	2310      	movs	r3, #16
 8006a5c:	fa03 f202 	lsl.w	r2, r3, r2
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006a6a:	e098      	b.n	8006b9e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	2009      	movs	r0, #9
 8006a70:	f7ff fce7 	bl	8006442 <send_cmd>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f040 8091 	bne.w	8006b9e <USER_SPI_ioctl+0x2b6>
 8006a7c:	f107 030c 	add.w	r3, r7, #12
 8006a80:	2110      	movs	r1, #16
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff fc82 	bl	800638c <rcvr_datablock>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 8087 	beq.w	8006b9e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006a90:	4b4c      	ldr	r3, [pc, #304]	; (8006bc4 <USER_SPI_ioctl+0x2dc>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d012      	beq.n	8006ac2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006a9c:	7dbb      	ldrb	r3, [r7, #22]
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006aa4:	7dfa      	ldrb	r2, [r7, #23]
 8006aa6:	09d2      	lsrs	r2, r2, #7
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	4413      	add	r3, r2
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	7e7b      	ldrb	r3, [r7, #25]
 8006ab0:	099b      	lsrs	r3, r3, #6
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aba:	461a      	mov	r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	e013      	b.n	8006aea <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006ac2:	7dbb      	ldrb	r3, [r7, #22]
 8006ac4:	109b      	asrs	r3, r3, #2
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	f003 031f 	and.w	r3, r3, #31
 8006acc:	3301      	adds	r3, #1
 8006ace:	7dfa      	ldrb	r2, [r7, #23]
 8006ad0:	00d2      	lsls	r2, r2, #3
 8006ad2:	f002 0218 	and.w	r2, r2, #24
 8006ad6:	7df9      	ldrb	r1, [r7, #23]
 8006ad8:	0949      	lsrs	r1, r1, #5
 8006ada:	b2c9      	uxtb	r1, r1
 8006adc:	440a      	add	r2, r1
 8006ade:	3201      	adds	r2, #1
 8006ae0:	fb02 f303 	mul.w	r3, r2, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006af0:	e055      	b.n	8006b9e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006af2:	4b34      	ldr	r3, [pc, #208]	; (8006bc4 <USER_SPI_ioctl+0x2dc>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	f003 0306 	and.w	r3, r3, #6
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d051      	beq.n	8006ba2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006afe:	f107 020c 	add.w	r2, r7, #12
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	210b      	movs	r1, #11
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff feee 	bl	80068e8 <USER_SPI_ioctl>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d149      	bne.n	8006ba6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006b12:	7b3b      	ldrb	r3, [r7, #12]
 8006b14:	099b      	lsrs	r3, r3, #6
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d104      	bne.n	8006b26 <USER_SPI_ioctl+0x23e>
 8006b1c:	7dbb      	ldrb	r3, [r7, #22]
 8006b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d041      	beq.n	8006baa <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	623b      	str	r3, [r7, #32]
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006b36:	4b23      	ldr	r3, [pc, #140]	; (8006bc4 <USER_SPI_ioctl+0x2dc>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	f003 0308 	and.w	r3, r3, #8
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d105      	bne.n	8006b4e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	025b      	lsls	r3, r3, #9
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	025b      	lsls	r3, r3, #9
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006b4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b50:	2020      	movs	r0, #32
 8006b52:	f7ff fc76 	bl	8006442 <send_cmd>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d128      	bne.n	8006bae <USER_SPI_ioctl+0x2c6>
 8006b5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b5e:	2021      	movs	r0, #33	; 0x21
 8006b60:	f7ff fc6f 	bl	8006442 <send_cmd>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d121      	bne.n	8006bae <USER_SPI_ioctl+0x2c6>
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	2026      	movs	r0, #38	; 0x26
 8006b6e:	f7ff fc68 	bl	8006442 <send_cmd>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d11a      	bne.n	8006bae <USER_SPI_ioctl+0x2c6>
 8006b78:	f247 5030 	movw	r0, #30000	; 0x7530
 8006b7c:	f7ff fbbb 	bl	80062f6 <wait_ready>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d013      	beq.n	8006bae <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006b86:	2300      	movs	r3, #0
 8006b88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006b8c:	e00f      	b.n	8006bae <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006b8e:	2304      	movs	r3, #4
 8006b90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b94:	e00c      	b.n	8006bb0 <USER_SPI_ioctl+0x2c8>
		break;
 8006b96:	bf00      	nop
 8006b98:	e00a      	b.n	8006bb0 <USER_SPI_ioctl+0x2c8>
		break;
 8006b9a:	bf00      	nop
 8006b9c:	e008      	b.n	8006bb0 <USER_SPI_ioctl+0x2c8>
		break;
 8006b9e:	bf00      	nop
 8006ba0:	e006      	b.n	8006bb0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006ba2:	bf00      	nop
 8006ba4:	e004      	b.n	8006bb0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006ba6:	bf00      	nop
 8006ba8:	e002      	b.n	8006bb0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006baa:	bf00      	nop
 8006bac:	e000      	b.n	8006bb0 <USER_SPI_ioctl+0x2c8>
		break;
 8006bae:	bf00      	nop
	}

	despiselect();
 8006bb0:	f7ff fbc4 	bl	800633c <despiselect>

	return res;
 8006bb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3730      	adds	r7, #48	; 0x30
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	20000020 	.word	0x20000020
 8006bc4:	200002a8 	.word	0x200002a8

08006bc8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006bde:	4b1f      	ldr	r3, [pc, #124]	; (8006c5c <FATFS_LinkDriverEx+0x94>)
 8006be0:	7a5b      	ldrb	r3, [r3, #9]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d131      	bne.n	8006c4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006be8:	4b1c      	ldr	r3, [pc, #112]	; (8006c5c <FATFS_LinkDriverEx+0x94>)
 8006bea:	7a5b      	ldrb	r3, [r3, #9]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	461a      	mov	r2, r3
 8006bf0:	4b1a      	ldr	r3, [pc, #104]	; (8006c5c <FATFS_LinkDriverEx+0x94>)
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006bf6:	4b19      	ldr	r3, [pc, #100]	; (8006c5c <FATFS_LinkDriverEx+0x94>)
 8006bf8:	7a5b      	ldrb	r3, [r3, #9]
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	4a17      	ldr	r2, [pc, #92]	; (8006c5c <FATFS_LinkDriverEx+0x94>)
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006c06:	4b15      	ldr	r3, [pc, #84]	; (8006c5c <FATFS_LinkDriverEx+0x94>)
 8006c08:	7a5b      	ldrb	r3, [r3, #9]
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	4b13      	ldr	r3, [pc, #76]	; (8006c5c <FATFS_LinkDriverEx+0x94>)
 8006c10:	4413      	add	r3, r2
 8006c12:	79fa      	ldrb	r2, [r7, #7]
 8006c14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006c16:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <FATFS_LinkDriverEx+0x94>)
 8006c18:	7a5b      	ldrb	r3, [r3, #9]
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	b2d1      	uxtb	r1, r2
 8006c20:	4a0e      	ldr	r2, [pc, #56]	; (8006c5c <FATFS_LinkDriverEx+0x94>)
 8006c22:	7251      	strb	r1, [r2, #9]
 8006c24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006c26:	7dbb      	ldrb	r3, [r7, #22]
 8006c28:	3330      	adds	r3, #48	; 0x30
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	3301      	adds	r3, #1
 8006c34:	223a      	movs	r2, #58	; 0x3a
 8006c36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	3302      	adds	r3, #2
 8006c3c:	222f      	movs	r2, #47	; 0x2f
 8006c3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	3303      	adds	r3, #3
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	200002ac 	.word	0x200002ac

08006c60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff ffaa 	bl	8006bc8 <FATFS_LinkDriverEx>
 8006c74:	4603      	mov	r3, r0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <__NVIC_SetPriority>:
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	6039      	str	r1, [r7, #0]
 8006c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	db0a      	blt.n	8006caa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	490c      	ldr	r1, [pc, #48]	; (8006ccc <__NVIC_SetPriority+0x4c>)
 8006c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c9e:	0112      	lsls	r2, r2, #4
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	440b      	add	r3, r1
 8006ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006ca8:	e00a      	b.n	8006cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	4908      	ldr	r1, [pc, #32]	; (8006cd0 <__NVIC_SetPriority+0x50>)
 8006cb0:	79fb      	ldrb	r3, [r7, #7]
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	3b04      	subs	r3, #4
 8006cb8:	0112      	lsls	r2, r2, #4
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	440b      	add	r3, r1
 8006cbe:	761a      	strb	r2, [r3, #24]
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	e000e100 	.word	0xe000e100
 8006cd0:	e000ed00 	.word	0xe000ed00

08006cd4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006cd8:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <SysTick_Handler+0x1c>)
 8006cda:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006cdc:	f001 fe0a 	bl	80088f4 <xTaskGetSchedulerState>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d001      	beq.n	8006cea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006ce6:	f002 fbef 	bl	80094c8 <xPortSysTickHandler>
  }
}
 8006cea:	bf00      	nop
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	e000e010 	.word	0xe000e010

08006cf4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	f06f 0004 	mvn.w	r0, #4
 8006cfe:	f7ff ffbf 	bl	8006c80 <__NVIC_SetPriority>
#endif
}
 8006d02:	bf00      	nop
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d0e:	f3ef 8305 	mrs	r3, IPSR
 8006d12:	603b      	str	r3, [r7, #0]
  return(result);
 8006d14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006d1a:	f06f 0305 	mvn.w	r3, #5
 8006d1e:	607b      	str	r3, [r7, #4]
 8006d20:	e00c      	b.n	8006d3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d22:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <osKernelInitialize+0x44>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d105      	bne.n	8006d36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d2a:	4b08      	ldr	r3, [pc, #32]	; (8006d4c <osKernelInitialize+0x44>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	607b      	str	r3, [r7, #4]
 8006d34:	e002      	b.n	8006d3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006d36:	f04f 33ff 	mov.w	r3, #4294967295
 8006d3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d3c:	687b      	ldr	r3, [r7, #4]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	200002b8 	.word	0x200002b8

08006d50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d56:	f3ef 8305 	mrs	r3, IPSR
 8006d5a:	603b      	str	r3, [r7, #0]
  return(result);
 8006d5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006d62:	f06f 0305 	mvn.w	r3, #5
 8006d66:	607b      	str	r3, [r7, #4]
 8006d68:	e010      	b.n	8006d8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	; (8006d98 <osKernelStart+0x48>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d109      	bne.n	8006d86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d72:	f7ff ffbf 	bl	8006cf4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d76:	4b08      	ldr	r3, [pc, #32]	; (8006d98 <osKernelStart+0x48>)
 8006d78:	2202      	movs	r2, #2
 8006d7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d7c:	f001 f972 	bl	8008064 <vTaskStartScheduler>
      stat = osOK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	607b      	str	r3, [r7, #4]
 8006d84:	e002      	b.n	8006d8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006d86:	f04f 33ff 	mov.w	r3, #4294967295
 8006d8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d8c:	687b      	ldr	r3, [r7, #4]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	200002b8 	.word	0x200002b8

08006d9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08e      	sub	sp, #56	; 0x38
 8006da0:	af04      	add	r7, sp, #16
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006da8:	2300      	movs	r3, #0
 8006daa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dac:	f3ef 8305 	mrs	r3, IPSR
 8006db0:	617b      	str	r3, [r7, #20]
  return(result);
 8006db2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d17e      	bne.n	8006eb6 <osThreadNew+0x11a>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d07b      	beq.n	8006eb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006dbe:	2380      	movs	r3, #128	; 0x80
 8006dc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006dc2:	2318      	movs	r3, #24
 8006dc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006dca:	f04f 33ff 	mov.w	r3, #4294967295
 8006dce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d045      	beq.n	8006e62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <osThreadNew+0x48>
        name = attr->name;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d008      	beq.n	8006e0a <osThreadNew+0x6e>
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	2b38      	cmp	r3, #56	; 0x38
 8006dfc:	d805      	bhi.n	8006e0a <osThreadNew+0x6e>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <osThreadNew+0x72>
        return (NULL);
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e054      	b.n	8006eb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	089b      	lsrs	r3, r3, #2
 8006e1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00e      	beq.n	8006e44 <osThreadNew+0xa8>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	2b5b      	cmp	r3, #91	; 0x5b
 8006e2c:	d90a      	bls.n	8006e44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d006      	beq.n	8006e44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d002      	beq.n	8006e44 <osThreadNew+0xa8>
        mem = 1;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	61bb      	str	r3, [r7, #24]
 8006e42:	e010      	b.n	8006e66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10c      	bne.n	8006e66 <osThreadNew+0xca>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d108      	bne.n	8006e66 <osThreadNew+0xca>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d104      	bne.n	8006e66 <osThreadNew+0xca>
          mem = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	e001      	b.n	8006e66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d110      	bne.n	8006e8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e74:	9202      	str	r2, [sp, #8]
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	6a3a      	ldr	r2, [r7, #32]
 8006e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 ff18 	bl	8007cb8 <xTaskCreateStatic>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	613b      	str	r3, [r7, #16]
 8006e8c:	e013      	b.n	8006eb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d110      	bne.n	8006eb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	f107 0310 	add.w	r3, r7, #16
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 ff63 	bl	8007d72 <xTaskCreate>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d001      	beq.n	8006eb6 <osThreadNew+0x11a>
            hTask = NULL;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006eb6:	693b      	ldr	r3, [r7, #16]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3728      	adds	r7, #40	; 0x28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ec8:	f3ef 8305 	mrs	r3, IPSR
 8006ecc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ece:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <osDelay+0x1c>
    stat = osErrorISR;
 8006ed4:	f06f 0305 	mvn.w	r3, #5
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	e007      	b.n	8006eec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <osDelay+0x2c>
      vTaskDelay(ticks);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 f888 	bl	8007ffc <vTaskDelay>
    }
  }

  return (stat);
 8006eec:	68fb      	ldr	r3, [r7, #12]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b088      	sub	sp, #32
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f02:	f3ef 8305 	mrs	r3, IPSR
 8006f06:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f08:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d174      	bne.n	8006ff8 <osMutexNew+0x102>
    if (attr != NULL) {
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <osMutexNew+0x26>
      type = attr->attr_bits;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	e001      	b.n	8006f20 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <osMutexNew+0x3a>
      rmtx = 1U;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	e001      	b.n	8006f34 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d15c      	bne.n	8006ff8 <osMutexNew+0x102>
      mem = -1;
 8006f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f42:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d015      	beq.n	8006f76 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d006      	beq.n	8006f60 <osMutexNew+0x6a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	2b4f      	cmp	r3, #79	; 0x4f
 8006f58:	d902      	bls.n	8006f60 <osMutexNew+0x6a>
          mem = 1;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	613b      	str	r3, [r7, #16]
 8006f5e:	e00c      	b.n	8006f7a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d108      	bne.n	8006f7a <osMutexNew+0x84>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d104      	bne.n	8006f7a <osMutexNew+0x84>
            mem = 0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	613b      	str	r3, [r7, #16]
 8006f74:	e001      	b.n	8006f7a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006f76:	2300      	movs	r3, #0
 8006f78:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d112      	bne.n	8006fa6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d007      	beq.n	8006f96 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	2004      	movs	r0, #4
 8006f8e:	f000 fa90 	bl	80074b2 <xQueueCreateMutexStatic>
 8006f92:	61f8      	str	r0, [r7, #28]
 8006f94:	e016      	b.n	8006fc4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	f000 fa88 	bl	80074b2 <xQueueCreateMutexStatic>
 8006fa2:	61f8      	str	r0, [r7, #28]
 8006fa4:	e00e      	b.n	8006fc4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10b      	bne.n	8006fc4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d004      	beq.n	8006fbc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006fb2:	2004      	movs	r0, #4
 8006fb4:	f000 fa65 	bl	8007482 <xQueueCreateMutex>
 8006fb8:	61f8      	str	r0, [r7, #28]
 8006fba:	e003      	b.n	8006fc4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	f000 fa60 	bl	8007482 <xQueueCreateMutex>
 8006fc2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00c      	beq.n	8006fe4 <osMutexNew+0xee>
        if (attr != NULL) {
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <osMutexNew+0xe2>
          name = attr->name;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	e001      	b.n	8006fdc <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006fdc:	68f9      	ldr	r1, [r7, #12]
 8006fde:	69f8      	ldr	r0, [r7, #28]
 8006fe0:	f000 fe0c 	bl	8007bfc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d006      	beq.n	8006ff8 <osMutexNew+0x102>
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	f043 0301 	orr.w	r3, r3, #1
 8006ff6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006ff8:	69fb      	ldr	r3, [r7, #28]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3720      	adds	r7, #32
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4a07      	ldr	r2, [pc, #28]	; (8007030 <vApplicationGetIdleTaskMemory+0x2c>)
 8007014:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	4a06      	ldr	r2, [pc, #24]	; (8007034 <vApplicationGetIdleTaskMemory+0x30>)
 800701a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2280      	movs	r2, #128	; 0x80
 8007020:	601a      	str	r2, [r3, #0]
}
 8007022:	bf00      	nop
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	200002bc 	.word	0x200002bc
 8007034:	20000318 	.word	0x20000318

08007038 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4a07      	ldr	r2, [pc, #28]	; (8007064 <vApplicationGetTimerTaskMemory+0x2c>)
 8007048:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	4a06      	ldr	r2, [pc, #24]	; (8007068 <vApplicationGetTimerTaskMemory+0x30>)
 800704e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007056:	601a      	str	r2, [r3, #0]
}
 8007058:	bf00      	nop
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	20000518 	.word	0x20000518
 8007068:	20000574 	.word	0x20000574

0800706c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f103 0208 	add.w	r2, r3, #8
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f04f 32ff 	mov.w	r2, #4294967295
 8007084:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f103 0208 	add.w	r2, r3, #8
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f103 0208 	add.w	r2, r3, #8
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070c6:	b480      	push	{r7}
 80070c8:	b085      	sub	sp, #20
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	601a      	str	r2, [r3, #0]
}
 8007102:	bf00      	nop
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800710e:	b480      	push	{r7}
 8007110:	b085      	sub	sp, #20
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007124:	d103      	bne.n	800712e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	e00c      	b.n	8007148 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3308      	adds	r3, #8
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	e002      	b.n	800713c <vListInsert+0x2e>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	429a      	cmp	r2, r3
 8007146:	d2f6      	bcs.n	8007136 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	601a      	str	r2, [r3, #0]
}
 8007174:	bf00      	nop
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6892      	ldr	r2, [r2, #8]
 8007196:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	6852      	ldr	r2, [r2, #4]
 80071a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d103      	bne.n	80071b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	1e5a      	subs	r2, r3, #1
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80071fa:	bf00      	nop
 80071fc:	e7fe      	b.n	80071fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071fe:	f002 f8d1 	bl	80093a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720a:	68f9      	ldr	r1, [r7, #12]
 800720c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800720e:	fb01 f303 	mul.w	r3, r1, r3
 8007212:	441a      	add	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722e:	3b01      	subs	r3, #1
 8007230:	68f9      	ldr	r1, [r7, #12]
 8007232:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007234:	fb01 f303 	mul.w	r3, r1, r3
 8007238:	441a      	add	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	22ff      	movs	r2, #255	; 0xff
 8007242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	22ff      	movs	r2, #255	; 0xff
 800724a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d114      	bne.n	800727e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d01a      	beq.n	8007292 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3310      	adds	r3, #16
 8007260:	4618      	mov	r0, r3
 8007262:	f001 f989 	bl	8008578 <xTaskRemoveFromEventList>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d012      	beq.n	8007292 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800726c:	4b0c      	ldr	r3, [pc, #48]	; (80072a0 <xQueueGenericReset+0xcc>)
 800726e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	e009      	b.n	8007292 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3310      	adds	r3, #16
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fef2 	bl	800706c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3324      	adds	r3, #36	; 0x24
 800728c:	4618      	mov	r0, r3
 800728e:	f7ff feed 	bl	800706c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007292:	f002 f8b7 	bl	8009404 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007296:	2301      	movs	r3, #1
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	e000ed04 	.word	0xe000ed04

080072a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08e      	sub	sp, #56	; 0x38
 80072a8:	af02      	add	r7, sp, #8
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10a      	bne.n	80072ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072ca:	bf00      	nop
 80072cc:	e7fe      	b.n	80072cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10a      	bne.n	80072ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072e6:	bf00      	nop
 80072e8:	e7fe      	b.n	80072e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <xQueueGenericCreateStatic+0x52>
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <xQueueGenericCreateStatic+0x56>
 80072f6:	2301      	movs	r3, #1
 80072f8:	e000      	b.n	80072fc <xQueueGenericCreateStatic+0x58>
 80072fa:	2300      	movs	r3, #0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10a      	bne.n	8007316 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	623b      	str	r3, [r7, #32]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d102      	bne.n	8007322 <xQueueGenericCreateStatic+0x7e>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <xQueueGenericCreateStatic+0x82>
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <xQueueGenericCreateStatic+0x84>
 8007326:	2300      	movs	r3, #0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10a      	bne.n	8007342 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	61fb      	str	r3, [r7, #28]
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007342:	2350      	movs	r3, #80	; 0x50
 8007344:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b50      	cmp	r3, #80	; 0x50
 800734a:	d00a      	beq.n	8007362 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	61bb      	str	r3, [r7, #24]
}
 800735e:	bf00      	nop
 8007360:	e7fe      	b.n	8007360 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007362:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00d      	beq.n	800738a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	2201      	movs	r2, #1
 8007372:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007376:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	4613      	mov	r3, r2
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	68b9      	ldr	r1, [r7, #8]
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 f83f 	bl	8007408 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800738c:	4618      	mov	r0, r3
 800738e:	3730      	adds	r7, #48	; 0x30
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007394:	b580      	push	{r7, lr}
 8007396:	b08a      	sub	sp, #40	; 0x28
 8007398:	af02      	add	r7, sp, #8
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	4613      	mov	r3, r2
 80073a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10a      	bne.n	80073be <xQueueGenericCreate+0x2a>
	__asm volatile
 80073a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	613b      	str	r3, [r7, #16]
}
 80073ba:	bf00      	nop
 80073bc:	e7fe      	b.n	80073bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	fb02 f303 	mul.w	r3, r2, r3
 80073c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	3350      	adds	r3, #80	; 0x50
 80073cc:	4618      	mov	r0, r3
 80073ce:	f002 f90b 	bl	80095e8 <pvPortMalloc>
 80073d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d011      	beq.n	80073fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	3350      	adds	r3, #80	; 0x50
 80073e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073ec:	79fa      	ldrb	r2, [r7, #7]
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	4613      	mov	r3, r2
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	68b9      	ldr	r1, [r7, #8]
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 f805 	bl	8007408 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073fe:	69bb      	ldr	r3, [r7, #24]
	}
 8007400:	4618      	mov	r0, r3
 8007402:	3720      	adds	r7, #32
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d103      	bne.n	8007424 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	601a      	str	r2, [r3, #0]
 8007422:	e002      	b.n	800742a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007436:	2101      	movs	r1, #1
 8007438:	69b8      	ldr	r0, [r7, #24]
 800743a:	f7ff fecb 	bl	80071d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	78fa      	ldrb	r2, [r7, #3]
 8007442:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007446:	bf00      	nop
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800744e:	b580      	push	{r7, lr}
 8007450:	b082      	sub	sp, #8
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00e      	beq.n	800747a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800746e:	2300      	movs	r3, #0
 8007470:	2200      	movs	r2, #0
 8007472:	2100      	movs	r1, #0
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f837 	bl	80074e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007482:	b580      	push	{r7, lr}
 8007484:	b086      	sub	sp, #24
 8007486:	af00      	add	r7, sp, #0
 8007488:	4603      	mov	r3, r0
 800748a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800748c:	2301      	movs	r3, #1
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	2300      	movs	r3, #0
 8007492:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	461a      	mov	r2, r3
 8007498:	6939      	ldr	r1, [r7, #16]
 800749a:	6978      	ldr	r0, [r7, #20]
 800749c:	f7ff ff7a 	bl	8007394 <xQueueGenericCreate>
 80074a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f7ff ffd3 	bl	800744e <prvInitialiseMutex>

		return xNewQueue;
 80074a8:	68fb      	ldr	r3, [r7, #12]
	}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b088      	sub	sp, #32
 80074b6:	af02      	add	r7, sp, #8
 80074b8:	4603      	mov	r3, r0
 80074ba:	6039      	str	r1, [r7, #0]
 80074bc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80074be:	2301      	movs	r3, #1
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	2300      	movs	r3, #0
 80074c4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2200      	movs	r2, #0
 80074ce:	6939      	ldr	r1, [r7, #16]
 80074d0:	6978      	ldr	r0, [r7, #20]
 80074d2:	f7ff fee7 	bl	80072a4 <xQueueGenericCreateStatic>
 80074d6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f7ff ffb8 	bl	800744e <prvInitialiseMutex>

		return xNewQueue;
 80074de:	68fb      	ldr	r3, [r7, #12]
	}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08e      	sub	sp, #56	; 0x38
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074f6:	2300      	movs	r3, #0
 80074f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10a      	bne.n	800751a <xQueueGenericSend+0x32>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d103      	bne.n	8007528 <xQueueGenericSend+0x40>
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <xQueueGenericSend+0x44>
 8007528:	2301      	movs	r3, #1
 800752a:	e000      	b.n	800752e <xQueueGenericSend+0x46>
 800752c:	2300      	movs	r3, #0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10a      	bne.n	8007548 <xQueueGenericSend+0x60>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007544:	bf00      	nop
 8007546:	e7fe      	b.n	8007546 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b02      	cmp	r3, #2
 800754c:	d103      	bne.n	8007556 <xQueueGenericSend+0x6e>
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007552:	2b01      	cmp	r3, #1
 8007554:	d101      	bne.n	800755a <xQueueGenericSend+0x72>
 8007556:	2301      	movs	r3, #1
 8007558:	e000      	b.n	800755c <xQueueGenericSend+0x74>
 800755a:	2300      	movs	r3, #0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <xQueueGenericSend+0x8e>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	623b      	str	r3, [r7, #32]
}
 8007572:	bf00      	nop
 8007574:	e7fe      	b.n	8007574 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007576:	f001 f9bd 	bl	80088f4 <xTaskGetSchedulerState>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d102      	bne.n	8007586 <xQueueGenericSend+0x9e>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <xQueueGenericSend+0xa2>
 8007586:	2301      	movs	r3, #1
 8007588:	e000      	b.n	800758c <xQueueGenericSend+0xa4>
 800758a:	2300      	movs	r3, #0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10a      	bne.n	80075a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	61fb      	str	r3, [r7, #28]
}
 80075a2:	bf00      	nop
 80075a4:	e7fe      	b.n	80075a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075a6:	f001 fefd 	bl	80093a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d302      	bcc.n	80075bc <xQueueGenericSend+0xd4>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d129      	bne.n	8007610 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	68b9      	ldr	r1, [r7, #8]
 80075c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075c2:	f000 fa0b 	bl	80079dc <prvCopyDataToQueue>
 80075c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d010      	beq.n	80075f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	3324      	adds	r3, #36	; 0x24
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 ffcf 	bl	8008578 <xTaskRemoveFromEventList>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d013      	beq.n	8007608 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075e0:	4b3f      	ldr	r3, [pc, #252]	; (80076e0 <xQueueGenericSend+0x1f8>)
 80075e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	e00a      	b.n	8007608 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d007      	beq.n	8007608 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075f8:	4b39      	ldr	r3, [pc, #228]	; (80076e0 <xQueueGenericSend+0x1f8>)
 80075fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007608:	f001 fefc 	bl	8009404 <vPortExitCritical>
				return pdPASS;
 800760c:	2301      	movs	r3, #1
 800760e:	e063      	b.n	80076d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d103      	bne.n	800761e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007616:	f001 fef5 	bl	8009404 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800761a:	2300      	movs	r3, #0
 800761c:	e05c      	b.n	80076d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800761e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007620:	2b00      	cmp	r3, #0
 8007622:	d106      	bne.n	8007632 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007624:	f107 0314 	add.w	r3, r7, #20
 8007628:	4618      	mov	r0, r3
 800762a:	f001 f809 	bl	8008640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800762e:	2301      	movs	r3, #1
 8007630:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007632:	f001 fee7 	bl	8009404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007636:	f000 fd7b 	bl	8008130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800763a:	f001 feb3 	bl	80093a4 <vPortEnterCritical>
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007644:	b25b      	sxtb	r3, r3
 8007646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764a:	d103      	bne.n	8007654 <xQueueGenericSend+0x16c>
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800765a:	b25b      	sxtb	r3, r3
 800765c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007660:	d103      	bne.n	800766a <xQueueGenericSend+0x182>
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800766a:	f001 fecb 	bl	8009404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800766e:	1d3a      	adds	r2, r7, #4
 8007670:	f107 0314 	add.w	r3, r7, #20
 8007674:	4611      	mov	r1, r2
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fff8 	bl	800866c <xTaskCheckForTimeOut>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d124      	bne.n	80076cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007682:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007684:	f000 faa2 	bl	8007bcc <prvIsQueueFull>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d018      	beq.n	80076c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	3310      	adds	r3, #16
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	4611      	mov	r1, r2
 8007696:	4618      	mov	r0, r3
 8007698:	f000 ff1e 	bl	80084d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800769c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800769e:	f000 fa2d 	bl	8007afc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80076a2:	f000 fd53 	bl	800814c <xTaskResumeAll>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f47f af7c 	bne.w	80075a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80076ae:	4b0c      	ldr	r3, [pc, #48]	; (80076e0 <xQueueGenericSend+0x1f8>)
 80076b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	e772      	b.n	80075a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80076c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076c2:	f000 fa1b 	bl	8007afc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076c6:	f000 fd41 	bl	800814c <xTaskResumeAll>
 80076ca:	e76c      	b.n	80075a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076ce:	f000 fa15 	bl	8007afc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076d2:	f000 fd3b 	bl	800814c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3738      	adds	r7, #56	; 0x38
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	e000ed04 	.word	0xe000ed04

080076e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b090      	sub	sp, #64	; 0x40
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80076f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10a      	bne.n	8007712 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800770e:	bf00      	nop
 8007710:	e7fe      	b.n	8007710 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d103      	bne.n	8007720 <xQueueGenericSendFromISR+0x3c>
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <xQueueGenericSendFromISR+0x40>
 8007720:	2301      	movs	r3, #1
 8007722:	e000      	b.n	8007726 <xQueueGenericSendFromISR+0x42>
 8007724:	2300      	movs	r3, #0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800773c:	bf00      	nop
 800773e:	e7fe      	b.n	800773e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b02      	cmp	r3, #2
 8007744:	d103      	bne.n	800774e <xQueueGenericSendFromISR+0x6a>
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774a:	2b01      	cmp	r3, #1
 800774c:	d101      	bne.n	8007752 <xQueueGenericSendFromISR+0x6e>
 800774e:	2301      	movs	r3, #1
 8007750:	e000      	b.n	8007754 <xQueueGenericSendFromISR+0x70>
 8007752:	2300      	movs	r3, #0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10a      	bne.n	800776e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	623b      	str	r3, [r7, #32]
}
 800776a:	bf00      	nop
 800776c:	e7fe      	b.n	800776c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800776e:	f001 fefb 	bl	8009568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007772:	f3ef 8211 	mrs	r2, BASEPRI
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	61fa      	str	r2, [r7, #28]
 8007788:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800778a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800778c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800778e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007796:	429a      	cmp	r2, r3
 8007798:	d302      	bcc.n	80077a0 <xQueueGenericSendFromISR+0xbc>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b02      	cmp	r3, #2
 800779e:	d12f      	bne.n	8007800 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80077a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077b6:	f000 f911 	bl	80079dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80077be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c2:	d112      	bne.n	80077ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d016      	beq.n	80077fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ce:	3324      	adds	r3, #36	; 0x24
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 fed1 	bl	8008578 <xTaskRemoveFromEventList>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00e      	beq.n	80077fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00b      	beq.n	80077fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	e007      	b.n	80077fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077ee:	3301      	adds	r3, #1
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	b25a      	sxtb	r2, r3
 80077f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077fa:	2301      	movs	r3, #1
 80077fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80077fe:	e001      	b.n	8007804 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007800:	2300      	movs	r3, #0
 8007802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007806:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800780e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007812:	4618      	mov	r0, r3
 8007814:	3740      	adds	r7, #64	; 0x40
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
	...

0800781c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08c      	sub	sp, #48	; 0x30
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007828:	2300      	movs	r3, #0
 800782a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10a      	bne.n	800784c <xQueueReceive+0x30>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	623b      	str	r3, [r7, #32]
}
 8007848:	bf00      	nop
 800784a:	e7fe      	b.n	800784a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d103      	bne.n	800785a <xQueueReceive+0x3e>
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007856:	2b00      	cmp	r3, #0
 8007858:	d101      	bne.n	800785e <xQueueReceive+0x42>
 800785a:	2301      	movs	r3, #1
 800785c:	e000      	b.n	8007860 <xQueueReceive+0x44>
 800785e:	2300      	movs	r3, #0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10a      	bne.n	800787a <xQueueReceive+0x5e>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	61fb      	str	r3, [r7, #28]
}
 8007876:	bf00      	nop
 8007878:	e7fe      	b.n	8007878 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800787a:	f001 f83b 	bl	80088f4 <xTaskGetSchedulerState>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <xQueueReceive+0x6e>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <xQueueReceive+0x72>
 800788a:	2301      	movs	r3, #1
 800788c:	e000      	b.n	8007890 <xQueueReceive+0x74>
 800788e:	2300      	movs	r3, #0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10a      	bne.n	80078aa <xQueueReceive+0x8e>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	61bb      	str	r3, [r7, #24]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078aa:	f001 fd7b 	bl	80093a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d01f      	beq.n	80078fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078ba:	68b9      	ldr	r1, [r7, #8]
 80078bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078be:	f000 f8f7 	bl	8007ab0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	1e5a      	subs	r2, r3, #1
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00f      	beq.n	80078f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d4:	3310      	adds	r3, #16
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 fe4e 	bl	8008578 <xTaskRemoveFromEventList>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d007      	beq.n	80078f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078e2:	4b3d      	ldr	r3, [pc, #244]	; (80079d8 <xQueueReceive+0x1bc>)
 80078e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078f2:	f001 fd87 	bl	8009404 <vPortExitCritical>
				return pdPASS;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e069      	b.n	80079ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d103      	bne.n	8007908 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007900:	f001 fd80 	bl	8009404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007904:	2300      	movs	r3, #0
 8007906:	e062      	b.n	80079ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790a:	2b00      	cmp	r3, #0
 800790c:	d106      	bne.n	800791c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800790e:	f107 0310 	add.w	r3, r7, #16
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fe94 	bl	8008640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007918:	2301      	movs	r3, #1
 800791a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800791c:	f001 fd72 	bl	8009404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007920:	f000 fc06 	bl	8008130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007924:	f001 fd3e 	bl	80093a4 <vPortEnterCritical>
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800792e:	b25b      	sxtb	r3, r3
 8007930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007934:	d103      	bne.n	800793e <xQueueReceive+0x122>
 8007936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007944:	b25b      	sxtb	r3, r3
 8007946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794a:	d103      	bne.n	8007954 <xQueueReceive+0x138>
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007954:	f001 fd56 	bl	8009404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007958:	1d3a      	adds	r2, r7, #4
 800795a:	f107 0310 	add.w	r3, r7, #16
 800795e:	4611      	mov	r1, r2
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fe83 	bl	800866c <xTaskCheckForTimeOut>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d123      	bne.n	80079b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800796c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800796e:	f000 f917 	bl	8007ba0 <prvIsQueueEmpty>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d017      	beq.n	80079a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797a:	3324      	adds	r3, #36	; 0x24
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	4611      	mov	r1, r2
 8007980:	4618      	mov	r0, r3
 8007982:	f000 fda9 	bl	80084d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007988:	f000 f8b8 	bl	8007afc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800798c:	f000 fbde 	bl	800814c <xTaskResumeAll>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d189      	bne.n	80078aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007996:	4b10      	ldr	r3, [pc, #64]	; (80079d8 <xQueueReceive+0x1bc>)
 8007998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	e780      	b.n	80078aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80079a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079aa:	f000 f8a7 	bl	8007afc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079ae:	f000 fbcd 	bl	800814c <xTaskResumeAll>
 80079b2:	e77a      	b.n	80078aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80079b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079b6:	f000 f8a1 	bl	8007afc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079ba:	f000 fbc7 	bl	800814c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079c0:	f000 f8ee 	bl	8007ba0 <prvIsQueueEmpty>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f43f af6f 	beq.w	80078aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3730      	adds	r7, #48	; 0x30
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	e000ed04 	.word	0xe000ed04

080079dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80079e8:	2300      	movs	r3, #0
 80079ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10d      	bne.n	8007a16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d14d      	bne.n	8007a9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 ff92 	bl	8008930 <xTaskPriorityDisinherit>
 8007a0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	609a      	str	r2, [r3, #8]
 8007a14:	e043      	b.n	8007a9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d119      	bne.n	8007a50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6858      	ldr	r0, [r3, #4]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a24:	461a      	mov	r2, r3
 8007a26:	68b9      	ldr	r1, [r7, #8]
 8007a28:	f001 fff6 	bl	8009a18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a34:	441a      	add	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d32b      	bcc.n	8007a9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	605a      	str	r2, [r3, #4]
 8007a4e:	e026      	b.n	8007a9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	68d8      	ldr	r0, [r3, #12]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a58:	461a      	mov	r2, r3
 8007a5a:	68b9      	ldr	r1, [r7, #8]
 8007a5c:	f001 ffdc 	bl	8009a18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	68da      	ldr	r2, [r3, #12]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a68:	425b      	negs	r3, r3
 8007a6a:	441a      	add	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d207      	bcs.n	8007a8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a84:	425b      	negs	r3, r3
 8007a86:	441a      	add	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d105      	bne.n	8007a9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007aa6:	697b      	ldr	r3, [r7, #20]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d018      	beq.n	8007af4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68da      	ldr	r2, [r3, #12]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	441a      	add	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68da      	ldr	r2, [r3, #12]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d303      	bcc.n	8007ae4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68d9      	ldr	r1, [r3, #12]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aec:	461a      	mov	r2, r3
 8007aee:	6838      	ldr	r0, [r7, #0]
 8007af0:	f001 ff92 	bl	8009a18 <memcpy>
	}
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b04:	f001 fc4e 	bl	80093a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b10:	e011      	b.n	8007b36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d012      	beq.n	8007b40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3324      	adds	r3, #36	; 0x24
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fd2a 	bl	8008578 <xTaskRemoveFromEventList>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b2a:	f000 fe01 	bl	8008730 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	dce9      	bgt.n	8007b12 <prvUnlockQueue+0x16>
 8007b3e:	e000      	b.n	8007b42 <prvUnlockQueue+0x46>
					break;
 8007b40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	22ff      	movs	r2, #255	; 0xff
 8007b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b4a:	f001 fc5b 	bl	8009404 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b4e:	f001 fc29 	bl	80093a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b5a:	e011      	b.n	8007b80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d012      	beq.n	8007b8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	3310      	adds	r3, #16
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fd05 	bl	8008578 <xTaskRemoveFromEventList>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b74:	f000 fddc 	bl	8008730 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	dce9      	bgt.n	8007b5c <prvUnlockQueue+0x60>
 8007b88:	e000      	b.n	8007b8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	22ff      	movs	r2, #255	; 0xff
 8007b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b94:	f001 fc36 	bl	8009404 <vPortExitCritical>
}
 8007b98:	bf00      	nop
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ba8:	f001 fbfc 	bl	80093a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d102      	bne.n	8007bba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	60fb      	str	r3, [r7, #12]
 8007bb8:	e001      	b.n	8007bbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bbe:	f001 fc21 	bl	8009404 <vPortExitCritical>

	return xReturn;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bd4:	f001 fbe6 	bl	80093a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d102      	bne.n	8007bea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	e001      	b.n	8007bee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bee:	f001 fc09 	bl	8009404 <vPortExitCritical>

	return xReturn;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c06:	2300      	movs	r3, #0
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	e014      	b.n	8007c36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c0c:	4a0f      	ldr	r2, [pc, #60]	; (8007c4c <vQueueAddToRegistry+0x50>)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10b      	bne.n	8007c30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c18:	490c      	ldr	r1, [pc, #48]	; (8007c4c <vQueueAddToRegistry+0x50>)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	683a      	ldr	r2, [r7, #0]
 8007c1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c22:	4a0a      	ldr	r2, [pc, #40]	; (8007c4c <vQueueAddToRegistry+0x50>)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	00db      	lsls	r3, r3, #3
 8007c28:	4413      	add	r3, r2
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c2e:	e006      	b.n	8007c3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2b07      	cmp	r3, #7
 8007c3a:	d9e7      	bls.n	8007c0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	20009594 	.word	0x20009594

08007c50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c60:	f001 fba0 	bl	80093a4 <vPortEnterCritical>
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c6a:	b25b      	sxtb	r3, r3
 8007c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c70:	d103      	bne.n	8007c7a <vQueueWaitForMessageRestricted+0x2a>
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c80:	b25b      	sxtb	r3, r3
 8007c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c86:	d103      	bne.n	8007c90 <vQueueWaitForMessageRestricted+0x40>
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c90:	f001 fbb8 	bl	8009404 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d106      	bne.n	8007caa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	3324      	adds	r3, #36	; 0x24
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	68b9      	ldr	r1, [r7, #8]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 fc3b 	bl	8008520 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007caa:	6978      	ldr	r0, [r7, #20]
 8007cac:	f7ff ff26 	bl	8007afc <prvUnlockQueue>
	}
 8007cb0:	bf00      	nop
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08e      	sub	sp, #56	; 0x38
 8007cbc:	af04      	add	r7, sp, #16
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
 8007cc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10a      	bne.n	8007ce2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	623b      	str	r3, [r7, #32]
}
 8007cde:	bf00      	nop
 8007ce0:	e7fe      	b.n	8007ce0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <xTaskCreateStatic+0x46>
	__asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	61fb      	str	r3, [r7, #28]
}
 8007cfa:	bf00      	nop
 8007cfc:	e7fe      	b.n	8007cfc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cfe:	235c      	movs	r3, #92	; 0x5c
 8007d00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2b5c      	cmp	r3, #92	; 0x5c
 8007d06:	d00a      	beq.n	8007d1e <xTaskCreateStatic+0x66>
	__asm volatile
 8007d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	61bb      	str	r3, [r7, #24]
}
 8007d1a:	bf00      	nop
 8007d1c:	e7fe      	b.n	8007d1c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d01e      	beq.n	8007d64 <xTaskCreateStatic+0xac>
 8007d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d01b      	beq.n	8007d64 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	2202      	movs	r2, #2
 8007d3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d3e:	2300      	movs	r3, #0
 8007d40:	9303      	str	r3, [sp, #12]
 8007d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d44:	9302      	str	r3, [sp, #8]
 8007d46:	f107 0314 	add.w	r3, r7, #20
 8007d4a:	9301      	str	r3, [sp, #4]
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	68b9      	ldr	r1, [r7, #8]
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 f850 	bl	8007dfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d5e:	f000 f8dd 	bl	8007f1c <prvAddNewTaskToReadyList>
 8007d62:	e001      	b.n	8007d68 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007d64:	2300      	movs	r3, #0
 8007d66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d68:	697b      	ldr	r3, [r7, #20]
	}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3728      	adds	r7, #40	; 0x28
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b08c      	sub	sp, #48	; 0x30
 8007d76:	af04      	add	r7, sp, #16
 8007d78:	60f8      	str	r0, [r7, #12]
 8007d7a:	60b9      	str	r1, [r7, #8]
 8007d7c:	603b      	str	r3, [r7, #0]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d82:	88fb      	ldrh	r3, [r7, #6]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f001 fc2e 	bl	80095e8 <pvPortMalloc>
 8007d8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00e      	beq.n	8007db2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d94:	205c      	movs	r0, #92	; 0x5c
 8007d96:	f001 fc27 	bl	80095e8 <pvPortMalloc>
 8007d9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	631a      	str	r2, [r3, #48]	; 0x30
 8007da8:	e005      	b.n	8007db6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007daa:	6978      	ldr	r0, [r7, #20]
 8007dac:	f001 fce8 	bl	8009780 <vPortFree>
 8007db0:	e001      	b.n	8007db6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007db2:	2300      	movs	r3, #0
 8007db4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d017      	beq.n	8007dec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007dc4:	88fa      	ldrh	r2, [r7, #6]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	9303      	str	r3, [sp, #12]
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	9302      	str	r3, [sp, #8]
 8007dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd0:	9301      	str	r3, [sp, #4]
 8007dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68b9      	ldr	r1, [r7, #8]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 f80e 	bl	8007dfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007de0:	69f8      	ldr	r0, [r7, #28]
 8007de2:	f000 f89b 	bl	8007f1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007de6:	2301      	movs	r3, #1
 8007de8:	61bb      	str	r3, [r7, #24]
 8007dea:	e002      	b.n	8007df2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007dec:	f04f 33ff 	mov.w	r3, #4294967295
 8007df0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007df2:	69bb      	ldr	r3, [r7, #24]
	}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3720      	adds	r7, #32
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	461a      	mov	r2, r3
 8007e14:	21a5      	movs	r1, #165	; 0xa5
 8007e16:	f001 fe0d 	bl	8009a34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e24:	3b01      	subs	r3, #1
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	f023 0307 	bic.w	r3, r3, #7
 8007e32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	617b      	str	r3, [r7, #20]
}
 8007e50:	bf00      	nop
 8007e52:	e7fe      	b.n	8007e52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d01f      	beq.n	8007e9a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	61fb      	str	r3, [r7, #28]
 8007e5e:	e012      	b.n	8007e86 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	4413      	add	r3, r2
 8007e66:	7819      	ldrb	r1, [r3, #0]
 8007e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	3334      	adds	r3, #52	; 0x34
 8007e70:	460a      	mov	r2, r1
 8007e72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	4413      	add	r3, r2
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d006      	beq.n	8007e8e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	3301      	adds	r3, #1
 8007e84:	61fb      	str	r3, [r7, #28]
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	2b0f      	cmp	r3, #15
 8007e8a:	d9e9      	bls.n	8007e60 <prvInitialiseNewTask+0x64>
 8007e8c:	e000      	b.n	8007e90 <prvInitialiseNewTask+0x94>
			{
				break;
 8007e8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e98:	e003      	b.n	8007ea2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea4:	2b37      	cmp	r3, #55	; 0x37
 8007ea6:	d901      	bls.n	8007eac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ea8:	2337      	movs	r3, #55	; 0x37
 8007eaa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eb6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eba:	2200      	movs	r2, #0
 8007ebc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff f8f2 	bl	80070ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	3318      	adds	r3, #24
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7ff f8ed 	bl	80070ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ed6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ee6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	2200      	movs	r2, #0
 8007eec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	68f9      	ldr	r1, [r7, #12]
 8007efa:	69b8      	ldr	r0, [r7, #24]
 8007efc:	f001 f928 	bl	8009150 <pxPortInitialiseStack>
 8007f00:	4602      	mov	r2, r0
 8007f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f12:	bf00      	nop
 8007f14:	3720      	adds	r7, #32
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f24:	f001 fa3e 	bl	80093a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f28:	4b2d      	ldr	r3, [pc, #180]	; (8007fe0 <prvAddNewTaskToReadyList+0xc4>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	4a2c      	ldr	r2, [pc, #176]	; (8007fe0 <prvAddNewTaskToReadyList+0xc4>)
 8007f30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f32:	4b2c      	ldr	r3, [pc, #176]	; (8007fe4 <prvAddNewTaskToReadyList+0xc8>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d109      	bne.n	8007f4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f3a:	4a2a      	ldr	r2, [pc, #168]	; (8007fe4 <prvAddNewTaskToReadyList+0xc8>)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f40:	4b27      	ldr	r3, [pc, #156]	; (8007fe0 <prvAddNewTaskToReadyList+0xc4>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d110      	bne.n	8007f6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f48:	f000 fc16 	bl	8008778 <prvInitialiseTaskLists>
 8007f4c:	e00d      	b.n	8007f6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f4e:	4b26      	ldr	r3, [pc, #152]	; (8007fe8 <prvAddNewTaskToReadyList+0xcc>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d109      	bne.n	8007f6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f56:	4b23      	ldr	r3, [pc, #140]	; (8007fe4 <prvAddNewTaskToReadyList+0xc8>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d802      	bhi.n	8007f6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f64:	4a1f      	ldr	r2, [pc, #124]	; (8007fe4 <prvAddNewTaskToReadyList+0xc8>)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f6a:	4b20      	ldr	r3, [pc, #128]	; (8007fec <prvAddNewTaskToReadyList+0xd0>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	4a1e      	ldr	r2, [pc, #120]	; (8007fec <prvAddNewTaskToReadyList+0xd0>)
 8007f72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f74:	4b1d      	ldr	r3, [pc, #116]	; (8007fec <prvAddNewTaskToReadyList+0xd0>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f80:	4b1b      	ldr	r3, [pc, #108]	; (8007ff0 <prvAddNewTaskToReadyList+0xd4>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d903      	bls.n	8007f90 <prvAddNewTaskToReadyList+0x74>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8c:	4a18      	ldr	r2, [pc, #96]	; (8007ff0 <prvAddNewTaskToReadyList+0xd4>)
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4a15      	ldr	r2, [pc, #84]	; (8007ff4 <prvAddNewTaskToReadyList+0xd8>)
 8007f9e:	441a      	add	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	f7ff f88d 	bl	80070c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007fac:	f001 fa2a 	bl	8009404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007fb0:	4b0d      	ldr	r3, [pc, #52]	; (8007fe8 <prvAddNewTaskToReadyList+0xcc>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00e      	beq.n	8007fd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007fb8:	4b0a      	ldr	r3, [pc, #40]	; (8007fe4 <prvAddNewTaskToReadyList+0xc8>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d207      	bcs.n	8007fd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007fc6:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <prvAddNewTaskToReadyList+0xdc>)
 8007fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fd6:	bf00      	nop
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20000e48 	.word	0x20000e48
 8007fe4:	20000974 	.word	0x20000974
 8007fe8:	20000e54 	.word	0x20000e54
 8007fec:	20000e64 	.word	0x20000e64
 8007ff0:	20000e50 	.word	0x20000e50
 8007ff4:	20000978 	.word	0x20000978
 8007ff8:	e000ed04 	.word	0xe000ed04

08007ffc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d017      	beq.n	800803e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800800e:	4b13      	ldr	r3, [pc, #76]	; (800805c <vTaskDelay+0x60>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00a      	beq.n	800802c <vTaskDelay+0x30>
	__asm volatile
 8008016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	60bb      	str	r3, [r7, #8]
}
 8008028:	bf00      	nop
 800802a:	e7fe      	b.n	800802a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800802c:	f000 f880 	bl	8008130 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008030:	2100      	movs	r1, #0
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fcea 	bl	8008a0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008038:	f000 f888 	bl	800814c <xTaskResumeAll>
 800803c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d107      	bne.n	8008054 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008044:	4b06      	ldr	r3, [pc, #24]	; (8008060 <vTaskDelay+0x64>)
 8008046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008054:	bf00      	nop
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	20000e70 	.word	0x20000e70
 8008060:	e000ed04 	.word	0xe000ed04

08008064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08a      	sub	sp, #40	; 0x28
 8008068:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800806a:	2300      	movs	r3, #0
 800806c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800806e:	2300      	movs	r3, #0
 8008070:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008072:	463a      	mov	r2, r7
 8008074:	1d39      	adds	r1, r7, #4
 8008076:	f107 0308 	add.w	r3, r7, #8
 800807a:	4618      	mov	r0, r3
 800807c:	f7fe ffc2 	bl	8007004 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	9202      	str	r2, [sp, #8]
 8008088:	9301      	str	r3, [sp, #4]
 800808a:	2300      	movs	r3, #0
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	2300      	movs	r3, #0
 8008090:	460a      	mov	r2, r1
 8008092:	4921      	ldr	r1, [pc, #132]	; (8008118 <vTaskStartScheduler+0xb4>)
 8008094:	4821      	ldr	r0, [pc, #132]	; (800811c <vTaskStartScheduler+0xb8>)
 8008096:	f7ff fe0f 	bl	8007cb8 <xTaskCreateStatic>
 800809a:	4603      	mov	r3, r0
 800809c:	4a20      	ldr	r2, [pc, #128]	; (8008120 <vTaskStartScheduler+0xbc>)
 800809e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80080a0:	4b1f      	ldr	r3, [pc, #124]	; (8008120 <vTaskStartScheduler+0xbc>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80080a8:	2301      	movs	r3, #1
 80080aa:	617b      	str	r3, [r7, #20]
 80080ac:	e001      	b.n	80080b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d102      	bne.n	80080be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80080b8:	f000 fcfc 	bl	8008ab4 <xTimerCreateTimerTask>
 80080bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d116      	bne.n	80080f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	613b      	str	r3, [r7, #16]
}
 80080d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080d8:	4b12      	ldr	r3, [pc, #72]	; (8008124 <vTaskStartScheduler+0xc0>)
 80080da:	f04f 32ff 	mov.w	r2, #4294967295
 80080de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080e0:	4b11      	ldr	r3, [pc, #68]	; (8008128 <vTaskStartScheduler+0xc4>)
 80080e2:	2201      	movs	r2, #1
 80080e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080e6:	4b11      	ldr	r3, [pc, #68]	; (800812c <vTaskStartScheduler+0xc8>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080ec:	f001 f8b8 	bl	8009260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080f0:	e00e      	b.n	8008110 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f8:	d10a      	bne.n	8008110 <vTaskStartScheduler+0xac>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	60fb      	str	r3, [r7, #12]
}
 800810c:	bf00      	nop
 800810e:	e7fe      	b.n	800810e <vTaskStartScheduler+0xaa>
}
 8008110:	bf00      	nop
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	0800fd88 	.word	0x0800fd88
 800811c:	08008749 	.word	0x08008749
 8008120:	20000e6c 	.word	0x20000e6c
 8008124:	20000e68 	.word	0x20000e68
 8008128:	20000e54 	.word	0x20000e54
 800812c:	20000e4c 	.word	0x20000e4c

08008130 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008130:	b480      	push	{r7}
 8008132:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008134:	4b04      	ldr	r3, [pc, #16]	; (8008148 <vTaskSuspendAll+0x18>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3301      	adds	r3, #1
 800813a:	4a03      	ldr	r2, [pc, #12]	; (8008148 <vTaskSuspendAll+0x18>)
 800813c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800813e:	bf00      	nop
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	20000e70 	.word	0x20000e70

0800814c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008152:	2300      	movs	r3, #0
 8008154:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008156:	2300      	movs	r3, #0
 8008158:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800815a:	4b42      	ldr	r3, [pc, #264]	; (8008264 <xTaskResumeAll+0x118>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10a      	bne.n	8008178 <xTaskResumeAll+0x2c>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	603b      	str	r3, [r7, #0]
}
 8008174:	bf00      	nop
 8008176:	e7fe      	b.n	8008176 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008178:	f001 f914 	bl	80093a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800817c:	4b39      	ldr	r3, [pc, #228]	; (8008264 <xTaskResumeAll+0x118>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3b01      	subs	r3, #1
 8008182:	4a38      	ldr	r2, [pc, #224]	; (8008264 <xTaskResumeAll+0x118>)
 8008184:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008186:	4b37      	ldr	r3, [pc, #220]	; (8008264 <xTaskResumeAll+0x118>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d162      	bne.n	8008254 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800818e:	4b36      	ldr	r3, [pc, #216]	; (8008268 <xTaskResumeAll+0x11c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d05e      	beq.n	8008254 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008196:	e02f      	b.n	80081f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008198:	4b34      	ldr	r3, [pc, #208]	; (800826c <xTaskResumeAll+0x120>)
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	3318      	adds	r3, #24
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fe ffeb 	bl	8007180 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3304      	adds	r3, #4
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe ffe6 	bl	8007180 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b8:	4b2d      	ldr	r3, [pc, #180]	; (8008270 <xTaskResumeAll+0x124>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d903      	bls.n	80081c8 <xTaskResumeAll+0x7c>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c4:	4a2a      	ldr	r2, [pc, #168]	; (8008270 <xTaskResumeAll+0x124>)
 80081c6:	6013      	str	r3, [r2, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081cc:	4613      	mov	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4a27      	ldr	r2, [pc, #156]	; (8008274 <xTaskResumeAll+0x128>)
 80081d6:	441a      	add	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3304      	adds	r3, #4
 80081dc:	4619      	mov	r1, r3
 80081de:	4610      	mov	r0, r2
 80081e0:	f7fe ff71 	bl	80070c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e8:	4b23      	ldr	r3, [pc, #140]	; (8008278 <xTaskResumeAll+0x12c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d302      	bcc.n	80081f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80081f2:	4b22      	ldr	r3, [pc, #136]	; (800827c <xTaskResumeAll+0x130>)
 80081f4:	2201      	movs	r2, #1
 80081f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081f8:	4b1c      	ldr	r3, [pc, #112]	; (800826c <xTaskResumeAll+0x120>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1cb      	bne.n	8008198 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008206:	f000 fb55 	bl	80088b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800820a:	4b1d      	ldr	r3, [pc, #116]	; (8008280 <xTaskResumeAll+0x134>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d010      	beq.n	8008238 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008216:	f000 f847 	bl	80082a8 <xTaskIncrementTick>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008220:	4b16      	ldr	r3, [pc, #88]	; (800827c <xTaskResumeAll+0x130>)
 8008222:	2201      	movs	r2, #1
 8008224:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	3b01      	subs	r3, #1
 800822a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1f1      	bne.n	8008216 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008232:	4b13      	ldr	r3, [pc, #76]	; (8008280 <xTaskResumeAll+0x134>)
 8008234:	2200      	movs	r2, #0
 8008236:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008238:	4b10      	ldr	r3, [pc, #64]	; (800827c <xTaskResumeAll+0x130>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d009      	beq.n	8008254 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008240:	2301      	movs	r3, #1
 8008242:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008244:	4b0f      	ldr	r3, [pc, #60]	; (8008284 <xTaskResumeAll+0x138>)
 8008246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008254:	f001 f8d6 	bl	8009404 <vPortExitCritical>

	return xAlreadyYielded;
 8008258:	68bb      	ldr	r3, [r7, #8]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20000e70 	.word	0x20000e70
 8008268:	20000e48 	.word	0x20000e48
 800826c:	20000e08 	.word	0x20000e08
 8008270:	20000e50 	.word	0x20000e50
 8008274:	20000978 	.word	0x20000978
 8008278:	20000974 	.word	0x20000974
 800827c:	20000e5c 	.word	0x20000e5c
 8008280:	20000e58 	.word	0x20000e58
 8008284:	e000ed04 	.word	0xe000ed04

08008288 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800828e:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <xTaskGetTickCount+0x1c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008294:	687b      	ldr	r3, [r7, #4]
}
 8008296:	4618      	mov	r0, r3
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	20000e4c 	.word	0x20000e4c

080082a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082b2:	4b4f      	ldr	r3, [pc, #316]	; (80083f0 <xTaskIncrementTick+0x148>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f040 808f 	bne.w	80083da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082bc:	4b4d      	ldr	r3, [pc, #308]	; (80083f4 <xTaskIncrementTick+0x14c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3301      	adds	r3, #1
 80082c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082c4:	4a4b      	ldr	r2, [pc, #300]	; (80083f4 <xTaskIncrementTick+0x14c>)
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d120      	bne.n	8008312 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80082d0:	4b49      	ldr	r3, [pc, #292]	; (80083f8 <xTaskIncrementTick+0x150>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	603b      	str	r3, [r7, #0]
}
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <xTaskIncrementTick+0x46>
 80082f0:	4b41      	ldr	r3, [pc, #260]	; (80083f8 <xTaskIncrementTick+0x150>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60fb      	str	r3, [r7, #12]
 80082f6:	4b41      	ldr	r3, [pc, #260]	; (80083fc <xTaskIncrementTick+0x154>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a3f      	ldr	r2, [pc, #252]	; (80083f8 <xTaskIncrementTick+0x150>)
 80082fc:	6013      	str	r3, [r2, #0]
 80082fe:	4a3f      	ldr	r2, [pc, #252]	; (80083fc <xTaskIncrementTick+0x154>)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	4b3e      	ldr	r3, [pc, #248]	; (8008400 <xTaskIncrementTick+0x158>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3301      	adds	r3, #1
 800830a:	4a3d      	ldr	r2, [pc, #244]	; (8008400 <xTaskIncrementTick+0x158>)
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	f000 fad1 	bl	80088b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008312:	4b3c      	ldr	r3, [pc, #240]	; (8008404 <xTaskIncrementTick+0x15c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	429a      	cmp	r2, r3
 800831a:	d349      	bcc.n	80083b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800831c:	4b36      	ldr	r3, [pc, #216]	; (80083f8 <xTaskIncrementTick+0x150>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d104      	bne.n	8008330 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008326:	4b37      	ldr	r3, [pc, #220]	; (8008404 <xTaskIncrementTick+0x15c>)
 8008328:	f04f 32ff 	mov.w	r2, #4294967295
 800832c:	601a      	str	r2, [r3, #0]
					break;
 800832e:	e03f      	b.n	80083b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008330:	4b31      	ldr	r3, [pc, #196]	; (80083f8 <xTaskIncrementTick+0x150>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	429a      	cmp	r2, r3
 8008346:	d203      	bcs.n	8008350 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008348:	4a2e      	ldr	r2, [pc, #184]	; (8008404 <xTaskIncrementTick+0x15c>)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800834e:	e02f      	b.n	80083b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	3304      	adds	r3, #4
 8008354:	4618      	mov	r0, r3
 8008356:	f7fe ff13 	bl	8007180 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835e:	2b00      	cmp	r3, #0
 8008360:	d004      	beq.n	800836c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	3318      	adds	r3, #24
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe ff0a 	bl	8007180 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008370:	4b25      	ldr	r3, [pc, #148]	; (8008408 <xTaskIncrementTick+0x160>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	429a      	cmp	r2, r3
 8008376:	d903      	bls.n	8008380 <xTaskIncrementTick+0xd8>
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837c:	4a22      	ldr	r2, [pc, #136]	; (8008408 <xTaskIncrementTick+0x160>)
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008384:	4613      	mov	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4a1f      	ldr	r2, [pc, #124]	; (800840c <xTaskIncrementTick+0x164>)
 800838e:	441a      	add	r2, r3
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	3304      	adds	r3, #4
 8008394:	4619      	mov	r1, r3
 8008396:	4610      	mov	r0, r2
 8008398:	f7fe fe95 	bl	80070c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a0:	4b1b      	ldr	r3, [pc, #108]	; (8008410 <xTaskIncrementTick+0x168>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d3b8      	bcc.n	800831c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80083aa:	2301      	movs	r3, #1
 80083ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083ae:	e7b5      	b.n	800831c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083b0:	4b17      	ldr	r3, [pc, #92]	; (8008410 <xTaskIncrementTick+0x168>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b6:	4915      	ldr	r1, [pc, #84]	; (800840c <xTaskIncrementTick+0x164>)
 80083b8:	4613      	mov	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	440b      	add	r3, r1
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d901      	bls.n	80083cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80083c8:	2301      	movs	r3, #1
 80083ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80083cc:	4b11      	ldr	r3, [pc, #68]	; (8008414 <xTaskIncrementTick+0x16c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d007      	beq.n	80083e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80083d4:	2301      	movs	r3, #1
 80083d6:	617b      	str	r3, [r7, #20]
 80083d8:	e004      	b.n	80083e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80083da:	4b0f      	ldr	r3, [pc, #60]	; (8008418 <xTaskIncrementTick+0x170>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3301      	adds	r3, #1
 80083e0:	4a0d      	ldr	r2, [pc, #52]	; (8008418 <xTaskIncrementTick+0x170>)
 80083e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80083e4:	697b      	ldr	r3, [r7, #20]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	20000e70 	.word	0x20000e70
 80083f4:	20000e4c 	.word	0x20000e4c
 80083f8:	20000e00 	.word	0x20000e00
 80083fc:	20000e04 	.word	0x20000e04
 8008400:	20000e60 	.word	0x20000e60
 8008404:	20000e68 	.word	0x20000e68
 8008408:	20000e50 	.word	0x20000e50
 800840c:	20000978 	.word	0x20000978
 8008410:	20000974 	.word	0x20000974
 8008414:	20000e5c 	.word	0x20000e5c
 8008418:	20000e58 	.word	0x20000e58

0800841c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008422:	4b28      	ldr	r3, [pc, #160]	; (80084c4 <vTaskSwitchContext+0xa8>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800842a:	4b27      	ldr	r3, [pc, #156]	; (80084c8 <vTaskSwitchContext+0xac>)
 800842c:	2201      	movs	r2, #1
 800842e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008430:	e041      	b.n	80084b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008432:	4b25      	ldr	r3, [pc, #148]	; (80084c8 <vTaskSwitchContext+0xac>)
 8008434:	2200      	movs	r2, #0
 8008436:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008438:	4b24      	ldr	r3, [pc, #144]	; (80084cc <vTaskSwitchContext+0xb0>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	e010      	b.n	8008462 <vTaskSwitchContext+0x46>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10a      	bne.n	800845c <vTaskSwitchContext+0x40>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	607b      	str	r3, [r7, #4]
}
 8008458:	bf00      	nop
 800845a:	e7fe      	b.n	800845a <vTaskSwitchContext+0x3e>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	3b01      	subs	r3, #1
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	491b      	ldr	r1, [pc, #108]	; (80084d0 <vTaskSwitchContext+0xb4>)
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	4613      	mov	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	440b      	add	r3, r1
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d0e4      	beq.n	8008440 <vTaskSwitchContext+0x24>
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	4613      	mov	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4a13      	ldr	r2, [pc, #76]	; (80084d0 <vTaskSwitchContext+0xb4>)
 8008482:	4413      	add	r3, r2
 8008484:	60bb      	str	r3, [r7, #8]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	605a      	str	r2, [r3, #4]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	685a      	ldr	r2, [r3, #4]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	3308      	adds	r3, #8
 8008498:	429a      	cmp	r2, r3
 800849a:	d104      	bne.n	80084a6 <vTaskSwitchContext+0x8a>
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	685a      	ldr	r2, [r3, #4]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	605a      	str	r2, [r3, #4]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	4a09      	ldr	r2, [pc, #36]	; (80084d4 <vTaskSwitchContext+0xb8>)
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	4a06      	ldr	r2, [pc, #24]	; (80084cc <vTaskSwitchContext+0xb0>)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6013      	str	r3, [r2, #0]
}
 80084b6:	bf00      	nop
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	20000e70 	.word	0x20000e70
 80084c8:	20000e5c 	.word	0x20000e5c
 80084cc:	20000e50 	.word	0x20000e50
 80084d0:	20000978 	.word	0x20000978
 80084d4:	20000974 	.word	0x20000974

080084d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10a      	bne.n	80084fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	60fb      	str	r3, [r7, #12]
}
 80084fa:	bf00      	nop
 80084fc:	e7fe      	b.n	80084fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084fe:	4b07      	ldr	r3, [pc, #28]	; (800851c <vTaskPlaceOnEventList+0x44>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3318      	adds	r3, #24
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7fe fe01 	bl	800710e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800850c:	2101      	movs	r1, #1
 800850e:	6838      	ldr	r0, [r7, #0]
 8008510:	f000 fa7c 	bl	8008a0c <prvAddCurrentTaskToDelayedList>
}
 8008514:	bf00      	nop
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	20000974 	.word	0x20000974

08008520 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10a      	bne.n	8008548 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	617b      	str	r3, [r7, #20]
}
 8008544:	bf00      	nop
 8008546:	e7fe      	b.n	8008546 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008548:	4b0a      	ldr	r3, [pc, #40]	; (8008574 <vTaskPlaceOnEventListRestricted+0x54>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3318      	adds	r3, #24
 800854e:	4619      	mov	r1, r3
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f7fe fdb8 	bl	80070c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800855c:	f04f 33ff 	mov.w	r3, #4294967295
 8008560:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	68b8      	ldr	r0, [r7, #8]
 8008566:	f000 fa51 	bl	8008a0c <prvAddCurrentTaskToDelayedList>
	}
 800856a:	bf00      	nop
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20000974 	.word	0x20000974

08008578 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10a      	bne.n	80085a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	60fb      	str	r3, [r7, #12]
}
 80085a0:	bf00      	nop
 80085a2:	e7fe      	b.n	80085a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	3318      	adds	r3, #24
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7fe fde9 	bl	8007180 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085ae:	4b1e      	ldr	r3, [pc, #120]	; (8008628 <xTaskRemoveFromEventList+0xb0>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d11d      	bne.n	80085f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	3304      	adds	r3, #4
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fe fde0 	bl	8007180 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c4:	4b19      	ldr	r3, [pc, #100]	; (800862c <xTaskRemoveFromEventList+0xb4>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d903      	bls.n	80085d4 <xTaskRemoveFromEventList+0x5c>
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d0:	4a16      	ldr	r2, [pc, #88]	; (800862c <xTaskRemoveFromEventList+0xb4>)
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d8:	4613      	mov	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4a13      	ldr	r2, [pc, #76]	; (8008630 <xTaskRemoveFromEventList+0xb8>)
 80085e2:	441a      	add	r2, r3
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	3304      	adds	r3, #4
 80085e8:	4619      	mov	r1, r3
 80085ea:	4610      	mov	r0, r2
 80085ec:	f7fe fd6b 	bl	80070c6 <vListInsertEnd>
 80085f0:	e005      	b.n	80085fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	3318      	adds	r3, #24
 80085f6:	4619      	mov	r1, r3
 80085f8:	480e      	ldr	r0, [pc, #56]	; (8008634 <xTaskRemoveFromEventList+0xbc>)
 80085fa:	f7fe fd64 	bl	80070c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008602:	4b0d      	ldr	r3, [pc, #52]	; (8008638 <xTaskRemoveFromEventList+0xc0>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008608:	429a      	cmp	r2, r3
 800860a:	d905      	bls.n	8008618 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800860c:	2301      	movs	r3, #1
 800860e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008610:	4b0a      	ldr	r3, [pc, #40]	; (800863c <xTaskRemoveFromEventList+0xc4>)
 8008612:	2201      	movs	r2, #1
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	e001      	b.n	800861c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008618:	2300      	movs	r3, #0
 800861a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800861c:	697b      	ldr	r3, [r7, #20]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20000e70 	.word	0x20000e70
 800862c:	20000e50 	.word	0x20000e50
 8008630:	20000978 	.word	0x20000978
 8008634:	20000e08 	.word	0x20000e08
 8008638:	20000974 	.word	0x20000974
 800863c:	20000e5c 	.word	0x20000e5c

08008640 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008648:	4b06      	ldr	r3, [pc, #24]	; (8008664 <vTaskInternalSetTimeOutState+0x24>)
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008650:	4b05      	ldr	r3, [pc, #20]	; (8008668 <vTaskInternalSetTimeOutState+0x28>)
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	605a      	str	r2, [r3, #4]
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	20000e60 	.word	0x20000e60
 8008668:	20000e4c 	.word	0x20000e4c

0800866c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10a      	bne.n	8008692 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	613b      	str	r3, [r7, #16]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10a      	bne.n	80086ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	60fb      	str	r3, [r7, #12]
}
 80086aa:	bf00      	nop
 80086ac:	e7fe      	b.n	80086ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80086ae:	f000 fe79 	bl	80093a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80086b2:	4b1d      	ldr	r3, [pc, #116]	; (8008728 <xTaskCheckForTimeOut+0xbc>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ca:	d102      	bne.n	80086d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086cc:	2300      	movs	r3, #0
 80086ce:	61fb      	str	r3, [r7, #28]
 80086d0:	e023      	b.n	800871a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	4b15      	ldr	r3, [pc, #84]	; (800872c <xTaskCheckForTimeOut+0xc0>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d007      	beq.n	80086ee <xTaskCheckForTimeOut+0x82>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	69ba      	ldr	r2, [r7, #24]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d302      	bcc.n	80086ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086e8:	2301      	movs	r3, #1
 80086ea:	61fb      	str	r3, [r7, #28]
 80086ec:	e015      	b.n	800871a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d20b      	bcs.n	8008710 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	1ad2      	subs	r2, r2, r3
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff ff9b 	bl	8008640 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800870a:	2300      	movs	r3, #0
 800870c:	61fb      	str	r3, [r7, #28]
 800870e:	e004      	b.n	800871a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	2200      	movs	r2, #0
 8008714:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008716:	2301      	movs	r3, #1
 8008718:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800871a:	f000 fe73 	bl	8009404 <vPortExitCritical>

	return xReturn;
 800871e:	69fb      	ldr	r3, [r7, #28]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3720      	adds	r7, #32
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	20000e4c 	.word	0x20000e4c
 800872c:	20000e60 	.word	0x20000e60

08008730 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008734:	4b03      	ldr	r3, [pc, #12]	; (8008744 <vTaskMissedYield+0x14>)
 8008736:	2201      	movs	r2, #1
 8008738:	601a      	str	r2, [r3, #0]
}
 800873a:	bf00      	nop
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	20000e5c 	.word	0x20000e5c

08008748 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008750:	f000 f852 	bl	80087f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008754:	4b06      	ldr	r3, [pc, #24]	; (8008770 <prvIdleTask+0x28>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d9f9      	bls.n	8008750 <prvIdleTask+0x8>
			{
				taskYIELD();
 800875c:	4b05      	ldr	r3, [pc, #20]	; (8008774 <prvIdleTask+0x2c>)
 800875e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800876c:	e7f0      	b.n	8008750 <prvIdleTask+0x8>
 800876e:	bf00      	nop
 8008770:	20000978 	.word	0x20000978
 8008774:	e000ed04 	.word	0xe000ed04

08008778 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800877e:	2300      	movs	r3, #0
 8008780:	607b      	str	r3, [r7, #4]
 8008782:	e00c      	b.n	800879e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	4613      	mov	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4a12      	ldr	r2, [pc, #72]	; (80087d8 <prvInitialiseTaskLists+0x60>)
 8008790:	4413      	add	r3, r2
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe fc6a 	bl	800706c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3301      	adds	r3, #1
 800879c:	607b      	str	r3, [r7, #4]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b37      	cmp	r3, #55	; 0x37
 80087a2:	d9ef      	bls.n	8008784 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087a4:	480d      	ldr	r0, [pc, #52]	; (80087dc <prvInitialiseTaskLists+0x64>)
 80087a6:	f7fe fc61 	bl	800706c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087aa:	480d      	ldr	r0, [pc, #52]	; (80087e0 <prvInitialiseTaskLists+0x68>)
 80087ac:	f7fe fc5e 	bl	800706c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087b0:	480c      	ldr	r0, [pc, #48]	; (80087e4 <prvInitialiseTaskLists+0x6c>)
 80087b2:	f7fe fc5b 	bl	800706c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087b6:	480c      	ldr	r0, [pc, #48]	; (80087e8 <prvInitialiseTaskLists+0x70>)
 80087b8:	f7fe fc58 	bl	800706c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087bc:	480b      	ldr	r0, [pc, #44]	; (80087ec <prvInitialiseTaskLists+0x74>)
 80087be:	f7fe fc55 	bl	800706c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087c2:	4b0b      	ldr	r3, [pc, #44]	; (80087f0 <prvInitialiseTaskLists+0x78>)
 80087c4:	4a05      	ldr	r2, [pc, #20]	; (80087dc <prvInitialiseTaskLists+0x64>)
 80087c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087c8:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <prvInitialiseTaskLists+0x7c>)
 80087ca:	4a05      	ldr	r2, [pc, #20]	; (80087e0 <prvInitialiseTaskLists+0x68>)
 80087cc:	601a      	str	r2, [r3, #0]
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20000978 	.word	0x20000978
 80087dc:	20000dd8 	.word	0x20000dd8
 80087e0:	20000dec 	.word	0x20000dec
 80087e4:	20000e08 	.word	0x20000e08
 80087e8:	20000e1c 	.word	0x20000e1c
 80087ec:	20000e34 	.word	0x20000e34
 80087f0:	20000e00 	.word	0x20000e00
 80087f4:	20000e04 	.word	0x20000e04

080087f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087fe:	e019      	b.n	8008834 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008800:	f000 fdd0 	bl	80093a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008804:	4b10      	ldr	r3, [pc, #64]	; (8008848 <prvCheckTasksWaitingTermination+0x50>)
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	3304      	adds	r3, #4
 8008810:	4618      	mov	r0, r3
 8008812:	f7fe fcb5 	bl	8007180 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008816:	4b0d      	ldr	r3, [pc, #52]	; (800884c <prvCheckTasksWaitingTermination+0x54>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3b01      	subs	r3, #1
 800881c:	4a0b      	ldr	r2, [pc, #44]	; (800884c <prvCheckTasksWaitingTermination+0x54>)
 800881e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008820:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <prvCheckTasksWaitingTermination+0x58>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3b01      	subs	r3, #1
 8008826:	4a0a      	ldr	r2, [pc, #40]	; (8008850 <prvCheckTasksWaitingTermination+0x58>)
 8008828:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800882a:	f000 fdeb 	bl	8009404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f810 	bl	8008854 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008834:	4b06      	ldr	r3, [pc, #24]	; (8008850 <prvCheckTasksWaitingTermination+0x58>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1e1      	bne.n	8008800 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800883c:	bf00      	nop
 800883e:	bf00      	nop
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20000e1c 	.word	0x20000e1c
 800884c:	20000e48 	.word	0x20000e48
 8008850:	20000e30 	.word	0x20000e30

08008854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008862:	2b00      	cmp	r3, #0
 8008864:	d108      	bne.n	8008878 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	4618      	mov	r0, r3
 800886c:	f000 ff88 	bl	8009780 <vPortFree>
				vPortFree( pxTCB );
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 ff85 	bl	8009780 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008876:	e018      	b.n	80088aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800887e:	2b01      	cmp	r3, #1
 8008880:	d103      	bne.n	800888a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 ff7c 	bl	8009780 <vPortFree>
	}
 8008888:	e00f      	b.n	80088aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008890:	2b02      	cmp	r3, #2
 8008892:	d00a      	beq.n	80088aa <prvDeleteTCB+0x56>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	60fb      	str	r3, [r7, #12]
}
 80088a6:	bf00      	nop
 80088a8:	e7fe      	b.n	80088a8 <prvDeleteTCB+0x54>
	}
 80088aa:	bf00      	nop
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088ba:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <prvResetNextTaskUnblockTime+0x38>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d104      	bne.n	80088ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088c4:	4b0a      	ldr	r3, [pc, #40]	; (80088f0 <prvResetNextTaskUnblockTime+0x3c>)
 80088c6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088cc:	e008      	b.n	80088e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ce:	4b07      	ldr	r3, [pc, #28]	; (80088ec <prvResetNextTaskUnblockTime+0x38>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	4a04      	ldr	r2, [pc, #16]	; (80088f0 <prvResetNextTaskUnblockTime+0x3c>)
 80088de:	6013      	str	r3, [r2, #0]
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	20000e00 	.word	0x20000e00
 80088f0:	20000e68 	.word	0x20000e68

080088f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088fa:	4b0b      	ldr	r3, [pc, #44]	; (8008928 <xTaskGetSchedulerState+0x34>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d102      	bne.n	8008908 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008902:	2301      	movs	r3, #1
 8008904:	607b      	str	r3, [r7, #4]
 8008906:	e008      	b.n	800891a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008908:	4b08      	ldr	r3, [pc, #32]	; (800892c <xTaskGetSchedulerState+0x38>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d102      	bne.n	8008916 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008910:	2302      	movs	r3, #2
 8008912:	607b      	str	r3, [r7, #4]
 8008914:	e001      	b.n	800891a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008916:	2300      	movs	r3, #0
 8008918:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800891a:	687b      	ldr	r3, [r7, #4]
	}
 800891c:	4618      	mov	r0, r3
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr
 8008928:	20000e54 	.word	0x20000e54
 800892c:	20000e70 	.word	0x20000e70

08008930 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800893c:	2300      	movs	r3, #0
 800893e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d056      	beq.n	80089f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008946:	4b2e      	ldr	r3, [pc, #184]	; (8008a00 <xTaskPriorityDisinherit+0xd0>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	429a      	cmp	r2, r3
 800894e:	d00a      	beq.n	8008966 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	60fb      	str	r3, [r7, #12]
}
 8008962:	bf00      	nop
 8008964:	e7fe      	b.n	8008964 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10a      	bne.n	8008984 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	60bb      	str	r3, [r7, #8]
}
 8008980:	bf00      	nop
 8008982:	e7fe      	b.n	8008982 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008988:	1e5a      	subs	r2, r3, #1
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008996:	429a      	cmp	r2, r3
 8008998:	d02c      	beq.n	80089f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d128      	bne.n	80089f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	3304      	adds	r3, #4
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fe fbea 	bl	8007180 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c4:	4b0f      	ldr	r3, [pc, #60]	; (8008a04 <xTaskPriorityDisinherit+0xd4>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d903      	bls.n	80089d4 <xTaskPriorityDisinherit+0xa4>
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d0:	4a0c      	ldr	r2, [pc, #48]	; (8008a04 <xTaskPriorityDisinherit+0xd4>)
 80089d2:	6013      	str	r3, [r2, #0]
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d8:	4613      	mov	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4a09      	ldr	r2, [pc, #36]	; (8008a08 <xTaskPriorityDisinherit+0xd8>)
 80089e2:	441a      	add	r2, r3
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	3304      	adds	r3, #4
 80089e8:	4619      	mov	r1, r3
 80089ea:	4610      	mov	r0, r2
 80089ec:	f7fe fb6b 	bl	80070c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089f0:	2301      	movs	r3, #1
 80089f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089f4:	697b      	ldr	r3, [r7, #20]
	}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20000974 	.word	0x20000974
 8008a04:	20000e50 	.word	0x20000e50
 8008a08:	20000978 	.word	0x20000978

08008a0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a16:	4b21      	ldr	r3, [pc, #132]	; (8008a9c <prvAddCurrentTaskToDelayedList+0x90>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a1c:	4b20      	ldr	r3, [pc, #128]	; (8008aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	3304      	adds	r3, #4
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe fbac 	bl	8007180 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2e:	d10a      	bne.n	8008a46 <prvAddCurrentTaskToDelayedList+0x3a>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d007      	beq.n	8008a46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a36:	4b1a      	ldr	r3, [pc, #104]	; (8008aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	4819      	ldr	r0, [pc, #100]	; (8008aa4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008a40:	f7fe fb41 	bl	80070c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a44:	e026      	b.n	8008a94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a4e:	4b14      	ldr	r3, [pc, #80]	; (8008aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d209      	bcs.n	8008a72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a5e:	4b12      	ldr	r3, [pc, #72]	; (8008aa8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	4b0f      	ldr	r3, [pc, #60]	; (8008aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3304      	adds	r3, #4
 8008a68:	4619      	mov	r1, r3
 8008a6a:	4610      	mov	r0, r2
 8008a6c:	f7fe fb4f 	bl	800710e <vListInsert>
}
 8008a70:	e010      	b.n	8008a94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a72:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <prvAddCurrentTaskToDelayedList+0xa0>)
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	4b0a      	ldr	r3, [pc, #40]	; (8008aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4610      	mov	r0, r2
 8008a80:	f7fe fb45 	bl	800710e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a84:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d202      	bcs.n	8008a94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008a8e:	4a08      	ldr	r2, [pc, #32]	; (8008ab0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	6013      	str	r3, [r2, #0]
}
 8008a94:	bf00      	nop
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20000e4c 	.word	0x20000e4c
 8008aa0:	20000974 	.word	0x20000974
 8008aa4:	20000e34 	.word	0x20000e34
 8008aa8:	20000e04 	.word	0x20000e04
 8008aac:	20000e00 	.word	0x20000e00
 8008ab0:	20000e68 	.word	0x20000e68

08008ab4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08a      	sub	sp, #40	; 0x28
 8008ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008aba:	2300      	movs	r3, #0
 8008abc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008abe:	f000 fb07 	bl	80090d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008ac2:	4b1c      	ldr	r3, [pc, #112]	; (8008b34 <xTimerCreateTimerTask+0x80>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d021      	beq.n	8008b0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008aca:	2300      	movs	r3, #0
 8008acc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008ad2:	1d3a      	adds	r2, r7, #4
 8008ad4:	f107 0108 	add.w	r1, r7, #8
 8008ad8:	f107 030c 	add.w	r3, r7, #12
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fe faab 	bl	8007038 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	9202      	str	r2, [sp, #8]
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	2302      	movs	r3, #2
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	2300      	movs	r3, #0
 8008af2:	460a      	mov	r2, r1
 8008af4:	4910      	ldr	r1, [pc, #64]	; (8008b38 <xTimerCreateTimerTask+0x84>)
 8008af6:	4811      	ldr	r0, [pc, #68]	; (8008b3c <xTimerCreateTimerTask+0x88>)
 8008af8:	f7ff f8de 	bl	8007cb8 <xTaskCreateStatic>
 8008afc:	4603      	mov	r3, r0
 8008afe:	4a10      	ldr	r2, [pc, #64]	; (8008b40 <xTimerCreateTimerTask+0x8c>)
 8008b00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b02:	4b0f      	ldr	r3, [pc, #60]	; (8008b40 <xTimerCreateTimerTask+0x8c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10a      	bne.n	8008b2a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	613b      	str	r3, [r7, #16]
}
 8008b26:	bf00      	nop
 8008b28:	e7fe      	b.n	8008b28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b2a:	697b      	ldr	r3, [r7, #20]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	20000ea4 	.word	0x20000ea4
 8008b38:	0800fd90 	.word	0x0800fd90
 8008b3c:	08008c79 	.word	0x08008c79
 8008b40:	20000ea8 	.word	0x20000ea8

08008b44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08a      	sub	sp, #40	; 0x28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
 8008b50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008b52:	2300      	movs	r3, #0
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10a      	bne.n	8008b72 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	623b      	str	r3, [r7, #32]
}
 8008b6e:	bf00      	nop
 8008b70:	e7fe      	b.n	8008b70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008b72:	4b1a      	ldr	r3, [pc, #104]	; (8008bdc <xTimerGenericCommand+0x98>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d02a      	beq.n	8008bd0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b05      	cmp	r3, #5
 8008b8a:	dc18      	bgt.n	8008bbe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b8c:	f7ff feb2 	bl	80088f4 <xTaskGetSchedulerState>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d109      	bne.n	8008baa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b96:	4b11      	ldr	r3, [pc, #68]	; (8008bdc <xTimerGenericCommand+0x98>)
 8008b98:	6818      	ldr	r0, [r3, #0]
 8008b9a:	f107 0110 	add.w	r1, r7, #16
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ba2:	f7fe fca1 	bl	80074e8 <xQueueGenericSend>
 8008ba6:	6278      	str	r0, [r7, #36]	; 0x24
 8008ba8:	e012      	b.n	8008bd0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008baa:	4b0c      	ldr	r3, [pc, #48]	; (8008bdc <xTimerGenericCommand+0x98>)
 8008bac:	6818      	ldr	r0, [r3, #0]
 8008bae:	f107 0110 	add.w	r1, r7, #16
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f7fe fc97 	bl	80074e8 <xQueueGenericSend>
 8008bba:	6278      	str	r0, [r7, #36]	; 0x24
 8008bbc:	e008      	b.n	8008bd0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008bbe:	4b07      	ldr	r3, [pc, #28]	; (8008bdc <xTimerGenericCommand+0x98>)
 8008bc0:	6818      	ldr	r0, [r3, #0]
 8008bc2:	f107 0110 	add.w	r1, r7, #16
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	f7fe fd8b 	bl	80076e4 <xQueueGenericSendFromISR>
 8008bce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3728      	adds	r7, #40	; 0x28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20000ea4 	.word	0x20000ea4

08008be0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af02      	add	r7, sp, #8
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bea:	4b22      	ldr	r3, [pc, #136]	; (8008c74 <prvProcessExpiredTimer+0x94>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fe fac1 	bl	8007180 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d022      	beq.n	8008c52 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	699a      	ldr	r2, [r3, #24]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	18d1      	adds	r1, r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	6978      	ldr	r0, [r7, #20]
 8008c1a:	f000 f8d1 	bl	8008dc0 <prvInsertTimerInActiveList>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01f      	beq.n	8008c64 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c24:	2300      	movs	r3, #0
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	2300      	movs	r3, #0
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	6978      	ldr	r0, [r7, #20]
 8008c30:	f7ff ff88 	bl	8008b44 <xTimerGenericCommand>
 8008c34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d113      	bne.n	8008c64 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	60fb      	str	r3, [r7, #12]
}
 8008c4e:	bf00      	nop
 8008c50:	e7fe      	b.n	8008c50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c58:	f023 0301 	bic.w	r3, r3, #1
 8008c5c:	b2da      	uxtb	r2, r3
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	6978      	ldr	r0, [r7, #20]
 8008c6a:	4798      	blx	r3
}
 8008c6c:	bf00      	nop
 8008c6e:	3718      	adds	r7, #24
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	20000e9c 	.word	0x20000e9c

08008c78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c80:	f107 0308 	add.w	r3, r7, #8
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 f857 	bl	8008d38 <prvGetNextExpireTime>
 8008c8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 f803 	bl	8008c9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008c96:	f000 f8d5 	bl	8008e44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c9a:	e7f1      	b.n	8008c80 <prvTimerTask+0x8>

08008c9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008ca6:	f7ff fa43 	bl	8008130 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008caa:	f107 0308 	add.w	r3, r7, #8
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 f866 	bl	8008d80 <prvSampleTimeNow>
 8008cb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d130      	bne.n	8008d1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10a      	bne.n	8008cd8 <prvProcessTimerOrBlockTask+0x3c>
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d806      	bhi.n	8008cd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008cca:	f7ff fa3f 	bl	800814c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008cce:	68f9      	ldr	r1, [r7, #12]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7ff ff85 	bl	8008be0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008cd6:	e024      	b.n	8008d22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d008      	beq.n	8008cf0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008cde:	4b13      	ldr	r3, [pc, #76]	; (8008d2c <prvProcessTimerOrBlockTask+0x90>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <prvProcessTimerOrBlockTask+0x50>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e000      	b.n	8008cee <prvProcessTimerOrBlockTask+0x52>
 8008cec:	2300      	movs	r3, #0
 8008cee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008cf0:	4b0f      	ldr	r3, [pc, #60]	; (8008d30 <prvProcessTimerOrBlockTask+0x94>)
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	f7fe ffa7 	bl	8007c50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d02:	f7ff fa23 	bl	800814c <xTaskResumeAll>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10a      	bne.n	8008d22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d0c:	4b09      	ldr	r3, [pc, #36]	; (8008d34 <prvProcessTimerOrBlockTask+0x98>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	f3bf 8f6f 	isb	sy
}
 8008d1c:	e001      	b.n	8008d22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d1e:	f7ff fa15 	bl	800814c <xTaskResumeAll>
}
 8008d22:	bf00      	nop
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000ea0 	.word	0x20000ea0
 8008d30:	20000ea4 	.word	0x20000ea4
 8008d34:	e000ed04 	.word	0xe000ed04

08008d38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d40:	4b0e      	ldr	r3, [pc, #56]	; (8008d7c <prvGetNextExpireTime+0x44>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <prvGetNextExpireTime+0x16>
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	e000      	b.n	8008d50 <prvGetNextExpireTime+0x18>
 8008d4e:	2200      	movs	r2, #0
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d105      	bne.n	8008d68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d5c:	4b07      	ldr	r3, [pc, #28]	; (8008d7c <prvGetNextExpireTime+0x44>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	60fb      	str	r3, [r7, #12]
 8008d66:	e001      	b.n	8008d6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	20000e9c 	.word	0x20000e9c

08008d80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008d88:	f7ff fa7e 	bl	8008288 <xTaskGetTickCount>
 8008d8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008d8e:	4b0b      	ldr	r3, [pc, #44]	; (8008dbc <prvSampleTimeNow+0x3c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d205      	bcs.n	8008da4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008d98:	f000 f936 	bl	8009008 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	e002      	b.n	8008daa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008daa:	4a04      	ldr	r2, [pc, #16]	; (8008dbc <prvSampleTimeNow+0x3c>)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008db0:	68fb      	ldr	r3, [r7, #12]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	20000eac 	.word	0x20000eac

08008dc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d812      	bhi.n	8008e0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	1ad2      	subs	r2, r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d302      	bcc.n	8008dfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008df4:	2301      	movs	r3, #1
 8008df6:	617b      	str	r3, [r7, #20]
 8008df8:	e01b      	b.n	8008e32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008dfa:	4b10      	ldr	r3, [pc, #64]	; (8008e3c <prvInsertTimerInActiveList+0x7c>)
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3304      	adds	r3, #4
 8008e02:	4619      	mov	r1, r3
 8008e04:	4610      	mov	r0, r2
 8008e06:	f7fe f982 	bl	800710e <vListInsert>
 8008e0a:	e012      	b.n	8008e32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d206      	bcs.n	8008e22 <prvInsertTimerInActiveList+0x62>
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d302      	bcc.n	8008e22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	617b      	str	r3, [r7, #20]
 8008e20:	e007      	b.n	8008e32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e22:	4b07      	ldr	r3, [pc, #28]	; (8008e40 <prvInsertTimerInActiveList+0x80>)
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	3304      	adds	r3, #4
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	f7fe f96e 	bl	800710e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e32:	697b      	ldr	r3, [r7, #20]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3718      	adds	r7, #24
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	20000ea0 	.word	0x20000ea0
 8008e40:	20000e9c 	.word	0x20000e9c

08008e44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08e      	sub	sp, #56	; 0x38
 8008e48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e4a:	e0ca      	b.n	8008fe2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	da18      	bge.n	8008e84 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008e52:	1d3b      	adds	r3, r7, #4
 8008e54:	3304      	adds	r3, #4
 8008e56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10a      	bne.n	8008e74 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	61fb      	str	r3, [r7, #28]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e7a:	6850      	ldr	r0, [r2, #4]
 8008e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e7e:	6892      	ldr	r2, [r2, #8]
 8008e80:	4611      	mov	r1, r2
 8008e82:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f2c0 80aa 	blt.w	8008fe0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d004      	beq.n	8008ea2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fe f96f 	bl	8007180 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ea2:	463b      	mov	r3, r7
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7ff ff6b 	bl	8008d80 <prvSampleTimeNow>
 8008eaa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b09      	cmp	r3, #9
 8008eb0:	f200 8097 	bhi.w	8008fe2 <prvProcessReceivedCommands+0x19e>
 8008eb4:	a201      	add	r2, pc, #4	; (adr r2, 8008ebc <prvProcessReceivedCommands+0x78>)
 8008eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eba:	bf00      	nop
 8008ebc:	08008ee5 	.word	0x08008ee5
 8008ec0:	08008ee5 	.word	0x08008ee5
 8008ec4:	08008ee5 	.word	0x08008ee5
 8008ec8:	08008f59 	.word	0x08008f59
 8008ecc:	08008f6d 	.word	0x08008f6d
 8008ed0:	08008fb7 	.word	0x08008fb7
 8008ed4:	08008ee5 	.word	0x08008ee5
 8008ed8:	08008ee5 	.word	0x08008ee5
 8008edc:	08008f59 	.word	0x08008f59
 8008ee0:	08008f6d 	.word	0x08008f6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eea:	f043 0301 	orr.w	r3, r3, #1
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	18d1      	adds	r1, r2, r3
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f04:	f7ff ff5c 	bl	8008dc0 <prvInsertTimerInActiveList>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d069      	beq.n	8008fe2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f1c:	f003 0304 	and.w	r3, r3, #4
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d05e      	beq.n	8008fe2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	441a      	add	r2, r3
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	2300      	movs	r3, #0
 8008f32:	2100      	movs	r1, #0
 8008f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f36:	f7ff fe05 	bl	8008b44 <xTimerGenericCommand>
 8008f3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008f3c:	6a3b      	ldr	r3, [r7, #32]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d14f      	bne.n	8008fe2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	61bb      	str	r3, [r7, #24]
}
 8008f54:	bf00      	nop
 8008f56:	e7fe      	b.n	8008f56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f5e:	f023 0301 	bic.w	r3, r3, #1
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008f6a:	e03a      	b.n	8008fe2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f72:	f043 0301 	orr.w	r3, r3, #1
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10a      	bne.n	8008fa2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	617b      	str	r3, [r7, #20]
}
 8008f9e:	bf00      	nop
 8008fa0:	e7fe      	b.n	8008fa0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	699a      	ldr	r2, [r3, #24]
 8008fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa8:	18d1      	adds	r1, r2, r3
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fb0:	f7ff ff06 	bl	8008dc0 <prvInsertTimerInActiveList>
					break;
 8008fb4:	e015      	b.n	8008fe2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fbc:	f003 0302 	and.w	r3, r3, #2
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d103      	bne.n	8008fcc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fc6:	f000 fbdb 	bl	8009780 <vPortFree>
 8008fca:	e00a      	b.n	8008fe2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fd2:	f023 0301 	bic.w	r3, r3, #1
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008fde:	e000      	b.n	8008fe2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008fe0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fe2:	4b08      	ldr	r3, [pc, #32]	; (8009004 <prvProcessReceivedCommands+0x1c0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	1d39      	adds	r1, r7, #4
 8008fe8:	2200      	movs	r2, #0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fe fc16 	bl	800781c <xQueueReceive>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f47f af2a 	bne.w	8008e4c <prvProcessReceivedCommands+0x8>
	}
}
 8008ff8:	bf00      	nop
 8008ffa:	bf00      	nop
 8008ffc:	3730      	adds	r7, #48	; 0x30
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	20000ea4 	.word	0x20000ea4

08009008 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800900e:	e048      	b.n	80090a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009010:	4b2d      	ldr	r3, [pc, #180]	; (80090c8 <prvSwitchTimerLists+0xc0>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800901a:	4b2b      	ldr	r3, [pc, #172]	; (80090c8 <prvSwitchTimerLists+0xc0>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3304      	adds	r3, #4
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe f8a9 	bl	8007180 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800903c:	f003 0304 	and.w	r3, r3, #4
 8009040:	2b00      	cmp	r3, #0
 8009042:	d02e      	beq.n	80090a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	4413      	add	r3, r2
 800904c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	429a      	cmp	r2, r3
 8009054:	d90e      	bls.n	8009074 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009062:	4b19      	ldr	r3, [pc, #100]	; (80090c8 <prvSwitchTimerLists+0xc0>)
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3304      	adds	r3, #4
 800906a:	4619      	mov	r1, r3
 800906c:	4610      	mov	r0, r2
 800906e:	f7fe f84e 	bl	800710e <vListInsert>
 8009072:	e016      	b.n	80090a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009074:	2300      	movs	r3, #0
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	2300      	movs	r3, #0
 800907a:	693a      	ldr	r2, [r7, #16]
 800907c:	2100      	movs	r1, #0
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f7ff fd60 	bl	8008b44 <xTimerGenericCommand>
 8009084:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10a      	bne.n	80090a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	603b      	str	r3, [r7, #0]
}
 800909e:	bf00      	nop
 80090a0:	e7fe      	b.n	80090a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090a2:	4b09      	ldr	r3, [pc, #36]	; (80090c8 <prvSwitchTimerLists+0xc0>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1b1      	bne.n	8009010 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80090ac:	4b06      	ldr	r3, [pc, #24]	; (80090c8 <prvSwitchTimerLists+0xc0>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80090b2:	4b06      	ldr	r3, [pc, #24]	; (80090cc <prvSwitchTimerLists+0xc4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a04      	ldr	r2, [pc, #16]	; (80090c8 <prvSwitchTimerLists+0xc0>)
 80090b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80090ba:	4a04      	ldr	r2, [pc, #16]	; (80090cc <prvSwitchTimerLists+0xc4>)
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	6013      	str	r3, [r2, #0]
}
 80090c0:	bf00      	nop
 80090c2:	3718      	adds	r7, #24
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	20000e9c 	.word	0x20000e9c
 80090cc:	20000ea0 	.word	0x20000ea0

080090d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80090d6:	f000 f965 	bl	80093a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80090da:	4b15      	ldr	r3, [pc, #84]	; (8009130 <prvCheckForValidListAndQueue+0x60>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d120      	bne.n	8009124 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80090e2:	4814      	ldr	r0, [pc, #80]	; (8009134 <prvCheckForValidListAndQueue+0x64>)
 80090e4:	f7fd ffc2 	bl	800706c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80090e8:	4813      	ldr	r0, [pc, #76]	; (8009138 <prvCheckForValidListAndQueue+0x68>)
 80090ea:	f7fd ffbf 	bl	800706c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80090ee:	4b13      	ldr	r3, [pc, #76]	; (800913c <prvCheckForValidListAndQueue+0x6c>)
 80090f0:	4a10      	ldr	r2, [pc, #64]	; (8009134 <prvCheckForValidListAndQueue+0x64>)
 80090f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80090f4:	4b12      	ldr	r3, [pc, #72]	; (8009140 <prvCheckForValidListAndQueue+0x70>)
 80090f6:	4a10      	ldr	r2, [pc, #64]	; (8009138 <prvCheckForValidListAndQueue+0x68>)
 80090f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80090fa:	2300      	movs	r3, #0
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	4b11      	ldr	r3, [pc, #68]	; (8009144 <prvCheckForValidListAndQueue+0x74>)
 8009100:	4a11      	ldr	r2, [pc, #68]	; (8009148 <prvCheckForValidListAndQueue+0x78>)
 8009102:	2110      	movs	r1, #16
 8009104:	200a      	movs	r0, #10
 8009106:	f7fe f8cd 	bl	80072a4 <xQueueGenericCreateStatic>
 800910a:	4603      	mov	r3, r0
 800910c:	4a08      	ldr	r2, [pc, #32]	; (8009130 <prvCheckForValidListAndQueue+0x60>)
 800910e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009110:	4b07      	ldr	r3, [pc, #28]	; (8009130 <prvCheckForValidListAndQueue+0x60>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d005      	beq.n	8009124 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009118:	4b05      	ldr	r3, [pc, #20]	; (8009130 <prvCheckForValidListAndQueue+0x60>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	490b      	ldr	r1, [pc, #44]	; (800914c <prvCheckForValidListAndQueue+0x7c>)
 800911e:	4618      	mov	r0, r3
 8009120:	f7fe fd6c 	bl	8007bfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009124:	f000 f96e 	bl	8009404 <vPortExitCritical>
}
 8009128:	bf00      	nop
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20000ea4 	.word	0x20000ea4
 8009134:	20000e74 	.word	0x20000e74
 8009138:	20000e88 	.word	0x20000e88
 800913c:	20000e9c 	.word	0x20000e9c
 8009140:	20000ea0 	.word	0x20000ea0
 8009144:	20000f50 	.word	0x20000f50
 8009148:	20000eb0 	.word	0x20000eb0
 800914c:	0800fd98 	.word	0x0800fd98

08009150 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3b04      	subs	r3, #4
 8009160:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3b04      	subs	r3, #4
 800916e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f023 0201 	bic.w	r2, r3, #1
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3b04      	subs	r3, #4
 800917e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009180:	4a0c      	ldr	r2, [pc, #48]	; (80091b4 <pxPortInitialiseStack+0x64>)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	3b14      	subs	r3, #20
 800918a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	3b04      	subs	r3, #4
 8009196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f06f 0202 	mvn.w	r2, #2
 800919e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3b20      	subs	r3, #32
 80091a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80091a6:	68fb      	ldr	r3, [r7, #12]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	080091b9 	.word	0x080091b9

080091b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80091be:	2300      	movs	r3, #0
 80091c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80091c2:	4b12      	ldr	r3, [pc, #72]	; (800920c <prvTaskExitError+0x54>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ca:	d00a      	beq.n	80091e2 <prvTaskExitError+0x2a>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	60fb      	str	r3, [r7, #12]
}
 80091de:	bf00      	nop
 80091e0:	e7fe      	b.n	80091e0 <prvTaskExitError+0x28>
	__asm volatile
 80091e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	60bb      	str	r3, [r7, #8]
}
 80091f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80091f6:	bf00      	nop
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d0fc      	beq.n	80091f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80091fe:	bf00      	nop
 8009200:	bf00      	nop
 8009202:	3714      	adds	r7, #20
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	20000024 	.word	0x20000024

08009210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009210:	4b07      	ldr	r3, [pc, #28]	; (8009230 <pxCurrentTCBConst2>)
 8009212:	6819      	ldr	r1, [r3, #0]
 8009214:	6808      	ldr	r0, [r1, #0]
 8009216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921a:	f380 8809 	msr	PSP, r0
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f04f 0000 	mov.w	r0, #0
 8009226:	f380 8811 	msr	BASEPRI, r0
 800922a:	4770      	bx	lr
 800922c:	f3af 8000 	nop.w

08009230 <pxCurrentTCBConst2>:
 8009230:	20000974 	.word	0x20000974
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009234:	bf00      	nop
 8009236:	bf00      	nop

08009238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009238:	4808      	ldr	r0, [pc, #32]	; (800925c <prvPortStartFirstTask+0x24>)
 800923a:	6800      	ldr	r0, [r0, #0]
 800923c:	6800      	ldr	r0, [r0, #0]
 800923e:	f380 8808 	msr	MSP, r0
 8009242:	f04f 0000 	mov.w	r0, #0
 8009246:	f380 8814 	msr	CONTROL, r0
 800924a:	b662      	cpsie	i
 800924c:	b661      	cpsie	f
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	df00      	svc	0
 8009258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800925a:	bf00      	nop
 800925c:	e000ed08 	.word	0xe000ed08

08009260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009266:	4b46      	ldr	r3, [pc, #280]	; (8009380 <xPortStartScheduler+0x120>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a46      	ldr	r2, [pc, #280]	; (8009384 <xPortStartScheduler+0x124>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d10a      	bne.n	8009286 <xPortStartScheduler+0x26>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	613b      	str	r3, [r7, #16]
}
 8009282:	bf00      	nop
 8009284:	e7fe      	b.n	8009284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009286:	4b3e      	ldr	r3, [pc, #248]	; (8009380 <xPortStartScheduler+0x120>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a3f      	ldr	r2, [pc, #252]	; (8009388 <xPortStartScheduler+0x128>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d10a      	bne.n	80092a6 <xPortStartScheduler+0x46>
	__asm volatile
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	60fb      	str	r3, [r7, #12]
}
 80092a2:	bf00      	nop
 80092a4:	e7fe      	b.n	80092a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092a6:	4b39      	ldr	r3, [pc, #228]	; (800938c <xPortStartScheduler+0x12c>)
 80092a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	22ff      	movs	r2, #255	; 0xff
 80092b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	4b31      	ldr	r3, [pc, #196]	; (8009390 <xPortStartScheduler+0x130>)
 80092cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092ce:	4b31      	ldr	r3, [pc, #196]	; (8009394 <xPortStartScheduler+0x134>)
 80092d0:	2207      	movs	r2, #7
 80092d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092d4:	e009      	b.n	80092ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80092d6:	4b2f      	ldr	r3, [pc, #188]	; (8009394 <xPortStartScheduler+0x134>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3b01      	subs	r3, #1
 80092dc:	4a2d      	ldr	r2, [pc, #180]	; (8009394 <xPortStartScheduler+0x134>)
 80092de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092ea:	78fb      	ldrb	r3, [r7, #3]
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f2:	2b80      	cmp	r3, #128	; 0x80
 80092f4:	d0ef      	beq.n	80092d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092f6:	4b27      	ldr	r3, [pc, #156]	; (8009394 <xPortStartScheduler+0x134>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f1c3 0307 	rsb	r3, r3, #7
 80092fe:	2b04      	cmp	r3, #4
 8009300:	d00a      	beq.n	8009318 <xPortStartScheduler+0xb8>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	60bb      	str	r3, [r7, #8]
}
 8009314:	bf00      	nop
 8009316:	e7fe      	b.n	8009316 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009318:	4b1e      	ldr	r3, [pc, #120]	; (8009394 <xPortStartScheduler+0x134>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	021b      	lsls	r3, r3, #8
 800931e:	4a1d      	ldr	r2, [pc, #116]	; (8009394 <xPortStartScheduler+0x134>)
 8009320:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009322:	4b1c      	ldr	r3, [pc, #112]	; (8009394 <xPortStartScheduler+0x134>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800932a:	4a1a      	ldr	r2, [pc, #104]	; (8009394 <xPortStartScheduler+0x134>)
 800932c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	b2da      	uxtb	r2, r3
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009336:	4b18      	ldr	r3, [pc, #96]	; (8009398 <xPortStartScheduler+0x138>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a17      	ldr	r2, [pc, #92]	; (8009398 <xPortStartScheduler+0x138>)
 800933c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009342:	4b15      	ldr	r3, [pc, #84]	; (8009398 <xPortStartScheduler+0x138>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a14      	ldr	r2, [pc, #80]	; (8009398 <xPortStartScheduler+0x138>)
 8009348:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800934c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800934e:	f000 f8dd 	bl	800950c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009352:	4b12      	ldr	r3, [pc, #72]	; (800939c <xPortStartScheduler+0x13c>)
 8009354:	2200      	movs	r2, #0
 8009356:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009358:	f000 f8fc 	bl	8009554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800935c:	4b10      	ldr	r3, [pc, #64]	; (80093a0 <xPortStartScheduler+0x140>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a0f      	ldr	r2, [pc, #60]	; (80093a0 <xPortStartScheduler+0x140>)
 8009362:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009366:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009368:	f7ff ff66 	bl	8009238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800936c:	f7ff f856 	bl	800841c <vTaskSwitchContext>
	prvTaskExitError();
 8009370:	f7ff ff22 	bl	80091b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	e000ed00 	.word	0xe000ed00
 8009384:	410fc271 	.word	0x410fc271
 8009388:	410fc270 	.word	0x410fc270
 800938c:	e000e400 	.word	0xe000e400
 8009390:	20000fa0 	.word	0x20000fa0
 8009394:	20000fa4 	.word	0x20000fa4
 8009398:	e000ed20 	.word	0xe000ed20
 800939c:	20000024 	.word	0x20000024
 80093a0:	e000ef34 	.word	0xe000ef34

080093a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
	__asm volatile
 80093aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	607b      	str	r3, [r7, #4]
}
 80093bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093be:	4b0f      	ldr	r3, [pc, #60]	; (80093fc <vPortEnterCritical+0x58>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	3301      	adds	r3, #1
 80093c4:	4a0d      	ldr	r2, [pc, #52]	; (80093fc <vPortEnterCritical+0x58>)
 80093c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093c8:	4b0c      	ldr	r3, [pc, #48]	; (80093fc <vPortEnterCritical+0x58>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d10f      	bne.n	80093f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093d0:	4b0b      	ldr	r3, [pc, #44]	; (8009400 <vPortEnterCritical+0x5c>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00a      	beq.n	80093f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	603b      	str	r3, [r7, #0]
}
 80093ec:	bf00      	nop
 80093ee:	e7fe      	b.n	80093ee <vPortEnterCritical+0x4a>
	}
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr
 80093fc:	20000024 	.word	0x20000024
 8009400:	e000ed04 	.word	0xe000ed04

08009404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800940a:	4b12      	ldr	r3, [pc, #72]	; (8009454 <vPortExitCritical+0x50>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10a      	bne.n	8009428 <vPortExitCritical+0x24>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	607b      	str	r3, [r7, #4]
}
 8009424:	bf00      	nop
 8009426:	e7fe      	b.n	8009426 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009428:	4b0a      	ldr	r3, [pc, #40]	; (8009454 <vPortExitCritical+0x50>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3b01      	subs	r3, #1
 800942e:	4a09      	ldr	r2, [pc, #36]	; (8009454 <vPortExitCritical+0x50>)
 8009430:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009432:	4b08      	ldr	r3, [pc, #32]	; (8009454 <vPortExitCritical+0x50>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d105      	bne.n	8009446 <vPortExitCritical+0x42>
 800943a:	2300      	movs	r3, #0
 800943c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	f383 8811 	msr	BASEPRI, r3
}
 8009444:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009446:	bf00      	nop
 8009448:	370c      	adds	r7, #12
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	20000024 	.word	0x20000024
	...

08009460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009460:	f3ef 8009 	mrs	r0, PSP
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	4b15      	ldr	r3, [pc, #84]	; (80094c0 <pxCurrentTCBConst>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	f01e 0f10 	tst.w	lr, #16
 8009470:	bf08      	it	eq
 8009472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947a:	6010      	str	r0, [r2, #0]
 800947c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009484:	f380 8811 	msr	BASEPRI, r0
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f7fe ffc4 	bl	800841c <vTaskSwitchContext>
 8009494:	f04f 0000 	mov.w	r0, #0
 8009498:	f380 8811 	msr	BASEPRI, r0
 800949c:	bc09      	pop	{r0, r3}
 800949e:	6819      	ldr	r1, [r3, #0]
 80094a0:	6808      	ldr	r0, [r1, #0]
 80094a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a6:	f01e 0f10 	tst.w	lr, #16
 80094aa:	bf08      	it	eq
 80094ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80094b0:	f380 8809 	msr	PSP, r0
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	f3af 8000 	nop.w

080094c0 <pxCurrentTCBConst>:
 80094c0:	20000974 	.word	0x20000974
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094c4:	bf00      	nop
 80094c6:	bf00      	nop

080094c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
	__asm volatile
 80094ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	607b      	str	r3, [r7, #4]
}
 80094e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80094e2:	f7fe fee1 	bl	80082a8 <xTaskIncrementTick>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d003      	beq.n	80094f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094ec:	4b06      	ldr	r3, [pc, #24]	; (8009508 <xPortSysTickHandler+0x40>)
 80094ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	2300      	movs	r3, #0
 80094f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	f383 8811 	msr	BASEPRI, r3
}
 80094fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009500:	bf00      	nop
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	e000ed04 	.word	0xe000ed04

0800950c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800950c:	b480      	push	{r7}
 800950e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009510:	4b0b      	ldr	r3, [pc, #44]	; (8009540 <vPortSetupTimerInterrupt+0x34>)
 8009512:	2200      	movs	r2, #0
 8009514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009516:	4b0b      	ldr	r3, [pc, #44]	; (8009544 <vPortSetupTimerInterrupt+0x38>)
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800951c:	4b0a      	ldr	r3, [pc, #40]	; (8009548 <vPortSetupTimerInterrupt+0x3c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a0a      	ldr	r2, [pc, #40]	; (800954c <vPortSetupTimerInterrupt+0x40>)
 8009522:	fba2 2303 	umull	r2, r3, r2, r3
 8009526:	099b      	lsrs	r3, r3, #6
 8009528:	4a09      	ldr	r2, [pc, #36]	; (8009550 <vPortSetupTimerInterrupt+0x44>)
 800952a:	3b01      	subs	r3, #1
 800952c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800952e:	4b04      	ldr	r3, [pc, #16]	; (8009540 <vPortSetupTimerInterrupt+0x34>)
 8009530:	2207      	movs	r2, #7
 8009532:	601a      	str	r2, [r3, #0]
}
 8009534:	bf00      	nop
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	e000e010 	.word	0xe000e010
 8009544:	e000e018 	.word	0xe000e018
 8009548:	20000000 	.word	0x20000000
 800954c:	10624dd3 	.word	0x10624dd3
 8009550:	e000e014 	.word	0xe000e014

08009554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009564 <vPortEnableVFP+0x10>
 8009558:	6801      	ldr	r1, [r0, #0]
 800955a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800955e:	6001      	str	r1, [r0, #0]
 8009560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009562:	bf00      	nop
 8009564:	e000ed88 	.word	0xe000ed88

08009568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800956e:	f3ef 8305 	mrs	r3, IPSR
 8009572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2b0f      	cmp	r3, #15
 8009578:	d914      	bls.n	80095a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800957a:	4a17      	ldr	r2, [pc, #92]	; (80095d8 <vPortValidateInterruptPriority+0x70>)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	4413      	add	r3, r2
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009584:	4b15      	ldr	r3, [pc, #84]	; (80095dc <vPortValidateInterruptPriority+0x74>)
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	7afa      	ldrb	r2, [r7, #11]
 800958a:	429a      	cmp	r2, r3
 800958c:	d20a      	bcs.n	80095a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	607b      	str	r3, [r7, #4]
}
 80095a0:	bf00      	nop
 80095a2:	e7fe      	b.n	80095a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80095a4:	4b0e      	ldr	r3, [pc, #56]	; (80095e0 <vPortValidateInterruptPriority+0x78>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80095ac:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <vPortValidateInterruptPriority+0x7c>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d90a      	bls.n	80095ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	603b      	str	r3, [r7, #0]
}
 80095c6:	bf00      	nop
 80095c8:	e7fe      	b.n	80095c8 <vPortValidateInterruptPriority+0x60>
	}
 80095ca:	bf00      	nop
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	e000e3f0 	.word	0xe000e3f0
 80095dc:	20000fa0 	.word	0x20000fa0
 80095e0:	e000ed0c 	.word	0xe000ed0c
 80095e4:	20000fa4 	.word	0x20000fa4

080095e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08a      	sub	sp, #40	; 0x28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80095f0:	2300      	movs	r3, #0
 80095f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80095f4:	f7fe fd9c 	bl	8008130 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80095f8:	4b5b      	ldr	r3, [pc, #364]	; (8009768 <pvPortMalloc+0x180>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d101      	bne.n	8009604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009600:	f000 f920 	bl	8009844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009604:	4b59      	ldr	r3, [pc, #356]	; (800976c <pvPortMalloc+0x184>)
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4013      	ands	r3, r2
 800960c:	2b00      	cmp	r3, #0
 800960e:	f040 8093 	bne.w	8009738 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d01d      	beq.n	8009654 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009618:	2208      	movs	r2, #8
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4413      	add	r3, r2
 800961e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f003 0307 	and.w	r3, r3, #7
 8009626:	2b00      	cmp	r3, #0
 8009628:	d014      	beq.n	8009654 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f023 0307 	bic.w	r3, r3, #7
 8009630:	3308      	adds	r3, #8
 8009632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f003 0307 	and.w	r3, r3, #7
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00a      	beq.n	8009654 <pvPortMalloc+0x6c>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	617b      	str	r3, [r7, #20]
}
 8009650:	bf00      	nop
 8009652:	e7fe      	b.n	8009652 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d06e      	beq.n	8009738 <pvPortMalloc+0x150>
 800965a:	4b45      	ldr	r3, [pc, #276]	; (8009770 <pvPortMalloc+0x188>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	429a      	cmp	r2, r3
 8009662:	d869      	bhi.n	8009738 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009664:	4b43      	ldr	r3, [pc, #268]	; (8009774 <pvPortMalloc+0x18c>)
 8009666:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009668:	4b42      	ldr	r3, [pc, #264]	; (8009774 <pvPortMalloc+0x18c>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800966e:	e004      	b.n	800967a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800967a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	429a      	cmp	r2, r3
 8009682:	d903      	bls.n	800968c <pvPortMalloc+0xa4>
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1f1      	bne.n	8009670 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800968c:	4b36      	ldr	r3, [pc, #216]	; (8009768 <pvPortMalloc+0x180>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009692:	429a      	cmp	r2, r3
 8009694:	d050      	beq.n	8009738 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009696:	6a3b      	ldr	r3, [r7, #32]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2208      	movs	r2, #8
 800969c:	4413      	add	r3, r2
 800969e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	6a3b      	ldr	r3, [r7, #32]
 80096a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	1ad2      	subs	r2, r2, r3
 80096b0:	2308      	movs	r3, #8
 80096b2:	005b      	lsls	r3, r3, #1
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d91f      	bls.n	80096f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4413      	add	r3, r2
 80096be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	f003 0307 	and.w	r3, r3, #7
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00a      	beq.n	80096e0 <pvPortMalloc+0xf8>
	__asm volatile
 80096ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	613b      	str	r3, [r7, #16]
}
 80096dc:	bf00      	nop
 80096de:	e7fe      	b.n	80096de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	685a      	ldr	r2, [r3, #4]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	1ad2      	subs	r2, r2, r3
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096f2:	69b8      	ldr	r0, [r7, #24]
 80096f4:	f000 f908 	bl	8009908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096f8:	4b1d      	ldr	r3, [pc, #116]	; (8009770 <pvPortMalloc+0x188>)
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	4a1b      	ldr	r2, [pc, #108]	; (8009770 <pvPortMalloc+0x188>)
 8009704:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009706:	4b1a      	ldr	r3, [pc, #104]	; (8009770 <pvPortMalloc+0x188>)
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	4b1b      	ldr	r3, [pc, #108]	; (8009778 <pvPortMalloc+0x190>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	429a      	cmp	r2, r3
 8009710:	d203      	bcs.n	800971a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009712:	4b17      	ldr	r3, [pc, #92]	; (8009770 <pvPortMalloc+0x188>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a18      	ldr	r2, [pc, #96]	; (8009778 <pvPortMalloc+0x190>)
 8009718:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	4b13      	ldr	r3, [pc, #76]	; (800976c <pvPortMalloc+0x184>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	431a      	orrs	r2, r3
 8009724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009726:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	2200      	movs	r2, #0
 800972c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800972e:	4b13      	ldr	r3, [pc, #76]	; (800977c <pvPortMalloc+0x194>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3301      	adds	r3, #1
 8009734:	4a11      	ldr	r2, [pc, #68]	; (800977c <pvPortMalloc+0x194>)
 8009736:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009738:	f7fe fd08 	bl	800814c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	f003 0307 	and.w	r3, r3, #7
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00a      	beq.n	800975c <pvPortMalloc+0x174>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	60fb      	str	r3, [r7, #12]
}
 8009758:	bf00      	nop
 800975a:	e7fe      	b.n	800975a <pvPortMalloc+0x172>
	return pvReturn;
 800975c:	69fb      	ldr	r3, [r7, #28]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3728      	adds	r7, #40	; 0x28
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	20007158 	.word	0x20007158
 800976c:	2000716c 	.word	0x2000716c
 8009770:	2000715c 	.word	0x2000715c
 8009774:	20007150 	.word	0x20007150
 8009778:	20007160 	.word	0x20007160
 800977c:	20007164 	.word	0x20007164

08009780 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d04d      	beq.n	800982e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009792:	2308      	movs	r3, #8
 8009794:	425b      	negs	r3, r3
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	4413      	add	r3, r2
 800979a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	4b24      	ldr	r3, [pc, #144]	; (8009838 <vPortFree+0xb8>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4013      	ands	r3, r2
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <vPortFree+0x44>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	60fb      	str	r3, [r7, #12]
}
 80097c0:	bf00      	nop
 80097c2:	e7fe      	b.n	80097c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00a      	beq.n	80097e2 <vPortFree+0x62>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	60bb      	str	r3, [r7, #8]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	4b14      	ldr	r3, [pc, #80]	; (8009838 <vPortFree+0xb8>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4013      	ands	r3, r2
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d01e      	beq.n	800982e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d11a      	bne.n	800982e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	4b0e      	ldr	r3, [pc, #56]	; (8009838 <vPortFree+0xb8>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	43db      	mvns	r3, r3
 8009802:	401a      	ands	r2, r3
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009808:	f7fe fc92 	bl	8008130 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	685a      	ldr	r2, [r3, #4]
 8009810:	4b0a      	ldr	r3, [pc, #40]	; (800983c <vPortFree+0xbc>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4413      	add	r3, r2
 8009816:	4a09      	ldr	r2, [pc, #36]	; (800983c <vPortFree+0xbc>)
 8009818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800981a:	6938      	ldr	r0, [r7, #16]
 800981c:	f000 f874 	bl	8009908 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009820:	4b07      	ldr	r3, [pc, #28]	; (8009840 <vPortFree+0xc0>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	3301      	adds	r3, #1
 8009826:	4a06      	ldr	r2, [pc, #24]	; (8009840 <vPortFree+0xc0>)
 8009828:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800982a:	f7fe fc8f 	bl	800814c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800982e:	bf00      	nop
 8009830:	3718      	adds	r7, #24
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	2000716c 	.word	0x2000716c
 800983c:	2000715c 	.word	0x2000715c
 8009840:	20007168 	.word	0x20007168

08009844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800984a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800984e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009850:	4b27      	ldr	r3, [pc, #156]	; (80098f0 <prvHeapInit+0xac>)
 8009852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f003 0307 	and.w	r3, r3, #7
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00c      	beq.n	8009878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3307      	adds	r3, #7
 8009862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f023 0307 	bic.w	r3, r3, #7
 800986a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800986c:	68ba      	ldr	r2, [r7, #8]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	4a1f      	ldr	r2, [pc, #124]	; (80098f0 <prvHeapInit+0xac>)
 8009874:	4413      	add	r3, r2
 8009876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800987c:	4a1d      	ldr	r2, [pc, #116]	; (80098f4 <prvHeapInit+0xb0>)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009882:	4b1c      	ldr	r3, [pc, #112]	; (80098f4 <prvHeapInit+0xb0>)
 8009884:	2200      	movs	r2, #0
 8009886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	4413      	add	r3, r2
 800988e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009890:	2208      	movs	r2, #8
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	1a9b      	subs	r3, r3, r2
 8009896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f023 0307 	bic.w	r3, r3, #7
 800989e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	4a15      	ldr	r2, [pc, #84]	; (80098f8 <prvHeapInit+0xb4>)
 80098a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80098a6:	4b14      	ldr	r3, [pc, #80]	; (80098f8 <prvHeapInit+0xb4>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2200      	movs	r2, #0
 80098ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80098ae:	4b12      	ldr	r3, [pc, #72]	; (80098f8 <prvHeapInit+0xb4>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2200      	movs	r2, #0
 80098b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	1ad2      	subs	r2, r2, r3
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098c4:	4b0c      	ldr	r3, [pc, #48]	; (80098f8 <prvHeapInit+0xb4>)
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	4a0a      	ldr	r2, [pc, #40]	; (80098fc <prvHeapInit+0xb8>)
 80098d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	4a09      	ldr	r2, [pc, #36]	; (8009900 <prvHeapInit+0xbc>)
 80098da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80098dc:	4b09      	ldr	r3, [pc, #36]	; (8009904 <prvHeapInit+0xc0>)
 80098de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80098e2:	601a      	str	r2, [r3, #0]
}
 80098e4:	bf00      	nop
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr
 80098f0:	20000fa8 	.word	0x20000fa8
 80098f4:	20007150 	.word	0x20007150
 80098f8:	20007158 	.word	0x20007158
 80098fc:	20007160 	.word	0x20007160
 8009900:	2000715c 	.word	0x2000715c
 8009904:	2000716c 	.word	0x2000716c

08009908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009910:	4b28      	ldr	r3, [pc, #160]	; (80099b4 <prvInsertBlockIntoFreeList+0xac>)
 8009912:	60fb      	str	r3, [r7, #12]
 8009914:	e002      	b.n	800991c <prvInsertBlockIntoFreeList+0x14>
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	60fb      	str	r3, [r7, #12]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	429a      	cmp	r2, r3
 8009924:	d8f7      	bhi.n	8009916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	4413      	add	r3, r2
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	429a      	cmp	r2, r3
 8009936:	d108      	bne.n	800994a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	441a      	add	r2, r3
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	441a      	add	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	429a      	cmp	r2, r3
 800995c:	d118      	bne.n	8009990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	4b15      	ldr	r3, [pc, #84]	; (80099b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	429a      	cmp	r2, r3
 8009968:	d00d      	beq.n	8009986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	441a      	add	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	e008      	b.n	8009998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009986:	4b0c      	ldr	r3, [pc, #48]	; (80099b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	601a      	str	r2, [r3, #0]
 800998e:	e003      	b.n	8009998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	429a      	cmp	r2, r3
 800999e:	d002      	beq.n	80099a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099a6:	bf00      	nop
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	20007150 	.word	0x20007150
 80099b8:	20007158 	.word	0x20007158

080099bc <atof>:
 80099bc:	2100      	movs	r1, #0
 80099be:	f001 bb51 	b.w	800b064 <strtod>
	...

080099c4 <__errno>:
 80099c4:	4b01      	ldr	r3, [pc, #4]	; (80099cc <__errno+0x8>)
 80099c6:	6818      	ldr	r0, [r3, #0]
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	20000028 	.word	0x20000028

080099d0 <__libc_init_array>:
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	4d0d      	ldr	r5, [pc, #52]	; (8009a08 <__libc_init_array+0x38>)
 80099d4:	4c0d      	ldr	r4, [pc, #52]	; (8009a0c <__libc_init_array+0x3c>)
 80099d6:	1b64      	subs	r4, r4, r5
 80099d8:	10a4      	asrs	r4, r4, #2
 80099da:	2600      	movs	r6, #0
 80099dc:	42a6      	cmp	r6, r4
 80099de:	d109      	bne.n	80099f4 <__libc_init_array+0x24>
 80099e0:	4d0b      	ldr	r5, [pc, #44]	; (8009a10 <__libc_init_array+0x40>)
 80099e2:	4c0c      	ldr	r4, [pc, #48]	; (8009a14 <__libc_init_array+0x44>)
 80099e4:	f005 fe76 	bl	800f6d4 <_init>
 80099e8:	1b64      	subs	r4, r4, r5
 80099ea:	10a4      	asrs	r4, r4, #2
 80099ec:	2600      	movs	r6, #0
 80099ee:	42a6      	cmp	r6, r4
 80099f0:	d105      	bne.n	80099fe <__libc_init_array+0x2e>
 80099f2:	bd70      	pop	{r4, r5, r6, pc}
 80099f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80099f8:	4798      	blx	r3
 80099fa:	3601      	adds	r6, #1
 80099fc:	e7ee      	b.n	80099dc <__libc_init_array+0xc>
 80099fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a02:	4798      	blx	r3
 8009a04:	3601      	adds	r6, #1
 8009a06:	e7f2      	b.n	80099ee <__libc_init_array+0x1e>
 8009a08:	080104f0 	.word	0x080104f0
 8009a0c:	080104f0 	.word	0x080104f0
 8009a10:	080104f0 	.word	0x080104f0
 8009a14:	080104f4 	.word	0x080104f4

08009a18 <memcpy>:
 8009a18:	440a      	add	r2, r1
 8009a1a:	4291      	cmp	r1, r2
 8009a1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a20:	d100      	bne.n	8009a24 <memcpy+0xc>
 8009a22:	4770      	bx	lr
 8009a24:	b510      	push	{r4, lr}
 8009a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a2e:	4291      	cmp	r1, r2
 8009a30:	d1f9      	bne.n	8009a26 <memcpy+0xe>
 8009a32:	bd10      	pop	{r4, pc}

08009a34 <memset>:
 8009a34:	4402      	add	r2, r0
 8009a36:	4603      	mov	r3, r0
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d100      	bne.n	8009a3e <memset+0xa>
 8009a3c:	4770      	bx	lr
 8009a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a42:	e7f9      	b.n	8009a38 <memset+0x4>

08009a44 <__cvt>:
 8009a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a48:	ec55 4b10 	vmov	r4, r5, d0
 8009a4c:	2d00      	cmp	r5, #0
 8009a4e:	460e      	mov	r6, r1
 8009a50:	4619      	mov	r1, r3
 8009a52:	462b      	mov	r3, r5
 8009a54:	bfbb      	ittet	lt
 8009a56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009a5a:	461d      	movlt	r5, r3
 8009a5c:	2300      	movge	r3, #0
 8009a5e:	232d      	movlt	r3, #45	; 0x2d
 8009a60:	700b      	strb	r3, [r1, #0]
 8009a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009a68:	4691      	mov	r9, r2
 8009a6a:	f023 0820 	bic.w	r8, r3, #32
 8009a6e:	bfbc      	itt	lt
 8009a70:	4622      	movlt	r2, r4
 8009a72:	4614      	movlt	r4, r2
 8009a74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a78:	d005      	beq.n	8009a86 <__cvt+0x42>
 8009a7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009a7e:	d100      	bne.n	8009a82 <__cvt+0x3e>
 8009a80:	3601      	adds	r6, #1
 8009a82:	2102      	movs	r1, #2
 8009a84:	e000      	b.n	8009a88 <__cvt+0x44>
 8009a86:	2103      	movs	r1, #3
 8009a88:	ab03      	add	r3, sp, #12
 8009a8a:	9301      	str	r3, [sp, #4]
 8009a8c:	ab02      	add	r3, sp, #8
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	ec45 4b10 	vmov	d0, r4, r5
 8009a94:	4653      	mov	r3, sl
 8009a96:	4632      	mov	r2, r6
 8009a98:	f001 fbf6 	bl	800b288 <_dtoa_r>
 8009a9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	d102      	bne.n	8009aaa <__cvt+0x66>
 8009aa4:	f019 0f01 	tst.w	r9, #1
 8009aa8:	d022      	beq.n	8009af0 <__cvt+0xac>
 8009aaa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009aae:	eb07 0906 	add.w	r9, r7, r6
 8009ab2:	d110      	bne.n	8009ad6 <__cvt+0x92>
 8009ab4:	783b      	ldrb	r3, [r7, #0]
 8009ab6:	2b30      	cmp	r3, #48	; 0x30
 8009ab8:	d10a      	bne.n	8009ad0 <__cvt+0x8c>
 8009aba:	2200      	movs	r2, #0
 8009abc:	2300      	movs	r3, #0
 8009abe:	4620      	mov	r0, r4
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	f7f7 f809 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ac6:	b918      	cbnz	r0, 8009ad0 <__cvt+0x8c>
 8009ac8:	f1c6 0601 	rsb	r6, r6, #1
 8009acc:	f8ca 6000 	str.w	r6, [sl]
 8009ad0:	f8da 3000 	ldr.w	r3, [sl]
 8009ad4:	4499      	add	r9, r3
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	2300      	movs	r3, #0
 8009ada:	4620      	mov	r0, r4
 8009adc:	4629      	mov	r1, r5
 8009ade:	f7f6 fffb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ae2:	b108      	cbz	r0, 8009ae8 <__cvt+0xa4>
 8009ae4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ae8:	2230      	movs	r2, #48	; 0x30
 8009aea:	9b03      	ldr	r3, [sp, #12]
 8009aec:	454b      	cmp	r3, r9
 8009aee:	d307      	bcc.n	8009b00 <__cvt+0xbc>
 8009af0:	9b03      	ldr	r3, [sp, #12]
 8009af2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009af4:	1bdb      	subs	r3, r3, r7
 8009af6:	4638      	mov	r0, r7
 8009af8:	6013      	str	r3, [r2, #0]
 8009afa:	b004      	add	sp, #16
 8009afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b00:	1c59      	adds	r1, r3, #1
 8009b02:	9103      	str	r1, [sp, #12]
 8009b04:	701a      	strb	r2, [r3, #0]
 8009b06:	e7f0      	b.n	8009aea <__cvt+0xa6>

08009b08 <__exponent>:
 8009b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	bfb8      	it	lt
 8009b10:	4249      	neglt	r1, r1
 8009b12:	f803 2b02 	strb.w	r2, [r3], #2
 8009b16:	bfb4      	ite	lt
 8009b18:	222d      	movlt	r2, #45	; 0x2d
 8009b1a:	222b      	movge	r2, #43	; 0x2b
 8009b1c:	2909      	cmp	r1, #9
 8009b1e:	7042      	strb	r2, [r0, #1]
 8009b20:	dd2a      	ble.n	8009b78 <__exponent+0x70>
 8009b22:	f10d 0407 	add.w	r4, sp, #7
 8009b26:	46a4      	mov	ip, r4
 8009b28:	270a      	movs	r7, #10
 8009b2a:	46a6      	mov	lr, r4
 8009b2c:	460a      	mov	r2, r1
 8009b2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009b32:	fb07 1516 	mls	r5, r7, r6, r1
 8009b36:	3530      	adds	r5, #48	; 0x30
 8009b38:	2a63      	cmp	r2, #99	; 0x63
 8009b3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009b3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009b42:	4631      	mov	r1, r6
 8009b44:	dcf1      	bgt.n	8009b2a <__exponent+0x22>
 8009b46:	3130      	adds	r1, #48	; 0x30
 8009b48:	f1ae 0502 	sub.w	r5, lr, #2
 8009b4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009b50:	1c44      	adds	r4, r0, #1
 8009b52:	4629      	mov	r1, r5
 8009b54:	4561      	cmp	r1, ip
 8009b56:	d30a      	bcc.n	8009b6e <__exponent+0x66>
 8009b58:	f10d 0209 	add.w	r2, sp, #9
 8009b5c:	eba2 020e 	sub.w	r2, r2, lr
 8009b60:	4565      	cmp	r5, ip
 8009b62:	bf88      	it	hi
 8009b64:	2200      	movhi	r2, #0
 8009b66:	4413      	add	r3, r2
 8009b68:	1a18      	subs	r0, r3, r0
 8009b6a:	b003      	add	sp, #12
 8009b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009b76:	e7ed      	b.n	8009b54 <__exponent+0x4c>
 8009b78:	2330      	movs	r3, #48	; 0x30
 8009b7a:	3130      	adds	r1, #48	; 0x30
 8009b7c:	7083      	strb	r3, [r0, #2]
 8009b7e:	70c1      	strb	r1, [r0, #3]
 8009b80:	1d03      	adds	r3, r0, #4
 8009b82:	e7f1      	b.n	8009b68 <__exponent+0x60>

08009b84 <_printf_float>:
 8009b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b88:	ed2d 8b02 	vpush	{d8}
 8009b8c:	b08d      	sub	sp, #52	; 0x34
 8009b8e:	460c      	mov	r4, r1
 8009b90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b94:	4616      	mov	r6, r2
 8009b96:	461f      	mov	r7, r3
 8009b98:	4605      	mov	r5, r0
 8009b9a:	f002 fce3 	bl	800c564 <_localeconv_r>
 8009b9e:	f8d0 a000 	ldr.w	sl, [r0]
 8009ba2:	4650      	mov	r0, sl
 8009ba4:	f7f6 fb1c 	bl	80001e0 <strlen>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	930a      	str	r3, [sp, #40]	; 0x28
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	9305      	str	r3, [sp, #20]
 8009bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8009bb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009bb8:	3307      	adds	r3, #7
 8009bba:	f023 0307 	bic.w	r3, r3, #7
 8009bbe:	f103 0208 	add.w	r2, r3, #8
 8009bc2:	f8c8 2000 	str.w	r2, [r8]
 8009bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009bce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009bd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009bd6:	9307      	str	r3, [sp, #28]
 8009bd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8009bdc:	ee08 0a10 	vmov	s16, r0
 8009be0:	4b9f      	ldr	r3, [pc, #636]	; (8009e60 <_printf_float+0x2dc>)
 8009be2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009be6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bea:	f7f6 ffa7 	bl	8000b3c <__aeabi_dcmpun>
 8009bee:	bb88      	cbnz	r0, 8009c54 <_printf_float+0xd0>
 8009bf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bf4:	4b9a      	ldr	r3, [pc, #616]	; (8009e60 <_printf_float+0x2dc>)
 8009bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfa:	f7f6 ff81 	bl	8000b00 <__aeabi_dcmple>
 8009bfe:	bb48      	cbnz	r0, 8009c54 <_printf_float+0xd0>
 8009c00:	2200      	movs	r2, #0
 8009c02:	2300      	movs	r3, #0
 8009c04:	4640      	mov	r0, r8
 8009c06:	4649      	mov	r1, r9
 8009c08:	f7f6 ff70 	bl	8000aec <__aeabi_dcmplt>
 8009c0c:	b110      	cbz	r0, 8009c14 <_printf_float+0x90>
 8009c0e:	232d      	movs	r3, #45	; 0x2d
 8009c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c14:	4b93      	ldr	r3, [pc, #588]	; (8009e64 <_printf_float+0x2e0>)
 8009c16:	4894      	ldr	r0, [pc, #592]	; (8009e68 <_printf_float+0x2e4>)
 8009c18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009c1c:	bf94      	ite	ls
 8009c1e:	4698      	movls	r8, r3
 8009c20:	4680      	movhi	r8, r0
 8009c22:	2303      	movs	r3, #3
 8009c24:	6123      	str	r3, [r4, #16]
 8009c26:	9b05      	ldr	r3, [sp, #20]
 8009c28:	f023 0204 	bic.w	r2, r3, #4
 8009c2c:	6022      	str	r2, [r4, #0]
 8009c2e:	f04f 0900 	mov.w	r9, #0
 8009c32:	9700      	str	r7, [sp, #0]
 8009c34:	4633      	mov	r3, r6
 8009c36:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c38:	4621      	mov	r1, r4
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	f000 f9d8 	bl	8009ff0 <_printf_common>
 8009c40:	3001      	adds	r0, #1
 8009c42:	f040 8090 	bne.w	8009d66 <_printf_float+0x1e2>
 8009c46:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4a:	b00d      	add	sp, #52	; 0x34
 8009c4c:	ecbd 8b02 	vpop	{d8}
 8009c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c54:	4642      	mov	r2, r8
 8009c56:	464b      	mov	r3, r9
 8009c58:	4640      	mov	r0, r8
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	f7f6 ff6e 	bl	8000b3c <__aeabi_dcmpun>
 8009c60:	b140      	cbz	r0, 8009c74 <_printf_float+0xf0>
 8009c62:	464b      	mov	r3, r9
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bfbc      	itt	lt
 8009c68:	232d      	movlt	r3, #45	; 0x2d
 8009c6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c6e:	487f      	ldr	r0, [pc, #508]	; (8009e6c <_printf_float+0x2e8>)
 8009c70:	4b7f      	ldr	r3, [pc, #508]	; (8009e70 <_printf_float+0x2ec>)
 8009c72:	e7d1      	b.n	8009c18 <_printf_float+0x94>
 8009c74:	6863      	ldr	r3, [r4, #4]
 8009c76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009c7a:	9206      	str	r2, [sp, #24]
 8009c7c:	1c5a      	adds	r2, r3, #1
 8009c7e:	d13f      	bne.n	8009d00 <_printf_float+0x17c>
 8009c80:	2306      	movs	r3, #6
 8009c82:	6063      	str	r3, [r4, #4]
 8009c84:	9b05      	ldr	r3, [sp, #20]
 8009c86:	6861      	ldr	r1, [r4, #4]
 8009c88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	9303      	str	r3, [sp, #12]
 8009c90:	ab0a      	add	r3, sp, #40	; 0x28
 8009c92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009c96:	ab09      	add	r3, sp, #36	; 0x24
 8009c98:	ec49 8b10 	vmov	d0, r8, r9
 8009c9c:	9300      	str	r3, [sp, #0]
 8009c9e:	6022      	str	r2, [r4, #0]
 8009ca0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f7ff fecd 	bl	8009a44 <__cvt>
 8009caa:	9b06      	ldr	r3, [sp, #24]
 8009cac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cae:	2b47      	cmp	r3, #71	; 0x47
 8009cb0:	4680      	mov	r8, r0
 8009cb2:	d108      	bne.n	8009cc6 <_printf_float+0x142>
 8009cb4:	1cc8      	adds	r0, r1, #3
 8009cb6:	db02      	blt.n	8009cbe <_printf_float+0x13a>
 8009cb8:	6863      	ldr	r3, [r4, #4]
 8009cba:	4299      	cmp	r1, r3
 8009cbc:	dd41      	ble.n	8009d42 <_printf_float+0x1be>
 8009cbe:	f1ab 0b02 	sub.w	fp, fp, #2
 8009cc2:	fa5f fb8b 	uxtb.w	fp, fp
 8009cc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009cca:	d820      	bhi.n	8009d0e <_printf_float+0x18a>
 8009ccc:	3901      	subs	r1, #1
 8009cce:	465a      	mov	r2, fp
 8009cd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009cd4:	9109      	str	r1, [sp, #36]	; 0x24
 8009cd6:	f7ff ff17 	bl	8009b08 <__exponent>
 8009cda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cdc:	1813      	adds	r3, r2, r0
 8009cde:	2a01      	cmp	r2, #1
 8009ce0:	4681      	mov	r9, r0
 8009ce2:	6123      	str	r3, [r4, #16]
 8009ce4:	dc02      	bgt.n	8009cec <_printf_float+0x168>
 8009ce6:	6822      	ldr	r2, [r4, #0]
 8009ce8:	07d2      	lsls	r2, r2, #31
 8009cea:	d501      	bpl.n	8009cf0 <_printf_float+0x16c>
 8009cec:	3301      	adds	r3, #1
 8009cee:	6123      	str	r3, [r4, #16]
 8009cf0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d09c      	beq.n	8009c32 <_printf_float+0xae>
 8009cf8:	232d      	movs	r3, #45	; 0x2d
 8009cfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cfe:	e798      	b.n	8009c32 <_printf_float+0xae>
 8009d00:	9a06      	ldr	r2, [sp, #24]
 8009d02:	2a47      	cmp	r2, #71	; 0x47
 8009d04:	d1be      	bne.n	8009c84 <_printf_float+0x100>
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1bc      	bne.n	8009c84 <_printf_float+0x100>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e7b9      	b.n	8009c82 <_printf_float+0xfe>
 8009d0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009d12:	d118      	bne.n	8009d46 <_printf_float+0x1c2>
 8009d14:	2900      	cmp	r1, #0
 8009d16:	6863      	ldr	r3, [r4, #4]
 8009d18:	dd0b      	ble.n	8009d32 <_printf_float+0x1ae>
 8009d1a:	6121      	str	r1, [r4, #16]
 8009d1c:	b913      	cbnz	r3, 8009d24 <_printf_float+0x1a0>
 8009d1e:	6822      	ldr	r2, [r4, #0]
 8009d20:	07d0      	lsls	r0, r2, #31
 8009d22:	d502      	bpl.n	8009d2a <_printf_float+0x1a6>
 8009d24:	3301      	adds	r3, #1
 8009d26:	440b      	add	r3, r1
 8009d28:	6123      	str	r3, [r4, #16]
 8009d2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d2c:	f04f 0900 	mov.w	r9, #0
 8009d30:	e7de      	b.n	8009cf0 <_printf_float+0x16c>
 8009d32:	b913      	cbnz	r3, 8009d3a <_printf_float+0x1b6>
 8009d34:	6822      	ldr	r2, [r4, #0]
 8009d36:	07d2      	lsls	r2, r2, #31
 8009d38:	d501      	bpl.n	8009d3e <_printf_float+0x1ba>
 8009d3a:	3302      	adds	r3, #2
 8009d3c:	e7f4      	b.n	8009d28 <_printf_float+0x1a4>
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e7f2      	b.n	8009d28 <_printf_float+0x1a4>
 8009d42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d48:	4299      	cmp	r1, r3
 8009d4a:	db05      	blt.n	8009d58 <_printf_float+0x1d4>
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	6121      	str	r1, [r4, #16]
 8009d50:	07d8      	lsls	r0, r3, #31
 8009d52:	d5ea      	bpl.n	8009d2a <_printf_float+0x1a6>
 8009d54:	1c4b      	adds	r3, r1, #1
 8009d56:	e7e7      	b.n	8009d28 <_printf_float+0x1a4>
 8009d58:	2900      	cmp	r1, #0
 8009d5a:	bfd4      	ite	le
 8009d5c:	f1c1 0202 	rsble	r2, r1, #2
 8009d60:	2201      	movgt	r2, #1
 8009d62:	4413      	add	r3, r2
 8009d64:	e7e0      	b.n	8009d28 <_printf_float+0x1a4>
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	055a      	lsls	r2, r3, #21
 8009d6a:	d407      	bmi.n	8009d7c <_printf_float+0x1f8>
 8009d6c:	6923      	ldr	r3, [r4, #16]
 8009d6e:	4642      	mov	r2, r8
 8009d70:	4631      	mov	r1, r6
 8009d72:	4628      	mov	r0, r5
 8009d74:	47b8      	blx	r7
 8009d76:	3001      	adds	r0, #1
 8009d78:	d12c      	bne.n	8009dd4 <_printf_float+0x250>
 8009d7a:	e764      	b.n	8009c46 <_printf_float+0xc2>
 8009d7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d80:	f240 80e0 	bls.w	8009f44 <_printf_float+0x3c0>
 8009d84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d88:	2200      	movs	r2, #0
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f7f6 fea4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d034      	beq.n	8009dfe <_printf_float+0x27a>
 8009d94:	4a37      	ldr	r2, [pc, #220]	; (8009e74 <_printf_float+0x2f0>)
 8009d96:	2301      	movs	r3, #1
 8009d98:	4631      	mov	r1, r6
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	47b8      	blx	r7
 8009d9e:	3001      	adds	r0, #1
 8009da0:	f43f af51 	beq.w	8009c46 <_printf_float+0xc2>
 8009da4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009da8:	429a      	cmp	r2, r3
 8009daa:	db02      	blt.n	8009db2 <_printf_float+0x22e>
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	07d8      	lsls	r0, r3, #31
 8009db0:	d510      	bpl.n	8009dd4 <_printf_float+0x250>
 8009db2:	ee18 3a10 	vmov	r3, s16
 8009db6:	4652      	mov	r2, sl
 8009db8:	4631      	mov	r1, r6
 8009dba:	4628      	mov	r0, r5
 8009dbc:	47b8      	blx	r7
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	f43f af41 	beq.w	8009c46 <_printf_float+0xc2>
 8009dc4:	f04f 0800 	mov.w	r8, #0
 8009dc8:	f104 091a 	add.w	r9, r4, #26
 8009dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	4543      	cmp	r3, r8
 8009dd2:	dc09      	bgt.n	8009de8 <_printf_float+0x264>
 8009dd4:	6823      	ldr	r3, [r4, #0]
 8009dd6:	079b      	lsls	r3, r3, #30
 8009dd8:	f100 8105 	bmi.w	8009fe6 <_printf_float+0x462>
 8009ddc:	68e0      	ldr	r0, [r4, #12]
 8009dde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009de0:	4298      	cmp	r0, r3
 8009de2:	bfb8      	it	lt
 8009de4:	4618      	movlt	r0, r3
 8009de6:	e730      	b.n	8009c4a <_printf_float+0xc6>
 8009de8:	2301      	movs	r3, #1
 8009dea:	464a      	mov	r2, r9
 8009dec:	4631      	mov	r1, r6
 8009dee:	4628      	mov	r0, r5
 8009df0:	47b8      	blx	r7
 8009df2:	3001      	adds	r0, #1
 8009df4:	f43f af27 	beq.w	8009c46 <_printf_float+0xc2>
 8009df8:	f108 0801 	add.w	r8, r8, #1
 8009dfc:	e7e6      	b.n	8009dcc <_printf_float+0x248>
 8009dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	dc39      	bgt.n	8009e78 <_printf_float+0x2f4>
 8009e04:	4a1b      	ldr	r2, [pc, #108]	; (8009e74 <_printf_float+0x2f0>)
 8009e06:	2301      	movs	r3, #1
 8009e08:	4631      	mov	r1, r6
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	47b8      	blx	r7
 8009e0e:	3001      	adds	r0, #1
 8009e10:	f43f af19 	beq.w	8009c46 <_printf_float+0xc2>
 8009e14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	d102      	bne.n	8009e22 <_printf_float+0x29e>
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	07d9      	lsls	r1, r3, #31
 8009e20:	d5d8      	bpl.n	8009dd4 <_printf_float+0x250>
 8009e22:	ee18 3a10 	vmov	r3, s16
 8009e26:	4652      	mov	r2, sl
 8009e28:	4631      	mov	r1, r6
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	47b8      	blx	r7
 8009e2e:	3001      	adds	r0, #1
 8009e30:	f43f af09 	beq.w	8009c46 <_printf_float+0xc2>
 8009e34:	f04f 0900 	mov.w	r9, #0
 8009e38:	f104 0a1a 	add.w	sl, r4, #26
 8009e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e3e:	425b      	negs	r3, r3
 8009e40:	454b      	cmp	r3, r9
 8009e42:	dc01      	bgt.n	8009e48 <_printf_float+0x2c4>
 8009e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e46:	e792      	b.n	8009d6e <_printf_float+0x1ea>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	4652      	mov	r2, sl
 8009e4c:	4631      	mov	r1, r6
 8009e4e:	4628      	mov	r0, r5
 8009e50:	47b8      	blx	r7
 8009e52:	3001      	adds	r0, #1
 8009e54:	f43f aef7 	beq.w	8009c46 <_printf_float+0xc2>
 8009e58:	f109 0901 	add.w	r9, r9, #1
 8009e5c:	e7ee      	b.n	8009e3c <_printf_float+0x2b8>
 8009e5e:	bf00      	nop
 8009e60:	7fefffff 	.word	0x7fefffff
 8009e64:	0800fe08 	.word	0x0800fe08
 8009e68:	0800fe0c 	.word	0x0800fe0c
 8009e6c:	0800fe14 	.word	0x0800fe14
 8009e70:	0800fe10 	.word	0x0800fe10
 8009e74:	0800fe18 	.word	0x0800fe18
 8009e78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	bfa8      	it	ge
 8009e80:	461a      	movge	r2, r3
 8009e82:	2a00      	cmp	r2, #0
 8009e84:	4691      	mov	r9, r2
 8009e86:	dc37      	bgt.n	8009ef8 <_printf_float+0x374>
 8009e88:	f04f 0b00 	mov.w	fp, #0
 8009e8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e90:	f104 021a 	add.w	r2, r4, #26
 8009e94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e96:	9305      	str	r3, [sp, #20]
 8009e98:	eba3 0309 	sub.w	r3, r3, r9
 8009e9c:	455b      	cmp	r3, fp
 8009e9e:	dc33      	bgt.n	8009f08 <_printf_float+0x384>
 8009ea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	db3b      	blt.n	8009f20 <_printf_float+0x39c>
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	07da      	lsls	r2, r3, #31
 8009eac:	d438      	bmi.n	8009f20 <_printf_float+0x39c>
 8009eae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eb0:	9b05      	ldr	r3, [sp, #20]
 8009eb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009eb4:	1ad3      	subs	r3, r2, r3
 8009eb6:	eba2 0901 	sub.w	r9, r2, r1
 8009eba:	4599      	cmp	r9, r3
 8009ebc:	bfa8      	it	ge
 8009ebe:	4699      	movge	r9, r3
 8009ec0:	f1b9 0f00 	cmp.w	r9, #0
 8009ec4:	dc35      	bgt.n	8009f32 <_printf_float+0x3ae>
 8009ec6:	f04f 0800 	mov.w	r8, #0
 8009eca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ece:	f104 0a1a 	add.w	sl, r4, #26
 8009ed2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ed6:	1a9b      	subs	r3, r3, r2
 8009ed8:	eba3 0309 	sub.w	r3, r3, r9
 8009edc:	4543      	cmp	r3, r8
 8009ede:	f77f af79 	ble.w	8009dd4 <_printf_float+0x250>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	4652      	mov	r2, sl
 8009ee6:	4631      	mov	r1, r6
 8009ee8:	4628      	mov	r0, r5
 8009eea:	47b8      	blx	r7
 8009eec:	3001      	adds	r0, #1
 8009eee:	f43f aeaa 	beq.w	8009c46 <_printf_float+0xc2>
 8009ef2:	f108 0801 	add.w	r8, r8, #1
 8009ef6:	e7ec      	b.n	8009ed2 <_printf_float+0x34e>
 8009ef8:	4613      	mov	r3, r2
 8009efa:	4631      	mov	r1, r6
 8009efc:	4642      	mov	r2, r8
 8009efe:	4628      	mov	r0, r5
 8009f00:	47b8      	blx	r7
 8009f02:	3001      	adds	r0, #1
 8009f04:	d1c0      	bne.n	8009e88 <_printf_float+0x304>
 8009f06:	e69e      	b.n	8009c46 <_printf_float+0xc2>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	4631      	mov	r1, r6
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	9205      	str	r2, [sp, #20]
 8009f10:	47b8      	blx	r7
 8009f12:	3001      	adds	r0, #1
 8009f14:	f43f ae97 	beq.w	8009c46 <_printf_float+0xc2>
 8009f18:	9a05      	ldr	r2, [sp, #20]
 8009f1a:	f10b 0b01 	add.w	fp, fp, #1
 8009f1e:	e7b9      	b.n	8009e94 <_printf_float+0x310>
 8009f20:	ee18 3a10 	vmov	r3, s16
 8009f24:	4652      	mov	r2, sl
 8009f26:	4631      	mov	r1, r6
 8009f28:	4628      	mov	r0, r5
 8009f2a:	47b8      	blx	r7
 8009f2c:	3001      	adds	r0, #1
 8009f2e:	d1be      	bne.n	8009eae <_printf_float+0x32a>
 8009f30:	e689      	b.n	8009c46 <_printf_float+0xc2>
 8009f32:	9a05      	ldr	r2, [sp, #20]
 8009f34:	464b      	mov	r3, r9
 8009f36:	4442      	add	r2, r8
 8009f38:	4631      	mov	r1, r6
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	47b8      	blx	r7
 8009f3e:	3001      	adds	r0, #1
 8009f40:	d1c1      	bne.n	8009ec6 <_printf_float+0x342>
 8009f42:	e680      	b.n	8009c46 <_printf_float+0xc2>
 8009f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f46:	2a01      	cmp	r2, #1
 8009f48:	dc01      	bgt.n	8009f4e <_printf_float+0x3ca>
 8009f4a:	07db      	lsls	r3, r3, #31
 8009f4c:	d538      	bpl.n	8009fc0 <_printf_float+0x43c>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	4642      	mov	r2, r8
 8009f52:	4631      	mov	r1, r6
 8009f54:	4628      	mov	r0, r5
 8009f56:	47b8      	blx	r7
 8009f58:	3001      	adds	r0, #1
 8009f5a:	f43f ae74 	beq.w	8009c46 <_printf_float+0xc2>
 8009f5e:	ee18 3a10 	vmov	r3, s16
 8009f62:	4652      	mov	r2, sl
 8009f64:	4631      	mov	r1, r6
 8009f66:	4628      	mov	r0, r5
 8009f68:	47b8      	blx	r7
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	f43f ae6b 	beq.w	8009c46 <_printf_float+0xc2>
 8009f70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f74:	2200      	movs	r2, #0
 8009f76:	2300      	movs	r3, #0
 8009f78:	f7f6 fdae 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f7c:	b9d8      	cbnz	r0, 8009fb6 <_printf_float+0x432>
 8009f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f80:	f108 0201 	add.w	r2, r8, #1
 8009f84:	3b01      	subs	r3, #1
 8009f86:	4631      	mov	r1, r6
 8009f88:	4628      	mov	r0, r5
 8009f8a:	47b8      	blx	r7
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	d10e      	bne.n	8009fae <_printf_float+0x42a>
 8009f90:	e659      	b.n	8009c46 <_printf_float+0xc2>
 8009f92:	2301      	movs	r3, #1
 8009f94:	4652      	mov	r2, sl
 8009f96:	4631      	mov	r1, r6
 8009f98:	4628      	mov	r0, r5
 8009f9a:	47b8      	blx	r7
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	f43f ae52 	beq.w	8009c46 <_printf_float+0xc2>
 8009fa2:	f108 0801 	add.w	r8, r8, #1
 8009fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	4543      	cmp	r3, r8
 8009fac:	dcf1      	bgt.n	8009f92 <_printf_float+0x40e>
 8009fae:	464b      	mov	r3, r9
 8009fb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009fb4:	e6dc      	b.n	8009d70 <_printf_float+0x1ec>
 8009fb6:	f04f 0800 	mov.w	r8, #0
 8009fba:	f104 0a1a 	add.w	sl, r4, #26
 8009fbe:	e7f2      	b.n	8009fa6 <_printf_float+0x422>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	4642      	mov	r2, r8
 8009fc4:	e7df      	b.n	8009f86 <_printf_float+0x402>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	464a      	mov	r2, r9
 8009fca:	4631      	mov	r1, r6
 8009fcc:	4628      	mov	r0, r5
 8009fce:	47b8      	blx	r7
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	f43f ae38 	beq.w	8009c46 <_printf_float+0xc2>
 8009fd6:	f108 0801 	add.w	r8, r8, #1
 8009fda:	68e3      	ldr	r3, [r4, #12]
 8009fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fde:	1a5b      	subs	r3, r3, r1
 8009fe0:	4543      	cmp	r3, r8
 8009fe2:	dcf0      	bgt.n	8009fc6 <_printf_float+0x442>
 8009fe4:	e6fa      	b.n	8009ddc <_printf_float+0x258>
 8009fe6:	f04f 0800 	mov.w	r8, #0
 8009fea:	f104 0919 	add.w	r9, r4, #25
 8009fee:	e7f4      	b.n	8009fda <_printf_float+0x456>

08009ff0 <_printf_common>:
 8009ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff4:	4616      	mov	r6, r2
 8009ff6:	4699      	mov	r9, r3
 8009ff8:	688a      	ldr	r2, [r1, #8]
 8009ffa:	690b      	ldr	r3, [r1, #16]
 8009ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a000:	4293      	cmp	r3, r2
 800a002:	bfb8      	it	lt
 800a004:	4613      	movlt	r3, r2
 800a006:	6033      	str	r3, [r6, #0]
 800a008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a00c:	4607      	mov	r7, r0
 800a00e:	460c      	mov	r4, r1
 800a010:	b10a      	cbz	r2, 800a016 <_printf_common+0x26>
 800a012:	3301      	adds	r3, #1
 800a014:	6033      	str	r3, [r6, #0]
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	0699      	lsls	r1, r3, #26
 800a01a:	bf42      	ittt	mi
 800a01c:	6833      	ldrmi	r3, [r6, #0]
 800a01e:	3302      	addmi	r3, #2
 800a020:	6033      	strmi	r3, [r6, #0]
 800a022:	6825      	ldr	r5, [r4, #0]
 800a024:	f015 0506 	ands.w	r5, r5, #6
 800a028:	d106      	bne.n	800a038 <_printf_common+0x48>
 800a02a:	f104 0a19 	add.w	sl, r4, #25
 800a02e:	68e3      	ldr	r3, [r4, #12]
 800a030:	6832      	ldr	r2, [r6, #0]
 800a032:	1a9b      	subs	r3, r3, r2
 800a034:	42ab      	cmp	r3, r5
 800a036:	dc26      	bgt.n	800a086 <_printf_common+0x96>
 800a038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a03c:	1e13      	subs	r3, r2, #0
 800a03e:	6822      	ldr	r2, [r4, #0]
 800a040:	bf18      	it	ne
 800a042:	2301      	movne	r3, #1
 800a044:	0692      	lsls	r2, r2, #26
 800a046:	d42b      	bmi.n	800a0a0 <_printf_common+0xb0>
 800a048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a04c:	4649      	mov	r1, r9
 800a04e:	4638      	mov	r0, r7
 800a050:	47c0      	blx	r8
 800a052:	3001      	adds	r0, #1
 800a054:	d01e      	beq.n	800a094 <_printf_common+0xa4>
 800a056:	6823      	ldr	r3, [r4, #0]
 800a058:	68e5      	ldr	r5, [r4, #12]
 800a05a:	6832      	ldr	r2, [r6, #0]
 800a05c:	f003 0306 	and.w	r3, r3, #6
 800a060:	2b04      	cmp	r3, #4
 800a062:	bf08      	it	eq
 800a064:	1aad      	subeq	r5, r5, r2
 800a066:	68a3      	ldr	r3, [r4, #8]
 800a068:	6922      	ldr	r2, [r4, #16]
 800a06a:	bf0c      	ite	eq
 800a06c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a070:	2500      	movne	r5, #0
 800a072:	4293      	cmp	r3, r2
 800a074:	bfc4      	itt	gt
 800a076:	1a9b      	subgt	r3, r3, r2
 800a078:	18ed      	addgt	r5, r5, r3
 800a07a:	2600      	movs	r6, #0
 800a07c:	341a      	adds	r4, #26
 800a07e:	42b5      	cmp	r5, r6
 800a080:	d11a      	bne.n	800a0b8 <_printf_common+0xc8>
 800a082:	2000      	movs	r0, #0
 800a084:	e008      	b.n	800a098 <_printf_common+0xa8>
 800a086:	2301      	movs	r3, #1
 800a088:	4652      	mov	r2, sl
 800a08a:	4649      	mov	r1, r9
 800a08c:	4638      	mov	r0, r7
 800a08e:	47c0      	blx	r8
 800a090:	3001      	adds	r0, #1
 800a092:	d103      	bne.n	800a09c <_printf_common+0xac>
 800a094:	f04f 30ff 	mov.w	r0, #4294967295
 800a098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a09c:	3501      	adds	r5, #1
 800a09e:	e7c6      	b.n	800a02e <_printf_common+0x3e>
 800a0a0:	18e1      	adds	r1, r4, r3
 800a0a2:	1c5a      	adds	r2, r3, #1
 800a0a4:	2030      	movs	r0, #48	; 0x30
 800a0a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0aa:	4422      	add	r2, r4
 800a0ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0b4:	3302      	adds	r3, #2
 800a0b6:	e7c7      	b.n	800a048 <_printf_common+0x58>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	4622      	mov	r2, r4
 800a0bc:	4649      	mov	r1, r9
 800a0be:	4638      	mov	r0, r7
 800a0c0:	47c0      	blx	r8
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	d0e6      	beq.n	800a094 <_printf_common+0xa4>
 800a0c6:	3601      	adds	r6, #1
 800a0c8:	e7d9      	b.n	800a07e <_printf_common+0x8e>
	...

0800a0cc <_printf_i>:
 800a0cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	4691      	mov	r9, r2
 800a0d4:	7e27      	ldrb	r7, [r4, #24]
 800a0d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a0d8:	2f78      	cmp	r7, #120	; 0x78
 800a0da:	4680      	mov	r8, r0
 800a0dc:	469a      	mov	sl, r3
 800a0de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0e2:	d807      	bhi.n	800a0f4 <_printf_i+0x28>
 800a0e4:	2f62      	cmp	r7, #98	; 0x62
 800a0e6:	d80a      	bhi.n	800a0fe <_printf_i+0x32>
 800a0e8:	2f00      	cmp	r7, #0
 800a0ea:	f000 80d8 	beq.w	800a29e <_printf_i+0x1d2>
 800a0ee:	2f58      	cmp	r7, #88	; 0x58
 800a0f0:	f000 80a3 	beq.w	800a23a <_printf_i+0x16e>
 800a0f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0fc:	e03a      	b.n	800a174 <_printf_i+0xa8>
 800a0fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a102:	2b15      	cmp	r3, #21
 800a104:	d8f6      	bhi.n	800a0f4 <_printf_i+0x28>
 800a106:	a001      	add	r0, pc, #4	; (adr r0, 800a10c <_printf_i+0x40>)
 800a108:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a10c:	0800a165 	.word	0x0800a165
 800a110:	0800a179 	.word	0x0800a179
 800a114:	0800a0f5 	.word	0x0800a0f5
 800a118:	0800a0f5 	.word	0x0800a0f5
 800a11c:	0800a0f5 	.word	0x0800a0f5
 800a120:	0800a0f5 	.word	0x0800a0f5
 800a124:	0800a179 	.word	0x0800a179
 800a128:	0800a0f5 	.word	0x0800a0f5
 800a12c:	0800a0f5 	.word	0x0800a0f5
 800a130:	0800a0f5 	.word	0x0800a0f5
 800a134:	0800a0f5 	.word	0x0800a0f5
 800a138:	0800a285 	.word	0x0800a285
 800a13c:	0800a1a9 	.word	0x0800a1a9
 800a140:	0800a267 	.word	0x0800a267
 800a144:	0800a0f5 	.word	0x0800a0f5
 800a148:	0800a0f5 	.word	0x0800a0f5
 800a14c:	0800a2a7 	.word	0x0800a2a7
 800a150:	0800a0f5 	.word	0x0800a0f5
 800a154:	0800a1a9 	.word	0x0800a1a9
 800a158:	0800a0f5 	.word	0x0800a0f5
 800a15c:	0800a0f5 	.word	0x0800a0f5
 800a160:	0800a26f 	.word	0x0800a26f
 800a164:	680b      	ldr	r3, [r1, #0]
 800a166:	1d1a      	adds	r2, r3, #4
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	600a      	str	r2, [r1, #0]
 800a16c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a174:	2301      	movs	r3, #1
 800a176:	e0a3      	b.n	800a2c0 <_printf_i+0x1f4>
 800a178:	6825      	ldr	r5, [r4, #0]
 800a17a:	6808      	ldr	r0, [r1, #0]
 800a17c:	062e      	lsls	r6, r5, #24
 800a17e:	f100 0304 	add.w	r3, r0, #4
 800a182:	d50a      	bpl.n	800a19a <_printf_i+0xce>
 800a184:	6805      	ldr	r5, [r0, #0]
 800a186:	600b      	str	r3, [r1, #0]
 800a188:	2d00      	cmp	r5, #0
 800a18a:	da03      	bge.n	800a194 <_printf_i+0xc8>
 800a18c:	232d      	movs	r3, #45	; 0x2d
 800a18e:	426d      	negs	r5, r5
 800a190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a194:	485e      	ldr	r0, [pc, #376]	; (800a310 <_printf_i+0x244>)
 800a196:	230a      	movs	r3, #10
 800a198:	e019      	b.n	800a1ce <_printf_i+0x102>
 800a19a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a19e:	6805      	ldr	r5, [r0, #0]
 800a1a0:	600b      	str	r3, [r1, #0]
 800a1a2:	bf18      	it	ne
 800a1a4:	b22d      	sxthne	r5, r5
 800a1a6:	e7ef      	b.n	800a188 <_printf_i+0xbc>
 800a1a8:	680b      	ldr	r3, [r1, #0]
 800a1aa:	6825      	ldr	r5, [r4, #0]
 800a1ac:	1d18      	adds	r0, r3, #4
 800a1ae:	6008      	str	r0, [r1, #0]
 800a1b0:	0628      	lsls	r0, r5, #24
 800a1b2:	d501      	bpl.n	800a1b8 <_printf_i+0xec>
 800a1b4:	681d      	ldr	r5, [r3, #0]
 800a1b6:	e002      	b.n	800a1be <_printf_i+0xf2>
 800a1b8:	0669      	lsls	r1, r5, #25
 800a1ba:	d5fb      	bpl.n	800a1b4 <_printf_i+0xe8>
 800a1bc:	881d      	ldrh	r5, [r3, #0]
 800a1be:	4854      	ldr	r0, [pc, #336]	; (800a310 <_printf_i+0x244>)
 800a1c0:	2f6f      	cmp	r7, #111	; 0x6f
 800a1c2:	bf0c      	ite	eq
 800a1c4:	2308      	moveq	r3, #8
 800a1c6:	230a      	movne	r3, #10
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1ce:	6866      	ldr	r6, [r4, #4]
 800a1d0:	60a6      	str	r6, [r4, #8]
 800a1d2:	2e00      	cmp	r6, #0
 800a1d4:	bfa2      	ittt	ge
 800a1d6:	6821      	ldrge	r1, [r4, #0]
 800a1d8:	f021 0104 	bicge.w	r1, r1, #4
 800a1dc:	6021      	strge	r1, [r4, #0]
 800a1de:	b90d      	cbnz	r5, 800a1e4 <_printf_i+0x118>
 800a1e0:	2e00      	cmp	r6, #0
 800a1e2:	d04d      	beq.n	800a280 <_printf_i+0x1b4>
 800a1e4:	4616      	mov	r6, r2
 800a1e6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1ea:	fb03 5711 	mls	r7, r3, r1, r5
 800a1ee:	5dc7      	ldrb	r7, [r0, r7]
 800a1f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1f4:	462f      	mov	r7, r5
 800a1f6:	42bb      	cmp	r3, r7
 800a1f8:	460d      	mov	r5, r1
 800a1fa:	d9f4      	bls.n	800a1e6 <_printf_i+0x11a>
 800a1fc:	2b08      	cmp	r3, #8
 800a1fe:	d10b      	bne.n	800a218 <_printf_i+0x14c>
 800a200:	6823      	ldr	r3, [r4, #0]
 800a202:	07df      	lsls	r7, r3, #31
 800a204:	d508      	bpl.n	800a218 <_printf_i+0x14c>
 800a206:	6923      	ldr	r3, [r4, #16]
 800a208:	6861      	ldr	r1, [r4, #4]
 800a20a:	4299      	cmp	r1, r3
 800a20c:	bfde      	ittt	le
 800a20e:	2330      	movle	r3, #48	; 0x30
 800a210:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a214:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a218:	1b92      	subs	r2, r2, r6
 800a21a:	6122      	str	r2, [r4, #16]
 800a21c:	f8cd a000 	str.w	sl, [sp]
 800a220:	464b      	mov	r3, r9
 800a222:	aa03      	add	r2, sp, #12
 800a224:	4621      	mov	r1, r4
 800a226:	4640      	mov	r0, r8
 800a228:	f7ff fee2 	bl	8009ff0 <_printf_common>
 800a22c:	3001      	adds	r0, #1
 800a22e:	d14c      	bne.n	800a2ca <_printf_i+0x1fe>
 800a230:	f04f 30ff 	mov.w	r0, #4294967295
 800a234:	b004      	add	sp, #16
 800a236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a23a:	4835      	ldr	r0, [pc, #212]	; (800a310 <_printf_i+0x244>)
 800a23c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a240:	6823      	ldr	r3, [r4, #0]
 800a242:	680e      	ldr	r6, [r1, #0]
 800a244:	061f      	lsls	r7, r3, #24
 800a246:	f856 5b04 	ldr.w	r5, [r6], #4
 800a24a:	600e      	str	r6, [r1, #0]
 800a24c:	d514      	bpl.n	800a278 <_printf_i+0x1ac>
 800a24e:	07d9      	lsls	r1, r3, #31
 800a250:	bf44      	itt	mi
 800a252:	f043 0320 	orrmi.w	r3, r3, #32
 800a256:	6023      	strmi	r3, [r4, #0]
 800a258:	b91d      	cbnz	r5, 800a262 <_printf_i+0x196>
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	f023 0320 	bic.w	r3, r3, #32
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	2310      	movs	r3, #16
 800a264:	e7b0      	b.n	800a1c8 <_printf_i+0xfc>
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	f043 0320 	orr.w	r3, r3, #32
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	2378      	movs	r3, #120	; 0x78
 800a270:	4828      	ldr	r0, [pc, #160]	; (800a314 <_printf_i+0x248>)
 800a272:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a276:	e7e3      	b.n	800a240 <_printf_i+0x174>
 800a278:	065e      	lsls	r6, r3, #25
 800a27a:	bf48      	it	mi
 800a27c:	b2ad      	uxthmi	r5, r5
 800a27e:	e7e6      	b.n	800a24e <_printf_i+0x182>
 800a280:	4616      	mov	r6, r2
 800a282:	e7bb      	b.n	800a1fc <_printf_i+0x130>
 800a284:	680b      	ldr	r3, [r1, #0]
 800a286:	6826      	ldr	r6, [r4, #0]
 800a288:	6960      	ldr	r0, [r4, #20]
 800a28a:	1d1d      	adds	r5, r3, #4
 800a28c:	600d      	str	r5, [r1, #0]
 800a28e:	0635      	lsls	r5, r6, #24
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	d501      	bpl.n	800a298 <_printf_i+0x1cc>
 800a294:	6018      	str	r0, [r3, #0]
 800a296:	e002      	b.n	800a29e <_printf_i+0x1d2>
 800a298:	0671      	lsls	r1, r6, #25
 800a29a:	d5fb      	bpl.n	800a294 <_printf_i+0x1c8>
 800a29c:	8018      	strh	r0, [r3, #0]
 800a29e:	2300      	movs	r3, #0
 800a2a0:	6123      	str	r3, [r4, #16]
 800a2a2:	4616      	mov	r6, r2
 800a2a4:	e7ba      	b.n	800a21c <_printf_i+0x150>
 800a2a6:	680b      	ldr	r3, [r1, #0]
 800a2a8:	1d1a      	adds	r2, r3, #4
 800a2aa:	600a      	str	r2, [r1, #0]
 800a2ac:	681e      	ldr	r6, [r3, #0]
 800a2ae:	6862      	ldr	r2, [r4, #4]
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	f7f5 ff9c 	bl	80001f0 <memchr>
 800a2b8:	b108      	cbz	r0, 800a2be <_printf_i+0x1f2>
 800a2ba:	1b80      	subs	r0, r0, r6
 800a2bc:	6060      	str	r0, [r4, #4]
 800a2be:	6863      	ldr	r3, [r4, #4]
 800a2c0:	6123      	str	r3, [r4, #16]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2c8:	e7a8      	b.n	800a21c <_printf_i+0x150>
 800a2ca:	6923      	ldr	r3, [r4, #16]
 800a2cc:	4632      	mov	r2, r6
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	4640      	mov	r0, r8
 800a2d2:	47d0      	blx	sl
 800a2d4:	3001      	adds	r0, #1
 800a2d6:	d0ab      	beq.n	800a230 <_printf_i+0x164>
 800a2d8:	6823      	ldr	r3, [r4, #0]
 800a2da:	079b      	lsls	r3, r3, #30
 800a2dc:	d413      	bmi.n	800a306 <_printf_i+0x23a>
 800a2de:	68e0      	ldr	r0, [r4, #12]
 800a2e0:	9b03      	ldr	r3, [sp, #12]
 800a2e2:	4298      	cmp	r0, r3
 800a2e4:	bfb8      	it	lt
 800a2e6:	4618      	movlt	r0, r3
 800a2e8:	e7a4      	b.n	800a234 <_printf_i+0x168>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	4632      	mov	r2, r6
 800a2ee:	4649      	mov	r1, r9
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	47d0      	blx	sl
 800a2f4:	3001      	adds	r0, #1
 800a2f6:	d09b      	beq.n	800a230 <_printf_i+0x164>
 800a2f8:	3501      	adds	r5, #1
 800a2fa:	68e3      	ldr	r3, [r4, #12]
 800a2fc:	9903      	ldr	r1, [sp, #12]
 800a2fe:	1a5b      	subs	r3, r3, r1
 800a300:	42ab      	cmp	r3, r5
 800a302:	dcf2      	bgt.n	800a2ea <_printf_i+0x21e>
 800a304:	e7eb      	b.n	800a2de <_printf_i+0x212>
 800a306:	2500      	movs	r5, #0
 800a308:	f104 0619 	add.w	r6, r4, #25
 800a30c:	e7f5      	b.n	800a2fa <_printf_i+0x22e>
 800a30e:	bf00      	nop
 800a310:	0800fe1a 	.word	0x0800fe1a
 800a314:	0800fe2b 	.word	0x0800fe2b

0800a318 <siprintf>:
 800a318:	b40e      	push	{r1, r2, r3}
 800a31a:	b500      	push	{lr}
 800a31c:	b09c      	sub	sp, #112	; 0x70
 800a31e:	ab1d      	add	r3, sp, #116	; 0x74
 800a320:	9002      	str	r0, [sp, #8]
 800a322:	9006      	str	r0, [sp, #24]
 800a324:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a328:	4809      	ldr	r0, [pc, #36]	; (800a350 <siprintf+0x38>)
 800a32a:	9107      	str	r1, [sp, #28]
 800a32c:	9104      	str	r1, [sp, #16]
 800a32e:	4909      	ldr	r1, [pc, #36]	; (800a354 <siprintf+0x3c>)
 800a330:	f853 2b04 	ldr.w	r2, [r3], #4
 800a334:	9105      	str	r1, [sp, #20]
 800a336:	6800      	ldr	r0, [r0, #0]
 800a338:	9301      	str	r3, [sp, #4]
 800a33a:	a902      	add	r1, sp, #8
 800a33c:	f002 ff00 	bl	800d140 <_svfiprintf_r>
 800a340:	9b02      	ldr	r3, [sp, #8]
 800a342:	2200      	movs	r2, #0
 800a344:	701a      	strb	r2, [r3, #0]
 800a346:	b01c      	add	sp, #112	; 0x70
 800a348:	f85d eb04 	ldr.w	lr, [sp], #4
 800a34c:	b003      	add	sp, #12
 800a34e:	4770      	bx	lr
 800a350:	20000028 	.word	0x20000028
 800a354:	ffff0208 	.word	0xffff0208

0800a358 <strcat>:
 800a358:	b510      	push	{r4, lr}
 800a35a:	4602      	mov	r2, r0
 800a35c:	7814      	ldrb	r4, [r2, #0]
 800a35e:	4613      	mov	r3, r2
 800a360:	3201      	adds	r2, #1
 800a362:	2c00      	cmp	r4, #0
 800a364:	d1fa      	bne.n	800a35c <strcat+0x4>
 800a366:	3b01      	subs	r3, #1
 800a368:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a36c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a370:	2a00      	cmp	r2, #0
 800a372:	d1f9      	bne.n	800a368 <strcat+0x10>
 800a374:	bd10      	pop	{r4, pc}

0800a376 <strchr>:
 800a376:	b2c9      	uxtb	r1, r1
 800a378:	4603      	mov	r3, r0
 800a37a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a37e:	b11a      	cbz	r2, 800a388 <strchr+0x12>
 800a380:	428a      	cmp	r2, r1
 800a382:	d1f9      	bne.n	800a378 <strchr+0x2>
 800a384:	4618      	mov	r0, r3
 800a386:	4770      	bx	lr
 800a388:	2900      	cmp	r1, #0
 800a38a:	bf18      	it	ne
 800a38c:	2300      	movne	r3, #0
 800a38e:	e7f9      	b.n	800a384 <strchr+0xe>

0800a390 <strcpy>:
 800a390:	4603      	mov	r3, r0
 800a392:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a396:	f803 2b01 	strb.w	r2, [r3], #1
 800a39a:	2a00      	cmp	r2, #0
 800a39c:	d1f9      	bne.n	800a392 <strcpy+0x2>
 800a39e:	4770      	bx	lr

0800a3a0 <strdup>:
 800a3a0:	4b02      	ldr	r3, [pc, #8]	; (800a3ac <strdup+0xc>)
 800a3a2:	4601      	mov	r1, r0
 800a3a4:	6818      	ldr	r0, [r3, #0]
 800a3a6:	f000 b803 	b.w	800a3b0 <_strdup_r>
 800a3aa:	bf00      	nop
 800a3ac:	20000028 	.word	0x20000028

0800a3b0 <_strdup_r>:
 800a3b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	460d      	mov	r5, r1
 800a3b8:	f7f5 ff12 	bl	80001e0 <strlen>
 800a3bc:	1c42      	adds	r2, r0, #1
 800a3be:	4611      	mov	r1, r2
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	9201      	str	r2, [sp, #4]
 800a3c4:	f002 fe06 	bl	800cfd4 <_malloc_r>
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	b118      	cbz	r0, 800a3d4 <_strdup_r+0x24>
 800a3cc:	9a01      	ldr	r2, [sp, #4]
 800a3ce:	4629      	mov	r1, r5
 800a3d0:	f7ff fb22 	bl	8009a18 <memcpy>
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	b003      	add	sp, #12
 800a3d8:	bd30      	pop	{r4, r5, pc}

0800a3da <strsep>:
 800a3da:	4602      	mov	r2, r0
 800a3dc:	2300      	movs	r3, #0
 800a3de:	6800      	ldr	r0, [r0, #0]
 800a3e0:	f000 be80 	b.w	800b0e4 <__strtok_r>

0800a3e4 <strstr>:
 800a3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3e6:	780c      	ldrb	r4, [r1, #0]
 800a3e8:	b164      	cbz	r4, 800a404 <strstr+0x20>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	781a      	ldrb	r2, [r3, #0]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	1c5e      	adds	r6, r3, #1
 800a3f2:	b90a      	cbnz	r2, 800a3f8 <strstr+0x14>
 800a3f4:	4610      	mov	r0, r2
 800a3f6:	e005      	b.n	800a404 <strstr+0x20>
 800a3f8:	4294      	cmp	r4, r2
 800a3fa:	d108      	bne.n	800a40e <strstr+0x2a>
 800a3fc:	460d      	mov	r5, r1
 800a3fe:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a402:	b902      	cbnz	r2, 800a406 <strstr+0x22>
 800a404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a406:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a40a:	4297      	cmp	r7, r2
 800a40c:	d0f7      	beq.n	800a3fe <strstr+0x1a>
 800a40e:	4633      	mov	r3, r6
 800a410:	e7ec      	b.n	800a3ec <strstr+0x8>

0800a412 <sulp>:
 800a412:	b570      	push	{r4, r5, r6, lr}
 800a414:	4604      	mov	r4, r0
 800a416:	460d      	mov	r5, r1
 800a418:	ec45 4b10 	vmov	d0, r4, r5
 800a41c:	4616      	mov	r6, r2
 800a41e:	f002 fc2b 	bl	800cc78 <__ulp>
 800a422:	ec51 0b10 	vmov	r0, r1, d0
 800a426:	b17e      	cbz	r6, 800a448 <sulp+0x36>
 800a428:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a42c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a430:	2b00      	cmp	r3, #0
 800a432:	dd09      	ble.n	800a448 <sulp+0x36>
 800a434:	051b      	lsls	r3, r3, #20
 800a436:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a43a:	2400      	movs	r4, #0
 800a43c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a440:	4622      	mov	r2, r4
 800a442:	462b      	mov	r3, r5
 800a444:	f7f6 f8e0 	bl	8000608 <__aeabi_dmul>
 800a448:	bd70      	pop	{r4, r5, r6, pc}
 800a44a:	0000      	movs	r0, r0
 800a44c:	0000      	movs	r0, r0
	...

0800a450 <_strtod_l>:
 800a450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a454:	b0a3      	sub	sp, #140	; 0x8c
 800a456:	461f      	mov	r7, r3
 800a458:	2300      	movs	r3, #0
 800a45a:	931e      	str	r3, [sp, #120]	; 0x78
 800a45c:	4ba4      	ldr	r3, [pc, #656]	; (800a6f0 <_strtod_l+0x2a0>)
 800a45e:	9219      	str	r2, [sp, #100]	; 0x64
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	9307      	str	r3, [sp, #28]
 800a464:	4604      	mov	r4, r0
 800a466:	4618      	mov	r0, r3
 800a468:	4688      	mov	r8, r1
 800a46a:	f7f5 feb9 	bl	80001e0 <strlen>
 800a46e:	f04f 0a00 	mov.w	sl, #0
 800a472:	4605      	mov	r5, r0
 800a474:	f04f 0b00 	mov.w	fp, #0
 800a478:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a47c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a47e:	781a      	ldrb	r2, [r3, #0]
 800a480:	2a2b      	cmp	r2, #43	; 0x2b
 800a482:	d04c      	beq.n	800a51e <_strtod_l+0xce>
 800a484:	d839      	bhi.n	800a4fa <_strtod_l+0xaa>
 800a486:	2a0d      	cmp	r2, #13
 800a488:	d832      	bhi.n	800a4f0 <_strtod_l+0xa0>
 800a48a:	2a08      	cmp	r2, #8
 800a48c:	d832      	bhi.n	800a4f4 <_strtod_l+0xa4>
 800a48e:	2a00      	cmp	r2, #0
 800a490:	d03c      	beq.n	800a50c <_strtod_l+0xbc>
 800a492:	2300      	movs	r3, #0
 800a494:	930e      	str	r3, [sp, #56]	; 0x38
 800a496:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a498:	7833      	ldrb	r3, [r6, #0]
 800a49a:	2b30      	cmp	r3, #48	; 0x30
 800a49c:	f040 80b4 	bne.w	800a608 <_strtod_l+0x1b8>
 800a4a0:	7873      	ldrb	r3, [r6, #1]
 800a4a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a4a6:	2b58      	cmp	r3, #88	; 0x58
 800a4a8:	d16c      	bne.n	800a584 <_strtod_l+0x134>
 800a4aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	ab1e      	add	r3, sp, #120	; 0x78
 800a4b0:	9702      	str	r7, [sp, #8]
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	4a8f      	ldr	r2, [pc, #572]	; (800a6f4 <_strtod_l+0x2a4>)
 800a4b6:	ab1f      	add	r3, sp, #124	; 0x7c
 800a4b8:	a91d      	add	r1, sp, #116	; 0x74
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f001 fd4a 	bl	800bf54 <__gethex>
 800a4c0:	f010 0707 	ands.w	r7, r0, #7
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	d005      	beq.n	800a4d4 <_strtod_l+0x84>
 800a4c8:	2f06      	cmp	r7, #6
 800a4ca:	d12a      	bne.n	800a522 <_strtod_l+0xd2>
 800a4cc:	3601      	adds	r6, #1
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	961d      	str	r6, [sp, #116]	; 0x74
 800a4d2:	930e      	str	r3, [sp, #56]	; 0x38
 800a4d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f040 8596 	bne.w	800b008 <_strtod_l+0xbb8>
 800a4dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4de:	b1db      	cbz	r3, 800a518 <_strtod_l+0xc8>
 800a4e0:	4652      	mov	r2, sl
 800a4e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a4e6:	ec43 2b10 	vmov	d0, r2, r3
 800a4ea:	b023      	add	sp, #140	; 0x8c
 800a4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f0:	2a20      	cmp	r2, #32
 800a4f2:	d1ce      	bne.n	800a492 <_strtod_l+0x42>
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	931d      	str	r3, [sp, #116]	; 0x74
 800a4f8:	e7c0      	b.n	800a47c <_strtod_l+0x2c>
 800a4fa:	2a2d      	cmp	r2, #45	; 0x2d
 800a4fc:	d1c9      	bne.n	800a492 <_strtod_l+0x42>
 800a4fe:	2201      	movs	r2, #1
 800a500:	920e      	str	r2, [sp, #56]	; 0x38
 800a502:	1c5a      	adds	r2, r3, #1
 800a504:	921d      	str	r2, [sp, #116]	; 0x74
 800a506:	785b      	ldrb	r3, [r3, #1]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d1c4      	bne.n	800a496 <_strtod_l+0x46>
 800a50c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a50e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a512:	2b00      	cmp	r3, #0
 800a514:	f040 8576 	bne.w	800b004 <_strtod_l+0xbb4>
 800a518:	4652      	mov	r2, sl
 800a51a:	465b      	mov	r3, fp
 800a51c:	e7e3      	b.n	800a4e6 <_strtod_l+0x96>
 800a51e:	2200      	movs	r2, #0
 800a520:	e7ee      	b.n	800a500 <_strtod_l+0xb0>
 800a522:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a524:	b13a      	cbz	r2, 800a536 <_strtod_l+0xe6>
 800a526:	2135      	movs	r1, #53	; 0x35
 800a528:	a820      	add	r0, sp, #128	; 0x80
 800a52a:	f002 fcb0 	bl	800ce8e <__copybits>
 800a52e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a530:	4620      	mov	r0, r4
 800a532:	f002 f875 	bl	800c620 <_Bfree>
 800a536:	3f01      	subs	r7, #1
 800a538:	2f05      	cmp	r7, #5
 800a53a:	d807      	bhi.n	800a54c <_strtod_l+0xfc>
 800a53c:	e8df f007 	tbb	[pc, r7]
 800a540:	1d180b0e 	.word	0x1d180b0e
 800a544:	030e      	.short	0x030e
 800a546:	f04f 0b00 	mov.w	fp, #0
 800a54a:	46da      	mov	sl, fp
 800a54c:	0728      	lsls	r0, r5, #28
 800a54e:	d5c1      	bpl.n	800a4d4 <_strtod_l+0x84>
 800a550:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a554:	e7be      	b.n	800a4d4 <_strtod_l+0x84>
 800a556:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800a55a:	e7f7      	b.n	800a54c <_strtod_l+0xfc>
 800a55c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800a560:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a562:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a566:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a56a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a56e:	e7ed      	b.n	800a54c <_strtod_l+0xfc>
 800a570:	f8df b184 	ldr.w	fp, [pc, #388]	; 800a6f8 <_strtod_l+0x2a8>
 800a574:	f04f 0a00 	mov.w	sl, #0
 800a578:	e7e8      	b.n	800a54c <_strtod_l+0xfc>
 800a57a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a57e:	f04f 3aff 	mov.w	sl, #4294967295
 800a582:	e7e3      	b.n	800a54c <_strtod_l+0xfc>
 800a584:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a586:	1c5a      	adds	r2, r3, #1
 800a588:	921d      	str	r2, [sp, #116]	; 0x74
 800a58a:	785b      	ldrb	r3, [r3, #1]
 800a58c:	2b30      	cmp	r3, #48	; 0x30
 800a58e:	d0f9      	beq.n	800a584 <_strtod_l+0x134>
 800a590:	2b00      	cmp	r3, #0
 800a592:	d09f      	beq.n	800a4d4 <_strtod_l+0x84>
 800a594:	2301      	movs	r3, #1
 800a596:	f04f 0900 	mov.w	r9, #0
 800a59a:	9304      	str	r3, [sp, #16]
 800a59c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a59e:	930a      	str	r3, [sp, #40]	; 0x28
 800a5a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a5a4:	464f      	mov	r7, r9
 800a5a6:	220a      	movs	r2, #10
 800a5a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a5aa:	7806      	ldrb	r6, [r0, #0]
 800a5ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a5b0:	b2d9      	uxtb	r1, r3
 800a5b2:	2909      	cmp	r1, #9
 800a5b4:	d92a      	bls.n	800a60c <_strtod_l+0x1bc>
 800a5b6:	9907      	ldr	r1, [sp, #28]
 800a5b8:	462a      	mov	r2, r5
 800a5ba:	f003 f835 	bl	800d628 <strncmp>
 800a5be:	b398      	cbz	r0, 800a628 <_strtod_l+0x1d8>
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	4633      	mov	r3, r6
 800a5c4:	463d      	mov	r5, r7
 800a5c6:	9007      	str	r0, [sp, #28]
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	2b65      	cmp	r3, #101	; 0x65
 800a5cc:	d001      	beq.n	800a5d2 <_strtod_l+0x182>
 800a5ce:	2b45      	cmp	r3, #69	; 0x45
 800a5d0:	d118      	bne.n	800a604 <_strtod_l+0x1b4>
 800a5d2:	b91d      	cbnz	r5, 800a5dc <_strtod_l+0x18c>
 800a5d4:	9b04      	ldr	r3, [sp, #16]
 800a5d6:	4303      	orrs	r3, r0
 800a5d8:	d098      	beq.n	800a50c <_strtod_l+0xbc>
 800a5da:	2500      	movs	r5, #0
 800a5dc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800a5e0:	f108 0301 	add.w	r3, r8, #1
 800a5e4:	931d      	str	r3, [sp, #116]	; 0x74
 800a5e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a5ea:	2b2b      	cmp	r3, #43	; 0x2b
 800a5ec:	d075      	beq.n	800a6da <_strtod_l+0x28a>
 800a5ee:	2b2d      	cmp	r3, #45	; 0x2d
 800a5f0:	d07b      	beq.n	800a6ea <_strtod_l+0x29a>
 800a5f2:	f04f 0c00 	mov.w	ip, #0
 800a5f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a5fa:	2909      	cmp	r1, #9
 800a5fc:	f240 8082 	bls.w	800a704 <_strtod_l+0x2b4>
 800a600:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a604:	2600      	movs	r6, #0
 800a606:	e09d      	b.n	800a744 <_strtod_l+0x2f4>
 800a608:	2300      	movs	r3, #0
 800a60a:	e7c4      	b.n	800a596 <_strtod_l+0x146>
 800a60c:	2f08      	cmp	r7, #8
 800a60e:	bfd8      	it	le
 800a610:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a612:	f100 0001 	add.w	r0, r0, #1
 800a616:	bfda      	itte	le
 800a618:	fb02 3301 	mlale	r3, r2, r1, r3
 800a61c:	9309      	strle	r3, [sp, #36]	; 0x24
 800a61e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a622:	3701      	adds	r7, #1
 800a624:	901d      	str	r0, [sp, #116]	; 0x74
 800a626:	e7bf      	b.n	800a5a8 <_strtod_l+0x158>
 800a628:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a62a:	195a      	adds	r2, r3, r5
 800a62c:	921d      	str	r2, [sp, #116]	; 0x74
 800a62e:	5d5b      	ldrb	r3, [r3, r5]
 800a630:	2f00      	cmp	r7, #0
 800a632:	d037      	beq.n	800a6a4 <_strtod_l+0x254>
 800a634:	9007      	str	r0, [sp, #28]
 800a636:	463d      	mov	r5, r7
 800a638:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a63c:	2a09      	cmp	r2, #9
 800a63e:	d912      	bls.n	800a666 <_strtod_l+0x216>
 800a640:	2201      	movs	r2, #1
 800a642:	e7c2      	b.n	800a5ca <_strtod_l+0x17a>
 800a644:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a646:	1c5a      	adds	r2, r3, #1
 800a648:	921d      	str	r2, [sp, #116]	; 0x74
 800a64a:	785b      	ldrb	r3, [r3, #1]
 800a64c:	3001      	adds	r0, #1
 800a64e:	2b30      	cmp	r3, #48	; 0x30
 800a650:	d0f8      	beq.n	800a644 <_strtod_l+0x1f4>
 800a652:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a656:	2a08      	cmp	r2, #8
 800a658:	f200 84db 	bhi.w	800b012 <_strtod_l+0xbc2>
 800a65c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a65e:	9007      	str	r0, [sp, #28]
 800a660:	2000      	movs	r0, #0
 800a662:	920a      	str	r2, [sp, #40]	; 0x28
 800a664:	4605      	mov	r5, r0
 800a666:	3b30      	subs	r3, #48	; 0x30
 800a668:	f100 0201 	add.w	r2, r0, #1
 800a66c:	d014      	beq.n	800a698 <_strtod_l+0x248>
 800a66e:	9907      	ldr	r1, [sp, #28]
 800a670:	4411      	add	r1, r2
 800a672:	9107      	str	r1, [sp, #28]
 800a674:	462a      	mov	r2, r5
 800a676:	eb00 0e05 	add.w	lr, r0, r5
 800a67a:	210a      	movs	r1, #10
 800a67c:	4572      	cmp	r2, lr
 800a67e:	d113      	bne.n	800a6a8 <_strtod_l+0x258>
 800a680:	182a      	adds	r2, r5, r0
 800a682:	2a08      	cmp	r2, #8
 800a684:	f105 0501 	add.w	r5, r5, #1
 800a688:	4405      	add	r5, r0
 800a68a:	dc1c      	bgt.n	800a6c6 <_strtod_l+0x276>
 800a68c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a68e:	220a      	movs	r2, #10
 800a690:	fb02 3301 	mla	r3, r2, r1, r3
 800a694:	9309      	str	r3, [sp, #36]	; 0x24
 800a696:	2200      	movs	r2, #0
 800a698:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a69a:	1c59      	adds	r1, r3, #1
 800a69c:	911d      	str	r1, [sp, #116]	; 0x74
 800a69e:	785b      	ldrb	r3, [r3, #1]
 800a6a0:	4610      	mov	r0, r2
 800a6a2:	e7c9      	b.n	800a638 <_strtod_l+0x1e8>
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	e7d2      	b.n	800a64e <_strtod_l+0x1fe>
 800a6a8:	2a08      	cmp	r2, #8
 800a6aa:	dc04      	bgt.n	800a6b6 <_strtod_l+0x266>
 800a6ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a6ae:	434e      	muls	r6, r1
 800a6b0:	9609      	str	r6, [sp, #36]	; 0x24
 800a6b2:	3201      	adds	r2, #1
 800a6b4:	e7e2      	b.n	800a67c <_strtod_l+0x22c>
 800a6b6:	f102 0c01 	add.w	ip, r2, #1
 800a6ba:	f1bc 0f10 	cmp.w	ip, #16
 800a6be:	bfd8      	it	le
 800a6c0:	fb01 f909 	mulle.w	r9, r1, r9
 800a6c4:	e7f5      	b.n	800a6b2 <_strtod_l+0x262>
 800a6c6:	2d10      	cmp	r5, #16
 800a6c8:	bfdc      	itt	le
 800a6ca:	220a      	movle	r2, #10
 800a6cc:	fb02 3909 	mlale	r9, r2, r9, r3
 800a6d0:	e7e1      	b.n	800a696 <_strtod_l+0x246>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	9307      	str	r3, [sp, #28]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	e77c      	b.n	800a5d4 <_strtod_l+0x184>
 800a6da:	f04f 0c00 	mov.w	ip, #0
 800a6de:	f108 0302 	add.w	r3, r8, #2
 800a6e2:	931d      	str	r3, [sp, #116]	; 0x74
 800a6e4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800a6e8:	e785      	b.n	800a5f6 <_strtod_l+0x1a6>
 800a6ea:	f04f 0c01 	mov.w	ip, #1
 800a6ee:	e7f6      	b.n	800a6de <_strtod_l+0x28e>
 800a6f0:	0801002c 	.word	0x0801002c
 800a6f4:	0800fe3c 	.word	0x0800fe3c
 800a6f8:	7ff00000 	.word	0x7ff00000
 800a6fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6fe:	1c59      	adds	r1, r3, #1
 800a700:	911d      	str	r1, [sp, #116]	; 0x74
 800a702:	785b      	ldrb	r3, [r3, #1]
 800a704:	2b30      	cmp	r3, #48	; 0x30
 800a706:	d0f9      	beq.n	800a6fc <_strtod_l+0x2ac>
 800a708:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a70c:	2908      	cmp	r1, #8
 800a70e:	f63f af79 	bhi.w	800a604 <_strtod_l+0x1b4>
 800a712:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a716:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a718:	9308      	str	r3, [sp, #32]
 800a71a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a71c:	1c59      	adds	r1, r3, #1
 800a71e:	911d      	str	r1, [sp, #116]	; 0x74
 800a720:	785b      	ldrb	r3, [r3, #1]
 800a722:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a726:	2e09      	cmp	r6, #9
 800a728:	d937      	bls.n	800a79a <_strtod_l+0x34a>
 800a72a:	9e08      	ldr	r6, [sp, #32]
 800a72c:	1b89      	subs	r1, r1, r6
 800a72e:	2908      	cmp	r1, #8
 800a730:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a734:	dc02      	bgt.n	800a73c <_strtod_l+0x2ec>
 800a736:	4576      	cmp	r6, lr
 800a738:	bfa8      	it	ge
 800a73a:	4676      	movge	r6, lr
 800a73c:	f1bc 0f00 	cmp.w	ip, #0
 800a740:	d000      	beq.n	800a744 <_strtod_l+0x2f4>
 800a742:	4276      	negs	r6, r6
 800a744:	2d00      	cmp	r5, #0
 800a746:	d14f      	bne.n	800a7e8 <_strtod_l+0x398>
 800a748:	9904      	ldr	r1, [sp, #16]
 800a74a:	4301      	orrs	r1, r0
 800a74c:	f47f aec2 	bne.w	800a4d4 <_strtod_l+0x84>
 800a750:	2a00      	cmp	r2, #0
 800a752:	f47f aedb 	bne.w	800a50c <_strtod_l+0xbc>
 800a756:	2b69      	cmp	r3, #105	; 0x69
 800a758:	d027      	beq.n	800a7aa <_strtod_l+0x35a>
 800a75a:	dc24      	bgt.n	800a7a6 <_strtod_l+0x356>
 800a75c:	2b49      	cmp	r3, #73	; 0x49
 800a75e:	d024      	beq.n	800a7aa <_strtod_l+0x35a>
 800a760:	2b4e      	cmp	r3, #78	; 0x4e
 800a762:	f47f aed3 	bne.w	800a50c <_strtod_l+0xbc>
 800a766:	499e      	ldr	r1, [pc, #632]	; (800a9e0 <_strtod_l+0x590>)
 800a768:	a81d      	add	r0, sp, #116	; 0x74
 800a76a:	f001 fe4b 	bl	800c404 <__match>
 800a76e:	2800      	cmp	r0, #0
 800a770:	f43f aecc 	beq.w	800a50c <_strtod_l+0xbc>
 800a774:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	2b28      	cmp	r3, #40	; 0x28
 800a77a:	d12d      	bne.n	800a7d8 <_strtod_l+0x388>
 800a77c:	4999      	ldr	r1, [pc, #612]	; (800a9e4 <_strtod_l+0x594>)
 800a77e:	aa20      	add	r2, sp, #128	; 0x80
 800a780:	a81d      	add	r0, sp, #116	; 0x74
 800a782:	f001 fe53 	bl	800c42c <__hexnan>
 800a786:	2805      	cmp	r0, #5
 800a788:	d126      	bne.n	800a7d8 <_strtod_l+0x388>
 800a78a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a78c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a790:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a794:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a798:	e69c      	b.n	800a4d4 <_strtod_l+0x84>
 800a79a:	210a      	movs	r1, #10
 800a79c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a7a0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a7a4:	e7b9      	b.n	800a71a <_strtod_l+0x2ca>
 800a7a6:	2b6e      	cmp	r3, #110	; 0x6e
 800a7a8:	e7db      	b.n	800a762 <_strtod_l+0x312>
 800a7aa:	498f      	ldr	r1, [pc, #572]	; (800a9e8 <_strtod_l+0x598>)
 800a7ac:	a81d      	add	r0, sp, #116	; 0x74
 800a7ae:	f001 fe29 	bl	800c404 <__match>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	f43f aeaa 	beq.w	800a50c <_strtod_l+0xbc>
 800a7b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7ba:	498c      	ldr	r1, [pc, #560]	; (800a9ec <_strtod_l+0x59c>)
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	a81d      	add	r0, sp, #116	; 0x74
 800a7c0:	931d      	str	r3, [sp, #116]	; 0x74
 800a7c2:	f001 fe1f 	bl	800c404 <__match>
 800a7c6:	b910      	cbnz	r0, 800a7ce <_strtod_l+0x37e>
 800a7c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	931d      	str	r3, [sp, #116]	; 0x74
 800a7ce:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800a9fc <_strtod_l+0x5ac>
 800a7d2:	f04f 0a00 	mov.w	sl, #0
 800a7d6:	e67d      	b.n	800a4d4 <_strtod_l+0x84>
 800a7d8:	4885      	ldr	r0, [pc, #532]	; (800a9f0 <_strtod_l+0x5a0>)
 800a7da:	f002 ff0d 	bl	800d5f8 <nan>
 800a7de:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a7e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a7e6:	e675      	b.n	800a4d4 <_strtod_l+0x84>
 800a7e8:	9b07      	ldr	r3, [sp, #28]
 800a7ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7ec:	1af3      	subs	r3, r6, r3
 800a7ee:	2f00      	cmp	r7, #0
 800a7f0:	bf08      	it	eq
 800a7f2:	462f      	moveq	r7, r5
 800a7f4:	2d10      	cmp	r5, #16
 800a7f6:	9308      	str	r3, [sp, #32]
 800a7f8:	46a8      	mov	r8, r5
 800a7fa:	bfa8      	it	ge
 800a7fc:	f04f 0810 	movge.w	r8, #16
 800a800:	f7f5 fe88 	bl	8000514 <__aeabi_ui2d>
 800a804:	2d09      	cmp	r5, #9
 800a806:	4682      	mov	sl, r0
 800a808:	468b      	mov	fp, r1
 800a80a:	dd13      	ble.n	800a834 <_strtod_l+0x3e4>
 800a80c:	4b79      	ldr	r3, [pc, #484]	; (800a9f4 <_strtod_l+0x5a4>)
 800a80e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a812:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a816:	f7f5 fef7 	bl	8000608 <__aeabi_dmul>
 800a81a:	4682      	mov	sl, r0
 800a81c:	4648      	mov	r0, r9
 800a81e:	468b      	mov	fp, r1
 800a820:	f7f5 fe78 	bl	8000514 <__aeabi_ui2d>
 800a824:	4602      	mov	r2, r0
 800a826:	460b      	mov	r3, r1
 800a828:	4650      	mov	r0, sl
 800a82a:	4659      	mov	r1, fp
 800a82c:	f7f5 fd36 	bl	800029c <__adddf3>
 800a830:	4682      	mov	sl, r0
 800a832:	468b      	mov	fp, r1
 800a834:	2d0f      	cmp	r5, #15
 800a836:	dc38      	bgt.n	800a8aa <_strtod_l+0x45a>
 800a838:	9b08      	ldr	r3, [sp, #32]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f43f ae4a 	beq.w	800a4d4 <_strtod_l+0x84>
 800a840:	dd24      	ble.n	800a88c <_strtod_l+0x43c>
 800a842:	2b16      	cmp	r3, #22
 800a844:	dc0b      	bgt.n	800a85e <_strtod_l+0x40e>
 800a846:	4d6b      	ldr	r5, [pc, #428]	; (800a9f4 <_strtod_l+0x5a4>)
 800a848:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a84c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a850:	4652      	mov	r2, sl
 800a852:	465b      	mov	r3, fp
 800a854:	f7f5 fed8 	bl	8000608 <__aeabi_dmul>
 800a858:	4682      	mov	sl, r0
 800a85a:	468b      	mov	fp, r1
 800a85c:	e63a      	b.n	800a4d4 <_strtod_l+0x84>
 800a85e:	9a08      	ldr	r2, [sp, #32]
 800a860:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a864:	4293      	cmp	r3, r2
 800a866:	db20      	blt.n	800a8aa <_strtod_l+0x45a>
 800a868:	4c62      	ldr	r4, [pc, #392]	; (800a9f4 <_strtod_l+0x5a4>)
 800a86a:	f1c5 050f 	rsb	r5, r5, #15
 800a86e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a872:	4652      	mov	r2, sl
 800a874:	465b      	mov	r3, fp
 800a876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a87a:	f7f5 fec5 	bl	8000608 <__aeabi_dmul>
 800a87e:	9b08      	ldr	r3, [sp, #32]
 800a880:	1b5d      	subs	r5, r3, r5
 800a882:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a886:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a88a:	e7e3      	b.n	800a854 <_strtod_l+0x404>
 800a88c:	9b08      	ldr	r3, [sp, #32]
 800a88e:	3316      	adds	r3, #22
 800a890:	db0b      	blt.n	800a8aa <_strtod_l+0x45a>
 800a892:	9b07      	ldr	r3, [sp, #28]
 800a894:	4a57      	ldr	r2, [pc, #348]	; (800a9f4 <_strtod_l+0x5a4>)
 800a896:	1b9e      	subs	r6, r3, r6
 800a898:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a89c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8a0:	4650      	mov	r0, sl
 800a8a2:	4659      	mov	r1, fp
 800a8a4:	f7f5 ffda 	bl	800085c <__aeabi_ddiv>
 800a8a8:	e7d6      	b.n	800a858 <_strtod_l+0x408>
 800a8aa:	9b08      	ldr	r3, [sp, #32]
 800a8ac:	eba5 0808 	sub.w	r8, r5, r8
 800a8b0:	4498      	add	r8, r3
 800a8b2:	f1b8 0f00 	cmp.w	r8, #0
 800a8b6:	dd71      	ble.n	800a99c <_strtod_l+0x54c>
 800a8b8:	f018 030f 	ands.w	r3, r8, #15
 800a8bc:	d00a      	beq.n	800a8d4 <_strtod_l+0x484>
 800a8be:	494d      	ldr	r1, [pc, #308]	; (800a9f4 <_strtod_l+0x5a4>)
 800a8c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8c4:	4652      	mov	r2, sl
 800a8c6:	465b      	mov	r3, fp
 800a8c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8cc:	f7f5 fe9c 	bl	8000608 <__aeabi_dmul>
 800a8d0:	4682      	mov	sl, r0
 800a8d2:	468b      	mov	fp, r1
 800a8d4:	f038 080f 	bics.w	r8, r8, #15
 800a8d8:	d04d      	beq.n	800a976 <_strtod_l+0x526>
 800a8da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a8de:	dd22      	ble.n	800a926 <_strtod_l+0x4d6>
 800a8e0:	2500      	movs	r5, #0
 800a8e2:	462e      	mov	r6, r5
 800a8e4:	9509      	str	r5, [sp, #36]	; 0x24
 800a8e6:	9507      	str	r5, [sp, #28]
 800a8e8:	2322      	movs	r3, #34	; 0x22
 800a8ea:	f8df b110 	ldr.w	fp, [pc, #272]	; 800a9fc <_strtod_l+0x5ac>
 800a8ee:	6023      	str	r3, [r4, #0]
 800a8f0:	f04f 0a00 	mov.w	sl, #0
 800a8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f43f adec 	beq.w	800a4d4 <_strtod_l+0x84>
 800a8fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a8fe:	4620      	mov	r0, r4
 800a900:	f001 fe8e 	bl	800c620 <_Bfree>
 800a904:	9907      	ldr	r1, [sp, #28]
 800a906:	4620      	mov	r0, r4
 800a908:	f001 fe8a 	bl	800c620 <_Bfree>
 800a90c:	4631      	mov	r1, r6
 800a90e:	4620      	mov	r0, r4
 800a910:	f001 fe86 	bl	800c620 <_Bfree>
 800a914:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a916:	4620      	mov	r0, r4
 800a918:	f001 fe82 	bl	800c620 <_Bfree>
 800a91c:	4629      	mov	r1, r5
 800a91e:	4620      	mov	r0, r4
 800a920:	f001 fe7e 	bl	800c620 <_Bfree>
 800a924:	e5d6      	b.n	800a4d4 <_strtod_l+0x84>
 800a926:	2300      	movs	r3, #0
 800a928:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a92c:	4650      	mov	r0, sl
 800a92e:	4659      	mov	r1, fp
 800a930:	4699      	mov	r9, r3
 800a932:	f1b8 0f01 	cmp.w	r8, #1
 800a936:	dc21      	bgt.n	800a97c <_strtod_l+0x52c>
 800a938:	b10b      	cbz	r3, 800a93e <_strtod_l+0x4ee>
 800a93a:	4682      	mov	sl, r0
 800a93c:	468b      	mov	fp, r1
 800a93e:	4b2e      	ldr	r3, [pc, #184]	; (800a9f8 <_strtod_l+0x5a8>)
 800a940:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a944:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a948:	4652      	mov	r2, sl
 800a94a:	465b      	mov	r3, fp
 800a94c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a950:	f7f5 fe5a 	bl	8000608 <__aeabi_dmul>
 800a954:	4b29      	ldr	r3, [pc, #164]	; (800a9fc <_strtod_l+0x5ac>)
 800a956:	460a      	mov	r2, r1
 800a958:	400b      	ands	r3, r1
 800a95a:	4929      	ldr	r1, [pc, #164]	; (800aa00 <_strtod_l+0x5b0>)
 800a95c:	428b      	cmp	r3, r1
 800a95e:	4682      	mov	sl, r0
 800a960:	d8be      	bhi.n	800a8e0 <_strtod_l+0x490>
 800a962:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a966:	428b      	cmp	r3, r1
 800a968:	bf86      	itte	hi
 800a96a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800aa04 <_strtod_l+0x5b4>
 800a96e:	f04f 3aff 	movhi.w	sl, #4294967295
 800a972:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a976:	2300      	movs	r3, #0
 800a978:	9304      	str	r3, [sp, #16]
 800a97a:	e081      	b.n	800aa80 <_strtod_l+0x630>
 800a97c:	f018 0f01 	tst.w	r8, #1
 800a980:	d007      	beq.n	800a992 <_strtod_l+0x542>
 800a982:	4b1d      	ldr	r3, [pc, #116]	; (800a9f8 <_strtod_l+0x5a8>)
 800a984:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98c:	f7f5 fe3c 	bl	8000608 <__aeabi_dmul>
 800a990:	2301      	movs	r3, #1
 800a992:	f109 0901 	add.w	r9, r9, #1
 800a996:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a99a:	e7ca      	b.n	800a932 <_strtod_l+0x4e2>
 800a99c:	d0eb      	beq.n	800a976 <_strtod_l+0x526>
 800a99e:	f1c8 0800 	rsb	r8, r8, #0
 800a9a2:	f018 020f 	ands.w	r2, r8, #15
 800a9a6:	d00a      	beq.n	800a9be <_strtod_l+0x56e>
 800a9a8:	4b12      	ldr	r3, [pc, #72]	; (800a9f4 <_strtod_l+0x5a4>)
 800a9aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9ae:	4650      	mov	r0, sl
 800a9b0:	4659      	mov	r1, fp
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	f7f5 ff51 	bl	800085c <__aeabi_ddiv>
 800a9ba:	4682      	mov	sl, r0
 800a9bc:	468b      	mov	fp, r1
 800a9be:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a9c2:	d0d8      	beq.n	800a976 <_strtod_l+0x526>
 800a9c4:	f1b8 0f1f 	cmp.w	r8, #31
 800a9c8:	dd1e      	ble.n	800aa08 <_strtod_l+0x5b8>
 800a9ca:	2500      	movs	r5, #0
 800a9cc:	462e      	mov	r6, r5
 800a9ce:	9509      	str	r5, [sp, #36]	; 0x24
 800a9d0:	9507      	str	r5, [sp, #28]
 800a9d2:	2322      	movs	r3, #34	; 0x22
 800a9d4:	f04f 0a00 	mov.w	sl, #0
 800a9d8:	f04f 0b00 	mov.w	fp, #0
 800a9dc:	6023      	str	r3, [r4, #0]
 800a9de:	e789      	b.n	800a8f4 <_strtod_l+0x4a4>
 800a9e0:	0800fe15 	.word	0x0800fe15
 800a9e4:	0800fe50 	.word	0x0800fe50
 800a9e8:	0800fe0d 	.word	0x0800fe0d
 800a9ec:	0800ff47 	.word	0x0800ff47
 800a9f0:	0800ff43 	.word	0x0800ff43
 800a9f4:	080100c8 	.word	0x080100c8
 800a9f8:	080100a0 	.word	0x080100a0
 800a9fc:	7ff00000 	.word	0x7ff00000
 800aa00:	7ca00000 	.word	0x7ca00000
 800aa04:	7fefffff 	.word	0x7fefffff
 800aa08:	f018 0310 	ands.w	r3, r8, #16
 800aa0c:	bf18      	it	ne
 800aa0e:	236a      	movne	r3, #106	; 0x6a
 800aa10:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800adc8 <_strtod_l+0x978>
 800aa14:	9304      	str	r3, [sp, #16]
 800aa16:	4650      	mov	r0, sl
 800aa18:	4659      	mov	r1, fp
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	f018 0f01 	tst.w	r8, #1
 800aa20:	d004      	beq.n	800aa2c <_strtod_l+0x5dc>
 800aa22:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aa26:	f7f5 fdef 	bl	8000608 <__aeabi_dmul>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800aa30:	f109 0908 	add.w	r9, r9, #8
 800aa34:	d1f2      	bne.n	800aa1c <_strtod_l+0x5cc>
 800aa36:	b10b      	cbz	r3, 800aa3c <_strtod_l+0x5ec>
 800aa38:	4682      	mov	sl, r0
 800aa3a:	468b      	mov	fp, r1
 800aa3c:	9b04      	ldr	r3, [sp, #16]
 800aa3e:	b1bb      	cbz	r3, 800aa70 <_strtod_l+0x620>
 800aa40:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800aa44:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	4659      	mov	r1, fp
 800aa4c:	dd10      	ble.n	800aa70 <_strtod_l+0x620>
 800aa4e:	2b1f      	cmp	r3, #31
 800aa50:	f340 8128 	ble.w	800aca4 <_strtod_l+0x854>
 800aa54:	2b34      	cmp	r3, #52	; 0x34
 800aa56:	bfde      	ittt	le
 800aa58:	3b20      	suble	r3, #32
 800aa5a:	f04f 32ff 	movle.w	r2, #4294967295
 800aa5e:	fa02 f303 	lslle.w	r3, r2, r3
 800aa62:	f04f 0a00 	mov.w	sl, #0
 800aa66:	bfcc      	ite	gt
 800aa68:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800aa6c:	ea03 0b01 	andle.w	fp, r3, r1
 800aa70:	2200      	movs	r2, #0
 800aa72:	2300      	movs	r3, #0
 800aa74:	4650      	mov	r0, sl
 800aa76:	4659      	mov	r1, fp
 800aa78:	f7f6 f82e 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d1a4      	bne.n	800a9ca <_strtod_l+0x57a>
 800aa80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa86:	462b      	mov	r3, r5
 800aa88:	463a      	mov	r2, r7
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f001 fe34 	bl	800c6f8 <__s2b>
 800aa90:	9009      	str	r0, [sp, #36]	; 0x24
 800aa92:	2800      	cmp	r0, #0
 800aa94:	f43f af24 	beq.w	800a8e0 <_strtod_l+0x490>
 800aa98:	9b07      	ldr	r3, [sp, #28]
 800aa9a:	1b9e      	subs	r6, r3, r6
 800aa9c:	9b08      	ldr	r3, [sp, #32]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	bfb4      	ite	lt
 800aaa2:	4633      	movlt	r3, r6
 800aaa4:	2300      	movge	r3, #0
 800aaa6:	9310      	str	r3, [sp, #64]	; 0x40
 800aaa8:	9b08      	ldr	r3, [sp, #32]
 800aaaa:	2500      	movs	r5, #0
 800aaac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aab0:	9318      	str	r3, [sp, #96]	; 0x60
 800aab2:	462e      	mov	r6, r5
 800aab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aab6:	4620      	mov	r0, r4
 800aab8:	6859      	ldr	r1, [r3, #4]
 800aaba:	f001 fd71 	bl	800c5a0 <_Balloc>
 800aabe:	9007      	str	r0, [sp, #28]
 800aac0:	2800      	cmp	r0, #0
 800aac2:	f43f af11 	beq.w	800a8e8 <_strtod_l+0x498>
 800aac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aac8:	691a      	ldr	r2, [r3, #16]
 800aaca:	3202      	adds	r2, #2
 800aacc:	f103 010c 	add.w	r1, r3, #12
 800aad0:	0092      	lsls	r2, r2, #2
 800aad2:	300c      	adds	r0, #12
 800aad4:	f7fe ffa0 	bl	8009a18 <memcpy>
 800aad8:	ec4b ab10 	vmov	d0, sl, fp
 800aadc:	aa20      	add	r2, sp, #128	; 0x80
 800aade:	a91f      	add	r1, sp, #124	; 0x7c
 800aae0:	4620      	mov	r0, r4
 800aae2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800aae6:	f002 f943 	bl	800cd70 <__d2b>
 800aaea:	901e      	str	r0, [sp, #120]	; 0x78
 800aaec:	2800      	cmp	r0, #0
 800aaee:	f43f aefb 	beq.w	800a8e8 <_strtod_l+0x498>
 800aaf2:	2101      	movs	r1, #1
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f001 fe99 	bl	800c82c <__i2b>
 800aafa:	4606      	mov	r6, r0
 800aafc:	2800      	cmp	r0, #0
 800aafe:	f43f aef3 	beq.w	800a8e8 <_strtod_l+0x498>
 800ab02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab04:	9904      	ldr	r1, [sp, #16]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	bfab      	itete	ge
 800ab0a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ab0c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ab0e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ab10:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ab14:	bfac      	ite	ge
 800ab16:	eb03 0902 	addge.w	r9, r3, r2
 800ab1a:	1ad7      	sublt	r7, r2, r3
 800ab1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ab1e:	eba3 0801 	sub.w	r8, r3, r1
 800ab22:	4490      	add	r8, r2
 800ab24:	4ba3      	ldr	r3, [pc, #652]	; (800adb4 <_strtod_l+0x964>)
 800ab26:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab2a:	4598      	cmp	r8, r3
 800ab2c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ab30:	f280 80cc 	bge.w	800accc <_strtod_l+0x87c>
 800ab34:	eba3 0308 	sub.w	r3, r3, r8
 800ab38:	2b1f      	cmp	r3, #31
 800ab3a:	eba2 0203 	sub.w	r2, r2, r3
 800ab3e:	f04f 0101 	mov.w	r1, #1
 800ab42:	f300 80b6 	bgt.w	800acb2 <_strtod_l+0x862>
 800ab46:	fa01 f303 	lsl.w	r3, r1, r3
 800ab4a:	9311      	str	r3, [sp, #68]	; 0x44
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	930c      	str	r3, [sp, #48]	; 0x30
 800ab50:	eb09 0802 	add.w	r8, r9, r2
 800ab54:	9b04      	ldr	r3, [sp, #16]
 800ab56:	45c1      	cmp	r9, r8
 800ab58:	4417      	add	r7, r2
 800ab5a:	441f      	add	r7, r3
 800ab5c:	464b      	mov	r3, r9
 800ab5e:	bfa8      	it	ge
 800ab60:	4643      	movge	r3, r8
 800ab62:	42bb      	cmp	r3, r7
 800ab64:	bfa8      	it	ge
 800ab66:	463b      	movge	r3, r7
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	bfc2      	ittt	gt
 800ab6c:	eba8 0803 	subgt.w	r8, r8, r3
 800ab70:	1aff      	subgt	r7, r7, r3
 800ab72:	eba9 0903 	subgt.w	r9, r9, r3
 800ab76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	dd17      	ble.n	800abac <_strtod_l+0x75c>
 800ab7c:	4631      	mov	r1, r6
 800ab7e:	461a      	mov	r2, r3
 800ab80:	4620      	mov	r0, r4
 800ab82:	f001 ff0f 	bl	800c9a4 <__pow5mult>
 800ab86:	4606      	mov	r6, r0
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	f43f aead 	beq.w	800a8e8 <_strtod_l+0x498>
 800ab8e:	4601      	mov	r1, r0
 800ab90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ab92:	4620      	mov	r0, r4
 800ab94:	f001 fe60 	bl	800c858 <__multiply>
 800ab98:	900f      	str	r0, [sp, #60]	; 0x3c
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	f43f aea4 	beq.w	800a8e8 <_strtod_l+0x498>
 800aba0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800aba2:	4620      	mov	r0, r4
 800aba4:	f001 fd3c 	bl	800c620 <_Bfree>
 800aba8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abaa:	931e      	str	r3, [sp, #120]	; 0x78
 800abac:	f1b8 0f00 	cmp.w	r8, #0
 800abb0:	f300 8091 	bgt.w	800acd6 <_strtod_l+0x886>
 800abb4:	9b08      	ldr	r3, [sp, #32]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	dd08      	ble.n	800abcc <_strtod_l+0x77c>
 800abba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800abbc:	9907      	ldr	r1, [sp, #28]
 800abbe:	4620      	mov	r0, r4
 800abc0:	f001 fef0 	bl	800c9a4 <__pow5mult>
 800abc4:	9007      	str	r0, [sp, #28]
 800abc6:	2800      	cmp	r0, #0
 800abc8:	f43f ae8e 	beq.w	800a8e8 <_strtod_l+0x498>
 800abcc:	2f00      	cmp	r7, #0
 800abce:	dd08      	ble.n	800abe2 <_strtod_l+0x792>
 800abd0:	9907      	ldr	r1, [sp, #28]
 800abd2:	463a      	mov	r2, r7
 800abd4:	4620      	mov	r0, r4
 800abd6:	f001 ff3f 	bl	800ca58 <__lshift>
 800abda:	9007      	str	r0, [sp, #28]
 800abdc:	2800      	cmp	r0, #0
 800abde:	f43f ae83 	beq.w	800a8e8 <_strtod_l+0x498>
 800abe2:	f1b9 0f00 	cmp.w	r9, #0
 800abe6:	dd08      	ble.n	800abfa <_strtod_l+0x7aa>
 800abe8:	4631      	mov	r1, r6
 800abea:	464a      	mov	r2, r9
 800abec:	4620      	mov	r0, r4
 800abee:	f001 ff33 	bl	800ca58 <__lshift>
 800abf2:	4606      	mov	r6, r0
 800abf4:	2800      	cmp	r0, #0
 800abf6:	f43f ae77 	beq.w	800a8e8 <_strtod_l+0x498>
 800abfa:	9a07      	ldr	r2, [sp, #28]
 800abfc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800abfe:	4620      	mov	r0, r4
 800ac00:	f001 ffb2 	bl	800cb68 <__mdiff>
 800ac04:	4605      	mov	r5, r0
 800ac06:	2800      	cmp	r0, #0
 800ac08:	f43f ae6e 	beq.w	800a8e8 <_strtod_l+0x498>
 800ac0c:	68c3      	ldr	r3, [r0, #12]
 800ac0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac10:	2300      	movs	r3, #0
 800ac12:	60c3      	str	r3, [r0, #12]
 800ac14:	4631      	mov	r1, r6
 800ac16:	f001 ff8b 	bl	800cb30 <__mcmp>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	da65      	bge.n	800acea <_strtod_l+0x89a>
 800ac1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac20:	ea53 030a 	orrs.w	r3, r3, sl
 800ac24:	f040 8087 	bne.w	800ad36 <_strtod_l+0x8e6>
 800ac28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f040 8082 	bne.w	800ad36 <_strtod_l+0x8e6>
 800ac32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac36:	0d1b      	lsrs	r3, r3, #20
 800ac38:	051b      	lsls	r3, r3, #20
 800ac3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ac3e:	d97a      	bls.n	800ad36 <_strtod_l+0x8e6>
 800ac40:	696b      	ldr	r3, [r5, #20]
 800ac42:	b913      	cbnz	r3, 800ac4a <_strtod_l+0x7fa>
 800ac44:	692b      	ldr	r3, [r5, #16]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	dd75      	ble.n	800ad36 <_strtod_l+0x8e6>
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f001 ff02 	bl	800ca58 <__lshift>
 800ac54:	4631      	mov	r1, r6
 800ac56:	4605      	mov	r5, r0
 800ac58:	f001 ff6a 	bl	800cb30 <__mcmp>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	dd6a      	ble.n	800ad36 <_strtod_l+0x8e6>
 800ac60:	9904      	ldr	r1, [sp, #16]
 800ac62:	4a55      	ldr	r2, [pc, #340]	; (800adb8 <_strtod_l+0x968>)
 800ac64:	465b      	mov	r3, fp
 800ac66:	2900      	cmp	r1, #0
 800ac68:	f000 8085 	beq.w	800ad76 <_strtod_l+0x926>
 800ac6c:	ea02 010b 	and.w	r1, r2, fp
 800ac70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ac74:	dc7f      	bgt.n	800ad76 <_strtod_l+0x926>
 800ac76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ac7a:	f77f aeaa 	ble.w	800a9d2 <_strtod_l+0x582>
 800ac7e:	4a4f      	ldr	r2, [pc, #316]	; (800adbc <_strtod_l+0x96c>)
 800ac80:	2300      	movs	r3, #0
 800ac82:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ac86:	4650      	mov	r0, sl
 800ac88:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ac8c:	4659      	mov	r1, fp
 800ac8e:	f7f5 fcbb 	bl	8000608 <__aeabi_dmul>
 800ac92:	460b      	mov	r3, r1
 800ac94:	4303      	orrs	r3, r0
 800ac96:	bf08      	it	eq
 800ac98:	2322      	moveq	r3, #34	; 0x22
 800ac9a:	4682      	mov	sl, r0
 800ac9c:	468b      	mov	fp, r1
 800ac9e:	bf08      	it	eq
 800aca0:	6023      	streq	r3, [r4, #0]
 800aca2:	e62b      	b.n	800a8fc <_strtod_l+0x4ac>
 800aca4:	f04f 32ff 	mov.w	r2, #4294967295
 800aca8:	fa02 f303 	lsl.w	r3, r2, r3
 800acac:	ea03 0a0a 	and.w	sl, r3, sl
 800acb0:	e6de      	b.n	800aa70 <_strtod_l+0x620>
 800acb2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800acb6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800acba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800acbe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800acc2:	fa01 f308 	lsl.w	r3, r1, r8
 800acc6:	930c      	str	r3, [sp, #48]	; 0x30
 800acc8:	9111      	str	r1, [sp, #68]	; 0x44
 800acca:	e741      	b.n	800ab50 <_strtod_l+0x700>
 800accc:	2300      	movs	r3, #0
 800acce:	930c      	str	r3, [sp, #48]	; 0x30
 800acd0:	2301      	movs	r3, #1
 800acd2:	9311      	str	r3, [sp, #68]	; 0x44
 800acd4:	e73c      	b.n	800ab50 <_strtod_l+0x700>
 800acd6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800acd8:	4642      	mov	r2, r8
 800acda:	4620      	mov	r0, r4
 800acdc:	f001 febc 	bl	800ca58 <__lshift>
 800ace0:	901e      	str	r0, [sp, #120]	; 0x78
 800ace2:	2800      	cmp	r0, #0
 800ace4:	f47f af66 	bne.w	800abb4 <_strtod_l+0x764>
 800ace8:	e5fe      	b.n	800a8e8 <_strtod_l+0x498>
 800acea:	465f      	mov	r7, fp
 800acec:	d16e      	bne.n	800adcc <_strtod_l+0x97c>
 800acee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acf4:	b342      	cbz	r2, 800ad48 <_strtod_l+0x8f8>
 800acf6:	4a32      	ldr	r2, [pc, #200]	; (800adc0 <_strtod_l+0x970>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d128      	bne.n	800ad4e <_strtod_l+0x8fe>
 800acfc:	9b04      	ldr	r3, [sp, #16]
 800acfe:	4650      	mov	r0, sl
 800ad00:	b1eb      	cbz	r3, 800ad3e <_strtod_l+0x8ee>
 800ad02:	4a2d      	ldr	r2, [pc, #180]	; (800adb8 <_strtod_l+0x968>)
 800ad04:	403a      	ands	r2, r7
 800ad06:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ad0a:	f04f 31ff 	mov.w	r1, #4294967295
 800ad0e:	d819      	bhi.n	800ad44 <_strtod_l+0x8f4>
 800ad10:	0d12      	lsrs	r2, r2, #20
 800ad12:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ad16:	fa01 f303 	lsl.w	r3, r1, r3
 800ad1a:	4298      	cmp	r0, r3
 800ad1c:	d117      	bne.n	800ad4e <_strtod_l+0x8fe>
 800ad1e:	4b29      	ldr	r3, [pc, #164]	; (800adc4 <_strtod_l+0x974>)
 800ad20:	429f      	cmp	r7, r3
 800ad22:	d102      	bne.n	800ad2a <_strtod_l+0x8da>
 800ad24:	3001      	adds	r0, #1
 800ad26:	f43f addf 	beq.w	800a8e8 <_strtod_l+0x498>
 800ad2a:	4b23      	ldr	r3, [pc, #140]	; (800adb8 <_strtod_l+0x968>)
 800ad2c:	403b      	ands	r3, r7
 800ad2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ad32:	f04f 0a00 	mov.w	sl, #0
 800ad36:	9b04      	ldr	r3, [sp, #16]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1a0      	bne.n	800ac7e <_strtod_l+0x82e>
 800ad3c:	e5de      	b.n	800a8fc <_strtod_l+0x4ac>
 800ad3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad42:	e7ea      	b.n	800ad1a <_strtod_l+0x8ca>
 800ad44:	460b      	mov	r3, r1
 800ad46:	e7e8      	b.n	800ad1a <_strtod_l+0x8ca>
 800ad48:	ea53 030a 	orrs.w	r3, r3, sl
 800ad4c:	d088      	beq.n	800ac60 <_strtod_l+0x810>
 800ad4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad50:	b1db      	cbz	r3, 800ad8a <_strtod_l+0x93a>
 800ad52:	423b      	tst	r3, r7
 800ad54:	d0ef      	beq.n	800ad36 <_strtod_l+0x8e6>
 800ad56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad58:	9a04      	ldr	r2, [sp, #16]
 800ad5a:	4650      	mov	r0, sl
 800ad5c:	4659      	mov	r1, fp
 800ad5e:	b1c3      	cbz	r3, 800ad92 <_strtod_l+0x942>
 800ad60:	f7ff fb57 	bl	800a412 <sulp>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad6c:	f7f5 fa96 	bl	800029c <__adddf3>
 800ad70:	4682      	mov	sl, r0
 800ad72:	468b      	mov	fp, r1
 800ad74:	e7df      	b.n	800ad36 <_strtod_l+0x8e6>
 800ad76:	4013      	ands	r3, r2
 800ad78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ad7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ad80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ad84:	f04f 3aff 	mov.w	sl, #4294967295
 800ad88:	e7d5      	b.n	800ad36 <_strtod_l+0x8e6>
 800ad8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad8c:	ea13 0f0a 	tst.w	r3, sl
 800ad90:	e7e0      	b.n	800ad54 <_strtod_l+0x904>
 800ad92:	f7ff fb3e 	bl	800a412 <sulp>
 800ad96:	4602      	mov	r2, r0
 800ad98:	460b      	mov	r3, r1
 800ad9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad9e:	f7f5 fa7b 	bl	8000298 <__aeabi_dsub>
 800ada2:	2200      	movs	r2, #0
 800ada4:	2300      	movs	r3, #0
 800ada6:	4682      	mov	sl, r0
 800ada8:	468b      	mov	fp, r1
 800adaa:	f7f5 fe95 	bl	8000ad8 <__aeabi_dcmpeq>
 800adae:	2800      	cmp	r0, #0
 800adb0:	d0c1      	beq.n	800ad36 <_strtod_l+0x8e6>
 800adb2:	e60e      	b.n	800a9d2 <_strtod_l+0x582>
 800adb4:	fffffc02 	.word	0xfffffc02
 800adb8:	7ff00000 	.word	0x7ff00000
 800adbc:	39500000 	.word	0x39500000
 800adc0:	000fffff 	.word	0x000fffff
 800adc4:	7fefffff 	.word	0x7fefffff
 800adc8:	0800fe68 	.word	0x0800fe68
 800adcc:	4631      	mov	r1, r6
 800adce:	4628      	mov	r0, r5
 800add0:	f002 f82a 	bl	800ce28 <__ratio>
 800add4:	ec59 8b10 	vmov	r8, r9, d0
 800add8:	ee10 0a10 	vmov	r0, s0
 800addc:	2200      	movs	r2, #0
 800adde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ade2:	4649      	mov	r1, r9
 800ade4:	f7f5 fe8c 	bl	8000b00 <__aeabi_dcmple>
 800ade8:	2800      	cmp	r0, #0
 800adea:	d07c      	beq.n	800aee6 <_strtod_l+0xa96>
 800adec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d04c      	beq.n	800ae8c <_strtod_l+0xa3c>
 800adf2:	4b95      	ldr	r3, [pc, #596]	; (800b048 <_strtod_l+0xbf8>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800adfa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b048 <_strtod_l+0xbf8>
 800adfe:	f04f 0800 	mov.w	r8, #0
 800ae02:	4b92      	ldr	r3, [pc, #584]	; (800b04c <_strtod_l+0xbfc>)
 800ae04:	403b      	ands	r3, r7
 800ae06:	9311      	str	r3, [sp, #68]	; 0x44
 800ae08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ae0a:	4b91      	ldr	r3, [pc, #580]	; (800b050 <_strtod_l+0xc00>)
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	f040 80b2 	bne.w	800af76 <_strtod_l+0xb26>
 800ae12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ae16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae1a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ae1e:	ec4b ab10 	vmov	d0, sl, fp
 800ae22:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800ae26:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ae2a:	f001 ff25 	bl	800cc78 <__ulp>
 800ae2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae32:	ec53 2b10 	vmov	r2, r3, d0
 800ae36:	f7f5 fbe7 	bl	8000608 <__aeabi_dmul>
 800ae3a:	4652      	mov	r2, sl
 800ae3c:	465b      	mov	r3, fp
 800ae3e:	f7f5 fa2d 	bl	800029c <__adddf3>
 800ae42:	460b      	mov	r3, r1
 800ae44:	4981      	ldr	r1, [pc, #516]	; (800b04c <_strtod_l+0xbfc>)
 800ae46:	4a83      	ldr	r2, [pc, #524]	; (800b054 <_strtod_l+0xc04>)
 800ae48:	4019      	ands	r1, r3
 800ae4a:	4291      	cmp	r1, r2
 800ae4c:	4682      	mov	sl, r0
 800ae4e:	d95e      	bls.n	800af0e <_strtod_l+0xabe>
 800ae50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae52:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d103      	bne.n	800ae62 <_strtod_l+0xa12>
 800ae5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	f43f ad43 	beq.w	800a8e8 <_strtod_l+0x498>
 800ae62:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b060 <_strtod_l+0xc10>
 800ae66:	f04f 3aff 	mov.w	sl, #4294967295
 800ae6a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f001 fbd7 	bl	800c620 <_Bfree>
 800ae72:	9907      	ldr	r1, [sp, #28]
 800ae74:	4620      	mov	r0, r4
 800ae76:	f001 fbd3 	bl	800c620 <_Bfree>
 800ae7a:	4631      	mov	r1, r6
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f001 fbcf 	bl	800c620 <_Bfree>
 800ae82:	4629      	mov	r1, r5
 800ae84:	4620      	mov	r0, r4
 800ae86:	f001 fbcb 	bl	800c620 <_Bfree>
 800ae8a:	e613      	b.n	800aab4 <_strtod_l+0x664>
 800ae8c:	f1ba 0f00 	cmp.w	sl, #0
 800ae90:	d11b      	bne.n	800aeca <_strtod_l+0xa7a>
 800ae92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae96:	b9f3      	cbnz	r3, 800aed6 <_strtod_l+0xa86>
 800ae98:	4b6b      	ldr	r3, [pc, #428]	; (800b048 <_strtod_l+0xbf8>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	4640      	mov	r0, r8
 800ae9e:	4649      	mov	r1, r9
 800aea0:	f7f5 fe24 	bl	8000aec <__aeabi_dcmplt>
 800aea4:	b9d0      	cbnz	r0, 800aedc <_strtod_l+0xa8c>
 800aea6:	4640      	mov	r0, r8
 800aea8:	4649      	mov	r1, r9
 800aeaa:	4b6b      	ldr	r3, [pc, #428]	; (800b058 <_strtod_l+0xc08>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	f7f5 fbab 	bl	8000608 <__aeabi_dmul>
 800aeb2:	4680      	mov	r8, r0
 800aeb4:	4689      	mov	r9, r1
 800aeb6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aeba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800aebe:	931b      	str	r3, [sp, #108]	; 0x6c
 800aec0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800aec4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800aec8:	e79b      	b.n	800ae02 <_strtod_l+0x9b2>
 800aeca:	f1ba 0f01 	cmp.w	sl, #1
 800aece:	d102      	bne.n	800aed6 <_strtod_l+0xa86>
 800aed0:	2f00      	cmp	r7, #0
 800aed2:	f43f ad7e 	beq.w	800a9d2 <_strtod_l+0x582>
 800aed6:	4b61      	ldr	r3, [pc, #388]	; (800b05c <_strtod_l+0xc0c>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	e78c      	b.n	800adf6 <_strtod_l+0x9a6>
 800aedc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b058 <_strtod_l+0xc08>
 800aee0:	f04f 0800 	mov.w	r8, #0
 800aee4:	e7e7      	b.n	800aeb6 <_strtod_l+0xa66>
 800aee6:	4b5c      	ldr	r3, [pc, #368]	; (800b058 <_strtod_l+0xc08>)
 800aee8:	4640      	mov	r0, r8
 800aeea:	4649      	mov	r1, r9
 800aeec:	2200      	movs	r2, #0
 800aeee:	f7f5 fb8b 	bl	8000608 <__aeabi_dmul>
 800aef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aef4:	4680      	mov	r8, r0
 800aef6:	4689      	mov	r9, r1
 800aef8:	b933      	cbnz	r3, 800af08 <_strtod_l+0xab8>
 800aefa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aefe:	9012      	str	r0, [sp, #72]	; 0x48
 800af00:	9313      	str	r3, [sp, #76]	; 0x4c
 800af02:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800af06:	e7dd      	b.n	800aec4 <_strtod_l+0xa74>
 800af08:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800af0c:	e7f9      	b.n	800af02 <_strtod_l+0xab2>
 800af0e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800af12:	9b04      	ldr	r3, [sp, #16]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d1a8      	bne.n	800ae6a <_strtod_l+0xa1a>
 800af18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800af1e:	0d1b      	lsrs	r3, r3, #20
 800af20:	051b      	lsls	r3, r3, #20
 800af22:	429a      	cmp	r2, r3
 800af24:	d1a1      	bne.n	800ae6a <_strtod_l+0xa1a>
 800af26:	4640      	mov	r0, r8
 800af28:	4649      	mov	r1, r9
 800af2a:	f7f5 fecd 	bl	8000cc8 <__aeabi_d2lz>
 800af2e:	f7f5 fb3d 	bl	80005ac <__aeabi_l2d>
 800af32:	4602      	mov	r2, r0
 800af34:	460b      	mov	r3, r1
 800af36:	4640      	mov	r0, r8
 800af38:	4649      	mov	r1, r9
 800af3a:	f7f5 f9ad 	bl	8000298 <__aeabi_dsub>
 800af3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af44:	ea43 030a 	orr.w	r3, r3, sl
 800af48:	4313      	orrs	r3, r2
 800af4a:	4680      	mov	r8, r0
 800af4c:	4689      	mov	r9, r1
 800af4e:	d053      	beq.n	800aff8 <_strtod_l+0xba8>
 800af50:	a335      	add	r3, pc, #212	; (adr r3, 800b028 <_strtod_l+0xbd8>)
 800af52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af56:	f7f5 fdc9 	bl	8000aec <__aeabi_dcmplt>
 800af5a:	2800      	cmp	r0, #0
 800af5c:	f47f acce 	bne.w	800a8fc <_strtod_l+0x4ac>
 800af60:	a333      	add	r3, pc, #204	; (adr r3, 800b030 <_strtod_l+0xbe0>)
 800af62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af66:	4640      	mov	r0, r8
 800af68:	4649      	mov	r1, r9
 800af6a:	f7f5 fddd 	bl	8000b28 <__aeabi_dcmpgt>
 800af6e:	2800      	cmp	r0, #0
 800af70:	f43f af7b 	beq.w	800ae6a <_strtod_l+0xa1a>
 800af74:	e4c2      	b.n	800a8fc <_strtod_l+0x4ac>
 800af76:	9b04      	ldr	r3, [sp, #16]
 800af78:	b333      	cbz	r3, 800afc8 <_strtod_l+0xb78>
 800af7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af7c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af80:	d822      	bhi.n	800afc8 <_strtod_l+0xb78>
 800af82:	a32d      	add	r3, pc, #180	; (adr r3, 800b038 <_strtod_l+0xbe8>)
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	4640      	mov	r0, r8
 800af8a:	4649      	mov	r1, r9
 800af8c:	f7f5 fdb8 	bl	8000b00 <__aeabi_dcmple>
 800af90:	b1a0      	cbz	r0, 800afbc <_strtod_l+0xb6c>
 800af92:	4649      	mov	r1, r9
 800af94:	4640      	mov	r0, r8
 800af96:	f7f5 fe0f 	bl	8000bb8 <__aeabi_d2uiz>
 800af9a:	2801      	cmp	r0, #1
 800af9c:	bf38      	it	cc
 800af9e:	2001      	movcc	r0, #1
 800afa0:	f7f5 fab8 	bl	8000514 <__aeabi_ui2d>
 800afa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afa6:	4680      	mov	r8, r0
 800afa8:	4689      	mov	r9, r1
 800afaa:	bb13      	cbnz	r3, 800aff2 <_strtod_l+0xba2>
 800afac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afb0:	9014      	str	r0, [sp, #80]	; 0x50
 800afb2:	9315      	str	r3, [sp, #84]	; 0x54
 800afb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800afb8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800afbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800afc0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800afc4:	1a9b      	subs	r3, r3, r2
 800afc6:	930d      	str	r3, [sp, #52]	; 0x34
 800afc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800afcc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800afd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800afd4:	f001 fe50 	bl	800cc78 <__ulp>
 800afd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800afdc:	ec53 2b10 	vmov	r2, r3, d0
 800afe0:	f7f5 fb12 	bl	8000608 <__aeabi_dmul>
 800afe4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800afe8:	f7f5 f958 	bl	800029c <__adddf3>
 800afec:	4682      	mov	sl, r0
 800afee:	468b      	mov	fp, r1
 800aff0:	e78f      	b.n	800af12 <_strtod_l+0xac2>
 800aff2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800aff6:	e7dd      	b.n	800afb4 <_strtod_l+0xb64>
 800aff8:	a311      	add	r3, pc, #68	; (adr r3, 800b040 <_strtod_l+0xbf0>)
 800affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affe:	f7f5 fd75 	bl	8000aec <__aeabi_dcmplt>
 800b002:	e7b4      	b.n	800af6e <_strtod_l+0xb1e>
 800b004:	2300      	movs	r3, #0
 800b006:	930e      	str	r3, [sp, #56]	; 0x38
 800b008:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b00a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b00c:	6013      	str	r3, [r2, #0]
 800b00e:	f7ff ba65 	b.w	800a4dc <_strtod_l+0x8c>
 800b012:	2b65      	cmp	r3, #101	; 0x65
 800b014:	f43f ab5d 	beq.w	800a6d2 <_strtod_l+0x282>
 800b018:	2b45      	cmp	r3, #69	; 0x45
 800b01a:	f43f ab5a 	beq.w	800a6d2 <_strtod_l+0x282>
 800b01e:	2201      	movs	r2, #1
 800b020:	f7ff bb92 	b.w	800a748 <_strtod_l+0x2f8>
 800b024:	f3af 8000 	nop.w
 800b028:	94a03595 	.word	0x94a03595
 800b02c:	3fdfffff 	.word	0x3fdfffff
 800b030:	35afe535 	.word	0x35afe535
 800b034:	3fe00000 	.word	0x3fe00000
 800b038:	ffc00000 	.word	0xffc00000
 800b03c:	41dfffff 	.word	0x41dfffff
 800b040:	94a03595 	.word	0x94a03595
 800b044:	3fcfffff 	.word	0x3fcfffff
 800b048:	3ff00000 	.word	0x3ff00000
 800b04c:	7ff00000 	.word	0x7ff00000
 800b050:	7fe00000 	.word	0x7fe00000
 800b054:	7c9fffff 	.word	0x7c9fffff
 800b058:	3fe00000 	.word	0x3fe00000
 800b05c:	bff00000 	.word	0xbff00000
 800b060:	7fefffff 	.word	0x7fefffff

0800b064 <strtod>:
 800b064:	460a      	mov	r2, r1
 800b066:	4601      	mov	r1, r0
 800b068:	4802      	ldr	r0, [pc, #8]	; (800b074 <strtod+0x10>)
 800b06a:	4b03      	ldr	r3, [pc, #12]	; (800b078 <strtod+0x14>)
 800b06c:	6800      	ldr	r0, [r0, #0]
 800b06e:	f7ff b9ef 	b.w	800a450 <_strtod_l>
 800b072:	bf00      	nop
 800b074:	20000028 	.word	0x20000028
 800b078:	20000090 	.word	0x20000090

0800b07c <strtok>:
 800b07c:	4b16      	ldr	r3, [pc, #88]	; (800b0d8 <strtok+0x5c>)
 800b07e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b080:	681e      	ldr	r6, [r3, #0]
 800b082:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b084:	4605      	mov	r5, r0
 800b086:	b9fc      	cbnz	r4, 800b0c8 <strtok+0x4c>
 800b088:	2050      	movs	r0, #80	; 0x50
 800b08a:	9101      	str	r1, [sp, #4]
 800b08c:	f001 fa6e 	bl	800c56c <malloc>
 800b090:	9901      	ldr	r1, [sp, #4]
 800b092:	65b0      	str	r0, [r6, #88]	; 0x58
 800b094:	4602      	mov	r2, r0
 800b096:	b920      	cbnz	r0, 800b0a2 <strtok+0x26>
 800b098:	4b10      	ldr	r3, [pc, #64]	; (800b0dc <strtok+0x60>)
 800b09a:	4811      	ldr	r0, [pc, #68]	; (800b0e0 <strtok+0x64>)
 800b09c:	2157      	movs	r1, #87	; 0x57
 800b09e:	f000 f849 	bl	800b134 <__assert_func>
 800b0a2:	e9c0 4400 	strd	r4, r4, [r0]
 800b0a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b0aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b0ae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b0b2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b0b6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b0ba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b0be:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b0c2:	6184      	str	r4, [r0, #24]
 800b0c4:	7704      	strb	r4, [r0, #28]
 800b0c6:	6244      	str	r4, [r0, #36]	; 0x24
 800b0c8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	b002      	add	sp, #8
 800b0d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b0d4:	f000 b806 	b.w	800b0e4 <__strtok_r>
 800b0d8:	20000028 	.word	0x20000028
 800b0dc:	0800fe90 	.word	0x0800fe90
 800b0e0:	0800fea7 	.word	0x0800fea7

0800b0e4 <__strtok_r>:
 800b0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0e6:	b908      	cbnz	r0, 800b0ec <__strtok_r+0x8>
 800b0e8:	6810      	ldr	r0, [r2, #0]
 800b0ea:	b188      	cbz	r0, 800b110 <__strtok_r+0x2c>
 800b0ec:	4604      	mov	r4, r0
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b0f4:	460f      	mov	r7, r1
 800b0f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b0fa:	b91e      	cbnz	r6, 800b104 <__strtok_r+0x20>
 800b0fc:	b965      	cbnz	r5, 800b118 <__strtok_r+0x34>
 800b0fe:	6015      	str	r5, [r2, #0]
 800b100:	4628      	mov	r0, r5
 800b102:	e005      	b.n	800b110 <__strtok_r+0x2c>
 800b104:	42b5      	cmp	r5, r6
 800b106:	d1f6      	bne.n	800b0f6 <__strtok_r+0x12>
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1f0      	bne.n	800b0ee <__strtok_r+0xa>
 800b10c:	6014      	str	r4, [r2, #0]
 800b10e:	7003      	strb	r3, [r0, #0]
 800b110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b112:	461c      	mov	r4, r3
 800b114:	e00c      	b.n	800b130 <__strtok_r+0x4c>
 800b116:	b915      	cbnz	r5, 800b11e <__strtok_r+0x3a>
 800b118:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b11c:	460e      	mov	r6, r1
 800b11e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b122:	42ab      	cmp	r3, r5
 800b124:	d1f7      	bne.n	800b116 <__strtok_r+0x32>
 800b126:	2b00      	cmp	r3, #0
 800b128:	d0f3      	beq.n	800b112 <__strtok_r+0x2e>
 800b12a:	2300      	movs	r3, #0
 800b12c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b130:	6014      	str	r4, [r2, #0]
 800b132:	e7ed      	b.n	800b110 <__strtok_r+0x2c>

0800b134 <__assert_func>:
 800b134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b136:	4614      	mov	r4, r2
 800b138:	461a      	mov	r2, r3
 800b13a:	4b09      	ldr	r3, [pc, #36]	; (800b160 <__assert_func+0x2c>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4605      	mov	r5, r0
 800b140:	68d8      	ldr	r0, [r3, #12]
 800b142:	b14c      	cbz	r4, 800b158 <__assert_func+0x24>
 800b144:	4b07      	ldr	r3, [pc, #28]	; (800b164 <__assert_func+0x30>)
 800b146:	9100      	str	r1, [sp, #0]
 800b148:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b14c:	4906      	ldr	r1, [pc, #24]	; (800b168 <__assert_func+0x34>)
 800b14e:	462b      	mov	r3, r5
 800b150:	f000 fe86 	bl	800be60 <fiprintf>
 800b154:	f002 fb48 	bl	800d7e8 <abort>
 800b158:	4b04      	ldr	r3, [pc, #16]	; (800b16c <__assert_func+0x38>)
 800b15a:	461c      	mov	r4, r3
 800b15c:	e7f3      	b.n	800b146 <__assert_func+0x12>
 800b15e:	bf00      	nop
 800b160:	20000028 	.word	0x20000028
 800b164:	0800ff08 	.word	0x0800ff08
 800b168:	0800ff15 	.word	0x0800ff15
 800b16c:	0800ff43 	.word	0x0800ff43

0800b170 <quorem>:
 800b170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b174:	6903      	ldr	r3, [r0, #16]
 800b176:	690c      	ldr	r4, [r1, #16]
 800b178:	42a3      	cmp	r3, r4
 800b17a:	4607      	mov	r7, r0
 800b17c:	f2c0 8081 	blt.w	800b282 <quorem+0x112>
 800b180:	3c01      	subs	r4, #1
 800b182:	f101 0814 	add.w	r8, r1, #20
 800b186:	f100 0514 	add.w	r5, r0, #20
 800b18a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b18e:	9301      	str	r3, [sp, #4]
 800b190:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b194:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b198:	3301      	adds	r3, #1
 800b19a:	429a      	cmp	r2, r3
 800b19c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b1a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b1a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b1a8:	d331      	bcc.n	800b20e <quorem+0x9e>
 800b1aa:	f04f 0e00 	mov.w	lr, #0
 800b1ae:	4640      	mov	r0, r8
 800b1b0:	46ac      	mov	ip, r5
 800b1b2:	46f2      	mov	sl, lr
 800b1b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b1b8:	b293      	uxth	r3, r2
 800b1ba:	fb06 e303 	mla	r3, r6, r3, lr
 800b1be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	ebaa 0303 	sub.w	r3, sl, r3
 800b1c8:	0c12      	lsrs	r2, r2, #16
 800b1ca:	f8dc a000 	ldr.w	sl, [ip]
 800b1ce:	fb06 e202 	mla	r2, r6, r2, lr
 800b1d2:	fa13 f38a 	uxtah	r3, r3, sl
 800b1d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b1da:	fa1f fa82 	uxth.w	sl, r2
 800b1de:	f8dc 2000 	ldr.w	r2, [ip]
 800b1e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b1e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1f0:	4581      	cmp	r9, r0
 800b1f2:	f84c 3b04 	str.w	r3, [ip], #4
 800b1f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b1fa:	d2db      	bcs.n	800b1b4 <quorem+0x44>
 800b1fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b200:	b92b      	cbnz	r3, 800b20e <quorem+0x9e>
 800b202:	9b01      	ldr	r3, [sp, #4]
 800b204:	3b04      	subs	r3, #4
 800b206:	429d      	cmp	r5, r3
 800b208:	461a      	mov	r2, r3
 800b20a:	d32e      	bcc.n	800b26a <quorem+0xfa>
 800b20c:	613c      	str	r4, [r7, #16]
 800b20e:	4638      	mov	r0, r7
 800b210:	f001 fc8e 	bl	800cb30 <__mcmp>
 800b214:	2800      	cmp	r0, #0
 800b216:	db24      	blt.n	800b262 <quorem+0xf2>
 800b218:	3601      	adds	r6, #1
 800b21a:	4628      	mov	r0, r5
 800b21c:	f04f 0c00 	mov.w	ip, #0
 800b220:	f858 2b04 	ldr.w	r2, [r8], #4
 800b224:	f8d0 e000 	ldr.w	lr, [r0]
 800b228:	b293      	uxth	r3, r2
 800b22a:	ebac 0303 	sub.w	r3, ip, r3
 800b22e:	0c12      	lsrs	r2, r2, #16
 800b230:	fa13 f38e 	uxtah	r3, r3, lr
 800b234:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b238:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b242:	45c1      	cmp	r9, r8
 800b244:	f840 3b04 	str.w	r3, [r0], #4
 800b248:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b24c:	d2e8      	bcs.n	800b220 <quorem+0xb0>
 800b24e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b256:	b922      	cbnz	r2, 800b262 <quorem+0xf2>
 800b258:	3b04      	subs	r3, #4
 800b25a:	429d      	cmp	r5, r3
 800b25c:	461a      	mov	r2, r3
 800b25e:	d30a      	bcc.n	800b276 <quorem+0x106>
 800b260:	613c      	str	r4, [r7, #16]
 800b262:	4630      	mov	r0, r6
 800b264:	b003      	add	sp, #12
 800b266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b26a:	6812      	ldr	r2, [r2, #0]
 800b26c:	3b04      	subs	r3, #4
 800b26e:	2a00      	cmp	r2, #0
 800b270:	d1cc      	bne.n	800b20c <quorem+0x9c>
 800b272:	3c01      	subs	r4, #1
 800b274:	e7c7      	b.n	800b206 <quorem+0x96>
 800b276:	6812      	ldr	r2, [r2, #0]
 800b278:	3b04      	subs	r3, #4
 800b27a:	2a00      	cmp	r2, #0
 800b27c:	d1f0      	bne.n	800b260 <quorem+0xf0>
 800b27e:	3c01      	subs	r4, #1
 800b280:	e7eb      	b.n	800b25a <quorem+0xea>
 800b282:	2000      	movs	r0, #0
 800b284:	e7ee      	b.n	800b264 <quorem+0xf4>
	...

0800b288 <_dtoa_r>:
 800b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28c:	ed2d 8b02 	vpush	{d8}
 800b290:	ec57 6b10 	vmov	r6, r7, d0
 800b294:	b095      	sub	sp, #84	; 0x54
 800b296:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b298:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b29c:	9105      	str	r1, [sp, #20]
 800b29e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	9209      	str	r2, [sp, #36]	; 0x24
 800b2a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2a8:	b975      	cbnz	r5, 800b2c8 <_dtoa_r+0x40>
 800b2aa:	2010      	movs	r0, #16
 800b2ac:	f001 f95e 	bl	800c56c <malloc>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	6260      	str	r0, [r4, #36]	; 0x24
 800b2b4:	b920      	cbnz	r0, 800b2c0 <_dtoa_r+0x38>
 800b2b6:	4bb2      	ldr	r3, [pc, #712]	; (800b580 <_dtoa_r+0x2f8>)
 800b2b8:	21ea      	movs	r1, #234	; 0xea
 800b2ba:	48b2      	ldr	r0, [pc, #712]	; (800b584 <_dtoa_r+0x2fc>)
 800b2bc:	f7ff ff3a 	bl	800b134 <__assert_func>
 800b2c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b2c4:	6005      	str	r5, [r0, #0]
 800b2c6:	60c5      	str	r5, [r0, #12]
 800b2c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2ca:	6819      	ldr	r1, [r3, #0]
 800b2cc:	b151      	cbz	r1, 800b2e4 <_dtoa_r+0x5c>
 800b2ce:	685a      	ldr	r2, [r3, #4]
 800b2d0:	604a      	str	r2, [r1, #4]
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	4093      	lsls	r3, r2
 800b2d6:	608b      	str	r3, [r1, #8]
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f001 f9a1 	bl	800c620 <_Bfree>
 800b2de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	601a      	str	r2, [r3, #0]
 800b2e4:	1e3b      	subs	r3, r7, #0
 800b2e6:	bfb9      	ittee	lt
 800b2e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b2ec:	9303      	strlt	r3, [sp, #12]
 800b2ee:	2300      	movge	r3, #0
 800b2f0:	f8c8 3000 	strge.w	r3, [r8]
 800b2f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b2f8:	4ba3      	ldr	r3, [pc, #652]	; (800b588 <_dtoa_r+0x300>)
 800b2fa:	bfbc      	itt	lt
 800b2fc:	2201      	movlt	r2, #1
 800b2fe:	f8c8 2000 	strlt.w	r2, [r8]
 800b302:	ea33 0309 	bics.w	r3, r3, r9
 800b306:	d11b      	bne.n	800b340 <_dtoa_r+0xb8>
 800b308:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b30a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b30e:	6013      	str	r3, [r2, #0]
 800b310:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b314:	4333      	orrs	r3, r6
 800b316:	f000 857a 	beq.w	800be0e <_dtoa_r+0xb86>
 800b31a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b31c:	b963      	cbnz	r3, 800b338 <_dtoa_r+0xb0>
 800b31e:	4b9b      	ldr	r3, [pc, #620]	; (800b58c <_dtoa_r+0x304>)
 800b320:	e024      	b.n	800b36c <_dtoa_r+0xe4>
 800b322:	4b9b      	ldr	r3, [pc, #620]	; (800b590 <_dtoa_r+0x308>)
 800b324:	9300      	str	r3, [sp, #0]
 800b326:	3308      	adds	r3, #8
 800b328:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b32a:	6013      	str	r3, [r2, #0]
 800b32c:	9800      	ldr	r0, [sp, #0]
 800b32e:	b015      	add	sp, #84	; 0x54
 800b330:	ecbd 8b02 	vpop	{d8}
 800b334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b338:	4b94      	ldr	r3, [pc, #592]	; (800b58c <_dtoa_r+0x304>)
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	3303      	adds	r3, #3
 800b33e:	e7f3      	b.n	800b328 <_dtoa_r+0xa0>
 800b340:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b344:	2200      	movs	r2, #0
 800b346:	ec51 0b17 	vmov	r0, r1, d7
 800b34a:	2300      	movs	r3, #0
 800b34c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b350:	f7f5 fbc2 	bl	8000ad8 <__aeabi_dcmpeq>
 800b354:	4680      	mov	r8, r0
 800b356:	b158      	cbz	r0, 800b370 <_dtoa_r+0xe8>
 800b358:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b35a:	2301      	movs	r3, #1
 800b35c:	6013      	str	r3, [r2, #0]
 800b35e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b360:	2b00      	cmp	r3, #0
 800b362:	f000 8551 	beq.w	800be08 <_dtoa_r+0xb80>
 800b366:	488b      	ldr	r0, [pc, #556]	; (800b594 <_dtoa_r+0x30c>)
 800b368:	6018      	str	r0, [r3, #0]
 800b36a:	1e43      	subs	r3, r0, #1
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	e7dd      	b.n	800b32c <_dtoa_r+0xa4>
 800b370:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b374:	aa12      	add	r2, sp, #72	; 0x48
 800b376:	a913      	add	r1, sp, #76	; 0x4c
 800b378:	4620      	mov	r0, r4
 800b37a:	f001 fcf9 	bl	800cd70 <__d2b>
 800b37e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b382:	4683      	mov	fp, r0
 800b384:	2d00      	cmp	r5, #0
 800b386:	d07c      	beq.n	800b482 <_dtoa_r+0x1fa>
 800b388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b38a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b38e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b392:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b396:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b39a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b39e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b3a2:	4b7d      	ldr	r3, [pc, #500]	; (800b598 <_dtoa_r+0x310>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	4639      	mov	r1, r7
 800b3aa:	f7f4 ff75 	bl	8000298 <__aeabi_dsub>
 800b3ae:	a36e      	add	r3, pc, #440	; (adr r3, 800b568 <_dtoa_r+0x2e0>)
 800b3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b4:	f7f5 f928 	bl	8000608 <__aeabi_dmul>
 800b3b8:	a36d      	add	r3, pc, #436	; (adr r3, 800b570 <_dtoa_r+0x2e8>)
 800b3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3be:	f7f4 ff6d 	bl	800029c <__adddf3>
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	460f      	mov	r7, r1
 800b3c8:	f7f5 f8b4 	bl	8000534 <__aeabi_i2d>
 800b3cc:	a36a      	add	r3, pc, #424	; (adr r3, 800b578 <_dtoa_r+0x2f0>)
 800b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d2:	f7f5 f919 	bl	8000608 <__aeabi_dmul>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	460b      	mov	r3, r1
 800b3da:	4630      	mov	r0, r6
 800b3dc:	4639      	mov	r1, r7
 800b3de:	f7f4 ff5d 	bl	800029c <__adddf3>
 800b3e2:	4606      	mov	r6, r0
 800b3e4:	460f      	mov	r7, r1
 800b3e6:	f7f5 fbbf 	bl	8000b68 <__aeabi_d2iz>
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	4682      	mov	sl, r0
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	4639      	mov	r1, r7
 800b3f4:	f7f5 fb7a 	bl	8000aec <__aeabi_dcmplt>
 800b3f8:	b148      	cbz	r0, 800b40e <_dtoa_r+0x186>
 800b3fa:	4650      	mov	r0, sl
 800b3fc:	f7f5 f89a 	bl	8000534 <__aeabi_i2d>
 800b400:	4632      	mov	r2, r6
 800b402:	463b      	mov	r3, r7
 800b404:	f7f5 fb68 	bl	8000ad8 <__aeabi_dcmpeq>
 800b408:	b908      	cbnz	r0, 800b40e <_dtoa_r+0x186>
 800b40a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b40e:	f1ba 0f16 	cmp.w	sl, #22
 800b412:	d854      	bhi.n	800b4be <_dtoa_r+0x236>
 800b414:	4b61      	ldr	r3, [pc, #388]	; (800b59c <_dtoa_r+0x314>)
 800b416:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b422:	f7f5 fb63 	bl	8000aec <__aeabi_dcmplt>
 800b426:	2800      	cmp	r0, #0
 800b428:	d04b      	beq.n	800b4c2 <_dtoa_r+0x23a>
 800b42a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b42e:	2300      	movs	r3, #0
 800b430:	930e      	str	r3, [sp, #56]	; 0x38
 800b432:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b434:	1b5d      	subs	r5, r3, r5
 800b436:	1e6b      	subs	r3, r5, #1
 800b438:	9304      	str	r3, [sp, #16]
 800b43a:	bf43      	ittte	mi
 800b43c:	2300      	movmi	r3, #0
 800b43e:	f1c5 0801 	rsbmi	r8, r5, #1
 800b442:	9304      	strmi	r3, [sp, #16]
 800b444:	f04f 0800 	movpl.w	r8, #0
 800b448:	f1ba 0f00 	cmp.w	sl, #0
 800b44c:	db3b      	blt.n	800b4c6 <_dtoa_r+0x23e>
 800b44e:	9b04      	ldr	r3, [sp, #16]
 800b450:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b454:	4453      	add	r3, sl
 800b456:	9304      	str	r3, [sp, #16]
 800b458:	2300      	movs	r3, #0
 800b45a:	9306      	str	r3, [sp, #24]
 800b45c:	9b05      	ldr	r3, [sp, #20]
 800b45e:	2b09      	cmp	r3, #9
 800b460:	d869      	bhi.n	800b536 <_dtoa_r+0x2ae>
 800b462:	2b05      	cmp	r3, #5
 800b464:	bfc4      	itt	gt
 800b466:	3b04      	subgt	r3, #4
 800b468:	9305      	strgt	r3, [sp, #20]
 800b46a:	9b05      	ldr	r3, [sp, #20]
 800b46c:	f1a3 0302 	sub.w	r3, r3, #2
 800b470:	bfcc      	ite	gt
 800b472:	2500      	movgt	r5, #0
 800b474:	2501      	movle	r5, #1
 800b476:	2b03      	cmp	r3, #3
 800b478:	d869      	bhi.n	800b54e <_dtoa_r+0x2c6>
 800b47a:	e8df f003 	tbb	[pc, r3]
 800b47e:	4e2c      	.short	0x4e2c
 800b480:	5a4c      	.short	0x5a4c
 800b482:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b486:	441d      	add	r5, r3
 800b488:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b48c:	2b20      	cmp	r3, #32
 800b48e:	bfc1      	itttt	gt
 800b490:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b494:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b498:	fa09 f303 	lslgt.w	r3, r9, r3
 800b49c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b4a0:	bfda      	itte	le
 800b4a2:	f1c3 0320 	rsble	r3, r3, #32
 800b4a6:	fa06 f003 	lslle.w	r0, r6, r3
 800b4aa:	4318      	orrgt	r0, r3
 800b4ac:	f7f5 f832 	bl	8000514 <__aeabi_ui2d>
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b4b8:	3d01      	subs	r5, #1
 800b4ba:	9310      	str	r3, [sp, #64]	; 0x40
 800b4bc:	e771      	b.n	800b3a2 <_dtoa_r+0x11a>
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e7b6      	b.n	800b430 <_dtoa_r+0x1a8>
 800b4c2:	900e      	str	r0, [sp, #56]	; 0x38
 800b4c4:	e7b5      	b.n	800b432 <_dtoa_r+0x1aa>
 800b4c6:	f1ca 0300 	rsb	r3, sl, #0
 800b4ca:	9306      	str	r3, [sp, #24]
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	eba8 080a 	sub.w	r8, r8, sl
 800b4d2:	930d      	str	r3, [sp, #52]	; 0x34
 800b4d4:	e7c2      	b.n	800b45c <_dtoa_r+0x1d4>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	9308      	str	r3, [sp, #32]
 800b4da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	dc39      	bgt.n	800b554 <_dtoa_r+0x2cc>
 800b4e0:	f04f 0901 	mov.w	r9, #1
 800b4e4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b4e8:	464b      	mov	r3, r9
 800b4ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b4ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	6042      	str	r2, [r0, #4]
 800b4f4:	2204      	movs	r2, #4
 800b4f6:	f102 0614 	add.w	r6, r2, #20
 800b4fa:	429e      	cmp	r6, r3
 800b4fc:	6841      	ldr	r1, [r0, #4]
 800b4fe:	d92f      	bls.n	800b560 <_dtoa_r+0x2d8>
 800b500:	4620      	mov	r0, r4
 800b502:	f001 f84d 	bl	800c5a0 <_Balloc>
 800b506:	9000      	str	r0, [sp, #0]
 800b508:	2800      	cmp	r0, #0
 800b50a:	d14b      	bne.n	800b5a4 <_dtoa_r+0x31c>
 800b50c:	4b24      	ldr	r3, [pc, #144]	; (800b5a0 <_dtoa_r+0x318>)
 800b50e:	4602      	mov	r2, r0
 800b510:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b514:	e6d1      	b.n	800b2ba <_dtoa_r+0x32>
 800b516:	2301      	movs	r3, #1
 800b518:	e7de      	b.n	800b4d8 <_dtoa_r+0x250>
 800b51a:	2300      	movs	r3, #0
 800b51c:	9308      	str	r3, [sp, #32]
 800b51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b520:	eb0a 0903 	add.w	r9, sl, r3
 800b524:	f109 0301 	add.w	r3, r9, #1
 800b528:	2b01      	cmp	r3, #1
 800b52a:	9301      	str	r3, [sp, #4]
 800b52c:	bfb8      	it	lt
 800b52e:	2301      	movlt	r3, #1
 800b530:	e7dd      	b.n	800b4ee <_dtoa_r+0x266>
 800b532:	2301      	movs	r3, #1
 800b534:	e7f2      	b.n	800b51c <_dtoa_r+0x294>
 800b536:	2501      	movs	r5, #1
 800b538:	2300      	movs	r3, #0
 800b53a:	9305      	str	r3, [sp, #20]
 800b53c:	9508      	str	r5, [sp, #32]
 800b53e:	f04f 39ff 	mov.w	r9, #4294967295
 800b542:	2200      	movs	r2, #0
 800b544:	f8cd 9004 	str.w	r9, [sp, #4]
 800b548:	2312      	movs	r3, #18
 800b54a:	9209      	str	r2, [sp, #36]	; 0x24
 800b54c:	e7cf      	b.n	800b4ee <_dtoa_r+0x266>
 800b54e:	2301      	movs	r3, #1
 800b550:	9308      	str	r3, [sp, #32]
 800b552:	e7f4      	b.n	800b53e <_dtoa_r+0x2b6>
 800b554:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b558:	f8cd 9004 	str.w	r9, [sp, #4]
 800b55c:	464b      	mov	r3, r9
 800b55e:	e7c6      	b.n	800b4ee <_dtoa_r+0x266>
 800b560:	3101      	adds	r1, #1
 800b562:	6041      	str	r1, [r0, #4]
 800b564:	0052      	lsls	r2, r2, #1
 800b566:	e7c6      	b.n	800b4f6 <_dtoa_r+0x26e>
 800b568:	636f4361 	.word	0x636f4361
 800b56c:	3fd287a7 	.word	0x3fd287a7
 800b570:	8b60c8b3 	.word	0x8b60c8b3
 800b574:	3fc68a28 	.word	0x3fc68a28
 800b578:	509f79fb 	.word	0x509f79fb
 800b57c:	3fd34413 	.word	0x3fd34413
 800b580:	0800fe90 	.word	0x0800fe90
 800b584:	0800ff51 	.word	0x0800ff51
 800b588:	7ff00000 	.word	0x7ff00000
 800b58c:	0800ff4d 	.word	0x0800ff4d
 800b590:	0800ff44 	.word	0x0800ff44
 800b594:	0800fe19 	.word	0x0800fe19
 800b598:	3ff80000 	.word	0x3ff80000
 800b59c:	080100c8 	.word	0x080100c8
 800b5a0:	0800ffb0 	.word	0x0800ffb0
 800b5a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5a6:	9a00      	ldr	r2, [sp, #0]
 800b5a8:	601a      	str	r2, [r3, #0]
 800b5aa:	9b01      	ldr	r3, [sp, #4]
 800b5ac:	2b0e      	cmp	r3, #14
 800b5ae:	f200 80ad 	bhi.w	800b70c <_dtoa_r+0x484>
 800b5b2:	2d00      	cmp	r5, #0
 800b5b4:	f000 80aa 	beq.w	800b70c <_dtoa_r+0x484>
 800b5b8:	f1ba 0f00 	cmp.w	sl, #0
 800b5bc:	dd36      	ble.n	800b62c <_dtoa_r+0x3a4>
 800b5be:	4ac3      	ldr	r2, [pc, #780]	; (800b8cc <_dtoa_r+0x644>)
 800b5c0:	f00a 030f 	and.w	r3, sl, #15
 800b5c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b5c8:	ed93 7b00 	vldr	d7, [r3]
 800b5cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b5d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b5d4:	eeb0 8a47 	vmov.f32	s16, s14
 800b5d8:	eef0 8a67 	vmov.f32	s17, s15
 800b5dc:	d016      	beq.n	800b60c <_dtoa_r+0x384>
 800b5de:	4bbc      	ldr	r3, [pc, #752]	; (800b8d0 <_dtoa_r+0x648>)
 800b5e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b5e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b5e8:	f7f5 f938 	bl	800085c <__aeabi_ddiv>
 800b5ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5f0:	f007 070f 	and.w	r7, r7, #15
 800b5f4:	2503      	movs	r5, #3
 800b5f6:	4eb6      	ldr	r6, [pc, #728]	; (800b8d0 <_dtoa_r+0x648>)
 800b5f8:	b957      	cbnz	r7, 800b610 <_dtoa_r+0x388>
 800b5fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5fe:	ec53 2b18 	vmov	r2, r3, d8
 800b602:	f7f5 f92b 	bl	800085c <__aeabi_ddiv>
 800b606:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b60a:	e029      	b.n	800b660 <_dtoa_r+0x3d8>
 800b60c:	2502      	movs	r5, #2
 800b60e:	e7f2      	b.n	800b5f6 <_dtoa_r+0x36e>
 800b610:	07f9      	lsls	r1, r7, #31
 800b612:	d508      	bpl.n	800b626 <_dtoa_r+0x39e>
 800b614:	ec51 0b18 	vmov	r0, r1, d8
 800b618:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b61c:	f7f4 fff4 	bl	8000608 <__aeabi_dmul>
 800b620:	ec41 0b18 	vmov	d8, r0, r1
 800b624:	3501      	adds	r5, #1
 800b626:	107f      	asrs	r7, r7, #1
 800b628:	3608      	adds	r6, #8
 800b62a:	e7e5      	b.n	800b5f8 <_dtoa_r+0x370>
 800b62c:	f000 80a6 	beq.w	800b77c <_dtoa_r+0x4f4>
 800b630:	f1ca 0600 	rsb	r6, sl, #0
 800b634:	4ba5      	ldr	r3, [pc, #660]	; (800b8cc <_dtoa_r+0x644>)
 800b636:	4fa6      	ldr	r7, [pc, #664]	; (800b8d0 <_dtoa_r+0x648>)
 800b638:	f006 020f 	and.w	r2, r6, #15
 800b63c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b644:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b648:	f7f4 ffde 	bl	8000608 <__aeabi_dmul>
 800b64c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b650:	1136      	asrs	r6, r6, #4
 800b652:	2300      	movs	r3, #0
 800b654:	2502      	movs	r5, #2
 800b656:	2e00      	cmp	r6, #0
 800b658:	f040 8085 	bne.w	800b766 <_dtoa_r+0x4de>
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1d2      	bne.n	800b606 <_dtoa_r+0x37e>
 800b660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b662:	2b00      	cmp	r3, #0
 800b664:	f000 808c 	beq.w	800b780 <_dtoa_r+0x4f8>
 800b668:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b66c:	4b99      	ldr	r3, [pc, #612]	; (800b8d4 <_dtoa_r+0x64c>)
 800b66e:	2200      	movs	r2, #0
 800b670:	4630      	mov	r0, r6
 800b672:	4639      	mov	r1, r7
 800b674:	f7f5 fa3a 	bl	8000aec <__aeabi_dcmplt>
 800b678:	2800      	cmp	r0, #0
 800b67a:	f000 8081 	beq.w	800b780 <_dtoa_r+0x4f8>
 800b67e:	9b01      	ldr	r3, [sp, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d07d      	beq.n	800b780 <_dtoa_r+0x4f8>
 800b684:	f1b9 0f00 	cmp.w	r9, #0
 800b688:	dd3c      	ble.n	800b704 <_dtoa_r+0x47c>
 800b68a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b68e:	9307      	str	r3, [sp, #28]
 800b690:	2200      	movs	r2, #0
 800b692:	4b91      	ldr	r3, [pc, #580]	; (800b8d8 <_dtoa_r+0x650>)
 800b694:	4630      	mov	r0, r6
 800b696:	4639      	mov	r1, r7
 800b698:	f7f4 ffb6 	bl	8000608 <__aeabi_dmul>
 800b69c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6a0:	3501      	adds	r5, #1
 800b6a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b6a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	f7f4 ff42 	bl	8000534 <__aeabi_i2d>
 800b6b0:	4632      	mov	r2, r6
 800b6b2:	463b      	mov	r3, r7
 800b6b4:	f7f4 ffa8 	bl	8000608 <__aeabi_dmul>
 800b6b8:	4b88      	ldr	r3, [pc, #544]	; (800b8dc <_dtoa_r+0x654>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f7f4 fdee 	bl	800029c <__adddf3>
 800b6c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b6c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6c8:	9303      	str	r3, [sp, #12]
 800b6ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d15c      	bne.n	800b78a <_dtoa_r+0x502>
 800b6d0:	4b83      	ldr	r3, [pc, #524]	; (800b8e0 <_dtoa_r+0x658>)
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	4639      	mov	r1, r7
 800b6d8:	f7f4 fdde 	bl	8000298 <__aeabi_dsub>
 800b6dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6e0:	4606      	mov	r6, r0
 800b6e2:	460f      	mov	r7, r1
 800b6e4:	f7f5 fa20 	bl	8000b28 <__aeabi_dcmpgt>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	f040 8296 	bne.w	800bc1a <_dtoa_r+0x992>
 800b6ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6f8:	4639      	mov	r1, r7
 800b6fa:	f7f5 f9f7 	bl	8000aec <__aeabi_dcmplt>
 800b6fe:	2800      	cmp	r0, #0
 800b700:	f040 8288 	bne.w	800bc14 <_dtoa_r+0x98c>
 800b704:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b708:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b70c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b70e:	2b00      	cmp	r3, #0
 800b710:	f2c0 8158 	blt.w	800b9c4 <_dtoa_r+0x73c>
 800b714:	f1ba 0f0e 	cmp.w	sl, #14
 800b718:	f300 8154 	bgt.w	800b9c4 <_dtoa_r+0x73c>
 800b71c:	4b6b      	ldr	r3, [pc, #428]	; (800b8cc <_dtoa_r+0x644>)
 800b71e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b722:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f280 80e3 	bge.w	800b8f4 <_dtoa_r+0x66c>
 800b72e:	9b01      	ldr	r3, [sp, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	f300 80df 	bgt.w	800b8f4 <_dtoa_r+0x66c>
 800b736:	f040 826d 	bne.w	800bc14 <_dtoa_r+0x98c>
 800b73a:	4b69      	ldr	r3, [pc, #420]	; (800b8e0 <_dtoa_r+0x658>)
 800b73c:	2200      	movs	r2, #0
 800b73e:	4640      	mov	r0, r8
 800b740:	4649      	mov	r1, r9
 800b742:	f7f4 ff61 	bl	8000608 <__aeabi_dmul>
 800b746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b74a:	f7f5 f9e3 	bl	8000b14 <__aeabi_dcmpge>
 800b74e:	9e01      	ldr	r6, [sp, #4]
 800b750:	4637      	mov	r7, r6
 800b752:	2800      	cmp	r0, #0
 800b754:	f040 8243 	bne.w	800bbde <_dtoa_r+0x956>
 800b758:	9d00      	ldr	r5, [sp, #0]
 800b75a:	2331      	movs	r3, #49	; 0x31
 800b75c:	f805 3b01 	strb.w	r3, [r5], #1
 800b760:	f10a 0a01 	add.w	sl, sl, #1
 800b764:	e23f      	b.n	800bbe6 <_dtoa_r+0x95e>
 800b766:	07f2      	lsls	r2, r6, #31
 800b768:	d505      	bpl.n	800b776 <_dtoa_r+0x4ee>
 800b76a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b76e:	f7f4 ff4b 	bl	8000608 <__aeabi_dmul>
 800b772:	3501      	adds	r5, #1
 800b774:	2301      	movs	r3, #1
 800b776:	1076      	asrs	r6, r6, #1
 800b778:	3708      	adds	r7, #8
 800b77a:	e76c      	b.n	800b656 <_dtoa_r+0x3ce>
 800b77c:	2502      	movs	r5, #2
 800b77e:	e76f      	b.n	800b660 <_dtoa_r+0x3d8>
 800b780:	9b01      	ldr	r3, [sp, #4]
 800b782:	f8cd a01c 	str.w	sl, [sp, #28]
 800b786:	930c      	str	r3, [sp, #48]	; 0x30
 800b788:	e78d      	b.n	800b6a6 <_dtoa_r+0x41e>
 800b78a:	9900      	ldr	r1, [sp, #0]
 800b78c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b78e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b790:	4b4e      	ldr	r3, [pc, #312]	; (800b8cc <_dtoa_r+0x644>)
 800b792:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b796:	4401      	add	r1, r0
 800b798:	9102      	str	r1, [sp, #8]
 800b79a:	9908      	ldr	r1, [sp, #32]
 800b79c:	eeb0 8a47 	vmov.f32	s16, s14
 800b7a0:	eef0 8a67 	vmov.f32	s17, s15
 800b7a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b7ac:	2900      	cmp	r1, #0
 800b7ae:	d045      	beq.n	800b83c <_dtoa_r+0x5b4>
 800b7b0:	494c      	ldr	r1, [pc, #304]	; (800b8e4 <_dtoa_r+0x65c>)
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	f7f5 f852 	bl	800085c <__aeabi_ddiv>
 800b7b8:	ec53 2b18 	vmov	r2, r3, d8
 800b7bc:	f7f4 fd6c 	bl	8000298 <__aeabi_dsub>
 800b7c0:	9d00      	ldr	r5, [sp, #0]
 800b7c2:	ec41 0b18 	vmov	d8, r0, r1
 800b7c6:	4639      	mov	r1, r7
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	f7f5 f9cd 	bl	8000b68 <__aeabi_d2iz>
 800b7ce:	900c      	str	r0, [sp, #48]	; 0x30
 800b7d0:	f7f4 feb0 	bl	8000534 <__aeabi_i2d>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	4630      	mov	r0, r6
 800b7da:	4639      	mov	r1, r7
 800b7dc:	f7f4 fd5c 	bl	8000298 <__aeabi_dsub>
 800b7e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7e2:	3330      	adds	r3, #48	; 0x30
 800b7e4:	f805 3b01 	strb.w	r3, [r5], #1
 800b7e8:	ec53 2b18 	vmov	r2, r3, d8
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	460f      	mov	r7, r1
 800b7f0:	f7f5 f97c 	bl	8000aec <__aeabi_dcmplt>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	d165      	bne.n	800b8c4 <_dtoa_r+0x63c>
 800b7f8:	4632      	mov	r2, r6
 800b7fa:	463b      	mov	r3, r7
 800b7fc:	4935      	ldr	r1, [pc, #212]	; (800b8d4 <_dtoa_r+0x64c>)
 800b7fe:	2000      	movs	r0, #0
 800b800:	f7f4 fd4a 	bl	8000298 <__aeabi_dsub>
 800b804:	ec53 2b18 	vmov	r2, r3, d8
 800b808:	f7f5 f970 	bl	8000aec <__aeabi_dcmplt>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	f040 80b9 	bne.w	800b984 <_dtoa_r+0x6fc>
 800b812:	9b02      	ldr	r3, [sp, #8]
 800b814:	429d      	cmp	r5, r3
 800b816:	f43f af75 	beq.w	800b704 <_dtoa_r+0x47c>
 800b81a:	4b2f      	ldr	r3, [pc, #188]	; (800b8d8 <_dtoa_r+0x650>)
 800b81c:	ec51 0b18 	vmov	r0, r1, d8
 800b820:	2200      	movs	r2, #0
 800b822:	f7f4 fef1 	bl	8000608 <__aeabi_dmul>
 800b826:	4b2c      	ldr	r3, [pc, #176]	; (800b8d8 <_dtoa_r+0x650>)
 800b828:	ec41 0b18 	vmov	d8, r0, r1
 800b82c:	2200      	movs	r2, #0
 800b82e:	4630      	mov	r0, r6
 800b830:	4639      	mov	r1, r7
 800b832:	f7f4 fee9 	bl	8000608 <__aeabi_dmul>
 800b836:	4606      	mov	r6, r0
 800b838:	460f      	mov	r7, r1
 800b83a:	e7c4      	b.n	800b7c6 <_dtoa_r+0x53e>
 800b83c:	ec51 0b17 	vmov	r0, r1, d7
 800b840:	f7f4 fee2 	bl	8000608 <__aeabi_dmul>
 800b844:	9b02      	ldr	r3, [sp, #8]
 800b846:	9d00      	ldr	r5, [sp, #0]
 800b848:	930c      	str	r3, [sp, #48]	; 0x30
 800b84a:	ec41 0b18 	vmov	d8, r0, r1
 800b84e:	4639      	mov	r1, r7
 800b850:	4630      	mov	r0, r6
 800b852:	f7f5 f989 	bl	8000b68 <__aeabi_d2iz>
 800b856:	9011      	str	r0, [sp, #68]	; 0x44
 800b858:	f7f4 fe6c 	bl	8000534 <__aeabi_i2d>
 800b85c:	4602      	mov	r2, r0
 800b85e:	460b      	mov	r3, r1
 800b860:	4630      	mov	r0, r6
 800b862:	4639      	mov	r1, r7
 800b864:	f7f4 fd18 	bl	8000298 <__aeabi_dsub>
 800b868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b86a:	3330      	adds	r3, #48	; 0x30
 800b86c:	f805 3b01 	strb.w	r3, [r5], #1
 800b870:	9b02      	ldr	r3, [sp, #8]
 800b872:	429d      	cmp	r5, r3
 800b874:	4606      	mov	r6, r0
 800b876:	460f      	mov	r7, r1
 800b878:	f04f 0200 	mov.w	r2, #0
 800b87c:	d134      	bne.n	800b8e8 <_dtoa_r+0x660>
 800b87e:	4b19      	ldr	r3, [pc, #100]	; (800b8e4 <_dtoa_r+0x65c>)
 800b880:	ec51 0b18 	vmov	r0, r1, d8
 800b884:	f7f4 fd0a 	bl	800029c <__adddf3>
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	4630      	mov	r0, r6
 800b88e:	4639      	mov	r1, r7
 800b890:	f7f5 f94a 	bl	8000b28 <__aeabi_dcmpgt>
 800b894:	2800      	cmp	r0, #0
 800b896:	d175      	bne.n	800b984 <_dtoa_r+0x6fc>
 800b898:	ec53 2b18 	vmov	r2, r3, d8
 800b89c:	4911      	ldr	r1, [pc, #68]	; (800b8e4 <_dtoa_r+0x65c>)
 800b89e:	2000      	movs	r0, #0
 800b8a0:	f7f4 fcfa 	bl	8000298 <__aeabi_dsub>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	4639      	mov	r1, r7
 800b8ac:	f7f5 f91e 	bl	8000aec <__aeabi_dcmplt>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	f43f af27 	beq.w	800b704 <_dtoa_r+0x47c>
 800b8b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b8b8:	1e6b      	subs	r3, r5, #1
 800b8ba:	930c      	str	r3, [sp, #48]	; 0x30
 800b8bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b8c0:	2b30      	cmp	r3, #48	; 0x30
 800b8c2:	d0f8      	beq.n	800b8b6 <_dtoa_r+0x62e>
 800b8c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b8c8:	e04a      	b.n	800b960 <_dtoa_r+0x6d8>
 800b8ca:	bf00      	nop
 800b8cc:	080100c8 	.word	0x080100c8
 800b8d0:	080100a0 	.word	0x080100a0
 800b8d4:	3ff00000 	.word	0x3ff00000
 800b8d8:	40240000 	.word	0x40240000
 800b8dc:	401c0000 	.word	0x401c0000
 800b8e0:	40140000 	.word	0x40140000
 800b8e4:	3fe00000 	.word	0x3fe00000
 800b8e8:	4baf      	ldr	r3, [pc, #700]	; (800bba8 <_dtoa_r+0x920>)
 800b8ea:	f7f4 fe8d 	bl	8000608 <__aeabi_dmul>
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	460f      	mov	r7, r1
 800b8f2:	e7ac      	b.n	800b84e <_dtoa_r+0x5c6>
 800b8f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b8f8:	9d00      	ldr	r5, [sp, #0]
 800b8fa:	4642      	mov	r2, r8
 800b8fc:	464b      	mov	r3, r9
 800b8fe:	4630      	mov	r0, r6
 800b900:	4639      	mov	r1, r7
 800b902:	f7f4 ffab 	bl	800085c <__aeabi_ddiv>
 800b906:	f7f5 f92f 	bl	8000b68 <__aeabi_d2iz>
 800b90a:	9002      	str	r0, [sp, #8]
 800b90c:	f7f4 fe12 	bl	8000534 <__aeabi_i2d>
 800b910:	4642      	mov	r2, r8
 800b912:	464b      	mov	r3, r9
 800b914:	f7f4 fe78 	bl	8000608 <__aeabi_dmul>
 800b918:	4602      	mov	r2, r0
 800b91a:	460b      	mov	r3, r1
 800b91c:	4630      	mov	r0, r6
 800b91e:	4639      	mov	r1, r7
 800b920:	f7f4 fcba 	bl	8000298 <__aeabi_dsub>
 800b924:	9e02      	ldr	r6, [sp, #8]
 800b926:	9f01      	ldr	r7, [sp, #4]
 800b928:	3630      	adds	r6, #48	; 0x30
 800b92a:	f805 6b01 	strb.w	r6, [r5], #1
 800b92e:	9e00      	ldr	r6, [sp, #0]
 800b930:	1bae      	subs	r6, r5, r6
 800b932:	42b7      	cmp	r7, r6
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	d137      	bne.n	800b9aa <_dtoa_r+0x722>
 800b93a:	f7f4 fcaf 	bl	800029c <__adddf3>
 800b93e:	4642      	mov	r2, r8
 800b940:	464b      	mov	r3, r9
 800b942:	4606      	mov	r6, r0
 800b944:	460f      	mov	r7, r1
 800b946:	f7f5 f8ef 	bl	8000b28 <__aeabi_dcmpgt>
 800b94a:	b9c8      	cbnz	r0, 800b980 <_dtoa_r+0x6f8>
 800b94c:	4642      	mov	r2, r8
 800b94e:	464b      	mov	r3, r9
 800b950:	4630      	mov	r0, r6
 800b952:	4639      	mov	r1, r7
 800b954:	f7f5 f8c0 	bl	8000ad8 <__aeabi_dcmpeq>
 800b958:	b110      	cbz	r0, 800b960 <_dtoa_r+0x6d8>
 800b95a:	9b02      	ldr	r3, [sp, #8]
 800b95c:	07d9      	lsls	r1, r3, #31
 800b95e:	d40f      	bmi.n	800b980 <_dtoa_r+0x6f8>
 800b960:	4620      	mov	r0, r4
 800b962:	4659      	mov	r1, fp
 800b964:	f000 fe5c 	bl	800c620 <_Bfree>
 800b968:	2300      	movs	r3, #0
 800b96a:	702b      	strb	r3, [r5, #0]
 800b96c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b96e:	f10a 0001 	add.w	r0, sl, #1
 800b972:	6018      	str	r0, [r3, #0]
 800b974:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b976:	2b00      	cmp	r3, #0
 800b978:	f43f acd8 	beq.w	800b32c <_dtoa_r+0xa4>
 800b97c:	601d      	str	r5, [r3, #0]
 800b97e:	e4d5      	b.n	800b32c <_dtoa_r+0xa4>
 800b980:	f8cd a01c 	str.w	sl, [sp, #28]
 800b984:	462b      	mov	r3, r5
 800b986:	461d      	mov	r5, r3
 800b988:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b98c:	2a39      	cmp	r2, #57	; 0x39
 800b98e:	d108      	bne.n	800b9a2 <_dtoa_r+0x71a>
 800b990:	9a00      	ldr	r2, [sp, #0]
 800b992:	429a      	cmp	r2, r3
 800b994:	d1f7      	bne.n	800b986 <_dtoa_r+0x6fe>
 800b996:	9a07      	ldr	r2, [sp, #28]
 800b998:	9900      	ldr	r1, [sp, #0]
 800b99a:	3201      	adds	r2, #1
 800b99c:	9207      	str	r2, [sp, #28]
 800b99e:	2230      	movs	r2, #48	; 0x30
 800b9a0:	700a      	strb	r2, [r1, #0]
 800b9a2:	781a      	ldrb	r2, [r3, #0]
 800b9a4:	3201      	adds	r2, #1
 800b9a6:	701a      	strb	r2, [r3, #0]
 800b9a8:	e78c      	b.n	800b8c4 <_dtoa_r+0x63c>
 800b9aa:	4b7f      	ldr	r3, [pc, #508]	; (800bba8 <_dtoa_r+0x920>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f7f4 fe2b 	bl	8000608 <__aeabi_dmul>
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	460f      	mov	r7, r1
 800b9ba:	f7f5 f88d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d09b      	beq.n	800b8fa <_dtoa_r+0x672>
 800b9c2:	e7cd      	b.n	800b960 <_dtoa_r+0x6d8>
 800b9c4:	9a08      	ldr	r2, [sp, #32]
 800b9c6:	2a00      	cmp	r2, #0
 800b9c8:	f000 80c4 	beq.w	800bb54 <_dtoa_r+0x8cc>
 800b9cc:	9a05      	ldr	r2, [sp, #20]
 800b9ce:	2a01      	cmp	r2, #1
 800b9d0:	f300 80a8 	bgt.w	800bb24 <_dtoa_r+0x89c>
 800b9d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b9d6:	2a00      	cmp	r2, #0
 800b9d8:	f000 80a0 	beq.w	800bb1c <_dtoa_r+0x894>
 800b9dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b9e0:	9e06      	ldr	r6, [sp, #24]
 800b9e2:	4645      	mov	r5, r8
 800b9e4:	9a04      	ldr	r2, [sp, #16]
 800b9e6:	2101      	movs	r1, #1
 800b9e8:	441a      	add	r2, r3
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	4498      	add	r8, r3
 800b9ee:	9204      	str	r2, [sp, #16]
 800b9f0:	f000 ff1c 	bl	800c82c <__i2b>
 800b9f4:	4607      	mov	r7, r0
 800b9f6:	2d00      	cmp	r5, #0
 800b9f8:	dd0b      	ble.n	800ba12 <_dtoa_r+0x78a>
 800b9fa:	9b04      	ldr	r3, [sp, #16]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	dd08      	ble.n	800ba12 <_dtoa_r+0x78a>
 800ba00:	42ab      	cmp	r3, r5
 800ba02:	9a04      	ldr	r2, [sp, #16]
 800ba04:	bfa8      	it	ge
 800ba06:	462b      	movge	r3, r5
 800ba08:	eba8 0803 	sub.w	r8, r8, r3
 800ba0c:	1aed      	subs	r5, r5, r3
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	9304      	str	r3, [sp, #16]
 800ba12:	9b06      	ldr	r3, [sp, #24]
 800ba14:	b1fb      	cbz	r3, 800ba56 <_dtoa_r+0x7ce>
 800ba16:	9b08      	ldr	r3, [sp, #32]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f000 809f 	beq.w	800bb5c <_dtoa_r+0x8d4>
 800ba1e:	2e00      	cmp	r6, #0
 800ba20:	dd11      	ble.n	800ba46 <_dtoa_r+0x7be>
 800ba22:	4639      	mov	r1, r7
 800ba24:	4632      	mov	r2, r6
 800ba26:	4620      	mov	r0, r4
 800ba28:	f000 ffbc 	bl	800c9a4 <__pow5mult>
 800ba2c:	465a      	mov	r2, fp
 800ba2e:	4601      	mov	r1, r0
 800ba30:	4607      	mov	r7, r0
 800ba32:	4620      	mov	r0, r4
 800ba34:	f000 ff10 	bl	800c858 <__multiply>
 800ba38:	4659      	mov	r1, fp
 800ba3a:	9007      	str	r0, [sp, #28]
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f000 fdef 	bl	800c620 <_Bfree>
 800ba42:	9b07      	ldr	r3, [sp, #28]
 800ba44:	469b      	mov	fp, r3
 800ba46:	9b06      	ldr	r3, [sp, #24]
 800ba48:	1b9a      	subs	r2, r3, r6
 800ba4a:	d004      	beq.n	800ba56 <_dtoa_r+0x7ce>
 800ba4c:	4659      	mov	r1, fp
 800ba4e:	4620      	mov	r0, r4
 800ba50:	f000 ffa8 	bl	800c9a4 <__pow5mult>
 800ba54:	4683      	mov	fp, r0
 800ba56:	2101      	movs	r1, #1
 800ba58:	4620      	mov	r0, r4
 800ba5a:	f000 fee7 	bl	800c82c <__i2b>
 800ba5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	4606      	mov	r6, r0
 800ba64:	dd7c      	ble.n	800bb60 <_dtoa_r+0x8d8>
 800ba66:	461a      	mov	r2, r3
 800ba68:	4601      	mov	r1, r0
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f000 ff9a 	bl	800c9a4 <__pow5mult>
 800ba70:	9b05      	ldr	r3, [sp, #20]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	4606      	mov	r6, r0
 800ba76:	dd76      	ble.n	800bb66 <_dtoa_r+0x8de>
 800ba78:	2300      	movs	r3, #0
 800ba7a:	9306      	str	r3, [sp, #24]
 800ba7c:	6933      	ldr	r3, [r6, #16]
 800ba7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ba82:	6918      	ldr	r0, [r3, #16]
 800ba84:	f000 fe82 	bl	800c78c <__hi0bits>
 800ba88:	f1c0 0020 	rsb	r0, r0, #32
 800ba8c:	9b04      	ldr	r3, [sp, #16]
 800ba8e:	4418      	add	r0, r3
 800ba90:	f010 001f 	ands.w	r0, r0, #31
 800ba94:	f000 8086 	beq.w	800bba4 <_dtoa_r+0x91c>
 800ba98:	f1c0 0320 	rsb	r3, r0, #32
 800ba9c:	2b04      	cmp	r3, #4
 800ba9e:	dd7f      	ble.n	800bba0 <_dtoa_r+0x918>
 800baa0:	f1c0 001c 	rsb	r0, r0, #28
 800baa4:	9b04      	ldr	r3, [sp, #16]
 800baa6:	4403      	add	r3, r0
 800baa8:	4480      	add	r8, r0
 800baaa:	4405      	add	r5, r0
 800baac:	9304      	str	r3, [sp, #16]
 800baae:	f1b8 0f00 	cmp.w	r8, #0
 800bab2:	dd05      	ble.n	800bac0 <_dtoa_r+0x838>
 800bab4:	4659      	mov	r1, fp
 800bab6:	4642      	mov	r2, r8
 800bab8:	4620      	mov	r0, r4
 800baba:	f000 ffcd 	bl	800ca58 <__lshift>
 800babe:	4683      	mov	fp, r0
 800bac0:	9b04      	ldr	r3, [sp, #16]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	dd05      	ble.n	800bad2 <_dtoa_r+0x84a>
 800bac6:	4631      	mov	r1, r6
 800bac8:	461a      	mov	r2, r3
 800baca:	4620      	mov	r0, r4
 800bacc:	f000 ffc4 	bl	800ca58 <__lshift>
 800bad0:	4606      	mov	r6, r0
 800bad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d069      	beq.n	800bbac <_dtoa_r+0x924>
 800bad8:	4631      	mov	r1, r6
 800bada:	4658      	mov	r0, fp
 800badc:	f001 f828 	bl	800cb30 <__mcmp>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	da63      	bge.n	800bbac <_dtoa_r+0x924>
 800bae4:	2300      	movs	r3, #0
 800bae6:	4659      	mov	r1, fp
 800bae8:	220a      	movs	r2, #10
 800baea:	4620      	mov	r0, r4
 800baec:	f000 fdba 	bl	800c664 <__multadd>
 800baf0:	9b08      	ldr	r3, [sp, #32]
 800baf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800baf6:	4683      	mov	fp, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f000 818f 	beq.w	800be1c <_dtoa_r+0xb94>
 800bafe:	4639      	mov	r1, r7
 800bb00:	2300      	movs	r3, #0
 800bb02:	220a      	movs	r2, #10
 800bb04:	4620      	mov	r0, r4
 800bb06:	f000 fdad 	bl	800c664 <__multadd>
 800bb0a:	f1b9 0f00 	cmp.w	r9, #0
 800bb0e:	4607      	mov	r7, r0
 800bb10:	f300 808e 	bgt.w	800bc30 <_dtoa_r+0x9a8>
 800bb14:	9b05      	ldr	r3, [sp, #20]
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	dc50      	bgt.n	800bbbc <_dtoa_r+0x934>
 800bb1a:	e089      	b.n	800bc30 <_dtoa_r+0x9a8>
 800bb1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bb22:	e75d      	b.n	800b9e0 <_dtoa_r+0x758>
 800bb24:	9b01      	ldr	r3, [sp, #4]
 800bb26:	1e5e      	subs	r6, r3, #1
 800bb28:	9b06      	ldr	r3, [sp, #24]
 800bb2a:	42b3      	cmp	r3, r6
 800bb2c:	bfbf      	itttt	lt
 800bb2e:	9b06      	ldrlt	r3, [sp, #24]
 800bb30:	9606      	strlt	r6, [sp, #24]
 800bb32:	1af2      	sublt	r2, r6, r3
 800bb34:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800bb36:	bfb6      	itet	lt
 800bb38:	189b      	addlt	r3, r3, r2
 800bb3a:	1b9e      	subge	r6, r3, r6
 800bb3c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800bb3e:	9b01      	ldr	r3, [sp, #4]
 800bb40:	bfb8      	it	lt
 800bb42:	2600      	movlt	r6, #0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	bfb5      	itete	lt
 800bb48:	eba8 0503 	sublt.w	r5, r8, r3
 800bb4c:	9b01      	ldrge	r3, [sp, #4]
 800bb4e:	2300      	movlt	r3, #0
 800bb50:	4645      	movge	r5, r8
 800bb52:	e747      	b.n	800b9e4 <_dtoa_r+0x75c>
 800bb54:	9e06      	ldr	r6, [sp, #24]
 800bb56:	9f08      	ldr	r7, [sp, #32]
 800bb58:	4645      	mov	r5, r8
 800bb5a:	e74c      	b.n	800b9f6 <_dtoa_r+0x76e>
 800bb5c:	9a06      	ldr	r2, [sp, #24]
 800bb5e:	e775      	b.n	800ba4c <_dtoa_r+0x7c4>
 800bb60:	9b05      	ldr	r3, [sp, #20]
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	dc18      	bgt.n	800bb98 <_dtoa_r+0x910>
 800bb66:	9b02      	ldr	r3, [sp, #8]
 800bb68:	b9b3      	cbnz	r3, 800bb98 <_dtoa_r+0x910>
 800bb6a:	9b03      	ldr	r3, [sp, #12]
 800bb6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb70:	b9a3      	cbnz	r3, 800bb9c <_dtoa_r+0x914>
 800bb72:	9b03      	ldr	r3, [sp, #12]
 800bb74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb78:	0d1b      	lsrs	r3, r3, #20
 800bb7a:	051b      	lsls	r3, r3, #20
 800bb7c:	b12b      	cbz	r3, 800bb8a <_dtoa_r+0x902>
 800bb7e:	9b04      	ldr	r3, [sp, #16]
 800bb80:	3301      	adds	r3, #1
 800bb82:	9304      	str	r3, [sp, #16]
 800bb84:	f108 0801 	add.w	r8, r8, #1
 800bb88:	2301      	movs	r3, #1
 800bb8a:	9306      	str	r3, [sp, #24]
 800bb8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	f47f af74 	bne.w	800ba7c <_dtoa_r+0x7f4>
 800bb94:	2001      	movs	r0, #1
 800bb96:	e779      	b.n	800ba8c <_dtoa_r+0x804>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	e7f6      	b.n	800bb8a <_dtoa_r+0x902>
 800bb9c:	9b02      	ldr	r3, [sp, #8]
 800bb9e:	e7f4      	b.n	800bb8a <_dtoa_r+0x902>
 800bba0:	d085      	beq.n	800baae <_dtoa_r+0x826>
 800bba2:	4618      	mov	r0, r3
 800bba4:	301c      	adds	r0, #28
 800bba6:	e77d      	b.n	800baa4 <_dtoa_r+0x81c>
 800bba8:	40240000 	.word	0x40240000
 800bbac:	9b01      	ldr	r3, [sp, #4]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	dc38      	bgt.n	800bc24 <_dtoa_r+0x99c>
 800bbb2:	9b05      	ldr	r3, [sp, #20]
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	dd35      	ble.n	800bc24 <_dtoa_r+0x99c>
 800bbb8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bbbc:	f1b9 0f00 	cmp.w	r9, #0
 800bbc0:	d10d      	bne.n	800bbde <_dtoa_r+0x956>
 800bbc2:	4631      	mov	r1, r6
 800bbc4:	464b      	mov	r3, r9
 800bbc6:	2205      	movs	r2, #5
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f000 fd4b 	bl	800c664 <__multadd>
 800bbce:	4601      	mov	r1, r0
 800bbd0:	4606      	mov	r6, r0
 800bbd2:	4658      	mov	r0, fp
 800bbd4:	f000 ffac 	bl	800cb30 <__mcmp>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	f73f adbd 	bgt.w	800b758 <_dtoa_r+0x4d0>
 800bbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe0:	9d00      	ldr	r5, [sp, #0]
 800bbe2:	ea6f 0a03 	mvn.w	sl, r3
 800bbe6:	f04f 0800 	mov.w	r8, #0
 800bbea:	4631      	mov	r1, r6
 800bbec:	4620      	mov	r0, r4
 800bbee:	f000 fd17 	bl	800c620 <_Bfree>
 800bbf2:	2f00      	cmp	r7, #0
 800bbf4:	f43f aeb4 	beq.w	800b960 <_dtoa_r+0x6d8>
 800bbf8:	f1b8 0f00 	cmp.w	r8, #0
 800bbfc:	d005      	beq.n	800bc0a <_dtoa_r+0x982>
 800bbfe:	45b8      	cmp	r8, r7
 800bc00:	d003      	beq.n	800bc0a <_dtoa_r+0x982>
 800bc02:	4641      	mov	r1, r8
 800bc04:	4620      	mov	r0, r4
 800bc06:	f000 fd0b 	bl	800c620 <_Bfree>
 800bc0a:	4639      	mov	r1, r7
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f000 fd07 	bl	800c620 <_Bfree>
 800bc12:	e6a5      	b.n	800b960 <_dtoa_r+0x6d8>
 800bc14:	2600      	movs	r6, #0
 800bc16:	4637      	mov	r7, r6
 800bc18:	e7e1      	b.n	800bbde <_dtoa_r+0x956>
 800bc1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bc1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bc20:	4637      	mov	r7, r6
 800bc22:	e599      	b.n	800b758 <_dtoa_r+0x4d0>
 800bc24:	9b08      	ldr	r3, [sp, #32]
 800bc26:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	f000 80fd 	beq.w	800be2a <_dtoa_r+0xba2>
 800bc30:	2d00      	cmp	r5, #0
 800bc32:	dd05      	ble.n	800bc40 <_dtoa_r+0x9b8>
 800bc34:	4639      	mov	r1, r7
 800bc36:	462a      	mov	r2, r5
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f000 ff0d 	bl	800ca58 <__lshift>
 800bc3e:	4607      	mov	r7, r0
 800bc40:	9b06      	ldr	r3, [sp, #24]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d05c      	beq.n	800bd00 <_dtoa_r+0xa78>
 800bc46:	6879      	ldr	r1, [r7, #4]
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f000 fca9 	bl	800c5a0 <_Balloc>
 800bc4e:	4605      	mov	r5, r0
 800bc50:	b928      	cbnz	r0, 800bc5e <_dtoa_r+0x9d6>
 800bc52:	4b80      	ldr	r3, [pc, #512]	; (800be54 <_dtoa_r+0xbcc>)
 800bc54:	4602      	mov	r2, r0
 800bc56:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bc5a:	f7ff bb2e 	b.w	800b2ba <_dtoa_r+0x32>
 800bc5e:	693a      	ldr	r2, [r7, #16]
 800bc60:	3202      	adds	r2, #2
 800bc62:	0092      	lsls	r2, r2, #2
 800bc64:	f107 010c 	add.w	r1, r7, #12
 800bc68:	300c      	adds	r0, #12
 800bc6a:	f7fd fed5 	bl	8009a18 <memcpy>
 800bc6e:	2201      	movs	r2, #1
 800bc70:	4629      	mov	r1, r5
 800bc72:	4620      	mov	r0, r4
 800bc74:	f000 fef0 	bl	800ca58 <__lshift>
 800bc78:	9b00      	ldr	r3, [sp, #0]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	9301      	str	r3, [sp, #4]
 800bc7e:	9b00      	ldr	r3, [sp, #0]
 800bc80:	444b      	add	r3, r9
 800bc82:	9307      	str	r3, [sp, #28]
 800bc84:	9b02      	ldr	r3, [sp, #8]
 800bc86:	f003 0301 	and.w	r3, r3, #1
 800bc8a:	46b8      	mov	r8, r7
 800bc8c:	9306      	str	r3, [sp, #24]
 800bc8e:	4607      	mov	r7, r0
 800bc90:	9b01      	ldr	r3, [sp, #4]
 800bc92:	4631      	mov	r1, r6
 800bc94:	3b01      	subs	r3, #1
 800bc96:	4658      	mov	r0, fp
 800bc98:	9302      	str	r3, [sp, #8]
 800bc9a:	f7ff fa69 	bl	800b170 <quorem>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	3330      	adds	r3, #48	; 0x30
 800bca2:	9004      	str	r0, [sp, #16]
 800bca4:	4641      	mov	r1, r8
 800bca6:	4658      	mov	r0, fp
 800bca8:	9308      	str	r3, [sp, #32]
 800bcaa:	f000 ff41 	bl	800cb30 <__mcmp>
 800bcae:	463a      	mov	r2, r7
 800bcb0:	4681      	mov	r9, r0
 800bcb2:	4631      	mov	r1, r6
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f000 ff57 	bl	800cb68 <__mdiff>
 800bcba:	68c2      	ldr	r2, [r0, #12]
 800bcbc:	9b08      	ldr	r3, [sp, #32]
 800bcbe:	4605      	mov	r5, r0
 800bcc0:	bb02      	cbnz	r2, 800bd04 <_dtoa_r+0xa7c>
 800bcc2:	4601      	mov	r1, r0
 800bcc4:	4658      	mov	r0, fp
 800bcc6:	f000 ff33 	bl	800cb30 <__mcmp>
 800bcca:	9b08      	ldr	r3, [sp, #32]
 800bccc:	4602      	mov	r2, r0
 800bcce:	4629      	mov	r1, r5
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800bcd6:	f000 fca3 	bl	800c620 <_Bfree>
 800bcda:	9b05      	ldr	r3, [sp, #20]
 800bcdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcde:	9d01      	ldr	r5, [sp, #4]
 800bce0:	ea43 0102 	orr.w	r1, r3, r2
 800bce4:	9b06      	ldr	r3, [sp, #24]
 800bce6:	430b      	orrs	r3, r1
 800bce8:	9b08      	ldr	r3, [sp, #32]
 800bcea:	d10d      	bne.n	800bd08 <_dtoa_r+0xa80>
 800bcec:	2b39      	cmp	r3, #57	; 0x39
 800bcee:	d029      	beq.n	800bd44 <_dtoa_r+0xabc>
 800bcf0:	f1b9 0f00 	cmp.w	r9, #0
 800bcf4:	dd01      	ble.n	800bcfa <_dtoa_r+0xa72>
 800bcf6:	9b04      	ldr	r3, [sp, #16]
 800bcf8:	3331      	adds	r3, #49	; 0x31
 800bcfa:	9a02      	ldr	r2, [sp, #8]
 800bcfc:	7013      	strb	r3, [r2, #0]
 800bcfe:	e774      	b.n	800bbea <_dtoa_r+0x962>
 800bd00:	4638      	mov	r0, r7
 800bd02:	e7b9      	b.n	800bc78 <_dtoa_r+0x9f0>
 800bd04:	2201      	movs	r2, #1
 800bd06:	e7e2      	b.n	800bcce <_dtoa_r+0xa46>
 800bd08:	f1b9 0f00 	cmp.w	r9, #0
 800bd0c:	db06      	blt.n	800bd1c <_dtoa_r+0xa94>
 800bd0e:	9905      	ldr	r1, [sp, #20]
 800bd10:	ea41 0909 	orr.w	r9, r1, r9
 800bd14:	9906      	ldr	r1, [sp, #24]
 800bd16:	ea59 0101 	orrs.w	r1, r9, r1
 800bd1a:	d120      	bne.n	800bd5e <_dtoa_r+0xad6>
 800bd1c:	2a00      	cmp	r2, #0
 800bd1e:	ddec      	ble.n	800bcfa <_dtoa_r+0xa72>
 800bd20:	4659      	mov	r1, fp
 800bd22:	2201      	movs	r2, #1
 800bd24:	4620      	mov	r0, r4
 800bd26:	9301      	str	r3, [sp, #4]
 800bd28:	f000 fe96 	bl	800ca58 <__lshift>
 800bd2c:	4631      	mov	r1, r6
 800bd2e:	4683      	mov	fp, r0
 800bd30:	f000 fefe 	bl	800cb30 <__mcmp>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	9b01      	ldr	r3, [sp, #4]
 800bd38:	dc02      	bgt.n	800bd40 <_dtoa_r+0xab8>
 800bd3a:	d1de      	bne.n	800bcfa <_dtoa_r+0xa72>
 800bd3c:	07da      	lsls	r2, r3, #31
 800bd3e:	d5dc      	bpl.n	800bcfa <_dtoa_r+0xa72>
 800bd40:	2b39      	cmp	r3, #57	; 0x39
 800bd42:	d1d8      	bne.n	800bcf6 <_dtoa_r+0xa6e>
 800bd44:	9a02      	ldr	r2, [sp, #8]
 800bd46:	2339      	movs	r3, #57	; 0x39
 800bd48:	7013      	strb	r3, [r2, #0]
 800bd4a:	462b      	mov	r3, r5
 800bd4c:	461d      	mov	r5, r3
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bd54:	2a39      	cmp	r2, #57	; 0x39
 800bd56:	d050      	beq.n	800bdfa <_dtoa_r+0xb72>
 800bd58:	3201      	adds	r2, #1
 800bd5a:	701a      	strb	r2, [r3, #0]
 800bd5c:	e745      	b.n	800bbea <_dtoa_r+0x962>
 800bd5e:	2a00      	cmp	r2, #0
 800bd60:	dd03      	ble.n	800bd6a <_dtoa_r+0xae2>
 800bd62:	2b39      	cmp	r3, #57	; 0x39
 800bd64:	d0ee      	beq.n	800bd44 <_dtoa_r+0xabc>
 800bd66:	3301      	adds	r3, #1
 800bd68:	e7c7      	b.n	800bcfa <_dtoa_r+0xa72>
 800bd6a:	9a01      	ldr	r2, [sp, #4]
 800bd6c:	9907      	ldr	r1, [sp, #28]
 800bd6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bd72:	428a      	cmp	r2, r1
 800bd74:	d02a      	beq.n	800bdcc <_dtoa_r+0xb44>
 800bd76:	4659      	mov	r1, fp
 800bd78:	2300      	movs	r3, #0
 800bd7a:	220a      	movs	r2, #10
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f000 fc71 	bl	800c664 <__multadd>
 800bd82:	45b8      	cmp	r8, r7
 800bd84:	4683      	mov	fp, r0
 800bd86:	f04f 0300 	mov.w	r3, #0
 800bd8a:	f04f 020a 	mov.w	r2, #10
 800bd8e:	4641      	mov	r1, r8
 800bd90:	4620      	mov	r0, r4
 800bd92:	d107      	bne.n	800bda4 <_dtoa_r+0xb1c>
 800bd94:	f000 fc66 	bl	800c664 <__multadd>
 800bd98:	4680      	mov	r8, r0
 800bd9a:	4607      	mov	r7, r0
 800bd9c:	9b01      	ldr	r3, [sp, #4]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	e775      	b.n	800bc90 <_dtoa_r+0xa08>
 800bda4:	f000 fc5e 	bl	800c664 <__multadd>
 800bda8:	4639      	mov	r1, r7
 800bdaa:	4680      	mov	r8, r0
 800bdac:	2300      	movs	r3, #0
 800bdae:	220a      	movs	r2, #10
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f000 fc57 	bl	800c664 <__multadd>
 800bdb6:	4607      	mov	r7, r0
 800bdb8:	e7f0      	b.n	800bd9c <_dtoa_r+0xb14>
 800bdba:	f1b9 0f00 	cmp.w	r9, #0
 800bdbe:	9a00      	ldr	r2, [sp, #0]
 800bdc0:	bfcc      	ite	gt
 800bdc2:	464d      	movgt	r5, r9
 800bdc4:	2501      	movle	r5, #1
 800bdc6:	4415      	add	r5, r2
 800bdc8:	f04f 0800 	mov.w	r8, #0
 800bdcc:	4659      	mov	r1, fp
 800bdce:	2201      	movs	r2, #1
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	9301      	str	r3, [sp, #4]
 800bdd4:	f000 fe40 	bl	800ca58 <__lshift>
 800bdd8:	4631      	mov	r1, r6
 800bdda:	4683      	mov	fp, r0
 800bddc:	f000 fea8 	bl	800cb30 <__mcmp>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	dcb2      	bgt.n	800bd4a <_dtoa_r+0xac2>
 800bde4:	d102      	bne.n	800bdec <_dtoa_r+0xb64>
 800bde6:	9b01      	ldr	r3, [sp, #4]
 800bde8:	07db      	lsls	r3, r3, #31
 800bdea:	d4ae      	bmi.n	800bd4a <_dtoa_r+0xac2>
 800bdec:	462b      	mov	r3, r5
 800bdee:	461d      	mov	r5, r3
 800bdf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdf4:	2a30      	cmp	r2, #48	; 0x30
 800bdf6:	d0fa      	beq.n	800bdee <_dtoa_r+0xb66>
 800bdf8:	e6f7      	b.n	800bbea <_dtoa_r+0x962>
 800bdfa:	9a00      	ldr	r2, [sp, #0]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d1a5      	bne.n	800bd4c <_dtoa_r+0xac4>
 800be00:	f10a 0a01 	add.w	sl, sl, #1
 800be04:	2331      	movs	r3, #49	; 0x31
 800be06:	e779      	b.n	800bcfc <_dtoa_r+0xa74>
 800be08:	4b13      	ldr	r3, [pc, #76]	; (800be58 <_dtoa_r+0xbd0>)
 800be0a:	f7ff baaf 	b.w	800b36c <_dtoa_r+0xe4>
 800be0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be10:	2b00      	cmp	r3, #0
 800be12:	f47f aa86 	bne.w	800b322 <_dtoa_r+0x9a>
 800be16:	4b11      	ldr	r3, [pc, #68]	; (800be5c <_dtoa_r+0xbd4>)
 800be18:	f7ff baa8 	b.w	800b36c <_dtoa_r+0xe4>
 800be1c:	f1b9 0f00 	cmp.w	r9, #0
 800be20:	dc03      	bgt.n	800be2a <_dtoa_r+0xba2>
 800be22:	9b05      	ldr	r3, [sp, #20]
 800be24:	2b02      	cmp	r3, #2
 800be26:	f73f aec9 	bgt.w	800bbbc <_dtoa_r+0x934>
 800be2a:	9d00      	ldr	r5, [sp, #0]
 800be2c:	4631      	mov	r1, r6
 800be2e:	4658      	mov	r0, fp
 800be30:	f7ff f99e 	bl	800b170 <quorem>
 800be34:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800be38:	f805 3b01 	strb.w	r3, [r5], #1
 800be3c:	9a00      	ldr	r2, [sp, #0]
 800be3e:	1aaa      	subs	r2, r5, r2
 800be40:	4591      	cmp	r9, r2
 800be42:	ddba      	ble.n	800bdba <_dtoa_r+0xb32>
 800be44:	4659      	mov	r1, fp
 800be46:	2300      	movs	r3, #0
 800be48:	220a      	movs	r2, #10
 800be4a:	4620      	mov	r0, r4
 800be4c:	f000 fc0a 	bl	800c664 <__multadd>
 800be50:	4683      	mov	fp, r0
 800be52:	e7eb      	b.n	800be2c <_dtoa_r+0xba4>
 800be54:	0800ffb0 	.word	0x0800ffb0
 800be58:	0800fe18 	.word	0x0800fe18
 800be5c:	0800ff44 	.word	0x0800ff44

0800be60 <fiprintf>:
 800be60:	b40e      	push	{r1, r2, r3}
 800be62:	b503      	push	{r0, r1, lr}
 800be64:	4601      	mov	r1, r0
 800be66:	ab03      	add	r3, sp, #12
 800be68:	4805      	ldr	r0, [pc, #20]	; (800be80 <fiprintf+0x20>)
 800be6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be6e:	6800      	ldr	r0, [r0, #0]
 800be70:	9301      	str	r3, [sp, #4]
 800be72:	f001 fa8f 	bl	800d394 <_vfiprintf_r>
 800be76:	b002      	add	sp, #8
 800be78:	f85d eb04 	ldr.w	lr, [sp], #4
 800be7c:	b003      	add	sp, #12
 800be7e:	4770      	bx	lr
 800be80:	20000028 	.word	0x20000028

0800be84 <rshift>:
 800be84:	6903      	ldr	r3, [r0, #16]
 800be86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800be8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800be92:	f100 0414 	add.w	r4, r0, #20
 800be96:	dd45      	ble.n	800bf24 <rshift+0xa0>
 800be98:	f011 011f 	ands.w	r1, r1, #31
 800be9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bea0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bea4:	d10c      	bne.n	800bec0 <rshift+0x3c>
 800bea6:	f100 0710 	add.w	r7, r0, #16
 800beaa:	4629      	mov	r1, r5
 800beac:	42b1      	cmp	r1, r6
 800beae:	d334      	bcc.n	800bf1a <rshift+0x96>
 800beb0:	1a9b      	subs	r3, r3, r2
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	1eea      	subs	r2, r5, #3
 800beb6:	4296      	cmp	r6, r2
 800beb8:	bf38      	it	cc
 800beba:	2300      	movcc	r3, #0
 800bebc:	4423      	add	r3, r4
 800bebe:	e015      	b.n	800beec <rshift+0x68>
 800bec0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bec4:	f1c1 0820 	rsb	r8, r1, #32
 800bec8:	40cf      	lsrs	r7, r1
 800beca:	f105 0e04 	add.w	lr, r5, #4
 800bece:	46a1      	mov	r9, r4
 800bed0:	4576      	cmp	r6, lr
 800bed2:	46f4      	mov	ip, lr
 800bed4:	d815      	bhi.n	800bf02 <rshift+0x7e>
 800bed6:	1a9b      	subs	r3, r3, r2
 800bed8:	009a      	lsls	r2, r3, #2
 800beda:	3a04      	subs	r2, #4
 800bedc:	3501      	adds	r5, #1
 800bede:	42ae      	cmp	r6, r5
 800bee0:	bf38      	it	cc
 800bee2:	2200      	movcc	r2, #0
 800bee4:	18a3      	adds	r3, r4, r2
 800bee6:	50a7      	str	r7, [r4, r2]
 800bee8:	b107      	cbz	r7, 800beec <rshift+0x68>
 800beea:	3304      	adds	r3, #4
 800beec:	1b1a      	subs	r2, r3, r4
 800beee:	42a3      	cmp	r3, r4
 800bef0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bef4:	bf08      	it	eq
 800bef6:	2300      	moveq	r3, #0
 800bef8:	6102      	str	r2, [r0, #16]
 800befa:	bf08      	it	eq
 800befc:	6143      	streq	r3, [r0, #20]
 800befe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf02:	f8dc c000 	ldr.w	ip, [ip]
 800bf06:	fa0c fc08 	lsl.w	ip, ip, r8
 800bf0a:	ea4c 0707 	orr.w	r7, ip, r7
 800bf0e:	f849 7b04 	str.w	r7, [r9], #4
 800bf12:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf16:	40cf      	lsrs	r7, r1
 800bf18:	e7da      	b.n	800bed0 <rshift+0x4c>
 800bf1a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bf1e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bf22:	e7c3      	b.n	800beac <rshift+0x28>
 800bf24:	4623      	mov	r3, r4
 800bf26:	e7e1      	b.n	800beec <rshift+0x68>

0800bf28 <__hexdig_fun>:
 800bf28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bf2c:	2b09      	cmp	r3, #9
 800bf2e:	d802      	bhi.n	800bf36 <__hexdig_fun+0xe>
 800bf30:	3820      	subs	r0, #32
 800bf32:	b2c0      	uxtb	r0, r0
 800bf34:	4770      	bx	lr
 800bf36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bf3a:	2b05      	cmp	r3, #5
 800bf3c:	d801      	bhi.n	800bf42 <__hexdig_fun+0x1a>
 800bf3e:	3847      	subs	r0, #71	; 0x47
 800bf40:	e7f7      	b.n	800bf32 <__hexdig_fun+0xa>
 800bf42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bf46:	2b05      	cmp	r3, #5
 800bf48:	d801      	bhi.n	800bf4e <__hexdig_fun+0x26>
 800bf4a:	3827      	subs	r0, #39	; 0x27
 800bf4c:	e7f1      	b.n	800bf32 <__hexdig_fun+0xa>
 800bf4e:	2000      	movs	r0, #0
 800bf50:	4770      	bx	lr
	...

0800bf54 <__gethex>:
 800bf54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf58:	ed2d 8b02 	vpush	{d8}
 800bf5c:	b089      	sub	sp, #36	; 0x24
 800bf5e:	ee08 0a10 	vmov	s16, r0
 800bf62:	9304      	str	r3, [sp, #16]
 800bf64:	4bbc      	ldr	r3, [pc, #752]	; (800c258 <__gethex+0x304>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	9301      	str	r3, [sp, #4]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	468b      	mov	fp, r1
 800bf6e:	4690      	mov	r8, r2
 800bf70:	f7f4 f936 	bl	80001e0 <strlen>
 800bf74:	9b01      	ldr	r3, [sp, #4]
 800bf76:	f8db 2000 	ldr.w	r2, [fp]
 800bf7a:	4403      	add	r3, r0
 800bf7c:	4682      	mov	sl, r0
 800bf7e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bf82:	9305      	str	r3, [sp, #20]
 800bf84:	1c93      	adds	r3, r2, #2
 800bf86:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bf8a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bf8e:	32fe      	adds	r2, #254	; 0xfe
 800bf90:	18d1      	adds	r1, r2, r3
 800bf92:	461f      	mov	r7, r3
 800bf94:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bf98:	9100      	str	r1, [sp, #0]
 800bf9a:	2830      	cmp	r0, #48	; 0x30
 800bf9c:	d0f8      	beq.n	800bf90 <__gethex+0x3c>
 800bf9e:	f7ff ffc3 	bl	800bf28 <__hexdig_fun>
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d13a      	bne.n	800c01e <__gethex+0xca>
 800bfa8:	9901      	ldr	r1, [sp, #4]
 800bfaa:	4652      	mov	r2, sl
 800bfac:	4638      	mov	r0, r7
 800bfae:	f001 fb3b 	bl	800d628 <strncmp>
 800bfb2:	4605      	mov	r5, r0
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	d168      	bne.n	800c08a <__gethex+0x136>
 800bfb8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bfbc:	eb07 060a 	add.w	r6, r7, sl
 800bfc0:	f7ff ffb2 	bl	800bf28 <__hexdig_fun>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d062      	beq.n	800c08e <__gethex+0x13a>
 800bfc8:	4633      	mov	r3, r6
 800bfca:	7818      	ldrb	r0, [r3, #0]
 800bfcc:	2830      	cmp	r0, #48	; 0x30
 800bfce:	461f      	mov	r7, r3
 800bfd0:	f103 0301 	add.w	r3, r3, #1
 800bfd4:	d0f9      	beq.n	800bfca <__gethex+0x76>
 800bfd6:	f7ff ffa7 	bl	800bf28 <__hexdig_fun>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	fab0 f480 	clz	r4, r0
 800bfe0:	0964      	lsrs	r4, r4, #5
 800bfe2:	4635      	mov	r5, r6
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	463a      	mov	r2, r7
 800bfe8:	4616      	mov	r6, r2
 800bfea:	3201      	adds	r2, #1
 800bfec:	7830      	ldrb	r0, [r6, #0]
 800bfee:	f7ff ff9b 	bl	800bf28 <__hexdig_fun>
 800bff2:	2800      	cmp	r0, #0
 800bff4:	d1f8      	bne.n	800bfe8 <__gethex+0x94>
 800bff6:	9901      	ldr	r1, [sp, #4]
 800bff8:	4652      	mov	r2, sl
 800bffa:	4630      	mov	r0, r6
 800bffc:	f001 fb14 	bl	800d628 <strncmp>
 800c000:	b980      	cbnz	r0, 800c024 <__gethex+0xd0>
 800c002:	b94d      	cbnz	r5, 800c018 <__gethex+0xc4>
 800c004:	eb06 050a 	add.w	r5, r6, sl
 800c008:	462a      	mov	r2, r5
 800c00a:	4616      	mov	r6, r2
 800c00c:	3201      	adds	r2, #1
 800c00e:	7830      	ldrb	r0, [r6, #0]
 800c010:	f7ff ff8a 	bl	800bf28 <__hexdig_fun>
 800c014:	2800      	cmp	r0, #0
 800c016:	d1f8      	bne.n	800c00a <__gethex+0xb6>
 800c018:	1bad      	subs	r5, r5, r6
 800c01a:	00ad      	lsls	r5, r5, #2
 800c01c:	e004      	b.n	800c028 <__gethex+0xd4>
 800c01e:	2400      	movs	r4, #0
 800c020:	4625      	mov	r5, r4
 800c022:	e7e0      	b.n	800bfe6 <__gethex+0x92>
 800c024:	2d00      	cmp	r5, #0
 800c026:	d1f7      	bne.n	800c018 <__gethex+0xc4>
 800c028:	7833      	ldrb	r3, [r6, #0]
 800c02a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c02e:	2b50      	cmp	r3, #80	; 0x50
 800c030:	d13b      	bne.n	800c0aa <__gethex+0x156>
 800c032:	7873      	ldrb	r3, [r6, #1]
 800c034:	2b2b      	cmp	r3, #43	; 0x2b
 800c036:	d02c      	beq.n	800c092 <__gethex+0x13e>
 800c038:	2b2d      	cmp	r3, #45	; 0x2d
 800c03a:	d02e      	beq.n	800c09a <__gethex+0x146>
 800c03c:	1c71      	adds	r1, r6, #1
 800c03e:	f04f 0900 	mov.w	r9, #0
 800c042:	7808      	ldrb	r0, [r1, #0]
 800c044:	f7ff ff70 	bl	800bf28 <__hexdig_fun>
 800c048:	1e43      	subs	r3, r0, #1
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	2b18      	cmp	r3, #24
 800c04e:	d82c      	bhi.n	800c0aa <__gethex+0x156>
 800c050:	f1a0 0210 	sub.w	r2, r0, #16
 800c054:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c058:	f7ff ff66 	bl	800bf28 <__hexdig_fun>
 800c05c:	1e43      	subs	r3, r0, #1
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	2b18      	cmp	r3, #24
 800c062:	d91d      	bls.n	800c0a0 <__gethex+0x14c>
 800c064:	f1b9 0f00 	cmp.w	r9, #0
 800c068:	d000      	beq.n	800c06c <__gethex+0x118>
 800c06a:	4252      	negs	r2, r2
 800c06c:	4415      	add	r5, r2
 800c06e:	f8cb 1000 	str.w	r1, [fp]
 800c072:	b1e4      	cbz	r4, 800c0ae <__gethex+0x15a>
 800c074:	9b00      	ldr	r3, [sp, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	bf14      	ite	ne
 800c07a:	2700      	movne	r7, #0
 800c07c:	2706      	moveq	r7, #6
 800c07e:	4638      	mov	r0, r7
 800c080:	b009      	add	sp, #36	; 0x24
 800c082:	ecbd 8b02 	vpop	{d8}
 800c086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c08a:	463e      	mov	r6, r7
 800c08c:	4625      	mov	r5, r4
 800c08e:	2401      	movs	r4, #1
 800c090:	e7ca      	b.n	800c028 <__gethex+0xd4>
 800c092:	f04f 0900 	mov.w	r9, #0
 800c096:	1cb1      	adds	r1, r6, #2
 800c098:	e7d3      	b.n	800c042 <__gethex+0xee>
 800c09a:	f04f 0901 	mov.w	r9, #1
 800c09e:	e7fa      	b.n	800c096 <__gethex+0x142>
 800c0a0:	230a      	movs	r3, #10
 800c0a2:	fb03 0202 	mla	r2, r3, r2, r0
 800c0a6:	3a10      	subs	r2, #16
 800c0a8:	e7d4      	b.n	800c054 <__gethex+0x100>
 800c0aa:	4631      	mov	r1, r6
 800c0ac:	e7df      	b.n	800c06e <__gethex+0x11a>
 800c0ae:	1bf3      	subs	r3, r6, r7
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	4621      	mov	r1, r4
 800c0b4:	2b07      	cmp	r3, #7
 800c0b6:	dc0b      	bgt.n	800c0d0 <__gethex+0x17c>
 800c0b8:	ee18 0a10 	vmov	r0, s16
 800c0bc:	f000 fa70 	bl	800c5a0 <_Balloc>
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	b940      	cbnz	r0, 800c0d6 <__gethex+0x182>
 800c0c4:	4b65      	ldr	r3, [pc, #404]	; (800c25c <__gethex+0x308>)
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	21de      	movs	r1, #222	; 0xde
 800c0ca:	4865      	ldr	r0, [pc, #404]	; (800c260 <__gethex+0x30c>)
 800c0cc:	f7ff f832 	bl	800b134 <__assert_func>
 800c0d0:	3101      	adds	r1, #1
 800c0d2:	105b      	asrs	r3, r3, #1
 800c0d4:	e7ee      	b.n	800c0b4 <__gethex+0x160>
 800c0d6:	f100 0914 	add.w	r9, r0, #20
 800c0da:	f04f 0b00 	mov.w	fp, #0
 800c0de:	f1ca 0301 	rsb	r3, sl, #1
 800c0e2:	f8cd 9008 	str.w	r9, [sp, #8]
 800c0e6:	f8cd b000 	str.w	fp, [sp]
 800c0ea:	9306      	str	r3, [sp, #24]
 800c0ec:	42b7      	cmp	r7, r6
 800c0ee:	d340      	bcc.n	800c172 <__gethex+0x21e>
 800c0f0:	9802      	ldr	r0, [sp, #8]
 800c0f2:	9b00      	ldr	r3, [sp, #0]
 800c0f4:	f840 3b04 	str.w	r3, [r0], #4
 800c0f8:	eba0 0009 	sub.w	r0, r0, r9
 800c0fc:	1080      	asrs	r0, r0, #2
 800c0fe:	0146      	lsls	r6, r0, #5
 800c100:	6120      	str	r0, [r4, #16]
 800c102:	4618      	mov	r0, r3
 800c104:	f000 fb42 	bl	800c78c <__hi0bits>
 800c108:	1a30      	subs	r0, r6, r0
 800c10a:	f8d8 6000 	ldr.w	r6, [r8]
 800c10e:	42b0      	cmp	r0, r6
 800c110:	dd63      	ble.n	800c1da <__gethex+0x286>
 800c112:	1b87      	subs	r7, r0, r6
 800c114:	4639      	mov	r1, r7
 800c116:	4620      	mov	r0, r4
 800c118:	f000 fedc 	bl	800ced4 <__any_on>
 800c11c:	4682      	mov	sl, r0
 800c11e:	b1a8      	cbz	r0, 800c14c <__gethex+0x1f8>
 800c120:	1e7b      	subs	r3, r7, #1
 800c122:	1159      	asrs	r1, r3, #5
 800c124:	f003 021f 	and.w	r2, r3, #31
 800c128:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c12c:	f04f 0a01 	mov.w	sl, #1
 800c130:	fa0a f202 	lsl.w	r2, sl, r2
 800c134:	420a      	tst	r2, r1
 800c136:	d009      	beq.n	800c14c <__gethex+0x1f8>
 800c138:	4553      	cmp	r3, sl
 800c13a:	dd05      	ble.n	800c148 <__gethex+0x1f4>
 800c13c:	1eb9      	subs	r1, r7, #2
 800c13e:	4620      	mov	r0, r4
 800c140:	f000 fec8 	bl	800ced4 <__any_on>
 800c144:	2800      	cmp	r0, #0
 800c146:	d145      	bne.n	800c1d4 <__gethex+0x280>
 800c148:	f04f 0a02 	mov.w	sl, #2
 800c14c:	4639      	mov	r1, r7
 800c14e:	4620      	mov	r0, r4
 800c150:	f7ff fe98 	bl	800be84 <rshift>
 800c154:	443d      	add	r5, r7
 800c156:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c15a:	42ab      	cmp	r3, r5
 800c15c:	da4c      	bge.n	800c1f8 <__gethex+0x2a4>
 800c15e:	ee18 0a10 	vmov	r0, s16
 800c162:	4621      	mov	r1, r4
 800c164:	f000 fa5c 	bl	800c620 <_Bfree>
 800c168:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c16a:	2300      	movs	r3, #0
 800c16c:	6013      	str	r3, [r2, #0]
 800c16e:	27a3      	movs	r7, #163	; 0xa3
 800c170:	e785      	b.n	800c07e <__gethex+0x12a>
 800c172:	1e73      	subs	r3, r6, #1
 800c174:	9a05      	ldr	r2, [sp, #20]
 800c176:	9303      	str	r3, [sp, #12]
 800c178:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d019      	beq.n	800c1b4 <__gethex+0x260>
 800c180:	f1bb 0f20 	cmp.w	fp, #32
 800c184:	d107      	bne.n	800c196 <__gethex+0x242>
 800c186:	9b02      	ldr	r3, [sp, #8]
 800c188:	9a00      	ldr	r2, [sp, #0]
 800c18a:	f843 2b04 	str.w	r2, [r3], #4
 800c18e:	9302      	str	r3, [sp, #8]
 800c190:	2300      	movs	r3, #0
 800c192:	9300      	str	r3, [sp, #0]
 800c194:	469b      	mov	fp, r3
 800c196:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c19a:	f7ff fec5 	bl	800bf28 <__hexdig_fun>
 800c19e:	9b00      	ldr	r3, [sp, #0]
 800c1a0:	f000 000f 	and.w	r0, r0, #15
 800c1a4:	fa00 f00b 	lsl.w	r0, r0, fp
 800c1a8:	4303      	orrs	r3, r0
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	f10b 0b04 	add.w	fp, fp, #4
 800c1b0:	9b03      	ldr	r3, [sp, #12]
 800c1b2:	e00d      	b.n	800c1d0 <__gethex+0x27c>
 800c1b4:	9b03      	ldr	r3, [sp, #12]
 800c1b6:	9a06      	ldr	r2, [sp, #24]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	42bb      	cmp	r3, r7
 800c1bc:	d3e0      	bcc.n	800c180 <__gethex+0x22c>
 800c1be:	4618      	mov	r0, r3
 800c1c0:	9901      	ldr	r1, [sp, #4]
 800c1c2:	9307      	str	r3, [sp, #28]
 800c1c4:	4652      	mov	r2, sl
 800c1c6:	f001 fa2f 	bl	800d628 <strncmp>
 800c1ca:	9b07      	ldr	r3, [sp, #28]
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d1d7      	bne.n	800c180 <__gethex+0x22c>
 800c1d0:	461e      	mov	r6, r3
 800c1d2:	e78b      	b.n	800c0ec <__gethex+0x198>
 800c1d4:	f04f 0a03 	mov.w	sl, #3
 800c1d8:	e7b8      	b.n	800c14c <__gethex+0x1f8>
 800c1da:	da0a      	bge.n	800c1f2 <__gethex+0x29e>
 800c1dc:	1a37      	subs	r7, r6, r0
 800c1de:	4621      	mov	r1, r4
 800c1e0:	ee18 0a10 	vmov	r0, s16
 800c1e4:	463a      	mov	r2, r7
 800c1e6:	f000 fc37 	bl	800ca58 <__lshift>
 800c1ea:	1bed      	subs	r5, r5, r7
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	f100 0914 	add.w	r9, r0, #20
 800c1f2:	f04f 0a00 	mov.w	sl, #0
 800c1f6:	e7ae      	b.n	800c156 <__gethex+0x202>
 800c1f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c1fc:	42a8      	cmp	r0, r5
 800c1fe:	dd72      	ble.n	800c2e6 <__gethex+0x392>
 800c200:	1b45      	subs	r5, r0, r5
 800c202:	42ae      	cmp	r6, r5
 800c204:	dc36      	bgt.n	800c274 <__gethex+0x320>
 800c206:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d02a      	beq.n	800c264 <__gethex+0x310>
 800c20e:	2b03      	cmp	r3, #3
 800c210:	d02c      	beq.n	800c26c <__gethex+0x318>
 800c212:	2b01      	cmp	r3, #1
 800c214:	d115      	bne.n	800c242 <__gethex+0x2ee>
 800c216:	42ae      	cmp	r6, r5
 800c218:	d113      	bne.n	800c242 <__gethex+0x2ee>
 800c21a:	2e01      	cmp	r6, #1
 800c21c:	d10b      	bne.n	800c236 <__gethex+0x2e2>
 800c21e:	9a04      	ldr	r2, [sp, #16]
 800c220:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c224:	6013      	str	r3, [r2, #0]
 800c226:	2301      	movs	r3, #1
 800c228:	6123      	str	r3, [r4, #16]
 800c22a:	f8c9 3000 	str.w	r3, [r9]
 800c22e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c230:	2762      	movs	r7, #98	; 0x62
 800c232:	601c      	str	r4, [r3, #0]
 800c234:	e723      	b.n	800c07e <__gethex+0x12a>
 800c236:	1e71      	subs	r1, r6, #1
 800c238:	4620      	mov	r0, r4
 800c23a:	f000 fe4b 	bl	800ced4 <__any_on>
 800c23e:	2800      	cmp	r0, #0
 800c240:	d1ed      	bne.n	800c21e <__gethex+0x2ca>
 800c242:	ee18 0a10 	vmov	r0, s16
 800c246:	4621      	mov	r1, r4
 800c248:	f000 f9ea 	bl	800c620 <_Bfree>
 800c24c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c24e:	2300      	movs	r3, #0
 800c250:	6013      	str	r3, [r2, #0]
 800c252:	2750      	movs	r7, #80	; 0x50
 800c254:	e713      	b.n	800c07e <__gethex+0x12a>
 800c256:	bf00      	nop
 800c258:	0801002c 	.word	0x0801002c
 800c25c:	0800ffb0 	.word	0x0800ffb0
 800c260:	0800ffc1 	.word	0x0800ffc1
 800c264:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1eb      	bne.n	800c242 <__gethex+0x2ee>
 800c26a:	e7d8      	b.n	800c21e <__gethex+0x2ca>
 800c26c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d1d5      	bne.n	800c21e <__gethex+0x2ca>
 800c272:	e7e6      	b.n	800c242 <__gethex+0x2ee>
 800c274:	1e6f      	subs	r7, r5, #1
 800c276:	f1ba 0f00 	cmp.w	sl, #0
 800c27a:	d131      	bne.n	800c2e0 <__gethex+0x38c>
 800c27c:	b127      	cbz	r7, 800c288 <__gethex+0x334>
 800c27e:	4639      	mov	r1, r7
 800c280:	4620      	mov	r0, r4
 800c282:	f000 fe27 	bl	800ced4 <__any_on>
 800c286:	4682      	mov	sl, r0
 800c288:	117b      	asrs	r3, r7, #5
 800c28a:	2101      	movs	r1, #1
 800c28c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c290:	f007 071f 	and.w	r7, r7, #31
 800c294:	fa01 f707 	lsl.w	r7, r1, r7
 800c298:	421f      	tst	r7, r3
 800c29a:	4629      	mov	r1, r5
 800c29c:	4620      	mov	r0, r4
 800c29e:	bf18      	it	ne
 800c2a0:	f04a 0a02 	orrne.w	sl, sl, #2
 800c2a4:	1b76      	subs	r6, r6, r5
 800c2a6:	f7ff fded 	bl	800be84 <rshift>
 800c2aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c2ae:	2702      	movs	r7, #2
 800c2b0:	f1ba 0f00 	cmp.w	sl, #0
 800c2b4:	d048      	beq.n	800c348 <__gethex+0x3f4>
 800c2b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d015      	beq.n	800c2ea <__gethex+0x396>
 800c2be:	2b03      	cmp	r3, #3
 800c2c0:	d017      	beq.n	800c2f2 <__gethex+0x39e>
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d109      	bne.n	800c2da <__gethex+0x386>
 800c2c6:	f01a 0f02 	tst.w	sl, #2
 800c2ca:	d006      	beq.n	800c2da <__gethex+0x386>
 800c2cc:	f8d9 0000 	ldr.w	r0, [r9]
 800c2d0:	ea4a 0a00 	orr.w	sl, sl, r0
 800c2d4:	f01a 0f01 	tst.w	sl, #1
 800c2d8:	d10e      	bne.n	800c2f8 <__gethex+0x3a4>
 800c2da:	f047 0710 	orr.w	r7, r7, #16
 800c2de:	e033      	b.n	800c348 <__gethex+0x3f4>
 800c2e0:	f04f 0a01 	mov.w	sl, #1
 800c2e4:	e7d0      	b.n	800c288 <__gethex+0x334>
 800c2e6:	2701      	movs	r7, #1
 800c2e8:	e7e2      	b.n	800c2b0 <__gethex+0x35c>
 800c2ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2ec:	f1c3 0301 	rsb	r3, r3, #1
 800c2f0:	9315      	str	r3, [sp, #84]	; 0x54
 800c2f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d0f0      	beq.n	800c2da <__gethex+0x386>
 800c2f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c2fc:	f104 0314 	add.w	r3, r4, #20
 800c300:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c304:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c308:	f04f 0c00 	mov.w	ip, #0
 800c30c:	4618      	mov	r0, r3
 800c30e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c312:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c316:	d01c      	beq.n	800c352 <__gethex+0x3fe>
 800c318:	3201      	adds	r2, #1
 800c31a:	6002      	str	r2, [r0, #0]
 800c31c:	2f02      	cmp	r7, #2
 800c31e:	f104 0314 	add.w	r3, r4, #20
 800c322:	d13f      	bne.n	800c3a4 <__gethex+0x450>
 800c324:	f8d8 2000 	ldr.w	r2, [r8]
 800c328:	3a01      	subs	r2, #1
 800c32a:	42b2      	cmp	r2, r6
 800c32c:	d10a      	bne.n	800c344 <__gethex+0x3f0>
 800c32e:	1171      	asrs	r1, r6, #5
 800c330:	2201      	movs	r2, #1
 800c332:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c336:	f006 061f 	and.w	r6, r6, #31
 800c33a:	fa02 f606 	lsl.w	r6, r2, r6
 800c33e:	421e      	tst	r6, r3
 800c340:	bf18      	it	ne
 800c342:	4617      	movne	r7, r2
 800c344:	f047 0720 	orr.w	r7, r7, #32
 800c348:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c34a:	601c      	str	r4, [r3, #0]
 800c34c:	9b04      	ldr	r3, [sp, #16]
 800c34e:	601d      	str	r5, [r3, #0]
 800c350:	e695      	b.n	800c07e <__gethex+0x12a>
 800c352:	4299      	cmp	r1, r3
 800c354:	f843 cc04 	str.w	ip, [r3, #-4]
 800c358:	d8d8      	bhi.n	800c30c <__gethex+0x3b8>
 800c35a:	68a3      	ldr	r3, [r4, #8]
 800c35c:	459b      	cmp	fp, r3
 800c35e:	db19      	blt.n	800c394 <__gethex+0x440>
 800c360:	6861      	ldr	r1, [r4, #4]
 800c362:	ee18 0a10 	vmov	r0, s16
 800c366:	3101      	adds	r1, #1
 800c368:	f000 f91a 	bl	800c5a0 <_Balloc>
 800c36c:	4681      	mov	r9, r0
 800c36e:	b918      	cbnz	r0, 800c378 <__gethex+0x424>
 800c370:	4b1a      	ldr	r3, [pc, #104]	; (800c3dc <__gethex+0x488>)
 800c372:	4602      	mov	r2, r0
 800c374:	2184      	movs	r1, #132	; 0x84
 800c376:	e6a8      	b.n	800c0ca <__gethex+0x176>
 800c378:	6922      	ldr	r2, [r4, #16]
 800c37a:	3202      	adds	r2, #2
 800c37c:	f104 010c 	add.w	r1, r4, #12
 800c380:	0092      	lsls	r2, r2, #2
 800c382:	300c      	adds	r0, #12
 800c384:	f7fd fb48 	bl	8009a18 <memcpy>
 800c388:	4621      	mov	r1, r4
 800c38a:	ee18 0a10 	vmov	r0, s16
 800c38e:	f000 f947 	bl	800c620 <_Bfree>
 800c392:	464c      	mov	r4, r9
 800c394:	6923      	ldr	r3, [r4, #16]
 800c396:	1c5a      	adds	r2, r3, #1
 800c398:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c39c:	6122      	str	r2, [r4, #16]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	615a      	str	r2, [r3, #20]
 800c3a2:	e7bb      	b.n	800c31c <__gethex+0x3c8>
 800c3a4:	6922      	ldr	r2, [r4, #16]
 800c3a6:	455a      	cmp	r2, fp
 800c3a8:	dd0b      	ble.n	800c3c2 <__gethex+0x46e>
 800c3aa:	2101      	movs	r1, #1
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	f7ff fd69 	bl	800be84 <rshift>
 800c3b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c3b6:	3501      	adds	r5, #1
 800c3b8:	42ab      	cmp	r3, r5
 800c3ba:	f6ff aed0 	blt.w	800c15e <__gethex+0x20a>
 800c3be:	2701      	movs	r7, #1
 800c3c0:	e7c0      	b.n	800c344 <__gethex+0x3f0>
 800c3c2:	f016 061f 	ands.w	r6, r6, #31
 800c3c6:	d0fa      	beq.n	800c3be <__gethex+0x46a>
 800c3c8:	449a      	add	sl, r3
 800c3ca:	f1c6 0620 	rsb	r6, r6, #32
 800c3ce:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c3d2:	f000 f9db 	bl	800c78c <__hi0bits>
 800c3d6:	42b0      	cmp	r0, r6
 800c3d8:	dbe7      	blt.n	800c3aa <__gethex+0x456>
 800c3da:	e7f0      	b.n	800c3be <__gethex+0x46a>
 800c3dc:	0800ffb0 	.word	0x0800ffb0

0800c3e0 <L_shift>:
 800c3e0:	f1c2 0208 	rsb	r2, r2, #8
 800c3e4:	0092      	lsls	r2, r2, #2
 800c3e6:	b570      	push	{r4, r5, r6, lr}
 800c3e8:	f1c2 0620 	rsb	r6, r2, #32
 800c3ec:	6843      	ldr	r3, [r0, #4]
 800c3ee:	6804      	ldr	r4, [r0, #0]
 800c3f0:	fa03 f506 	lsl.w	r5, r3, r6
 800c3f4:	432c      	orrs	r4, r5
 800c3f6:	40d3      	lsrs	r3, r2
 800c3f8:	6004      	str	r4, [r0, #0]
 800c3fa:	f840 3f04 	str.w	r3, [r0, #4]!
 800c3fe:	4288      	cmp	r0, r1
 800c400:	d3f4      	bcc.n	800c3ec <L_shift+0xc>
 800c402:	bd70      	pop	{r4, r5, r6, pc}

0800c404 <__match>:
 800c404:	b530      	push	{r4, r5, lr}
 800c406:	6803      	ldr	r3, [r0, #0]
 800c408:	3301      	adds	r3, #1
 800c40a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c40e:	b914      	cbnz	r4, 800c416 <__match+0x12>
 800c410:	6003      	str	r3, [r0, #0]
 800c412:	2001      	movs	r0, #1
 800c414:	bd30      	pop	{r4, r5, pc}
 800c416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c41a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c41e:	2d19      	cmp	r5, #25
 800c420:	bf98      	it	ls
 800c422:	3220      	addls	r2, #32
 800c424:	42a2      	cmp	r2, r4
 800c426:	d0f0      	beq.n	800c40a <__match+0x6>
 800c428:	2000      	movs	r0, #0
 800c42a:	e7f3      	b.n	800c414 <__match+0x10>

0800c42c <__hexnan>:
 800c42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c430:	680b      	ldr	r3, [r1, #0]
 800c432:	6801      	ldr	r1, [r0, #0]
 800c434:	115e      	asrs	r6, r3, #5
 800c436:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c43a:	f013 031f 	ands.w	r3, r3, #31
 800c43e:	b087      	sub	sp, #28
 800c440:	bf18      	it	ne
 800c442:	3604      	addne	r6, #4
 800c444:	2500      	movs	r5, #0
 800c446:	1f37      	subs	r7, r6, #4
 800c448:	4682      	mov	sl, r0
 800c44a:	4690      	mov	r8, r2
 800c44c:	9301      	str	r3, [sp, #4]
 800c44e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c452:	46b9      	mov	r9, r7
 800c454:	463c      	mov	r4, r7
 800c456:	9502      	str	r5, [sp, #8]
 800c458:	46ab      	mov	fp, r5
 800c45a:	784a      	ldrb	r2, [r1, #1]
 800c45c:	1c4b      	adds	r3, r1, #1
 800c45e:	9303      	str	r3, [sp, #12]
 800c460:	b342      	cbz	r2, 800c4b4 <__hexnan+0x88>
 800c462:	4610      	mov	r0, r2
 800c464:	9105      	str	r1, [sp, #20]
 800c466:	9204      	str	r2, [sp, #16]
 800c468:	f7ff fd5e 	bl	800bf28 <__hexdig_fun>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d14f      	bne.n	800c510 <__hexnan+0xe4>
 800c470:	9a04      	ldr	r2, [sp, #16]
 800c472:	9905      	ldr	r1, [sp, #20]
 800c474:	2a20      	cmp	r2, #32
 800c476:	d818      	bhi.n	800c4aa <__hexnan+0x7e>
 800c478:	9b02      	ldr	r3, [sp, #8]
 800c47a:	459b      	cmp	fp, r3
 800c47c:	dd13      	ble.n	800c4a6 <__hexnan+0x7a>
 800c47e:	454c      	cmp	r4, r9
 800c480:	d206      	bcs.n	800c490 <__hexnan+0x64>
 800c482:	2d07      	cmp	r5, #7
 800c484:	dc04      	bgt.n	800c490 <__hexnan+0x64>
 800c486:	462a      	mov	r2, r5
 800c488:	4649      	mov	r1, r9
 800c48a:	4620      	mov	r0, r4
 800c48c:	f7ff ffa8 	bl	800c3e0 <L_shift>
 800c490:	4544      	cmp	r4, r8
 800c492:	d950      	bls.n	800c536 <__hexnan+0x10a>
 800c494:	2300      	movs	r3, #0
 800c496:	f1a4 0904 	sub.w	r9, r4, #4
 800c49a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c49e:	f8cd b008 	str.w	fp, [sp, #8]
 800c4a2:	464c      	mov	r4, r9
 800c4a4:	461d      	mov	r5, r3
 800c4a6:	9903      	ldr	r1, [sp, #12]
 800c4a8:	e7d7      	b.n	800c45a <__hexnan+0x2e>
 800c4aa:	2a29      	cmp	r2, #41	; 0x29
 800c4ac:	d156      	bne.n	800c55c <__hexnan+0x130>
 800c4ae:	3102      	adds	r1, #2
 800c4b0:	f8ca 1000 	str.w	r1, [sl]
 800c4b4:	f1bb 0f00 	cmp.w	fp, #0
 800c4b8:	d050      	beq.n	800c55c <__hexnan+0x130>
 800c4ba:	454c      	cmp	r4, r9
 800c4bc:	d206      	bcs.n	800c4cc <__hexnan+0xa0>
 800c4be:	2d07      	cmp	r5, #7
 800c4c0:	dc04      	bgt.n	800c4cc <__hexnan+0xa0>
 800c4c2:	462a      	mov	r2, r5
 800c4c4:	4649      	mov	r1, r9
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f7ff ff8a 	bl	800c3e0 <L_shift>
 800c4cc:	4544      	cmp	r4, r8
 800c4ce:	d934      	bls.n	800c53a <__hexnan+0x10e>
 800c4d0:	f1a8 0204 	sub.w	r2, r8, #4
 800c4d4:	4623      	mov	r3, r4
 800c4d6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c4da:	f842 1f04 	str.w	r1, [r2, #4]!
 800c4de:	429f      	cmp	r7, r3
 800c4e0:	d2f9      	bcs.n	800c4d6 <__hexnan+0xaa>
 800c4e2:	1b3b      	subs	r3, r7, r4
 800c4e4:	f023 0303 	bic.w	r3, r3, #3
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	3401      	adds	r4, #1
 800c4ec:	3e03      	subs	r6, #3
 800c4ee:	42b4      	cmp	r4, r6
 800c4f0:	bf88      	it	hi
 800c4f2:	2304      	movhi	r3, #4
 800c4f4:	4443      	add	r3, r8
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f843 2b04 	str.w	r2, [r3], #4
 800c4fc:	429f      	cmp	r7, r3
 800c4fe:	d2fb      	bcs.n	800c4f8 <__hexnan+0xcc>
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	b91b      	cbnz	r3, 800c50c <__hexnan+0xe0>
 800c504:	4547      	cmp	r7, r8
 800c506:	d127      	bne.n	800c558 <__hexnan+0x12c>
 800c508:	2301      	movs	r3, #1
 800c50a:	603b      	str	r3, [r7, #0]
 800c50c:	2005      	movs	r0, #5
 800c50e:	e026      	b.n	800c55e <__hexnan+0x132>
 800c510:	3501      	adds	r5, #1
 800c512:	2d08      	cmp	r5, #8
 800c514:	f10b 0b01 	add.w	fp, fp, #1
 800c518:	dd06      	ble.n	800c528 <__hexnan+0xfc>
 800c51a:	4544      	cmp	r4, r8
 800c51c:	d9c3      	bls.n	800c4a6 <__hexnan+0x7a>
 800c51e:	2300      	movs	r3, #0
 800c520:	f844 3c04 	str.w	r3, [r4, #-4]
 800c524:	2501      	movs	r5, #1
 800c526:	3c04      	subs	r4, #4
 800c528:	6822      	ldr	r2, [r4, #0]
 800c52a:	f000 000f 	and.w	r0, r0, #15
 800c52e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c532:	6022      	str	r2, [r4, #0]
 800c534:	e7b7      	b.n	800c4a6 <__hexnan+0x7a>
 800c536:	2508      	movs	r5, #8
 800c538:	e7b5      	b.n	800c4a6 <__hexnan+0x7a>
 800c53a:	9b01      	ldr	r3, [sp, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d0df      	beq.n	800c500 <__hexnan+0xd4>
 800c540:	f04f 32ff 	mov.w	r2, #4294967295
 800c544:	f1c3 0320 	rsb	r3, r3, #32
 800c548:	fa22 f303 	lsr.w	r3, r2, r3
 800c54c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c550:	401a      	ands	r2, r3
 800c552:	f846 2c04 	str.w	r2, [r6, #-4]
 800c556:	e7d3      	b.n	800c500 <__hexnan+0xd4>
 800c558:	3f04      	subs	r7, #4
 800c55a:	e7d1      	b.n	800c500 <__hexnan+0xd4>
 800c55c:	2004      	movs	r0, #4
 800c55e:	b007      	add	sp, #28
 800c560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c564 <_localeconv_r>:
 800c564:	4800      	ldr	r0, [pc, #0]	; (800c568 <_localeconv_r+0x4>)
 800c566:	4770      	bx	lr
 800c568:	20000180 	.word	0x20000180

0800c56c <malloc>:
 800c56c:	4b02      	ldr	r3, [pc, #8]	; (800c578 <malloc+0xc>)
 800c56e:	4601      	mov	r1, r0
 800c570:	6818      	ldr	r0, [r3, #0]
 800c572:	f000 bd2f 	b.w	800cfd4 <_malloc_r>
 800c576:	bf00      	nop
 800c578:	20000028 	.word	0x20000028

0800c57c <__ascii_mbtowc>:
 800c57c:	b082      	sub	sp, #8
 800c57e:	b901      	cbnz	r1, 800c582 <__ascii_mbtowc+0x6>
 800c580:	a901      	add	r1, sp, #4
 800c582:	b142      	cbz	r2, 800c596 <__ascii_mbtowc+0x1a>
 800c584:	b14b      	cbz	r3, 800c59a <__ascii_mbtowc+0x1e>
 800c586:	7813      	ldrb	r3, [r2, #0]
 800c588:	600b      	str	r3, [r1, #0]
 800c58a:	7812      	ldrb	r2, [r2, #0]
 800c58c:	1e10      	subs	r0, r2, #0
 800c58e:	bf18      	it	ne
 800c590:	2001      	movne	r0, #1
 800c592:	b002      	add	sp, #8
 800c594:	4770      	bx	lr
 800c596:	4610      	mov	r0, r2
 800c598:	e7fb      	b.n	800c592 <__ascii_mbtowc+0x16>
 800c59a:	f06f 0001 	mvn.w	r0, #1
 800c59e:	e7f8      	b.n	800c592 <__ascii_mbtowc+0x16>

0800c5a0 <_Balloc>:
 800c5a0:	b570      	push	{r4, r5, r6, lr}
 800c5a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	460d      	mov	r5, r1
 800c5a8:	b976      	cbnz	r6, 800c5c8 <_Balloc+0x28>
 800c5aa:	2010      	movs	r0, #16
 800c5ac:	f7ff ffde 	bl	800c56c <malloc>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	6260      	str	r0, [r4, #36]	; 0x24
 800c5b4:	b920      	cbnz	r0, 800c5c0 <_Balloc+0x20>
 800c5b6:	4b18      	ldr	r3, [pc, #96]	; (800c618 <_Balloc+0x78>)
 800c5b8:	4818      	ldr	r0, [pc, #96]	; (800c61c <_Balloc+0x7c>)
 800c5ba:	2166      	movs	r1, #102	; 0x66
 800c5bc:	f7fe fdba 	bl	800b134 <__assert_func>
 800c5c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5c4:	6006      	str	r6, [r0, #0]
 800c5c6:	60c6      	str	r6, [r0, #12]
 800c5c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c5ca:	68f3      	ldr	r3, [r6, #12]
 800c5cc:	b183      	cbz	r3, 800c5f0 <_Balloc+0x50>
 800c5ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5d6:	b9b8      	cbnz	r0, 800c608 <_Balloc+0x68>
 800c5d8:	2101      	movs	r1, #1
 800c5da:	fa01 f605 	lsl.w	r6, r1, r5
 800c5de:	1d72      	adds	r2, r6, #5
 800c5e0:	0092      	lsls	r2, r2, #2
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 fc97 	bl	800cf16 <_calloc_r>
 800c5e8:	b160      	cbz	r0, 800c604 <_Balloc+0x64>
 800c5ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5ee:	e00e      	b.n	800c60e <_Balloc+0x6e>
 800c5f0:	2221      	movs	r2, #33	; 0x21
 800c5f2:	2104      	movs	r1, #4
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	f000 fc8e 	bl	800cf16 <_calloc_r>
 800c5fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5fc:	60f0      	str	r0, [r6, #12]
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1e4      	bne.n	800c5ce <_Balloc+0x2e>
 800c604:	2000      	movs	r0, #0
 800c606:	bd70      	pop	{r4, r5, r6, pc}
 800c608:	6802      	ldr	r2, [r0, #0]
 800c60a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c60e:	2300      	movs	r3, #0
 800c610:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c614:	e7f7      	b.n	800c606 <_Balloc+0x66>
 800c616:	bf00      	nop
 800c618:	0800fe90 	.word	0x0800fe90
 800c61c:	08010040 	.word	0x08010040

0800c620 <_Bfree>:
 800c620:	b570      	push	{r4, r5, r6, lr}
 800c622:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c624:	4605      	mov	r5, r0
 800c626:	460c      	mov	r4, r1
 800c628:	b976      	cbnz	r6, 800c648 <_Bfree+0x28>
 800c62a:	2010      	movs	r0, #16
 800c62c:	f7ff ff9e 	bl	800c56c <malloc>
 800c630:	4602      	mov	r2, r0
 800c632:	6268      	str	r0, [r5, #36]	; 0x24
 800c634:	b920      	cbnz	r0, 800c640 <_Bfree+0x20>
 800c636:	4b09      	ldr	r3, [pc, #36]	; (800c65c <_Bfree+0x3c>)
 800c638:	4809      	ldr	r0, [pc, #36]	; (800c660 <_Bfree+0x40>)
 800c63a:	218a      	movs	r1, #138	; 0x8a
 800c63c:	f7fe fd7a 	bl	800b134 <__assert_func>
 800c640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c644:	6006      	str	r6, [r0, #0]
 800c646:	60c6      	str	r6, [r0, #12]
 800c648:	b13c      	cbz	r4, 800c65a <_Bfree+0x3a>
 800c64a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c64c:	6862      	ldr	r2, [r4, #4]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c654:	6021      	str	r1, [r4, #0]
 800c656:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c65a:	bd70      	pop	{r4, r5, r6, pc}
 800c65c:	0800fe90 	.word	0x0800fe90
 800c660:	08010040 	.word	0x08010040

0800c664 <__multadd>:
 800c664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c668:	690e      	ldr	r6, [r1, #16]
 800c66a:	4607      	mov	r7, r0
 800c66c:	4698      	mov	r8, r3
 800c66e:	460c      	mov	r4, r1
 800c670:	f101 0014 	add.w	r0, r1, #20
 800c674:	2300      	movs	r3, #0
 800c676:	6805      	ldr	r5, [r0, #0]
 800c678:	b2a9      	uxth	r1, r5
 800c67a:	fb02 8101 	mla	r1, r2, r1, r8
 800c67e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c682:	0c2d      	lsrs	r5, r5, #16
 800c684:	fb02 c505 	mla	r5, r2, r5, ip
 800c688:	b289      	uxth	r1, r1
 800c68a:	3301      	adds	r3, #1
 800c68c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c690:	429e      	cmp	r6, r3
 800c692:	f840 1b04 	str.w	r1, [r0], #4
 800c696:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c69a:	dcec      	bgt.n	800c676 <__multadd+0x12>
 800c69c:	f1b8 0f00 	cmp.w	r8, #0
 800c6a0:	d022      	beq.n	800c6e8 <__multadd+0x84>
 800c6a2:	68a3      	ldr	r3, [r4, #8]
 800c6a4:	42b3      	cmp	r3, r6
 800c6a6:	dc19      	bgt.n	800c6dc <__multadd+0x78>
 800c6a8:	6861      	ldr	r1, [r4, #4]
 800c6aa:	4638      	mov	r0, r7
 800c6ac:	3101      	adds	r1, #1
 800c6ae:	f7ff ff77 	bl	800c5a0 <_Balloc>
 800c6b2:	4605      	mov	r5, r0
 800c6b4:	b928      	cbnz	r0, 800c6c2 <__multadd+0x5e>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	4b0d      	ldr	r3, [pc, #52]	; (800c6f0 <__multadd+0x8c>)
 800c6ba:	480e      	ldr	r0, [pc, #56]	; (800c6f4 <__multadd+0x90>)
 800c6bc:	21b5      	movs	r1, #181	; 0xb5
 800c6be:	f7fe fd39 	bl	800b134 <__assert_func>
 800c6c2:	6922      	ldr	r2, [r4, #16]
 800c6c4:	3202      	adds	r2, #2
 800c6c6:	f104 010c 	add.w	r1, r4, #12
 800c6ca:	0092      	lsls	r2, r2, #2
 800c6cc:	300c      	adds	r0, #12
 800c6ce:	f7fd f9a3 	bl	8009a18 <memcpy>
 800c6d2:	4621      	mov	r1, r4
 800c6d4:	4638      	mov	r0, r7
 800c6d6:	f7ff ffa3 	bl	800c620 <_Bfree>
 800c6da:	462c      	mov	r4, r5
 800c6dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c6e0:	3601      	adds	r6, #1
 800c6e2:	f8c3 8014 	str.w	r8, [r3, #20]
 800c6e6:	6126      	str	r6, [r4, #16]
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6ee:	bf00      	nop
 800c6f0:	0800ffb0 	.word	0x0800ffb0
 800c6f4:	08010040 	.word	0x08010040

0800c6f8 <__s2b>:
 800c6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6fc:	460c      	mov	r4, r1
 800c6fe:	4615      	mov	r5, r2
 800c700:	461f      	mov	r7, r3
 800c702:	2209      	movs	r2, #9
 800c704:	3308      	adds	r3, #8
 800c706:	4606      	mov	r6, r0
 800c708:	fb93 f3f2 	sdiv	r3, r3, r2
 800c70c:	2100      	movs	r1, #0
 800c70e:	2201      	movs	r2, #1
 800c710:	429a      	cmp	r2, r3
 800c712:	db09      	blt.n	800c728 <__s2b+0x30>
 800c714:	4630      	mov	r0, r6
 800c716:	f7ff ff43 	bl	800c5a0 <_Balloc>
 800c71a:	b940      	cbnz	r0, 800c72e <__s2b+0x36>
 800c71c:	4602      	mov	r2, r0
 800c71e:	4b19      	ldr	r3, [pc, #100]	; (800c784 <__s2b+0x8c>)
 800c720:	4819      	ldr	r0, [pc, #100]	; (800c788 <__s2b+0x90>)
 800c722:	21ce      	movs	r1, #206	; 0xce
 800c724:	f7fe fd06 	bl	800b134 <__assert_func>
 800c728:	0052      	lsls	r2, r2, #1
 800c72a:	3101      	adds	r1, #1
 800c72c:	e7f0      	b.n	800c710 <__s2b+0x18>
 800c72e:	9b08      	ldr	r3, [sp, #32]
 800c730:	6143      	str	r3, [r0, #20]
 800c732:	2d09      	cmp	r5, #9
 800c734:	f04f 0301 	mov.w	r3, #1
 800c738:	6103      	str	r3, [r0, #16]
 800c73a:	dd16      	ble.n	800c76a <__s2b+0x72>
 800c73c:	f104 0909 	add.w	r9, r4, #9
 800c740:	46c8      	mov	r8, r9
 800c742:	442c      	add	r4, r5
 800c744:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c748:	4601      	mov	r1, r0
 800c74a:	3b30      	subs	r3, #48	; 0x30
 800c74c:	220a      	movs	r2, #10
 800c74e:	4630      	mov	r0, r6
 800c750:	f7ff ff88 	bl	800c664 <__multadd>
 800c754:	45a0      	cmp	r8, r4
 800c756:	d1f5      	bne.n	800c744 <__s2b+0x4c>
 800c758:	f1a5 0408 	sub.w	r4, r5, #8
 800c75c:	444c      	add	r4, r9
 800c75e:	1b2d      	subs	r5, r5, r4
 800c760:	1963      	adds	r3, r4, r5
 800c762:	42bb      	cmp	r3, r7
 800c764:	db04      	blt.n	800c770 <__s2b+0x78>
 800c766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c76a:	340a      	adds	r4, #10
 800c76c:	2509      	movs	r5, #9
 800c76e:	e7f6      	b.n	800c75e <__s2b+0x66>
 800c770:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c774:	4601      	mov	r1, r0
 800c776:	3b30      	subs	r3, #48	; 0x30
 800c778:	220a      	movs	r2, #10
 800c77a:	4630      	mov	r0, r6
 800c77c:	f7ff ff72 	bl	800c664 <__multadd>
 800c780:	e7ee      	b.n	800c760 <__s2b+0x68>
 800c782:	bf00      	nop
 800c784:	0800ffb0 	.word	0x0800ffb0
 800c788:	08010040 	.word	0x08010040

0800c78c <__hi0bits>:
 800c78c:	0c03      	lsrs	r3, r0, #16
 800c78e:	041b      	lsls	r3, r3, #16
 800c790:	b9d3      	cbnz	r3, 800c7c8 <__hi0bits+0x3c>
 800c792:	0400      	lsls	r0, r0, #16
 800c794:	2310      	movs	r3, #16
 800c796:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c79a:	bf04      	itt	eq
 800c79c:	0200      	lsleq	r0, r0, #8
 800c79e:	3308      	addeq	r3, #8
 800c7a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c7a4:	bf04      	itt	eq
 800c7a6:	0100      	lsleq	r0, r0, #4
 800c7a8:	3304      	addeq	r3, #4
 800c7aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c7ae:	bf04      	itt	eq
 800c7b0:	0080      	lsleq	r0, r0, #2
 800c7b2:	3302      	addeq	r3, #2
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	db05      	blt.n	800c7c4 <__hi0bits+0x38>
 800c7b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c7bc:	f103 0301 	add.w	r3, r3, #1
 800c7c0:	bf08      	it	eq
 800c7c2:	2320      	moveq	r3, #32
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	4770      	bx	lr
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	e7e4      	b.n	800c796 <__hi0bits+0xa>

0800c7cc <__lo0bits>:
 800c7cc:	6803      	ldr	r3, [r0, #0]
 800c7ce:	f013 0207 	ands.w	r2, r3, #7
 800c7d2:	4601      	mov	r1, r0
 800c7d4:	d00b      	beq.n	800c7ee <__lo0bits+0x22>
 800c7d6:	07da      	lsls	r2, r3, #31
 800c7d8:	d424      	bmi.n	800c824 <__lo0bits+0x58>
 800c7da:	0798      	lsls	r0, r3, #30
 800c7dc:	bf49      	itett	mi
 800c7de:	085b      	lsrmi	r3, r3, #1
 800c7e0:	089b      	lsrpl	r3, r3, #2
 800c7e2:	2001      	movmi	r0, #1
 800c7e4:	600b      	strmi	r3, [r1, #0]
 800c7e6:	bf5c      	itt	pl
 800c7e8:	600b      	strpl	r3, [r1, #0]
 800c7ea:	2002      	movpl	r0, #2
 800c7ec:	4770      	bx	lr
 800c7ee:	b298      	uxth	r0, r3
 800c7f0:	b9b0      	cbnz	r0, 800c820 <__lo0bits+0x54>
 800c7f2:	0c1b      	lsrs	r3, r3, #16
 800c7f4:	2010      	movs	r0, #16
 800c7f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c7fa:	bf04      	itt	eq
 800c7fc:	0a1b      	lsreq	r3, r3, #8
 800c7fe:	3008      	addeq	r0, #8
 800c800:	071a      	lsls	r2, r3, #28
 800c802:	bf04      	itt	eq
 800c804:	091b      	lsreq	r3, r3, #4
 800c806:	3004      	addeq	r0, #4
 800c808:	079a      	lsls	r2, r3, #30
 800c80a:	bf04      	itt	eq
 800c80c:	089b      	lsreq	r3, r3, #2
 800c80e:	3002      	addeq	r0, #2
 800c810:	07da      	lsls	r2, r3, #31
 800c812:	d403      	bmi.n	800c81c <__lo0bits+0x50>
 800c814:	085b      	lsrs	r3, r3, #1
 800c816:	f100 0001 	add.w	r0, r0, #1
 800c81a:	d005      	beq.n	800c828 <__lo0bits+0x5c>
 800c81c:	600b      	str	r3, [r1, #0]
 800c81e:	4770      	bx	lr
 800c820:	4610      	mov	r0, r2
 800c822:	e7e8      	b.n	800c7f6 <__lo0bits+0x2a>
 800c824:	2000      	movs	r0, #0
 800c826:	4770      	bx	lr
 800c828:	2020      	movs	r0, #32
 800c82a:	4770      	bx	lr

0800c82c <__i2b>:
 800c82c:	b510      	push	{r4, lr}
 800c82e:	460c      	mov	r4, r1
 800c830:	2101      	movs	r1, #1
 800c832:	f7ff feb5 	bl	800c5a0 <_Balloc>
 800c836:	4602      	mov	r2, r0
 800c838:	b928      	cbnz	r0, 800c846 <__i2b+0x1a>
 800c83a:	4b05      	ldr	r3, [pc, #20]	; (800c850 <__i2b+0x24>)
 800c83c:	4805      	ldr	r0, [pc, #20]	; (800c854 <__i2b+0x28>)
 800c83e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c842:	f7fe fc77 	bl	800b134 <__assert_func>
 800c846:	2301      	movs	r3, #1
 800c848:	6144      	str	r4, [r0, #20]
 800c84a:	6103      	str	r3, [r0, #16]
 800c84c:	bd10      	pop	{r4, pc}
 800c84e:	bf00      	nop
 800c850:	0800ffb0 	.word	0x0800ffb0
 800c854:	08010040 	.word	0x08010040

0800c858 <__multiply>:
 800c858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c85c:	4614      	mov	r4, r2
 800c85e:	690a      	ldr	r2, [r1, #16]
 800c860:	6923      	ldr	r3, [r4, #16]
 800c862:	429a      	cmp	r2, r3
 800c864:	bfb8      	it	lt
 800c866:	460b      	movlt	r3, r1
 800c868:	460d      	mov	r5, r1
 800c86a:	bfbc      	itt	lt
 800c86c:	4625      	movlt	r5, r4
 800c86e:	461c      	movlt	r4, r3
 800c870:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c874:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c878:	68ab      	ldr	r3, [r5, #8]
 800c87a:	6869      	ldr	r1, [r5, #4]
 800c87c:	eb0a 0709 	add.w	r7, sl, r9
 800c880:	42bb      	cmp	r3, r7
 800c882:	b085      	sub	sp, #20
 800c884:	bfb8      	it	lt
 800c886:	3101      	addlt	r1, #1
 800c888:	f7ff fe8a 	bl	800c5a0 <_Balloc>
 800c88c:	b930      	cbnz	r0, 800c89c <__multiply+0x44>
 800c88e:	4602      	mov	r2, r0
 800c890:	4b42      	ldr	r3, [pc, #264]	; (800c99c <__multiply+0x144>)
 800c892:	4843      	ldr	r0, [pc, #268]	; (800c9a0 <__multiply+0x148>)
 800c894:	f240 115d 	movw	r1, #349	; 0x15d
 800c898:	f7fe fc4c 	bl	800b134 <__assert_func>
 800c89c:	f100 0614 	add.w	r6, r0, #20
 800c8a0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c8a4:	4633      	mov	r3, r6
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	4543      	cmp	r3, r8
 800c8aa:	d31e      	bcc.n	800c8ea <__multiply+0x92>
 800c8ac:	f105 0c14 	add.w	ip, r5, #20
 800c8b0:	f104 0314 	add.w	r3, r4, #20
 800c8b4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c8b8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c8bc:	9202      	str	r2, [sp, #8]
 800c8be:	ebac 0205 	sub.w	r2, ip, r5
 800c8c2:	3a15      	subs	r2, #21
 800c8c4:	f022 0203 	bic.w	r2, r2, #3
 800c8c8:	3204      	adds	r2, #4
 800c8ca:	f105 0115 	add.w	r1, r5, #21
 800c8ce:	458c      	cmp	ip, r1
 800c8d0:	bf38      	it	cc
 800c8d2:	2204      	movcc	r2, #4
 800c8d4:	9201      	str	r2, [sp, #4]
 800c8d6:	9a02      	ldr	r2, [sp, #8]
 800c8d8:	9303      	str	r3, [sp, #12]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d808      	bhi.n	800c8f0 <__multiply+0x98>
 800c8de:	2f00      	cmp	r7, #0
 800c8e0:	dc55      	bgt.n	800c98e <__multiply+0x136>
 800c8e2:	6107      	str	r7, [r0, #16]
 800c8e4:	b005      	add	sp, #20
 800c8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ea:	f843 2b04 	str.w	r2, [r3], #4
 800c8ee:	e7db      	b.n	800c8a8 <__multiply+0x50>
 800c8f0:	f8b3 a000 	ldrh.w	sl, [r3]
 800c8f4:	f1ba 0f00 	cmp.w	sl, #0
 800c8f8:	d020      	beq.n	800c93c <__multiply+0xe4>
 800c8fa:	f105 0e14 	add.w	lr, r5, #20
 800c8fe:	46b1      	mov	r9, r6
 800c900:	2200      	movs	r2, #0
 800c902:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c906:	f8d9 b000 	ldr.w	fp, [r9]
 800c90a:	b2a1      	uxth	r1, r4
 800c90c:	fa1f fb8b 	uxth.w	fp, fp
 800c910:	fb0a b101 	mla	r1, sl, r1, fp
 800c914:	4411      	add	r1, r2
 800c916:	f8d9 2000 	ldr.w	r2, [r9]
 800c91a:	0c24      	lsrs	r4, r4, #16
 800c91c:	0c12      	lsrs	r2, r2, #16
 800c91e:	fb0a 2404 	mla	r4, sl, r4, r2
 800c922:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c926:	b289      	uxth	r1, r1
 800c928:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c92c:	45f4      	cmp	ip, lr
 800c92e:	f849 1b04 	str.w	r1, [r9], #4
 800c932:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c936:	d8e4      	bhi.n	800c902 <__multiply+0xaa>
 800c938:	9901      	ldr	r1, [sp, #4]
 800c93a:	5072      	str	r2, [r6, r1]
 800c93c:	9a03      	ldr	r2, [sp, #12]
 800c93e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c942:	3304      	adds	r3, #4
 800c944:	f1b9 0f00 	cmp.w	r9, #0
 800c948:	d01f      	beq.n	800c98a <__multiply+0x132>
 800c94a:	6834      	ldr	r4, [r6, #0]
 800c94c:	f105 0114 	add.w	r1, r5, #20
 800c950:	46b6      	mov	lr, r6
 800c952:	f04f 0a00 	mov.w	sl, #0
 800c956:	880a      	ldrh	r2, [r1, #0]
 800c958:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c95c:	fb09 b202 	mla	r2, r9, r2, fp
 800c960:	4492      	add	sl, r2
 800c962:	b2a4      	uxth	r4, r4
 800c964:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c968:	f84e 4b04 	str.w	r4, [lr], #4
 800c96c:	f851 4b04 	ldr.w	r4, [r1], #4
 800c970:	f8be 2000 	ldrh.w	r2, [lr]
 800c974:	0c24      	lsrs	r4, r4, #16
 800c976:	fb09 2404 	mla	r4, r9, r4, r2
 800c97a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c97e:	458c      	cmp	ip, r1
 800c980:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c984:	d8e7      	bhi.n	800c956 <__multiply+0xfe>
 800c986:	9a01      	ldr	r2, [sp, #4]
 800c988:	50b4      	str	r4, [r6, r2]
 800c98a:	3604      	adds	r6, #4
 800c98c:	e7a3      	b.n	800c8d6 <__multiply+0x7e>
 800c98e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c992:	2b00      	cmp	r3, #0
 800c994:	d1a5      	bne.n	800c8e2 <__multiply+0x8a>
 800c996:	3f01      	subs	r7, #1
 800c998:	e7a1      	b.n	800c8de <__multiply+0x86>
 800c99a:	bf00      	nop
 800c99c:	0800ffb0 	.word	0x0800ffb0
 800c9a0:	08010040 	.word	0x08010040

0800c9a4 <__pow5mult>:
 800c9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9a8:	4615      	mov	r5, r2
 800c9aa:	f012 0203 	ands.w	r2, r2, #3
 800c9ae:	4606      	mov	r6, r0
 800c9b0:	460f      	mov	r7, r1
 800c9b2:	d007      	beq.n	800c9c4 <__pow5mult+0x20>
 800c9b4:	4c25      	ldr	r4, [pc, #148]	; (800ca4c <__pow5mult+0xa8>)
 800c9b6:	3a01      	subs	r2, #1
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9be:	f7ff fe51 	bl	800c664 <__multadd>
 800c9c2:	4607      	mov	r7, r0
 800c9c4:	10ad      	asrs	r5, r5, #2
 800c9c6:	d03d      	beq.n	800ca44 <__pow5mult+0xa0>
 800c9c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c9ca:	b97c      	cbnz	r4, 800c9ec <__pow5mult+0x48>
 800c9cc:	2010      	movs	r0, #16
 800c9ce:	f7ff fdcd 	bl	800c56c <malloc>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	6270      	str	r0, [r6, #36]	; 0x24
 800c9d6:	b928      	cbnz	r0, 800c9e4 <__pow5mult+0x40>
 800c9d8:	4b1d      	ldr	r3, [pc, #116]	; (800ca50 <__pow5mult+0xac>)
 800c9da:	481e      	ldr	r0, [pc, #120]	; (800ca54 <__pow5mult+0xb0>)
 800c9dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c9e0:	f7fe fba8 	bl	800b134 <__assert_func>
 800c9e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9e8:	6004      	str	r4, [r0, #0]
 800c9ea:	60c4      	str	r4, [r0, #12]
 800c9ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c9f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9f4:	b94c      	cbnz	r4, 800ca0a <__pow5mult+0x66>
 800c9f6:	f240 2171 	movw	r1, #625	; 0x271
 800c9fa:	4630      	mov	r0, r6
 800c9fc:	f7ff ff16 	bl	800c82c <__i2b>
 800ca00:	2300      	movs	r3, #0
 800ca02:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca06:	4604      	mov	r4, r0
 800ca08:	6003      	str	r3, [r0, #0]
 800ca0a:	f04f 0900 	mov.w	r9, #0
 800ca0e:	07eb      	lsls	r3, r5, #31
 800ca10:	d50a      	bpl.n	800ca28 <__pow5mult+0x84>
 800ca12:	4639      	mov	r1, r7
 800ca14:	4622      	mov	r2, r4
 800ca16:	4630      	mov	r0, r6
 800ca18:	f7ff ff1e 	bl	800c858 <__multiply>
 800ca1c:	4639      	mov	r1, r7
 800ca1e:	4680      	mov	r8, r0
 800ca20:	4630      	mov	r0, r6
 800ca22:	f7ff fdfd 	bl	800c620 <_Bfree>
 800ca26:	4647      	mov	r7, r8
 800ca28:	106d      	asrs	r5, r5, #1
 800ca2a:	d00b      	beq.n	800ca44 <__pow5mult+0xa0>
 800ca2c:	6820      	ldr	r0, [r4, #0]
 800ca2e:	b938      	cbnz	r0, 800ca40 <__pow5mult+0x9c>
 800ca30:	4622      	mov	r2, r4
 800ca32:	4621      	mov	r1, r4
 800ca34:	4630      	mov	r0, r6
 800ca36:	f7ff ff0f 	bl	800c858 <__multiply>
 800ca3a:	6020      	str	r0, [r4, #0]
 800ca3c:	f8c0 9000 	str.w	r9, [r0]
 800ca40:	4604      	mov	r4, r0
 800ca42:	e7e4      	b.n	800ca0e <__pow5mult+0x6a>
 800ca44:	4638      	mov	r0, r7
 800ca46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca4a:	bf00      	nop
 800ca4c:	08010190 	.word	0x08010190
 800ca50:	0800fe90 	.word	0x0800fe90
 800ca54:	08010040 	.word	0x08010040

0800ca58 <__lshift>:
 800ca58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca5c:	460c      	mov	r4, r1
 800ca5e:	6849      	ldr	r1, [r1, #4]
 800ca60:	6923      	ldr	r3, [r4, #16]
 800ca62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca66:	68a3      	ldr	r3, [r4, #8]
 800ca68:	4607      	mov	r7, r0
 800ca6a:	4691      	mov	r9, r2
 800ca6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca70:	f108 0601 	add.w	r6, r8, #1
 800ca74:	42b3      	cmp	r3, r6
 800ca76:	db0b      	blt.n	800ca90 <__lshift+0x38>
 800ca78:	4638      	mov	r0, r7
 800ca7a:	f7ff fd91 	bl	800c5a0 <_Balloc>
 800ca7e:	4605      	mov	r5, r0
 800ca80:	b948      	cbnz	r0, 800ca96 <__lshift+0x3e>
 800ca82:	4602      	mov	r2, r0
 800ca84:	4b28      	ldr	r3, [pc, #160]	; (800cb28 <__lshift+0xd0>)
 800ca86:	4829      	ldr	r0, [pc, #164]	; (800cb2c <__lshift+0xd4>)
 800ca88:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ca8c:	f7fe fb52 	bl	800b134 <__assert_func>
 800ca90:	3101      	adds	r1, #1
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	e7ee      	b.n	800ca74 <__lshift+0x1c>
 800ca96:	2300      	movs	r3, #0
 800ca98:	f100 0114 	add.w	r1, r0, #20
 800ca9c:	f100 0210 	add.w	r2, r0, #16
 800caa0:	4618      	mov	r0, r3
 800caa2:	4553      	cmp	r3, sl
 800caa4:	db33      	blt.n	800cb0e <__lshift+0xb6>
 800caa6:	6920      	ldr	r0, [r4, #16]
 800caa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800caac:	f104 0314 	add.w	r3, r4, #20
 800cab0:	f019 091f 	ands.w	r9, r9, #31
 800cab4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cab8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cabc:	d02b      	beq.n	800cb16 <__lshift+0xbe>
 800cabe:	f1c9 0e20 	rsb	lr, r9, #32
 800cac2:	468a      	mov	sl, r1
 800cac4:	2200      	movs	r2, #0
 800cac6:	6818      	ldr	r0, [r3, #0]
 800cac8:	fa00 f009 	lsl.w	r0, r0, r9
 800cacc:	4302      	orrs	r2, r0
 800cace:	f84a 2b04 	str.w	r2, [sl], #4
 800cad2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cad6:	459c      	cmp	ip, r3
 800cad8:	fa22 f20e 	lsr.w	r2, r2, lr
 800cadc:	d8f3      	bhi.n	800cac6 <__lshift+0x6e>
 800cade:	ebac 0304 	sub.w	r3, ip, r4
 800cae2:	3b15      	subs	r3, #21
 800cae4:	f023 0303 	bic.w	r3, r3, #3
 800cae8:	3304      	adds	r3, #4
 800caea:	f104 0015 	add.w	r0, r4, #21
 800caee:	4584      	cmp	ip, r0
 800caf0:	bf38      	it	cc
 800caf2:	2304      	movcc	r3, #4
 800caf4:	50ca      	str	r2, [r1, r3]
 800caf6:	b10a      	cbz	r2, 800cafc <__lshift+0xa4>
 800caf8:	f108 0602 	add.w	r6, r8, #2
 800cafc:	3e01      	subs	r6, #1
 800cafe:	4638      	mov	r0, r7
 800cb00:	612e      	str	r6, [r5, #16]
 800cb02:	4621      	mov	r1, r4
 800cb04:	f7ff fd8c 	bl	800c620 <_Bfree>
 800cb08:	4628      	mov	r0, r5
 800cb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb12:	3301      	adds	r3, #1
 800cb14:	e7c5      	b.n	800caa2 <__lshift+0x4a>
 800cb16:	3904      	subs	r1, #4
 800cb18:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb20:	459c      	cmp	ip, r3
 800cb22:	d8f9      	bhi.n	800cb18 <__lshift+0xc0>
 800cb24:	e7ea      	b.n	800cafc <__lshift+0xa4>
 800cb26:	bf00      	nop
 800cb28:	0800ffb0 	.word	0x0800ffb0
 800cb2c:	08010040 	.word	0x08010040

0800cb30 <__mcmp>:
 800cb30:	b530      	push	{r4, r5, lr}
 800cb32:	6902      	ldr	r2, [r0, #16]
 800cb34:	690c      	ldr	r4, [r1, #16]
 800cb36:	1b12      	subs	r2, r2, r4
 800cb38:	d10e      	bne.n	800cb58 <__mcmp+0x28>
 800cb3a:	f100 0314 	add.w	r3, r0, #20
 800cb3e:	3114      	adds	r1, #20
 800cb40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cb44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cb48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cb4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cb50:	42a5      	cmp	r5, r4
 800cb52:	d003      	beq.n	800cb5c <__mcmp+0x2c>
 800cb54:	d305      	bcc.n	800cb62 <__mcmp+0x32>
 800cb56:	2201      	movs	r2, #1
 800cb58:	4610      	mov	r0, r2
 800cb5a:	bd30      	pop	{r4, r5, pc}
 800cb5c:	4283      	cmp	r3, r0
 800cb5e:	d3f3      	bcc.n	800cb48 <__mcmp+0x18>
 800cb60:	e7fa      	b.n	800cb58 <__mcmp+0x28>
 800cb62:	f04f 32ff 	mov.w	r2, #4294967295
 800cb66:	e7f7      	b.n	800cb58 <__mcmp+0x28>

0800cb68 <__mdiff>:
 800cb68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb6c:	460c      	mov	r4, r1
 800cb6e:	4606      	mov	r6, r0
 800cb70:	4611      	mov	r1, r2
 800cb72:	4620      	mov	r0, r4
 800cb74:	4617      	mov	r7, r2
 800cb76:	f7ff ffdb 	bl	800cb30 <__mcmp>
 800cb7a:	1e05      	subs	r5, r0, #0
 800cb7c:	d110      	bne.n	800cba0 <__mdiff+0x38>
 800cb7e:	4629      	mov	r1, r5
 800cb80:	4630      	mov	r0, r6
 800cb82:	f7ff fd0d 	bl	800c5a0 <_Balloc>
 800cb86:	b930      	cbnz	r0, 800cb96 <__mdiff+0x2e>
 800cb88:	4b39      	ldr	r3, [pc, #228]	; (800cc70 <__mdiff+0x108>)
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	f240 2132 	movw	r1, #562	; 0x232
 800cb90:	4838      	ldr	r0, [pc, #224]	; (800cc74 <__mdiff+0x10c>)
 800cb92:	f7fe facf 	bl	800b134 <__assert_func>
 800cb96:	2301      	movs	r3, #1
 800cb98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba0:	bfa4      	itt	ge
 800cba2:	463b      	movge	r3, r7
 800cba4:	4627      	movge	r7, r4
 800cba6:	4630      	mov	r0, r6
 800cba8:	6879      	ldr	r1, [r7, #4]
 800cbaa:	bfa6      	itte	ge
 800cbac:	461c      	movge	r4, r3
 800cbae:	2500      	movge	r5, #0
 800cbb0:	2501      	movlt	r5, #1
 800cbb2:	f7ff fcf5 	bl	800c5a0 <_Balloc>
 800cbb6:	b920      	cbnz	r0, 800cbc2 <__mdiff+0x5a>
 800cbb8:	4b2d      	ldr	r3, [pc, #180]	; (800cc70 <__mdiff+0x108>)
 800cbba:	4602      	mov	r2, r0
 800cbbc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cbc0:	e7e6      	b.n	800cb90 <__mdiff+0x28>
 800cbc2:	693e      	ldr	r6, [r7, #16]
 800cbc4:	60c5      	str	r5, [r0, #12]
 800cbc6:	6925      	ldr	r5, [r4, #16]
 800cbc8:	f107 0114 	add.w	r1, r7, #20
 800cbcc:	f104 0914 	add.w	r9, r4, #20
 800cbd0:	f100 0e14 	add.w	lr, r0, #20
 800cbd4:	f107 0210 	add.w	r2, r7, #16
 800cbd8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cbdc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cbe0:	46f2      	mov	sl, lr
 800cbe2:	2700      	movs	r7, #0
 800cbe4:	f859 3b04 	ldr.w	r3, [r9], #4
 800cbe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cbec:	fa1f f883 	uxth.w	r8, r3
 800cbf0:	fa17 f78b 	uxtah	r7, r7, fp
 800cbf4:	0c1b      	lsrs	r3, r3, #16
 800cbf6:	eba7 0808 	sub.w	r8, r7, r8
 800cbfa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cbfe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cc02:	fa1f f888 	uxth.w	r8, r8
 800cc06:	141f      	asrs	r7, r3, #16
 800cc08:	454d      	cmp	r5, r9
 800cc0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cc0e:	f84a 3b04 	str.w	r3, [sl], #4
 800cc12:	d8e7      	bhi.n	800cbe4 <__mdiff+0x7c>
 800cc14:	1b2b      	subs	r3, r5, r4
 800cc16:	3b15      	subs	r3, #21
 800cc18:	f023 0303 	bic.w	r3, r3, #3
 800cc1c:	3304      	adds	r3, #4
 800cc1e:	3415      	adds	r4, #21
 800cc20:	42a5      	cmp	r5, r4
 800cc22:	bf38      	it	cc
 800cc24:	2304      	movcc	r3, #4
 800cc26:	4419      	add	r1, r3
 800cc28:	4473      	add	r3, lr
 800cc2a:	469e      	mov	lr, r3
 800cc2c:	460d      	mov	r5, r1
 800cc2e:	4565      	cmp	r5, ip
 800cc30:	d30e      	bcc.n	800cc50 <__mdiff+0xe8>
 800cc32:	f10c 0203 	add.w	r2, ip, #3
 800cc36:	1a52      	subs	r2, r2, r1
 800cc38:	f022 0203 	bic.w	r2, r2, #3
 800cc3c:	3903      	subs	r1, #3
 800cc3e:	458c      	cmp	ip, r1
 800cc40:	bf38      	it	cc
 800cc42:	2200      	movcc	r2, #0
 800cc44:	441a      	add	r2, r3
 800cc46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cc4a:	b17b      	cbz	r3, 800cc6c <__mdiff+0x104>
 800cc4c:	6106      	str	r6, [r0, #16]
 800cc4e:	e7a5      	b.n	800cb9c <__mdiff+0x34>
 800cc50:	f855 8b04 	ldr.w	r8, [r5], #4
 800cc54:	fa17 f488 	uxtah	r4, r7, r8
 800cc58:	1422      	asrs	r2, r4, #16
 800cc5a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cc5e:	b2a4      	uxth	r4, r4
 800cc60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cc64:	f84e 4b04 	str.w	r4, [lr], #4
 800cc68:	1417      	asrs	r7, r2, #16
 800cc6a:	e7e0      	b.n	800cc2e <__mdiff+0xc6>
 800cc6c:	3e01      	subs	r6, #1
 800cc6e:	e7ea      	b.n	800cc46 <__mdiff+0xde>
 800cc70:	0800ffb0 	.word	0x0800ffb0
 800cc74:	08010040 	.word	0x08010040

0800cc78 <__ulp>:
 800cc78:	b082      	sub	sp, #8
 800cc7a:	ed8d 0b00 	vstr	d0, [sp]
 800cc7e:	9b01      	ldr	r3, [sp, #4]
 800cc80:	4912      	ldr	r1, [pc, #72]	; (800cccc <__ulp+0x54>)
 800cc82:	4019      	ands	r1, r3
 800cc84:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cc88:	2900      	cmp	r1, #0
 800cc8a:	dd05      	ble.n	800cc98 <__ulp+0x20>
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	ec43 2b10 	vmov	d0, r2, r3
 800cc94:	b002      	add	sp, #8
 800cc96:	4770      	bx	lr
 800cc98:	4249      	negs	r1, r1
 800cc9a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cc9e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cca2:	f04f 0200 	mov.w	r2, #0
 800cca6:	f04f 0300 	mov.w	r3, #0
 800ccaa:	da04      	bge.n	800ccb6 <__ulp+0x3e>
 800ccac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ccb0:	fa41 f300 	asr.w	r3, r1, r0
 800ccb4:	e7ec      	b.n	800cc90 <__ulp+0x18>
 800ccb6:	f1a0 0114 	sub.w	r1, r0, #20
 800ccba:	291e      	cmp	r1, #30
 800ccbc:	bfda      	itte	le
 800ccbe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ccc2:	fa20 f101 	lsrle.w	r1, r0, r1
 800ccc6:	2101      	movgt	r1, #1
 800ccc8:	460a      	mov	r2, r1
 800ccca:	e7e1      	b.n	800cc90 <__ulp+0x18>
 800cccc:	7ff00000 	.word	0x7ff00000

0800ccd0 <__b2d>:
 800ccd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd2:	6905      	ldr	r5, [r0, #16]
 800ccd4:	f100 0714 	add.w	r7, r0, #20
 800ccd8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ccdc:	1f2e      	subs	r6, r5, #4
 800ccde:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cce2:	4620      	mov	r0, r4
 800cce4:	f7ff fd52 	bl	800c78c <__hi0bits>
 800cce8:	f1c0 0320 	rsb	r3, r0, #32
 800ccec:	280a      	cmp	r0, #10
 800ccee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cd6c <__b2d+0x9c>
 800ccf2:	600b      	str	r3, [r1, #0]
 800ccf4:	dc14      	bgt.n	800cd20 <__b2d+0x50>
 800ccf6:	f1c0 0e0b 	rsb	lr, r0, #11
 800ccfa:	fa24 f10e 	lsr.w	r1, r4, lr
 800ccfe:	42b7      	cmp	r7, r6
 800cd00:	ea41 030c 	orr.w	r3, r1, ip
 800cd04:	bf34      	ite	cc
 800cd06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cd0a:	2100      	movcs	r1, #0
 800cd0c:	3015      	adds	r0, #21
 800cd0e:	fa04 f000 	lsl.w	r0, r4, r0
 800cd12:	fa21 f10e 	lsr.w	r1, r1, lr
 800cd16:	ea40 0201 	orr.w	r2, r0, r1
 800cd1a:	ec43 2b10 	vmov	d0, r2, r3
 800cd1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd20:	42b7      	cmp	r7, r6
 800cd22:	bf3a      	itte	cc
 800cd24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cd28:	f1a5 0608 	subcc.w	r6, r5, #8
 800cd2c:	2100      	movcs	r1, #0
 800cd2e:	380b      	subs	r0, #11
 800cd30:	d017      	beq.n	800cd62 <__b2d+0x92>
 800cd32:	f1c0 0c20 	rsb	ip, r0, #32
 800cd36:	fa04 f500 	lsl.w	r5, r4, r0
 800cd3a:	42be      	cmp	r6, r7
 800cd3c:	fa21 f40c 	lsr.w	r4, r1, ip
 800cd40:	ea45 0504 	orr.w	r5, r5, r4
 800cd44:	bf8c      	ite	hi
 800cd46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cd4a:	2400      	movls	r4, #0
 800cd4c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cd50:	fa01 f000 	lsl.w	r0, r1, r0
 800cd54:	fa24 f40c 	lsr.w	r4, r4, ip
 800cd58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cd5c:	ea40 0204 	orr.w	r2, r0, r4
 800cd60:	e7db      	b.n	800cd1a <__b2d+0x4a>
 800cd62:	ea44 030c 	orr.w	r3, r4, ip
 800cd66:	460a      	mov	r2, r1
 800cd68:	e7d7      	b.n	800cd1a <__b2d+0x4a>
 800cd6a:	bf00      	nop
 800cd6c:	3ff00000 	.word	0x3ff00000

0800cd70 <__d2b>:
 800cd70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd74:	4689      	mov	r9, r1
 800cd76:	2101      	movs	r1, #1
 800cd78:	ec57 6b10 	vmov	r6, r7, d0
 800cd7c:	4690      	mov	r8, r2
 800cd7e:	f7ff fc0f 	bl	800c5a0 <_Balloc>
 800cd82:	4604      	mov	r4, r0
 800cd84:	b930      	cbnz	r0, 800cd94 <__d2b+0x24>
 800cd86:	4602      	mov	r2, r0
 800cd88:	4b25      	ldr	r3, [pc, #148]	; (800ce20 <__d2b+0xb0>)
 800cd8a:	4826      	ldr	r0, [pc, #152]	; (800ce24 <__d2b+0xb4>)
 800cd8c:	f240 310a 	movw	r1, #778	; 0x30a
 800cd90:	f7fe f9d0 	bl	800b134 <__assert_func>
 800cd94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cd98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd9c:	bb35      	cbnz	r5, 800cdec <__d2b+0x7c>
 800cd9e:	2e00      	cmp	r6, #0
 800cda0:	9301      	str	r3, [sp, #4]
 800cda2:	d028      	beq.n	800cdf6 <__d2b+0x86>
 800cda4:	4668      	mov	r0, sp
 800cda6:	9600      	str	r6, [sp, #0]
 800cda8:	f7ff fd10 	bl	800c7cc <__lo0bits>
 800cdac:	9900      	ldr	r1, [sp, #0]
 800cdae:	b300      	cbz	r0, 800cdf2 <__d2b+0x82>
 800cdb0:	9a01      	ldr	r2, [sp, #4]
 800cdb2:	f1c0 0320 	rsb	r3, r0, #32
 800cdb6:	fa02 f303 	lsl.w	r3, r2, r3
 800cdba:	430b      	orrs	r3, r1
 800cdbc:	40c2      	lsrs	r2, r0
 800cdbe:	6163      	str	r3, [r4, #20]
 800cdc0:	9201      	str	r2, [sp, #4]
 800cdc2:	9b01      	ldr	r3, [sp, #4]
 800cdc4:	61a3      	str	r3, [r4, #24]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	bf14      	ite	ne
 800cdca:	2202      	movne	r2, #2
 800cdcc:	2201      	moveq	r2, #1
 800cdce:	6122      	str	r2, [r4, #16]
 800cdd0:	b1d5      	cbz	r5, 800ce08 <__d2b+0x98>
 800cdd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cdd6:	4405      	add	r5, r0
 800cdd8:	f8c9 5000 	str.w	r5, [r9]
 800cddc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cde0:	f8c8 0000 	str.w	r0, [r8]
 800cde4:	4620      	mov	r0, r4
 800cde6:	b003      	add	sp, #12
 800cde8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdf0:	e7d5      	b.n	800cd9e <__d2b+0x2e>
 800cdf2:	6161      	str	r1, [r4, #20]
 800cdf4:	e7e5      	b.n	800cdc2 <__d2b+0x52>
 800cdf6:	a801      	add	r0, sp, #4
 800cdf8:	f7ff fce8 	bl	800c7cc <__lo0bits>
 800cdfc:	9b01      	ldr	r3, [sp, #4]
 800cdfe:	6163      	str	r3, [r4, #20]
 800ce00:	2201      	movs	r2, #1
 800ce02:	6122      	str	r2, [r4, #16]
 800ce04:	3020      	adds	r0, #32
 800ce06:	e7e3      	b.n	800cdd0 <__d2b+0x60>
 800ce08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce10:	f8c9 0000 	str.w	r0, [r9]
 800ce14:	6918      	ldr	r0, [r3, #16]
 800ce16:	f7ff fcb9 	bl	800c78c <__hi0bits>
 800ce1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce1e:	e7df      	b.n	800cde0 <__d2b+0x70>
 800ce20:	0800ffb0 	.word	0x0800ffb0
 800ce24:	08010040 	.word	0x08010040

0800ce28 <__ratio>:
 800ce28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce2c:	4688      	mov	r8, r1
 800ce2e:	4669      	mov	r1, sp
 800ce30:	4681      	mov	r9, r0
 800ce32:	f7ff ff4d 	bl	800ccd0 <__b2d>
 800ce36:	a901      	add	r1, sp, #4
 800ce38:	4640      	mov	r0, r8
 800ce3a:	ec55 4b10 	vmov	r4, r5, d0
 800ce3e:	f7ff ff47 	bl	800ccd0 <__b2d>
 800ce42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce46:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ce4a:	eba3 0c02 	sub.w	ip, r3, r2
 800ce4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ce52:	1a9b      	subs	r3, r3, r2
 800ce54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ce58:	ec51 0b10 	vmov	r0, r1, d0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	bfd6      	itet	le
 800ce60:	460a      	movle	r2, r1
 800ce62:	462a      	movgt	r2, r5
 800ce64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ce68:	468b      	mov	fp, r1
 800ce6a:	462f      	mov	r7, r5
 800ce6c:	bfd4      	ite	le
 800ce6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ce72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ce76:	4620      	mov	r0, r4
 800ce78:	ee10 2a10 	vmov	r2, s0
 800ce7c:	465b      	mov	r3, fp
 800ce7e:	4639      	mov	r1, r7
 800ce80:	f7f3 fcec 	bl	800085c <__aeabi_ddiv>
 800ce84:	ec41 0b10 	vmov	d0, r0, r1
 800ce88:	b003      	add	sp, #12
 800ce8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce8e <__copybits>:
 800ce8e:	3901      	subs	r1, #1
 800ce90:	b570      	push	{r4, r5, r6, lr}
 800ce92:	1149      	asrs	r1, r1, #5
 800ce94:	6914      	ldr	r4, [r2, #16]
 800ce96:	3101      	adds	r1, #1
 800ce98:	f102 0314 	add.w	r3, r2, #20
 800ce9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cea0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cea4:	1f05      	subs	r5, r0, #4
 800cea6:	42a3      	cmp	r3, r4
 800cea8:	d30c      	bcc.n	800cec4 <__copybits+0x36>
 800ceaa:	1aa3      	subs	r3, r4, r2
 800ceac:	3b11      	subs	r3, #17
 800ceae:	f023 0303 	bic.w	r3, r3, #3
 800ceb2:	3211      	adds	r2, #17
 800ceb4:	42a2      	cmp	r2, r4
 800ceb6:	bf88      	it	hi
 800ceb8:	2300      	movhi	r3, #0
 800ceba:	4418      	add	r0, r3
 800cebc:	2300      	movs	r3, #0
 800cebe:	4288      	cmp	r0, r1
 800cec0:	d305      	bcc.n	800cece <__copybits+0x40>
 800cec2:	bd70      	pop	{r4, r5, r6, pc}
 800cec4:	f853 6b04 	ldr.w	r6, [r3], #4
 800cec8:	f845 6f04 	str.w	r6, [r5, #4]!
 800cecc:	e7eb      	b.n	800cea6 <__copybits+0x18>
 800cece:	f840 3b04 	str.w	r3, [r0], #4
 800ced2:	e7f4      	b.n	800cebe <__copybits+0x30>

0800ced4 <__any_on>:
 800ced4:	f100 0214 	add.w	r2, r0, #20
 800ced8:	6900      	ldr	r0, [r0, #16]
 800ceda:	114b      	asrs	r3, r1, #5
 800cedc:	4298      	cmp	r0, r3
 800cede:	b510      	push	{r4, lr}
 800cee0:	db11      	blt.n	800cf06 <__any_on+0x32>
 800cee2:	dd0a      	ble.n	800cefa <__any_on+0x26>
 800cee4:	f011 011f 	ands.w	r1, r1, #31
 800cee8:	d007      	beq.n	800cefa <__any_on+0x26>
 800ceea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ceee:	fa24 f001 	lsr.w	r0, r4, r1
 800cef2:	fa00 f101 	lsl.w	r1, r0, r1
 800cef6:	428c      	cmp	r4, r1
 800cef8:	d10b      	bne.n	800cf12 <__any_on+0x3e>
 800cefa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d803      	bhi.n	800cf0a <__any_on+0x36>
 800cf02:	2000      	movs	r0, #0
 800cf04:	bd10      	pop	{r4, pc}
 800cf06:	4603      	mov	r3, r0
 800cf08:	e7f7      	b.n	800cefa <__any_on+0x26>
 800cf0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf0e:	2900      	cmp	r1, #0
 800cf10:	d0f5      	beq.n	800cefe <__any_on+0x2a>
 800cf12:	2001      	movs	r0, #1
 800cf14:	e7f6      	b.n	800cf04 <__any_on+0x30>

0800cf16 <_calloc_r>:
 800cf16:	b513      	push	{r0, r1, r4, lr}
 800cf18:	434a      	muls	r2, r1
 800cf1a:	4611      	mov	r1, r2
 800cf1c:	9201      	str	r2, [sp, #4]
 800cf1e:	f000 f859 	bl	800cfd4 <_malloc_r>
 800cf22:	4604      	mov	r4, r0
 800cf24:	b118      	cbz	r0, 800cf2e <_calloc_r+0x18>
 800cf26:	9a01      	ldr	r2, [sp, #4]
 800cf28:	2100      	movs	r1, #0
 800cf2a:	f7fc fd83 	bl	8009a34 <memset>
 800cf2e:	4620      	mov	r0, r4
 800cf30:	b002      	add	sp, #8
 800cf32:	bd10      	pop	{r4, pc}

0800cf34 <_free_r>:
 800cf34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf36:	2900      	cmp	r1, #0
 800cf38:	d048      	beq.n	800cfcc <_free_r+0x98>
 800cf3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf3e:	9001      	str	r0, [sp, #4]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	f1a1 0404 	sub.w	r4, r1, #4
 800cf46:	bfb8      	it	lt
 800cf48:	18e4      	addlt	r4, r4, r3
 800cf4a:	f000 fe8d 	bl	800dc68 <__malloc_lock>
 800cf4e:	4a20      	ldr	r2, [pc, #128]	; (800cfd0 <_free_r+0x9c>)
 800cf50:	9801      	ldr	r0, [sp, #4]
 800cf52:	6813      	ldr	r3, [r2, #0]
 800cf54:	4615      	mov	r5, r2
 800cf56:	b933      	cbnz	r3, 800cf66 <_free_r+0x32>
 800cf58:	6063      	str	r3, [r4, #4]
 800cf5a:	6014      	str	r4, [r2, #0]
 800cf5c:	b003      	add	sp, #12
 800cf5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf62:	f000 be87 	b.w	800dc74 <__malloc_unlock>
 800cf66:	42a3      	cmp	r3, r4
 800cf68:	d90b      	bls.n	800cf82 <_free_r+0x4e>
 800cf6a:	6821      	ldr	r1, [r4, #0]
 800cf6c:	1862      	adds	r2, r4, r1
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	bf04      	itt	eq
 800cf72:	681a      	ldreq	r2, [r3, #0]
 800cf74:	685b      	ldreq	r3, [r3, #4]
 800cf76:	6063      	str	r3, [r4, #4]
 800cf78:	bf04      	itt	eq
 800cf7a:	1852      	addeq	r2, r2, r1
 800cf7c:	6022      	streq	r2, [r4, #0]
 800cf7e:	602c      	str	r4, [r5, #0]
 800cf80:	e7ec      	b.n	800cf5c <_free_r+0x28>
 800cf82:	461a      	mov	r2, r3
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	b10b      	cbz	r3, 800cf8c <_free_r+0x58>
 800cf88:	42a3      	cmp	r3, r4
 800cf8a:	d9fa      	bls.n	800cf82 <_free_r+0x4e>
 800cf8c:	6811      	ldr	r1, [r2, #0]
 800cf8e:	1855      	adds	r5, r2, r1
 800cf90:	42a5      	cmp	r5, r4
 800cf92:	d10b      	bne.n	800cfac <_free_r+0x78>
 800cf94:	6824      	ldr	r4, [r4, #0]
 800cf96:	4421      	add	r1, r4
 800cf98:	1854      	adds	r4, r2, r1
 800cf9a:	42a3      	cmp	r3, r4
 800cf9c:	6011      	str	r1, [r2, #0]
 800cf9e:	d1dd      	bne.n	800cf5c <_free_r+0x28>
 800cfa0:	681c      	ldr	r4, [r3, #0]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	6053      	str	r3, [r2, #4]
 800cfa6:	4421      	add	r1, r4
 800cfa8:	6011      	str	r1, [r2, #0]
 800cfaa:	e7d7      	b.n	800cf5c <_free_r+0x28>
 800cfac:	d902      	bls.n	800cfb4 <_free_r+0x80>
 800cfae:	230c      	movs	r3, #12
 800cfb0:	6003      	str	r3, [r0, #0]
 800cfb2:	e7d3      	b.n	800cf5c <_free_r+0x28>
 800cfb4:	6825      	ldr	r5, [r4, #0]
 800cfb6:	1961      	adds	r1, r4, r5
 800cfb8:	428b      	cmp	r3, r1
 800cfba:	bf04      	itt	eq
 800cfbc:	6819      	ldreq	r1, [r3, #0]
 800cfbe:	685b      	ldreq	r3, [r3, #4]
 800cfc0:	6063      	str	r3, [r4, #4]
 800cfc2:	bf04      	itt	eq
 800cfc4:	1949      	addeq	r1, r1, r5
 800cfc6:	6021      	streq	r1, [r4, #0]
 800cfc8:	6054      	str	r4, [r2, #4]
 800cfca:	e7c7      	b.n	800cf5c <_free_r+0x28>
 800cfcc:	b003      	add	sp, #12
 800cfce:	bd30      	pop	{r4, r5, pc}
 800cfd0:	20007170 	.word	0x20007170

0800cfd4 <_malloc_r>:
 800cfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfd6:	1ccd      	adds	r5, r1, #3
 800cfd8:	f025 0503 	bic.w	r5, r5, #3
 800cfdc:	3508      	adds	r5, #8
 800cfde:	2d0c      	cmp	r5, #12
 800cfe0:	bf38      	it	cc
 800cfe2:	250c      	movcc	r5, #12
 800cfe4:	2d00      	cmp	r5, #0
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	db01      	blt.n	800cfee <_malloc_r+0x1a>
 800cfea:	42a9      	cmp	r1, r5
 800cfec:	d903      	bls.n	800cff6 <_malloc_r+0x22>
 800cfee:	230c      	movs	r3, #12
 800cff0:	6033      	str	r3, [r6, #0]
 800cff2:	2000      	movs	r0, #0
 800cff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cff6:	f000 fe37 	bl	800dc68 <__malloc_lock>
 800cffa:	4921      	ldr	r1, [pc, #132]	; (800d080 <_malloc_r+0xac>)
 800cffc:	680a      	ldr	r2, [r1, #0]
 800cffe:	4614      	mov	r4, r2
 800d000:	b99c      	cbnz	r4, 800d02a <_malloc_r+0x56>
 800d002:	4f20      	ldr	r7, [pc, #128]	; (800d084 <_malloc_r+0xb0>)
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	b923      	cbnz	r3, 800d012 <_malloc_r+0x3e>
 800d008:	4621      	mov	r1, r4
 800d00a:	4630      	mov	r0, r6
 800d00c:	f000 fafc 	bl	800d608 <_sbrk_r>
 800d010:	6038      	str	r0, [r7, #0]
 800d012:	4629      	mov	r1, r5
 800d014:	4630      	mov	r0, r6
 800d016:	f000 faf7 	bl	800d608 <_sbrk_r>
 800d01a:	1c43      	adds	r3, r0, #1
 800d01c:	d123      	bne.n	800d066 <_malloc_r+0x92>
 800d01e:	230c      	movs	r3, #12
 800d020:	6033      	str	r3, [r6, #0]
 800d022:	4630      	mov	r0, r6
 800d024:	f000 fe26 	bl	800dc74 <__malloc_unlock>
 800d028:	e7e3      	b.n	800cff2 <_malloc_r+0x1e>
 800d02a:	6823      	ldr	r3, [r4, #0]
 800d02c:	1b5b      	subs	r3, r3, r5
 800d02e:	d417      	bmi.n	800d060 <_malloc_r+0x8c>
 800d030:	2b0b      	cmp	r3, #11
 800d032:	d903      	bls.n	800d03c <_malloc_r+0x68>
 800d034:	6023      	str	r3, [r4, #0]
 800d036:	441c      	add	r4, r3
 800d038:	6025      	str	r5, [r4, #0]
 800d03a:	e004      	b.n	800d046 <_malloc_r+0x72>
 800d03c:	6863      	ldr	r3, [r4, #4]
 800d03e:	42a2      	cmp	r2, r4
 800d040:	bf0c      	ite	eq
 800d042:	600b      	streq	r3, [r1, #0]
 800d044:	6053      	strne	r3, [r2, #4]
 800d046:	4630      	mov	r0, r6
 800d048:	f000 fe14 	bl	800dc74 <__malloc_unlock>
 800d04c:	f104 000b 	add.w	r0, r4, #11
 800d050:	1d23      	adds	r3, r4, #4
 800d052:	f020 0007 	bic.w	r0, r0, #7
 800d056:	1ac2      	subs	r2, r0, r3
 800d058:	d0cc      	beq.n	800cff4 <_malloc_r+0x20>
 800d05a:	1a1b      	subs	r3, r3, r0
 800d05c:	50a3      	str	r3, [r4, r2]
 800d05e:	e7c9      	b.n	800cff4 <_malloc_r+0x20>
 800d060:	4622      	mov	r2, r4
 800d062:	6864      	ldr	r4, [r4, #4]
 800d064:	e7cc      	b.n	800d000 <_malloc_r+0x2c>
 800d066:	1cc4      	adds	r4, r0, #3
 800d068:	f024 0403 	bic.w	r4, r4, #3
 800d06c:	42a0      	cmp	r0, r4
 800d06e:	d0e3      	beq.n	800d038 <_malloc_r+0x64>
 800d070:	1a21      	subs	r1, r4, r0
 800d072:	4630      	mov	r0, r6
 800d074:	f000 fac8 	bl	800d608 <_sbrk_r>
 800d078:	3001      	adds	r0, #1
 800d07a:	d1dd      	bne.n	800d038 <_malloc_r+0x64>
 800d07c:	e7cf      	b.n	800d01e <_malloc_r+0x4a>
 800d07e:	bf00      	nop
 800d080:	20007170 	.word	0x20007170
 800d084:	20007174 	.word	0x20007174

0800d088 <__ssputs_r>:
 800d088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d08c:	688e      	ldr	r6, [r1, #8]
 800d08e:	429e      	cmp	r6, r3
 800d090:	4682      	mov	sl, r0
 800d092:	460c      	mov	r4, r1
 800d094:	4690      	mov	r8, r2
 800d096:	461f      	mov	r7, r3
 800d098:	d838      	bhi.n	800d10c <__ssputs_r+0x84>
 800d09a:	898a      	ldrh	r2, [r1, #12]
 800d09c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d0a0:	d032      	beq.n	800d108 <__ssputs_r+0x80>
 800d0a2:	6825      	ldr	r5, [r4, #0]
 800d0a4:	6909      	ldr	r1, [r1, #16]
 800d0a6:	eba5 0901 	sub.w	r9, r5, r1
 800d0aa:	6965      	ldr	r5, [r4, #20]
 800d0ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	444b      	add	r3, r9
 800d0b8:	106d      	asrs	r5, r5, #1
 800d0ba:	429d      	cmp	r5, r3
 800d0bc:	bf38      	it	cc
 800d0be:	461d      	movcc	r5, r3
 800d0c0:	0553      	lsls	r3, r2, #21
 800d0c2:	d531      	bpl.n	800d128 <__ssputs_r+0xa0>
 800d0c4:	4629      	mov	r1, r5
 800d0c6:	f7ff ff85 	bl	800cfd4 <_malloc_r>
 800d0ca:	4606      	mov	r6, r0
 800d0cc:	b950      	cbnz	r0, 800d0e4 <__ssputs_r+0x5c>
 800d0ce:	230c      	movs	r3, #12
 800d0d0:	f8ca 3000 	str.w	r3, [sl]
 800d0d4:	89a3      	ldrh	r3, [r4, #12]
 800d0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0da:	81a3      	strh	r3, [r4, #12]
 800d0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0e4:	6921      	ldr	r1, [r4, #16]
 800d0e6:	464a      	mov	r2, r9
 800d0e8:	f7fc fc96 	bl	8009a18 <memcpy>
 800d0ec:	89a3      	ldrh	r3, [r4, #12]
 800d0ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d0f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0f6:	81a3      	strh	r3, [r4, #12]
 800d0f8:	6126      	str	r6, [r4, #16]
 800d0fa:	6165      	str	r5, [r4, #20]
 800d0fc:	444e      	add	r6, r9
 800d0fe:	eba5 0509 	sub.w	r5, r5, r9
 800d102:	6026      	str	r6, [r4, #0]
 800d104:	60a5      	str	r5, [r4, #8]
 800d106:	463e      	mov	r6, r7
 800d108:	42be      	cmp	r6, r7
 800d10a:	d900      	bls.n	800d10e <__ssputs_r+0x86>
 800d10c:	463e      	mov	r6, r7
 800d10e:	4632      	mov	r2, r6
 800d110:	6820      	ldr	r0, [r4, #0]
 800d112:	4641      	mov	r1, r8
 800d114:	f000 fd8e 	bl	800dc34 <memmove>
 800d118:	68a3      	ldr	r3, [r4, #8]
 800d11a:	6822      	ldr	r2, [r4, #0]
 800d11c:	1b9b      	subs	r3, r3, r6
 800d11e:	4432      	add	r2, r6
 800d120:	60a3      	str	r3, [r4, #8]
 800d122:	6022      	str	r2, [r4, #0]
 800d124:	2000      	movs	r0, #0
 800d126:	e7db      	b.n	800d0e0 <__ssputs_r+0x58>
 800d128:	462a      	mov	r2, r5
 800d12a:	f000 fda9 	bl	800dc80 <_realloc_r>
 800d12e:	4606      	mov	r6, r0
 800d130:	2800      	cmp	r0, #0
 800d132:	d1e1      	bne.n	800d0f8 <__ssputs_r+0x70>
 800d134:	6921      	ldr	r1, [r4, #16]
 800d136:	4650      	mov	r0, sl
 800d138:	f7ff fefc 	bl	800cf34 <_free_r>
 800d13c:	e7c7      	b.n	800d0ce <__ssputs_r+0x46>
	...

0800d140 <_svfiprintf_r>:
 800d140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d144:	4698      	mov	r8, r3
 800d146:	898b      	ldrh	r3, [r1, #12]
 800d148:	061b      	lsls	r3, r3, #24
 800d14a:	b09d      	sub	sp, #116	; 0x74
 800d14c:	4607      	mov	r7, r0
 800d14e:	460d      	mov	r5, r1
 800d150:	4614      	mov	r4, r2
 800d152:	d50e      	bpl.n	800d172 <_svfiprintf_r+0x32>
 800d154:	690b      	ldr	r3, [r1, #16]
 800d156:	b963      	cbnz	r3, 800d172 <_svfiprintf_r+0x32>
 800d158:	2140      	movs	r1, #64	; 0x40
 800d15a:	f7ff ff3b 	bl	800cfd4 <_malloc_r>
 800d15e:	6028      	str	r0, [r5, #0]
 800d160:	6128      	str	r0, [r5, #16]
 800d162:	b920      	cbnz	r0, 800d16e <_svfiprintf_r+0x2e>
 800d164:	230c      	movs	r3, #12
 800d166:	603b      	str	r3, [r7, #0]
 800d168:	f04f 30ff 	mov.w	r0, #4294967295
 800d16c:	e0d1      	b.n	800d312 <_svfiprintf_r+0x1d2>
 800d16e:	2340      	movs	r3, #64	; 0x40
 800d170:	616b      	str	r3, [r5, #20]
 800d172:	2300      	movs	r3, #0
 800d174:	9309      	str	r3, [sp, #36]	; 0x24
 800d176:	2320      	movs	r3, #32
 800d178:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d17c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d180:	2330      	movs	r3, #48	; 0x30
 800d182:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d32c <_svfiprintf_r+0x1ec>
 800d186:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d18a:	f04f 0901 	mov.w	r9, #1
 800d18e:	4623      	mov	r3, r4
 800d190:	469a      	mov	sl, r3
 800d192:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d196:	b10a      	cbz	r2, 800d19c <_svfiprintf_r+0x5c>
 800d198:	2a25      	cmp	r2, #37	; 0x25
 800d19a:	d1f9      	bne.n	800d190 <_svfiprintf_r+0x50>
 800d19c:	ebba 0b04 	subs.w	fp, sl, r4
 800d1a0:	d00b      	beq.n	800d1ba <_svfiprintf_r+0x7a>
 800d1a2:	465b      	mov	r3, fp
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	4629      	mov	r1, r5
 800d1a8:	4638      	mov	r0, r7
 800d1aa:	f7ff ff6d 	bl	800d088 <__ssputs_r>
 800d1ae:	3001      	adds	r0, #1
 800d1b0:	f000 80aa 	beq.w	800d308 <_svfiprintf_r+0x1c8>
 800d1b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1b6:	445a      	add	r2, fp
 800d1b8:	9209      	str	r2, [sp, #36]	; 0x24
 800d1ba:	f89a 3000 	ldrb.w	r3, [sl]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	f000 80a2 	beq.w	800d308 <_svfiprintf_r+0x1c8>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1ce:	f10a 0a01 	add.w	sl, sl, #1
 800d1d2:	9304      	str	r3, [sp, #16]
 800d1d4:	9307      	str	r3, [sp, #28]
 800d1d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1da:	931a      	str	r3, [sp, #104]	; 0x68
 800d1dc:	4654      	mov	r4, sl
 800d1de:	2205      	movs	r2, #5
 800d1e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1e4:	4851      	ldr	r0, [pc, #324]	; (800d32c <_svfiprintf_r+0x1ec>)
 800d1e6:	f7f3 f803 	bl	80001f0 <memchr>
 800d1ea:	9a04      	ldr	r2, [sp, #16]
 800d1ec:	b9d8      	cbnz	r0, 800d226 <_svfiprintf_r+0xe6>
 800d1ee:	06d0      	lsls	r0, r2, #27
 800d1f0:	bf44      	itt	mi
 800d1f2:	2320      	movmi	r3, #32
 800d1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1f8:	0711      	lsls	r1, r2, #28
 800d1fa:	bf44      	itt	mi
 800d1fc:	232b      	movmi	r3, #43	; 0x2b
 800d1fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d202:	f89a 3000 	ldrb.w	r3, [sl]
 800d206:	2b2a      	cmp	r3, #42	; 0x2a
 800d208:	d015      	beq.n	800d236 <_svfiprintf_r+0xf6>
 800d20a:	9a07      	ldr	r2, [sp, #28]
 800d20c:	4654      	mov	r4, sl
 800d20e:	2000      	movs	r0, #0
 800d210:	f04f 0c0a 	mov.w	ip, #10
 800d214:	4621      	mov	r1, r4
 800d216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d21a:	3b30      	subs	r3, #48	; 0x30
 800d21c:	2b09      	cmp	r3, #9
 800d21e:	d94e      	bls.n	800d2be <_svfiprintf_r+0x17e>
 800d220:	b1b0      	cbz	r0, 800d250 <_svfiprintf_r+0x110>
 800d222:	9207      	str	r2, [sp, #28]
 800d224:	e014      	b.n	800d250 <_svfiprintf_r+0x110>
 800d226:	eba0 0308 	sub.w	r3, r0, r8
 800d22a:	fa09 f303 	lsl.w	r3, r9, r3
 800d22e:	4313      	orrs	r3, r2
 800d230:	9304      	str	r3, [sp, #16]
 800d232:	46a2      	mov	sl, r4
 800d234:	e7d2      	b.n	800d1dc <_svfiprintf_r+0x9c>
 800d236:	9b03      	ldr	r3, [sp, #12]
 800d238:	1d19      	adds	r1, r3, #4
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	9103      	str	r1, [sp, #12]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	bfbb      	ittet	lt
 800d242:	425b      	neglt	r3, r3
 800d244:	f042 0202 	orrlt.w	r2, r2, #2
 800d248:	9307      	strge	r3, [sp, #28]
 800d24a:	9307      	strlt	r3, [sp, #28]
 800d24c:	bfb8      	it	lt
 800d24e:	9204      	strlt	r2, [sp, #16]
 800d250:	7823      	ldrb	r3, [r4, #0]
 800d252:	2b2e      	cmp	r3, #46	; 0x2e
 800d254:	d10c      	bne.n	800d270 <_svfiprintf_r+0x130>
 800d256:	7863      	ldrb	r3, [r4, #1]
 800d258:	2b2a      	cmp	r3, #42	; 0x2a
 800d25a:	d135      	bne.n	800d2c8 <_svfiprintf_r+0x188>
 800d25c:	9b03      	ldr	r3, [sp, #12]
 800d25e:	1d1a      	adds	r2, r3, #4
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	9203      	str	r2, [sp, #12]
 800d264:	2b00      	cmp	r3, #0
 800d266:	bfb8      	it	lt
 800d268:	f04f 33ff 	movlt.w	r3, #4294967295
 800d26c:	3402      	adds	r4, #2
 800d26e:	9305      	str	r3, [sp, #20]
 800d270:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d33c <_svfiprintf_r+0x1fc>
 800d274:	7821      	ldrb	r1, [r4, #0]
 800d276:	2203      	movs	r2, #3
 800d278:	4650      	mov	r0, sl
 800d27a:	f7f2 ffb9 	bl	80001f0 <memchr>
 800d27e:	b140      	cbz	r0, 800d292 <_svfiprintf_r+0x152>
 800d280:	2340      	movs	r3, #64	; 0x40
 800d282:	eba0 000a 	sub.w	r0, r0, sl
 800d286:	fa03 f000 	lsl.w	r0, r3, r0
 800d28a:	9b04      	ldr	r3, [sp, #16]
 800d28c:	4303      	orrs	r3, r0
 800d28e:	3401      	adds	r4, #1
 800d290:	9304      	str	r3, [sp, #16]
 800d292:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d296:	4826      	ldr	r0, [pc, #152]	; (800d330 <_svfiprintf_r+0x1f0>)
 800d298:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d29c:	2206      	movs	r2, #6
 800d29e:	f7f2 ffa7 	bl	80001f0 <memchr>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d038      	beq.n	800d318 <_svfiprintf_r+0x1d8>
 800d2a6:	4b23      	ldr	r3, [pc, #140]	; (800d334 <_svfiprintf_r+0x1f4>)
 800d2a8:	bb1b      	cbnz	r3, 800d2f2 <_svfiprintf_r+0x1b2>
 800d2aa:	9b03      	ldr	r3, [sp, #12]
 800d2ac:	3307      	adds	r3, #7
 800d2ae:	f023 0307 	bic.w	r3, r3, #7
 800d2b2:	3308      	adds	r3, #8
 800d2b4:	9303      	str	r3, [sp, #12]
 800d2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2b8:	4433      	add	r3, r6
 800d2ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d2bc:	e767      	b.n	800d18e <_svfiprintf_r+0x4e>
 800d2be:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2c2:	460c      	mov	r4, r1
 800d2c4:	2001      	movs	r0, #1
 800d2c6:	e7a5      	b.n	800d214 <_svfiprintf_r+0xd4>
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	3401      	adds	r4, #1
 800d2cc:	9305      	str	r3, [sp, #20]
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	f04f 0c0a 	mov.w	ip, #10
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2da:	3a30      	subs	r2, #48	; 0x30
 800d2dc:	2a09      	cmp	r2, #9
 800d2de:	d903      	bls.n	800d2e8 <_svfiprintf_r+0x1a8>
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d0c5      	beq.n	800d270 <_svfiprintf_r+0x130>
 800d2e4:	9105      	str	r1, [sp, #20]
 800d2e6:	e7c3      	b.n	800d270 <_svfiprintf_r+0x130>
 800d2e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e7f0      	b.n	800d2d4 <_svfiprintf_r+0x194>
 800d2f2:	ab03      	add	r3, sp, #12
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	462a      	mov	r2, r5
 800d2f8:	4b0f      	ldr	r3, [pc, #60]	; (800d338 <_svfiprintf_r+0x1f8>)
 800d2fa:	a904      	add	r1, sp, #16
 800d2fc:	4638      	mov	r0, r7
 800d2fe:	f7fc fc41 	bl	8009b84 <_printf_float>
 800d302:	1c42      	adds	r2, r0, #1
 800d304:	4606      	mov	r6, r0
 800d306:	d1d6      	bne.n	800d2b6 <_svfiprintf_r+0x176>
 800d308:	89ab      	ldrh	r3, [r5, #12]
 800d30a:	065b      	lsls	r3, r3, #25
 800d30c:	f53f af2c 	bmi.w	800d168 <_svfiprintf_r+0x28>
 800d310:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d312:	b01d      	add	sp, #116	; 0x74
 800d314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d318:	ab03      	add	r3, sp, #12
 800d31a:	9300      	str	r3, [sp, #0]
 800d31c:	462a      	mov	r2, r5
 800d31e:	4b06      	ldr	r3, [pc, #24]	; (800d338 <_svfiprintf_r+0x1f8>)
 800d320:	a904      	add	r1, sp, #16
 800d322:	4638      	mov	r0, r7
 800d324:	f7fc fed2 	bl	800a0cc <_printf_i>
 800d328:	e7eb      	b.n	800d302 <_svfiprintf_r+0x1c2>
 800d32a:	bf00      	nop
 800d32c:	0801019c 	.word	0x0801019c
 800d330:	080101a6 	.word	0x080101a6
 800d334:	08009b85 	.word	0x08009b85
 800d338:	0800d089 	.word	0x0800d089
 800d33c:	080101a2 	.word	0x080101a2

0800d340 <__sfputc_r>:
 800d340:	6893      	ldr	r3, [r2, #8]
 800d342:	3b01      	subs	r3, #1
 800d344:	2b00      	cmp	r3, #0
 800d346:	b410      	push	{r4}
 800d348:	6093      	str	r3, [r2, #8]
 800d34a:	da08      	bge.n	800d35e <__sfputc_r+0x1e>
 800d34c:	6994      	ldr	r4, [r2, #24]
 800d34e:	42a3      	cmp	r3, r4
 800d350:	db01      	blt.n	800d356 <__sfputc_r+0x16>
 800d352:	290a      	cmp	r1, #10
 800d354:	d103      	bne.n	800d35e <__sfputc_r+0x1e>
 800d356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d35a:	f000 b977 	b.w	800d64c <__swbuf_r>
 800d35e:	6813      	ldr	r3, [r2, #0]
 800d360:	1c58      	adds	r0, r3, #1
 800d362:	6010      	str	r0, [r2, #0]
 800d364:	7019      	strb	r1, [r3, #0]
 800d366:	4608      	mov	r0, r1
 800d368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d36c:	4770      	bx	lr

0800d36e <__sfputs_r>:
 800d36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d370:	4606      	mov	r6, r0
 800d372:	460f      	mov	r7, r1
 800d374:	4614      	mov	r4, r2
 800d376:	18d5      	adds	r5, r2, r3
 800d378:	42ac      	cmp	r4, r5
 800d37a:	d101      	bne.n	800d380 <__sfputs_r+0x12>
 800d37c:	2000      	movs	r0, #0
 800d37e:	e007      	b.n	800d390 <__sfputs_r+0x22>
 800d380:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d384:	463a      	mov	r2, r7
 800d386:	4630      	mov	r0, r6
 800d388:	f7ff ffda 	bl	800d340 <__sfputc_r>
 800d38c:	1c43      	adds	r3, r0, #1
 800d38e:	d1f3      	bne.n	800d378 <__sfputs_r+0xa>
 800d390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d394 <_vfiprintf_r>:
 800d394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d398:	460d      	mov	r5, r1
 800d39a:	b09d      	sub	sp, #116	; 0x74
 800d39c:	4614      	mov	r4, r2
 800d39e:	4698      	mov	r8, r3
 800d3a0:	4606      	mov	r6, r0
 800d3a2:	b118      	cbz	r0, 800d3ac <_vfiprintf_r+0x18>
 800d3a4:	6983      	ldr	r3, [r0, #24]
 800d3a6:	b90b      	cbnz	r3, 800d3ac <_vfiprintf_r+0x18>
 800d3a8:	f000 fb40 	bl	800da2c <__sinit>
 800d3ac:	4b89      	ldr	r3, [pc, #548]	; (800d5d4 <_vfiprintf_r+0x240>)
 800d3ae:	429d      	cmp	r5, r3
 800d3b0:	d11b      	bne.n	800d3ea <_vfiprintf_r+0x56>
 800d3b2:	6875      	ldr	r5, [r6, #4]
 800d3b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3b6:	07d9      	lsls	r1, r3, #31
 800d3b8:	d405      	bmi.n	800d3c6 <_vfiprintf_r+0x32>
 800d3ba:	89ab      	ldrh	r3, [r5, #12]
 800d3bc:	059a      	lsls	r2, r3, #22
 800d3be:	d402      	bmi.n	800d3c6 <_vfiprintf_r+0x32>
 800d3c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3c2:	f000 fbd1 	bl	800db68 <__retarget_lock_acquire_recursive>
 800d3c6:	89ab      	ldrh	r3, [r5, #12]
 800d3c8:	071b      	lsls	r3, r3, #28
 800d3ca:	d501      	bpl.n	800d3d0 <_vfiprintf_r+0x3c>
 800d3cc:	692b      	ldr	r3, [r5, #16]
 800d3ce:	b9eb      	cbnz	r3, 800d40c <_vfiprintf_r+0x78>
 800d3d0:	4629      	mov	r1, r5
 800d3d2:	4630      	mov	r0, r6
 800d3d4:	f000 f99a 	bl	800d70c <__swsetup_r>
 800d3d8:	b1c0      	cbz	r0, 800d40c <_vfiprintf_r+0x78>
 800d3da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3dc:	07dc      	lsls	r4, r3, #31
 800d3de:	d50e      	bpl.n	800d3fe <_vfiprintf_r+0x6a>
 800d3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e4:	b01d      	add	sp, #116	; 0x74
 800d3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ea:	4b7b      	ldr	r3, [pc, #492]	; (800d5d8 <_vfiprintf_r+0x244>)
 800d3ec:	429d      	cmp	r5, r3
 800d3ee:	d101      	bne.n	800d3f4 <_vfiprintf_r+0x60>
 800d3f0:	68b5      	ldr	r5, [r6, #8]
 800d3f2:	e7df      	b.n	800d3b4 <_vfiprintf_r+0x20>
 800d3f4:	4b79      	ldr	r3, [pc, #484]	; (800d5dc <_vfiprintf_r+0x248>)
 800d3f6:	429d      	cmp	r5, r3
 800d3f8:	bf08      	it	eq
 800d3fa:	68f5      	ldreq	r5, [r6, #12]
 800d3fc:	e7da      	b.n	800d3b4 <_vfiprintf_r+0x20>
 800d3fe:	89ab      	ldrh	r3, [r5, #12]
 800d400:	0598      	lsls	r0, r3, #22
 800d402:	d4ed      	bmi.n	800d3e0 <_vfiprintf_r+0x4c>
 800d404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d406:	f000 fbb0 	bl	800db6a <__retarget_lock_release_recursive>
 800d40a:	e7e9      	b.n	800d3e0 <_vfiprintf_r+0x4c>
 800d40c:	2300      	movs	r3, #0
 800d40e:	9309      	str	r3, [sp, #36]	; 0x24
 800d410:	2320      	movs	r3, #32
 800d412:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d416:	f8cd 800c 	str.w	r8, [sp, #12]
 800d41a:	2330      	movs	r3, #48	; 0x30
 800d41c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d5e0 <_vfiprintf_r+0x24c>
 800d420:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d424:	f04f 0901 	mov.w	r9, #1
 800d428:	4623      	mov	r3, r4
 800d42a:	469a      	mov	sl, r3
 800d42c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d430:	b10a      	cbz	r2, 800d436 <_vfiprintf_r+0xa2>
 800d432:	2a25      	cmp	r2, #37	; 0x25
 800d434:	d1f9      	bne.n	800d42a <_vfiprintf_r+0x96>
 800d436:	ebba 0b04 	subs.w	fp, sl, r4
 800d43a:	d00b      	beq.n	800d454 <_vfiprintf_r+0xc0>
 800d43c:	465b      	mov	r3, fp
 800d43e:	4622      	mov	r2, r4
 800d440:	4629      	mov	r1, r5
 800d442:	4630      	mov	r0, r6
 800d444:	f7ff ff93 	bl	800d36e <__sfputs_r>
 800d448:	3001      	adds	r0, #1
 800d44a:	f000 80aa 	beq.w	800d5a2 <_vfiprintf_r+0x20e>
 800d44e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d450:	445a      	add	r2, fp
 800d452:	9209      	str	r2, [sp, #36]	; 0x24
 800d454:	f89a 3000 	ldrb.w	r3, [sl]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f000 80a2 	beq.w	800d5a2 <_vfiprintf_r+0x20e>
 800d45e:	2300      	movs	r3, #0
 800d460:	f04f 32ff 	mov.w	r2, #4294967295
 800d464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d468:	f10a 0a01 	add.w	sl, sl, #1
 800d46c:	9304      	str	r3, [sp, #16]
 800d46e:	9307      	str	r3, [sp, #28]
 800d470:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d474:	931a      	str	r3, [sp, #104]	; 0x68
 800d476:	4654      	mov	r4, sl
 800d478:	2205      	movs	r2, #5
 800d47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d47e:	4858      	ldr	r0, [pc, #352]	; (800d5e0 <_vfiprintf_r+0x24c>)
 800d480:	f7f2 feb6 	bl	80001f0 <memchr>
 800d484:	9a04      	ldr	r2, [sp, #16]
 800d486:	b9d8      	cbnz	r0, 800d4c0 <_vfiprintf_r+0x12c>
 800d488:	06d1      	lsls	r1, r2, #27
 800d48a:	bf44      	itt	mi
 800d48c:	2320      	movmi	r3, #32
 800d48e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d492:	0713      	lsls	r3, r2, #28
 800d494:	bf44      	itt	mi
 800d496:	232b      	movmi	r3, #43	; 0x2b
 800d498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d49c:	f89a 3000 	ldrb.w	r3, [sl]
 800d4a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d4a2:	d015      	beq.n	800d4d0 <_vfiprintf_r+0x13c>
 800d4a4:	9a07      	ldr	r2, [sp, #28]
 800d4a6:	4654      	mov	r4, sl
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	f04f 0c0a 	mov.w	ip, #10
 800d4ae:	4621      	mov	r1, r4
 800d4b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4b4:	3b30      	subs	r3, #48	; 0x30
 800d4b6:	2b09      	cmp	r3, #9
 800d4b8:	d94e      	bls.n	800d558 <_vfiprintf_r+0x1c4>
 800d4ba:	b1b0      	cbz	r0, 800d4ea <_vfiprintf_r+0x156>
 800d4bc:	9207      	str	r2, [sp, #28]
 800d4be:	e014      	b.n	800d4ea <_vfiprintf_r+0x156>
 800d4c0:	eba0 0308 	sub.w	r3, r0, r8
 800d4c4:	fa09 f303 	lsl.w	r3, r9, r3
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	9304      	str	r3, [sp, #16]
 800d4cc:	46a2      	mov	sl, r4
 800d4ce:	e7d2      	b.n	800d476 <_vfiprintf_r+0xe2>
 800d4d0:	9b03      	ldr	r3, [sp, #12]
 800d4d2:	1d19      	adds	r1, r3, #4
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	9103      	str	r1, [sp, #12]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	bfbb      	ittet	lt
 800d4dc:	425b      	neglt	r3, r3
 800d4de:	f042 0202 	orrlt.w	r2, r2, #2
 800d4e2:	9307      	strge	r3, [sp, #28]
 800d4e4:	9307      	strlt	r3, [sp, #28]
 800d4e6:	bfb8      	it	lt
 800d4e8:	9204      	strlt	r2, [sp, #16]
 800d4ea:	7823      	ldrb	r3, [r4, #0]
 800d4ec:	2b2e      	cmp	r3, #46	; 0x2e
 800d4ee:	d10c      	bne.n	800d50a <_vfiprintf_r+0x176>
 800d4f0:	7863      	ldrb	r3, [r4, #1]
 800d4f2:	2b2a      	cmp	r3, #42	; 0x2a
 800d4f4:	d135      	bne.n	800d562 <_vfiprintf_r+0x1ce>
 800d4f6:	9b03      	ldr	r3, [sp, #12]
 800d4f8:	1d1a      	adds	r2, r3, #4
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	9203      	str	r2, [sp, #12]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	bfb8      	it	lt
 800d502:	f04f 33ff 	movlt.w	r3, #4294967295
 800d506:	3402      	adds	r4, #2
 800d508:	9305      	str	r3, [sp, #20]
 800d50a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d5f0 <_vfiprintf_r+0x25c>
 800d50e:	7821      	ldrb	r1, [r4, #0]
 800d510:	2203      	movs	r2, #3
 800d512:	4650      	mov	r0, sl
 800d514:	f7f2 fe6c 	bl	80001f0 <memchr>
 800d518:	b140      	cbz	r0, 800d52c <_vfiprintf_r+0x198>
 800d51a:	2340      	movs	r3, #64	; 0x40
 800d51c:	eba0 000a 	sub.w	r0, r0, sl
 800d520:	fa03 f000 	lsl.w	r0, r3, r0
 800d524:	9b04      	ldr	r3, [sp, #16]
 800d526:	4303      	orrs	r3, r0
 800d528:	3401      	adds	r4, #1
 800d52a:	9304      	str	r3, [sp, #16]
 800d52c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d530:	482c      	ldr	r0, [pc, #176]	; (800d5e4 <_vfiprintf_r+0x250>)
 800d532:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d536:	2206      	movs	r2, #6
 800d538:	f7f2 fe5a 	bl	80001f0 <memchr>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	d03f      	beq.n	800d5c0 <_vfiprintf_r+0x22c>
 800d540:	4b29      	ldr	r3, [pc, #164]	; (800d5e8 <_vfiprintf_r+0x254>)
 800d542:	bb1b      	cbnz	r3, 800d58c <_vfiprintf_r+0x1f8>
 800d544:	9b03      	ldr	r3, [sp, #12]
 800d546:	3307      	adds	r3, #7
 800d548:	f023 0307 	bic.w	r3, r3, #7
 800d54c:	3308      	adds	r3, #8
 800d54e:	9303      	str	r3, [sp, #12]
 800d550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d552:	443b      	add	r3, r7
 800d554:	9309      	str	r3, [sp, #36]	; 0x24
 800d556:	e767      	b.n	800d428 <_vfiprintf_r+0x94>
 800d558:	fb0c 3202 	mla	r2, ip, r2, r3
 800d55c:	460c      	mov	r4, r1
 800d55e:	2001      	movs	r0, #1
 800d560:	e7a5      	b.n	800d4ae <_vfiprintf_r+0x11a>
 800d562:	2300      	movs	r3, #0
 800d564:	3401      	adds	r4, #1
 800d566:	9305      	str	r3, [sp, #20]
 800d568:	4619      	mov	r1, r3
 800d56a:	f04f 0c0a 	mov.w	ip, #10
 800d56e:	4620      	mov	r0, r4
 800d570:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d574:	3a30      	subs	r2, #48	; 0x30
 800d576:	2a09      	cmp	r2, #9
 800d578:	d903      	bls.n	800d582 <_vfiprintf_r+0x1ee>
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d0c5      	beq.n	800d50a <_vfiprintf_r+0x176>
 800d57e:	9105      	str	r1, [sp, #20]
 800d580:	e7c3      	b.n	800d50a <_vfiprintf_r+0x176>
 800d582:	fb0c 2101 	mla	r1, ip, r1, r2
 800d586:	4604      	mov	r4, r0
 800d588:	2301      	movs	r3, #1
 800d58a:	e7f0      	b.n	800d56e <_vfiprintf_r+0x1da>
 800d58c:	ab03      	add	r3, sp, #12
 800d58e:	9300      	str	r3, [sp, #0]
 800d590:	462a      	mov	r2, r5
 800d592:	4b16      	ldr	r3, [pc, #88]	; (800d5ec <_vfiprintf_r+0x258>)
 800d594:	a904      	add	r1, sp, #16
 800d596:	4630      	mov	r0, r6
 800d598:	f7fc faf4 	bl	8009b84 <_printf_float>
 800d59c:	4607      	mov	r7, r0
 800d59e:	1c78      	adds	r0, r7, #1
 800d5a0:	d1d6      	bne.n	800d550 <_vfiprintf_r+0x1bc>
 800d5a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5a4:	07d9      	lsls	r1, r3, #31
 800d5a6:	d405      	bmi.n	800d5b4 <_vfiprintf_r+0x220>
 800d5a8:	89ab      	ldrh	r3, [r5, #12]
 800d5aa:	059a      	lsls	r2, r3, #22
 800d5ac:	d402      	bmi.n	800d5b4 <_vfiprintf_r+0x220>
 800d5ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5b0:	f000 fadb 	bl	800db6a <__retarget_lock_release_recursive>
 800d5b4:	89ab      	ldrh	r3, [r5, #12]
 800d5b6:	065b      	lsls	r3, r3, #25
 800d5b8:	f53f af12 	bmi.w	800d3e0 <_vfiprintf_r+0x4c>
 800d5bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5be:	e711      	b.n	800d3e4 <_vfiprintf_r+0x50>
 800d5c0:	ab03      	add	r3, sp, #12
 800d5c2:	9300      	str	r3, [sp, #0]
 800d5c4:	462a      	mov	r2, r5
 800d5c6:	4b09      	ldr	r3, [pc, #36]	; (800d5ec <_vfiprintf_r+0x258>)
 800d5c8:	a904      	add	r1, sp, #16
 800d5ca:	4630      	mov	r0, r6
 800d5cc:	f7fc fd7e 	bl	800a0cc <_printf_i>
 800d5d0:	e7e4      	b.n	800d59c <_vfiprintf_r+0x208>
 800d5d2:	bf00      	nop
 800d5d4:	080102d0 	.word	0x080102d0
 800d5d8:	080102f0 	.word	0x080102f0
 800d5dc:	080102b0 	.word	0x080102b0
 800d5e0:	0801019c 	.word	0x0801019c
 800d5e4:	080101a6 	.word	0x080101a6
 800d5e8:	08009b85 	.word	0x08009b85
 800d5ec:	0800d36f 	.word	0x0800d36f
 800d5f0:	080101a2 	.word	0x080101a2
 800d5f4:	00000000 	.word	0x00000000

0800d5f8 <nan>:
 800d5f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d600 <nan+0x8>
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	00000000 	.word	0x00000000
 800d604:	7ff80000 	.word	0x7ff80000

0800d608 <_sbrk_r>:
 800d608:	b538      	push	{r3, r4, r5, lr}
 800d60a:	4d06      	ldr	r5, [pc, #24]	; (800d624 <_sbrk_r+0x1c>)
 800d60c:	2300      	movs	r3, #0
 800d60e:	4604      	mov	r4, r0
 800d610:	4608      	mov	r0, r1
 800d612:	602b      	str	r3, [r5, #0]
 800d614:	f7f5 f8c6 	bl	80027a4 <_sbrk>
 800d618:	1c43      	adds	r3, r0, #1
 800d61a:	d102      	bne.n	800d622 <_sbrk_r+0x1a>
 800d61c:	682b      	ldr	r3, [r5, #0]
 800d61e:	b103      	cbz	r3, 800d622 <_sbrk_r+0x1a>
 800d620:	6023      	str	r3, [r4, #0]
 800d622:	bd38      	pop	{r3, r4, r5, pc}
 800d624:	200095e0 	.word	0x200095e0

0800d628 <strncmp>:
 800d628:	b510      	push	{r4, lr}
 800d62a:	b16a      	cbz	r2, 800d648 <strncmp+0x20>
 800d62c:	3901      	subs	r1, #1
 800d62e:	1884      	adds	r4, r0, r2
 800d630:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d634:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d638:	4293      	cmp	r3, r2
 800d63a:	d103      	bne.n	800d644 <strncmp+0x1c>
 800d63c:	42a0      	cmp	r0, r4
 800d63e:	d001      	beq.n	800d644 <strncmp+0x1c>
 800d640:	2b00      	cmp	r3, #0
 800d642:	d1f5      	bne.n	800d630 <strncmp+0x8>
 800d644:	1a98      	subs	r0, r3, r2
 800d646:	bd10      	pop	{r4, pc}
 800d648:	4610      	mov	r0, r2
 800d64a:	e7fc      	b.n	800d646 <strncmp+0x1e>

0800d64c <__swbuf_r>:
 800d64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64e:	460e      	mov	r6, r1
 800d650:	4614      	mov	r4, r2
 800d652:	4605      	mov	r5, r0
 800d654:	b118      	cbz	r0, 800d65e <__swbuf_r+0x12>
 800d656:	6983      	ldr	r3, [r0, #24]
 800d658:	b90b      	cbnz	r3, 800d65e <__swbuf_r+0x12>
 800d65a:	f000 f9e7 	bl	800da2c <__sinit>
 800d65e:	4b21      	ldr	r3, [pc, #132]	; (800d6e4 <__swbuf_r+0x98>)
 800d660:	429c      	cmp	r4, r3
 800d662:	d12b      	bne.n	800d6bc <__swbuf_r+0x70>
 800d664:	686c      	ldr	r4, [r5, #4]
 800d666:	69a3      	ldr	r3, [r4, #24]
 800d668:	60a3      	str	r3, [r4, #8]
 800d66a:	89a3      	ldrh	r3, [r4, #12]
 800d66c:	071a      	lsls	r2, r3, #28
 800d66e:	d52f      	bpl.n	800d6d0 <__swbuf_r+0x84>
 800d670:	6923      	ldr	r3, [r4, #16]
 800d672:	b36b      	cbz	r3, 800d6d0 <__swbuf_r+0x84>
 800d674:	6923      	ldr	r3, [r4, #16]
 800d676:	6820      	ldr	r0, [r4, #0]
 800d678:	1ac0      	subs	r0, r0, r3
 800d67a:	6963      	ldr	r3, [r4, #20]
 800d67c:	b2f6      	uxtb	r6, r6
 800d67e:	4283      	cmp	r3, r0
 800d680:	4637      	mov	r7, r6
 800d682:	dc04      	bgt.n	800d68e <__swbuf_r+0x42>
 800d684:	4621      	mov	r1, r4
 800d686:	4628      	mov	r0, r5
 800d688:	f000 f93c 	bl	800d904 <_fflush_r>
 800d68c:	bb30      	cbnz	r0, 800d6dc <__swbuf_r+0x90>
 800d68e:	68a3      	ldr	r3, [r4, #8]
 800d690:	3b01      	subs	r3, #1
 800d692:	60a3      	str	r3, [r4, #8]
 800d694:	6823      	ldr	r3, [r4, #0]
 800d696:	1c5a      	adds	r2, r3, #1
 800d698:	6022      	str	r2, [r4, #0]
 800d69a:	701e      	strb	r6, [r3, #0]
 800d69c:	6963      	ldr	r3, [r4, #20]
 800d69e:	3001      	adds	r0, #1
 800d6a0:	4283      	cmp	r3, r0
 800d6a2:	d004      	beq.n	800d6ae <__swbuf_r+0x62>
 800d6a4:	89a3      	ldrh	r3, [r4, #12]
 800d6a6:	07db      	lsls	r3, r3, #31
 800d6a8:	d506      	bpl.n	800d6b8 <__swbuf_r+0x6c>
 800d6aa:	2e0a      	cmp	r6, #10
 800d6ac:	d104      	bne.n	800d6b8 <__swbuf_r+0x6c>
 800d6ae:	4621      	mov	r1, r4
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	f000 f927 	bl	800d904 <_fflush_r>
 800d6b6:	b988      	cbnz	r0, 800d6dc <__swbuf_r+0x90>
 800d6b8:	4638      	mov	r0, r7
 800d6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6bc:	4b0a      	ldr	r3, [pc, #40]	; (800d6e8 <__swbuf_r+0x9c>)
 800d6be:	429c      	cmp	r4, r3
 800d6c0:	d101      	bne.n	800d6c6 <__swbuf_r+0x7a>
 800d6c2:	68ac      	ldr	r4, [r5, #8]
 800d6c4:	e7cf      	b.n	800d666 <__swbuf_r+0x1a>
 800d6c6:	4b09      	ldr	r3, [pc, #36]	; (800d6ec <__swbuf_r+0xa0>)
 800d6c8:	429c      	cmp	r4, r3
 800d6ca:	bf08      	it	eq
 800d6cc:	68ec      	ldreq	r4, [r5, #12]
 800d6ce:	e7ca      	b.n	800d666 <__swbuf_r+0x1a>
 800d6d0:	4621      	mov	r1, r4
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	f000 f81a 	bl	800d70c <__swsetup_r>
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	d0cb      	beq.n	800d674 <__swbuf_r+0x28>
 800d6dc:	f04f 37ff 	mov.w	r7, #4294967295
 800d6e0:	e7ea      	b.n	800d6b8 <__swbuf_r+0x6c>
 800d6e2:	bf00      	nop
 800d6e4:	080102d0 	.word	0x080102d0
 800d6e8:	080102f0 	.word	0x080102f0
 800d6ec:	080102b0 	.word	0x080102b0

0800d6f0 <__ascii_wctomb>:
 800d6f0:	b149      	cbz	r1, 800d706 <__ascii_wctomb+0x16>
 800d6f2:	2aff      	cmp	r2, #255	; 0xff
 800d6f4:	bf85      	ittet	hi
 800d6f6:	238a      	movhi	r3, #138	; 0x8a
 800d6f8:	6003      	strhi	r3, [r0, #0]
 800d6fa:	700a      	strbls	r2, [r1, #0]
 800d6fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800d700:	bf98      	it	ls
 800d702:	2001      	movls	r0, #1
 800d704:	4770      	bx	lr
 800d706:	4608      	mov	r0, r1
 800d708:	4770      	bx	lr
	...

0800d70c <__swsetup_r>:
 800d70c:	4b32      	ldr	r3, [pc, #200]	; (800d7d8 <__swsetup_r+0xcc>)
 800d70e:	b570      	push	{r4, r5, r6, lr}
 800d710:	681d      	ldr	r5, [r3, #0]
 800d712:	4606      	mov	r6, r0
 800d714:	460c      	mov	r4, r1
 800d716:	b125      	cbz	r5, 800d722 <__swsetup_r+0x16>
 800d718:	69ab      	ldr	r3, [r5, #24]
 800d71a:	b913      	cbnz	r3, 800d722 <__swsetup_r+0x16>
 800d71c:	4628      	mov	r0, r5
 800d71e:	f000 f985 	bl	800da2c <__sinit>
 800d722:	4b2e      	ldr	r3, [pc, #184]	; (800d7dc <__swsetup_r+0xd0>)
 800d724:	429c      	cmp	r4, r3
 800d726:	d10f      	bne.n	800d748 <__swsetup_r+0x3c>
 800d728:	686c      	ldr	r4, [r5, #4]
 800d72a:	89a3      	ldrh	r3, [r4, #12]
 800d72c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d730:	0719      	lsls	r1, r3, #28
 800d732:	d42c      	bmi.n	800d78e <__swsetup_r+0x82>
 800d734:	06dd      	lsls	r5, r3, #27
 800d736:	d411      	bmi.n	800d75c <__swsetup_r+0x50>
 800d738:	2309      	movs	r3, #9
 800d73a:	6033      	str	r3, [r6, #0]
 800d73c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d740:	81a3      	strh	r3, [r4, #12]
 800d742:	f04f 30ff 	mov.w	r0, #4294967295
 800d746:	e03e      	b.n	800d7c6 <__swsetup_r+0xba>
 800d748:	4b25      	ldr	r3, [pc, #148]	; (800d7e0 <__swsetup_r+0xd4>)
 800d74a:	429c      	cmp	r4, r3
 800d74c:	d101      	bne.n	800d752 <__swsetup_r+0x46>
 800d74e:	68ac      	ldr	r4, [r5, #8]
 800d750:	e7eb      	b.n	800d72a <__swsetup_r+0x1e>
 800d752:	4b24      	ldr	r3, [pc, #144]	; (800d7e4 <__swsetup_r+0xd8>)
 800d754:	429c      	cmp	r4, r3
 800d756:	bf08      	it	eq
 800d758:	68ec      	ldreq	r4, [r5, #12]
 800d75a:	e7e6      	b.n	800d72a <__swsetup_r+0x1e>
 800d75c:	0758      	lsls	r0, r3, #29
 800d75e:	d512      	bpl.n	800d786 <__swsetup_r+0x7a>
 800d760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d762:	b141      	cbz	r1, 800d776 <__swsetup_r+0x6a>
 800d764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d768:	4299      	cmp	r1, r3
 800d76a:	d002      	beq.n	800d772 <__swsetup_r+0x66>
 800d76c:	4630      	mov	r0, r6
 800d76e:	f7ff fbe1 	bl	800cf34 <_free_r>
 800d772:	2300      	movs	r3, #0
 800d774:	6363      	str	r3, [r4, #52]	; 0x34
 800d776:	89a3      	ldrh	r3, [r4, #12]
 800d778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d77c:	81a3      	strh	r3, [r4, #12]
 800d77e:	2300      	movs	r3, #0
 800d780:	6063      	str	r3, [r4, #4]
 800d782:	6923      	ldr	r3, [r4, #16]
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	89a3      	ldrh	r3, [r4, #12]
 800d788:	f043 0308 	orr.w	r3, r3, #8
 800d78c:	81a3      	strh	r3, [r4, #12]
 800d78e:	6923      	ldr	r3, [r4, #16]
 800d790:	b94b      	cbnz	r3, 800d7a6 <__swsetup_r+0x9a>
 800d792:	89a3      	ldrh	r3, [r4, #12]
 800d794:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d79c:	d003      	beq.n	800d7a6 <__swsetup_r+0x9a>
 800d79e:	4621      	mov	r1, r4
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	f000 fa07 	bl	800dbb4 <__smakebuf_r>
 800d7a6:	89a0      	ldrh	r0, [r4, #12]
 800d7a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7ac:	f010 0301 	ands.w	r3, r0, #1
 800d7b0:	d00a      	beq.n	800d7c8 <__swsetup_r+0xbc>
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	60a3      	str	r3, [r4, #8]
 800d7b6:	6963      	ldr	r3, [r4, #20]
 800d7b8:	425b      	negs	r3, r3
 800d7ba:	61a3      	str	r3, [r4, #24]
 800d7bc:	6923      	ldr	r3, [r4, #16]
 800d7be:	b943      	cbnz	r3, 800d7d2 <__swsetup_r+0xc6>
 800d7c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7c4:	d1ba      	bne.n	800d73c <__swsetup_r+0x30>
 800d7c6:	bd70      	pop	{r4, r5, r6, pc}
 800d7c8:	0781      	lsls	r1, r0, #30
 800d7ca:	bf58      	it	pl
 800d7cc:	6963      	ldrpl	r3, [r4, #20]
 800d7ce:	60a3      	str	r3, [r4, #8]
 800d7d0:	e7f4      	b.n	800d7bc <__swsetup_r+0xb0>
 800d7d2:	2000      	movs	r0, #0
 800d7d4:	e7f7      	b.n	800d7c6 <__swsetup_r+0xba>
 800d7d6:	bf00      	nop
 800d7d8:	20000028 	.word	0x20000028
 800d7dc:	080102d0 	.word	0x080102d0
 800d7e0:	080102f0 	.word	0x080102f0
 800d7e4:	080102b0 	.word	0x080102b0

0800d7e8 <abort>:
 800d7e8:	b508      	push	{r3, lr}
 800d7ea:	2006      	movs	r0, #6
 800d7ec:	f000 fa96 	bl	800dd1c <raise>
 800d7f0:	2001      	movs	r0, #1
 800d7f2:	f7f4 ff5f 	bl	80026b4 <_exit>
	...

0800d7f8 <__sflush_r>:
 800d7f8:	898a      	ldrh	r2, [r1, #12]
 800d7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7fe:	4605      	mov	r5, r0
 800d800:	0710      	lsls	r0, r2, #28
 800d802:	460c      	mov	r4, r1
 800d804:	d458      	bmi.n	800d8b8 <__sflush_r+0xc0>
 800d806:	684b      	ldr	r3, [r1, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	dc05      	bgt.n	800d818 <__sflush_r+0x20>
 800d80c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d80e:	2b00      	cmp	r3, #0
 800d810:	dc02      	bgt.n	800d818 <__sflush_r+0x20>
 800d812:	2000      	movs	r0, #0
 800d814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d81a:	2e00      	cmp	r6, #0
 800d81c:	d0f9      	beq.n	800d812 <__sflush_r+0x1a>
 800d81e:	2300      	movs	r3, #0
 800d820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d824:	682f      	ldr	r7, [r5, #0]
 800d826:	602b      	str	r3, [r5, #0]
 800d828:	d032      	beq.n	800d890 <__sflush_r+0x98>
 800d82a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d82c:	89a3      	ldrh	r3, [r4, #12]
 800d82e:	075a      	lsls	r2, r3, #29
 800d830:	d505      	bpl.n	800d83e <__sflush_r+0x46>
 800d832:	6863      	ldr	r3, [r4, #4]
 800d834:	1ac0      	subs	r0, r0, r3
 800d836:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d838:	b10b      	cbz	r3, 800d83e <__sflush_r+0x46>
 800d83a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d83c:	1ac0      	subs	r0, r0, r3
 800d83e:	2300      	movs	r3, #0
 800d840:	4602      	mov	r2, r0
 800d842:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d844:	6a21      	ldr	r1, [r4, #32]
 800d846:	4628      	mov	r0, r5
 800d848:	47b0      	blx	r6
 800d84a:	1c43      	adds	r3, r0, #1
 800d84c:	89a3      	ldrh	r3, [r4, #12]
 800d84e:	d106      	bne.n	800d85e <__sflush_r+0x66>
 800d850:	6829      	ldr	r1, [r5, #0]
 800d852:	291d      	cmp	r1, #29
 800d854:	d82c      	bhi.n	800d8b0 <__sflush_r+0xb8>
 800d856:	4a2a      	ldr	r2, [pc, #168]	; (800d900 <__sflush_r+0x108>)
 800d858:	40ca      	lsrs	r2, r1
 800d85a:	07d6      	lsls	r6, r2, #31
 800d85c:	d528      	bpl.n	800d8b0 <__sflush_r+0xb8>
 800d85e:	2200      	movs	r2, #0
 800d860:	6062      	str	r2, [r4, #4]
 800d862:	04d9      	lsls	r1, r3, #19
 800d864:	6922      	ldr	r2, [r4, #16]
 800d866:	6022      	str	r2, [r4, #0]
 800d868:	d504      	bpl.n	800d874 <__sflush_r+0x7c>
 800d86a:	1c42      	adds	r2, r0, #1
 800d86c:	d101      	bne.n	800d872 <__sflush_r+0x7a>
 800d86e:	682b      	ldr	r3, [r5, #0]
 800d870:	b903      	cbnz	r3, 800d874 <__sflush_r+0x7c>
 800d872:	6560      	str	r0, [r4, #84]	; 0x54
 800d874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d876:	602f      	str	r7, [r5, #0]
 800d878:	2900      	cmp	r1, #0
 800d87a:	d0ca      	beq.n	800d812 <__sflush_r+0x1a>
 800d87c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d880:	4299      	cmp	r1, r3
 800d882:	d002      	beq.n	800d88a <__sflush_r+0x92>
 800d884:	4628      	mov	r0, r5
 800d886:	f7ff fb55 	bl	800cf34 <_free_r>
 800d88a:	2000      	movs	r0, #0
 800d88c:	6360      	str	r0, [r4, #52]	; 0x34
 800d88e:	e7c1      	b.n	800d814 <__sflush_r+0x1c>
 800d890:	6a21      	ldr	r1, [r4, #32]
 800d892:	2301      	movs	r3, #1
 800d894:	4628      	mov	r0, r5
 800d896:	47b0      	blx	r6
 800d898:	1c41      	adds	r1, r0, #1
 800d89a:	d1c7      	bne.n	800d82c <__sflush_r+0x34>
 800d89c:	682b      	ldr	r3, [r5, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d0c4      	beq.n	800d82c <__sflush_r+0x34>
 800d8a2:	2b1d      	cmp	r3, #29
 800d8a4:	d001      	beq.n	800d8aa <__sflush_r+0xb2>
 800d8a6:	2b16      	cmp	r3, #22
 800d8a8:	d101      	bne.n	800d8ae <__sflush_r+0xb6>
 800d8aa:	602f      	str	r7, [r5, #0]
 800d8ac:	e7b1      	b.n	800d812 <__sflush_r+0x1a>
 800d8ae:	89a3      	ldrh	r3, [r4, #12]
 800d8b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8b4:	81a3      	strh	r3, [r4, #12]
 800d8b6:	e7ad      	b.n	800d814 <__sflush_r+0x1c>
 800d8b8:	690f      	ldr	r7, [r1, #16]
 800d8ba:	2f00      	cmp	r7, #0
 800d8bc:	d0a9      	beq.n	800d812 <__sflush_r+0x1a>
 800d8be:	0793      	lsls	r3, r2, #30
 800d8c0:	680e      	ldr	r6, [r1, #0]
 800d8c2:	bf08      	it	eq
 800d8c4:	694b      	ldreq	r3, [r1, #20]
 800d8c6:	600f      	str	r7, [r1, #0]
 800d8c8:	bf18      	it	ne
 800d8ca:	2300      	movne	r3, #0
 800d8cc:	eba6 0807 	sub.w	r8, r6, r7
 800d8d0:	608b      	str	r3, [r1, #8]
 800d8d2:	f1b8 0f00 	cmp.w	r8, #0
 800d8d6:	dd9c      	ble.n	800d812 <__sflush_r+0x1a>
 800d8d8:	6a21      	ldr	r1, [r4, #32]
 800d8da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d8dc:	4643      	mov	r3, r8
 800d8de:	463a      	mov	r2, r7
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	47b0      	blx	r6
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	dc06      	bgt.n	800d8f6 <__sflush_r+0xfe>
 800d8e8:	89a3      	ldrh	r3, [r4, #12]
 800d8ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8ee:	81a3      	strh	r3, [r4, #12]
 800d8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f4:	e78e      	b.n	800d814 <__sflush_r+0x1c>
 800d8f6:	4407      	add	r7, r0
 800d8f8:	eba8 0800 	sub.w	r8, r8, r0
 800d8fc:	e7e9      	b.n	800d8d2 <__sflush_r+0xda>
 800d8fe:	bf00      	nop
 800d900:	20400001 	.word	0x20400001

0800d904 <_fflush_r>:
 800d904:	b538      	push	{r3, r4, r5, lr}
 800d906:	690b      	ldr	r3, [r1, #16]
 800d908:	4605      	mov	r5, r0
 800d90a:	460c      	mov	r4, r1
 800d90c:	b913      	cbnz	r3, 800d914 <_fflush_r+0x10>
 800d90e:	2500      	movs	r5, #0
 800d910:	4628      	mov	r0, r5
 800d912:	bd38      	pop	{r3, r4, r5, pc}
 800d914:	b118      	cbz	r0, 800d91e <_fflush_r+0x1a>
 800d916:	6983      	ldr	r3, [r0, #24]
 800d918:	b90b      	cbnz	r3, 800d91e <_fflush_r+0x1a>
 800d91a:	f000 f887 	bl	800da2c <__sinit>
 800d91e:	4b14      	ldr	r3, [pc, #80]	; (800d970 <_fflush_r+0x6c>)
 800d920:	429c      	cmp	r4, r3
 800d922:	d11b      	bne.n	800d95c <_fflush_r+0x58>
 800d924:	686c      	ldr	r4, [r5, #4]
 800d926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d0ef      	beq.n	800d90e <_fflush_r+0xa>
 800d92e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d930:	07d0      	lsls	r0, r2, #31
 800d932:	d404      	bmi.n	800d93e <_fflush_r+0x3a>
 800d934:	0599      	lsls	r1, r3, #22
 800d936:	d402      	bmi.n	800d93e <_fflush_r+0x3a>
 800d938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d93a:	f000 f915 	bl	800db68 <__retarget_lock_acquire_recursive>
 800d93e:	4628      	mov	r0, r5
 800d940:	4621      	mov	r1, r4
 800d942:	f7ff ff59 	bl	800d7f8 <__sflush_r>
 800d946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d948:	07da      	lsls	r2, r3, #31
 800d94a:	4605      	mov	r5, r0
 800d94c:	d4e0      	bmi.n	800d910 <_fflush_r+0xc>
 800d94e:	89a3      	ldrh	r3, [r4, #12]
 800d950:	059b      	lsls	r3, r3, #22
 800d952:	d4dd      	bmi.n	800d910 <_fflush_r+0xc>
 800d954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d956:	f000 f908 	bl	800db6a <__retarget_lock_release_recursive>
 800d95a:	e7d9      	b.n	800d910 <_fflush_r+0xc>
 800d95c:	4b05      	ldr	r3, [pc, #20]	; (800d974 <_fflush_r+0x70>)
 800d95e:	429c      	cmp	r4, r3
 800d960:	d101      	bne.n	800d966 <_fflush_r+0x62>
 800d962:	68ac      	ldr	r4, [r5, #8]
 800d964:	e7df      	b.n	800d926 <_fflush_r+0x22>
 800d966:	4b04      	ldr	r3, [pc, #16]	; (800d978 <_fflush_r+0x74>)
 800d968:	429c      	cmp	r4, r3
 800d96a:	bf08      	it	eq
 800d96c:	68ec      	ldreq	r4, [r5, #12]
 800d96e:	e7da      	b.n	800d926 <_fflush_r+0x22>
 800d970:	080102d0 	.word	0x080102d0
 800d974:	080102f0 	.word	0x080102f0
 800d978:	080102b0 	.word	0x080102b0

0800d97c <std>:
 800d97c:	2300      	movs	r3, #0
 800d97e:	b510      	push	{r4, lr}
 800d980:	4604      	mov	r4, r0
 800d982:	e9c0 3300 	strd	r3, r3, [r0]
 800d986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d98a:	6083      	str	r3, [r0, #8]
 800d98c:	8181      	strh	r1, [r0, #12]
 800d98e:	6643      	str	r3, [r0, #100]	; 0x64
 800d990:	81c2      	strh	r2, [r0, #14]
 800d992:	6183      	str	r3, [r0, #24]
 800d994:	4619      	mov	r1, r3
 800d996:	2208      	movs	r2, #8
 800d998:	305c      	adds	r0, #92	; 0x5c
 800d99a:	f7fc f84b 	bl	8009a34 <memset>
 800d99e:	4b05      	ldr	r3, [pc, #20]	; (800d9b4 <std+0x38>)
 800d9a0:	6263      	str	r3, [r4, #36]	; 0x24
 800d9a2:	4b05      	ldr	r3, [pc, #20]	; (800d9b8 <std+0x3c>)
 800d9a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d9a6:	4b05      	ldr	r3, [pc, #20]	; (800d9bc <std+0x40>)
 800d9a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d9aa:	4b05      	ldr	r3, [pc, #20]	; (800d9c0 <std+0x44>)
 800d9ac:	6224      	str	r4, [r4, #32]
 800d9ae:	6323      	str	r3, [r4, #48]	; 0x30
 800d9b0:	bd10      	pop	{r4, pc}
 800d9b2:	bf00      	nop
 800d9b4:	0800dd55 	.word	0x0800dd55
 800d9b8:	0800dd77 	.word	0x0800dd77
 800d9bc:	0800ddaf 	.word	0x0800ddaf
 800d9c0:	0800ddd3 	.word	0x0800ddd3

0800d9c4 <_cleanup_r>:
 800d9c4:	4901      	ldr	r1, [pc, #4]	; (800d9cc <_cleanup_r+0x8>)
 800d9c6:	f000 b8af 	b.w	800db28 <_fwalk_reent>
 800d9ca:	bf00      	nop
 800d9cc:	0800d905 	.word	0x0800d905

0800d9d0 <__sfmoreglue>:
 800d9d0:	b570      	push	{r4, r5, r6, lr}
 800d9d2:	1e4a      	subs	r2, r1, #1
 800d9d4:	2568      	movs	r5, #104	; 0x68
 800d9d6:	4355      	muls	r5, r2
 800d9d8:	460e      	mov	r6, r1
 800d9da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d9de:	f7ff faf9 	bl	800cfd4 <_malloc_r>
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	b140      	cbz	r0, 800d9f8 <__sfmoreglue+0x28>
 800d9e6:	2100      	movs	r1, #0
 800d9e8:	e9c0 1600 	strd	r1, r6, [r0]
 800d9ec:	300c      	adds	r0, #12
 800d9ee:	60a0      	str	r0, [r4, #8]
 800d9f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d9f4:	f7fc f81e 	bl	8009a34 <memset>
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	bd70      	pop	{r4, r5, r6, pc}

0800d9fc <__sfp_lock_acquire>:
 800d9fc:	4801      	ldr	r0, [pc, #4]	; (800da04 <__sfp_lock_acquire+0x8>)
 800d9fe:	f000 b8b3 	b.w	800db68 <__retarget_lock_acquire_recursive>
 800da02:	bf00      	nop
 800da04:	200095dc 	.word	0x200095dc

0800da08 <__sfp_lock_release>:
 800da08:	4801      	ldr	r0, [pc, #4]	; (800da10 <__sfp_lock_release+0x8>)
 800da0a:	f000 b8ae 	b.w	800db6a <__retarget_lock_release_recursive>
 800da0e:	bf00      	nop
 800da10:	200095dc 	.word	0x200095dc

0800da14 <__sinit_lock_acquire>:
 800da14:	4801      	ldr	r0, [pc, #4]	; (800da1c <__sinit_lock_acquire+0x8>)
 800da16:	f000 b8a7 	b.w	800db68 <__retarget_lock_acquire_recursive>
 800da1a:	bf00      	nop
 800da1c:	200095d7 	.word	0x200095d7

0800da20 <__sinit_lock_release>:
 800da20:	4801      	ldr	r0, [pc, #4]	; (800da28 <__sinit_lock_release+0x8>)
 800da22:	f000 b8a2 	b.w	800db6a <__retarget_lock_release_recursive>
 800da26:	bf00      	nop
 800da28:	200095d7 	.word	0x200095d7

0800da2c <__sinit>:
 800da2c:	b510      	push	{r4, lr}
 800da2e:	4604      	mov	r4, r0
 800da30:	f7ff fff0 	bl	800da14 <__sinit_lock_acquire>
 800da34:	69a3      	ldr	r3, [r4, #24]
 800da36:	b11b      	cbz	r3, 800da40 <__sinit+0x14>
 800da38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da3c:	f7ff bff0 	b.w	800da20 <__sinit_lock_release>
 800da40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800da44:	6523      	str	r3, [r4, #80]	; 0x50
 800da46:	4b13      	ldr	r3, [pc, #76]	; (800da94 <__sinit+0x68>)
 800da48:	4a13      	ldr	r2, [pc, #76]	; (800da98 <__sinit+0x6c>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	62a2      	str	r2, [r4, #40]	; 0x28
 800da4e:	42a3      	cmp	r3, r4
 800da50:	bf04      	itt	eq
 800da52:	2301      	moveq	r3, #1
 800da54:	61a3      	streq	r3, [r4, #24]
 800da56:	4620      	mov	r0, r4
 800da58:	f000 f820 	bl	800da9c <__sfp>
 800da5c:	6060      	str	r0, [r4, #4]
 800da5e:	4620      	mov	r0, r4
 800da60:	f000 f81c 	bl	800da9c <__sfp>
 800da64:	60a0      	str	r0, [r4, #8]
 800da66:	4620      	mov	r0, r4
 800da68:	f000 f818 	bl	800da9c <__sfp>
 800da6c:	2200      	movs	r2, #0
 800da6e:	60e0      	str	r0, [r4, #12]
 800da70:	2104      	movs	r1, #4
 800da72:	6860      	ldr	r0, [r4, #4]
 800da74:	f7ff ff82 	bl	800d97c <std>
 800da78:	68a0      	ldr	r0, [r4, #8]
 800da7a:	2201      	movs	r2, #1
 800da7c:	2109      	movs	r1, #9
 800da7e:	f7ff ff7d 	bl	800d97c <std>
 800da82:	68e0      	ldr	r0, [r4, #12]
 800da84:	2202      	movs	r2, #2
 800da86:	2112      	movs	r1, #18
 800da88:	f7ff ff78 	bl	800d97c <std>
 800da8c:	2301      	movs	r3, #1
 800da8e:	61a3      	str	r3, [r4, #24]
 800da90:	e7d2      	b.n	800da38 <__sinit+0xc>
 800da92:	bf00      	nop
 800da94:	0800fe04 	.word	0x0800fe04
 800da98:	0800d9c5 	.word	0x0800d9c5

0800da9c <__sfp>:
 800da9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da9e:	4607      	mov	r7, r0
 800daa0:	f7ff ffac 	bl	800d9fc <__sfp_lock_acquire>
 800daa4:	4b1e      	ldr	r3, [pc, #120]	; (800db20 <__sfp+0x84>)
 800daa6:	681e      	ldr	r6, [r3, #0]
 800daa8:	69b3      	ldr	r3, [r6, #24]
 800daaa:	b913      	cbnz	r3, 800dab2 <__sfp+0x16>
 800daac:	4630      	mov	r0, r6
 800daae:	f7ff ffbd 	bl	800da2c <__sinit>
 800dab2:	3648      	adds	r6, #72	; 0x48
 800dab4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dab8:	3b01      	subs	r3, #1
 800daba:	d503      	bpl.n	800dac4 <__sfp+0x28>
 800dabc:	6833      	ldr	r3, [r6, #0]
 800dabe:	b30b      	cbz	r3, 800db04 <__sfp+0x68>
 800dac0:	6836      	ldr	r6, [r6, #0]
 800dac2:	e7f7      	b.n	800dab4 <__sfp+0x18>
 800dac4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dac8:	b9d5      	cbnz	r5, 800db00 <__sfp+0x64>
 800daca:	4b16      	ldr	r3, [pc, #88]	; (800db24 <__sfp+0x88>)
 800dacc:	60e3      	str	r3, [r4, #12]
 800dace:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dad2:	6665      	str	r5, [r4, #100]	; 0x64
 800dad4:	f000 f847 	bl	800db66 <__retarget_lock_init_recursive>
 800dad8:	f7ff ff96 	bl	800da08 <__sfp_lock_release>
 800dadc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dae0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dae4:	6025      	str	r5, [r4, #0]
 800dae6:	61a5      	str	r5, [r4, #24]
 800dae8:	2208      	movs	r2, #8
 800daea:	4629      	mov	r1, r5
 800daec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800daf0:	f7fb ffa0 	bl	8009a34 <memset>
 800daf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800daf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dafc:	4620      	mov	r0, r4
 800dafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db00:	3468      	adds	r4, #104	; 0x68
 800db02:	e7d9      	b.n	800dab8 <__sfp+0x1c>
 800db04:	2104      	movs	r1, #4
 800db06:	4638      	mov	r0, r7
 800db08:	f7ff ff62 	bl	800d9d0 <__sfmoreglue>
 800db0c:	4604      	mov	r4, r0
 800db0e:	6030      	str	r0, [r6, #0]
 800db10:	2800      	cmp	r0, #0
 800db12:	d1d5      	bne.n	800dac0 <__sfp+0x24>
 800db14:	f7ff ff78 	bl	800da08 <__sfp_lock_release>
 800db18:	230c      	movs	r3, #12
 800db1a:	603b      	str	r3, [r7, #0]
 800db1c:	e7ee      	b.n	800dafc <__sfp+0x60>
 800db1e:	bf00      	nop
 800db20:	0800fe04 	.word	0x0800fe04
 800db24:	ffff0001 	.word	0xffff0001

0800db28 <_fwalk_reent>:
 800db28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db2c:	4606      	mov	r6, r0
 800db2e:	4688      	mov	r8, r1
 800db30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800db34:	2700      	movs	r7, #0
 800db36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db3a:	f1b9 0901 	subs.w	r9, r9, #1
 800db3e:	d505      	bpl.n	800db4c <_fwalk_reent+0x24>
 800db40:	6824      	ldr	r4, [r4, #0]
 800db42:	2c00      	cmp	r4, #0
 800db44:	d1f7      	bne.n	800db36 <_fwalk_reent+0xe>
 800db46:	4638      	mov	r0, r7
 800db48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db4c:	89ab      	ldrh	r3, [r5, #12]
 800db4e:	2b01      	cmp	r3, #1
 800db50:	d907      	bls.n	800db62 <_fwalk_reent+0x3a>
 800db52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db56:	3301      	adds	r3, #1
 800db58:	d003      	beq.n	800db62 <_fwalk_reent+0x3a>
 800db5a:	4629      	mov	r1, r5
 800db5c:	4630      	mov	r0, r6
 800db5e:	47c0      	blx	r8
 800db60:	4307      	orrs	r7, r0
 800db62:	3568      	adds	r5, #104	; 0x68
 800db64:	e7e9      	b.n	800db3a <_fwalk_reent+0x12>

0800db66 <__retarget_lock_init_recursive>:
 800db66:	4770      	bx	lr

0800db68 <__retarget_lock_acquire_recursive>:
 800db68:	4770      	bx	lr

0800db6a <__retarget_lock_release_recursive>:
 800db6a:	4770      	bx	lr

0800db6c <__swhatbuf_r>:
 800db6c:	b570      	push	{r4, r5, r6, lr}
 800db6e:	460e      	mov	r6, r1
 800db70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db74:	2900      	cmp	r1, #0
 800db76:	b096      	sub	sp, #88	; 0x58
 800db78:	4614      	mov	r4, r2
 800db7a:	461d      	mov	r5, r3
 800db7c:	da07      	bge.n	800db8e <__swhatbuf_r+0x22>
 800db7e:	2300      	movs	r3, #0
 800db80:	602b      	str	r3, [r5, #0]
 800db82:	89b3      	ldrh	r3, [r6, #12]
 800db84:	061a      	lsls	r2, r3, #24
 800db86:	d410      	bmi.n	800dbaa <__swhatbuf_r+0x3e>
 800db88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db8c:	e00e      	b.n	800dbac <__swhatbuf_r+0x40>
 800db8e:	466a      	mov	r2, sp
 800db90:	f000 f946 	bl	800de20 <_fstat_r>
 800db94:	2800      	cmp	r0, #0
 800db96:	dbf2      	blt.n	800db7e <__swhatbuf_r+0x12>
 800db98:	9a01      	ldr	r2, [sp, #4]
 800db9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800db9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dba2:	425a      	negs	r2, r3
 800dba4:	415a      	adcs	r2, r3
 800dba6:	602a      	str	r2, [r5, #0]
 800dba8:	e7ee      	b.n	800db88 <__swhatbuf_r+0x1c>
 800dbaa:	2340      	movs	r3, #64	; 0x40
 800dbac:	2000      	movs	r0, #0
 800dbae:	6023      	str	r3, [r4, #0]
 800dbb0:	b016      	add	sp, #88	; 0x58
 800dbb2:	bd70      	pop	{r4, r5, r6, pc}

0800dbb4 <__smakebuf_r>:
 800dbb4:	898b      	ldrh	r3, [r1, #12]
 800dbb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dbb8:	079d      	lsls	r5, r3, #30
 800dbba:	4606      	mov	r6, r0
 800dbbc:	460c      	mov	r4, r1
 800dbbe:	d507      	bpl.n	800dbd0 <__smakebuf_r+0x1c>
 800dbc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dbc4:	6023      	str	r3, [r4, #0]
 800dbc6:	6123      	str	r3, [r4, #16]
 800dbc8:	2301      	movs	r3, #1
 800dbca:	6163      	str	r3, [r4, #20]
 800dbcc:	b002      	add	sp, #8
 800dbce:	bd70      	pop	{r4, r5, r6, pc}
 800dbd0:	ab01      	add	r3, sp, #4
 800dbd2:	466a      	mov	r2, sp
 800dbd4:	f7ff ffca 	bl	800db6c <__swhatbuf_r>
 800dbd8:	9900      	ldr	r1, [sp, #0]
 800dbda:	4605      	mov	r5, r0
 800dbdc:	4630      	mov	r0, r6
 800dbde:	f7ff f9f9 	bl	800cfd4 <_malloc_r>
 800dbe2:	b948      	cbnz	r0, 800dbf8 <__smakebuf_r+0x44>
 800dbe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbe8:	059a      	lsls	r2, r3, #22
 800dbea:	d4ef      	bmi.n	800dbcc <__smakebuf_r+0x18>
 800dbec:	f023 0303 	bic.w	r3, r3, #3
 800dbf0:	f043 0302 	orr.w	r3, r3, #2
 800dbf4:	81a3      	strh	r3, [r4, #12]
 800dbf6:	e7e3      	b.n	800dbc0 <__smakebuf_r+0xc>
 800dbf8:	4b0d      	ldr	r3, [pc, #52]	; (800dc30 <__smakebuf_r+0x7c>)
 800dbfa:	62b3      	str	r3, [r6, #40]	; 0x28
 800dbfc:	89a3      	ldrh	r3, [r4, #12]
 800dbfe:	6020      	str	r0, [r4, #0]
 800dc00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc04:	81a3      	strh	r3, [r4, #12]
 800dc06:	9b00      	ldr	r3, [sp, #0]
 800dc08:	6163      	str	r3, [r4, #20]
 800dc0a:	9b01      	ldr	r3, [sp, #4]
 800dc0c:	6120      	str	r0, [r4, #16]
 800dc0e:	b15b      	cbz	r3, 800dc28 <__smakebuf_r+0x74>
 800dc10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc14:	4630      	mov	r0, r6
 800dc16:	f000 f915 	bl	800de44 <_isatty_r>
 800dc1a:	b128      	cbz	r0, 800dc28 <__smakebuf_r+0x74>
 800dc1c:	89a3      	ldrh	r3, [r4, #12]
 800dc1e:	f023 0303 	bic.w	r3, r3, #3
 800dc22:	f043 0301 	orr.w	r3, r3, #1
 800dc26:	81a3      	strh	r3, [r4, #12]
 800dc28:	89a0      	ldrh	r0, [r4, #12]
 800dc2a:	4305      	orrs	r5, r0
 800dc2c:	81a5      	strh	r5, [r4, #12]
 800dc2e:	e7cd      	b.n	800dbcc <__smakebuf_r+0x18>
 800dc30:	0800d9c5 	.word	0x0800d9c5

0800dc34 <memmove>:
 800dc34:	4288      	cmp	r0, r1
 800dc36:	b510      	push	{r4, lr}
 800dc38:	eb01 0402 	add.w	r4, r1, r2
 800dc3c:	d902      	bls.n	800dc44 <memmove+0x10>
 800dc3e:	4284      	cmp	r4, r0
 800dc40:	4623      	mov	r3, r4
 800dc42:	d807      	bhi.n	800dc54 <memmove+0x20>
 800dc44:	1e43      	subs	r3, r0, #1
 800dc46:	42a1      	cmp	r1, r4
 800dc48:	d008      	beq.n	800dc5c <memmove+0x28>
 800dc4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc52:	e7f8      	b.n	800dc46 <memmove+0x12>
 800dc54:	4402      	add	r2, r0
 800dc56:	4601      	mov	r1, r0
 800dc58:	428a      	cmp	r2, r1
 800dc5a:	d100      	bne.n	800dc5e <memmove+0x2a>
 800dc5c:	bd10      	pop	{r4, pc}
 800dc5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc66:	e7f7      	b.n	800dc58 <memmove+0x24>

0800dc68 <__malloc_lock>:
 800dc68:	4801      	ldr	r0, [pc, #4]	; (800dc70 <__malloc_lock+0x8>)
 800dc6a:	f7ff bf7d 	b.w	800db68 <__retarget_lock_acquire_recursive>
 800dc6e:	bf00      	nop
 800dc70:	200095d8 	.word	0x200095d8

0800dc74 <__malloc_unlock>:
 800dc74:	4801      	ldr	r0, [pc, #4]	; (800dc7c <__malloc_unlock+0x8>)
 800dc76:	f7ff bf78 	b.w	800db6a <__retarget_lock_release_recursive>
 800dc7a:	bf00      	nop
 800dc7c:	200095d8 	.word	0x200095d8

0800dc80 <_realloc_r>:
 800dc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc82:	4607      	mov	r7, r0
 800dc84:	4614      	mov	r4, r2
 800dc86:	460e      	mov	r6, r1
 800dc88:	b921      	cbnz	r1, 800dc94 <_realloc_r+0x14>
 800dc8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dc8e:	4611      	mov	r1, r2
 800dc90:	f7ff b9a0 	b.w	800cfd4 <_malloc_r>
 800dc94:	b922      	cbnz	r2, 800dca0 <_realloc_r+0x20>
 800dc96:	f7ff f94d 	bl	800cf34 <_free_r>
 800dc9a:	4625      	mov	r5, r4
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dca0:	f000 f8f2 	bl	800de88 <_malloc_usable_size_r>
 800dca4:	42a0      	cmp	r0, r4
 800dca6:	d20f      	bcs.n	800dcc8 <_realloc_r+0x48>
 800dca8:	4621      	mov	r1, r4
 800dcaa:	4638      	mov	r0, r7
 800dcac:	f7ff f992 	bl	800cfd4 <_malloc_r>
 800dcb0:	4605      	mov	r5, r0
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	d0f2      	beq.n	800dc9c <_realloc_r+0x1c>
 800dcb6:	4631      	mov	r1, r6
 800dcb8:	4622      	mov	r2, r4
 800dcba:	f7fb fead 	bl	8009a18 <memcpy>
 800dcbe:	4631      	mov	r1, r6
 800dcc0:	4638      	mov	r0, r7
 800dcc2:	f7ff f937 	bl	800cf34 <_free_r>
 800dcc6:	e7e9      	b.n	800dc9c <_realloc_r+0x1c>
 800dcc8:	4635      	mov	r5, r6
 800dcca:	e7e7      	b.n	800dc9c <_realloc_r+0x1c>

0800dccc <_raise_r>:
 800dccc:	291f      	cmp	r1, #31
 800dcce:	b538      	push	{r3, r4, r5, lr}
 800dcd0:	4604      	mov	r4, r0
 800dcd2:	460d      	mov	r5, r1
 800dcd4:	d904      	bls.n	800dce0 <_raise_r+0x14>
 800dcd6:	2316      	movs	r3, #22
 800dcd8:	6003      	str	r3, [r0, #0]
 800dcda:	f04f 30ff 	mov.w	r0, #4294967295
 800dcde:	bd38      	pop	{r3, r4, r5, pc}
 800dce0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dce2:	b112      	cbz	r2, 800dcea <_raise_r+0x1e>
 800dce4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dce8:	b94b      	cbnz	r3, 800dcfe <_raise_r+0x32>
 800dcea:	4620      	mov	r0, r4
 800dcec:	f000 f830 	bl	800dd50 <_getpid_r>
 800dcf0:	462a      	mov	r2, r5
 800dcf2:	4601      	mov	r1, r0
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcfa:	f000 b817 	b.w	800dd2c <_kill_r>
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d00a      	beq.n	800dd18 <_raise_r+0x4c>
 800dd02:	1c59      	adds	r1, r3, #1
 800dd04:	d103      	bne.n	800dd0e <_raise_r+0x42>
 800dd06:	2316      	movs	r3, #22
 800dd08:	6003      	str	r3, [r0, #0]
 800dd0a:	2001      	movs	r0, #1
 800dd0c:	e7e7      	b.n	800dcde <_raise_r+0x12>
 800dd0e:	2400      	movs	r4, #0
 800dd10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dd14:	4628      	mov	r0, r5
 800dd16:	4798      	blx	r3
 800dd18:	2000      	movs	r0, #0
 800dd1a:	e7e0      	b.n	800dcde <_raise_r+0x12>

0800dd1c <raise>:
 800dd1c:	4b02      	ldr	r3, [pc, #8]	; (800dd28 <raise+0xc>)
 800dd1e:	4601      	mov	r1, r0
 800dd20:	6818      	ldr	r0, [r3, #0]
 800dd22:	f7ff bfd3 	b.w	800dccc <_raise_r>
 800dd26:	bf00      	nop
 800dd28:	20000028 	.word	0x20000028

0800dd2c <_kill_r>:
 800dd2c:	b538      	push	{r3, r4, r5, lr}
 800dd2e:	4d07      	ldr	r5, [pc, #28]	; (800dd4c <_kill_r+0x20>)
 800dd30:	2300      	movs	r3, #0
 800dd32:	4604      	mov	r4, r0
 800dd34:	4608      	mov	r0, r1
 800dd36:	4611      	mov	r1, r2
 800dd38:	602b      	str	r3, [r5, #0]
 800dd3a:	f7f4 fcab 	bl	8002694 <_kill>
 800dd3e:	1c43      	adds	r3, r0, #1
 800dd40:	d102      	bne.n	800dd48 <_kill_r+0x1c>
 800dd42:	682b      	ldr	r3, [r5, #0]
 800dd44:	b103      	cbz	r3, 800dd48 <_kill_r+0x1c>
 800dd46:	6023      	str	r3, [r4, #0]
 800dd48:	bd38      	pop	{r3, r4, r5, pc}
 800dd4a:	bf00      	nop
 800dd4c:	200095e0 	.word	0x200095e0

0800dd50 <_getpid_r>:
 800dd50:	f7f4 bc98 	b.w	8002684 <_getpid>

0800dd54 <__sread>:
 800dd54:	b510      	push	{r4, lr}
 800dd56:	460c      	mov	r4, r1
 800dd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd5c:	f000 f89c 	bl	800de98 <_read_r>
 800dd60:	2800      	cmp	r0, #0
 800dd62:	bfab      	itete	ge
 800dd64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dd66:	89a3      	ldrhlt	r3, [r4, #12]
 800dd68:	181b      	addge	r3, r3, r0
 800dd6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dd6e:	bfac      	ite	ge
 800dd70:	6563      	strge	r3, [r4, #84]	; 0x54
 800dd72:	81a3      	strhlt	r3, [r4, #12]
 800dd74:	bd10      	pop	{r4, pc}

0800dd76 <__swrite>:
 800dd76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd7a:	461f      	mov	r7, r3
 800dd7c:	898b      	ldrh	r3, [r1, #12]
 800dd7e:	05db      	lsls	r3, r3, #23
 800dd80:	4605      	mov	r5, r0
 800dd82:	460c      	mov	r4, r1
 800dd84:	4616      	mov	r6, r2
 800dd86:	d505      	bpl.n	800dd94 <__swrite+0x1e>
 800dd88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd8c:	2302      	movs	r3, #2
 800dd8e:	2200      	movs	r2, #0
 800dd90:	f000 f868 	bl	800de64 <_lseek_r>
 800dd94:	89a3      	ldrh	r3, [r4, #12]
 800dd96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd9e:	81a3      	strh	r3, [r4, #12]
 800dda0:	4632      	mov	r2, r6
 800dda2:	463b      	mov	r3, r7
 800dda4:	4628      	mov	r0, r5
 800dda6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddaa:	f000 b817 	b.w	800dddc <_write_r>

0800ddae <__sseek>:
 800ddae:	b510      	push	{r4, lr}
 800ddb0:	460c      	mov	r4, r1
 800ddb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddb6:	f000 f855 	bl	800de64 <_lseek_r>
 800ddba:	1c43      	adds	r3, r0, #1
 800ddbc:	89a3      	ldrh	r3, [r4, #12]
 800ddbe:	bf15      	itete	ne
 800ddc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ddc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ddc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ddca:	81a3      	strheq	r3, [r4, #12]
 800ddcc:	bf18      	it	ne
 800ddce:	81a3      	strhne	r3, [r4, #12]
 800ddd0:	bd10      	pop	{r4, pc}

0800ddd2 <__sclose>:
 800ddd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddd6:	f000 b813 	b.w	800de00 <_close_r>
	...

0800dddc <_write_r>:
 800dddc:	b538      	push	{r3, r4, r5, lr}
 800ddde:	4d07      	ldr	r5, [pc, #28]	; (800ddfc <_write_r+0x20>)
 800dde0:	4604      	mov	r4, r0
 800dde2:	4608      	mov	r0, r1
 800dde4:	4611      	mov	r1, r2
 800dde6:	2200      	movs	r2, #0
 800dde8:	602a      	str	r2, [r5, #0]
 800ddea:	461a      	mov	r2, r3
 800ddec:	f7f4 fc89 	bl	8002702 <_write>
 800ddf0:	1c43      	adds	r3, r0, #1
 800ddf2:	d102      	bne.n	800ddfa <_write_r+0x1e>
 800ddf4:	682b      	ldr	r3, [r5, #0]
 800ddf6:	b103      	cbz	r3, 800ddfa <_write_r+0x1e>
 800ddf8:	6023      	str	r3, [r4, #0]
 800ddfa:	bd38      	pop	{r3, r4, r5, pc}
 800ddfc:	200095e0 	.word	0x200095e0

0800de00 <_close_r>:
 800de00:	b538      	push	{r3, r4, r5, lr}
 800de02:	4d06      	ldr	r5, [pc, #24]	; (800de1c <_close_r+0x1c>)
 800de04:	2300      	movs	r3, #0
 800de06:	4604      	mov	r4, r0
 800de08:	4608      	mov	r0, r1
 800de0a:	602b      	str	r3, [r5, #0]
 800de0c:	f7f4 fc95 	bl	800273a <_close>
 800de10:	1c43      	adds	r3, r0, #1
 800de12:	d102      	bne.n	800de1a <_close_r+0x1a>
 800de14:	682b      	ldr	r3, [r5, #0]
 800de16:	b103      	cbz	r3, 800de1a <_close_r+0x1a>
 800de18:	6023      	str	r3, [r4, #0]
 800de1a:	bd38      	pop	{r3, r4, r5, pc}
 800de1c:	200095e0 	.word	0x200095e0

0800de20 <_fstat_r>:
 800de20:	b538      	push	{r3, r4, r5, lr}
 800de22:	4d07      	ldr	r5, [pc, #28]	; (800de40 <_fstat_r+0x20>)
 800de24:	2300      	movs	r3, #0
 800de26:	4604      	mov	r4, r0
 800de28:	4608      	mov	r0, r1
 800de2a:	4611      	mov	r1, r2
 800de2c:	602b      	str	r3, [r5, #0]
 800de2e:	f7f4 fc90 	bl	8002752 <_fstat>
 800de32:	1c43      	adds	r3, r0, #1
 800de34:	d102      	bne.n	800de3c <_fstat_r+0x1c>
 800de36:	682b      	ldr	r3, [r5, #0]
 800de38:	b103      	cbz	r3, 800de3c <_fstat_r+0x1c>
 800de3a:	6023      	str	r3, [r4, #0]
 800de3c:	bd38      	pop	{r3, r4, r5, pc}
 800de3e:	bf00      	nop
 800de40:	200095e0 	.word	0x200095e0

0800de44 <_isatty_r>:
 800de44:	b538      	push	{r3, r4, r5, lr}
 800de46:	4d06      	ldr	r5, [pc, #24]	; (800de60 <_isatty_r+0x1c>)
 800de48:	2300      	movs	r3, #0
 800de4a:	4604      	mov	r4, r0
 800de4c:	4608      	mov	r0, r1
 800de4e:	602b      	str	r3, [r5, #0]
 800de50:	f7f4 fc8f 	bl	8002772 <_isatty>
 800de54:	1c43      	adds	r3, r0, #1
 800de56:	d102      	bne.n	800de5e <_isatty_r+0x1a>
 800de58:	682b      	ldr	r3, [r5, #0]
 800de5a:	b103      	cbz	r3, 800de5e <_isatty_r+0x1a>
 800de5c:	6023      	str	r3, [r4, #0]
 800de5e:	bd38      	pop	{r3, r4, r5, pc}
 800de60:	200095e0 	.word	0x200095e0

0800de64 <_lseek_r>:
 800de64:	b538      	push	{r3, r4, r5, lr}
 800de66:	4d07      	ldr	r5, [pc, #28]	; (800de84 <_lseek_r+0x20>)
 800de68:	4604      	mov	r4, r0
 800de6a:	4608      	mov	r0, r1
 800de6c:	4611      	mov	r1, r2
 800de6e:	2200      	movs	r2, #0
 800de70:	602a      	str	r2, [r5, #0]
 800de72:	461a      	mov	r2, r3
 800de74:	f7f4 fc88 	bl	8002788 <_lseek>
 800de78:	1c43      	adds	r3, r0, #1
 800de7a:	d102      	bne.n	800de82 <_lseek_r+0x1e>
 800de7c:	682b      	ldr	r3, [r5, #0]
 800de7e:	b103      	cbz	r3, 800de82 <_lseek_r+0x1e>
 800de80:	6023      	str	r3, [r4, #0]
 800de82:	bd38      	pop	{r3, r4, r5, pc}
 800de84:	200095e0 	.word	0x200095e0

0800de88 <_malloc_usable_size_r>:
 800de88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de8c:	1f18      	subs	r0, r3, #4
 800de8e:	2b00      	cmp	r3, #0
 800de90:	bfbc      	itt	lt
 800de92:	580b      	ldrlt	r3, [r1, r0]
 800de94:	18c0      	addlt	r0, r0, r3
 800de96:	4770      	bx	lr

0800de98 <_read_r>:
 800de98:	b538      	push	{r3, r4, r5, lr}
 800de9a:	4d07      	ldr	r5, [pc, #28]	; (800deb8 <_read_r+0x20>)
 800de9c:	4604      	mov	r4, r0
 800de9e:	4608      	mov	r0, r1
 800dea0:	4611      	mov	r1, r2
 800dea2:	2200      	movs	r2, #0
 800dea4:	602a      	str	r2, [r5, #0]
 800dea6:	461a      	mov	r2, r3
 800dea8:	f7f4 fc0e 	bl	80026c8 <_read>
 800deac:	1c43      	adds	r3, r0, #1
 800deae:	d102      	bne.n	800deb6 <_read_r+0x1e>
 800deb0:	682b      	ldr	r3, [r5, #0]
 800deb2:	b103      	cbz	r3, 800deb6 <_read_r+0x1e>
 800deb4:	6023      	str	r3, [r4, #0]
 800deb6:	bd38      	pop	{r3, r4, r5, pc}
 800deb8:	200095e0 	.word	0x200095e0
 800debc:	00000000 	.word	0x00000000

0800dec0 <cos>:
 800dec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dec2:	ec53 2b10 	vmov	r2, r3, d0
 800dec6:	4824      	ldr	r0, [pc, #144]	; (800df58 <cos+0x98>)
 800dec8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800decc:	4281      	cmp	r1, r0
 800dece:	dc06      	bgt.n	800dede <cos+0x1e>
 800ded0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800df50 <cos+0x90>
 800ded4:	f000 feb0 	bl	800ec38 <__kernel_cos>
 800ded8:	ec51 0b10 	vmov	r0, r1, d0
 800dedc:	e007      	b.n	800deee <cos+0x2e>
 800dede:	481f      	ldr	r0, [pc, #124]	; (800df5c <cos+0x9c>)
 800dee0:	4281      	cmp	r1, r0
 800dee2:	dd09      	ble.n	800def8 <cos+0x38>
 800dee4:	ee10 0a10 	vmov	r0, s0
 800dee8:	4619      	mov	r1, r3
 800deea:	f7f2 f9d5 	bl	8000298 <__aeabi_dsub>
 800deee:	ec41 0b10 	vmov	d0, r0, r1
 800def2:	b005      	add	sp, #20
 800def4:	f85d fb04 	ldr.w	pc, [sp], #4
 800def8:	4668      	mov	r0, sp
 800defa:	f000 fbdd 	bl	800e6b8 <__ieee754_rem_pio2>
 800defe:	f000 0003 	and.w	r0, r0, #3
 800df02:	2801      	cmp	r0, #1
 800df04:	d007      	beq.n	800df16 <cos+0x56>
 800df06:	2802      	cmp	r0, #2
 800df08:	d012      	beq.n	800df30 <cos+0x70>
 800df0a:	b9c0      	cbnz	r0, 800df3e <cos+0x7e>
 800df0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df10:	ed9d 0b00 	vldr	d0, [sp]
 800df14:	e7de      	b.n	800ded4 <cos+0x14>
 800df16:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df1a:	ed9d 0b00 	vldr	d0, [sp]
 800df1e:	f001 fa93 	bl	800f448 <__kernel_sin>
 800df22:	ec53 2b10 	vmov	r2, r3, d0
 800df26:	ee10 0a10 	vmov	r0, s0
 800df2a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800df2e:	e7de      	b.n	800deee <cos+0x2e>
 800df30:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df34:	ed9d 0b00 	vldr	d0, [sp]
 800df38:	f000 fe7e 	bl	800ec38 <__kernel_cos>
 800df3c:	e7f1      	b.n	800df22 <cos+0x62>
 800df3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df42:	ed9d 0b00 	vldr	d0, [sp]
 800df46:	2001      	movs	r0, #1
 800df48:	f001 fa7e 	bl	800f448 <__kernel_sin>
 800df4c:	e7c4      	b.n	800ded8 <cos+0x18>
 800df4e:	bf00      	nop
	...
 800df58:	3fe921fb 	.word	0x3fe921fb
 800df5c:	7fefffff 	.word	0x7fefffff

0800df60 <fabs>:
 800df60:	ec51 0b10 	vmov	r0, r1, d0
 800df64:	ee10 2a10 	vmov	r2, s0
 800df68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df6c:	ec43 2b10 	vmov	d0, r2, r3
 800df70:	4770      	bx	lr
 800df72:	0000      	movs	r0, r0
 800df74:	0000      	movs	r0, r0
	...

0800df78 <floor>:
 800df78:	ec51 0b10 	vmov	r0, r1, d0
 800df7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800df84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800df88:	2e13      	cmp	r6, #19
 800df8a:	ee10 5a10 	vmov	r5, s0
 800df8e:	ee10 8a10 	vmov	r8, s0
 800df92:	460c      	mov	r4, r1
 800df94:	dc32      	bgt.n	800dffc <floor+0x84>
 800df96:	2e00      	cmp	r6, #0
 800df98:	da14      	bge.n	800dfc4 <floor+0x4c>
 800df9a:	a333      	add	r3, pc, #204	; (adr r3, 800e068 <floor+0xf0>)
 800df9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa0:	f7f2 f97c 	bl	800029c <__adddf3>
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	f7f2 fdbe 	bl	8000b28 <__aeabi_dcmpgt>
 800dfac:	b138      	cbz	r0, 800dfbe <floor+0x46>
 800dfae:	2c00      	cmp	r4, #0
 800dfb0:	da57      	bge.n	800e062 <floor+0xea>
 800dfb2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800dfb6:	431d      	orrs	r5, r3
 800dfb8:	d001      	beq.n	800dfbe <floor+0x46>
 800dfba:	4c2d      	ldr	r4, [pc, #180]	; (800e070 <floor+0xf8>)
 800dfbc:	2500      	movs	r5, #0
 800dfbe:	4621      	mov	r1, r4
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	e025      	b.n	800e010 <floor+0x98>
 800dfc4:	4f2b      	ldr	r7, [pc, #172]	; (800e074 <floor+0xfc>)
 800dfc6:	4137      	asrs	r7, r6
 800dfc8:	ea01 0307 	and.w	r3, r1, r7
 800dfcc:	4303      	orrs	r3, r0
 800dfce:	d01f      	beq.n	800e010 <floor+0x98>
 800dfd0:	a325      	add	r3, pc, #148	; (adr r3, 800e068 <floor+0xf0>)
 800dfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd6:	f7f2 f961 	bl	800029c <__adddf3>
 800dfda:	2200      	movs	r2, #0
 800dfdc:	2300      	movs	r3, #0
 800dfde:	f7f2 fda3 	bl	8000b28 <__aeabi_dcmpgt>
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	d0eb      	beq.n	800dfbe <floor+0x46>
 800dfe6:	2c00      	cmp	r4, #0
 800dfe8:	bfbe      	ittt	lt
 800dfea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dfee:	fa43 f606 	asrlt.w	r6, r3, r6
 800dff2:	19a4      	addlt	r4, r4, r6
 800dff4:	ea24 0407 	bic.w	r4, r4, r7
 800dff8:	2500      	movs	r5, #0
 800dffa:	e7e0      	b.n	800dfbe <floor+0x46>
 800dffc:	2e33      	cmp	r6, #51	; 0x33
 800dffe:	dd0b      	ble.n	800e018 <floor+0xa0>
 800e000:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e004:	d104      	bne.n	800e010 <floor+0x98>
 800e006:	ee10 2a10 	vmov	r2, s0
 800e00a:	460b      	mov	r3, r1
 800e00c:	f7f2 f946 	bl	800029c <__adddf3>
 800e010:	ec41 0b10 	vmov	d0, r0, r1
 800e014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e018:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e01c:	f04f 33ff 	mov.w	r3, #4294967295
 800e020:	fa23 f707 	lsr.w	r7, r3, r7
 800e024:	4207      	tst	r7, r0
 800e026:	d0f3      	beq.n	800e010 <floor+0x98>
 800e028:	a30f      	add	r3, pc, #60	; (adr r3, 800e068 <floor+0xf0>)
 800e02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02e:	f7f2 f935 	bl	800029c <__adddf3>
 800e032:	2200      	movs	r2, #0
 800e034:	2300      	movs	r3, #0
 800e036:	f7f2 fd77 	bl	8000b28 <__aeabi_dcmpgt>
 800e03a:	2800      	cmp	r0, #0
 800e03c:	d0bf      	beq.n	800dfbe <floor+0x46>
 800e03e:	2c00      	cmp	r4, #0
 800e040:	da02      	bge.n	800e048 <floor+0xd0>
 800e042:	2e14      	cmp	r6, #20
 800e044:	d103      	bne.n	800e04e <floor+0xd6>
 800e046:	3401      	adds	r4, #1
 800e048:	ea25 0507 	bic.w	r5, r5, r7
 800e04c:	e7b7      	b.n	800dfbe <floor+0x46>
 800e04e:	2301      	movs	r3, #1
 800e050:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e054:	fa03 f606 	lsl.w	r6, r3, r6
 800e058:	4435      	add	r5, r6
 800e05a:	4545      	cmp	r5, r8
 800e05c:	bf38      	it	cc
 800e05e:	18e4      	addcc	r4, r4, r3
 800e060:	e7f2      	b.n	800e048 <floor+0xd0>
 800e062:	2500      	movs	r5, #0
 800e064:	462c      	mov	r4, r5
 800e066:	e7aa      	b.n	800dfbe <floor+0x46>
 800e068:	8800759c 	.word	0x8800759c
 800e06c:	7e37e43c 	.word	0x7e37e43c
 800e070:	bff00000 	.word	0xbff00000
 800e074:	000fffff 	.word	0x000fffff

0800e078 <sin>:
 800e078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e07a:	ec53 2b10 	vmov	r2, r3, d0
 800e07e:	4826      	ldr	r0, [pc, #152]	; (800e118 <sin+0xa0>)
 800e080:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e084:	4281      	cmp	r1, r0
 800e086:	dc07      	bgt.n	800e098 <sin+0x20>
 800e088:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800e110 <sin+0x98>
 800e08c:	2000      	movs	r0, #0
 800e08e:	f001 f9db 	bl	800f448 <__kernel_sin>
 800e092:	ec51 0b10 	vmov	r0, r1, d0
 800e096:	e007      	b.n	800e0a8 <sin+0x30>
 800e098:	4820      	ldr	r0, [pc, #128]	; (800e11c <sin+0xa4>)
 800e09a:	4281      	cmp	r1, r0
 800e09c:	dd09      	ble.n	800e0b2 <sin+0x3a>
 800e09e:	ee10 0a10 	vmov	r0, s0
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	f7f2 f8f8 	bl	8000298 <__aeabi_dsub>
 800e0a8:	ec41 0b10 	vmov	d0, r0, r1
 800e0ac:	b005      	add	sp, #20
 800e0ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800e0b2:	4668      	mov	r0, sp
 800e0b4:	f000 fb00 	bl	800e6b8 <__ieee754_rem_pio2>
 800e0b8:	f000 0003 	and.w	r0, r0, #3
 800e0bc:	2801      	cmp	r0, #1
 800e0be:	d008      	beq.n	800e0d2 <sin+0x5a>
 800e0c0:	2802      	cmp	r0, #2
 800e0c2:	d00d      	beq.n	800e0e0 <sin+0x68>
 800e0c4:	b9d0      	cbnz	r0, 800e0fc <sin+0x84>
 800e0c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0ca:	ed9d 0b00 	vldr	d0, [sp]
 800e0ce:	2001      	movs	r0, #1
 800e0d0:	e7dd      	b.n	800e08e <sin+0x16>
 800e0d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0d6:	ed9d 0b00 	vldr	d0, [sp]
 800e0da:	f000 fdad 	bl	800ec38 <__kernel_cos>
 800e0de:	e7d8      	b.n	800e092 <sin+0x1a>
 800e0e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0e4:	ed9d 0b00 	vldr	d0, [sp]
 800e0e8:	2001      	movs	r0, #1
 800e0ea:	f001 f9ad 	bl	800f448 <__kernel_sin>
 800e0ee:	ec53 2b10 	vmov	r2, r3, d0
 800e0f2:	ee10 0a10 	vmov	r0, s0
 800e0f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e0fa:	e7d5      	b.n	800e0a8 <sin+0x30>
 800e0fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e100:	ed9d 0b00 	vldr	d0, [sp]
 800e104:	f000 fd98 	bl	800ec38 <__kernel_cos>
 800e108:	e7f1      	b.n	800e0ee <sin+0x76>
 800e10a:	bf00      	nop
 800e10c:	f3af 8000 	nop.w
	...
 800e118:	3fe921fb 	.word	0x3fe921fb
 800e11c:	7fefffff 	.word	0x7fefffff

0800e120 <trunc>:
 800e120:	ec51 0b10 	vmov	r0, r1, d0
 800e124:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e128:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e12c:	2b13      	cmp	r3, #19
 800e12e:	b5d0      	push	{r4, r6, r7, lr}
 800e130:	460c      	mov	r4, r1
 800e132:	dc10      	bgt.n	800e156 <trunc+0x36>
 800e134:	2b00      	cmp	r3, #0
 800e136:	bfa5      	ittet	ge
 800e138:	4a11      	ldrge	r2, [pc, #68]	; (800e180 <trunc+0x60>)
 800e13a:	fa42 f303 	asrge.w	r3, r2, r3
 800e13e:	2100      	movlt	r1, #0
 800e140:	2100      	movge	r1, #0
 800e142:	bfb9      	ittee	lt
 800e144:	2000      	movlt	r0, #0
 800e146:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800e14a:	2000      	movge	r0, #0
 800e14c:	ea24 0103 	bicge.w	r1, r4, r3
 800e150:	ec41 0b10 	vmov	d0, r0, r1
 800e154:	bdd0      	pop	{r4, r6, r7, pc}
 800e156:	2b33      	cmp	r3, #51	; 0x33
 800e158:	dd08      	ble.n	800e16c <trunc+0x4c>
 800e15a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e15e:	d1f7      	bne.n	800e150 <trunc+0x30>
 800e160:	ee10 2a10 	vmov	r2, s0
 800e164:	460b      	mov	r3, r1
 800e166:	f7f2 f899 	bl	800029c <__adddf3>
 800e16a:	e7f1      	b.n	800e150 <trunc+0x30>
 800e16c:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e170:	f04f 33ff 	mov.w	r3, #4294967295
 800e174:	fa23 f202 	lsr.w	r2, r3, r2
 800e178:	ea20 0602 	bic.w	r6, r0, r2
 800e17c:	4630      	mov	r0, r6
 800e17e:	e7e7      	b.n	800e150 <trunc+0x30>
 800e180:	000fffff 	.word	0x000fffff

0800e184 <acos>:
 800e184:	b538      	push	{r3, r4, r5, lr}
 800e186:	ed2d 8b02 	vpush	{d8}
 800e18a:	ec55 4b10 	vmov	r4, r5, d0
 800e18e:	f000 f833 	bl	800e1f8 <__ieee754_acos>
 800e192:	4b16      	ldr	r3, [pc, #88]	; (800e1ec <acos+0x68>)
 800e194:	eeb0 8a40 	vmov.f32	s16, s0
 800e198:	eef0 8a60 	vmov.f32	s17, s1
 800e19c:	f993 3000 	ldrsb.w	r3, [r3]
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	d01c      	beq.n	800e1de <acos+0x5a>
 800e1a4:	4622      	mov	r2, r4
 800e1a6:	462b      	mov	r3, r5
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	4629      	mov	r1, r5
 800e1ac:	f7f2 fcc6 	bl	8000b3c <__aeabi_dcmpun>
 800e1b0:	b9a8      	cbnz	r0, 800e1de <acos+0x5a>
 800e1b2:	ec45 4b10 	vmov	d0, r4, r5
 800e1b6:	f7ff fed3 	bl	800df60 <fabs>
 800e1ba:	4b0d      	ldr	r3, [pc, #52]	; (800e1f0 <acos+0x6c>)
 800e1bc:	ec51 0b10 	vmov	r0, r1, d0
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f7f2 fcb1 	bl	8000b28 <__aeabi_dcmpgt>
 800e1c6:	b150      	cbz	r0, 800e1de <acos+0x5a>
 800e1c8:	f7fb fbfc 	bl	80099c4 <__errno>
 800e1cc:	ecbd 8b02 	vpop	{d8}
 800e1d0:	2321      	movs	r3, #33	; 0x21
 800e1d2:	6003      	str	r3, [r0, #0]
 800e1d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1d8:	4806      	ldr	r0, [pc, #24]	; (800e1f4 <acos+0x70>)
 800e1da:	f7ff ba0d 	b.w	800d5f8 <nan>
 800e1de:	eeb0 0a48 	vmov.f32	s0, s16
 800e1e2:	eef0 0a68 	vmov.f32	s1, s17
 800e1e6:	ecbd 8b02 	vpop	{d8}
 800e1ea:	bd38      	pop	{r3, r4, r5, pc}
 800e1ec:	200001fc 	.word	0x200001fc
 800e1f0:	3ff00000 	.word	0x3ff00000
 800e1f4:	0800ff43 	.word	0x0800ff43

0800e1f8 <__ieee754_acos>:
 800e1f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1fc:	ec55 4b10 	vmov	r4, r5, d0
 800e200:	49b7      	ldr	r1, [pc, #732]	; (800e4e0 <__ieee754_acos+0x2e8>)
 800e202:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e206:	428b      	cmp	r3, r1
 800e208:	dd1b      	ble.n	800e242 <__ieee754_acos+0x4a>
 800e20a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800e20e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e212:	4323      	orrs	r3, r4
 800e214:	d106      	bne.n	800e224 <__ieee754_acos+0x2c>
 800e216:	2d00      	cmp	r5, #0
 800e218:	f300 8211 	bgt.w	800e63e <__ieee754_acos+0x446>
 800e21c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800e478 <__ieee754_acos+0x280>
 800e220:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e224:	ee10 2a10 	vmov	r2, s0
 800e228:	462b      	mov	r3, r5
 800e22a:	ee10 0a10 	vmov	r0, s0
 800e22e:	4629      	mov	r1, r5
 800e230:	f7f2 f832 	bl	8000298 <__aeabi_dsub>
 800e234:	4602      	mov	r2, r0
 800e236:	460b      	mov	r3, r1
 800e238:	f7f2 fb10 	bl	800085c <__aeabi_ddiv>
 800e23c:	ec41 0b10 	vmov	d0, r0, r1
 800e240:	e7ee      	b.n	800e220 <__ieee754_acos+0x28>
 800e242:	49a8      	ldr	r1, [pc, #672]	; (800e4e4 <__ieee754_acos+0x2ec>)
 800e244:	428b      	cmp	r3, r1
 800e246:	f300 8087 	bgt.w	800e358 <__ieee754_acos+0x160>
 800e24a:	4aa7      	ldr	r2, [pc, #668]	; (800e4e8 <__ieee754_acos+0x2f0>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	f340 81f9 	ble.w	800e644 <__ieee754_acos+0x44c>
 800e252:	ee10 2a10 	vmov	r2, s0
 800e256:	ee10 0a10 	vmov	r0, s0
 800e25a:	462b      	mov	r3, r5
 800e25c:	4629      	mov	r1, r5
 800e25e:	f7f2 f9d3 	bl	8000608 <__aeabi_dmul>
 800e262:	a387      	add	r3, pc, #540	; (adr r3, 800e480 <__ieee754_acos+0x288>)
 800e264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e268:	4606      	mov	r6, r0
 800e26a:	460f      	mov	r7, r1
 800e26c:	f7f2 f9cc 	bl	8000608 <__aeabi_dmul>
 800e270:	a385      	add	r3, pc, #532	; (adr r3, 800e488 <__ieee754_acos+0x290>)
 800e272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e276:	f7f2 f811 	bl	800029c <__adddf3>
 800e27a:	4632      	mov	r2, r6
 800e27c:	463b      	mov	r3, r7
 800e27e:	f7f2 f9c3 	bl	8000608 <__aeabi_dmul>
 800e282:	a383      	add	r3, pc, #524	; (adr r3, 800e490 <__ieee754_acos+0x298>)
 800e284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e288:	f7f2 f806 	bl	8000298 <__aeabi_dsub>
 800e28c:	4632      	mov	r2, r6
 800e28e:	463b      	mov	r3, r7
 800e290:	f7f2 f9ba 	bl	8000608 <__aeabi_dmul>
 800e294:	a380      	add	r3, pc, #512	; (adr r3, 800e498 <__ieee754_acos+0x2a0>)
 800e296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29a:	f7f1 ffff 	bl	800029c <__adddf3>
 800e29e:	4632      	mov	r2, r6
 800e2a0:	463b      	mov	r3, r7
 800e2a2:	f7f2 f9b1 	bl	8000608 <__aeabi_dmul>
 800e2a6:	a37e      	add	r3, pc, #504	; (adr r3, 800e4a0 <__ieee754_acos+0x2a8>)
 800e2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ac:	f7f1 fff4 	bl	8000298 <__aeabi_dsub>
 800e2b0:	4632      	mov	r2, r6
 800e2b2:	463b      	mov	r3, r7
 800e2b4:	f7f2 f9a8 	bl	8000608 <__aeabi_dmul>
 800e2b8:	a37b      	add	r3, pc, #492	; (adr r3, 800e4a8 <__ieee754_acos+0x2b0>)
 800e2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2be:	f7f1 ffed 	bl	800029c <__adddf3>
 800e2c2:	4632      	mov	r2, r6
 800e2c4:	463b      	mov	r3, r7
 800e2c6:	f7f2 f99f 	bl	8000608 <__aeabi_dmul>
 800e2ca:	a379      	add	r3, pc, #484	; (adr r3, 800e4b0 <__ieee754_acos+0x2b8>)
 800e2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d0:	4680      	mov	r8, r0
 800e2d2:	4689      	mov	r9, r1
 800e2d4:	4630      	mov	r0, r6
 800e2d6:	4639      	mov	r1, r7
 800e2d8:	f7f2 f996 	bl	8000608 <__aeabi_dmul>
 800e2dc:	a376      	add	r3, pc, #472	; (adr r3, 800e4b8 <__ieee754_acos+0x2c0>)
 800e2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e2:	f7f1 ffd9 	bl	8000298 <__aeabi_dsub>
 800e2e6:	4632      	mov	r2, r6
 800e2e8:	463b      	mov	r3, r7
 800e2ea:	f7f2 f98d 	bl	8000608 <__aeabi_dmul>
 800e2ee:	a374      	add	r3, pc, #464	; (adr r3, 800e4c0 <__ieee754_acos+0x2c8>)
 800e2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f4:	f7f1 ffd2 	bl	800029c <__adddf3>
 800e2f8:	4632      	mov	r2, r6
 800e2fa:	463b      	mov	r3, r7
 800e2fc:	f7f2 f984 	bl	8000608 <__aeabi_dmul>
 800e300:	a371      	add	r3, pc, #452	; (adr r3, 800e4c8 <__ieee754_acos+0x2d0>)
 800e302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e306:	f7f1 ffc7 	bl	8000298 <__aeabi_dsub>
 800e30a:	4632      	mov	r2, r6
 800e30c:	463b      	mov	r3, r7
 800e30e:	f7f2 f97b 	bl	8000608 <__aeabi_dmul>
 800e312:	4b76      	ldr	r3, [pc, #472]	; (800e4ec <__ieee754_acos+0x2f4>)
 800e314:	2200      	movs	r2, #0
 800e316:	f7f1 ffc1 	bl	800029c <__adddf3>
 800e31a:	4602      	mov	r2, r0
 800e31c:	460b      	mov	r3, r1
 800e31e:	4640      	mov	r0, r8
 800e320:	4649      	mov	r1, r9
 800e322:	f7f2 fa9b 	bl	800085c <__aeabi_ddiv>
 800e326:	4622      	mov	r2, r4
 800e328:	462b      	mov	r3, r5
 800e32a:	f7f2 f96d 	bl	8000608 <__aeabi_dmul>
 800e32e:	4602      	mov	r2, r0
 800e330:	460b      	mov	r3, r1
 800e332:	a167      	add	r1, pc, #412	; (adr r1, 800e4d0 <__ieee754_acos+0x2d8>)
 800e334:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e338:	f7f1 ffae 	bl	8000298 <__aeabi_dsub>
 800e33c:	4602      	mov	r2, r0
 800e33e:	460b      	mov	r3, r1
 800e340:	4620      	mov	r0, r4
 800e342:	4629      	mov	r1, r5
 800e344:	f7f1 ffa8 	bl	8000298 <__aeabi_dsub>
 800e348:	4602      	mov	r2, r0
 800e34a:	460b      	mov	r3, r1
 800e34c:	a162      	add	r1, pc, #392	; (adr r1, 800e4d8 <__ieee754_acos+0x2e0>)
 800e34e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e352:	f7f1 ffa1 	bl	8000298 <__aeabi_dsub>
 800e356:	e771      	b.n	800e23c <__ieee754_acos+0x44>
 800e358:	2d00      	cmp	r5, #0
 800e35a:	f280 80cb 	bge.w	800e4f4 <__ieee754_acos+0x2fc>
 800e35e:	ee10 0a10 	vmov	r0, s0
 800e362:	4b62      	ldr	r3, [pc, #392]	; (800e4ec <__ieee754_acos+0x2f4>)
 800e364:	2200      	movs	r2, #0
 800e366:	4629      	mov	r1, r5
 800e368:	f7f1 ff98 	bl	800029c <__adddf3>
 800e36c:	4b60      	ldr	r3, [pc, #384]	; (800e4f0 <__ieee754_acos+0x2f8>)
 800e36e:	2200      	movs	r2, #0
 800e370:	f7f2 f94a 	bl	8000608 <__aeabi_dmul>
 800e374:	a342      	add	r3, pc, #264	; (adr r3, 800e480 <__ieee754_acos+0x288>)
 800e376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37a:	4604      	mov	r4, r0
 800e37c:	460d      	mov	r5, r1
 800e37e:	f7f2 f943 	bl	8000608 <__aeabi_dmul>
 800e382:	a341      	add	r3, pc, #260	; (adr r3, 800e488 <__ieee754_acos+0x290>)
 800e384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e388:	f7f1 ff88 	bl	800029c <__adddf3>
 800e38c:	4622      	mov	r2, r4
 800e38e:	462b      	mov	r3, r5
 800e390:	f7f2 f93a 	bl	8000608 <__aeabi_dmul>
 800e394:	a33e      	add	r3, pc, #248	; (adr r3, 800e490 <__ieee754_acos+0x298>)
 800e396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39a:	f7f1 ff7d 	bl	8000298 <__aeabi_dsub>
 800e39e:	4622      	mov	r2, r4
 800e3a0:	462b      	mov	r3, r5
 800e3a2:	f7f2 f931 	bl	8000608 <__aeabi_dmul>
 800e3a6:	a33c      	add	r3, pc, #240	; (adr r3, 800e498 <__ieee754_acos+0x2a0>)
 800e3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ac:	f7f1 ff76 	bl	800029c <__adddf3>
 800e3b0:	4622      	mov	r2, r4
 800e3b2:	462b      	mov	r3, r5
 800e3b4:	f7f2 f928 	bl	8000608 <__aeabi_dmul>
 800e3b8:	a339      	add	r3, pc, #228	; (adr r3, 800e4a0 <__ieee754_acos+0x2a8>)
 800e3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3be:	f7f1 ff6b 	bl	8000298 <__aeabi_dsub>
 800e3c2:	4622      	mov	r2, r4
 800e3c4:	462b      	mov	r3, r5
 800e3c6:	f7f2 f91f 	bl	8000608 <__aeabi_dmul>
 800e3ca:	a337      	add	r3, pc, #220	; (adr r3, 800e4a8 <__ieee754_acos+0x2b0>)
 800e3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d0:	f7f1 ff64 	bl	800029c <__adddf3>
 800e3d4:	4622      	mov	r2, r4
 800e3d6:	462b      	mov	r3, r5
 800e3d8:	f7f2 f916 	bl	8000608 <__aeabi_dmul>
 800e3dc:	ec45 4b10 	vmov	d0, r4, r5
 800e3e0:	4680      	mov	r8, r0
 800e3e2:	4689      	mov	r9, r1
 800e3e4:	f000 fb72 	bl	800eacc <__ieee754_sqrt>
 800e3e8:	a331      	add	r3, pc, #196	; (adr r3, 800e4b0 <__ieee754_acos+0x2b8>)
 800e3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	4629      	mov	r1, r5
 800e3f2:	ec57 6b10 	vmov	r6, r7, d0
 800e3f6:	f7f2 f907 	bl	8000608 <__aeabi_dmul>
 800e3fa:	a32f      	add	r3, pc, #188	; (adr r3, 800e4b8 <__ieee754_acos+0x2c0>)
 800e3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e400:	f7f1 ff4a 	bl	8000298 <__aeabi_dsub>
 800e404:	4622      	mov	r2, r4
 800e406:	462b      	mov	r3, r5
 800e408:	f7f2 f8fe 	bl	8000608 <__aeabi_dmul>
 800e40c:	a32c      	add	r3, pc, #176	; (adr r3, 800e4c0 <__ieee754_acos+0x2c8>)
 800e40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e412:	f7f1 ff43 	bl	800029c <__adddf3>
 800e416:	4622      	mov	r2, r4
 800e418:	462b      	mov	r3, r5
 800e41a:	f7f2 f8f5 	bl	8000608 <__aeabi_dmul>
 800e41e:	a32a      	add	r3, pc, #168	; (adr r3, 800e4c8 <__ieee754_acos+0x2d0>)
 800e420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e424:	f7f1 ff38 	bl	8000298 <__aeabi_dsub>
 800e428:	4622      	mov	r2, r4
 800e42a:	462b      	mov	r3, r5
 800e42c:	f7f2 f8ec 	bl	8000608 <__aeabi_dmul>
 800e430:	4b2e      	ldr	r3, [pc, #184]	; (800e4ec <__ieee754_acos+0x2f4>)
 800e432:	2200      	movs	r2, #0
 800e434:	f7f1 ff32 	bl	800029c <__adddf3>
 800e438:	4602      	mov	r2, r0
 800e43a:	460b      	mov	r3, r1
 800e43c:	4640      	mov	r0, r8
 800e43e:	4649      	mov	r1, r9
 800e440:	f7f2 fa0c 	bl	800085c <__aeabi_ddiv>
 800e444:	4632      	mov	r2, r6
 800e446:	463b      	mov	r3, r7
 800e448:	f7f2 f8de 	bl	8000608 <__aeabi_dmul>
 800e44c:	a320      	add	r3, pc, #128	; (adr r3, 800e4d0 <__ieee754_acos+0x2d8>)
 800e44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e452:	f7f1 ff21 	bl	8000298 <__aeabi_dsub>
 800e456:	4632      	mov	r2, r6
 800e458:	463b      	mov	r3, r7
 800e45a:	f7f1 ff1f 	bl	800029c <__adddf3>
 800e45e:	4602      	mov	r2, r0
 800e460:	460b      	mov	r3, r1
 800e462:	f7f1 ff1b 	bl	800029c <__adddf3>
 800e466:	4602      	mov	r2, r0
 800e468:	460b      	mov	r3, r1
 800e46a:	a103      	add	r1, pc, #12	; (adr r1, 800e478 <__ieee754_acos+0x280>)
 800e46c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e470:	e76f      	b.n	800e352 <__ieee754_acos+0x15a>
 800e472:	bf00      	nop
 800e474:	f3af 8000 	nop.w
 800e478:	54442d18 	.word	0x54442d18
 800e47c:	400921fb 	.word	0x400921fb
 800e480:	0dfdf709 	.word	0x0dfdf709
 800e484:	3f023de1 	.word	0x3f023de1
 800e488:	7501b288 	.word	0x7501b288
 800e48c:	3f49efe0 	.word	0x3f49efe0
 800e490:	b5688f3b 	.word	0xb5688f3b
 800e494:	3fa48228 	.word	0x3fa48228
 800e498:	0e884455 	.word	0x0e884455
 800e49c:	3fc9c155 	.word	0x3fc9c155
 800e4a0:	03eb6f7d 	.word	0x03eb6f7d
 800e4a4:	3fd4d612 	.word	0x3fd4d612
 800e4a8:	55555555 	.word	0x55555555
 800e4ac:	3fc55555 	.word	0x3fc55555
 800e4b0:	b12e9282 	.word	0xb12e9282
 800e4b4:	3fb3b8c5 	.word	0x3fb3b8c5
 800e4b8:	1b8d0159 	.word	0x1b8d0159
 800e4bc:	3fe6066c 	.word	0x3fe6066c
 800e4c0:	9c598ac8 	.word	0x9c598ac8
 800e4c4:	40002ae5 	.word	0x40002ae5
 800e4c8:	1c8a2d4b 	.word	0x1c8a2d4b
 800e4cc:	40033a27 	.word	0x40033a27
 800e4d0:	33145c07 	.word	0x33145c07
 800e4d4:	3c91a626 	.word	0x3c91a626
 800e4d8:	54442d18 	.word	0x54442d18
 800e4dc:	3ff921fb 	.word	0x3ff921fb
 800e4e0:	3fefffff 	.word	0x3fefffff
 800e4e4:	3fdfffff 	.word	0x3fdfffff
 800e4e8:	3c600000 	.word	0x3c600000
 800e4ec:	3ff00000 	.word	0x3ff00000
 800e4f0:	3fe00000 	.word	0x3fe00000
 800e4f4:	ee10 2a10 	vmov	r2, s0
 800e4f8:	462b      	mov	r3, r5
 800e4fa:	496d      	ldr	r1, [pc, #436]	; (800e6b0 <__ieee754_acos+0x4b8>)
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	f7f1 fecb 	bl	8000298 <__aeabi_dsub>
 800e502:	4b6c      	ldr	r3, [pc, #432]	; (800e6b4 <__ieee754_acos+0x4bc>)
 800e504:	2200      	movs	r2, #0
 800e506:	f7f2 f87f 	bl	8000608 <__aeabi_dmul>
 800e50a:	4604      	mov	r4, r0
 800e50c:	460d      	mov	r5, r1
 800e50e:	ec45 4b10 	vmov	d0, r4, r5
 800e512:	f000 fadb 	bl	800eacc <__ieee754_sqrt>
 800e516:	a34e      	add	r3, pc, #312	; (adr r3, 800e650 <__ieee754_acos+0x458>)
 800e518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51c:	4620      	mov	r0, r4
 800e51e:	4629      	mov	r1, r5
 800e520:	ec59 8b10 	vmov	r8, r9, d0
 800e524:	f7f2 f870 	bl	8000608 <__aeabi_dmul>
 800e528:	a34b      	add	r3, pc, #300	; (adr r3, 800e658 <__ieee754_acos+0x460>)
 800e52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52e:	f7f1 feb5 	bl	800029c <__adddf3>
 800e532:	4622      	mov	r2, r4
 800e534:	462b      	mov	r3, r5
 800e536:	f7f2 f867 	bl	8000608 <__aeabi_dmul>
 800e53a:	a349      	add	r3, pc, #292	; (adr r3, 800e660 <__ieee754_acos+0x468>)
 800e53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e540:	f7f1 feaa 	bl	8000298 <__aeabi_dsub>
 800e544:	4622      	mov	r2, r4
 800e546:	462b      	mov	r3, r5
 800e548:	f7f2 f85e 	bl	8000608 <__aeabi_dmul>
 800e54c:	a346      	add	r3, pc, #280	; (adr r3, 800e668 <__ieee754_acos+0x470>)
 800e54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e552:	f7f1 fea3 	bl	800029c <__adddf3>
 800e556:	4622      	mov	r2, r4
 800e558:	462b      	mov	r3, r5
 800e55a:	f7f2 f855 	bl	8000608 <__aeabi_dmul>
 800e55e:	a344      	add	r3, pc, #272	; (adr r3, 800e670 <__ieee754_acos+0x478>)
 800e560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e564:	f7f1 fe98 	bl	8000298 <__aeabi_dsub>
 800e568:	4622      	mov	r2, r4
 800e56a:	462b      	mov	r3, r5
 800e56c:	f7f2 f84c 	bl	8000608 <__aeabi_dmul>
 800e570:	a341      	add	r3, pc, #260	; (adr r3, 800e678 <__ieee754_acos+0x480>)
 800e572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e576:	f7f1 fe91 	bl	800029c <__adddf3>
 800e57a:	4622      	mov	r2, r4
 800e57c:	462b      	mov	r3, r5
 800e57e:	f7f2 f843 	bl	8000608 <__aeabi_dmul>
 800e582:	a33f      	add	r3, pc, #252	; (adr r3, 800e680 <__ieee754_acos+0x488>)
 800e584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e588:	4682      	mov	sl, r0
 800e58a:	468b      	mov	fp, r1
 800e58c:	4620      	mov	r0, r4
 800e58e:	4629      	mov	r1, r5
 800e590:	f7f2 f83a 	bl	8000608 <__aeabi_dmul>
 800e594:	a33c      	add	r3, pc, #240	; (adr r3, 800e688 <__ieee754_acos+0x490>)
 800e596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59a:	f7f1 fe7d 	bl	8000298 <__aeabi_dsub>
 800e59e:	4622      	mov	r2, r4
 800e5a0:	462b      	mov	r3, r5
 800e5a2:	f7f2 f831 	bl	8000608 <__aeabi_dmul>
 800e5a6:	a33a      	add	r3, pc, #232	; (adr r3, 800e690 <__ieee754_acos+0x498>)
 800e5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ac:	f7f1 fe76 	bl	800029c <__adddf3>
 800e5b0:	4622      	mov	r2, r4
 800e5b2:	462b      	mov	r3, r5
 800e5b4:	f7f2 f828 	bl	8000608 <__aeabi_dmul>
 800e5b8:	a337      	add	r3, pc, #220	; (adr r3, 800e698 <__ieee754_acos+0x4a0>)
 800e5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5be:	f7f1 fe6b 	bl	8000298 <__aeabi_dsub>
 800e5c2:	4622      	mov	r2, r4
 800e5c4:	462b      	mov	r3, r5
 800e5c6:	f7f2 f81f 	bl	8000608 <__aeabi_dmul>
 800e5ca:	4b39      	ldr	r3, [pc, #228]	; (800e6b0 <__ieee754_acos+0x4b8>)
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f7f1 fe65 	bl	800029c <__adddf3>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	4650      	mov	r0, sl
 800e5d8:	4659      	mov	r1, fp
 800e5da:	f7f2 f93f 	bl	800085c <__aeabi_ddiv>
 800e5de:	4642      	mov	r2, r8
 800e5e0:	464b      	mov	r3, r9
 800e5e2:	f7f2 f811 	bl	8000608 <__aeabi_dmul>
 800e5e6:	2600      	movs	r6, #0
 800e5e8:	4682      	mov	sl, r0
 800e5ea:	468b      	mov	fp, r1
 800e5ec:	4632      	mov	r2, r6
 800e5ee:	464b      	mov	r3, r9
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	4649      	mov	r1, r9
 800e5f4:	f7f2 f808 	bl	8000608 <__aeabi_dmul>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	4629      	mov	r1, r5
 800e600:	f7f1 fe4a 	bl	8000298 <__aeabi_dsub>
 800e604:	4632      	mov	r2, r6
 800e606:	4604      	mov	r4, r0
 800e608:	460d      	mov	r5, r1
 800e60a:	464b      	mov	r3, r9
 800e60c:	4640      	mov	r0, r8
 800e60e:	4649      	mov	r1, r9
 800e610:	f7f1 fe44 	bl	800029c <__adddf3>
 800e614:	4602      	mov	r2, r0
 800e616:	460b      	mov	r3, r1
 800e618:	4620      	mov	r0, r4
 800e61a:	4629      	mov	r1, r5
 800e61c:	f7f2 f91e 	bl	800085c <__aeabi_ddiv>
 800e620:	4602      	mov	r2, r0
 800e622:	460b      	mov	r3, r1
 800e624:	4650      	mov	r0, sl
 800e626:	4659      	mov	r1, fp
 800e628:	f7f1 fe38 	bl	800029c <__adddf3>
 800e62c:	4632      	mov	r2, r6
 800e62e:	464b      	mov	r3, r9
 800e630:	f7f1 fe34 	bl	800029c <__adddf3>
 800e634:	4602      	mov	r2, r0
 800e636:	460b      	mov	r3, r1
 800e638:	f7f1 fe30 	bl	800029c <__adddf3>
 800e63c:	e5fe      	b.n	800e23c <__ieee754_acos+0x44>
 800e63e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800e6a0 <__ieee754_acos+0x4a8>
 800e642:	e5ed      	b.n	800e220 <__ieee754_acos+0x28>
 800e644:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800e6a8 <__ieee754_acos+0x4b0>
 800e648:	e5ea      	b.n	800e220 <__ieee754_acos+0x28>
 800e64a:	bf00      	nop
 800e64c:	f3af 8000 	nop.w
 800e650:	0dfdf709 	.word	0x0dfdf709
 800e654:	3f023de1 	.word	0x3f023de1
 800e658:	7501b288 	.word	0x7501b288
 800e65c:	3f49efe0 	.word	0x3f49efe0
 800e660:	b5688f3b 	.word	0xb5688f3b
 800e664:	3fa48228 	.word	0x3fa48228
 800e668:	0e884455 	.word	0x0e884455
 800e66c:	3fc9c155 	.word	0x3fc9c155
 800e670:	03eb6f7d 	.word	0x03eb6f7d
 800e674:	3fd4d612 	.word	0x3fd4d612
 800e678:	55555555 	.word	0x55555555
 800e67c:	3fc55555 	.word	0x3fc55555
 800e680:	b12e9282 	.word	0xb12e9282
 800e684:	3fb3b8c5 	.word	0x3fb3b8c5
 800e688:	1b8d0159 	.word	0x1b8d0159
 800e68c:	3fe6066c 	.word	0x3fe6066c
 800e690:	9c598ac8 	.word	0x9c598ac8
 800e694:	40002ae5 	.word	0x40002ae5
 800e698:	1c8a2d4b 	.word	0x1c8a2d4b
 800e69c:	40033a27 	.word	0x40033a27
	...
 800e6a8:	54442d18 	.word	0x54442d18
 800e6ac:	3ff921fb 	.word	0x3ff921fb
 800e6b0:	3ff00000 	.word	0x3ff00000
 800e6b4:	3fe00000 	.word	0x3fe00000

0800e6b8 <__ieee754_rem_pio2>:
 800e6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6bc:	ed2d 8b02 	vpush	{d8}
 800e6c0:	ec55 4b10 	vmov	r4, r5, d0
 800e6c4:	4bca      	ldr	r3, [pc, #808]	; (800e9f0 <__ieee754_rem_pio2+0x338>)
 800e6c6:	b08b      	sub	sp, #44	; 0x2c
 800e6c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e6cc:	4598      	cmp	r8, r3
 800e6ce:	4682      	mov	sl, r0
 800e6d0:	9502      	str	r5, [sp, #8]
 800e6d2:	dc08      	bgt.n	800e6e6 <__ieee754_rem_pio2+0x2e>
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	ed80 0b00 	vstr	d0, [r0]
 800e6dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e6e0:	f04f 0b00 	mov.w	fp, #0
 800e6e4:	e028      	b.n	800e738 <__ieee754_rem_pio2+0x80>
 800e6e6:	4bc3      	ldr	r3, [pc, #780]	; (800e9f4 <__ieee754_rem_pio2+0x33c>)
 800e6e8:	4598      	cmp	r8, r3
 800e6ea:	dc78      	bgt.n	800e7de <__ieee754_rem_pio2+0x126>
 800e6ec:	9b02      	ldr	r3, [sp, #8]
 800e6ee:	4ec2      	ldr	r6, [pc, #776]	; (800e9f8 <__ieee754_rem_pio2+0x340>)
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	ee10 0a10 	vmov	r0, s0
 800e6f6:	a3b0      	add	r3, pc, #704	; (adr r3, 800e9b8 <__ieee754_rem_pio2+0x300>)
 800e6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fc:	4629      	mov	r1, r5
 800e6fe:	dd39      	ble.n	800e774 <__ieee754_rem_pio2+0xbc>
 800e700:	f7f1 fdca 	bl	8000298 <__aeabi_dsub>
 800e704:	45b0      	cmp	r8, r6
 800e706:	4604      	mov	r4, r0
 800e708:	460d      	mov	r5, r1
 800e70a:	d01b      	beq.n	800e744 <__ieee754_rem_pio2+0x8c>
 800e70c:	a3ac      	add	r3, pc, #688	; (adr r3, 800e9c0 <__ieee754_rem_pio2+0x308>)
 800e70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e712:	f7f1 fdc1 	bl	8000298 <__aeabi_dsub>
 800e716:	4602      	mov	r2, r0
 800e718:	460b      	mov	r3, r1
 800e71a:	e9ca 2300 	strd	r2, r3, [sl]
 800e71e:	4620      	mov	r0, r4
 800e720:	4629      	mov	r1, r5
 800e722:	f7f1 fdb9 	bl	8000298 <__aeabi_dsub>
 800e726:	a3a6      	add	r3, pc, #664	; (adr r3, 800e9c0 <__ieee754_rem_pio2+0x308>)
 800e728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72c:	f7f1 fdb4 	bl	8000298 <__aeabi_dsub>
 800e730:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e734:	f04f 0b01 	mov.w	fp, #1
 800e738:	4658      	mov	r0, fp
 800e73a:	b00b      	add	sp, #44	; 0x2c
 800e73c:	ecbd 8b02 	vpop	{d8}
 800e740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e744:	a3a0      	add	r3, pc, #640	; (adr r3, 800e9c8 <__ieee754_rem_pio2+0x310>)
 800e746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74a:	f7f1 fda5 	bl	8000298 <__aeabi_dsub>
 800e74e:	a3a0      	add	r3, pc, #640	; (adr r3, 800e9d0 <__ieee754_rem_pio2+0x318>)
 800e750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e754:	4604      	mov	r4, r0
 800e756:	460d      	mov	r5, r1
 800e758:	f7f1 fd9e 	bl	8000298 <__aeabi_dsub>
 800e75c:	4602      	mov	r2, r0
 800e75e:	460b      	mov	r3, r1
 800e760:	e9ca 2300 	strd	r2, r3, [sl]
 800e764:	4620      	mov	r0, r4
 800e766:	4629      	mov	r1, r5
 800e768:	f7f1 fd96 	bl	8000298 <__aeabi_dsub>
 800e76c:	a398      	add	r3, pc, #608	; (adr r3, 800e9d0 <__ieee754_rem_pio2+0x318>)
 800e76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e772:	e7db      	b.n	800e72c <__ieee754_rem_pio2+0x74>
 800e774:	f7f1 fd92 	bl	800029c <__adddf3>
 800e778:	45b0      	cmp	r8, r6
 800e77a:	4604      	mov	r4, r0
 800e77c:	460d      	mov	r5, r1
 800e77e:	d016      	beq.n	800e7ae <__ieee754_rem_pio2+0xf6>
 800e780:	a38f      	add	r3, pc, #572	; (adr r3, 800e9c0 <__ieee754_rem_pio2+0x308>)
 800e782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e786:	f7f1 fd89 	bl	800029c <__adddf3>
 800e78a:	4602      	mov	r2, r0
 800e78c:	460b      	mov	r3, r1
 800e78e:	e9ca 2300 	strd	r2, r3, [sl]
 800e792:	4620      	mov	r0, r4
 800e794:	4629      	mov	r1, r5
 800e796:	f7f1 fd7f 	bl	8000298 <__aeabi_dsub>
 800e79a:	a389      	add	r3, pc, #548	; (adr r3, 800e9c0 <__ieee754_rem_pio2+0x308>)
 800e79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a0:	f7f1 fd7c 	bl	800029c <__adddf3>
 800e7a4:	f04f 3bff 	mov.w	fp, #4294967295
 800e7a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e7ac:	e7c4      	b.n	800e738 <__ieee754_rem_pio2+0x80>
 800e7ae:	a386      	add	r3, pc, #536	; (adr r3, 800e9c8 <__ieee754_rem_pio2+0x310>)
 800e7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b4:	f7f1 fd72 	bl	800029c <__adddf3>
 800e7b8:	a385      	add	r3, pc, #532	; (adr r3, 800e9d0 <__ieee754_rem_pio2+0x318>)
 800e7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7be:	4604      	mov	r4, r0
 800e7c0:	460d      	mov	r5, r1
 800e7c2:	f7f1 fd6b 	bl	800029c <__adddf3>
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	460b      	mov	r3, r1
 800e7ca:	e9ca 2300 	strd	r2, r3, [sl]
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	4629      	mov	r1, r5
 800e7d2:	f7f1 fd61 	bl	8000298 <__aeabi_dsub>
 800e7d6:	a37e      	add	r3, pc, #504	; (adr r3, 800e9d0 <__ieee754_rem_pio2+0x318>)
 800e7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7dc:	e7e0      	b.n	800e7a0 <__ieee754_rem_pio2+0xe8>
 800e7de:	4b87      	ldr	r3, [pc, #540]	; (800e9fc <__ieee754_rem_pio2+0x344>)
 800e7e0:	4598      	cmp	r8, r3
 800e7e2:	f300 80d9 	bgt.w	800e998 <__ieee754_rem_pio2+0x2e0>
 800e7e6:	f7ff fbbb 	bl	800df60 <fabs>
 800e7ea:	ec55 4b10 	vmov	r4, r5, d0
 800e7ee:	ee10 0a10 	vmov	r0, s0
 800e7f2:	a379      	add	r3, pc, #484	; (adr r3, 800e9d8 <__ieee754_rem_pio2+0x320>)
 800e7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f8:	4629      	mov	r1, r5
 800e7fa:	f7f1 ff05 	bl	8000608 <__aeabi_dmul>
 800e7fe:	4b80      	ldr	r3, [pc, #512]	; (800ea00 <__ieee754_rem_pio2+0x348>)
 800e800:	2200      	movs	r2, #0
 800e802:	f7f1 fd4b 	bl	800029c <__adddf3>
 800e806:	f7f2 f9af 	bl	8000b68 <__aeabi_d2iz>
 800e80a:	4683      	mov	fp, r0
 800e80c:	f7f1 fe92 	bl	8000534 <__aeabi_i2d>
 800e810:	4602      	mov	r2, r0
 800e812:	460b      	mov	r3, r1
 800e814:	ec43 2b18 	vmov	d8, r2, r3
 800e818:	a367      	add	r3, pc, #412	; (adr r3, 800e9b8 <__ieee754_rem_pio2+0x300>)
 800e81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81e:	f7f1 fef3 	bl	8000608 <__aeabi_dmul>
 800e822:	4602      	mov	r2, r0
 800e824:	460b      	mov	r3, r1
 800e826:	4620      	mov	r0, r4
 800e828:	4629      	mov	r1, r5
 800e82a:	f7f1 fd35 	bl	8000298 <__aeabi_dsub>
 800e82e:	a364      	add	r3, pc, #400	; (adr r3, 800e9c0 <__ieee754_rem_pio2+0x308>)
 800e830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e834:	4606      	mov	r6, r0
 800e836:	460f      	mov	r7, r1
 800e838:	ec51 0b18 	vmov	r0, r1, d8
 800e83c:	f7f1 fee4 	bl	8000608 <__aeabi_dmul>
 800e840:	f1bb 0f1f 	cmp.w	fp, #31
 800e844:	4604      	mov	r4, r0
 800e846:	460d      	mov	r5, r1
 800e848:	dc0d      	bgt.n	800e866 <__ieee754_rem_pio2+0x1ae>
 800e84a:	4b6e      	ldr	r3, [pc, #440]	; (800ea04 <__ieee754_rem_pio2+0x34c>)
 800e84c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e854:	4543      	cmp	r3, r8
 800e856:	d006      	beq.n	800e866 <__ieee754_rem_pio2+0x1ae>
 800e858:	4622      	mov	r2, r4
 800e85a:	462b      	mov	r3, r5
 800e85c:	4630      	mov	r0, r6
 800e85e:	4639      	mov	r1, r7
 800e860:	f7f1 fd1a 	bl	8000298 <__aeabi_dsub>
 800e864:	e00f      	b.n	800e886 <__ieee754_rem_pio2+0x1ce>
 800e866:	462b      	mov	r3, r5
 800e868:	4622      	mov	r2, r4
 800e86a:	4630      	mov	r0, r6
 800e86c:	4639      	mov	r1, r7
 800e86e:	f7f1 fd13 	bl	8000298 <__aeabi_dsub>
 800e872:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e876:	9303      	str	r3, [sp, #12]
 800e878:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e87c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e880:	f1b8 0f10 	cmp.w	r8, #16
 800e884:	dc02      	bgt.n	800e88c <__ieee754_rem_pio2+0x1d4>
 800e886:	e9ca 0100 	strd	r0, r1, [sl]
 800e88a:	e039      	b.n	800e900 <__ieee754_rem_pio2+0x248>
 800e88c:	a34e      	add	r3, pc, #312	; (adr r3, 800e9c8 <__ieee754_rem_pio2+0x310>)
 800e88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e892:	ec51 0b18 	vmov	r0, r1, d8
 800e896:	f7f1 feb7 	bl	8000608 <__aeabi_dmul>
 800e89a:	4604      	mov	r4, r0
 800e89c:	460d      	mov	r5, r1
 800e89e:	4602      	mov	r2, r0
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	4630      	mov	r0, r6
 800e8a4:	4639      	mov	r1, r7
 800e8a6:	f7f1 fcf7 	bl	8000298 <__aeabi_dsub>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	4680      	mov	r8, r0
 800e8b0:	4689      	mov	r9, r1
 800e8b2:	4630      	mov	r0, r6
 800e8b4:	4639      	mov	r1, r7
 800e8b6:	f7f1 fcef 	bl	8000298 <__aeabi_dsub>
 800e8ba:	4622      	mov	r2, r4
 800e8bc:	462b      	mov	r3, r5
 800e8be:	f7f1 fceb 	bl	8000298 <__aeabi_dsub>
 800e8c2:	a343      	add	r3, pc, #268	; (adr r3, 800e9d0 <__ieee754_rem_pio2+0x318>)
 800e8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c8:	4604      	mov	r4, r0
 800e8ca:	460d      	mov	r5, r1
 800e8cc:	ec51 0b18 	vmov	r0, r1, d8
 800e8d0:	f7f1 fe9a 	bl	8000608 <__aeabi_dmul>
 800e8d4:	4622      	mov	r2, r4
 800e8d6:	462b      	mov	r3, r5
 800e8d8:	f7f1 fcde 	bl	8000298 <__aeabi_dsub>
 800e8dc:	4602      	mov	r2, r0
 800e8de:	460b      	mov	r3, r1
 800e8e0:	4604      	mov	r4, r0
 800e8e2:	460d      	mov	r5, r1
 800e8e4:	4640      	mov	r0, r8
 800e8e6:	4649      	mov	r1, r9
 800e8e8:	f7f1 fcd6 	bl	8000298 <__aeabi_dsub>
 800e8ec:	9a03      	ldr	r2, [sp, #12]
 800e8ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e8f2:	1ad3      	subs	r3, r2, r3
 800e8f4:	2b31      	cmp	r3, #49	; 0x31
 800e8f6:	dc24      	bgt.n	800e942 <__ieee754_rem_pio2+0x28a>
 800e8f8:	e9ca 0100 	strd	r0, r1, [sl]
 800e8fc:	4646      	mov	r6, r8
 800e8fe:	464f      	mov	r7, r9
 800e900:	e9da 8900 	ldrd	r8, r9, [sl]
 800e904:	4630      	mov	r0, r6
 800e906:	4642      	mov	r2, r8
 800e908:	464b      	mov	r3, r9
 800e90a:	4639      	mov	r1, r7
 800e90c:	f7f1 fcc4 	bl	8000298 <__aeabi_dsub>
 800e910:	462b      	mov	r3, r5
 800e912:	4622      	mov	r2, r4
 800e914:	f7f1 fcc0 	bl	8000298 <__aeabi_dsub>
 800e918:	9b02      	ldr	r3, [sp, #8]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e920:	f6bf af0a 	bge.w	800e738 <__ieee754_rem_pio2+0x80>
 800e924:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e928:	f8ca 3004 	str.w	r3, [sl, #4]
 800e92c:	f8ca 8000 	str.w	r8, [sl]
 800e930:	f8ca 0008 	str.w	r0, [sl, #8]
 800e934:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e938:	f8ca 300c 	str.w	r3, [sl, #12]
 800e93c:	f1cb 0b00 	rsb	fp, fp, #0
 800e940:	e6fa      	b.n	800e738 <__ieee754_rem_pio2+0x80>
 800e942:	a327      	add	r3, pc, #156	; (adr r3, 800e9e0 <__ieee754_rem_pio2+0x328>)
 800e944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e948:	ec51 0b18 	vmov	r0, r1, d8
 800e94c:	f7f1 fe5c 	bl	8000608 <__aeabi_dmul>
 800e950:	4604      	mov	r4, r0
 800e952:	460d      	mov	r5, r1
 800e954:	4602      	mov	r2, r0
 800e956:	460b      	mov	r3, r1
 800e958:	4640      	mov	r0, r8
 800e95a:	4649      	mov	r1, r9
 800e95c:	f7f1 fc9c 	bl	8000298 <__aeabi_dsub>
 800e960:	4602      	mov	r2, r0
 800e962:	460b      	mov	r3, r1
 800e964:	4606      	mov	r6, r0
 800e966:	460f      	mov	r7, r1
 800e968:	4640      	mov	r0, r8
 800e96a:	4649      	mov	r1, r9
 800e96c:	f7f1 fc94 	bl	8000298 <__aeabi_dsub>
 800e970:	4622      	mov	r2, r4
 800e972:	462b      	mov	r3, r5
 800e974:	f7f1 fc90 	bl	8000298 <__aeabi_dsub>
 800e978:	a31b      	add	r3, pc, #108	; (adr r3, 800e9e8 <__ieee754_rem_pio2+0x330>)
 800e97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97e:	4604      	mov	r4, r0
 800e980:	460d      	mov	r5, r1
 800e982:	ec51 0b18 	vmov	r0, r1, d8
 800e986:	f7f1 fe3f 	bl	8000608 <__aeabi_dmul>
 800e98a:	4622      	mov	r2, r4
 800e98c:	462b      	mov	r3, r5
 800e98e:	f7f1 fc83 	bl	8000298 <__aeabi_dsub>
 800e992:	4604      	mov	r4, r0
 800e994:	460d      	mov	r5, r1
 800e996:	e75f      	b.n	800e858 <__ieee754_rem_pio2+0x1a0>
 800e998:	4b1b      	ldr	r3, [pc, #108]	; (800ea08 <__ieee754_rem_pio2+0x350>)
 800e99a:	4598      	cmp	r8, r3
 800e99c:	dd36      	ble.n	800ea0c <__ieee754_rem_pio2+0x354>
 800e99e:	ee10 2a10 	vmov	r2, s0
 800e9a2:	462b      	mov	r3, r5
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	4629      	mov	r1, r5
 800e9a8:	f7f1 fc76 	bl	8000298 <__aeabi_dsub>
 800e9ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e9b0:	e9ca 0100 	strd	r0, r1, [sl]
 800e9b4:	e694      	b.n	800e6e0 <__ieee754_rem_pio2+0x28>
 800e9b6:	bf00      	nop
 800e9b8:	54400000 	.word	0x54400000
 800e9bc:	3ff921fb 	.word	0x3ff921fb
 800e9c0:	1a626331 	.word	0x1a626331
 800e9c4:	3dd0b461 	.word	0x3dd0b461
 800e9c8:	1a600000 	.word	0x1a600000
 800e9cc:	3dd0b461 	.word	0x3dd0b461
 800e9d0:	2e037073 	.word	0x2e037073
 800e9d4:	3ba3198a 	.word	0x3ba3198a
 800e9d8:	6dc9c883 	.word	0x6dc9c883
 800e9dc:	3fe45f30 	.word	0x3fe45f30
 800e9e0:	2e000000 	.word	0x2e000000
 800e9e4:	3ba3198a 	.word	0x3ba3198a
 800e9e8:	252049c1 	.word	0x252049c1
 800e9ec:	397b839a 	.word	0x397b839a
 800e9f0:	3fe921fb 	.word	0x3fe921fb
 800e9f4:	4002d97b 	.word	0x4002d97b
 800e9f8:	3ff921fb 	.word	0x3ff921fb
 800e9fc:	413921fb 	.word	0x413921fb
 800ea00:	3fe00000 	.word	0x3fe00000
 800ea04:	08010310 	.word	0x08010310
 800ea08:	7fefffff 	.word	0x7fefffff
 800ea0c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ea10:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ea14:	ee10 0a10 	vmov	r0, s0
 800ea18:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ea1c:	ee10 6a10 	vmov	r6, s0
 800ea20:	460f      	mov	r7, r1
 800ea22:	f7f2 f8a1 	bl	8000b68 <__aeabi_d2iz>
 800ea26:	f7f1 fd85 	bl	8000534 <__aeabi_i2d>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	460b      	mov	r3, r1
 800ea2e:	4630      	mov	r0, r6
 800ea30:	4639      	mov	r1, r7
 800ea32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ea36:	f7f1 fc2f 	bl	8000298 <__aeabi_dsub>
 800ea3a:	4b22      	ldr	r3, [pc, #136]	; (800eac4 <__ieee754_rem_pio2+0x40c>)
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	f7f1 fde3 	bl	8000608 <__aeabi_dmul>
 800ea42:	460f      	mov	r7, r1
 800ea44:	4606      	mov	r6, r0
 800ea46:	f7f2 f88f 	bl	8000b68 <__aeabi_d2iz>
 800ea4a:	f7f1 fd73 	bl	8000534 <__aeabi_i2d>
 800ea4e:	4602      	mov	r2, r0
 800ea50:	460b      	mov	r3, r1
 800ea52:	4630      	mov	r0, r6
 800ea54:	4639      	mov	r1, r7
 800ea56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ea5a:	f7f1 fc1d 	bl	8000298 <__aeabi_dsub>
 800ea5e:	4b19      	ldr	r3, [pc, #100]	; (800eac4 <__ieee754_rem_pio2+0x40c>)
 800ea60:	2200      	movs	r2, #0
 800ea62:	f7f1 fdd1 	bl	8000608 <__aeabi_dmul>
 800ea66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ea6a:	ad04      	add	r5, sp, #16
 800ea6c:	f04f 0803 	mov.w	r8, #3
 800ea70:	46a9      	mov	r9, r5
 800ea72:	2600      	movs	r6, #0
 800ea74:	2700      	movs	r7, #0
 800ea76:	4632      	mov	r2, r6
 800ea78:	463b      	mov	r3, r7
 800ea7a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ea7e:	46c3      	mov	fp, r8
 800ea80:	3d08      	subs	r5, #8
 800ea82:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea86:	f7f2 f827 	bl	8000ad8 <__aeabi_dcmpeq>
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	d1f3      	bne.n	800ea76 <__ieee754_rem_pio2+0x3be>
 800ea8e:	4b0e      	ldr	r3, [pc, #56]	; (800eac8 <__ieee754_rem_pio2+0x410>)
 800ea90:	9301      	str	r3, [sp, #4]
 800ea92:	2302      	movs	r3, #2
 800ea94:	9300      	str	r3, [sp, #0]
 800ea96:	4622      	mov	r2, r4
 800ea98:	465b      	mov	r3, fp
 800ea9a:	4651      	mov	r1, sl
 800ea9c:	4648      	mov	r0, r9
 800ea9e:	f000 f993 	bl	800edc8 <__kernel_rem_pio2>
 800eaa2:	9b02      	ldr	r3, [sp, #8]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	4683      	mov	fp, r0
 800eaa8:	f6bf ae46 	bge.w	800e738 <__ieee754_rem_pio2+0x80>
 800eaac:	f8da 3004 	ldr.w	r3, [sl, #4]
 800eab0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eab4:	f8ca 3004 	str.w	r3, [sl, #4]
 800eab8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800eabc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eac0:	e73a      	b.n	800e938 <__ieee754_rem_pio2+0x280>
 800eac2:	bf00      	nop
 800eac4:	41700000 	.word	0x41700000
 800eac8:	08010390 	.word	0x08010390

0800eacc <__ieee754_sqrt>:
 800eacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ead0:	ec55 4b10 	vmov	r4, r5, d0
 800ead4:	4e56      	ldr	r6, [pc, #344]	; (800ec30 <__ieee754_sqrt+0x164>)
 800ead6:	43ae      	bics	r6, r5
 800ead8:	ee10 0a10 	vmov	r0, s0
 800eadc:	ee10 3a10 	vmov	r3, s0
 800eae0:	4629      	mov	r1, r5
 800eae2:	462a      	mov	r2, r5
 800eae4:	d110      	bne.n	800eb08 <__ieee754_sqrt+0x3c>
 800eae6:	ee10 2a10 	vmov	r2, s0
 800eaea:	462b      	mov	r3, r5
 800eaec:	f7f1 fd8c 	bl	8000608 <__aeabi_dmul>
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	460b      	mov	r3, r1
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	4629      	mov	r1, r5
 800eaf8:	f7f1 fbd0 	bl	800029c <__adddf3>
 800eafc:	4604      	mov	r4, r0
 800eafe:	460d      	mov	r5, r1
 800eb00:	ec45 4b10 	vmov	d0, r4, r5
 800eb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb08:	2d00      	cmp	r5, #0
 800eb0a:	dc10      	bgt.n	800eb2e <__ieee754_sqrt+0x62>
 800eb0c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800eb10:	4330      	orrs	r0, r6
 800eb12:	d0f5      	beq.n	800eb00 <__ieee754_sqrt+0x34>
 800eb14:	b15d      	cbz	r5, 800eb2e <__ieee754_sqrt+0x62>
 800eb16:	ee10 2a10 	vmov	r2, s0
 800eb1a:	462b      	mov	r3, r5
 800eb1c:	ee10 0a10 	vmov	r0, s0
 800eb20:	f7f1 fbba 	bl	8000298 <__aeabi_dsub>
 800eb24:	4602      	mov	r2, r0
 800eb26:	460b      	mov	r3, r1
 800eb28:	f7f1 fe98 	bl	800085c <__aeabi_ddiv>
 800eb2c:	e7e6      	b.n	800eafc <__ieee754_sqrt+0x30>
 800eb2e:	1509      	asrs	r1, r1, #20
 800eb30:	d076      	beq.n	800ec20 <__ieee754_sqrt+0x154>
 800eb32:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800eb36:	07ce      	lsls	r6, r1, #31
 800eb38:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800eb3c:	bf5e      	ittt	pl
 800eb3e:	0fda      	lsrpl	r2, r3, #31
 800eb40:	005b      	lslpl	r3, r3, #1
 800eb42:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800eb46:	0fda      	lsrs	r2, r3, #31
 800eb48:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800eb4c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800eb50:	2000      	movs	r0, #0
 800eb52:	106d      	asrs	r5, r5, #1
 800eb54:	005b      	lsls	r3, r3, #1
 800eb56:	f04f 0e16 	mov.w	lr, #22
 800eb5a:	4684      	mov	ip, r0
 800eb5c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eb60:	eb0c 0401 	add.w	r4, ip, r1
 800eb64:	4294      	cmp	r4, r2
 800eb66:	bfde      	ittt	le
 800eb68:	1b12      	suble	r2, r2, r4
 800eb6a:	eb04 0c01 	addle.w	ip, r4, r1
 800eb6e:	1840      	addle	r0, r0, r1
 800eb70:	0052      	lsls	r2, r2, #1
 800eb72:	f1be 0e01 	subs.w	lr, lr, #1
 800eb76:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800eb7a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800eb7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eb82:	d1ed      	bne.n	800eb60 <__ieee754_sqrt+0x94>
 800eb84:	4671      	mov	r1, lr
 800eb86:	2720      	movs	r7, #32
 800eb88:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800eb8c:	4562      	cmp	r2, ip
 800eb8e:	eb04 060e 	add.w	r6, r4, lr
 800eb92:	dc02      	bgt.n	800eb9a <__ieee754_sqrt+0xce>
 800eb94:	d113      	bne.n	800ebbe <__ieee754_sqrt+0xf2>
 800eb96:	429e      	cmp	r6, r3
 800eb98:	d811      	bhi.n	800ebbe <__ieee754_sqrt+0xf2>
 800eb9a:	2e00      	cmp	r6, #0
 800eb9c:	eb06 0e04 	add.w	lr, r6, r4
 800eba0:	da43      	bge.n	800ec2a <__ieee754_sqrt+0x15e>
 800eba2:	f1be 0f00 	cmp.w	lr, #0
 800eba6:	db40      	blt.n	800ec2a <__ieee754_sqrt+0x15e>
 800eba8:	f10c 0801 	add.w	r8, ip, #1
 800ebac:	eba2 020c 	sub.w	r2, r2, ip
 800ebb0:	429e      	cmp	r6, r3
 800ebb2:	bf88      	it	hi
 800ebb4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ebb8:	1b9b      	subs	r3, r3, r6
 800ebba:	4421      	add	r1, r4
 800ebbc:	46c4      	mov	ip, r8
 800ebbe:	0052      	lsls	r2, r2, #1
 800ebc0:	3f01      	subs	r7, #1
 800ebc2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ebc6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ebca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ebce:	d1dd      	bne.n	800eb8c <__ieee754_sqrt+0xc0>
 800ebd0:	4313      	orrs	r3, r2
 800ebd2:	d006      	beq.n	800ebe2 <__ieee754_sqrt+0x116>
 800ebd4:	1c4c      	adds	r4, r1, #1
 800ebd6:	bf13      	iteet	ne
 800ebd8:	3101      	addne	r1, #1
 800ebda:	3001      	addeq	r0, #1
 800ebdc:	4639      	moveq	r1, r7
 800ebde:	f021 0101 	bicne.w	r1, r1, #1
 800ebe2:	1043      	asrs	r3, r0, #1
 800ebe4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ebe8:	0849      	lsrs	r1, r1, #1
 800ebea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ebee:	07c2      	lsls	r2, r0, #31
 800ebf0:	bf48      	it	mi
 800ebf2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ebf6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ebfa:	460c      	mov	r4, r1
 800ebfc:	463d      	mov	r5, r7
 800ebfe:	e77f      	b.n	800eb00 <__ieee754_sqrt+0x34>
 800ec00:	0ada      	lsrs	r2, r3, #11
 800ec02:	3815      	subs	r0, #21
 800ec04:	055b      	lsls	r3, r3, #21
 800ec06:	2a00      	cmp	r2, #0
 800ec08:	d0fa      	beq.n	800ec00 <__ieee754_sqrt+0x134>
 800ec0a:	02d7      	lsls	r7, r2, #11
 800ec0c:	d50a      	bpl.n	800ec24 <__ieee754_sqrt+0x158>
 800ec0e:	f1c1 0420 	rsb	r4, r1, #32
 800ec12:	fa23 f404 	lsr.w	r4, r3, r4
 800ec16:	1e4d      	subs	r5, r1, #1
 800ec18:	408b      	lsls	r3, r1
 800ec1a:	4322      	orrs	r2, r4
 800ec1c:	1b41      	subs	r1, r0, r5
 800ec1e:	e788      	b.n	800eb32 <__ieee754_sqrt+0x66>
 800ec20:	4608      	mov	r0, r1
 800ec22:	e7f0      	b.n	800ec06 <__ieee754_sqrt+0x13a>
 800ec24:	0052      	lsls	r2, r2, #1
 800ec26:	3101      	adds	r1, #1
 800ec28:	e7ef      	b.n	800ec0a <__ieee754_sqrt+0x13e>
 800ec2a:	46e0      	mov	r8, ip
 800ec2c:	e7be      	b.n	800ebac <__ieee754_sqrt+0xe0>
 800ec2e:	bf00      	nop
 800ec30:	7ff00000 	.word	0x7ff00000
 800ec34:	00000000 	.word	0x00000000

0800ec38 <__kernel_cos>:
 800ec38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec3c:	ec57 6b10 	vmov	r6, r7, d0
 800ec40:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ec44:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ec48:	ed8d 1b00 	vstr	d1, [sp]
 800ec4c:	da07      	bge.n	800ec5e <__kernel_cos+0x26>
 800ec4e:	ee10 0a10 	vmov	r0, s0
 800ec52:	4639      	mov	r1, r7
 800ec54:	f7f1 ff88 	bl	8000b68 <__aeabi_d2iz>
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	f000 8088 	beq.w	800ed6e <__kernel_cos+0x136>
 800ec5e:	4632      	mov	r2, r6
 800ec60:	463b      	mov	r3, r7
 800ec62:	4630      	mov	r0, r6
 800ec64:	4639      	mov	r1, r7
 800ec66:	f7f1 fccf 	bl	8000608 <__aeabi_dmul>
 800ec6a:	4b51      	ldr	r3, [pc, #324]	; (800edb0 <__kernel_cos+0x178>)
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	4604      	mov	r4, r0
 800ec70:	460d      	mov	r5, r1
 800ec72:	f7f1 fcc9 	bl	8000608 <__aeabi_dmul>
 800ec76:	a340      	add	r3, pc, #256	; (adr r3, 800ed78 <__kernel_cos+0x140>)
 800ec78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7c:	4682      	mov	sl, r0
 800ec7e:	468b      	mov	fp, r1
 800ec80:	4620      	mov	r0, r4
 800ec82:	4629      	mov	r1, r5
 800ec84:	f7f1 fcc0 	bl	8000608 <__aeabi_dmul>
 800ec88:	a33d      	add	r3, pc, #244	; (adr r3, 800ed80 <__kernel_cos+0x148>)
 800ec8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8e:	f7f1 fb05 	bl	800029c <__adddf3>
 800ec92:	4622      	mov	r2, r4
 800ec94:	462b      	mov	r3, r5
 800ec96:	f7f1 fcb7 	bl	8000608 <__aeabi_dmul>
 800ec9a:	a33b      	add	r3, pc, #236	; (adr r3, 800ed88 <__kernel_cos+0x150>)
 800ec9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca0:	f7f1 fafa 	bl	8000298 <__aeabi_dsub>
 800eca4:	4622      	mov	r2, r4
 800eca6:	462b      	mov	r3, r5
 800eca8:	f7f1 fcae 	bl	8000608 <__aeabi_dmul>
 800ecac:	a338      	add	r3, pc, #224	; (adr r3, 800ed90 <__kernel_cos+0x158>)
 800ecae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb2:	f7f1 faf3 	bl	800029c <__adddf3>
 800ecb6:	4622      	mov	r2, r4
 800ecb8:	462b      	mov	r3, r5
 800ecba:	f7f1 fca5 	bl	8000608 <__aeabi_dmul>
 800ecbe:	a336      	add	r3, pc, #216	; (adr r3, 800ed98 <__kernel_cos+0x160>)
 800ecc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc4:	f7f1 fae8 	bl	8000298 <__aeabi_dsub>
 800ecc8:	4622      	mov	r2, r4
 800ecca:	462b      	mov	r3, r5
 800eccc:	f7f1 fc9c 	bl	8000608 <__aeabi_dmul>
 800ecd0:	a333      	add	r3, pc, #204	; (adr r3, 800eda0 <__kernel_cos+0x168>)
 800ecd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd6:	f7f1 fae1 	bl	800029c <__adddf3>
 800ecda:	4622      	mov	r2, r4
 800ecdc:	462b      	mov	r3, r5
 800ecde:	f7f1 fc93 	bl	8000608 <__aeabi_dmul>
 800ece2:	4622      	mov	r2, r4
 800ece4:	462b      	mov	r3, r5
 800ece6:	f7f1 fc8f 	bl	8000608 <__aeabi_dmul>
 800ecea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecee:	4604      	mov	r4, r0
 800ecf0:	460d      	mov	r5, r1
 800ecf2:	4630      	mov	r0, r6
 800ecf4:	4639      	mov	r1, r7
 800ecf6:	f7f1 fc87 	bl	8000608 <__aeabi_dmul>
 800ecfa:	460b      	mov	r3, r1
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	4629      	mov	r1, r5
 800ed00:	4620      	mov	r0, r4
 800ed02:	f7f1 fac9 	bl	8000298 <__aeabi_dsub>
 800ed06:	4b2b      	ldr	r3, [pc, #172]	; (800edb4 <__kernel_cos+0x17c>)
 800ed08:	4598      	cmp	r8, r3
 800ed0a:	4606      	mov	r6, r0
 800ed0c:	460f      	mov	r7, r1
 800ed0e:	dc10      	bgt.n	800ed32 <__kernel_cos+0xfa>
 800ed10:	4602      	mov	r2, r0
 800ed12:	460b      	mov	r3, r1
 800ed14:	4650      	mov	r0, sl
 800ed16:	4659      	mov	r1, fp
 800ed18:	f7f1 fabe 	bl	8000298 <__aeabi_dsub>
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	4926      	ldr	r1, [pc, #152]	; (800edb8 <__kernel_cos+0x180>)
 800ed20:	4602      	mov	r2, r0
 800ed22:	2000      	movs	r0, #0
 800ed24:	f7f1 fab8 	bl	8000298 <__aeabi_dsub>
 800ed28:	ec41 0b10 	vmov	d0, r0, r1
 800ed2c:	b003      	add	sp, #12
 800ed2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed32:	4b22      	ldr	r3, [pc, #136]	; (800edbc <__kernel_cos+0x184>)
 800ed34:	4920      	ldr	r1, [pc, #128]	; (800edb8 <__kernel_cos+0x180>)
 800ed36:	4598      	cmp	r8, r3
 800ed38:	bfcc      	ite	gt
 800ed3a:	4d21      	ldrgt	r5, [pc, #132]	; (800edc0 <__kernel_cos+0x188>)
 800ed3c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ed40:	2400      	movs	r4, #0
 800ed42:	4622      	mov	r2, r4
 800ed44:	462b      	mov	r3, r5
 800ed46:	2000      	movs	r0, #0
 800ed48:	f7f1 faa6 	bl	8000298 <__aeabi_dsub>
 800ed4c:	4622      	mov	r2, r4
 800ed4e:	4680      	mov	r8, r0
 800ed50:	4689      	mov	r9, r1
 800ed52:	462b      	mov	r3, r5
 800ed54:	4650      	mov	r0, sl
 800ed56:	4659      	mov	r1, fp
 800ed58:	f7f1 fa9e 	bl	8000298 <__aeabi_dsub>
 800ed5c:	4632      	mov	r2, r6
 800ed5e:	463b      	mov	r3, r7
 800ed60:	f7f1 fa9a 	bl	8000298 <__aeabi_dsub>
 800ed64:	4602      	mov	r2, r0
 800ed66:	460b      	mov	r3, r1
 800ed68:	4640      	mov	r0, r8
 800ed6a:	4649      	mov	r1, r9
 800ed6c:	e7da      	b.n	800ed24 <__kernel_cos+0xec>
 800ed6e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800eda8 <__kernel_cos+0x170>
 800ed72:	e7db      	b.n	800ed2c <__kernel_cos+0xf4>
 800ed74:	f3af 8000 	nop.w
 800ed78:	be8838d4 	.word	0xbe8838d4
 800ed7c:	bda8fae9 	.word	0xbda8fae9
 800ed80:	bdb4b1c4 	.word	0xbdb4b1c4
 800ed84:	3e21ee9e 	.word	0x3e21ee9e
 800ed88:	809c52ad 	.word	0x809c52ad
 800ed8c:	3e927e4f 	.word	0x3e927e4f
 800ed90:	19cb1590 	.word	0x19cb1590
 800ed94:	3efa01a0 	.word	0x3efa01a0
 800ed98:	16c15177 	.word	0x16c15177
 800ed9c:	3f56c16c 	.word	0x3f56c16c
 800eda0:	5555554c 	.word	0x5555554c
 800eda4:	3fa55555 	.word	0x3fa55555
 800eda8:	00000000 	.word	0x00000000
 800edac:	3ff00000 	.word	0x3ff00000
 800edb0:	3fe00000 	.word	0x3fe00000
 800edb4:	3fd33332 	.word	0x3fd33332
 800edb8:	3ff00000 	.word	0x3ff00000
 800edbc:	3fe90000 	.word	0x3fe90000
 800edc0:	3fd20000 	.word	0x3fd20000
 800edc4:	00000000 	.word	0x00000000

0800edc8 <__kernel_rem_pio2>:
 800edc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edcc:	ed2d 8b02 	vpush	{d8}
 800edd0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800edd4:	f112 0f14 	cmn.w	r2, #20
 800edd8:	9308      	str	r3, [sp, #32]
 800edda:	9101      	str	r1, [sp, #4]
 800eddc:	4bc6      	ldr	r3, [pc, #792]	; (800f0f8 <__kernel_rem_pio2+0x330>)
 800edde:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ede0:	9009      	str	r0, [sp, #36]	; 0x24
 800ede2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ede6:	9304      	str	r3, [sp, #16]
 800ede8:	9b08      	ldr	r3, [sp, #32]
 800edea:	f103 33ff 	add.w	r3, r3, #4294967295
 800edee:	bfa8      	it	ge
 800edf0:	1ed4      	subge	r4, r2, #3
 800edf2:	9306      	str	r3, [sp, #24]
 800edf4:	bfb2      	itee	lt
 800edf6:	2400      	movlt	r4, #0
 800edf8:	2318      	movge	r3, #24
 800edfa:	fb94 f4f3 	sdivge	r4, r4, r3
 800edfe:	f06f 0317 	mvn.w	r3, #23
 800ee02:	fb04 3303 	mla	r3, r4, r3, r3
 800ee06:	eb03 0a02 	add.w	sl, r3, r2
 800ee0a:	9b04      	ldr	r3, [sp, #16]
 800ee0c:	9a06      	ldr	r2, [sp, #24]
 800ee0e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f0e8 <__kernel_rem_pio2+0x320>
 800ee12:	eb03 0802 	add.w	r8, r3, r2
 800ee16:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ee18:	1aa7      	subs	r7, r4, r2
 800ee1a:	ae20      	add	r6, sp, #128	; 0x80
 800ee1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ee20:	2500      	movs	r5, #0
 800ee22:	4545      	cmp	r5, r8
 800ee24:	dd18      	ble.n	800ee58 <__kernel_rem_pio2+0x90>
 800ee26:	9b08      	ldr	r3, [sp, #32]
 800ee28:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ee2c:	aa20      	add	r2, sp, #128	; 0x80
 800ee2e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800f0e8 <__kernel_rem_pio2+0x320>
 800ee32:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ee36:	f1c3 0301 	rsb	r3, r3, #1
 800ee3a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ee3e:	9307      	str	r3, [sp, #28]
 800ee40:	9b07      	ldr	r3, [sp, #28]
 800ee42:	9a04      	ldr	r2, [sp, #16]
 800ee44:	4443      	add	r3, r8
 800ee46:	429a      	cmp	r2, r3
 800ee48:	db2f      	blt.n	800eeaa <__kernel_rem_pio2+0xe2>
 800ee4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ee4e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ee52:	462f      	mov	r7, r5
 800ee54:	2600      	movs	r6, #0
 800ee56:	e01b      	b.n	800ee90 <__kernel_rem_pio2+0xc8>
 800ee58:	42ef      	cmn	r7, r5
 800ee5a:	d407      	bmi.n	800ee6c <__kernel_rem_pio2+0xa4>
 800ee5c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ee60:	f7f1 fb68 	bl	8000534 <__aeabi_i2d>
 800ee64:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ee68:	3501      	adds	r5, #1
 800ee6a:	e7da      	b.n	800ee22 <__kernel_rem_pio2+0x5a>
 800ee6c:	ec51 0b18 	vmov	r0, r1, d8
 800ee70:	e7f8      	b.n	800ee64 <__kernel_rem_pio2+0x9c>
 800ee72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee76:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ee7a:	f7f1 fbc5 	bl	8000608 <__aeabi_dmul>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	460b      	mov	r3, r1
 800ee82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee86:	f7f1 fa09 	bl	800029c <__adddf3>
 800ee8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee8e:	3601      	adds	r6, #1
 800ee90:	9b06      	ldr	r3, [sp, #24]
 800ee92:	429e      	cmp	r6, r3
 800ee94:	f1a7 0708 	sub.w	r7, r7, #8
 800ee98:	ddeb      	ble.n	800ee72 <__kernel_rem_pio2+0xaa>
 800ee9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee9e:	3508      	adds	r5, #8
 800eea0:	ecab 7b02 	vstmia	fp!, {d7}
 800eea4:	f108 0801 	add.w	r8, r8, #1
 800eea8:	e7ca      	b.n	800ee40 <__kernel_rem_pio2+0x78>
 800eeaa:	9b04      	ldr	r3, [sp, #16]
 800eeac:	aa0c      	add	r2, sp, #48	; 0x30
 800eeae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eeb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800eeb4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800eeb6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800eeba:	9c04      	ldr	r4, [sp, #16]
 800eebc:	930a      	str	r3, [sp, #40]	; 0x28
 800eebe:	ab98      	add	r3, sp, #608	; 0x260
 800eec0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eec4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800eec8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800eecc:	f8cd b008 	str.w	fp, [sp, #8]
 800eed0:	4625      	mov	r5, r4
 800eed2:	2d00      	cmp	r5, #0
 800eed4:	dc78      	bgt.n	800efc8 <__kernel_rem_pio2+0x200>
 800eed6:	ec47 6b10 	vmov	d0, r6, r7
 800eeda:	4650      	mov	r0, sl
 800eedc:	f000 fb74 	bl	800f5c8 <scalbn>
 800eee0:	ec57 6b10 	vmov	r6, r7, d0
 800eee4:	2200      	movs	r2, #0
 800eee6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800eeea:	ee10 0a10 	vmov	r0, s0
 800eeee:	4639      	mov	r1, r7
 800eef0:	f7f1 fb8a 	bl	8000608 <__aeabi_dmul>
 800eef4:	ec41 0b10 	vmov	d0, r0, r1
 800eef8:	f7ff f83e 	bl	800df78 <floor>
 800eefc:	4b7f      	ldr	r3, [pc, #508]	; (800f0fc <__kernel_rem_pio2+0x334>)
 800eefe:	ec51 0b10 	vmov	r0, r1, d0
 800ef02:	2200      	movs	r2, #0
 800ef04:	f7f1 fb80 	bl	8000608 <__aeabi_dmul>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	4630      	mov	r0, r6
 800ef0e:	4639      	mov	r1, r7
 800ef10:	f7f1 f9c2 	bl	8000298 <__aeabi_dsub>
 800ef14:	460f      	mov	r7, r1
 800ef16:	4606      	mov	r6, r0
 800ef18:	f7f1 fe26 	bl	8000b68 <__aeabi_d2iz>
 800ef1c:	9007      	str	r0, [sp, #28]
 800ef1e:	f7f1 fb09 	bl	8000534 <__aeabi_i2d>
 800ef22:	4602      	mov	r2, r0
 800ef24:	460b      	mov	r3, r1
 800ef26:	4630      	mov	r0, r6
 800ef28:	4639      	mov	r1, r7
 800ef2a:	f7f1 f9b5 	bl	8000298 <__aeabi_dsub>
 800ef2e:	f1ba 0f00 	cmp.w	sl, #0
 800ef32:	4606      	mov	r6, r0
 800ef34:	460f      	mov	r7, r1
 800ef36:	dd70      	ble.n	800f01a <__kernel_rem_pio2+0x252>
 800ef38:	1e62      	subs	r2, r4, #1
 800ef3a:	ab0c      	add	r3, sp, #48	; 0x30
 800ef3c:	9d07      	ldr	r5, [sp, #28]
 800ef3e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ef42:	f1ca 0118 	rsb	r1, sl, #24
 800ef46:	fa40 f301 	asr.w	r3, r0, r1
 800ef4a:	441d      	add	r5, r3
 800ef4c:	408b      	lsls	r3, r1
 800ef4e:	1ac0      	subs	r0, r0, r3
 800ef50:	ab0c      	add	r3, sp, #48	; 0x30
 800ef52:	9507      	str	r5, [sp, #28]
 800ef54:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ef58:	f1ca 0317 	rsb	r3, sl, #23
 800ef5c:	fa40 f303 	asr.w	r3, r0, r3
 800ef60:	9302      	str	r3, [sp, #8]
 800ef62:	9b02      	ldr	r3, [sp, #8]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	dd66      	ble.n	800f036 <__kernel_rem_pio2+0x26e>
 800ef68:	9b07      	ldr	r3, [sp, #28]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	9307      	str	r3, [sp, #28]
 800ef70:	4615      	mov	r5, r2
 800ef72:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ef76:	4294      	cmp	r4, r2
 800ef78:	f300 8099 	bgt.w	800f0ae <__kernel_rem_pio2+0x2e6>
 800ef7c:	f1ba 0f00 	cmp.w	sl, #0
 800ef80:	dd07      	ble.n	800ef92 <__kernel_rem_pio2+0x1ca>
 800ef82:	f1ba 0f01 	cmp.w	sl, #1
 800ef86:	f000 80a5 	beq.w	800f0d4 <__kernel_rem_pio2+0x30c>
 800ef8a:	f1ba 0f02 	cmp.w	sl, #2
 800ef8e:	f000 80c1 	beq.w	800f114 <__kernel_rem_pio2+0x34c>
 800ef92:	9b02      	ldr	r3, [sp, #8]
 800ef94:	2b02      	cmp	r3, #2
 800ef96:	d14e      	bne.n	800f036 <__kernel_rem_pio2+0x26e>
 800ef98:	4632      	mov	r2, r6
 800ef9a:	463b      	mov	r3, r7
 800ef9c:	4958      	ldr	r1, [pc, #352]	; (800f100 <__kernel_rem_pio2+0x338>)
 800ef9e:	2000      	movs	r0, #0
 800efa0:	f7f1 f97a 	bl	8000298 <__aeabi_dsub>
 800efa4:	4606      	mov	r6, r0
 800efa6:	460f      	mov	r7, r1
 800efa8:	2d00      	cmp	r5, #0
 800efaa:	d044      	beq.n	800f036 <__kernel_rem_pio2+0x26e>
 800efac:	4650      	mov	r0, sl
 800efae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f0f0 <__kernel_rem_pio2+0x328>
 800efb2:	f000 fb09 	bl	800f5c8 <scalbn>
 800efb6:	4630      	mov	r0, r6
 800efb8:	4639      	mov	r1, r7
 800efba:	ec53 2b10 	vmov	r2, r3, d0
 800efbe:	f7f1 f96b 	bl	8000298 <__aeabi_dsub>
 800efc2:	4606      	mov	r6, r0
 800efc4:	460f      	mov	r7, r1
 800efc6:	e036      	b.n	800f036 <__kernel_rem_pio2+0x26e>
 800efc8:	4b4e      	ldr	r3, [pc, #312]	; (800f104 <__kernel_rem_pio2+0x33c>)
 800efca:	2200      	movs	r2, #0
 800efcc:	4630      	mov	r0, r6
 800efce:	4639      	mov	r1, r7
 800efd0:	f7f1 fb1a 	bl	8000608 <__aeabi_dmul>
 800efd4:	f7f1 fdc8 	bl	8000b68 <__aeabi_d2iz>
 800efd8:	f7f1 faac 	bl	8000534 <__aeabi_i2d>
 800efdc:	4b4a      	ldr	r3, [pc, #296]	; (800f108 <__kernel_rem_pio2+0x340>)
 800efde:	2200      	movs	r2, #0
 800efe0:	4680      	mov	r8, r0
 800efe2:	4689      	mov	r9, r1
 800efe4:	f7f1 fb10 	bl	8000608 <__aeabi_dmul>
 800efe8:	4602      	mov	r2, r0
 800efea:	460b      	mov	r3, r1
 800efec:	4630      	mov	r0, r6
 800efee:	4639      	mov	r1, r7
 800eff0:	f7f1 f952 	bl	8000298 <__aeabi_dsub>
 800eff4:	f7f1 fdb8 	bl	8000b68 <__aeabi_d2iz>
 800eff8:	9b02      	ldr	r3, [sp, #8]
 800effa:	f843 0b04 	str.w	r0, [r3], #4
 800effe:	3d01      	subs	r5, #1
 800f000:	9302      	str	r3, [sp, #8]
 800f002:	ab70      	add	r3, sp, #448	; 0x1c0
 800f004:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00c:	4640      	mov	r0, r8
 800f00e:	4649      	mov	r1, r9
 800f010:	f7f1 f944 	bl	800029c <__adddf3>
 800f014:	4606      	mov	r6, r0
 800f016:	460f      	mov	r7, r1
 800f018:	e75b      	b.n	800eed2 <__kernel_rem_pio2+0x10a>
 800f01a:	d105      	bne.n	800f028 <__kernel_rem_pio2+0x260>
 800f01c:	1e63      	subs	r3, r4, #1
 800f01e:	aa0c      	add	r2, sp, #48	; 0x30
 800f020:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f024:	15c3      	asrs	r3, r0, #23
 800f026:	e79b      	b.n	800ef60 <__kernel_rem_pio2+0x198>
 800f028:	4b38      	ldr	r3, [pc, #224]	; (800f10c <__kernel_rem_pio2+0x344>)
 800f02a:	2200      	movs	r2, #0
 800f02c:	f7f1 fd72 	bl	8000b14 <__aeabi_dcmpge>
 800f030:	2800      	cmp	r0, #0
 800f032:	d139      	bne.n	800f0a8 <__kernel_rem_pio2+0x2e0>
 800f034:	9002      	str	r0, [sp, #8]
 800f036:	2200      	movs	r2, #0
 800f038:	2300      	movs	r3, #0
 800f03a:	4630      	mov	r0, r6
 800f03c:	4639      	mov	r1, r7
 800f03e:	f7f1 fd4b 	bl	8000ad8 <__aeabi_dcmpeq>
 800f042:	2800      	cmp	r0, #0
 800f044:	f000 80b4 	beq.w	800f1b0 <__kernel_rem_pio2+0x3e8>
 800f048:	f104 3bff 	add.w	fp, r4, #4294967295
 800f04c:	465b      	mov	r3, fp
 800f04e:	2200      	movs	r2, #0
 800f050:	9904      	ldr	r1, [sp, #16]
 800f052:	428b      	cmp	r3, r1
 800f054:	da65      	bge.n	800f122 <__kernel_rem_pio2+0x35a>
 800f056:	2a00      	cmp	r2, #0
 800f058:	d07b      	beq.n	800f152 <__kernel_rem_pio2+0x38a>
 800f05a:	ab0c      	add	r3, sp, #48	; 0x30
 800f05c:	f1aa 0a18 	sub.w	sl, sl, #24
 800f060:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f064:	2b00      	cmp	r3, #0
 800f066:	f000 80a0 	beq.w	800f1aa <__kernel_rem_pio2+0x3e2>
 800f06a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800f0f0 <__kernel_rem_pio2+0x328>
 800f06e:	4650      	mov	r0, sl
 800f070:	f000 faaa 	bl	800f5c8 <scalbn>
 800f074:	4f23      	ldr	r7, [pc, #140]	; (800f104 <__kernel_rem_pio2+0x33c>)
 800f076:	ec55 4b10 	vmov	r4, r5, d0
 800f07a:	46d8      	mov	r8, fp
 800f07c:	2600      	movs	r6, #0
 800f07e:	f1b8 0f00 	cmp.w	r8, #0
 800f082:	f280 80cf 	bge.w	800f224 <__kernel_rem_pio2+0x45c>
 800f086:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800f0e8 <__kernel_rem_pio2+0x320>
 800f08a:	465f      	mov	r7, fp
 800f08c:	f04f 0800 	mov.w	r8, #0
 800f090:	2f00      	cmp	r7, #0
 800f092:	f2c0 80fd 	blt.w	800f290 <__kernel_rem_pio2+0x4c8>
 800f096:	ab70      	add	r3, sp, #448	; 0x1c0
 800f098:	f8df a074 	ldr.w	sl, [pc, #116]	; 800f110 <__kernel_rem_pio2+0x348>
 800f09c:	ec55 4b18 	vmov	r4, r5, d8
 800f0a0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800f0a4:	2600      	movs	r6, #0
 800f0a6:	e0e5      	b.n	800f274 <__kernel_rem_pio2+0x4ac>
 800f0a8:	2302      	movs	r3, #2
 800f0aa:	9302      	str	r3, [sp, #8]
 800f0ac:	e75c      	b.n	800ef68 <__kernel_rem_pio2+0x1a0>
 800f0ae:	f8db 3000 	ldr.w	r3, [fp]
 800f0b2:	b955      	cbnz	r5, 800f0ca <__kernel_rem_pio2+0x302>
 800f0b4:	b123      	cbz	r3, 800f0c0 <__kernel_rem_pio2+0x2f8>
 800f0b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f0ba:	f8cb 3000 	str.w	r3, [fp]
 800f0be:	2301      	movs	r3, #1
 800f0c0:	3201      	adds	r2, #1
 800f0c2:	f10b 0b04 	add.w	fp, fp, #4
 800f0c6:	461d      	mov	r5, r3
 800f0c8:	e755      	b.n	800ef76 <__kernel_rem_pio2+0x1ae>
 800f0ca:	1acb      	subs	r3, r1, r3
 800f0cc:	f8cb 3000 	str.w	r3, [fp]
 800f0d0:	462b      	mov	r3, r5
 800f0d2:	e7f5      	b.n	800f0c0 <__kernel_rem_pio2+0x2f8>
 800f0d4:	1e62      	subs	r2, r4, #1
 800f0d6:	ab0c      	add	r3, sp, #48	; 0x30
 800f0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f0e0:	a90c      	add	r1, sp, #48	; 0x30
 800f0e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f0e6:	e754      	b.n	800ef92 <__kernel_rem_pio2+0x1ca>
	...
 800f0f4:	3ff00000 	.word	0x3ff00000
 800f0f8:	080104d8 	.word	0x080104d8
 800f0fc:	40200000 	.word	0x40200000
 800f100:	3ff00000 	.word	0x3ff00000
 800f104:	3e700000 	.word	0x3e700000
 800f108:	41700000 	.word	0x41700000
 800f10c:	3fe00000 	.word	0x3fe00000
 800f110:	08010498 	.word	0x08010498
 800f114:	1e62      	subs	r2, r4, #1
 800f116:	ab0c      	add	r3, sp, #48	; 0x30
 800f118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f11c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f120:	e7de      	b.n	800f0e0 <__kernel_rem_pio2+0x318>
 800f122:	a90c      	add	r1, sp, #48	; 0x30
 800f124:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f128:	3b01      	subs	r3, #1
 800f12a:	430a      	orrs	r2, r1
 800f12c:	e790      	b.n	800f050 <__kernel_rem_pio2+0x288>
 800f12e:	3301      	adds	r3, #1
 800f130:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f134:	2900      	cmp	r1, #0
 800f136:	d0fa      	beq.n	800f12e <__kernel_rem_pio2+0x366>
 800f138:	9a08      	ldr	r2, [sp, #32]
 800f13a:	18e3      	adds	r3, r4, r3
 800f13c:	18a6      	adds	r6, r4, r2
 800f13e:	aa20      	add	r2, sp, #128	; 0x80
 800f140:	1c65      	adds	r5, r4, #1
 800f142:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f146:	9302      	str	r3, [sp, #8]
 800f148:	9b02      	ldr	r3, [sp, #8]
 800f14a:	42ab      	cmp	r3, r5
 800f14c:	da04      	bge.n	800f158 <__kernel_rem_pio2+0x390>
 800f14e:	461c      	mov	r4, r3
 800f150:	e6b5      	b.n	800eebe <__kernel_rem_pio2+0xf6>
 800f152:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f154:	2301      	movs	r3, #1
 800f156:	e7eb      	b.n	800f130 <__kernel_rem_pio2+0x368>
 800f158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f15a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f15e:	f7f1 f9e9 	bl	8000534 <__aeabi_i2d>
 800f162:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f168:	46b3      	mov	fp, r6
 800f16a:	461c      	mov	r4, r3
 800f16c:	2700      	movs	r7, #0
 800f16e:	f04f 0800 	mov.w	r8, #0
 800f172:	f04f 0900 	mov.w	r9, #0
 800f176:	9b06      	ldr	r3, [sp, #24]
 800f178:	429f      	cmp	r7, r3
 800f17a:	dd06      	ble.n	800f18a <__kernel_rem_pio2+0x3c2>
 800f17c:	ab70      	add	r3, sp, #448	; 0x1c0
 800f17e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f182:	e9c3 8900 	strd	r8, r9, [r3]
 800f186:	3501      	adds	r5, #1
 800f188:	e7de      	b.n	800f148 <__kernel_rem_pio2+0x380>
 800f18a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f18e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f192:	f7f1 fa39 	bl	8000608 <__aeabi_dmul>
 800f196:	4602      	mov	r2, r0
 800f198:	460b      	mov	r3, r1
 800f19a:	4640      	mov	r0, r8
 800f19c:	4649      	mov	r1, r9
 800f19e:	f7f1 f87d 	bl	800029c <__adddf3>
 800f1a2:	3701      	adds	r7, #1
 800f1a4:	4680      	mov	r8, r0
 800f1a6:	4689      	mov	r9, r1
 800f1a8:	e7e5      	b.n	800f176 <__kernel_rem_pio2+0x3ae>
 800f1aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f1ae:	e754      	b.n	800f05a <__kernel_rem_pio2+0x292>
 800f1b0:	ec47 6b10 	vmov	d0, r6, r7
 800f1b4:	f1ca 0000 	rsb	r0, sl, #0
 800f1b8:	f000 fa06 	bl	800f5c8 <scalbn>
 800f1bc:	ec57 6b10 	vmov	r6, r7, d0
 800f1c0:	4b9f      	ldr	r3, [pc, #636]	; (800f440 <__kernel_rem_pio2+0x678>)
 800f1c2:	ee10 0a10 	vmov	r0, s0
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	4639      	mov	r1, r7
 800f1ca:	f7f1 fca3 	bl	8000b14 <__aeabi_dcmpge>
 800f1ce:	b300      	cbz	r0, 800f212 <__kernel_rem_pio2+0x44a>
 800f1d0:	4b9c      	ldr	r3, [pc, #624]	; (800f444 <__kernel_rem_pio2+0x67c>)
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	4630      	mov	r0, r6
 800f1d6:	4639      	mov	r1, r7
 800f1d8:	f7f1 fa16 	bl	8000608 <__aeabi_dmul>
 800f1dc:	f7f1 fcc4 	bl	8000b68 <__aeabi_d2iz>
 800f1e0:	4605      	mov	r5, r0
 800f1e2:	f7f1 f9a7 	bl	8000534 <__aeabi_i2d>
 800f1e6:	4b96      	ldr	r3, [pc, #600]	; (800f440 <__kernel_rem_pio2+0x678>)
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	f7f1 fa0d 	bl	8000608 <__aeabi_dmul>
 800f1ee:	460b      	mov	r3, r1
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	4639      	mov	r1, r7
 800f1f4:	4630      	mov	r0, r6
 800f1f6:	f7f1 f84f 	bl	8000298 <__aeabi_dsub>
 800f1fa:	f7f1 fcb5 	bl	8000b68 <__aeabi_d2iz>
 800f1fe:	f104 0b01 	add.w	fp, r4, #1
 800f202:	ab0c      	add	r3, sp, #48	; 0x30
 800f204:	f10a 0a18 	add.w	sl, sl, #24
 800f208:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f20c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800f210:	e72b      	b.n	800f06a <__kernel_rem_pio2+0x2a2>
 800f212:	4630      	mov	r0, r6
 800f214:	4639      	mov	r1, r7
 800f216:	f7f1 fca7 	bl	8000b68 <__aeabi_d2iz>
 800f21a:	ab0c      	add	r3, sp, #48	; 0x30
 800f21c:	46a3      	mov	fp, r4
 800f21e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f222:	e722      	b.n	800f06a <__kernel_rem_pio2+0x2a2>
 800f224:	ab70      	add	r3, sp, #448	; 0x1c0
 800f226:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800f22a:	ab0c      	add	r3, sp, #48	; 0x30
 800f22c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f230:	f7f1 f980 	bl	8000534 <__aeabi_i2d>
 800f234:	4622      	mov	r2, r4
 800f236:	462b      	mov	r3, r5
 800f238:	f7f1 f9e6 	bl	8000608 <__aeabi_dmul>
 800f23c:	4632      	mov	r2, r6
 800f23e:	e9c9 0100 	strd	r0, r1, [r9]
 800f242:	463b      	mov	r3, r7
 800f244:	4620      	mov	r0, r4
 800f246:	4629      	mov	r1, r5
 800f248:	f7f1 f9de 	bl	8000608 <__aeabi_dmul>
 800f24c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f250:	4604      	mov	r4, r0
 800f252:	460d      	mov	r5, r1
 800f254:	e713      	b.n	800f07e <__kernel_rem_pio2+0x2b6>
 800f256:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f25a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f25e:	f7f1 f9d3 	bl	8000608 <__aeabi_dmul>
 800f262:	4602      	mov	r2, r0
 800f264:	460b      	mov	r3, r1
 800f266:	4620      	mov	r0, r4
 800f268:	4629      	mov	r1, r5
 800f26a:	f7f1 f817 	bl	800029c <__adddf3>
 800f26e:	3601      	adds	r6, #1
 800f270:	4604      	mov	r4, r0
 800f272:	460d      	mov	r5, r1
 800f274:	9b04      	ldr	r3, [sp, #16]
 800f276:	429e      	cmp	r6, r3
 800f278:	dc01      	bgt.n	800f27e <__kernel_rem_pio2+0x4b6>
 800f27a:	45b0      	cmp	r8, r6
 800f27c:	daeb      	bge.n	800f256 <__kernel_rem_pio2+0x48e>
 800f27e:	ab48      	add	r3, sp, #288	; 0x120
 800f280:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f284:	e9c3 4500 	strd	r4, r5, [r3]
 800f288:	3f01      	subs	r7, #1
 800f28a:	f108 0801 	add.w	r8, r8, #1
 800f28e:	e6ff      	b.n	800f090 <__kernel_rem_pio2+0x2c8>
 800f290:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f292:	2b02      	cmp	r3, #2
 800f294:	dc0b      	bgt.n	800f2ae <__kernel_rem_pio2+0x4e6>
 800f296:	2b00      	cmp	r3, #0
 800f298:	dc6e      	bgt.n	800f378 <__kernel_rem_pio2+0x5b0>
 800f29a:	d045      	beq.n	800f328 <__kernel_rem_pio2+0x560>
 800f29c:	9b07      	ldr	r3, [sp, #28]
 800f29e:	f003 0007 	and.w	r0, r3, #7
 800f2a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f2a6:	ecbd 8b02 	vpop	{d8}
 800f2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f2b0:	2b03      	cmp	r3, #3
 800f2b2:	d1f3      	bne.n	800f29c <__kernel_rem_pio2+0x4d4>
 800f2b4:	ab48      	add	r3, sp, #288	; 0x120
 800f2b6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800f2ba:	46d0      	mov	r8, sl
 800f2bc:	46d9      	mov	r9, fp
 800f2be:	f1b9 0f00 	cmp.w	r9, #0
 800f2c2:	f1a8 0808 	sub.w	r8, r8, #8
 800f2c6:	dc64      	bgt.n	800f392 <__kernel_rem_pio2+0x5ca>
 800f2c8:	465c      	mov	r4, fp
 800f2ca:	2c01      	cmp	r4, #1
 800f2cc:	f1aa 0a08 	sub.w	sl, sl, #8
 800f2d0:	dc7e      	bgt.n	800f3d0 <__kernel_rem_pio2+0x608>
 800f2d2:	2000      	movs	r0, #0
 800f2d4:	2100      	movs	r1, #0
 800f2d6:	f1bb 0f01 	cmp.w	fp, #1
 800f2da:	f300 8097 	bgt.w	800f40c <__kernel_rem_pio2+0x644>
 800f2de:	9b02      	ldr	r3, [sp, #8]
 800f2e0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800f2e4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	f040 8099 	bne.w	800f420 <__kernel_rem_pio2+0x658>
 800f2ee:	9b01      	ldr	r3, [sp, #4]
 800f2f0:	e9c3 5600 	strd	r5, r6, [r3]
 800f2f4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f2f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f2fc:	e7ce      	b.n	800f29c <__kernel_rem_pio2+0x4d4>
 800f2fe:	ab48      	add	r3, sp, #288	; 0x120
 800f300:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f308:	f7f0 ffc8 	bl	800029c <__adddf3>
 800f30c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f310:	f1bb 0f00 	cmp.w	fp, #0
 800f314:	daf3      	bge.n	800f2fe <__kernel_rem_pio2+0x536>
 800f316:	9b02      	ldr	r3, [sp, #8]
 800f318:	b113      	cbz	r3, 800f320 <__kernel_rem_pio2+0x558>
 800f31a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f31e:	4619      	mov	r1, r3
 800f320:	9b01      	ldr	r3, [sp, #4]
 800f322:	e9c3 0100 	strd	r0, r1, [r3]
 800f326:	e7b9      	b.n	800f29c <__kernel_rem_pio2+0x4d4>
 800f328:	2000      	movs	r0, #0
 800f32a:	2100      	movs	r1, #0
 800f32c:	e7f0      	b.n	800f310 <__kernel_rem_pio2+0x548>
 800f32e:	ab48      	add	r3, sp, #288	; 0x120
 800f330:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f338:	f7f0 ffb0 	bl	800029c <__adddf3>
 800f33c:	3c01      	subs	r4, #1
 800f33e:	2c00      	cmp	r4, #0
 800f340:	daf5      	bge.n	800f32e <__kernel_rem_pio2+0x566>
 800f342:	9b02      	ldr	r3, [sp, #8]
 800f344:	b1e3      	cbz	r3, 800f380 <__kernel_rem_pio2+0x5b8>
 800f346:	4602      	mov	r2, r0
 800f348:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f34c:	9c01      	ldr	r4, [sp, #4]
 800f34e:	e9c4 2300 	strd	r2, r3, [r4]
 800f352:	4602      	mov	r2, r0
 800f354:	460b      	mov	r3, r1
 800f356:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f35a:	f7f0 ff9d 	bl	8000298 <__aeabi_dsub>
 800f35e:	ad4a      	add	r5, sp, #296	; 0x128
 800f360:	2401      	movs	r4, #1
 800f362:	45a3      	cmp	fp, r4
 800f364:	da0f      	bge.n	800f386 <__kernel_rem_pio2+0x5be>
 800f366:	9b02      	ldr	r3, [sp, #8]
 800f368:	b113      	cbz	r3, 800f370 <__kernel_rem_pio2+0x5a8>
 800f36a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f36e:	4619      	mov	r1, r3
 800f370:	9b01      	ldr	r3, [sp, #4]
 800f372:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f376:	e791      	b.n	800f29c <__kernel_rem_pio2+0x4d4>
 800f378:	465c      	mov	r4, fp
 800f37a:	2000      	movs	r0, #0
 800f37c:	2100      	movs	r1, #0
 800f37e:	e7de      	b.n	800f33e <__kernel_rem_pio2+0x576>
 800f380:	4602      	mov	r2, r0
 800f382:	460b      	mov	r3, r1
 800f384:	e7e2      	b.n	800f34c <__kernel_rem_pio2+0x584>
 800f386:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f38a:	f7f0 ff87 	bl	800029c <__adddf3>
 800f38e:	3401      	adds	r4, #1
 800f390:	e7e7      	b.n	800f362 <__kernel_rem_pio2+0x59a>
 800f392:	e9d8 4500 	ldrd	r4, r5, [r8]
 800f396:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800f39a:	4620      	mov	r0, r4
 800f39c:	4632      	mov	r2, r6
 800f39e:	463b      	mov	r3, r7
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	f7f0 ff7b 	bl	800029c <__adddf3>
 800f3a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3aa:	4602      	mov	r2, r0
 800f3ac:	460b      	mov	r3, r1
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	4629      	mov	r1, r5
 800f3b2:	f7f0 ff71 	bl	8000298 <__aeabi_dsub>
 800f3b6:	4632      	mov	r2, r6
 800f3b8:	463b      	mov	r3, r7
 800f3ba:	f7f0 ff6f 	bl	800029c <__adddf3>
 800f3be:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f3c2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800f3c6:	ed88 7b00 	vstr	d7, [r8]
 800f3ca:	f109 39ff 	add.w	r9, r9, #4294967295
 800f3ce:	e776      	b.n	800f2be <__kernel_rem_pio2+0x4f6>
 800f3d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800f3d4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f3d8:	4640      	mov	r0, r8
 800f3da:	4632      	mov	r2, r6
 800f3dc:	463b      	mov	r3, r7
 800f3de:	4649      	mov	r1, r9
 800f3e0:	f7f0 ff5c 	bl	800029c <__adddf3>
 800f3e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	4640      	mov	r0, r8
 800f3ee:	4649      	mov	r1, r9
 800f3f0:	f7f0 ff52 	bl	8000298 <__aeabi_dsub>
 800f3f4:	4632      	mov	r2, r6
 800f3f6:	463b      	mov	r3, r7
 800f3f8:	f7f0 ff50 	bl	800029c <__adddf3>
 800f3fc:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f400:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f404:	ed8a 7b00 	vstr	d7, [sl]
 800f408:	3c01      	subs	r4, #1
 800f40a:	e75e      	b.n	800f2ca <__kernel_rem_pio2+0x502>
 800f40c:	ab48      	add	r3, sp, #288	; 0x120
 800f40e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f416:	f7f0 ff41 	bl	800029c <__adddf3>
 800f41a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f41e:	e75a      	b.n	800f2d6 <__kernel_rem_pio2+0x50e>
 800f420:	9b01      	ldr	r3, [sp, #4]
 800f422:	9a01      	ldr	r2, [sp, #4]
 800f424:	601d      	str	r5, [r3, #0]
 800f426:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f42a:	605c      	str	r4, [r3, #4]
 800f42c:	609f      	str	r7, [r3, #8]
 800f42e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f432:	60d3      	str	r3, [r2, #12]
 800f434:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f438:	6110      	str	r0, [r2, #16]
 800f43a:	6153      	str	r3, [r2, #20]
 800f43c:	e72e      	b.n	800f29c <__kernel_rem_pio2+0x4d4>
 800f43e:	bf00      	nop
 800f440:	41700000 	.word	0x41700000
 800f444:	3e700000 	.word	0x3e700000

0800f448 <__kernel_sin>:
 800f448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f44c:	ed2d 8b04 	vpush	{d8-d9}
 800f450:	eeb0 8a41 	vmov.f32	s16, s2
 800f454:	eef0 8a61 	vmov.f32	s17, s3
 800f458:	ec55 4b10 	vmov	r4, r5, d0
 800f45c:	b083      	sub	sp, #12
 800f45e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f462:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f466:	9001      	str	r0, [sp, #4]
 800f468:	da06      	bge.n	800f478 <__kernel_sin+0x30>
 800f46a:	ee10 0a10 	vmov	r0, s0
 800f46e:	4629      	mov	r1, r5
 800f470:	f7f1 fb7a 	bl	8000b68 <__aeabi_d2iz>
 800f474:	2800      	cmp	r0, #0
 800f476:	d051      	beq.n	800f51c <__kernel_sin+0xd4>
 800f478:	4622      	mov	r2, r4
 800f47a:	462b      	mov	r3, r5
 800f47c:	4620      	mov	r0, r4
 800f47e:	4629      	mov	r1, r5
 800f480:	f7f1 f8c2 	bl	8000608 <__aeabi_dmul>
 800f484:	4682      	mov	sl, r0
 800f486:	468b      	mov	fp, r1
 800f488:	4602      	mov	r2, r0
 800f48a:	460b      	mov	r3, r1
 800f48c:	4620      	mov	r0, r4
 800f48e:	4629      	mov	r1, r5
 800f490:	f7f1 f8ba 	bl	8000608 <__aeabi_dmul>
 800f494:	a341      	add	r3, pc, #260	; (adr r3, 800f59c <__kernel_sin+0x154>)
 800f496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49a:	4680      	mov	r8, r0
 800f49c:	4689      	mov	r9, r1
 800f49e:	4650      	mov	r0, sl
 800f4a0:	4659      	mov	r1, fp
 800f4a2:	f7f1 f8b1 	bl	8000608 <__aeabi_dmul>
 800f4a6:	a33f      	add	r3, pc, #252	; (adr r3, 800f5a4 <__kernel_sin+0x15c>)
 800f4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ac:	f7f0 fef4 	bl	8000298 <__aeabi_dsub>
 800f4b0:	4652      	mov	r2, sl
 800f4b2:	465b      	mov	r3, fp
 800f4b4:	f7f1 f8a8 	bl	8000608 <__aeabi_dmul>
 800f4b8:	a33c      	add	r3, pc, #240	; (adr r3, 800f5ac <__kernel_sin+0x164>)
 800f4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4be:	f7f0 feed 	bl	800029c <__adddf3>
 800f4c2:	4652      	mov	r2, sl
 800f4c4:	465b      	mov	r3, fp
 800f4c6:	f7f1 f89f 	bl	8000608 <__aeabi_dmul>
 800f4ca:	a33a      	add	r3, pc, #232	; (adr r3, 800f5b4 <__kernel_sin+0x16c>)
 800f4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d0:	f7f0 fee2 	bl	8000298 <__aeabi_dsub>
 800f4d4:	4652      	mov	r2, sl
 800f4d6:	465b      	mov	r3, fp
 800f4d8:	f7f1 f896 	bl	8000608 <__aeabi_dmul>
 800f4dc:	a337      	add	r3, pc, #220	; (adr r3, 800f5bc <__kernel_sin+0x174>)
 800f4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e2:	f7f0 fedb 	bl	800029c <__adddf3>
 800f4e6:	9b01      	ldr	r3, [sp, #4]
 800f4e8:	4606      	mov	r6, r0
 800f4ea:	460f      	mov	r7, r1
 800f4ec:	b9eb      	cbnz	r3, 800f52a <__kernel_sin+0xe2>
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	4650      	mov	r0, sl
 800f4f4:	4659      	mov	r1, fp
 800f4f6:	f7f1 f887 	bl	8000608 <__aeabi_dmul>
 800f4fa:	a325      	add	r3, pc, #148	; (adr r3, 800f590 <__kernel_sin+0x148>)
 800f4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f500:	f7f0 feca 	bl	8000298 <__aeabi_dsub>
 800f504:	4642      	mov	r2, r8
 800f506:	464b      	mov	r3, r9
 800f508:	f7f1 f87e 	bl	8000608 <__aeabi_dmul>
 800f50c:	4602      	mov	r2, r0
 800f50e:	460b      	mov	r3, r1
 800f510:	4620      	mov	r0, r4
 800f512:	4629      	mov	r1, r5
 800f514:	f7f0 fec2 	bl	800029c <__adddf3>
 800f518:	4604      	mov	r4, r0
 800f51a:	460d      	mov	r5, r1
 800f51c:	ec45 4b10 	vmov	d0, r4, r5
 800f520:	b003      	add	sp, #12
 800f522:	ecbd 8b04 	vpop	{d8-d9}
 800f526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f52a:	4b1b      	ldr	r3, [pc, #108]	; (800f598 <__kernel_sin+0x150>)
 800f52c:	ec51 0b18 	vmov	r0, r1, d8
 800f530:	2200      	movs	r2, #0
 800f532:	f7f1 f869 	bl	8000608 <__aeabi_dmul>
 800f536:	4632      	mov	r2, r6
 800f538:	ec41 0b19 	vmov	d9, r0, r1
 800f53c:	463b      	mov	r3, r7
 800f53e:	4640      	mov	r0, r8
 800f540:	4649      	mov	r1, r9
 800f542:	f7f1 f861 	bl	8000608 <__aeabi_dmul>
 800f546:	4602      	mov	r2, r0
 800f548:	460b      	mov	r3, r1
 800f54a:	ec51 0b19 	vmov	r0, r1, d9
 800f54e:	f7f0 fea3 	bl	8000298 <__aeabi_dsub>
 800f552:	4652      	mov	r2, sl
 800f554:	465b      	mov	r3, fp
 800f556:	f7f1 f857 	bl	8000608 <__aeabi_dmul>
 800f55a:	ec53 2b18 	vmov	r2, r3, d8
 800f55e:	f7f0 fe9b 	bl	8000298 <__aeabi_dsub>
 800f562:	a30b      	add	r3, pc, #44	; (adr r3, 800f590 <__kernel_sin+0x148>)
 800f564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f568:	4606      	mov	r6, r0
 800f56a:	460f      	mov	r7, r1
 800f56c:	4640      	mov	r0, r8
 800f56e:	4649      	mov	r1, r9
 800f570:	f7f1 f84a 	bl	8000608 <__aeabi_dmul>
 800f574:	4602      	mov	r2, r0
 800f576:	460b      	mov	r3, r1
 800f578:	4630      	mov	r0, r6
 800f57a:	4639      	mov	r1, r7
 800f57c:	f7f0 fe8e 	bl	800029c <__adddf3>
 800f580:	4602      	mov	r2, r0
 800f582:	460b      	mov	r3, r1
 800f584:	4620      	mov	r0, r4
 800f586:	4629      	mov	r1, r5
 800f588:	f7f0 fe86 	bl	8000298 <__aeabi_dsub>
 800f58c:	e7c4      	b.n	800f518 <__kernel_sin+0xd0>
 800f58e:	bf00      	nop
 800f590:	55555549 	.word	0x55555549
 800f594:	3fc55555 	.word	0x3fc55555
 800f598:	3fe00000 	.word	0x3fe00000
 800f59c:	5acfd57c 	.word	0x5acfd57c
 800f5a0:	3de5d93a 	.word	0x3de5d93a
 800f5a4:	8a2b9ceb 	.word	0x8a2b9ceb
 800f5a8:	3e5ae5e6 	.word	0x3e5ae5e6
 800f5ac:	57b1fe7d 	.word	0x57b1fe7d
 800f5b0:	3ec71de3 	.word	0x3ec71de3
 800f5b4:	19c161d5 	.word	0x19c161d5
 800f5b8:	3f2a01a0 	.word	0x3f2a01a0
 800f5bc:	1110f8a6 	.word	0x1110f8a6
 800f5c0:	3f811111 	.word	0x3f811111
 800f5c4:	00000000 	.word	0x00000000

0800f5c8 <scalbn>:
 800f5c8:	b570      	push	{r4, r5, r6, lr}
 800f5ca:	ec55 4b10 	vmov	r4, r5, d0
 800f5ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f5d2:	4606      	mov	r6, r0
 800f5d4:	462b      	mov	r3, r5
 800f5d6:	b99a      	cbnz	r2, 800f600 <scalbn+0x38>
 800f5d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f5dc:	4323      	orrs	r3, r4
 800f5de:	d036      	beq.n	800f64e <scalbn+0x86>
 800f5e0:	4b39      	ldr	r3, [pc, #228]	; (800f6c8 <scalbn+0x100>)
 800f5e2:	4629      	mov	r1, r5
 800f5e4:	ee10 0a10 	vmov	r0, s0
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	f7f1 f80d 	bl	8000608 <__aeabi_dmul>
 800f5ee:	4b37      	ldr	r3, [pc, #220]	; (800f6cc <scalbn+0x104>)
 800f5f0:	429e      	cmp	r6, r3
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	460d      	mov	r5, r1
 800f5f6:	da10      	bge.n	800f61a <scalbn+0x52>
 800f5f8:	a32b      	add	r3, pc, #172	; (adr r3, 800f6a8 <scalbn+0xe0>)
 800f5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fe:	e03a      	b.n	800f676 <scalbn+0xae>
 800f600:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f604:	428a      	cmp	r2, r1
 800f606:	d10c      	bne.n	800f622 <scalbn+0x5a>
 800f608:	ee10 2a10 	vmov	r2, s0
 800f60c:	4620      	mov	r0, r4
 800f60e:	4629      	mov	r1, r5
 800f610:	f7f0 fe44 	bl	800029c <__adddf3>
 800f614:	4604      	mov	r4, r0
 800f616:	460d      	mov	r5, r1
 800f618:	e019      	b.n	800f64e <scalbn+0x86>
 800f61a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f61e:	460b      	mov	r3, r1
 800f620:	3a36      	subs	r2, #54	; 0x36
 800f622:	4432      	add	r2, r6
 800f624:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f628:	428a      	cmp	r2, r1
 800f62a:	dd08      	ble.n	800f63e <scalbn+0x76>
 800f62c:	2d00      	cmp	r5, #0
 800f62e:	a120      	add	r1, pc, #128	; (adr r1, 800f6b0 <scalbn+0xe8>)
 800f630:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f634:	da1c      	bge.n	800f670 <scalbn+0xa8>
 800f636:	a120      	add	r1, pc, #128	; (adr r1, 800f6b8 <scalbn+0xf0>)
 800f638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f63c:	e018      	b.n	800f670 <scalbn+0xa8>
 800f63e:	2a00      	cmp	r2, #0
 800f640:	dd08      	ble.n	800f654 <scalbn+0x8c>
 800f642:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f646:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f64a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f64e:	ec45 4b10 	vmov	d0, r4, r5
 800f652:	bd70      	pop	{r4, r5, r6, pc}
 800f654:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f658:	da19      	bge.n	800f68e <scalbn+0xc6>
 800f65a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f65e:	429e      	cmp	r6, r3
 800f660:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f664:	dd0a      	ble.n	800f67c <scalbn+0xb4>
 800f666:	a112      	add	r1, pc, #72	; (adr r1, 800f6b0 <scalbn+0xe8>)
 800f668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1e2      	bne.n	800f636 <scalbn+0x6e>
 800f670:	a30f      	add	r3, pc, #60	; (adr r3, 800f6b0 <scalbn+0xe8>)
 800f672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f676:	f7f0 ffc7 	bl	8000608 <__aeabi_dmul>
 800f67a:	e7cb      	b.n	800f614 <scalbn+0x4c>
 800f67c:	a10a      	add	r1, pc, #40	; (adr r1, 800f6a8 <scalbn+0xe0>)
 800f67e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d0b8      	beq.n	800f5f8 <scalbn+0x30>
 800f686:	a10e      	add	r1, pc, #56	; (adr r1, 800f6c0 <scalbn+0xf8>)
 800f688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f68c:	e7b4      	b.n	800f5f8 <scalbn+0x30>
 800f68e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f692:	3236      	adds	r2, #54	; 0x36
 800f694:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f698:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f69c:	4620      	mov	r0, r4
 800f69e:	4b0c      	ldr	r3, [pc, #48]	; (800f6d0 <scalbn+0x108>)
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	e7e8      	b.n	800f676 <scalbn+0xae>
 800f6a4:	f3af 8000 	nop.w
 800f6a8:	c2f8f359 	.word	0xc2f8f359
 800f6ac:	01a56e1f 	.word	0x01a56e1f
 800f6b0:	8800759c 	.word	0x8800759c
 800f6b4:	7e37e43c 	.word	0x7e37e43c
 800f6b8:	8800759c 	.word	0x8800759c
 800f6bc:	fe37e43c 	.word	0xfe37e43c
 800f6c0:	c2f8f359 	.word	0xc2f8f359
 800f6c4:	81a56e1f 	.word	0x81a56e1f
 800f6c8:	43500000 	.word	0x43500000
 800f6cc:	ffff3cb0 	.word	0xffff3cb0
 800f6d0:	3c900000 	.word	0x3c900000

0800f6d4 <_init>:
 800f6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6d6:	bf00      	nop
 800f6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6da:	bc08      	pop	{r3}
 800f6dc:	469e      	mov	lr, r3
 800f6de:	4770      	bx	lr

0800f6e0 <_fini>:
 800f6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6e2:	bf00      	nop
 800f6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6e6:	bc08      	pop	{r3}
 800f6e8:	469e      	mov	lr, r3
 800f6ea:	4770      	bx	lr
