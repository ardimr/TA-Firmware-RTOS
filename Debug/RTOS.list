
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800b000  0800b000  0001b000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5bc  0800b5bc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5bc  0800b5bc  0001b5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5c4  0800b5c4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5c4  0800b5c4  0001b5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5c8  0800b5c8  0001b5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b5cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b3c  200001e8  0800b7b0  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004d24  0800b7b0  00024d24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021551  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f8c  00000000  00000000  00041765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f0  00000000  00000000  000456f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018b0  00000000  00000000  000470e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a51b  00000000  00000000  00048998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc64  00000000  00000000  00062eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f4e6  00000000  00000000  0007eb17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011dffd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ff8  00000000  00000000  0011e050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800afe8 	.word	0x0800afe8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800afe8 	.word	0x0800afe8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <Write_MFRC522>:
 * Return value: None
 */

extern SPI_HandleTypeDef hspi1;

void Write_MFRC522(u_char addr, u_char val) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	u_char addr_bits = (((addr<<1) & 0x7E));
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	480d      	ldr	r0, [pc, #52]	; (8000f08 <Write_MFRC522+0x58>)
 8000ed4:	f001 fb94 	bl	8002600 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi1, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8000ed8:	f107 010f 	add.w	r1, r7, #15
 8000edc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	480a      	ldr	r0, [pc, #40]	; (8000f0c <Write_MFRC522+0x5c>)
 8000ee4:	f003 f895 	bl	8004012 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &val, 1, 500);
 8000ee8:	1db9      	adds	r1, r7, #6
 8000eea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4806      	ldr	r0, [pc, #24]	; (8000f0c <Write_MFRC522+0x5c>)
 8000ef2:	f003 f88e 	bl	8004012 <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2110      	movs	r1, #16
 8000efa:	4803      	ldr	r0, [pc, #12]	; (8000f08 <Write_MFRC522+0x58>)
 8000efc:	f001 fb80 	bl	8002600 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 8000f00:	bf00      	nop
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	20004be8 	.word	0x20004be8

08000f10 <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	b25b      	sxtb	r3, r3
 8000f20:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2110      	movs	r1, #16
 8000f34:	480e      	ldr	r0, [pc, #56]	; (8000f70 <Read_MFRC522+0x60>)
 8000f36:	f001 fb63 	bl	8002600 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi1, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8000f3a:	f107 010e 	add.w	r1, r7, #14
 8000f3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f42:	2201      	movs	r2, #1
 8000f44:	480b      	ldr	r0, [pc, #44]	; (8000f74 <Read_MFRC522+0x64>)
 8000f46:	f003 f864 	bl	8004012 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, &rx_bits, 1, 500);
 8000f4a:	f107 010f 	add.w	r1, r7, #15
 8000f4e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f52:	2201      	movs	r2, #1
 8000f54:	4807      	ldr	r0, [pc, #28]	; (8000f74 <Read_MFRC522+0x64>)
 8000f56:	f003 f998 	bl	800428a <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2110      	movs	r1, #16
 8000f5e:	4804      	ldr	r0, [pc, #16]	; (8000f70 <Read_MFRC522+0x60>)
 8000f60:	f001 fb4e 	bl	8002600 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40020000 	.word	0x40020000
 8000f74:	20004be8 	.word	0x20004be8

08000f78 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	460a      	mov	r2, r1
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	4613      	mov	r3, r2
 8000f86:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ffc0 	bl	8000f10 <Read_MFRC522>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000f94:	7bfa      	ldrb	r2, [r7, #15]
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff85 	bl	8000eb0 <Write_MFRC522>
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ffa5 	bl	8000f10 <Read_MFRC522>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000fca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	b25a      	sxtb	r2, r3
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff65 	bl	8000eb0 <Write_MFRC522>
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	2014      	movs	r0, #20
 8000ff6:	f7ff ffbf 	bl	8000f78 <SetBitMask>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001002:	210f      	movs	r1, #15
 8001004:	2001      	movs	r0, #1
 8001006:	f7ff ff53 	bl	8000eb0 <Write_MFRC522>
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	2102      	movs	r1, #2
 8001018:	4812      	ldr	r0, [pc, #72]	; (8001064 <MFRC522_Init+0x54>)
 800101a:	f001 faf1 	bl	8002600 <HAL_GPIO_WritePin>
  MFRC522_Reset();
 800101e:	f7ff ffee 	bl	8000ffe <MFRC522_Reset>


  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8001022:	2180      	movs	r1, #128	; 0x80
 8001024:	202a      	movs	r0, #42	; 0x2a
 8001026:	f7ff ff43 	bl	8000eb0 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); 	// TModeReg[3..0] + TPrescalerReg
 800102a:	21a9      	movs	r1, #169	; 0xa9
 800102c:	202b      	movs	r0, #43	; 0x2b
 800102e:	f7ff ff3f 	bl	8000eb0 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 8001032:	2103      	movs	r1, #3
 8001034:	202d      	movs	r0, #45	; 0x2d
 8001036:	f7ff ff3b 	bl	8000eb0 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 800103a:	21e8      	movs	r1, #232	; 0xe8
 800103c:	202c      	movs	r0, #44	; 0x2c
 800103e:	f7ff ff37 	bl	8000eb0 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     			// force 100% ASK modulation
 8001042:	2140      	movs	r1, #64	; 0x40
 8001044:	2015      	movs	r0, #21
 8001046:	f7ff ff33 	bl	8000eb0 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       			// CRC Initial value 0x6363
 800104a:	213d      	movs	r1, #61	; 0x3d
 800104c:	2011      	movs	r0, #17
 800104e:	f7ff ff2f 	bl	8000eb0 <Write_MFRC522>
  Write_MFRC522(RFCfgReg, (0x07<<4)); 			// Set RX Gain to Max
 8001052:	2170      	movs	r1, #112	; 0x70
 8001054:	2026      	movs	r0, #38	; 0x26
 8001056:	f7ff ff2b 	bl	8000eb0 <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 800105a:	f7ff ffc8 	bl	8000fee <AntennaOn>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40020000 	.word	0x40020000

08001068 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 8001074:	2107      	movs	r1, #7
 8001076:	200d      	movs	r0, #13
 8001078:	f7ff ff1a 	bl	8000eb0 <Write_MFRC522>

  TagType[0] = reqMode;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	79fa      	ldrb	r2, [r7, #7]
 8001080:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2201      	movs	r2, #1
 800108c:	6839      	ldr	r1, [r7, #0]
 800108e:	200c      	movs	r0, #12
 8001090:	f000 f80f 	bl	80010b2 <MFRC522_ToCard>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <MFRC522_Request+0x3c>
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	2b10      	cmp	r3, #16
 80010a2:	d001      	beq.n	80010a8 <MFRC522_Request+0x40>
    status = MI_ERR;
 80010a4:	2302      	movs	r3, #2
 80010a6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 80010b2:	b590      	push	{r4, r7, lr}
 80010b4:	b089      	sub	sp, #36	; 0x24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	4603      	mov	r3, r0
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	4613      	mov	r3, r2
 80010c2:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 80010c4:	2302      	movs	r3, #2
 80010c6:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 80010c8:	2300      	movs	r3, #0
 80010ca:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 80010cc:	2300      	movs	r3, #0
 80010ce:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b0c      	cmp	r3, #12
 80010d4:	d006      	beq.n	80010e4 <MFRC522_ToCard+0x32>
 80010d6:	2b0e      	cmp	r3, #14
 80010d8:	d109      	bne.n	80010ee <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 80010da:	2312      	movs	r3, #18
 80010dc:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 80010de:	2310      	movs	r3, #16
 80010e0:	777b      	strb	r3, [r7, #29]
        break;
 80010e2:	e005      	b.n	80010f0 <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 80010e4:	2377      	movs	r3, #119	; 0x77
 80010e6:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 80010e8:	2330      	movs	r3, #48	; 0x30
 80010ea:	777b      	strb	r3, [r7, #29]
        break;
 80010ec:	e000      	b.n	80010f0 <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 80010ee:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 80010f0:	7fbb      	ldrb	r3, [r7, #30]
 80010f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4619      	mov	r1, r3
 80010fa:	2002      	movs	r0, #2
 80010fc:	f7ff fed8 	bl	8000eb0 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	2004      	movs	r0, #4
 8001104:	f7ff ff53 	bl	8000fae <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	200a      	movs	r0, #10
 800110c:	f7ff ff34 	bl	8000f78 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 8001110:	2100      	movs	r1, #0
 8001112:	2001      	movs	r0, #1
 8001114:	f7ff fecc 	bl	8000eb0 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
 800111c:	e00a      	b.n	8001134 <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4619      	mov	r1, r3
 8001128:	2009      	movs	r0, #9
 800112a:	f7ff fec1 	bl	8000eb0 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	3301      	adds	r3, #1
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	429a      	cmp	r2, r3
 800113a:	d3f0      	bcc.n	800111e <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	4619      	mov	r1, r3
 8001140:	2001      	movs	r0, #1
 8001142:	f7ff feb5 	bl	8000eb0 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	2b0c      	cmp	r3, #12
 800114a:	d103      	bne.n	8001154 <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	200d      	movs	r0, #13
 8001150:	f7ff ff12 	bl	8000f78 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001154:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001158:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 800115a:	2004      	movs	r0, #4
 800115c:	f7ff fed8 	bl	8000f10 <Read_MFRC522>
 8001160:	4603      	mov	r3, r0
 8001162:	773b      	strb	r3, [r7, #28]
    i--;
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	3b01      	subs	r3, #1
 8001168:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00a      	beq.n	8001186 <MFRC522_ToCard+0xd4>
 8001170:	7f3b      	ldrb	r3, [r7, #28]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d105      	bne.n	8001186 <MFRC522_ToCard+0xd4>
 800117a:	7f3a      	ldrb	r2, [r7, #28]
 800117c:	7f7b      	ldrb	r3, [r7, #29]
 800117e:	4013      	ands	r3, r2
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0e9      	beq.n	800115a <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	200d      	movs	r0, #13
 800118a:	f7ff ff10 	bl	8000fae <ClearBitMask>

  if (i != 0)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d052      	beq.n	800123a <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8001194:	2006      	movs	r0, #6
 8001196:	f7ff febb 	bl	8000f10 <Read_MFRC522>
 800119a:	4603      	mov	r3, r0
 800119c:	f003 031b 	and.w	r3, r3, #27
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d148      	bne.n	8001236 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 80011a8:	7f3a      	ldrb	r2, [r7, #28]
 80011aa:	7fbb      	ldrb	r3, [r7, #30]
 80011ac:	4013      	ands	r3, r2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 80011b8:	2301      	movs	r3, #1
 80011ba:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	2b0c      	cmp	r3, #12
 80011c0:	d13b      	bne.n	800123a <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 80011c2:	200a      	movs	r0, #10
 80011c4:	f7ff fea4 	bl	8000f10 <Read_MFRC522>
 80011c8:	4603      	mov	r3, r0
 80011ca:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 80011cc:	200c      	movs	r0, #12
 80011ce:	f7ff fe9f 	bl	8000f10 <Read_MFRC522>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d008      	beq.n	80011f2 <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 80011e0:	7f3b      	ldrb	r3, [r7, #28]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	00da      	lsls	r2, r3, #3
 80011e6:	7dfb      	ldrb	r3, [r7, #23]
 80011e8:	4413      	add	r3, r2
 80011ea:	461a      	mov	r2, r3
 80011ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	e004      	b.n	80011fc <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 80011f2:	7f3b      	ldrb	r3, [r7, #28]
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	461a      	mov	r2, r3
 80011f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fa:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 80011fc:	7f3b      	ldrb	r3, [r7, #28]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <MFRC522_ToCard+0x154>
        {
          n = 1;
 8001202:	2301      	movs	r3, #1
 8001204:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 8001206:	7f3b      	ldrb	r3, [r7, #28]
 8001208:	2b10      	cmp	r3, #16
 800120a:	d901      	bls.n	8001210 <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 800120c:	2310      	movs	r3, #16
 800120e:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	e00a      	b.n	800122c <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	18d4      	adds	r4, r2, r3
 800121c:	2009      	movs	r0, #9
 800121e:	f7ff fe77 	bl	8000f10 <Read_MFRC522>
 8001222:	4603      	mov	r3, r0
 8001224:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	3301      	adds	r3, #1
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	7f3b      	ldrb	r3, [r7, #28]
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	429a      	cmp	r2, r3
 8001232:	d3f0      	bcc.n	8001216 <MFRC522_ToCard+0x164>
 8001234:	e001      	b.n	800123a <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 8001236:	2302      	movs	r3, #2
 8001238:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 800123a:	7ffb      	ldrb	r3, [r7, #31]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3724      	adds	r7, #36	; 0x24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd90      	pop	{r4, r7, pc}

08001244 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af02      	add	r7, sp, #8
 800124a:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 800124c:	2300      	movs	r3, #0
 800124e:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001250:	2100      	movs	r1, #0
 8001252:	200d      	movs	r0, #13
 8001254:	f7ff fe2c 	bl	8000eb0 <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2293      	movs	r2, #147	; 0x93
 800125c:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3301      	adds	r3, #1
 8001262:	2220      	movs	r2, #32
 8001264:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2202      	movs	r2, #2
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	200c      	movs	r0, #12
 8001274:	f7ff ff1d 	bl	80010b2 <MFRC522_ToCard>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d118      	bne.n	80012b4 <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 8001282:	2300      	movs	r3, #0
 8001284:	73bb      	strb	r3, [r7, #14]
 8001286:	e009      	b.n	800129c <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 8001288:	7bbb      	ldrb	r3, [r7, #14]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	781a      	ldrb	r2, [r3, #0]
 8001290:	7b7b      	ldrb	r3, [r7, #13]
 8001292:	4053      	eors	r3, r2
 8001294:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	3301      	adds	r3, #1
 800129a:	73bb      	strb	r3, [r7, #14]
 800129c:	7bbb      	ldrb	r3, [r7, #14]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d9f2      	bls.n	8001288 <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 80012a2:	7bbb      	ldrb	r3, [r7, #14]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	4413      	add	r3, r2
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	7b7a      	ldrb	r2, [r7, #13]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d001      	beq.n	80012b4 <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 80012b0:	2302      	movs	r3, #2
 80012b2:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b09a      	sub	sp, #104	; 0x68
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c6:	f000 fecf 	bl	8002068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ca:	f000 f851 	bl	8001370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ce:	f000 f949 	bl	8001564 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012d2:	f000 f91d 	bl	8001510 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012d6:	f000 f8b7 	bl	8001448 <MX_I2C1_Init>
  MX_SPI1_Init();
 80012da:	f000 f8e3 	bl	80014a4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  char txBuffer [100] = {};
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	2260      	movs	r2, #96	; 0x60
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f006 ffee 	bl	80082cc <memset>
  sprintf(txBuffer, "Bismillah..\n");
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4914      	ldr	r1, [pc, #80]	; (8001344 <main+0x84>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f007 fc5b 	bl	8008bb0 <siprintf>
  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 80012fa:	1d39      	adds	r1, r7, #4
 80012fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001300:	2264      	movs	r2, #100	; 0x64
 8001302:	4811      	ldr	r0, [pc, #68]	; (8001348 <main+0x88>)
 8001304:	f003 fe71 	bl	8004fea <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001308:	f004 f958 	bl	80055bc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(Display, NULL, &DisplayTask_attributes);
 800130c:	4a0f      	ldr	r2, [pc, #60]	; (800134c <main+0x8c>)
 800130e:	2100      	movs	r1, #0
 8001310:	480f      	ldr	r0, [pc, #60]	; (8001350 <main+0x90>)
 8001312:	f004 f99d 	bl	8005650 <osThreadNew>
 8001316:	4603      	mov	r3, r0
 8001318:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <main+0x94>)
 800131a:	6013      	str	r3, [r2, #0]

  /* creation of IMUTask */
  IMUTaskHandle = osThreadNew(IMU, NULL, &IMUTask_attributes);
 800131c:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <main+0x98>)
 800131e:	2100      	movs	r1, #0
 8001320:	480e      	ldr	r0, [pc, #56]	; (800135c <main+0x9c>)
 8001322:	f004 f995 	bl	8005650 <osThreadNew>
 8001326:	4603      	mov	r3, r0
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <main+0xa0>)
 800132a:	6013      	str	r3, [r2, #0]

  /* creation of AnalogReadingTa */
//  AnalogReadingTaHandle = osThreadNew(AnalogReading, NULL, &AnalogReadingTa_attributes);

  /* creation of RFIDTask */
  RFIDTaskHandle = osThreadNew(RFID, NULL, &RFIDTask_attributes);
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <main+0xa4>)
 800132e:	2100      	movs	r1, #0
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <main+0xa8>)
 8001332:	f004 f98d 	bl	8005650 <osThreadNew>
 8001336:	4603      	mov	r3, r0
 8001338:	4a0c      	ldr	r2, [pc, #48]	; (800136c <main+0xac>)
 800133a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800133c:	f004 f962 	bl	8005604 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    /* Infinite loop */

  while (1)
 8001340:	e7fe      	b.n	8001340 <main+0x80>
 8001342:	bf00      	nop
 8001344:	0800b044 	.word	0x0800b044
 8001348:	20004c40 	.word	0x20004c40
 800134c:	0800b154 	.word	0x0800b154
 8001350:	08001645 	.word	0x08001645
 8001354:	20004be4 	.word	0x20004be4
 8001358:	0800b178 	.word	0x0800b178
 800135c:	0800171d 	.word	0x0800171d
 8001360:	20004b84 	.word	0x20004b84
 8001364:	0800b19c 	.word	0x0800b19c
 8001368:	080017a9 	.word	0x080017a9
 800136c:	20004be0 	.word	0x20004be0

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b094      	sub	sp, #80	; 0x50
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 0320 	add.w	r3, r7, #32
 800137a:	2230      	movs	r2, #48	; 0x30
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f006 ffa4 	bl	80082cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	4b29      	ldr	r3, [pc, #164]	; (8001440 <SystemClock_Config+0xd0>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	4a28      	ldr	r2, [pc, #160]	; (8001440 <SystemClock_Config+0xd0>)
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a2:	6413      	str	r3, [r2, #64]	; 0x40
 80013a4:	4b26      	ldr	r3, [pc, #152]	; (8001440 <SystemClock_Config+0xd0>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	4b23      	ldr	r3, [pc, #140]	; (8001444 <SystemClock_Config+0xd4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013bc:	4a21      	ldr	r2, [pc, #132]	; (8001444 <SystemClock_Config+0xd4>)
 80013be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <SystemClock_Config+0xd4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d0:	2302      	movs	r3, #2
 80013d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d4:	2301      	movs	r3, #1
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d8:	2310      	movs	r3, #16
 80013da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013dc:	2302      	movs	r3, #2
 80013de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e0:	2300      	movs	r3, #0
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013e4:	2310      	movs	r3, #16
 80013e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013ee:	2304      	movs	r3, #4
 80013f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013f2:	2307      	movs	r3, #7
 80013f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f6:	f107 0320 	add.w	r3, r7, #32
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 f8da 	bl	80035b4 <HAL_RCC_OscConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001406:	f000 faad 	bl	8001964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140a:	230f      	movs	r3, #15
 800140c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140e:	2302      	movs	r3, #2
 8001410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	2102      	movs	r1, #2
 8001426:	4618      	mov	r0, r3
 8001428:	f002 fb3c 	bl	8003aa4 <HAL_RCC_ClockConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001432:	f000 fa97 	bl	8001964 <Error_Handler>
  }
}
 8001436:	bf00      	nop
 8001438:	3750      	adds	r7, #80	; 0x50
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40007000 	.word	0x40007000

08001448 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_I2C1_Init+0x50>)
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <MX_I2C1_Init+0x54>)
 8001450:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_I2C1_Init+0x50>)
 8001454:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <MX_I2C1_Init+0x58>)
 8001456:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_I2C1_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_I2C1_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_I2C1_Init+0x50>)
 8001466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <MX_I2C1_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_I2C1_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <MX_I2C1_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_I2C1_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_I2C1_Init+0x50>)
 8001486:	f001 f8d5 	bl	8002634 <HAL_I2C_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001490:	f000 fa68 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20004b30 	.word	0x20004b30
 800149c:	40005400 	.word	0x40005400
 80014a0:	000186a0 	.word	0x000186a0

080014a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_SPI1_Init+0x64>)
 80014aa:	4a18      	ldr	r2, [pc, #96]	; (800150c <MX_SPI1_Init+0x68>)
 80014ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <MX_SPI1_Init+0x64>)
 80014b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_SPI1_Init+0x64>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <MX_SPI1_Init+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_SPI1_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_SPI1_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_SPI1_Init+0x64>)
 80014d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_SPI1_Init+0x64>)
 80014d8:	2218      	movs	r2, #24
 80014da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <MX_SPI1_Init+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_SPI1_Init+0x64>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <MX_SPI1_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_SPI1_Init+0x64>)
 80014f0:	220a      	movs	r2, #10
 80014f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014f4:	4804      	ldr	r0, [pc, #16]	; (8001508 <MX_SPI1_Init+0x64>)
 80014f6:	f002 fd03 	bl	8003f00 <HAL_SPI_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001500:	f000 fa30 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20004be8 	.word	0x20004be8
 800150c:	40013000 	.word	0x40013000

08001510 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_USART2_UART_Init+0x4c>)
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <MX_USART2_UART_Init+0x50>)
 8001518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <MX_USART2_UART_Init+0x4c>)
 800151c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_USART2_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_USART2_UART_Init+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_USART2_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_USART2_UART_Init+0x4c>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_USART2_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_USART2_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_USART2_UART_Init+0x4c>)
 8001548:	f003 fd02 	bl	8004f50 <HAL_UART_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001552:	f000 fa07 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20004c40 	.word	0x20004c40
 8001560:	40004400 	.word	0x40004400

08001564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <MX_GPIO_Init+0xd0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a2c      	ldr	r2, [pc, #176]	; (8001634 <MX_GPIO_Init+0xd0>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <MX_GPIO_Init+0xd0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <MX_GPIO_Init+0xd0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a25      	ldr	r2, [pc, #148]	; (8001634 <MX_GPIO_Init+0xd0>)
 80015a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <MX_GPIO_Init+0xd0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <MX_GPIO_Init+0xd0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <MX_GPIO_Init+0xd0>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <MX_GPIO_Init+0xd0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MX_GPIO_Init+0xd0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a17      	ldr	r2, [pc, #92]	; (8001634 <MX_GPIO_Init+0xd0>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_GPIO_Init+0xd0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFID_RST_Pin|RFID_CS_Pin, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2112      	movs	r1, #18
 80015ee:	4812      	ldr	r0, [pc, #72]	; (8001638 <MX_GPIO_Init+0xd4>)
 80015f0:	f001 f806 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <MX_GPIO_Init+0xd8>)
 80015fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <MX_GPIO_Init+0xdc>)
 800160a:	f000 fe75 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_RST_Pin RFID_CS_Pin */
  GPIO_InitStruct.Pin = RFID_RST_Pin|RFID_CS_Pin;
 800160e:	2312      	movs	r3, #18
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001616:	2301      	movs	r3, #1
 8001618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4804      	ldr	r0, [pc, #16]	; (8001638 <MX_GPIO_Init+0xd4>)
 8001626:	f000 fe67 	bl	80022f8 <HAL_GPIO_Init>

}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000
 800163c:	10210000 	.word	0x10210000
 8001640:	40020800 	.word	0x40020800

08001644 <Display>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Display */
void Display(void *argument)
{
 8001644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001646:	b0c1      	sub	sp, #260	; 0x104
 8001648:	af08      	add	r7, sp, #32
 800164a:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN 5 */
	char txBuffer [200] = {};
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	f107 0318 	add.w	r3, r7, #24
 8001654:	22c4      	movs	r2, #196	; 0xc4
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f006 fe37 	bl	80082cc <memset>
	sprintf(txBuffer, "Running Display Task..\n");
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4928      	ldr	r1, [pc, #160]	; (8001704 <Display+0xc0>)
 8001664:	4618      	mov	r0, r3
 8001666:	f007 faa3 	bl	8008bb0 <siprintf>
  /* Infinite loop */
	uint8_t identification = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  for(;;)
  {
	  if (identification == 1){
 8001670:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001674:	2b01      	cmp	r3, #1
 8001676:	d106      	bne.n	8001686 <Display+0x42>
		  xTaskNotifyGive(IMUTaskHandle);
 8001678:	4b23      	ldr	r3, [pc, #140]	; (8001708 <Display+0xc4>)
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	2300      	movs	r3, #0
 800167e:	2202      	movs	r2, #2
 8001680:	2100      	movs	r1, #0
 8001682:	f005 fd59 	bl	8007138 <xTaskGenericNotify>
	  }

	  if(UID[0]== 0x29){
 8001686:	4b21      	ldr	r3, [pc, #132]	; (800170c <Display+0xc8>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b29      	cmp	r3, #41	; 0x29
 800168c:	d103      	bne.n	8001696 <Display+0x52>
		  identification = 1;
 800168e:	2301      	movs	r3, #1
 8001690:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8001694:	e002      	b.n	800169c <Display+0x58>
	  } else {
		  identification = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	  }
	  sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\t ID : %x-%x-%x-%x\n",
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <Display+0xcc>)
 800169e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <Display+0xcc>)
 80016a4:	ed93 7b04 	vldr	d7, [r3, #16]
 80016a8:	4919      	ldr	r1, [pc, #100]	; (8001710 <Display+0xcc>)
 80016aa:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
			  	  	  	  MPU6050.Ax, MPU6050.Ay,MPU6050.Az, UID[0],UID[1],UID[2],UID[3]);
 80016ae:	4e17      	ldr	r6, [pc, #92]	; (800170c <Display+0xc8>)
 80016b0:	7836      	ldrb	r6, [r6, #0]
	  sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\t ID : %x-%x-%x-%x\n",
 80016b2:	60be      	str	r6, [r7, #8]
			  	  	  	  MPU6050.Ax, MPU6050.Ay,MPU6050.Az, UID[0],UID[1],UID[2],UID[3]);
 80016b4:	4e15      	ldr	r6, [pc, #84]	; (800170c <Display+0xc8>)
 80016b6:	7876      	ldrb	r6, [r6, #1]
	  sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\t ID : %x-%x-%x-%x\n",
 80016b8:	607e      	str	r6, [r7, #4]
			  	  	  	  MPU6050.Ax, MPU6050.Ay,MPU6050.Az, UID[0],UID[1],UID[2],UID[3]);
 80016ba:	4e14      	ldr	r6, [pc, #80]	; (800170c <Display+0xc8>)
 80016bc:	78b6      	ldrb	r6, [r6, #2]
	  sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\t ID : %x-%x-%x-%x\n",
 80016be:	4632      	mov	r2, r6
			  	  	  	  MPU6050.Ax, MPU6050.Ay,MPU6050.Az, UID[0],UID[1],UID[2],UID[3]);
 80016c0:	4e12      	ldr	r6, [pc, #72]	; (800170c <Display+0xc8>)
 80016c2:	78f6      	ldrb	r6, [r6, #3]
	  sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\t ID : %x-%x-%x-%x\n",
 80016c4:	4633      	mov	r3, r6
 80016c6:	f107 0614 	add.w	r6, r7, #20
 80016ca:	9307      	str	r3, [sp, #28]
 80016cc:	9206      	str	r2, [sp, #24]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	9305      	str	r3, [sp, #20]
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	9304      	str	r3, [sp, #16]
 80016d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80016da:	ed8d 7b00 	vstr	d7, [sp]
 80016de:	4622      	mov	r2, r4
 80016e0:	462b      	mov	r3, r5
 80016e2:	490c      	ldr	r1, [pc, #48]	; (8001714 <Display+0xd0>)
 80016e4:	4630      	mov	r0, r6
 80016e6:	f007 fa63 	bl	8008bb0 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
 80016ea:	f107 0114 	add.w	r1, r7, #20
 80016ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016f2:	22c8      	movs	r2, #200	; 0xc8
 80016f4:	4808      	ldr	r0, [pc, #32]	; (8001718 <Display+0xd4>)
 80016f6:	f003 fc78 	bl	8004fea <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(10);
 80016fa:	200a      	movs	r0, #10
 80016fc:	f004 f83a 	bl	8005774 <osDelay>
	  if (identification == 1){
 8001700:	e7b6      	b.n	8001670 <Display+0x2c>
 8001702:	bf00      	nop
 8001704:	0800b054 	.word	0x0800b054
 8001708:	20004b84 	.word	0x20004b84
 800170c:	20000204 	.word	0x20000204
 8001710:	20004b88 	.word	0x20004b88
 8001714:	0800b06c 	.word	0x0800b06c
 8001718:	20004c40 	.word	0x20004c40

0800171c <IMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IMU */
void IMU(void *argument)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b09c      	sub	sp, #112	; 0x70
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IMU */
	char txBuffer[100]= {};
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2260      	movs	r2, #96	; 0x60
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f006 fdcb 	bl	80082cc <memset>
	sprintf(txBuffer, "Running IMU Task..\n");
 8001736:	f107 0308 	add.w	r3, r7, #8
 800173a:	4916      	ldr	r1, [pc, #88]	; (8001794 <IMU+0x78>)
 800173c:	4618      	mov	r0, r3
 800173e:	f007 fa37 	bl	8008bb0 <siprintf>

	uint8_t ID = MPU6050_Init(&hi2c1);
 8001742:	4815      	ldr	r0, [pc, #84]	; (8001798 <IMU+0x7c>)
 8001744:	f000 f913 	bl	800196e <MPU6050_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(txBuffer,"Id : %d Initialization Success .. \n", ID);
 800174e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	4911      	ldr	r1, [pc, #68]	; (800179c <IMU+0x80>)
 8001758:	4618      	mov	r0, r3
 800175a:	f007 fa29 	bl	8008bb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, sizeof(txBuffer), 100);
 800175e:	f107 0108 	add.w	r1, r7, #8
 8001762:	2364      	movs	r3, #100	; 0x64
 8001764:	2264      	movs	r2, #100	; 0x64
 8001766:	480e      	ldr	r0, [pc, #56]	; (80017a0 <IMU+0x84>)
 8001768:	f003 fc3f 	bl	8004fea <HAL_UART_Transmit>
	//Clearing Buffer
	memset(txBuffer,0,sizeof(txBuffer));
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	2264      	movs	r2, #100	; 0x64
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f006 fda9 	bl	80082cc <memset>
  /* Infinite loop */
  for(;;)
  {
	//Blocking Until Notified
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 800177a:	f04f 31ff 	mov.w	r1, #4294967295
 800177e:	2001      	movs	r0, #1
 8001780:	f005 fc92 	bl	80070a8 <ulTaskNotifyTake>
	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 8001784:	4907      	ldr	r1, [pc, #28]	; (80017a4 <IMU+0x88>)
 8001786:	4804      	ldr	r0, [pc, #16]	; (8001798 <IMU+0x7c>)
 8001788:	f000 f96a 	bl	8001a60 <MPU6050_Read_Accel>
//	sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\n", MPU6050.Ax, MPU6050.Ay,MPU6050.Az );
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(100);
 800178c:	2064      	movs	r0, #100	; 0x64
 800178e:	f003 fff1 	bl	8005774 <osDelay>
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8001792:	e7f2      	b.n	800177a <IMU+0x5e>
 8001794:	0800b0a0 	.word	0x0800b0a0
 8001798:	20004b30 	.word	0x20004b30
 800179c:	0800b0b4 	.word	0x0800b0b4
 80017a0:	20004c40 	.word	0x20004c40
 80017a4:	20004b88 	.word	0x20004b88

080017a8 <RFID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RFID */
void RFID(void *argument)
{
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b0a5      	sub	sp, #148	; 0x94
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RFID */
	char txBuffer [100] ={};
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	2260      	movs	r2, #96	; 0x60
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f006 fd85 	bl	80082cc <memset>
	u_char status, checksum1, cardstr[MAX_LEN];
	MFRC522_Init();
 80017c2:	f7ff fc25 	bl	8001010 <MFRC522_Init>
	status = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	while (status == 0){
 80017cc:	e018      	b.n	8001800 <RFID+0x58>
		status = Read_MFRC522(VersionReg);
 80017ce:	2037      	movs	r0, #55	; 0x37
 80017d0:	f7ff fb9e 	bl	8000f10 <Read_MFRC522>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		sprintf(txBuffer,"Running RC522 ver :%x\n", status);
 80017da:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80017de:	f107 0318 	add.w	r3, r7, #24
 80017e2:	4950      	ldr	r1, [pc, #320]	; (8001924 <RFID+0x17c>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f007 f9e3 	bl	8008bb0 <siprintf>
		HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
 80017ea:	f107 0118 	add.w	r1, r7, #24
 80017ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80017f2:	2264      	movs	r2, #100	; 0x64
 80017f4:	484c      	ldr	r0, [pc, #304]	; (8001928 <RFID+0x180>)
 80017f6:	f003 fbf8 	bl	8004fea <HAL_UART_Transmit>
		osDelay(100);
 80017fa:	2064      	movs	r0, #100	; 0x64
 80017fc:	f003 ffba 	bl	8005774 <osDelay>
	while (status == 0){
 8001800:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0e2      	beq.n	80017ce <RFID+0x26>
	}
	//Printing to PC
	memset(txBuffer,0,sizeof(txBuffer));
 8001808:	f107 0318 	add.w	r3, r7, #24
 800180c:	2264      	movs	r2, #100	; 0x64
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f006 fd5b 	bl	80082cc <memset>
	status = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	osDelay(100);
 800181c:	2064      	movs	r0, #100	; 0x64
 800181e:	f003 ffa9 	bl	8005774 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  status = MFRC522_Request(PICC_REQIDL, cardstr);
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	4619      	mov	r1, r3
 8001828:	2026      	movs	r0, #38	; 0x26
 800182a:	f7ff fc1d 	bl	8001068 <MFRC522_Request>
 800182e:	4603      	mov	r3, r0
 8001830:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	  if(status == MI_OK){
 8001834:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001838:	2b00      	cmp	r3, #0
 800183a:	d160      	bne.n	80018fe <RFID+0x156>
		  sprintf(txBuffer,"Card detected ..\n");
 800183c:	f107 0318 	add.w	r3, r7, #24
 8001840:	493a      	ldr	r1, [pc, #232]	; (800192c <RFID+0x184>)
 8001842:	4618      	mov	r0, r3
 8001844:	f007 f9b4 	bl	8008bb0 <siprintf>
		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 8001848:	f107 0118 	add.w	r1, r7, #24
 800184c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001850:	2264      	movs	r2, #100	; 0x64
 8001852:	4835      	ldr	r0, [pc, #212]	; (8001928 <RFID+0x180>)
 8001854:	f003 fbc9 	bl	8004fea <HAL_UART_Transmit>
		  sprintf(txBuffer,"Card Type : %x %x %x\n", cardstr[0],cardstr[1],cardstr[2]);
 8001858:	7a3b      	ldrb	r3, [r7, #8]
 800185a:	461a      	mov	r2, r3
 800185c:	7a7b      	ldrb	r3, [r7, #9]
 800185e:	4619      	mov	r1, r3
 8001860:	7abb      	ldrb	r3, [r7, #10]
 8001862:	f107 0018 	add.w	r0, r7, #24
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	460b      	mov	r3, r1
 800186a:	4931      	ldr	r1, [pc, #196]	; (8001930 <RFID+0x188>)
 800186c:	f007 f9a0 	bl	8008bb0 <siprintf>
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
		  memset(txBuffer,0,sizeof(txBuffer));
 8001870:	f107 0318 	add.w	r3, r7, #24
 8001874:	2264      	movs	r2, #100	; 0x64
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f006 fd27 	bl	80082cc <memset>

		  //Anti-collision, return card serial number == 4 bytes
		  status = MFRC522_Anticoll(cardstr);
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fcde 	bl	8001244 <MFRC522_Anticoll>
 8001888:	4603      	mov	r3, r0
 800188a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  if (status == MI_OK){
 800188e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001892:	2b00      	cmp	r3, #0
 8001894:	d142      	bne.n	800191c <RFID+0x174>
			  checksum1 = cardstr[0] ^ cardstr[1] ^ cardstr[2] ^ cardstr[3];
 8001896:	7a3a      	ldrb	r2, [r7, #8]
 8001898:	7a7b      	ldrb	r3, [r7, #9]
 800189a:	4053      	eors	r3, r2
 800189c:	b2da      	uxtb	r2, r3
 800189e:	7abb      	ldrb	r3, [r7, #10]
 80018a0:	4053      	eors	r3, r2
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	7afb      	ldrb	r3, [r7, #11]
 80018a6:	4053      	eors	r3, r2
 80018a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  for(int i = 0; i <4 ;i++){
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018b2:	e010      	b.n	80018d6 <RFID+0x12e>
				  UID[i]=cardstr[i];
 80018b4:	f107 0208 	add.w	r2, r7, #8
 80018b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018bc:	4413      	add	r3, r2
 80018be:	7819      	ldrb	r1, [r3, #0]
 80018c0:	4a1c      	ldr	r2, [pc, #112]	; (8001934 <RFID+0x18c>)
 80018c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018c6:	4413      	add	r3, r2
 80018c8:	460a      	mov	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i <4 ;i++){
 80018cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018d0:	3301      	adds	r3, #1
 80018d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018da:	2b03      	cmp	r3, #3
 80018dc:	ddea      	ble.n	80018b4 <RFID+0x10c>
			  }
			  sprintf(txBuffer,"UID: %x %x %x %x\n\r",(u_char)cardstr[0], (u_char)cardstr[1],(u_char)cardstr[2],(u_char)cardstr[3]);
 80018de:	7a3b      	ldrb	r3, [r7, #8]
 80018e0:	4619      	mov	r1, r3
 80018e2:	7a7b      	ldrb	r3, [r7, #9]
 80018e4:	461c      	mov	r4, r3
 80018e6:	7abb      	ldrb	r3, [r7, #10]
 80018e8:	7afa      	ldrb	r2, [r7, #11]
 80018ea:	f107 0018 	add.w	r0, r7, #24
 80018ee:	9201      	str	r2, [sp, #4]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	4623      	mov	r3, r4
 80018f4:	460a      	mov	r2, r1
 80018f6:	4910      	ldr	r1, [pc, #64]	; (8001938 <RFID+0x190>)
 80018f8:	f007 f95a 	bl	8008bb0 <siprintf>
 80018fc:	e00e      	b.n	800191c <RFID+0x174>
//			  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
		  }
	  }
	  else {
		  memset(txBuffer,0,sizeof(txBuffer));
 80018fe:	f107 0318 	add.w	r3, r7, #24
 8001902:	2264      	movs	r2, #100	; 0x64
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f006 fce0 	bl	80082cc <memset>
		  sprintf(txBuffer,"Status :%x\n", status);
 800190c:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001910:	f107 0318 	add.w	r3, r7, #24
 8001914:	4909      	ldr	r1, [pc, #36]	; (800193c <RFID+0x194>)
 8001916:	4618      	mov	r0, r3
 8001918:	f007 f94a 	bl	8008bb0 <siprintf>
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
		  //		  sprintf(txBuffer,"Finding ..\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
	  }
    osDelay(100);
 800191c:	2064      	movs	r0, #100	; 0x64
 800191e:	f003 ff29 	bl	8005774 <osDelay>
	  status = MFRC522_Request(PICC_REQIDL, cardstr);
 8001922:	e77e      	b.n	8001822 <RFID+0x7a>
 8001924:	0800b0d8 	.word	0x0800b0d8
 8001928:	20004c40 	.word	0x20004c40
 800192c:	0800b0f0 	.word	0x0800b0f0
 8001930:	0800b104 	.word	0x0800b104
 8001934:	20000204 	.word	0x20000204
 8001938:	0800b11c 	.word	0x0800b11c
 800193c:	0800b130 	.word	0x0800b130

08001940 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d101      	bne.n	8001956 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001952:	f000 fbab 	bl	80020ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40010000 	.word	0x40010000

08001964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001968:	b672      	cpsid	i
}
 800196a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800196c:	e7fe      	b.n	800196c <Error_Handler+0x8>

0800196e <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 800196e:	b580      	push	{r7, lr}
 8001970:	b088      	sub	sp, #32
 8001972:	af04      	add	r7, sp, #16
 8001974:	6078      	str	r0, [r7, #4]
    uint8_t registerContents;


    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_DEVID_REG, 1, &check, 1, i2c_timeout);
 8001976:	2364      	movs	r3, #100	; 0x64
 8001978:	9302      	str	r3, [sp, #8]
 800197a:	2301      	movs	r3, #1
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	f107 030f 	add.w	r3, r7, #15
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2301      	movs	r3, #1
 8001986:	2200      	movs	r2, #0
 8001988:	21a6      	movs	r1, #166	; 0xa6
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f001 f890 	bl	8002ab0 <HAL_I2C_Mem_Read>
    if (check == 0xE5)  // 0xE5 will be returned by the sensor if everything goes well
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	2be5      	cmp	r3, #229	; 0xe5
 8001994:	d15e      	bne.n	8001a54 <MPU6050_Init+0xe6>
    {
        // power management register 0X2D we should write all 0's to wake the sensor up
        Data = 0x0;
 8001996:	2300      	movs	r3, #0
 8001998:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 800199a:	2364      	movs	r3, #100	; 0x64
 800199c:	9302      	str	r3, [sp, #8]
 800199e:	2301      	movs	r3, #1
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	f107 030e 	add.w	r3, r7, #14
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2301      	movs	r3, #1
 80019aa:	222d      	movs	r2, #45	; 0x2d
 80019ac:	21a6      	movs	r1, #166	; 0xa6
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 ff84 	bl	80028bc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80019b4:	2064      	movs	r0, #100	; 0x64
 80019b6:	f000 fb99 	bl	80020ec <HAL_Delay>

        // Set DATA FORMAT
        Data = 0x0B;
 80019ba:	230b      	movs	r3, #11
 80019bc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_DATA_FORMAT_REG, 1, &Data, 1, i2c_timeout);
 80019be:	2364      	movs	r3, #100	; 0x64
 80019c0:	9302      	str	r3, [sp, #8]
 80019c2:	2301      	movs	r3, #1
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	f107 030e 	add.w	r3, r7, #14
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2301      	movs	r3, #1
 80019ce:	2231      	movs	r2, #49	; 0x31
 80019d0:	21a6      	movs	r1, #166	; 0xa6
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 ff72 	bl	80028bc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80019d8:	2064      	movs	r0, #100	; 0x64
 80019da:	f000 fb87 	bl	80020ec <HAL_Delay>

        // Get the current register contents, so we don't clobber the power bit
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 80019de:	2364      	movs	r3, #100	; 0x64
 80019e0:	9302      	str	r3, [sp, #8]
 80019e2:	2301      	movs	r3, #1
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	f107 030d 	add.w	r3, r7, #13
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2301      	movs	r3, #1
 80019ee:	222c      	movs	r2, #44	; 0x2c
 80019f0:	21a6      	movs	r1, #166	; 0xa6
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f001 f85c 	bl	8002ab0 <HAL_I2C_Mem_Read>
        registerContents &= 0x10;
 80019f8:	7b7b      	ldrb	r3, [r7, #13]
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	737b      	strb	r3, [r7, #13]
        registerContents |= ADXL345_3200HZ;
 8001a02:	7b7b      	ldrb	r3, [r7, #13]
 8001a04:	f043 030f 	orr.w	r3, r3, #15
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	737b      	strb	r3, [r7, #13]

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 8001a0c:	2364      	movs	r3, #100	; 0x64
 8001a0e:	9302      	str	r3, [sp, #8]
 8001a10:	2301      	movs	r3, #1
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	f107 030d 	add.w	r3, r7, #13
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	222c      	movs	r2, #44	; 0x2c
 8001a1e:	21a6      	movs	r1, #166	; 0xa6
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 ff4b 	bl	80028bc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8001a26:	2064      	movs	r0, #100	; 0x64
 8001a28:	f000 fb60 	bl	80020ec <HAL_Delay>

        // Set Power Control to Measurement mode
        Data = 0x08;
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 8001a30:	2364      	movs	r3, #100	; 0x64
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	2301      	movs	r3, #1
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	f107 030e 	add.w	r3, r7, #14
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2301      	movs	r3, #1
 8001a40:	222d      	movs	r2, #45	; 0x2d
 8001a42:	21a6      	movs	r1, #166	; 0xa6
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 ff39 	bl	80028bc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8001a4a:	2064      	movs	r0, #100	; 0x64
 8001a4c:	f000 fb4e 	bl	80020ec <HAL_Delay>

        return check;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	e000      	b.n	8001a56 <MPU6050_Init+0xe8>
    }
    return 1;
 8001a54:	2301      	movs	r3, #1
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <MPU6050_Read_Accel>:
	}
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, address, 1, &offset, 1, i2c_timeout);

	return offset;
}
void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af04      	add	r7, sp, #16
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8001a6a:	2364      	movs	r3, #100	; 0x64
 8001a6c:	9302      	str	r3, [sp, #8]
 8001a6e:	2306      	movs	r3, #6
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	2232      	movs	r2, #50	; 0x32
 8001a7c:	21a6      	movs	r1, #166	; 0xa6
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f001 f816 	bl	8002ab0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[1] << 8 | Rec_Data[0]);
 8001a84:	7a7b      	ldrb	r3, [r7, #9]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	7a3b      	ldrb	r3, [r7, #8]
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	b21a      	sxth	r2, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[3] << 8 | Rec_Data[2]);
 8001a96:	7afb      	ldrb	r3, [r7, #11]
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	7abb      	ldrb	r3, [r7, #10]
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[5] << 8 | Rec_Data[4]);
 8001aa8:	7b7b      	ldrb	r3, [r7, #13]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	7b3b      	ldrb	r3, [r7, #12]
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	b21a      	sxth	r2, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW * scale_factor / GRAVITY;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <MPU6050_Read_Accel+0x108>)
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad2:	ee17 0a90 	vmov	r0, s15
 8001ad6:	f7fe fd3f 	bl	8000558 <__aeabi_f2d>
 8001ada:	a321      	add	r3, pc, #132	; (adr r3, 8001b60 <MPU6050_Read_Accel+0x100>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe febc 	bl	800085c <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	6839      	ldr	r1, [r7, #0]
 8001aea:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW * scale_factor / GRAVITY;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <MPU6050_Read_Accel+0x108>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b06:	ee17 0a90 	vmov	r0, s15
 8001b0a:	f7fe fd25 	bl	8000558 <__aeabi_f2d>
 8001b0e:	a314      	add	r3, pc, #80	; (adr r3, 8001b60 <MPU6050_Read_Accel+0x100>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fea2 	bl	800085c <__aeabi_ddiv>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	6839      	ldr	r1, [r7, #0]
 8001b1e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW * scale_factor / GRAVITY;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <MPU6050_Read_Accel+0x108>)
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3a:	ee17 0a90 	vmov	r0, s15
 8001b3e:	f7fe fd0b 	bl	8000558 <__aeabi_f2d>
 8001b42:	a307      	add	r3, pc, #28	; (adr r3, 8001b60 <MPU6050_Read_Accel+0x100>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	f7fe fe88 	bl	800085c <__aeabi_ddiv>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	6839      	ldr	r1, [r7, #0]
 8001b52:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	3a92a305 	.word	0x3a92a305
 8001b64:	40239d01 	.word	0x40239d01
 8001b68:	20000000 	.word	0x20000000

08001b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_MspInit+0x54>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a11      	ldr	r2, [pc, #68]	; (8001bc0 <HAL_MspInit+0x54>)
 8001b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_MspInit+0x54>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_MspInit+0x54>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <HAL_MspInit+0x54>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_MspInit+0x54>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	210f      	movs	r1, #15
 8001bae:	f06f 0001 	mvn.w	r0, #1
 8001bb2:	f000 fb77 	bl	80022a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a19      	ldr	r2, [pc, #100]	; (8001c48 <HAL_I2C_MspInit+0x84>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d12b      	bne.n	8001c3e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_I2C_MspInit+0x88>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <HAL_I2C_MspInit+0x88>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_I2C_MspInit+0x88>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c02:	23c0      	movs	r3, #192	; 0xc0
 8001c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c06:	2312      	movs	r3, #18
 8001c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c12:	2304      	movs	r3, #4
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480c      	ldr	r0, [pc, #48]	; (8001c50 <HAL_I2C_MspInit+0x8c>)
 8001c1e:	f000 fb6b 	bl	80022f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_I2C_MspInit+0x88>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a08      	ldr	r2, [pc, #32]	; (8001c4c <HAL_I2C_MspInit+0x88>)
 8001c2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_I2C_MspInit+0x88>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c3e:	bf00      	nop
 8001c40:	3728      	adds	r7, #40	; 0x28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40005400 	.word	0x40005400
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020400 	.word	0x40020400

08001c54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <HAL_SPI_MspInit+0x84>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d12b      	bne.n	8001cce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <HAL_SPI_MspInit+0x88>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a17      	ldr	r2, [pc, #92]	; (8001cdc <HAL_SPI_MspInit+0x88>)
 8001c80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_SPI_MspInit+0x88>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_SPI_MspInit+0x88>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a10      	ldr	r2, [pc, #64]	; (8001cdc <HAL_SPI_MspInit+0x88>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_SPI_MspInit+0x88>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cae:	23e0      	movs	r3, #224	; 0xe0
 8001cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cbe:	2305      	movs	r3, #5
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <HAL_SPI_MspInit+0x8c>)
 8001cca:	f000 fb15 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cce:	bf00      	nop
 8001cd0:	3728      	adds	r7, #40	; 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40013000 	.word	0x40013000
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020000 	.word	0x40020000

08001ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_UART_MspInit+0x84>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d12b      	bne.n	8001d5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_UART_MspInit+0x88>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <HAL_UART_MspInit+0x88>)
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_UART_MspInit+0x88>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_UART_MspInit+0x88>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_UART_MspInit+0x88>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <HAL_UART_MspInit+0x88>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d3e:	230c      	movs	r3, #12
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d4e:	2307      	movs	r3, #7
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	; (8001d70 <HAL_UART_MspInit+0x8c>)
 8001d5a:	f000 facd 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40004400 	.word	0x40004400
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020000 	.word	0x40020000

08001d74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08c      	sub	sp, #48	; 0x30
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	2019      	movs	r0, #25
 8001d8a:	f000 fa8b 	bl	80022a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d8e:	2019      	movs	r0, #25
 8001d90:	f000 faa4 	bl	80022dc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <HAL_InitTick+0xa0>)
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <HAL_InitTick+0xa0>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6453      	str	r3, [r2, #68]	; 0x44
 8001da4:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <HAL_InitTick+0xa0>)
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001db0:	f107 0210 	add.w	r2, r7, #16
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 f86e 	bl	8003e9c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001dc0:	f002 f858 	bl	8003e74 <HAL_RCC_GetPCLK2Freq>
 8001dc4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <HAL_InitTick+0xa4>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	0c9b      	lsrs	r3, r3, #18
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <HAL_InitTick+0xa8>)
 8001dd6:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <HAL_InitTick+0xac>)
 8001dd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_InitTick+0xa8>)
 8001ddc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001de0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001de2:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <HAL_InitTick+0xa8>)
 8001de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_InitTick+0xa8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_InitTick+0xa8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001df4:	4809      	ldr	r0, [pc, #36]	; (8001e1c <HAL_InitTick+0xa8>)
 8001df6:	f002 fe2b 	bl	8004a50 <HAL_TIM_Base_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d104      	bne.n	8001e0a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001e00:	4806      	ldr	r0, [pc, #24]	; (8001e1c <HAL_InitTick+0xa8>)
 8001e02:	f002 fe7f 	bl	8004b04 <HAL_TIM_Base_Start_IT>
 8001e06:	4603      	mov	r3, r0
 8001e08:	e000      	b.n	8001e0c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3730      	adds	r7, #48	; 0x30
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800
 8001e18:	431bde83 	.word	0x431bde83
 8001e1c:	20004c88 	.word	0x20004c88
 8001e20:	40010000 	.word	0x40010000

08001e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <NMI_Handler+0x4>

08001e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <HardFault_Handler+0x4>

08001e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <MemManage_Handler+0x4>

08001e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e56:	f002 feb7 	bl	8004bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20004c88 	.word	0x20004c88

08001e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
	return 1;
 8001e68:	2301      	movs	r3, #1
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_kill>:

int _kill(int pid, int sig)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e7e:	f006 f9ed 	bl	800825c <__errno>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2216      	movs	r2, #22
 8001e86:	601a      	str	r2, [r3, #0]
	return -1;
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_exit>:

void _exit (int status)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ffe7 	bl	8001e74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ea6:	e7fe      	b.n	8001ea6 <_exit+0x12>

08001ea8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e00a      	b.n	8001ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eba:	f3af 8000 	nop.w
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	60ba      	str	r2, [r7, #8]
 8001ec6:	b2ca      	uxtb	r2, r1
 8001ec8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	dbf0      	blt.n	8001eba <_read+0x12>
	}

return len;
 8001ed8:	687b      	ldr	r3, [r7, #4]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e009      	b.n	8001f08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	60ba      	str	r2, [r7, #8]
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dbf1      	blt.n	8001ef4 <_write+0x12>
	}
	return len;
 8001f10:	687b      	ldr	r3, [r7, #4]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_close>:

int _close(int file)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
	return -1;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f42:	605a      	str	r2, [r3, #4]
	return 0;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <_isatty>:

int _isatty(int file)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
	return 1;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
	return 0;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f8c:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <_sbrk+0x5c>)
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <_sbrk+0x60>)
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <_sbrk+0x64>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <_sbrk+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d207      	bcs.n	8001fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb4:	f006 f952 	bl	800825c <__errno>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	220c      	movs	r2, #12
 8001fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	e009      	b.n	8001fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <_sbrk+0x64>)
 8001fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20018000 	.word	0x20018000
 8001fe4:	00000400 	.word	0x00000400
 8001fe8:	20000208 	.word	0x20000208
 8001fec:	20004d28 	.word	0x20004d28

08001ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <SystemInit+0x20>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <SystemInit+0x20>)
 8001ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800204c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002018:	480d      	ldr	r0, [pc, #52]	; (8002050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800201a:	490e      	ldr	r1, [pc, #56]	; (8002054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800201c:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002020:	e002      	b.n	8002028 <LoopCopyDataInit>

08002022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002026:	3304      	adds	r3, #4

08002028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800202c:	d3f9      	bcc.n	8002022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002030:	4c0b      	ldr	r4, [pc, #44]	; (8002060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002034:	e001      	b.n	800203a <LoopFillZerobss>

08002036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002038:	3204      	adds	r2, #4

0800203a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800203c:	d3fb      	bcc.n	8002036 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800203e:	f7ff ffd7 	bl	8001ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002042:	f006 f911 	bl	8008268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002046:	f7ff f93b 	bl	80012c0 <main>
  bx  lr    
 800204a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800204c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002054:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002058:	0800b5cc 	.word	0x0800b5cc
  ldr r2, =_sbss
 800205c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002060:	20004d24 	.word	0x20004d24

08002064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC_IRQHandler>
	...

08002068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800206c:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <HAL_Init+0x40>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <HAL_Init+0x40>)
 800207e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <HAL_Init+0x40>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002090:	2003      	movs	r0, #3
 8002092:	f000 f8fc 	bl	800228e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002096:	2000      	movs	r0, #0
 8002098:	f7ff fe6c 	bl	8001d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800209c:	f7ff fd66 	bl	8001b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023c00 	.word	0x40023c00

080020ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_IncTick+0x20>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_IncTick+0x24>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <HAL_IncTick+0x24>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	2000000c 	.word	0x2000000c
 80020d0:	20004cd0 	.word	0x20004cd0

080020d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_GetTick+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20004cd0 	.word	0x20004cd0

080020ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff ffee 	bl	80020d4 <HAL_GetTick>
 80020f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d005      	beq.n	8002112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_Delay+0x44>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002112:	bf00      	nop
 8002114:	f7ff ffde 	bl	80020d4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	429a      	cmp	r2, r3
 8002122:	d8f7      	bhi.n	8002114 <HAL_Delay+0x28>
  {
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000000c 	.word	0x2000000c

08002134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800215c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002166:	4a04      	ldr	r2, [pc, #16]	; (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	60d3      	str	r3, [r2, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <__NVIC_GetPriorityGrouping+0x18>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0307 	and.w	r3, r3, #7
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db0b      	blt.n	80021c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4907      	ldr	r1, [pc, #28]	; (80021d0 <__NVIC_EnableIRQ+0x38>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2001      	movs	r0, #1
 80021ba:	fa00 f202 	lsl.w	r2, r0, r2
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000e100 	.word	0xe000e100

080021d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db0a      	blt.n	80021fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	490c      	ldr	r1, [pc, #48]	; (8002220 <__NVIC_SetPriority+0x4c>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021fc:	e00a      	b.n	8002214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4908      	ldr	r1, [pc, #32]	; (8002224 <__NVIC_SetPriority+0x50>)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3b04      	subs	r3, #4
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	440b      	add	r3, r1
 8002212:	761a      	strb	r2, [r3, #24]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f1c3 0307 	rsb	r3, r3, #7
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf28      	it	cs
 8002246:	2304      	movcs	r3, #4
 8002248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3304      	adds	r3, #4
 800224e:	2b06      	cmp	r3, #6
 8002250:	d902      	bls.n	8002258 <NVIC_EncodePriority+0x30>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3b03      	subs	r3, #3
 8002256:	e000      	b.n	800225a <NVIC_EncodePriority+0x32>
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	f04f 32ff 	mov.w	r2, #4294967295
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	401a      	ands	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43d9      	mvns	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	4313      	orrs	r3, r2
         );
}
 8002282:	4618      	mov	r0, r3
 8002284:	3724      	adds	r7, #36	; 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ff4c 	bl	8002134 <__NVIC_SetPriorityGrouping>
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b6:	f7ff ff61 	bl	800217c <__NVIC_GetPriorityGrouping>
 80022ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	6978      	ldr	r0, [r7, #20]
 80022c2:	f7ff ffb1 	bl	8002228 <NVIC_EncodePriority>
 80022c6:	4602      	mov	r2, r0
 80022c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff80 	bl	80021d4 <__NVIC_SetPriority>
}
 80022d4:	bf00      	nop
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff54 	bl	8002198 <__NVIC_EnableIRQ>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e159      	b.n	80025c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 8148 	bne.w	80025c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d005      	beq.n	800234a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002346:	2b02      	cmp	r3, #2
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d017      	beq.n	80023e8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d123      	bne.n	800243c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a2 	beq.w	80025c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b57      	ldr	r3, [pc, #348]	; (80025e0 <HAL_GPIO_Init+0x2e8>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a56      	ldr	r2, [pc, #344]	; (80025e0 <HAL_GPIO_Init+0x2e8>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b54      	ldr	r3, [pc, #336]	; (80025e0 <HAL_GPIO_Init+0x2e8>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249a:	4a52      	ldr	r2, [pc, #328]	; (80025e4 <HAL_GPIO_Init+0x2ec>)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a49      	ldr	r2, [pc, #292]	; (80025e8 <HAL_GPIO_Init+0x2f0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d019      	beq.n	80024fa <HAL_GPIO_Init+0x202>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a48      	ldr	r2, [pc, #288]	; (80025ec <HAL_GPIO_Init+0x2f4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_GPIO_Init+0x1fe>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a47      	ldr	r2, [pc, #284]	; (80025f0 <HAL_GPIO_Init+0x2f8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00d      	beq.n	80024f2 <HAL_GPIO_Init+0x1fa>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a46      	ldr	r2, [pc, #280]	; (80025f4 <HAL_GPIO_Init+0x2fc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d007      	beq.n	80024ee <HAL_GPIO_Init+0x1f6>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a45      	ldr	r2, [pc, #276]	; (80025f8 <HAL_GPIO_Init+0x300>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <HAL_GPIO_Init+0x1f2>
 80024e6:	2304      	movs	r3, #4
 80024e8:	e008      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024ea:	2307      	movs	r3, #7
 80024ec:	e006      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024ee:	2303      	movs	r3, #3
 80024f0:	e004      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e002      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024fa:	2300      	movs	r3, #0
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	f002 0203 	and.w	r2, r2, #3
 8002502:	0092      	lsls	r2, r2, #2
 8002504:	4093      	lsls	r3, r2
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800250c:	4935      	ldr	r1, [pc, #212]	; (80025e4 <HAL_GPIO_Init+0x2ec>)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800251a:	4b38      	ldr	r3, [pc, #224]	; (80025fc <HAL_GPIO_Init+0x304>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800253e:	4a2f      	ldr	r2, [pc, #188]	; (80025fc <HAL_GPIO_Init+0x304>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002544:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <HAL_GPIO_Init+0x304>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002568:	4a24      	ldr	r2, [pc, #144]	; (80025fc <HAL_GPIO_Init+0x304>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800256e:	4b23      	ldr	r3, [pc, #140]	; (80025fc <HAL_GPIO_Init+0x304>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002592:	4a1a      	ldr	r2, [pc, #104]	; (80025fc <HAL_GPIO_Init+0x304>)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002598:	4b18      	ldr	r3, [pc, #96]	; (80025fc <HAL_GPIO_Init+0x304>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025bc:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <HAL_GPIO_Init+0x304>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3301      	adds	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b0f      	cmp	r3, #15
 80025cc:	f67f aea2 	bls.w	8002314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40013800 	.word	0x40013800
 80025e8:	40020000 	.word	0x40020000
 80025ec:	40020400 	.word	0x40020400
 80025f0:	40020800 	.word	0x40020800
 80025f4:	40020c00 	.word	0x40020c00
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40013c00 	.word	0x40013c00

08002600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
 800260c:	4613      	mov	r3, r2
 800260e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002610:	787b      	ldrb	r3, [r7, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800261c:	e003      	b.n	8002626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	041a      	lsls	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	619a      	str	r2, [r3, #24]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e12b      	b.n	800289e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff fab2 	bl	8001bc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2224      	movs	r2, #36	; 0x24
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0201 	bic.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002686:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002696:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002698:	f001 fbd8 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 800269c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4a81      	ldr	r2, [pc, #516]	; (80028a8 <HAL_I2C_Init+0x274>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d807      	bhi.n	80026b8 <HAL_I2C_Init+0x84>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4a80      	ldr	r2, [pc, #512]	; (80028ac <HAL_I2C_Init+0x278>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	bf94      	ite	ls
 80026b0:	2301      	movls	r3, #1
 80026b2:	2300      	movhi	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	e006      	b.n	80026c6 <HAL_I2C_Init+0x92>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4a7d      	ldr	r2, [pc, #500]	; (80028b0 <HAL_I2C_Init+0x27c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	bf94      	ite	ls
 80026c0:	2301      	movls	r3, #1
 80026c2:	2300      	movhi	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e0e7      	b.n	800289e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4a78      	ldr	r2, [pc, #480]	; (80028b4 <HAL_I2C_Init+0x280>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0c9b      	lsrs	r3, r3, #18
 80026d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4a6a      	ldr	r2, [pc, #424]	; (80028a8 <HAL_I2C_Init+0x274>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d802      	bhi.n	8002708 <HAL_I2C_Init+0xd4>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	3301      	adds	r3, #1
 8002706:	e009      	b.n	800271c <HAL_I2C_Init+0xe8>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	4a69      	ldr	r2, [pc, #420]	; (80028b8 <HAL_I2C_Init+0x284>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	099b      	lsrs	r3, r3, #6
 800271a:	3301      	adds	r3, #1
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	430b      	orrs	r3, r1
 8002722:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800272e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	495c      	ldr	r1, [pc, #368]	; (80028a8 <HAL_I2C_Init+0x274>)
 8002738:	428b      	cmp	r3, r1
 800273a:	d819      	bhi.n	8002770 <HAL_I2C_Init+0x13c>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1e59      	subs	r1, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fbb1 f3f3 	udiv	r3, r1, r3
 800274a:	1c59      	adds	r1, r3, #1
 800274c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002750:	400b      	ands	r3, r1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_I2C_Init+0x138>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1e59      	subs	r1, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fbb1 f3f3 	udiv	r3, r1, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276a:	e051      	b.n	8002810 <HAL_I2C_Init+0x1dc>
 800276c:	2304      	movs	r3, #4
 800276e:	e04f      	b.n	8002810 <HAL_I2C_Init+0x1dc>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d111      	bne.n	800279c <HAL_I2C_Init+0x168>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1e58      	subs	r0, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	440b      	add	r3, r1
 8002786:	fbb0 f3f3 	udiv	r3, r0, r3
 800278a:	3301      	adds	r3, #1
 800278c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	e012      	b.n	80027c2 <HAL_I2C_Init+0x18e>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1e58      	subs	r0, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	0099      	lsls	r1, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b2:	3301      	adds	r3, #1
 80027b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_Init+0x196>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e022      	b.n	8002810 <HAL_I2C_Init+0x1dc>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10e      	bne.n	80027f0 <HAL_I2C_Init+0x1bc>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1e58      	subs	r0, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6859      	ldr	r1, [r3, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	440b      	add	r3, r1
 80027e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ee:	e00f      	b.n	8002810 <HAL_I2C_Init+0x1dc>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1e58      	subs	r0, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	0099      	lsls	r1, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	fbb0 f3f3 	udiv	r3, r0, r3
 8002806:	3301      	adds	r3, #1
 8002808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	6809      	ldr	r1, [r1, #0]
 8002814:	4313      	orrs	r3, r2
 8002816:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69da      	ldr	r2, [r3, #28]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800283e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6911      	ldr	r1, [r2, #16]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68d2      	ldr	r2, [r2, #12]
 800284a:	4311      	orrs	r1, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	430b      	orrs	r3, r1
 8002852:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	000186a0 	.word	0x000186a0
 80028ac:	001e847f 	.word	0x001e847f
 80028b0:	003d08ff 	.word	0x003d08ff
 80028b4:	431bde83 	.word	0x431bde83
 80028b8:	10624dd3 	.word	0x10624dd3

080028bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	4608      	mov	r0, r1
 80028c6:	4611      	mov	r1, r2
 80028c8:	461a      	mov	r2, r3
 80028ca:	4603      	mov	r3, r0
 80028cc:	817b      	strh	r3, [r7, #10]
 80028ce:	460b      	mov	r3, r1
 80028d0:	813b      	strh	r3, [r7, #8]
 80028d2:	4613      	mov	r3, r2
 80028d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028d6:	f7ff fbfd 	bl	80020d4 <HAL_GetTick>
 80028da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	f040 80d9 	bne.w	8002a9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2319      	movs	r3, #25
 80028f0:	2201      	movs	r2, #1
 80028f2:	496d      	ldr	r1, [pc, #436]	; (8002aa8 <HAL_I2C_Mem_Write+0x1ec>)
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 fc7f 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002900:	2302      	movs	r3, #2
 8002902:	e0cc      	b.n	8002a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_I2C_Mem_Write+0x56>
 800290e:	2302      	movs	r3, #2
 8002910:	e0c5      	b.n	8002a9e <HAL_I2C_Mem_Write+0x1e2>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b01      	cmp	r3, #1
 8002926:	d007      	beq.n	8002938 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002946:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2221      	movs	r2, #33	; 0x21
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2240      	movs	r2, #64	; 0x40
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002968:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a4d      	ldr	r2, [pc, #308]	; (8002aac <HAL_I2C_Mem_Write+0x1f0>)
 8002978:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800297a:	88f8      	ldrh	r0, [r7, #6]
 800297c:	893a      	ldrh	r2, [r7, #8]
 800297e:	8979      	ldrh	r1, [r7, #10]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	4603      	mov	r3, r0
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 fab6 	bl	8002efc <I2C_RequestMemoryWrite>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d052      	beq.n	8002a3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e081      	b.n	8002a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fd00 	bl	80033a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00d      	beq.n	80029c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d107      	bne.n	80029c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e06b      	b.n	8002a9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	781a      	ldrb	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d11b      	bne.n	8002a3c <HAL_I2C_Mem_Write+0x180>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d017      	beq.n	8002a3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1aa      	bne.n	800299a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fcec 	bl	8003426 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00d      	beq.n	8002a70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d107      	bne.n	8002a6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e016      	b.n	8002a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e000      	b.n	8002a9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a9c:	2302      	movs	r3, #2
  }
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	00100002 	.word	0x00100002
 8002aac:	ffff0000 	.word	0xffff0000

08002ab0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08c      	sub	sp, #48	; 0x30
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	4608      	mov	r0, r1
 8002aba:	4611      	mov	r1, r2
 8002abc:	461a      	mov	r2, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	817b      	strh	r3, [r7, #10]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	813b      	strh	r3, [r7, #8]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aca:	f7ff fb03 	bl	80020d4 <HAL_GetTick>
 8002ace:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	f040 8208 	bne.w	8002eee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	2319      	movs	r3, #25
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	497b      	ldr	r1, [pc, #492]	; (8002cd4 <HAL_I2C_Mem_Read+0x224>)
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fb85 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002af4:	2302      	movs	r3, #2
 8002af6:	e1fb      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_I2C_Mem_Read+0x56>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e1f4      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d007      	beq.n	8002b2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2222      	movs	r2, #34	; 0x22
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2240      	movs	r2, #64	; 0x40
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a5b      	ldr	r2, [pc, #364]	; (8002cd8 <HAL_I2C_Mem_Read+0x228>)
 8002b6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b6e:	88f8      	ldrh	r0, [r7, #6]
 8002b70:	893a      	ldrh	r2, [r7, #8]
 8002b72:	8979      	ldrh	r1, [r7, #10]
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fa52 	bl	8003028 <I2C_RequestMemoryRead>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e1b0      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d113      	bne.n	8002bbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b96:	2300      	movs	r3, #0
 8002b98:	623b      	str	r3, [r7, #32]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	623b      	str	r3, [r7, #32]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	623b      	str	r3, [r7, #32]
 8002baa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e184      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d11b      	bne.n	8002bfe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e164      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d11b      	bne.n	8002c3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	e144      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c54:	e138      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	f200 80f1 	bhi.w	8002e42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d123      	bne.n	8002cb0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fc1b 	bl	80034a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e139      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cae:	e10b      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d14e      	bne.n	8002d56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	4906      	ldr	r1, [pc, #24]	; (8002cdc <HAL_I2C_Mem_Read+0x22c>)
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fa98 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d008      	beq.n	8002ce0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e10e      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
 8002cd2:	bf00      	nop
 8002cd4:	00100002 	.word	0x00100002
 8002cd8:	ffff0000 	.word	0xffff0000
 8002cdc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d54:	e0b8      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	4966      	ldr	r1, [pc, #408]	; (8002ef8 <HAL_I2C_Mem_Read+0x448>)
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fa49 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0bf      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db8:	2200      	movs	r2, #0
 8002dba:	494f      	ldr	r1, [pc, #316]	; (8002ef8 <HAL_I2C_Mem_Read+0x448>)
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 fa1b 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e091      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e40:	e042      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 fb2e 	bl	80034a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e04c      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d118      	bne.n	8002ec8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f47f aec2 	bne.w	8002c56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e000      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
  }
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3728      	adds	r7, #40	; 0x28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	00010004 	.word	0x00010004

08002efc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	817b      	strh	r3, [r7, #10]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	813b      	strh	r3, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f960 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00d      	beq.n	8002f5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f4c:	d103      	bne.n	8002f56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e05f      	b.n	800301a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f5a:	897b      	ldrh	r3, [r7, #10]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	6a3a      	ldr	r2, [r7, #32]
 8002f6e:	492d      	ldr	r1, [pc, #180]	; (8003024 <I2C_RequestMemoryWrite+0x128>)
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f998 	bl	80032a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e04c      	b.n	800301a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f98:	6a39      	ldr	r1, [r7, #32]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fa02 	bl	80033a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d107      	bne.n	8002fbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e02b      	b.n	800301a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d105      	bne.n	8002fd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fc8:	893b      	ldrh	r3, [r7, #8]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	611a      	str	r2, [r3, #16]
 8002fd2:	e021      	b.n	8003018 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fd4:	893b      	ldrh	r3, [r7, #8]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe4:	6a39      	ldr	r1, [r7, #32]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f9dc 	bl	80033a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00d      	beq.n	800300e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d107      	bne.n	800300a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003008:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e005      	b.n	800301a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800300e:	893b      	ldrh	r3, [r7, #8]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	00010002 	.word	0x00010002

08003028 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	4608      	mov	r0, r1
 8003032:	4611      	mov	r1, r2
 8003034:	461a      	mov	r2, r3
 8003036:	4603      	mov	r3, r0
 8003038:	817b      	strh	r3, [r7, #10]
 800303a:	460b      	mov	r3, r1
 800303c:	813b      	strh	r3, [r7, #8]
 800303e:	4613      	mov	r3, r2
 8003040:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003050:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003060:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	2200      	movs	r2, #0
 800306a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f8c2 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00d      	beq.n	8003096 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003088:	d103      	bne.n	8003092 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e0aa      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003096:	897b      	ldrh	r3, [r7, #10]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	6a3a      	ldr	r2, [r7, #32]
 80030aa:	4952      	ldr	r1, [pc, #328]	; (80031f4 <I2C_RequestMemoryRead+0x1cc>)
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f8fa 	bl	80032a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e097      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d4:	6a39      	ldr	r1, [r7, #32]
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f964 	bl	80033a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00d      	beq.n	80030fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d107      	bne.n	80030fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e076      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d105      	bne.n	8003110 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003104:	893b      	ldrh	r3, [r7, #8]
 8003106:	b2da      	uxtb	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	611a      	str	r2, [r3, #16]
 800310e:	e021      	b.n	8003154 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003110:	893b      	ldrh	r3, [r7, #8]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	b29b      	uxth	r3, r3
 8003116:	b2da      	uxtb	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800311e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003120:	6a39      	ldr	r1, [r7, #32]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f93e 	bl	80033a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00d      	beq.n	800314a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2b04      	cmp	r3, #4
 8003134:	d107      	bne.n	8003146 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003144:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e050      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800314a:	893b      	ldrh	r3, [r7, #8]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003156:	6a39      	ldr	r1, [r7, #32]
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f923 	bl	80033a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	2b04      	cmp	r3, #4
 800316a:	d107      	bne.n	800317c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e035      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800318e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	2200      	movs	r2, #0
 8003198:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f82b 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b6:	d103      	bne.n	80031c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e013      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031c4:	897b      	ldrh	r3, [r7, #10]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	6a3a      	ldr	r2, [r7, #32]
 80031d8:	4906      	ldr	r1, [pc, #24]	; (80031f4 <I2C_RequestMemoryRead+0x1cc>)
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f863 	bl	80032a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	00010002 	.word	0x00010002

080031f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003208:	e025      	b.n	8003256 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d021      	beq.n	8003256 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003212:	f7fe ff5f 	bl	80020d4 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d302      	bcc.n	8003228 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d116      	bne.n	8003256 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f043 0220 	orr.w	r2, r3, #32
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e023      	b.n	800329e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d10d      	bne.n	800327c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	43da      	mvns	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4013      	ands	r3, r2
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	bf0c      	ite	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	2300      	movne	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	e00c      	b.n	8003296 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	43da      	mvns	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4013      	ands	r3, r2
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	bf0c      	ite	eq
 800328e:	2301      	moveq	r3, #1
 8003290:	2300      	movne	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	429a      	cmp	r2, r3
 800329a:	d0b6      	beq.n	800320a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032b4:	e051      	b.n	800335a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c4:	d123      	bne.n	800330e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f043 0204 	orr.w	r2, r3, #4
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e046      	b.n	800339c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d021      	beq.n	800335a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003316:	f7fe fedd 	bl	80020d4 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	429a      	cmp	r2, r3
 8003324:	d302      	bcc.n	800332c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d116      	bne.n	800335a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f043 0220 	orr.w	r2, r3, #32
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e020      	b.n	800339c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	d10c      	bne.n	800337e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	43da      	mvns	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4013      	ands	r3, r2
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	bf14      	ite	ne
 8003376:	2301      	movne	r3, #1
 8003378:	2300      	moveq	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	e00b      	b.n	8003396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	43da      	mvns	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	4013      	ands	r3, r2
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf14      	ite	ne
 8003390:	2301      	movne	r3, #1
 8003392:	2300      	moveq	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d18d      	bne.n	80032b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b0:	e02d      	b.n	800340e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f8ce 	bl	8003554 <I2C_IsAcknowledgeFailed>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e02d      	b.n	800341e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d021      	beq.n	800340e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ca:	f7fe fe83 	bl	80020d4 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d302      	bcc.n	80033e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d116      	bne.n	800340e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f043 0220 	orr.w	r2, r3, #32
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e007      	b.n	800341e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003418:	2b80      	cmp	r3, #128	; 0x80
 800341a:	d1ca      	bne.n	80033b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003432:	e02d      	b.n	8003490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f88d 	bl	8003554 <I2C_IsAcknowledgeFailed>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e02d      	b.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344a:	d021      	beq.n	8003490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344c:	f7fe fe42 	bl	80020d4 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	429a      	cmp	r2, r3
 800345a:	d302      	bcc.n	8003462 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d116      	bne.n	8003490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	f043 0220 	orr.w	r2, r3, #32
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e007      	b.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b04      	cmp	r3, #4
 800349c:	d1ca      	bne.n	8003434 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034b4:	e042      	b.n	800353c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b10      	cmp	r3, #16
 80034c2:	d119      	bne.n	80034f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0210 	mvn.w	r2, #16
 80034cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e029      	b.n	800354c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f8:	f7fe fdec 	bl	80020d4 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	d302      	bcc.n	800350e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d116      	bne.n	800353c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e007      	b.n	800354c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b40      	cmp	r3, #64	; 0x40
 8003548:	d1b5      	bne.n	80034b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800356a:	d11b      	bne.n	80035a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003574:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f043 0204 	orr.w	r2, r3, #4
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e264      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d075      	beq.n	80036be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035d2:	4ba3      	ldr	r3, [pc, #652]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d00c      	beq.n	80035f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035de:	4ba0      	ldr	r3, [pc, #640]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d112      	bne.n	8003610 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ea:	4b9d      	ldr	r3, [pc, #628]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f6:	d10b      	bne.n	8003610 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f8:	4b99      	ldr	r3, [pc, #612]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d05b      	beq.n	80036bc <HAL_RCC_OscConfig+0x108>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d157      	bne.n	80036bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e23f      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003618:	d106      	bne.n	8003628 <HAL_RCC_OscConfig+0x74>
 800361a:	4b91      	ldr	r3, [pc, #580]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a90      	ldr	r2, [pc, #576]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	e01d      	b.n	8003664 <HAL_RCC_OscConfig+0xb0>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0x98>
 8003632:	4b8b      	ldr	r3, [pc, #556]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a8a      	ldr	r2, [pc, #552]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	4b88      	ldr	r3, [pc, #544]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a87      	ldr	r2, [pc, #540]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e00b      	b.n	8003664 <HAL_RCC_OscConfig+0xb0>
 800364c:	4b84      	ldr	r3, [pc, #528]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a83      	ldr	r2, [pc, #524]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4b81      	ldr	r3, [pc, #516]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a80      	ldr	r2, [pc, #512]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 800365e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d013      	beq.n	8003694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fe fd32 	bl	80020d4 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003674:	f7fe fd2e 	bl	80020d4 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e204      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003686:	4b76      	ldr	r3, [pc, #472]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0xc0>
 8003692:	e014      	b.n	80036be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fe fd1e 	bl	80020d4 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800369c:	f7fe fd1a 	bl	80020d4 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b64      	cmp	r3, #100	; 0x64
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e1f0      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ae:	4b6c      	ldr	r3, [pc, #432]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0xe8>
 80036ba:	e000      	b.n	80036be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d063      	beq.n	8003792 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ca:	4b65      	ldr	r3, [pc, #404]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036d6:	4b62      	ldr	r3, [pc, #392]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d11c      	bne.n	800371c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e2:	4b5f      	ldr	r3, [pc, #380]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d116      	bne.n	800371c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ee:	4b5c      	ldr	r3, [pc, #368]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <HAL_RCC_OscConfig+0x152>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d001      	beq.n	8003706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e1c4      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003706:	4b56      	ldr	r3, [pc, #344]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4952      	ldr	r1, [pc, #328]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371a:	e03a      	b.n	8003792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d020      	beq.n	8003766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003724:	4b4f      	ldr	r3, [pc, #316]	; (8003864 <HAL_RCC_OscConfig+0x2b0>)
 8003726:	2201      	movs	r2, #1
 8003728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fe fcd3 	bl	80020d4 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003732:	f7fe fccf 	bl	80020d4 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e1a5      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003744:	4b46      	ldr	r3, [pc, #280]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003750:	4b43      	ldr	r3, [pc, #268]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4940      	ldr	r1, [pc, #256]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003760:	4313      	orrs	r3, r2
 8003762:	600b      	str	r3, [r1, #0]
 8003764:	e015      	b.n	8003792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003766:	4b3f      	ldr	r3, [pc, #252]	; (8003864 <HAL_RCC_OscConfig+0x2b0>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376c:	f7fe fcb2 	bl	80020d4 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003774:	f7fe fcae 	bl	80020d4 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e184      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003786:	4b36      	ldr	r3, [pc, #216]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d030      	beq.n	8003800 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d016      	beq.n	80037d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a6:	4b30      	ldr	r3, [pc, #192]	; (8003868 <HAL_RCC_OscConfig+0x2b4>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ac:	f7fe fc92 	bl	80020d4 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b4:	f7fe fc8e 	bl	80020d4 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e164      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c6:	4b26      	ldr	r3, [pc, #152]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x200>
 80037d2:	e015      	b.n	8003800 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d4:	4b24      	ldr	r3, [pc, #144]	; (8003868 <HAL_RCC_OscConfig+0x2b4>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037da:	f7fe fc7b 	bl	80020d4 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e2:	f7fe fc77 	bl	80020d4 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e14d      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f4:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 80037f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f0      	bne.n	80037e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80a0 	beq.w	800394e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003812:	4b13      	ldr	r3, [pc, #76]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10f      	bne.n	800383e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	4a0e      	ldr	r2, [pc, #56]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382c:	6413      	str	r3, [r2, #64]	; 0x40
 800382e:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <HAL_RCC_OscConfig+0x2ac>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800383a:	2301      	movs	r3, #1
 800383c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383e:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCC_OscConfig+0x2b8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d121      	bne.n	800388e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800384a:	4b08      	ldr	r3, [pc, #32]	; (800386c <HAL_RCC_OscConfig+0x2b8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a07      	ldr	r2, [pc, #28]	; (800386c <HAL_RCC_OscConfig+0x2b8>)
 8003850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003856:	f7fe fc3d 	bl	80020d4 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385c:	e011      	b.n	8003882 <HAL_RCC_OscConfig+0x2ce>
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800
 8003864:	42470000 	.word	0x42470000
 8003868:	42470e80 	.word	0x42470e80
 800386c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003870:	f7fe fc30 	bl	80020d4 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e106      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003882:	4b85      	ldr	r3, [pc, #532]	; (8003a98 <HAL_RCC_OscConfig+0x4e4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d106      	bne.n	80038a4 <HAL_RCC_OscConfig+0x2f0>
 8003896:	4b81      	ldr	r3, [pc, #516]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	4a80      	ldr	r2, [pc, #512]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6713      	str	r3, [r2, #112]	; 0x70
 80038a2:	e01c      	b.n	80038de <HAL_RCC_OscConfig+0x32a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b05      	cmp	r3, #5
 80038aa:	d10c      	bne.n	80038c6 <HAL_RCC_OscConfig+0x312>
 80038ac:	4b7b      	ldr	r3, [pc, #492]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	4a7a      	ldr	r2, [pc, #488]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 80038b2:	f043 0304 	orr.w	r3, r3, #4
 80038b6:	6713      	str	r3, [r2, #112]	; 0x70
 80038b8:	4b78      	ldr	r3, [pc, #480]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	4a77      	ldr	r2, [pc, #476]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	6713      	str	r3, [r2, #112]	; 0x70
 80038c4:	e00b      	b.n	80038de <HAL_RCC_OscConfig+0x32a>
 80038c6:	4b75      	ldr	r3, [pc, #468]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	4a74      	ldr	r2, [pc, #464]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	6713      	str	r3, [r2, #112]	; 0x70
 80038d2:	4b72      	ldr	r3, [pc, #456]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	4a71      	ldr	r2, [pc, #452]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 80038d8:	f023 0304 	bic.w	r3, r3, #4
 80038dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d015      	beq.n	8003912 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e6:	f7fe fbf5 	bl	80020d4 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ec:	e00a      	b.n	8003904 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ee:	f7fe fbf1 	bl	80020d4 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e0c5      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003904:	4b65      	ldr	r3, [pc, #404]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0ee      	beq.n	80038ee <HAL_RCC_OscConfig+0x33a>
 8003910:	e014      	b.n	800393c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003912:	f7fe fbdf 	bl	80020d4 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003918:	e00a      	b.n	8003930 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800391a:	f7fe fbdb 	bl	80020d4 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	f241 3288 	movw	r2, #5000	; 0x1388
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e0af      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003930:	4b5a      	ldr	r3, [pc, #360]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1ee      	bne.n	800391a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800393c:	7dfb      	ldrb	r3, [r7, #23]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d105      	bne.n	800394e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003942:	4b56      	ldr	r3, [pc, #344]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	4a55      	ldr	r2, [pc, #340]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 8003948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 809b 	beq.w	8003a8e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003958:	4b50      	ldr	r3, [pc, #320]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b08      	cmp	r3, #8
 8003962:	d05c      	beq.n	8003a1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d141      	bne.n	80039f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396c:	4b4c      	ldr	r3, [pc, #304]	; (8003aa0 <HAL_RCC_OscConfig+0x4ec>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003972:	f7fe fbaf 	bl	80020d4 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800397a:	f7fe fbab 	bl	80020d4 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e081      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398c:	4b43      	ldr	r3, [pc, #268]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f0      	bne.n	800397a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69da      	ldr	r2, [r3, #28]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	019b      	lsls	r3, r3, #6
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	3b01      	subs	r3, #1
 80039b2:	041b      	lsls	r3, r3, #16
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	061b      	lsls	r3, r3, #24
 80039bc:	4937      	ldr	r1, [pc, #220]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039c2:	4b37      	ldr	r3, [pc, #220]	; (8003aa0 <HAL_RCC_OscConfig+0x4ec>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7fe fb84 	bl	80020d4 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d0:	f7fe fb80 	bl	80020d4 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e056      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e2:	4b2e      	ldr	r3, [pc, #184]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0x41c>
 80039ee:	e04e      	b.n	8003a8e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f0:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <HAL_RCC_OscConfig+0x4ec>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f6:	f7fe fb6d 	bl	80020d4 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fe:	f7fe fb69 	bl	80020d4 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e03f      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a10:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f0      	bne.n	80039fe <HAL_RCC_OscConfig+0x44a>
 8003a1c:	e037      	b.n	8003a8e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e032      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a2a:	4b1c      	ldr	r3, [pc, #112]	; (8003a9c <HAL_RCC_OscConfig+0x4e8>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d028      	beq.n	8003a8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d121      	bne.n	8003a8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d11a      	bne.n	8003a8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a60:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d111      	bne.n	8003a8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	3b01      	subs	r3, #1
 8003a74:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d001      	beq.n	8003a8e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40007000 	.word	0x40007000
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	42470060 	.word	0x42470060

08003aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0cc      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab8:	4b68      	ldr	r3, [pc, #416]	; (8003c5c <HAL_RCC_ClockConfig+0x1b8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d90c      	bls.n	8003ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac6:	4b65      	ldr	r3, [pc, #404]	; (8003c5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	4b63      	ldr	r3, [pc, #396]	; (8003c5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0b8      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d020      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af8:	4b59      	ldr	r3, [pc, #356]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	4a58      	ldr	r2, [pc, #352]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b10:	4b53      	ldr	r3, [pc, #332]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	4a52      	ldr	r2, [pc, #328]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b1c:	4b50      	ldr	r3, [pc, #320]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	494d      	ldr	r1, [pc, #308]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d044      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d107      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	4b47      	ldr	r3, [pc, #284]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d119      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e07f      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d003      	beq.n	8003b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d107      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b62:	4b3f      	ldr	r3, [pc, #252]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e06f      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b72:	4b3b      	ldr	r3, [pc, #236]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e067      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b82:	4b37      	ldr	r3, [pc, #220]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f023 0203 	bic.w	r2, r3, #3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	4934      	ldr	r1, [pc, #208]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b94:	f7fe fa9e 	bl	80020d4 <HAL_GetTick>
 8003b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	e00a      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b9c:	f7fe fa9a 	bl	80020d4 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e04f      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb2:	4b2b      	ldr	r3, [pc, #172]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 020c 	and.w	r2, r3, #12
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d1eb      	bne.n	8003b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc4:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <HAL_RCC_ClockConfig+0x1b8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d20c      	bcs.n	8003bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd2:	4b22      	ldr	r3, [pc, #136]	; (8003c5c <HAL_RCC_ClockConfig+0x1b8>)
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b20      	ldr	r3, [pc, #128]	; (8003c5c <HAL_RCC_ClockConfig+0x1b8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e032      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf8:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4916      	ldr	r1, [pc, #88]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c16:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	490e      	ldr	r1, [pc, #56]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c2a:	f000 f821 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	490a      	ldr	r1, [pc, #40]	; (8003c64 <HAL_RCC_ClockConfig+0x1c0>)
 8003c3c:	5ccb      	ldrb	r3, [r1, r3]
 8003c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c42:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c46:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe f892 	bl	8001d74 <HAL_InitTick>

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40023c00 	.word	0x40023c00
 8003c60:	40023800 	.word	0x40023800
 8003c64:	0800b1c0 	.word	0x0800b1c0
 8003c68:	20000004 	.word	0x20000004
 8003c6c:	20000008 	.word	0x20000008

08003c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	607b      	str	r3, [r7, #4]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	2300      	movs	r3, #0
 8003c82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c88:	4b67      	ldr	r3, [pc, #412]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 030c 	and.w	r3, r3, #12
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d00d      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	f200 80bd 	bhi.w	8003e14 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d003      	beq.n	8003caa <HAL_RCC_GetSysClockFreq+0x3a>
 8003ca2:	e0b7      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ca4:	4b61      	ldr	r3, [pc, #388]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ca6:	60bb      	str	r3, [r7, #8]
       break;
 8003ca8:	e0b7      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003caa:	4b61      	ldr	r3, [pc, #388]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003cac:	60bb      	str	r3, [r7, #8]
      break;
 8003cae:	e0b4      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cb0:	4b5d      	ldr	r3, [pc, #372]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cba:	4b5b      	ldr	r3, [pc, #364]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d04d      	beq.n	8003d62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc6:	4b58      	ldr	r3, [pc, #352]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	099b      	lsrs	r3, r3, #6
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cd6:	f04f 0100 	mov.w	r1, #0
 8003cda:	ea02 0800 	and.w	r8, r2, r0
 8003cde:	ea03 0901 	and.w	r9, r3, r1
 8003ce2:	4640      	mov	r0, r8
 8003ce4:	4649      	mov	r1, r9
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	014b      	lsls	r3, r1, #5
 8003cf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cf4:	0142      	lsls	r2, r0, #5
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	ebb0 0008 	subs.w	r0, r0, r8
 8003cfe:	eb61 0109 	sbc.w	r1, r1, r9
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	018b      	lsls	r3, r1, #6
 8003d0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d10:	0182      	lsls	r2, r0, #6
 8003d12:	1a12      	subs	r2, r2, r0
 8003d14:	eb63 0301 	sbc.w	r3, r3, r1
 8003d18:	f04f 0000 	mov.w	r0, #0
 8003d1c:	f04f 0100 	mov.w	r1, #0
 8003d20:	00d9      	lsls	r1, r3, #3
 8003d22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d26:	00d0      	lsls	r0, r2, #3
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	eb12 0208 	adds.w	r2, r2, r8
 8003d30:	eb43 0309 	adc.w	r3, r3, r9
 8003d34:	f04f 0000 	mov.w	r0, #0
 8003d38:	f04f 0100 	mov.w	r1, #0
 8003d3c:	0259      	lsls	r1, r3, #9
 8003d3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003d42:	0250      	lsls	r0, r2, #9
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	f7fc ff30 	bl	8000bb8 <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	e04a      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d62:	4b31      	ldr	r3, [pc, #196]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	099b      	lsrs	r3, r3, #6
 8003d68:	461a      	mov	r2, r3
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d72:	f04f 0100 	mov.w	r1, #0
 8003d76:	ea02 0400 	and.w	r4, r2, r0
 8003d7a:	ea03 0501 	and.w	r5, r3, r1
 8003d7e:	4620      	mov	r0, r4
 8003d80:	4629      	mov	r1, r5
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	014b      	lsls	r3, r1, #5
 8003d8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d90:	0142      	lsls	r2, r0, #5
 8003d92:	4610      	mov	r0, r2
 8003d94:	4619      	mov	r1, r3
 8003d96:	1b00      	subs	r0, r0, r4
 8003d98:	eb61 0105 	sbc.w	r1, r1, r5
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	018b      	lsls	r3, r1, #6
 8003da6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003daa:	0182      	lsls	r2, r0, #6
 8003dac:	1a12      	subs	r2, r2, r0
 8003dae:	eb63 0301 	sbc.w	r3, r3, r1
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f04f 0100 	mov.w	r1, #0
 8003dba:	00d9      	lsls	r1, r3, #3
 8003dbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dc0:	00d0      	lsls	r0, r2, #3
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	1912      	adds	r2, r2, r4
 8003dc8:	eb45 0303 	adc.w	r3, r5, r3
 8003dcc:	f04f 0000 	mov.w	r0, #0
 8003dd0:	f04f 0100 	mov.w	r1, #0
 8003dd4:	0299      	lsls	r1, r3, #10
 8003dd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003dda:	0290      	lsls	r0, r2, #10
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4610      	mov	r0, r2
 8003de2:	4619      	mov	r1, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	461a      	mov	r2, r3
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	f7fc fee4 	bl	8000bb8 <__aeabi_uldivmod>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4613      	mov	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	3301      	adds	r3, #1
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e10:	60bb      	str	r3, [r7, #8]
      break;
 8003e12:	e002      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e16:	60bb      	str	r3, [r7, #8]
      break;
 8003e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	00f42400 	.word	0x00f42400
 8003e30:	007a1200 	.word	0x007a1200

08003e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e38:	4b03      	ldr	r3, [pc, #12]	; (8003e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20000004 	.word	0x20000004

08003e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e50:	f7ff fff0 	bl	8003e34 <HAL_RCC_GetHCLKFreq>
 8003e54:	4602      	mov	r2, r0
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	0a9b      	lsrs	r3, r3, #10
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	4903      	ldr	r1, [pc, #12]	; (8003e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e62:	5ccb      	ldrb	r3, [r1, r3]
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	0800b1d0 	.word	0x0800b1d0

08003e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e78:	f7ff ffdc 	bl	8003e34 <HAL_RCC_GetHCLKFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	0b5b      	lsrs	r3, r3, #13
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4903      	ldr	r1, [pc, #12]	; (8003e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40023800 	.word	0x40023800
 8003e98:	0800b1d0 	.word	0x0800b1d0

08003e9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	220f      	movs	r2, #15
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003eac:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 0203 	and.w	r2, r3, #3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ed0:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	08db      	lsrs	r3, r3, #3
 8003ed6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ede:	4b07      	ldr	r3, [pc, #28]	; (8003efc <HAL_RCC_GetClockConfig+0x60>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0207 	and.w	r2, r3, #7
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	601a      	str	r2, [r3, #0]
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40023c00 	.word	0x40023c00

08003f00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e07b      	b.n	800400a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d108      	bne.n	8003f2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f22:	d009      	beq.n	8003f38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	61da      	str	r2, [r3, #28]
 8003f2a:	e005      	b.n	8003f38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fd fe7e 	bl	8001c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbc:	ea42 0103 	orr.w	r1, r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	0c1b      	lsrs	r3, r3, #16
 8003fd6:	f003 0104 	and.w	r1, r3, #4
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	f003 0210 	and.w	r2, r3, #16
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ff8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b088      	sub	sp, #32
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	4613      	mov	r3, r2
 8004020:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_SPI_Transmit+0x22>
 8004030:	2302      	movs	r3, #2
 8004032:	e126      	b.n	8004282 <HAL_SPI_Transmit+0x270>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800403c:	f7fe f84a 	bl	80020d4 <HAL_GetTick>
 8004040:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b01      	cmp	r3, #1
 8004050:	d002      	beq.n	8004058 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004052:	2302      	movs	r3, #2
 8004054:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004056:	e10b      	b.n	8004270 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_SPI_Transmit+0x52>
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004068:	e102      	b.n	8004270 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2203      	movs	r2, #3
 800406e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	88fa      	ldrh	r2, [r7, #6]
 8004082:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b0:	d10f      	bne.n	80040d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b40      	cmp	r3, #64	; 0x40
 80040de:	d007      	beq.n	80040f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f8:	d14b      	bne.n	8004192 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <HAL_SPI_Transmit+0xf6>
 8004102:	8afb      	ldrh	r3, [r7, #22]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d13e      	bne.n	8004186 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	881a      	ldrh	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	1c9a      	adds	r2, r3, #2
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800412c:	e02b      	b.n	8004186 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b02      	cmp	r3, #2
 800413a:	d112      	bne.n	8004162 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	881a      	ldrh	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	1c9a      	adds	r2, r3, #2
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004160:	e011      	b.n	8004186 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004162:	f7fd ffb7 	bl	80020d4 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d803      	bhi.n	800417a <HAL_SPI_Transmit+0x168>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d102      	bne.n	8004180 <HAL_SPI_Transmit+0x16e>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d102      	bne.n	8004186 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004184:	e074      	b.n	8004270 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1ce      	bne.n	800412e <HAL_SPI_Transmit+0x11c>
 8004190:	e04c      	b.n	800422c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_SPI_Transmit+0x18e>
 800419a:	8afb      	ldrh	r3, [r7, #22]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d140      	bne.n	8004222 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	330c      	adds	r3, #12
 80041aa:	7812      	ldrb	r2, [r2, #0]
 80041ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041c6:	e02c      	b.n	8004222 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d113      	bne.n	80041fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	7812      	ldrb	r2, [r2, #0]
 80041e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80041fc:	e011      	b.n	8004222 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041fe:	f7fd ff69 	bl	80020d4 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d803      	bhi.n	8004216 <HAL_SPI_Transmit+0x204>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d102      	bne.n	800421c <HAL_SPI_Transmit+0x20a>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d102      	bne.n	8004222 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004220:	e026      	b.n	8004270 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1cd      	bne.n	80041c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	6839      	ldr	r1, [r7, #0]
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 fbcb 	bl	80049cc <SPI_EndRxTxTransaction>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10a      	bne.n	8004260 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800424a:	2300      	movs	r3, #0
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	77fb      	strb	r3, [r7, #31]
 800426c:	e000      	b.n	8004270 <HAL_SPI_Transmit+0x25e>
  }

error:
 800426e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004280:	7ffb      	ldrb	r3, [r7, #31]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3720      	adds	r7, #32
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b088      	sub	sp, #32
 800428e:	af02      	add	r7, sp, #8
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	603b      	str	r3, [r7, #0]
 8004296:	4613      	mov	r3, r2
 8004298:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042a6:	d112      	bne.n	80042ce <HAL_SPI_Receive+0x44>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10e      	bne.n	80042ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2204      	movs	r2, #4
 80042b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042b8:	88fa      	ldrh	r2, [r7, #6]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	4613      	mov	r3, r2
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f8f1 	bl	80044ac <HAL_SPI_TransmitReceive>
 80042ca:	4603      	mov	r3, r0
 80042cc:	e0ea      	b.n	80044a4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_SPI_Receive+0x52>
 80042d8:	2302      	movs	r3, #2
 80042da:	e0e3      	b.n	80044a4 <HAL_SPI_Receive+0x21a>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042e4:	f7fd fef6 	bl	80020d4 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d002      	beq.n	80042fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80042f6:	2302      	movs	r3, #2
 80042f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042fa:	e0ca      	b.n	8004492 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_SPI_Receive+0x7e>
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d102      	bne.n	800430e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800430c:	e0c1      	b.n	8004492 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2204      	movs	r2, #4
 8004312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	88fa      	ldrh	r2, [r7, #6]
 8004326:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	88fa      	ldrh	r2, [r7, #6]
 800432c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004354:	d10f      	bne.n	8004376 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004364:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004374:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004380:	2b40      	cmp	r3, #64	; 0x40
 8004382:	d007      	beq.n	8004394 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004392:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d162      	bne.n	8004462 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800439c:	e02e      	b.n	80043fc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d115      	bne.n	80043d8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f103 020c 	add.w	r2, r3, #12
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	7812      	ldrb	r2, [r2, #0]
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043d6:	e011      	b.n	80043fc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043d8:	f7fd fe7c 	bl	80020d4 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d803      	bhi.n	80043f0 <HAL_SPI_Receive+0x166>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d102      	bne.n	80043f6 <HAL_SPI_Receive+0x16c>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d102      	bne.n	80043fc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043fa:	e04a      	b.n	8004492 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1cb      	bne.n	800439e <HAL_SPI_Receive+0x114>
 8004406:	e031      	b.n	800446c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b01      	cmp	r3, #1
 8004414:	d113      	bne.n	800443e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	b292      	uxth	r2, r2
 8004422:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	1c9a      	adds	r2, r3, #2
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800443c:	e011      	b.n	8004462 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800443e:	f7fd fe49 	bl	80020d4 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d803      	bhi.n	8004456 <HAL_SPI_Receive+0x1cc>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d102      	bne.n	800445c <HAL_SPI_Receive+0x1d2>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d102      	bne.n	8004462 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004460:	e017      	b.n	8004492 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1cd      	bne.n	8004408 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	6839      	ldr	r1, [r7, #0]
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fa45 	bl	8004900 <SPI_EndRxTransaction>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	75fb      	strb	r3, [r7, #23]
 800448e:	e000      	b.n	8004492 <HAL_SPI_Receive+0x208>
  }

error :
 8004490:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08c      	sub	sp, #48	; 0x30
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044ba:	2301      	movs	r3, #1
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_SPI_TransmitReceive+0x26>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e18a      	b.n	80047e8 <HAL_SPI_TransmitReceive+0x33c>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044da:	f7fd fdfb 	bl	80020d4 <HAL_GetTick>
 80044de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044f0:	887b      	ldrh	r3, [r7, #2]
 80044f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d00f      	beq.n	800451c <HAL_SPI_TransmitReceive+0x70>
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004502:	d107      	bne.n	8004514 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d103      	bne.n	8004514 <HAL_SPI_TransmitReceive+0x68>
 800450c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004510:	2b04      	cmp	r3, #4
 8004512:	d003      	beq.n	800451c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004514:	2302      	movs	r3, #2
 8004516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800451a:	e15b      	b.n	80047d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <HAL_SPI_TransmitReceive+0x82>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_SPI_TransmitReceive+0x82>
 8004528:	887b      	ldrh	r3, [r7, #2]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d103      	bne.n	8004536 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004534:	e14e      	b.n	80047d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b04      	cmp	r3, #4
 8004540:	d003      	beq.n	800454a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2205      	movs	r2, #5
 8004546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	887a      	ldrh	r2, [r7, #2]
 800455a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	887a      	ldrh	r2, [r7, #2]
 8004560:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	887a      	ldrh	r2, [r7, #2]
 800456c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	887a      	ldrh	r2, [r7, #2]
 8004572:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b40      	cmp	r3, #64	; 0x40
 800458c:	d007      	beq.n	800459e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800459c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a6:	d178      	bne.n	800469a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <HAL_SPI_TransmitReceive+0x10a>
 80045b0:	8b7b      	ldrh	r3, [r7, #26]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d166      	bne.n	8004684 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	881a      	ldrh	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	1c9a      	adds	r2, r3, #2
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045da:	e053      	b.n	8004684 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d11b      	bne.n	8004622 <HAL_SPI_TransmitReceive+0x176>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d016      	beq.n	8004622 <HAL_SPI_TransmitReceive+0x176>
 80045f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d113      	bne.n	8004622 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	881a      	ldrh	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	1c9a      	adds	r2, r3, #2
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b01      	cmp	r3, #1
 800462e:	d119      	bne.n	8004664 <HAL_SPI_TransmitReceive+0x1b8>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d014      	beq.n	8004664 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	b292      	uxth	r2, r2
 8004646:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	1c9a      	adds	r2, r3, #2
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004660:	2301      	movs	r3, #1
 8004662:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004664:	f7fd fd36 	bl	80020d4 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004670:	429a      	cmp	r2, r3
 8004672:	d807      	bhi.n	8004684 <HAL_SPI_TransmitReceive+0x1d8>
 8004674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467a:	d003      	beq.n	8004684 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004682:	e0a7      	b.n	80047d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1a6      	bne.n	80045dc <HAL_SPI_TransmitReceive+0x130>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1a1      	bne.n	80045dc <HAL_SPI_TransmitReceive+0x130>
 8004698:	e07c      	b.n	8004794 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_SPI_TransmitReceive+0x1fc>
 80046a2:	8b7b      	ldrh	r3, [r7, #26]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d16b      	bne.n	8004780 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	330c      	adds	r3, #12
 80046b2:	7812      	ldrb	r2, [r2, #0]
 80046b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ce:	e057      	b.n	8004780 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d11c      	bne.n	8004718 <HAL_SPI_TransmitReceive+0x26c>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d017      	beq.n	8004718 <HAL_SPI_TransmitReceive+0x26c>
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d114      	bne.n	8004718 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	330c      	adds	r3, #12
 80046f8:	7812      	ldrb	r2, [r2, #0]
 80046fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b01      	cmp	r3, #1
 8004724:	d119      	bne.n	800475a <HAL_SPI_TransmitReceive+0x2ae>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d014      	beq.n	800475a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004756:	2301      	movs	r3, #1
 8004758:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800475a:	f7fd fcbb 	bl	80020d4 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004766:	429a      	cmp	r2, r3
 8004768:	d803      	bhi.n	8004772 <HAL_SPI_TransmitReceive+0x2c6>
 800476a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d102      	bne.n	8004778 <HAL_SPI_TransmitReceive+0x2cc>
 8004772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004774:	2b00      	cmp	r3, #0
 8004776:	d103      	bne.n	8004780 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800477e:	e029      	b.n	80047d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1a2      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x224>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d19d      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004796:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 f917 	bl	80049cc <SPI_EndRxTxTransaction>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d006      	beq.n	80047b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2220      	movs	r2, #32
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80047b0:	e010      	b.n	80047d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10b      	bne.n	80047d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	e000      	b.n	80047d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80047d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3730      	adds	r7, #48	; 0x30
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004800:	f7fd fc68 	bl	80020d4 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	4413      	add	r3, r2
 800480e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004810:	f7fd fc60 	bl	80020d4 <HAL_GetTick>
 8004814:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004816:	4b39      	ldr	r3, [pc, #228]	; (80048fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	015b      	lsls	r3, r3, #5
 800481c:	0d1b      	lsrs	r3, r3, #20
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	fb02 f303 	mul.w	r3, r2, r3
 8004824:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004826:	e054      	b.n	80048d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482e:	d050      	beq.n	80048d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004830:	f7fd fc50 	bl	80020d4 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	69fa      	ldr	r2, [r7, #28]
 800483c:	429a      	cmp	r2, r3
 800483e:	d902      	bls.n	8004846 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d13d      	bne.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004854:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800485e:	d111      	bne.n	8004884 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004868:	d004      	beq.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004872:	d107      	bne.n	8004884 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004882:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488c:	d10f      	bne.n	80048ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e017      	b.n	80048f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4013      	ands	r3, r2
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	429a      	cmp	r2, r3
 80048e0:	bf0c      	ite	eq
 80048e2:	2301      	moveq	r3, #1
 80048e4:	2300      	movne	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d19b      	bne.n	8004828 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000004 	.word	0x20000004

08004900 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004914:	d111      	bne.n	800493a <SPI_EndRxTransaction+0x3a>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800491e:	d004      	beq.n	800492a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004928:	d107      	bne.n	800493a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004938:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004942:	d12a      	bne.n	800499a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494c:	d012      	beq.n	8004974 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2200      	movs	r2, #0
 8004956:	2180      	movs	r1, #128	; 0x80
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f7ff ff49 	bl	80047f0 <SPI_WaitFlagStateUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d02d      	beq.n	80049c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	f043 0220 	orr.w	r2, r3, #32
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e026      	b.n	80049c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2200      	movs	r2, #0
 800497c:	2101      	movs	r1, #1
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f7ff ff36 	bl	80047f0 <SPI_WaitFlagStateUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01a      	beq.n	80049c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498e:	f043 0220 	orr.w	r2, r3, #32
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e013      	b.n	80049c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2200      	movs	r2, #0
 80049a2:	2101      	movs	r1, #1
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f7ff ff23 	bl	80047f0 <SPI_WaitFlagStateUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e000      	b.n	80049c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049d8:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <SPI_EndRxTxTransaction+0x7c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1b      	ldr	r2, [pc, #108]	; (8004a4c <SPI_EndRxTxTransaction+0x80>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	0d5b      	lsrs	r3, r3, #21
 80049e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049e8:	fb02 f303 	mul.w	r3, r2, r3
 80049ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049f6:	d112      	bne.n	8004a1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2200      	movs	r2, #0
 8004a00:	2180      	movs	r1, #128	; 0x80
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f7ff fef4 	bl	80047f0 <SPI_WaitFlagStateUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d016      	beq.n	8004a3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a12:	f043 0220 	orr.w	r2, r3, #32
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e00f      	b.n	8004a3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a34:	2b80      	cmp	r3, #128	; 0x80
 8004a36:	d0f2      	beq.n	8004a1e <SPI_EndRxTxTransaction+0x52>
 8004a38:	e000      	b.n	8004a3c <SPI_EndRxTxTransaction+0x70>
        break;
 8004a3a:	bf00      	nop
  }

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000004 	.word	0x20000004
 8004a4c:	165e9f81 	.word	0x165e9f81

08004a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e041      	b.n	8004ae6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f839 	bl	8004aee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f000 f9ca 	bl	8004e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
	...

08004b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d001      	beq.n	8004b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e044      	b.n	8004ba6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d018      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x6c>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b46:	d013      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x6c>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a1a      	ldr	r2, [pc, #104]	; (8004bb8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00e      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x6c>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a19      	ldr	r2, [pc, #100]	; (8004bbc <HAL_TIM_Base_Start_IT+0xb8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d009      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x6c>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a17      	ldr	r2, [pc, #92]	; (8004bc0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d004      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x6c>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a16      	ldr	r2, [pc, #88]	; (8004bc4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d111      	bne.n	8004b94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b06      	cmp	r3, #6
 8004b80:	d010      	beq.n	8004ba4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b92:	e007      	b.n	8004ba4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40010000 	.word	0x40010000
 8004bb8:	40000400 	.word	0x40000400
 8004bbc:	40000800 	.word	0x40000800
 8004bc0:	40000c00 	.word	0x40000c00
 8004bc4:	40014000 	.word	0x40014000

08004bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d122      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d11b      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0202 	mvn.w	r2, #2
 8004bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f8ee 	bl	8004dec <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f8e0 	bl	8004dd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f8f1 	bl	8004e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d122      	bne.n	8004c78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d11b      	bne.n	8004c78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0204 	mvn.w	r2, #4
 8004c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f8c4 	bl	8004dec <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f8b6 	bl	8004dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f8c7 	bl	8004e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d122      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d11b      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0208 	mvn.w	r2, #8
 8004c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f89a 	bl	8004dec <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f88c 	bl	8004dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f89d 	bl	8004e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0310 	and.w	r3, r3, #16
 8004cd6:	2b10      	cmp	r3, #16
 8004cd8:	d122      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b10      	cmp	r3, #16
 8004ce6:	d11b      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0210 	mvn.w	r2, #16
 8004cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f870 	bl	8004dec <HAL_TIM_IC_CaptureCallback>
 8004d0c:	e005      	b.n	8004d1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f862 	bl	8004dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f873 	bl	8004e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d10e      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d107      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0201 	mvn.w	r2, #1
 8004d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fc fdfa 	bl	8001940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d56:	2b80      	cmp	r3, #128	; 0x80
 8004d58:	d10e      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d64:	2b80      	cmp	r3, #128	; 0x80
 8004d66:	d107      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f8e2 	bl	8004f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d82:	2b40      	cmp	r3, #64	; 0x40
 8004d84:	d10e      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d90:	2b40      	cmp	r3, #64	; 0x40
 8004d92:	d107      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f838 	bl	8004e14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b20      	cmp	r3, #32
 8004db0:	d10e      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d107      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0220 	mvn.w	r2, #32
 8004dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f8ac 	bl	8004f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dd0:	bf00      	nop
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a34      	ldr	r2, [pc, #208]	; (8004f0c <TIM_Base_SetConfig+0xe4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00f      	beq.n	8004e60 <TIM_Base_SetConfig+0x38>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e46:	d00b      	beq.n	8004e60 <TIM_Base_SetConfig+0x38>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a31      	ldr	r2, [pc, #196]	; (8004f10 <TIM_Base_SetConfig+0xe8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <TIM_Base_SetConfig+0x38>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a30      	ldr	r2, [pc, #192]	; (8004f14 <TIM_Base_SetConfig+0xec>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <TIM_Base_SetConfig+0x38>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a2f      	ldr	r2, [pc, #188]	; (8004f18 <TIM_Base_SetConfig+0xf0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d108      	bne.n	8004e72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a25      	ldr	r2, [pc, #148]	; (8004f0c <TIM_Base_SetConfig+0xe4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d01b      	beq.n	8004eb2 <TIM_Base_SetConfig+0x8a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e80:	d017      	beq.n	8004eb2 <TIM_Base_SetConfig+0x8a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a22      	ldr	r2, [pc, #136]	; (8004f10 <TIM_Base_SetConfig+0xe8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <TIM_Base_SetConfig+0x8a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a21      	ldr	r2, [pc, #132]	; (8004f14 <TIM_Base_SetConfig+0xec>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00f      	beq.n	8004eb2 <TIM_Base_SetConfig+0x8a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a20      	ldr	r2, [pc, #128]	; (8004f18 <TIM_Base_SetConfig+0xf0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00b      	beq.n	8004eb2 <TIM_Base_SetConfig+0x8a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1f      	ldr	r2, [pc, #124]	; (8004f1c <TIM_Base_SetConfig+0xf4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d007      	beq.n	8004eb2 <TIM_Base_SetConfig+0x8a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a1e      	ldr	r2, [pc, #120]	; (8004f20 <TIM_Base_SetConfig+0xf8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d003      	beq.n	8004eb2 <TIM_Base_SetConfig+0x8a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a1d      	ldr	r2, [pc, #116]	; (8004f24 <TIM_Base_SetConfig+0xfc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d108      	bne.n	8004ec4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <TIM_Base_SetConfig+0xe4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d103      	bne.n	8004ef8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	615a      	str	r2, [r3, #20]
}
 8004efe:	bf00      	nop
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800
 8004f18:	40000c00 	.word	0x40000c00
 8004f1c:	40014000 	.word	0x40014000
 8004f20:	40014400 	.word	0x40014400
 8004f24:	40014800 	.word	0x40014800

08004f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e03f      	b.n	8004fe2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fc feb4 	bl	8001ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2224      	movs	r2, #36	; 0x24
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f905 	bl	80051a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695a      	ldr	r2, [r3, #20]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b08a      	sub	sp, #40	; 0x28
 8004fee:	af02      	add	r7, sp, #8
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b20      	cmp	r3, #32
 8005008:	d17c      	bne.n	8005104 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_UART_Transmit+0x2c>
 8005010:	88fb      	ldrh	r3, [r7, #6]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e075      	b.n	8005106 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_UART_Transmit+0x3e>
 8005024:	2302      	movs	r3, #2
 8005026:	e06e      	b.n	8005106 <HAL_UART_Transmit+0x11c>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2221      	movs	r2, #33	; 0x21
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800503e:	f7fd f849 	bl	80020d4 <HAL_GetTick>
 8005042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	88fa      	ldrh	r2, [r7, #6]
 8005048:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	88fa      	ldrh	r2, [r7, #6]
 800504e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005058:	d108      	bne.n	800506c <HAL_UART_Transmit+0x82>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d104      	bne.n	800506c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	e003      	b.n	8005074 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800507c:	e02a      	b.n	80050d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2200      	movs	r2, #0
 8005086:	2180      	movs	r1, #128	; 0x80
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f840 	bl	800510e <UART_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e036      	b.n	8005106 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10b      	bne.n	80050b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	3302      	adds	r3, #2
 80050b2:	61bb      	str	r3, [r7, #24]
 80050b4:	e007      	b.n	80050c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1cf      	bne.n	800507e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2200      	movs	r2, #0
 80050e6:	2140      	movs	r1, #64	; 0x40
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f810 	bl	800510e <UART_WaitOnFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e006      	b.n	8005106 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	e000      	b.n	8005106 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	603b      	str	r3, [r7, #0]
 800511a:	4613      	mov	r3, r2
 800511c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800511e:	e02c      	b.n	800517a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005126:	d028      	beq.n	800517a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d007      	beq.n	800513e <UART_WaitOnFlagUntilTimeout+0x30>
 800512e:	f7fc ffd1 	bl	80020d4 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	429a      	cmp	r2, r3
 800513c:	d21d      	bcs.n	800517a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800514c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0201 	bic.w	r2, r2, #1
 800515c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2220      	movs	r2, #32
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e00f      	b.n	800519a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4013      	ands	r3, r2
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	429a      	cmp	r2, r3
 8005188:	bf0c      	ite	eq
 800518a:	2301      	moveq	r3, #1
 800518c:	2300      	movne	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	461a      	mov	r2, r3
 8005192:	79fb      	ldrb	r3, [r7, #7]
 8005194:	429a      	cmp	r2, r3
 8005196:	d0c3      	beq.n	8005120 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a8:	b09f      	sub	sp, #124	; 0x7c
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ba:	68d9      	ldr	r1, [r3, #12]
 80051bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	ea40 0301 	orr.w	r3, r0, r1
 80051c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	431a      	orrs	r2, r3
 80051d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	4313      	orrs	r3, r2
 80051dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80051de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051e8:	f021 010c 	bic.w	r1, r1, #12
 80051ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051f2:	430b      	orrs	r3, r1
 80051f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005202:	6999      	ldr	r1, [r3, #24]
 8005204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	ea40 0301 	orr.w	r3, r0, r1
 800520c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800520e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4bc5      	ldr	r3, [pc, #788]	; (8005528 <UART_SetConfig+0x384>)
 8005214:	429a      	cmp	r2, r3
 8005216:	d004      	beq.n	8005222 <UART_SetConfig+0x7e>
 8005218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	4bc3      	ldr	r3, [pc, #780]	; (800552c <UART_SetConfig+0x388>)
 800521e:	429a      	cmp	r2, r3
 8005220:	d103      	bne.n	800522a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005222:	f7fe fe27 	bl	8003e74 <HAL_RCC_GetPCLK2Freq>
 8005226:	6778      	str	r0, [r7, #116]	; 0x74
 8005228:	e002      	b.n	8005230 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800522a:	f7fe fe0f 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 800522e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005238:	f040 80b6 	bne.w	80053a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800523c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800523e:	461c      	mov	r4, r3
 8005240:	f04f 0500 	mov.w	r5, #0
 8005244:	4622      	mov	r2, r4
 8005246:	462b      	mov	r3, r5
 8005248:	1891      	adds	r1, r2, r2
 800524a:	6439      	str	r1, [r7, #64]	; 0x40
 800524c:	415b      	adcs	r3, r3
 800524e:	647b      	str	r3, [r7, #68]	; 0x44
 8005250:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005254:	1912      	adds	r2, r2, r4
 8005256:	eb45 0303 	adc.w	r3, r5, r3
 800525a:	f04f 0000 	mov.w	r0, #0
 800525e:	f04f 0100 	mov.w	r1, #0
 8005262:	00d9      	lsls	r1, r3, #3
 8005264:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005268:	00d0      	lsls	r0, r2, #3
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	1911      	adds	r1, r2, r4
 8005270:	6639      	str	r1, [r7, #96]	; 0x60
 8005272:	416b      	adcs	r3, r5
 8005274:	667b      	str	r3, [r7, #100]	; 0x64
 8005276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	461a      	mov	r2, r3
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	1891      	adds	r1, r2, r2
 8005282:	63b9      	str	r1, [r7, #56]	; 0x38
 8005284:	415b      	adcs	r3, r3
 8005286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800528c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005290:	f7fb fc92 	bl	8000bb8 <__aeabi_uldivmod>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4ba5      	ldr	r3, [pc, #660]	; (8005530 <UART_SetConfig+0x38c>)
 800529a:	fba3 2302 	umull	r2, r3, r3, r2
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	011e      	lsls	r6, r3, #4
 80052a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a4:	461c      	mov	r4, r3
 80052a6:	f04f 0500 	mov.w	r5, #0
 80052aa:	4622      	mov	r2, r4
 80052ac:	462b      	mov	r3, r5
 80052ae:	1891      	adds	r1, r2, r2
 80052b0:	6339      	str	r1, [r7, #48]	; 0x30
 80052b2:	415b      	adcs	r3, r3
 80052b4:	637b      	str	r3, [r7, #52]	; 0x34
 80052b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80052ba:	1912      	adds	r2, r2, r4
 80052bc:	eb45 0303 	adc.w	r3, r5, r3
 80052c0:	f04f 0000 	mov.w	r0, #0
 80052c4:	f04f 0100 	mov.w	r1, #0
 80052c8:	00d9      	lsls	r1, r3, #3
 80052ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052ce:	00d0      	lsls	r0, r2, #3
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	1911      	adds	r1, r2, r4
 80052d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80052d8:	416b      	adcs	r3, r5
 80052da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	461a      	mov	r2, r3
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	1891      	adds	r1, r2, r2
 80052e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80052ea:	415b      	adcs	r3, r3
 80052ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80052f6:	f7fb fc5f 	bl	8000bb8 <__aeabi_uldivmod>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4b8c      	ldr	r3, [pc, #560]	; (8005530 <UART_SetConfig+0x38c>)
 8005300:	fba3 1302 	umull	r1, r3, r3, r2
 8005304:	095b      	lsrs	r3, r3, #5
 8005306:	2164      	movs	r1, #100	; 0x64
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	3332      	adds	r3, #50	; 0x32
 8005312:	4a87      	ldr	r2, [pc, #540]	; (8005530 <UART_SetConfig+0x38c>)
 8005314:	fba2 2303 	umull	r2, r3, r2, r3
 8005318:	095b      	lsrs	r3, r3, #5
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005320:	441e      	add	r6, r3
 8005322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005324:	4618      	mov	r0, r3
 8005326:	f04f 0100 	mov.w	r1, #0
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	1894      	adds	r4, r2, r2
 8005330:	623c      	str	r4, [r7, #32]
 8005332:	415b      	adcs	r3, r3
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
 8005336:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800533a:	1812      	adds	r2, r2, r0
 800533c:	eb41 0303 	adc.w	r3, r1, r3
 8005340:	f04f 0400 	mov.w	r4, #0
 8005344:	f04f 0500 	mov.w	r5, #0
 8005348:	00dd      	lsls	r5, r3, #3
 800534a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800534e:	00d4      	lsls	r4, r2, #3
 8005350:	4622      	mov	r2, r4
 8005352:	462b      	mov	r3, r5
 8005354:	1814      	adds	r4, r2, r0
 8005356:	653c      	str	r4, [r7, #80]	; 0x50
 8005358:	414b      	adcs	r3, r1
 800535a:	657b      	str	r3, [r7, #84]	; 0x54
 800535c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	461a      	mov	r2, r3
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	1891      	adds	r1, r2, r2
 8005368:	61b9      	str	r1, [r7, #24]
 800536a:	415b      	adcs	r3, r3
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005372:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005376:	f7fb fc1f 	bl	8000bb8 <__aeabi_uldivmod>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4b6c      	ldr	r3, [pc, #432]	; (8005530 <UART_SetConfig+0x38c>)
 8005380:	fba3 1302 	umull	r1, r3, r3, r2
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	2164      	movs	r1, #100	; 0x64
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	3332      	adds	r3, #50	; 0x32
 8005392:	4a67      	ldr	r2, [pc, #412]	; (8005530 <UART_SetConfig+0x38c>)
 8005394:	fba2 2303 	umull	r2, r3, r2, r3
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	f003 0207 	and.w	r2, r3, #7
 800539e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4432      	add	r2, r6
 80053a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053a6:	e0b9      	b.n	800551c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053aa:	461c      	mov	r4, r3
 80053ac:	f04f 0500 	mov.w	r5, #0
 80053b0:	4622      	mov	r2, r4
 80053b2:	462b      	mov	r3, r5
 80053b4:	1891      	adds	r1, r2, r2
 80053b6:	6139      	str	r1, [r7, #16]
 80053b8:	415b      	adcs	r3, r3
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053c0:	1912      	adds	r2, r2, r4
 80053c2:	eb45 0303 	adc.w	r3, r5, r3
 80053c6:	f04f 0000 	mov.w	r0, #0
 80053ca:	f04f 0100 	mov.w	r1, #0
 80053ce:	00d9      	lsls	r1, r3, #3
 80053d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053d4:	00d0      	lsls	r0, r2, #3
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	eb12 0804 	adds.w	r8, r2, r4
 80053de:	eb43 0905 	adc.w	r9, r3, r5
 80053e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f04f 0100 	mov.w	r1, #0
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	008b      	lsls	r3, r1, #2
 80053f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053fa:	0082      	lsls	r2, r0, #2
 80053fc:	4640      	mov	r0, r8
 80053fe:	4649      	mov	r1, r9
 8005400:	f7fb fbda 	bl	8000bb8 <__aeabi_uldivmod>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	4b49      	ldr	r3, [pc, #292]	; (8005530 <UART_SetConfig+0x38c>)
 800540a:	fba3 2302 	umull	r2, r3, r3, r2
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	011e      	lsls	r6, r3, #4
 8005412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005414:	4618      	mov	r0, r3
 8005416:	f04f 0100 	mov.w	r1, #0
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	1894      	adds	r4, r2, r2
 8005420:	60bc      	str	r4, [r7, #8]
 8005422:	415b      	adcs	r3, r3
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800542a:	1812      	adds	r2, r2, r0
 800542c:	eb41 0303 	adc.w	r3, r1, r3
 8005430:	f04f 0400 	mov.w	r4, #0
 8005434:	f04f 0500 	mov.w	r5, #0
 8005438:	00dd      	lsls	r5, r3, #3
 800543a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800543e:	00d4      	lsls	r4, r2, #3
 8005440:	4622      	mov	r2, r4
 8005442:	462b      	mov	r3, r5
 8005444:	1814      	adds	r4, r2, r0
 8005446:	64bc      	str	r4, [r7, #72]	; 0x48
 8005448:	414b      	adcs	r3, r1
 800544a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800544c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	4618      	mov	r0, r3
 8005452:	f04f 0100 	mov.w	r1, #0
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	f04f 0300 	mov.w	r3, #0
 800545e:	008b      	lsls	r3, r1, #2
 8005460:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005464:	0082      	lsls	r2, r0, #2
 8005466:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800546a:	f7fb fba5 	bl	8000bb8 <__aeabi_uldivmod>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4b2f      	ldr	r3, [pc, #188]	; (8005530 <UART_SetConfig+0x38c>)
 8005474:	fba3 1302 	umull	r1, r3, r3, r2
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	2164      	movs	r1, #100	; 0x64
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	3332      	adds	r3, #50	; 0x32
 8005486:	4a2a      	ldr	r2, [pc, #168]	; (8005530 <UART_SetConfig+0x38c>)
 8005488:	fba2 2303 	umull	r2, r3, r2, r3
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005492:	441e      	add	r6, r3
 8005494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005496:	4618      	mov	r0, r3
 8005498:	f04f 0100 	mov.w	r1, #0
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	1894      	adds	r4, r2, r2
 80054a2:	603c      	str	r4, [r7, #0]
 80054a4:	415b      	adcs	r3, r3
 80054a6:	607b      	str	r3, [r7, #4]
 80054a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ac:	1812      	adds	r2, r2, r0
 80054ae:	eb41 0303 	adc.w	r3, r1, r3
 80054b2:	f04f 0400 	mov.w	r4, #0
 80054b6:	f04f 0500 	mov.w	r5, #0
 80054ba:	00dd      	lsls	r5, r3, #3
 80054bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054c0:	00d4      	lsls	r4, r2, #3
 80054c2:	4622      	mov	r2, r4
 80054c4:	462b      	mov	r3, r5
 80054c6:	eb12 0a00 	adds.w	sl, r2, r0
 80054ca:	eb43 0b01 	adc.w	fp, r3, r1
 80054ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f04f 0100 	mov.w	r1, #0
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	008b      	lsls	r3, r1, #2
 80054e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054e6:	0082      	lsls	r2, r0, #2
 80054e8:	4650      	mov	r0, sl
 80054ea:	4659      	mov	r1, fp
 80054ec:	f7fb fb64 	bl	8000bb8 <__aeabi_uldivmod>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <UART_SetConfig+0x38c>)
 80054f6:	fba3 1302 	umull	r1, r3, r3, r2
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	2164      	movs	r1, #100	; 0x64
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	3332      	adds	r3, #50	; 0x32
 8005508:	4a09      	ldr	r2, [pc, #36]	; (8005530 <UART_SetConfig+0x38c>)
 800550a:	fba2 2303 	umull	r2, r3, r2, r3
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	f003 020f 	and.w	r2, r3, #15
 8005514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4432      	add	r2, r6
 800551a:	609a      	str	r2, [r3, #8]
}
 800551c:	bf00      	nop
 800551e:	377c      	adds	r7, #124	; 0x7c
 8005520:	46bd      	mov	sp, r7
 8005522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005526:	bf00      	nop
 8005528:	40011000 	.word	0x40011000
 800552c:	40011400 	.word	0x40011400
 8005530:	51eb851f 	.word	0x51eb851f

08005534 <__NVIC_SetPriority>:
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	4603      	mov	r3, r0
 800553c:	6039      	str	r1, [r7, #0]
 800553e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005544:	2b00      	cmp	r3, #0
 8005546:	db0a      	blt.n	800555e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	b2da      	uxtb	r2, r3
 800554c:	490c      	ldr	r1, [pc, #48]	; (8005580 <__NVIC_SetPriority+0x4c>)
 800554e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005552:	0112      	lsls	r2, r2, #4
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	440b      	add	r3, r1
 8005558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800555c:	e00a      	b.n	8005574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	b2da      	uxtb	r2, r3
 8005562:	4908      	ldr	r1, [pc, #32]	; (8005584 <__NVIC_SetPriority+0x50>)
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	3b04      	subs	r3, #4
 800556c:	0112      	lsls	r2, r2, #4
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	440b      	add	r3, r1
 8005572:	761a      	strb	r2, [r3, #24]
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	e000e100 	.word	0xe000e100
 8005584:	e000ed00 	.word	0xe000ed00

08005588 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800558c:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <SysTick_Handler+0x1c>)
 800558e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005590:	f001 fcfe 	bl	8006f90 <xTaskGetSchedulerState>
 8005594:	4603      	mov	r3, r0
 8005596:	2b01      	cmp	r3, #1
 8005598:	d001      	beq.n	800559e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800559a:	f002 fbe5 	bl	8007d68 <xPortSysTickHandler>
  }
}
 800559e:	bf00      	nop
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	e000e010 	.word	0xe000e010

080055a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80055ac:	2100      	movs	r1, #0
 80055ae:	f06f 0004 	mvn.w	r0, #4
 80055b2:	f7ff ffbf 	bl	8005534 <__NVIC_SetPriority>
#endif
}
 80055b6:	bf00      	nop
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055c2:	f3ef 8305 	mrs	r3, IPSR
 80055c6:	603b      	str	r3, [r7, #0]
  return(result);
 80055c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80055ce:	f06f 0305 	mvn.w	r3, #5
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	e00c      	b.n	80055f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055d6:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <osKernelInitialize+0x44>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d105      	bne.n	80055ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055de:	4b08      	ldr	r3, [pc, #32]	; (8005600 <osKernelInitialize+0x44>)
 80055e0:	2201      	movs	r2, #1
 80055e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	607b      	str	r3, [r7, #4]
 80055e8:	e002      	b.n	80055f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80055ea:	f04f 33ff 	mov.w	r3, #4294967295
 80055ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055f0:	687b      	ldr	r3, [r7, #4]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	2000020c 	.word	0x2000020c

08005604 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800560a:	f3ef 8305 	mrs	r3, IPSR
 800560e:	603b      	str	r3, [r7, #0]
  return(result);
 8005610:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005616:	f06f 0305 	mvn.w	r3, #5
 800561a:	607b      	str	r3, [r7, #4]
 800561c:	e010      	b.n	8005640 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800561e:	4b0b      	ldr	r3, [pc, #44]	; (800564c <osKernelStart+0x48>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d109      	bne.n	800563a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005626:	f7ff ffbf 	bl	80055a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800562a:	4b08      	ldr	r3, [pc, #32]	; (800564c <osKernelStart+0x48>)
 800562c:	2202      	movs	r2, #2
 800562e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005630:	f001 f866 	bl	8006700 <vTaskStartScheduler>
      stat = osOK;
 8005634:	2300      	movs	r3, #0
 8005636:	607b      	str	r3, [r7, #4]
 8005638:	e002      	b.n	8005640 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800563a:	f04f 33ff 	mov.w	r3, #4294967295
 800563e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005640:	687b      	ldr	r3, [r7, #4]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	2000020c 	.word	0x2000020c

08005650 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005650:	b580      	push	{r7, lr}
 8005652:	b08e      	sub	sp, #56	; 0x38
 8005654:	af04      	add	r7, sp, #16
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800565c:	2300      	movs	r3, #0
 800565e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005660:	f3ef 8305 	mrs	r3, IPSR
 8005664:	617b      	str	r3, [r7, #20]
  return(result);
 8005666:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005668:	2b00      	cmp	r3, #0
 800566a:	d17e      	bne.n	800576a <osThreadNew+0x11a>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d07b      	beq.n	800576a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005672:	2380      	movs	r3, #128	; 0x80
 8005674:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005676:	2318      	movs	r3, #24
 8005678:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800567e:	f04f 33ff 	mov.w	r3, #4294967295
 8005682:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d045      	beq.n	8005716 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <osThreadNew+0x48>
        name = attr->name;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <osThreadNew+0x6e>
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b38      	cmp	r3, #56	; 0x38
 80056b0:	d805      	bhi.n	80056be <osThreadNew+0x6e>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <osThreadNew+0x72>
        return (NULL);
 80056be:	2300      	movs	r3, #0
 80056c0:	e054      	b.n	800576c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	089b      	lsrs	r3, r3, #2
 80056d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00e      	beq.n	80056f8 <osThreadNew+0xa8>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	2b5b      	cmp	r3, #91	; 0x5b
 80056e0:	d90a      	bls.n	80056f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d006      	beq.n	80056f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <osThreadNew+0xa8>
        mem = 1;
 80056f2:	2301      	movs	r3, #1
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	e010      	b.n	800571a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10c      	bne.n	800571a <osThreadNew+0xca>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d108      	bne.n	800571a <osThreadNew+0xca>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d104      	bne.n	800571a <osThreadNew+0xca>
          mem = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	61bb      	str	r3, [r7, #24]
 8005714:	e001      	b.n	800571a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d110      	bne.n	8005742 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005728:	9202      	str	r2, [sp, #8]
 800572a:	9301      	str	r3, [sp, #4]
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6a3a      	ldr	r2, [r7, #32]
 8005734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fe0c 	bl	8006354 <xTaskCreateStatic>
 800573c:	4603      	mov	r3, r0
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	e013      	b.n	800576a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d110      	bne.n	800576a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	b29a      	uxth	r2, r3
 800574c:	f107 0310 	add.w	r3, r7, #16
 8005750:	9301      	str	r3, [sp, #4]
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 fe57 	bl	800640e <xTaskCreate>
 8005760:	4603      	mov	r3, r0
 8005762:	2b01      	cmp	r3, #1
 8005764:	d001      	beq.n	800576a <osThreadNew+0x11a>
            hTask = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800576a:	693b      	ldr	r3, [r7, #16]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3728      	adds	r7, #40	; 0x28
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800577c:	f3ef 8305 	mrs	r3, IPSR
 8005780:	60bb      	str	r3, [r7, #8]
  return(result);
 8005782:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <osDelay+0x1c>
    stat = osErrorISR;
 8005788:	f06f 0305 	mvn.w	r3, #5
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	e007      	b.n	80057a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 ff7c 	bl	8006698 <vTaskDelay>
    }
  }

  return (stat);
 80057a0:	68fb      	ldr	r3, [r7, #12]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4a07      	ldr	r2, [pc, #28]	; (80057d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80057bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	4a06      	ldr	r2, [pc, #24]	; (80057dc <vApplicationGetIdleTaskMemory+0x30>)
 80057c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2280      	movs	r2, #128	; 0x80
 80057c8:	601a      	str	r2, [r3, #0]
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	20000210 	.word	0x20000210
 80057dc:	2000026c 	.word	0x2000026c

080057e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4a07      	ldr	r2, [pc, #28]	; (800580c <vApplicationGetTimerTaskMemory+0x2c>)
 80057f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	4a06      	ldr	r2, [pc, #24]	; (8005810 <vApplicationGetTimerTaskMemory+0x30>)
 80057f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057fe:	601a      	str	r2, [r3, #0]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	2000046c 	.word	0x2000046c
 8005810:	200004c8 	.word	0x200004c8

08005814 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f103 0208 	add.w	r2, r3, #8
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f04f 32ff 	mov.w	r2, #4294967295
 800582c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f103 0208 	add.w	r2, r3, #8
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f103 0208 	add.w	r2, r3, #8
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800586e:	b480      	push	{r7}
 8005870:	b085      	sub	sp, #20
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	601a      	str	r2, [r3, #0]
}
 80058aa:	bf00      	nop
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058b6:	b480      	push	{r7}
 80058b8:	b085      	sub	sp, #20
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d103      	bne.n	80058d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	e00c      	b.n	80058f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3308      	adds	r3, #8
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	e002      	b.n	80058e4 <vListInsert+0x2e>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d2f6      	bcs.n	80058de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	601a      	str	r2, [r3, #0]
}
 800591c:	bf00      	nop
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6892      	ldr	r2, [r2, #8]
 800593e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6852      	ldr	r2, [r2, #4]
 8005948:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	429a      	cmp	r2, r3
 8005952:	d103      	bne.n	800595c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	1e5a      	subs	r2, r3, #1
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80059a6:	f002 f94d 	bl	8007c44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b2:	68f9      	ldr	r1, [r7, #12]
 80059b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059b6:	fb01 f303 	mul.w	r3, r1, r3
 80059ba:	441a      	add	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d6:	3b01      	subs	r3, #1
 80059d8:	68f9      	ldr	r1, [r7, #12]
 80059da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059dc:	fb01 f303 	mul.w	r3, r1, r3
 80059e0:	441a      	add	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	22ff      	movs	r2, #255	; 0xff
 80059ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	22ff      	movs	r2, #255	; 0xff
 80059f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d114      	bne.n	8005a26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01a      	beq.n	8005a3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3310      	adds	r3, #16
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f001 f903 	bl	8006c14 <xTaskRemoveFromEventList>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d012      	beq.n	8005a3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a14:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <xQueueGenericReset+0xcc>)
 8005a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	e009      	b.n	8005a3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3310      	adds	r3, #16
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff fef2 	bl	8005814 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3324      	adds	r3, #36	; 0x24
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff feed 	bl	8005814 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a3a:	f002 f933 	bl	8007ca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a3e:	2301      	movs	r3, #1
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	e000ed04 	.word	0xe000ed04

08005a4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08e      	sub	sp, #56	; 0x38
 8005a50:	af02      	add	r7, sp, #8
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <xQueueGenericCreateStatic+0x52>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <xQueueGenericCreateStatic+0x56>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <xQueueGenericCreateStatic+0x58>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	623b      	str	r3, [r7, #32]
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d102      	bne.n	8005aca <xQueueGenericCreateStatic+0x7e>
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <xQueueGenericCreateStatic+0x82>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <xQueueGenericCreateStatic+0x84>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10a      	bne.n	8005aea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	61fb      	str	r3, [r7, #28]
}
 8005ae6:	bf00      	nop
 8005ae8:	e7fe      	b.n	8005ae8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005aea:	2350      	movs	r3, #80	; 0x50
 8005aec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b50      	cmp	r3, #80	; 0x50
 8005af2:	d00a      	beq.n	8005b0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	61bb      	str	r3, [r7, #24]
}
 8005b06:	bf00      	nop
 8005b08:	e7fe      	b.n	8005b08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00d      	beq.n	8005b32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	4613      	mov	r3, r2
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f805 	bl	8005b3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3730      	adds	r7, #48	; 0x30
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d103      	bne.n	8005b58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	e002      	b.n	8005b5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	69b8      	ldr	r0, [r7, #24]
 8005b6e:	f7ff ff05 	bl	800597c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	78fa      	ldrb	r2, [r7, #3]
 8005b76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b7a:	bf00      	nop
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08e      	sub	sp, #56	; 0x38
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b92:	2300      	movs	r3, #0
 8005b94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <xQueueGenericSend+0x32>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bb2:	bf00      	nop
 8005bb4:	e7fe      	b.n	8005bb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d103      	bne.n	8005bc4 <xQueueGenericSend+0x40>
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <xQueueGenericSend+0x44>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e000      	b.n	8005bca <xQueueGenericSend+0x46>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10a      	bne.n	8005be4 <xQueueGenericSend+0x60>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005be0:	bf00      	nop
 8005be2:	e7fe      	b.n	8005be2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d103      	bne.n	8005bf2 <xQueueGenericSend+0x6e>
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <xQueueGenericSend+0x72>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <xQueueGenericSend+0x74>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <xQueueGenericSend+0x8e>
	__asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	623b      	str	r3, [r7, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	e7fe      	b.n	8005c10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c12:	f001 f9bd 	bl	8006f90 <xTaskGetSchedulerState>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d102      	bne.n	8005c22 <xQueueGenericSend+0x9e>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <xQueueGenericSend+0xa2>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <xQueueGenericSend+0xa4>
 8005c26:	2300      	movs	r3, #0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <xQueueGenericSend+0xbe>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	61fb      	str	r3, [r7, #28]
}
 8005c3e:	bf00      	nop
 8005c40:	e7fe      	b.n	8005c40 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c42:	f001 ffff 	bl	8007c44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d302      	bcc.n	8005c58 <xQueueGenericSend+0xd4>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d129      	bne.n	8005cac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c5e:	f000 fa0b 	bl	8006078 <prvCopyDataToQueue>
 8005c62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d010      	beq.n	8005c8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	3324      	adds	r3, #36	; 0x24
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 ffcf 	bl	8006c14 <xTaskRemoveFromEventList>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d013      	beq.n	8005ca4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c7c:	4b3f      	ldr	r3, [pc, #252]	; (8005d7c <xQueueGenericSend+0x1f8>)
 8005c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	e00a      	b.n	8005ca4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d007      	beq.n	8005ca4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c94:	4b39      	ldr	r3, [pc, #228]	; (8005d7c <xQueueGenericSend+0x1f8>)
 8005c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ca4:	f001 fffe 	bl	8007ca4 <vPortExitCritical>
				return pdPASS;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e063      	b.n	8005d74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d103      	bne.n	8005cba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cb2:	f001 fff7 	bl	8007ca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	e05c      	b.n	8005d74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d106      	bne.n	8005cce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cc0:	f107 0314 	add.w	r3, r7, #20
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 f809 	bl	8006cdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cce:	f001 ffe9 	bl	8007ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cd2:	f000 fd7b 	bl	80067cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cd6:	f001 ffb5 	bl	8007c44 <vPortEnterCritical>
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ce0:	b25b      	sxtb	r3, r3
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d103      	bne.n	8005cf0 <xQueueGenericSend+0x16c>
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cf6:	b25b      	sxtb	r3, r3
 8005cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfc:	d103      	bne.n	8005d06 <xQueueGenericSend+0x182>
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d06:	f001 ffcd 	bl	8007ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d0a:	1d3a      	adds	r2, r7, #4
 8005d0c:	f107 0314 	add.w	r3, r7, #20
 8005d10:	4611      	mov	r1, r2
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fff8 	bl	8006d08 <xTaskCheckForTimeOut>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d124      	bne.n	8005d68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d20:	f000 faa2 	bl	8006268 <prvIsQueueFull>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d018      	beq.n	8005d5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	3310      	adds	r3, #16
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	4611      	mov	r1, r2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 ff1e 	bl	8006b74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d3a:	f000 fa2d 	bl	8006198 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d3e:	f000 fd53 	bl	80067e8 <xTaskResumeAll>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f47f af7c 	bne.w	8005c42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005d4a:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <xQueueGenericSend+0x1f8>)
 8005d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	e772      	b.n	8005c42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d5e:	f000 fa1b 	bl	8006198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d62:	f000 fd41 	bl	80067e8 <xTaskResumeAll>
 8005d66:	e76c      	b.n	8005c42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d6a:	f000 fa15 	bl	8006198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d6e:	f000 fd3b 	bl	80067e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3738      	adds	r7, #56	; 0x38
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	e000ed04 	.word	0xe000ed04

08005d80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b090      	sub	sp, #64	; 0x40
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10a      	bne.n	8005dae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005daa:	bf00      	nop
 8005dac:	e7fe      	b.n	8005dac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d103      	bne.n	8005dbc <xQueueGenericSendFromISR+0x3c>
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <xQueueGenericSendFromISR+0x40>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e000      	b.n	8005dc2 <xQueueGenericSendFromISR+0x42>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10a      	bne.n	8005ddc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d103      	bne.n	8005dea <xQueueGenericSendFromISR+0x6a>
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <xQueueGenericSendFromISR+0x6e>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <xQueueGenericSendFromISR+0x70>
 8005dee:	2300      	movs	r3, #0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	623b      	str	r3, [r7, #32]
}
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e0a:	f001 fffd 	bl	8007e08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e0e:	f3ef 8211 	mrs	r2, BASEPRI
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	61fa      	str	r2, [r7, #28]
 8005e24:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e26:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d302      	bcc.n	8005e3c <xQueueGenericSendFromISR+0xbc>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d12f      	bne.n	8005e9c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	68b9      	ldr	r1, [r7, #8]
 8005e50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e52:	f000 f911 	bl	8006078 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5e:	d112      	bne.n	8005e86 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d016      	beq.n	8005e96 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	3324      	adds	r3, #36	; 0x24
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fed1 	bl	8006c14 <xTaskRemoveFromEventList>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00e      	beq.n	8005e96 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00b      	beq.n	8005e96 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	e007      	b.n	8005e96 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	b25a      	sxtb	r2, r3
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e96:	2301      	movs	r3, #1
 8005e98:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005e9a:	e001      	b.n	8005ea0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005eaa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3740      	adds	r7, #64	; 0x40
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
	...

08005eb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08c      	sub	sp, #48	; 0x30
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <xQueueReceive+0x30>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	623b      	str	r3, [r7, #32]
}
 8005ee4:	bf00      	nop
 8005ee6:	e7fe      	b.n	8005ee6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d103      	bne.n	8005ef6 <xQueueReceive+0x3e>
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <xQueueReceive+0x42>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <xQueueReceive+0x44>
 8005efa:	2300      	movs	r3, #0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10a      	bne.n	8005f16 <xQueueReceive+0x5e>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	61fb      	str	r3, [r7, #28]
}
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f16:	f001 f83b 	bl	8006f90 <xTaskGetSchedulerState>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d102      	bne.n	8005f26 <xQueueReceive+0x6e>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <xQueueReceive+0x72>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <xQueueReceive+0x74>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <xQueueReceive+0x8e>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	61bb      	str	r3, [r7, #24]
}
 8005f42:	bf00      	nop
 8005f44:	e7fe      	b.n	8005f44 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f46:	f001 fe7d 	bl	8007c44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d01f      	beq.n	8005f96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f5a:	f000 f8f7 	bl	800614c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	1e5a      	subs	r2, r3, #1
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00f      	beq.n	8005f8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f70:	3310      	adds	r3, #16
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fe4e 	bl	8006c14 <xTaskRemoveFromEventList>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d007      	beq.n	8005f8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f7e:	4b3d      	ldr	r3, [pc, #244]	; (8006074 <xQueueReceive+0x1bc>)
 8005f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f8e:	f001 fe89 	bl	8007ca4 <vPortExitCritical>
				return pdPASS;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e069      	b.n	800606a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d103      	bne.n	8005fa4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f9c:	f001 fe82 	bl	8007ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e062      	b.n	800606a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005faa:	f107 0310 	add.w	r3, r7, #16
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 fe94 	bl	8006cdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fb8:	f001 fe74 	bl	8007ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fbc:	f000 fc06 	bl	80067cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fc0:	f001 fe40 	bl	8007c44 <vPortEnterCritical>
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fca:	b25b      	sxtb	r3, r3
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d103      	bne.n	8005fda <xQueueReceive+0x122>
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fe0:	b25b      	sxtb	r3, r3
 8005fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe6:	d103      	bne.n	8005ff0 <xQueueReceive+0x138>
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ff0:	f001 fe58 	bl	8007ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ff4:	1d3a      	adds	r2, r7, #4
 8005ff6:	f107 0310 	add.w	r3, r7, #16
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 fe83 	bl	8006d08 <xTaskCheckForTimeOut>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d123      	bne.n	8006050 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800600a:	f000 f917 	bl	800623c <prvIsQueueEmpty>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d017      	beq.n	8006044 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	3324      	adds	r3, #36	; 0x24
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	4611      	mov	r1, r2
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fda9 	bl	8006b74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006024:	f000 f8b8 	bl	8006198 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006028:	f000 fbde 	bl	80067e8 <xTaskResumeAll>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d189      	bne.n	8005f46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006032:	4b10      	ldr	r3, [pc, #64]	; (8006074 <xQueueReceive+0x1bc>)
 8006034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	e780      	b.n	8005f46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006046:	f000 f8a7 	bl	8006198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800604a:	f000 fbcd 	bl	80067e8 <xTaskResumeAll>
 800604e:	e77a      	b.n	8005f46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006052:	f000 f8a1 	bl	8006198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006056:	f000 fbc7 	bl	80067e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800605a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800605c:	f000 f8ee 	bl	800623c <prvIsQueueEmpty>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	f43f af6f 	beq.w	8005f46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006068:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800606a:	4618      	mov	r0, r3
 800606c:	3730      	adds	r7, #48	; 0x30
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	e000ed04 	.word	0xe000ed04

08006078 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006084:	2300      	movs	r3, #0
 8006086:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10d      	bne.n	80060b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d14d      	bne.n	800613a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 ff92 	bl	8006fcc <xTaskPriorityDisinherit>
 80060a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	609a      	str	r2, [r3, #8]
 80060b0:	e043      	b.n	800613a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d119      	bne.n	80060ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6858      	ldr	r0, [r3, #4]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	461a      	mov	r2, r3
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	f002 f8f4 	bl	80082b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d0:	441a      	add	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d32b      	bcc.n	800613a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	605a      	str	r2, [r3, #4]
 80060ea:	e026      	b.n	800613a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	68d8      	ldr	r0, [r3, #12]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f4:	461a      	mov	r2, r3
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	f002 f8da 	bl	80082b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006104:	425b      	negs	r3, r3
 8006106:	441a      	add	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	429a      	cmp	r2, r3
 8006116:	d207      	bcs.n	8006128 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	425b      	negs	r3, r3
 8006122:	441a      	add	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b02      	cmp	r3, #2
 800612c:	d105      	bne.n	800613a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	3b01      	subs	r3, #1
 8006138:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006142:	697b      	ldr	r3, [r7, #20]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	2b00      	cmp	r3, #0
 800615c:	d018      	beq.n	8006190 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	441a      	add	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68da      	ldr	r2, [r3, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	429a      	cmp	r2, r3
 8006176:	d303      	bcc.n	8006180 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68d9      	ldr	r1, [r3, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006188:	461a      	mov	r2, r3
 800618a:	6838      	ldr	r0, [r7, #0]
 800618c:	f002 f890 	bl	80082b0 <memcpy>
	}
}
 8006190:	bf00      	nop
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80061a0:	f001 fd50 	bl	8007c44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061ac:	e011      	b.n	80061d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d012      	beq.n	80061dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3324      	adds	r3, #36	; 0x24
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fd2a 	bl	8006c14 <xTaskRemoveFromEventList>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80061c6:	f000 fe01 	bl	8006dcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	dce9      	bgt.n	80061ae <prvUnlockQueue+0x16>
 80061da:	e000      	b.n	80061de <prvUnlockQueue+0x46>
					break;
 80061dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	22ff      	movs	r2, #255	; 0xff
 80061e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80061e6:	f001 fd5d 	bl	8007ca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061ea:	f001 fd2b 	bl	8007c44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061f6:	e011      	b.n	800621c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d012      	beq.n	8006226 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3310      	adds	r3, #16
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fd05 	bl	8006c14 <xTaskRemoveFromEventList>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006210:	f000 fddc 	bl	8006dcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006214:	7bbb      	ldrb	r3, [r7, #14]
 8006216:	3b01      	subs	r3, #1
 8006218:	b2db      	uxtb	r3, r3
 800621a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800621c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006220:	2b00      	cmp	r3, #0
 8006222:	dce9      	bgt.n	80061f8 <prvUnlockQueue+0x60>
 8006224:	e000      	b.n	8006228 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006226:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	22ff      	movs	r2, #255	; 0xff
 800622c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006230:	f001 fd38 	bl	8007ca4 <vPortExitCritical>
}
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006244:	f001 fcfe 	bl	8007c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624c:	2b00      	cmp	r3, #0
 800624e:	d102      	bne.n	8006256 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006250:	2301      	movs	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	e001      	b.n	800625a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800625a:	f001 fd23 	bl	8007ca4 <vPortExitCritical>

	return xReturn;
 800625e:	68fb      	ldr	r3, [r7, #12]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006270:	f001 fce8 	bl	8007c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627c:	429a      	cmp	r2, r3
 800627e:	d102      	bne.n	8006286 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006280:	2301      	movs	r3, #1
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	e001      	b.n	800628a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800628a:	f001 fd0b 	bl	8007ca4 <vPortExitCritical>

	return xReturn;
 800628e:	68fb      	ldr	r3, [r7, #12]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	e014      	b.n	80062d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80062a8:	4a0f      	ldr	r2, [pc, #60]	; (80062e8 <vQueueAddToRegistry+0x50>)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10b      	bne.n	80062cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80062b4:	490c      	ldr	r1, [pc, #48]	; (80062e8 <vQueueAddToRegistry+0x50>)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80062be:	4a0a      	ldr	r2, [pc, #40]	; (80062e8 <vQueueAddToRegistry+0x50>)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	4413      	add	r3, r2
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80062ca:	e006      	b.n	80062da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3301      	adds	r3, #1
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b07      	cmp	r3, #7
 80062d6:	d9e7      	bls.n	80062a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	20004cd4 	.word	0x20004cd4

080062ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062fc:	f001 fca2 	bl	8007c44 <vPortEnterCritical>
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006306:	b25b      	sxtb	r3, r3
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630c:	d103      	bne.n	8006316 <vQueueWaitForMessageRestricted+0x2a>
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800631c:	b25b      	sxtb	r3, r3
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	d103      	bne.n	800632c <vQueueWaitForMessageRestricted+0x40>
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800632c:	f001 fcba 	bl	8007ca4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	2b00      	cmp	r3, #0
 8006336:	d106      	bne.n	8006346 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	3324      	adds	r3, #36	; 0x24
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fc3b 	bl	8006bbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006346:	6978      	ldr	r0, [r7, #20]
 8006348:	f7ff ff26 	bl	8006198 <prvUnlockQueue>
	}
 800634c:	bf00      	nop
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08e      	sub	sp, #56	; 0x38
 8006358:	af04      	add	r7, sp, #16
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	623b      	str	r3, [r7, #32]
}
 800637a:	bf00      	nop
 800637c:	e7fe      	b.n	800637c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <xTaskCreateStatic+0x46>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	61fb      	str	r3, [r7, #28]
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800639a:	235c      	movs	r3, #92	; 0x5c
 800639c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	2b5c      	cmp	r3, #92	; 0x5c
 80063a2:	d00a      	beq.n	80063ba <xTaskCreateStatic+0x66>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	61bb      	str	r3, [r7, #24]
}
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80063ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d01e      	beq.n	8006400 <xTaskCreateStatic+0xac>
 80063c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01b      	beq.n	8006400 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	2202      	movs	r2, #2
 80063d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063da:	2300      	movs	r3, #0
 80063dc:	9303      	str	r3, [sp, #12]
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	9302      	str	r3, [sp, #8]
 80063e2:	f107 0314 	add.w	r3, r7, #20
 80063e6:	9301      	str	r3, [sp, #4]
 80063e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 f850 	bl	8006498 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063fa:	f000 f8dd 	bl	80065b8 <prvAddNewTaskToReadyList>
 80063fe:	e001      	b.n	8006404 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006400:	2300      	movs	r3, #0
 8006402:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006404:	697b      	ldr	r3, [r7, #20]
	}
 8006406:	4618      	mov	r0, r3
 8006408:	3728      	adds	r7, #40	; 0x28
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800640e:	b580      	push	{r7, lr}
 8006410:	b08c      	sub	sp, #48	; 0x30
 8006412:	af04      	add	r7, sp, #16
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	603b      	str	r3, [r7, #0]
 800641a:	4613      	mov	r3, r2
 800641c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800641e:	88fb      	ldrh	r3, [r7, #6]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4618      	mov	r0, r3
 8006424:	f001 fd30 	bl	8007e88 <pvPortMalloc>
 8006428:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00e      	beq.n	800644e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006430:	205c      	movs	r0, #92	; 0x5c
 8006432:	f001 fd29 	bl	8007e88 <pvPortMalloc>
 8006436:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	631a      	str	r2, [r3, #48]	; 0x30
 8006444:	e005      	b.n	8006452 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006446:	6978      	ldr	r0, [r7, #20]
 8006448:	f001 fdea 	bl	8008020 <vPortFree>
 800644c:	e001      	b.n	8006452 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d017      	beq.n	8006488 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006460:	88fa      	ldrh	r2, [r7, #6]
 8006462:	2300      	movs	r3, #0
 8006464:	9303      	str	r3, [sp, #12]
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	9302      	str	r3, [sp, #8]
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68b9      	ldr	r1, [r7, #8]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 f80e 	bl	8006498 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800647c:	69f8      	ldr	r0, [r7, #28]
 800647e:	f000 f89b 	bl	80065b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006482:	2301      	movs	r3, #1
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	e002      	b.n	800648e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006488:	f04f 33ff 	mov.w	r3, #4294967295
 800648c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800648e:	69bb      	ldr	r3, [r7, #24]
	}
 8006490:	4618      	mov	r0, r3
 8006492:	3720      	adds	r7, #32
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	461a      	mov	r2, r3
 80064b0:	21a5      	movs	r1, #165	; 0xa5
 80064b2:	f001 ff0b 	bl	80082cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064c0:	3b01      	subs	r3, #1
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	f023 0307 	bic.w	r3, r3, #7
 80064ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	f003 0307 	and.w	r3, r3, #7
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	617b      	str	r3, [r7, #20]
}
 80064ec:	bf00      	nop
 80064ee:	e7fe      	b.n	80064ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01f      	beq.n	8006536 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064f6:	2300      	movs	r3, #0
 80064f8:	61fb      	str	r3, [r7, #28]
 80064fa:	e012      	b.n	8006522 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	4413      	add	r3, r2
 8006502:	7819      	ldrb	r1, [r3, #0]
 8006504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	3334      	adds	r3, #52	; 0x34
 800650c:	460a      	mov	r2, r1
 800650e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	4413      	add	r3, r2
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d006      	beq.n	800652a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	3301      	adds	r3, #1
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	2b0f      	cmp	r3, #15
 8006526:	d9e9      	bls.n	80064fc <prvInitialiseNewTask+0x64>
 8006528:	e000      	b.n	800652c <prvInitialiseNewTask+0x94>
			{
				break;
 800652a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006534:	e003      	b.n	800653e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	2b37      	cmp	r3, #55	; 0x37
 8006542:	d901      	bls.n	8006548 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006544:	2337      	movs	r3, #55	; 0x37
 8006546:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800654c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006552:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	2200      	movs	r2, #0
 8006558:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	3304      	adds	r3, #4
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff f978 	bl	8005854 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	3318      	adds	r3, #24
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff f973 	bl	8005854 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006572:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800657e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006582:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	2200      	movs	r2, #0
 8006588:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	68f9      	ldr	r1, [r7, #12]
 8006596:	69b8      	ldr	r0, [r7, #24]
 8006598:	f001 fa28 	bl	80079ec <pxPortInitialiseStack>
 800659c:	4602      	mov	r2, r0
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065ae:	bf00      	nop
 80065b0:	3720      	adds	r7, #32
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065c0:	f001 fb40 	bl	8007c44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065c4:	4b2d      	ldr	r3, [pc, #180]	; (800667c <prvAddNewTaskToReadyList+0xc4>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3301      	adds	r3, #1
 80065ca:	4a2c      	ldr	r2, [pc, #176]	; (800667c <prvAddNewTaskToReadyList+0xc4>)
 80065cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065ce:	4b2c      	ldr	r3, [pc, #176]	; (8006680 <prvAddNewTaskToReadyList+0xc8>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d109      	bne.n	80065ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065d6:	4a2a      	ldr	r2, [pc, #168]	; (8006680 <prvAddNewTaskToReadyList+0xc8>)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065dc:	4b27      	ldr	r3, [pc, #156]	; (800667c <prvAddNewTaskToReadyList+0xc4>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d110      	bne.n	8006606 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065e4:	f000 fc16 	bl	8006e14 <prvInitialiseTaskLists>
 80065e8:	e00d      	b.n	8006606 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065ea:	4b26      	ldr	r3, [pc, #152]	; (8006684 <prvAddNewTaskToReadyList+0xcc>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d109      	bne.n	8006606 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065f2:	4b23      	ldr	r3, [pc, #140]	; (8006680 <prvAddNewTaskToReadyList+0xc8>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d802      	bhi.n	8006606 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006600:	4a1f      	ldr	r2, [pc, #124]	; (8006680 <prvAddNewTaskToReadyList+0xc8>)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006606:	4b20      	ldr	r3, [pc, #128]	; (8006688 <prvAddNewTaskToReadyList+0xd0>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3301      	adds	r3, #1
 800660c:	4a1e      	ldr	r2, [pc, #120]	; (8006688 <prvAddNewTaskToReadyList+0xd0>)
 800660e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006610:	4b1d      	ldr	r3, [pc, #116]	; (8006688 <prvAddNewTaskToReadyList+0xd0>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661c:	4b1b      	ldr	r3, [pc, #108]	; (800668c <prvAddNewTaskToReadyList+0xd4>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d903      	bls.n	800662c <prvAddNewTaskToReadyList+0x74>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	4a18      	ldr	r2, [pc, #96]	; (800668c <prvAddNewTaskToReadyList+0xd4>)
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4a15      	ldr	r2, [pc, #84]	; (8006690 <prvAddNewTaskToReadyList+0xd8>)
 800663a:	441a      	add	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3304      	adds	r3, #4
 8006640:	4619      	mov	r1, r3
 8006642:	4610      	mov	r0, r2
 8006644:	f7ff f913 	bl	800586e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006648:	f001 fb2c 	bl	8007ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800664c:	4b0d      	ldr	r3, [pc, #52]	; (8006684 <prvAddNewTaskToReadyList+0xcc>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00e      	beq.n	8006672 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006654:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <prvAddNewTaskToReadyList+0xc8>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	429a      	cmp	r2, r3
 8006660:	d207      	bcs.n	8006672 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006662:	4b0c      	ldr	r3, [pc, #48]	; (8006694 <prvAddNewTaskToReadyList+0xdc>)
 8006664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006672:	bf00      	nop
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000d9c 	.word	0x20000d9c
 8006680:	200008c8 	.word	0x200008c8
 8006684:	20000da8 	.word	0x20000da8
 8006688:	20000db8 	.word	0x20000db8
 800668c:	20000da4 	.word	0x20000da4
 8006690:	200008cc 	.word	0x200008cc
 8006694:	e000ed04 	.word	0xe000ed04

08006698 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d017      	beq.n	80066da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066aa:	4b13      	ldr	r3, [pc, #76]	; (80066f8 <vTaskDelay+0x60>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <vTaskDelay+0x30>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	60bb      	str	r3, [r7, #8]
}
 80066c4:	bf00      	nop
 80066c6:	e7fe      	b.n	80066c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066c8:	f000 f880 	bl	80067cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066cc:	2100      	movs	r1, #0
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fdea 	bl	80072a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066d4:	f000 f888 	bl	80067e8 <xTaskResumeAll>
 80066d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d107      	bne.n	80066f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80066e0:	4b06      	ldr	r3, [pc, #24]	; (80066fc <vTaskDelay+0x64>)
 80066e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066f0:	bf00      	nop
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20000dc4 	.word	0x20000dc4
 80066fc:	e000ed04 	.word	0xe000ed04

08006700 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08a      	sub	sp, #40	; 0x28
 8006704:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006706:	2300      	movs	r3, #0
 8006708:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800670a:	2300      	movs	r3, #0
 800670c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800670e:	463a      	mov	r2, r7
 8006710:	1d39      	adds	r1, r7, #4
 8006712:	f107 0308 	add.w	r3, r7, #8
 8006716:	4618      	mov	r0, r3
 8006718:	f7ff f848 	bl	80057ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	9202      	str	r2, [sp, #8]
 8006724:	9301      	str	r3, [sp, #4]
 8006726:	2300      	movs	r3, #0
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	2300      	movs	r3, #0
 800672c:	460a      	mov	r2, r1
 800672e:	4921      	ldr	r1, [pc, #132]	; (80067b4 <vTaskStartScheduler+0xb4>)
 8006730:	4821      	ldr	r0, [pc, #132]	; (80067b8 <vTaskStartScheduler+0xb8>)
 8006732:	f7ff fe0f 	bl	8006354 <xTaskCreateStatic>
 8006736:	4603      	mov	r3, r0
 8006738:	4a20      	ldr	r2, [pc, #128]	; (80067bc <vTaskStartScheduler+0xbc>)
 800673a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800673c:	4b1f      	ldr	r3, [pc, #124]	; (80067bc <vTaskStartScheduler+0xbc>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006744:	2301      	movs	r3, #1
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	e001      	b.n	800674e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d102      	bne.n	800675a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006754:	f000 fdfc 	bl	8007350 <xTimerCreateTimerTask>
 8006758:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d116      	bne.n	800678e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	613b      	str	r3, [r7, #16]
}
 8006772:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006774:	4b12      	ldr	r3, [pc, #72]	; (80067c0 <vTaskStartScheduler+0xc0>)
 8006776:	f04f 32ff 	mov.w	r2, #4294967295
 800677a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800677c:	4b11      	ldr	r3, [pc, #68]	; (80067c4 <vTaskStartScheduler+0xc4>)
 800677e:	2201      	movs	r2, #1
 8006780:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006782:	4b11      	ldr	r3, [pc, #68]	; (80067c8 <vTaskStartScheduler+0xc8>)
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006788:	f001 f9ba 	bl	8007b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800678c:	e00e      	b.n	80067ac <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006794:	d10a      	bne.n	80067ac <vTaskStartScheduler+0xac>
	__asm volatile
 8006796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	60fb      	str	r3, [r7, #12]
}
 80067a8:	bf00      	nop
 80067aa:	e7fe      	b.n	80067aa <vTaskStartScheduler+0xaa>
}
 80067ac:	bf00      	nop
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	0800b13c 	.word	0x0800b13c
 80067b8:	08006de5 	.word	0x08006de5
 80067bc:	20000dc0 	.word	0x20000dc0
 80067c0:	20000dbc 	.word	0x20000dbc
 80067c4:	20000da8 	.word	0x20000da8
 80067c8:	20000da0 	.word	0x20000da0

080067cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80067d0:	4b04      	ldr	r3, [pc, #16]	; (80067e4 <vTaskSuspendAll+0x18>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	4a03      	ldr	r2, [pc, #12]	; (80067e4 <vTaskSuspendAll+0x18>)
 80067d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80067da:	bf00      	nop
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	20000dc4 	.word	0x20000dc4

080067e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80067f6:	4b42      	ldr	r3, [pc, #264]	; (8006900 <xTaskResumeAll+0x118>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <xTaskResumeAll+0x2c>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	603b      	str	r3, [r7, #0]
}
 8006810:	bf00      	nop
 8006812:	e7fe      	b.n	8006812 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006814:	f001 fa16 	bl	8007c44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006818:	4b39      	ldr	r3, [pc, #228]	; (8006900 <xTaskResumeAll+0x118>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3b01      	subs	r3, #1
 800681e:	4a38      	ldr	r2, [pc, #224]	; (8006900 <xTaskResumeAll+0x118>)
 8006820:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006822:	4b37      	ldr	r3, [pc, #220]	; (8006900 <xTaskResumeAll+0x118>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d162      	bne.n	80068f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800682a:	4b36      	ldr	r3, [pc, #216]	; (8006904 <xTaskResumeAll+0x11c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d05e      	beq.n	80068f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006832:	e02f      	b.n	8006894 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006834:	4b34      	ldr	r3, [pc, #208]	; (8006908 <xTaskResumeAll+0x120>)
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	3318      	adds	r3, #24
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff f871 	bl	8005928 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3304      	adds	r3, #4
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff f86c 	bl	8005928 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006854:	4b2d      	ldr	r3, [pc, #180]	; (800690c <xTaskResumeAll+0x124>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	429a      	cmp	r2, r3
 800685a:	d903      	bls.n	8006864 <xTaskResumeAll+0x7c>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	4a2a      	ldr	r2, [pc, #168]	; (800690c <xTaskResumeAll+0x124>)
 8006862:	6013      	str	r3, [r2, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4a27      	ldr	r2, [pc, #156]	; (8006910 <xTaskResumeAll+0x128>)
 8006872:	441a      	add	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3304      	adds	r3, #4
 8006878:	4619      	mov	r1, r3
 800687a:	4610      	mov	r0, r2
 800687c:	f7fe fff7 	bl	800586e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006884:	4b23      	ldr	r3, [pc, #140]	; (8006914 <xTaskResumeAll+0x12c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688a:	429a      	cmp	r2, r3
 800688c:	d302      	bcc.n	8006894 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800688e:	4b22      	ldr	r3, [pc, #136]	; (8006918 <xTaskResumeAll+0x130>)
 8006890:	2201      	movs	r2, #1
 8006892:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006894:	4b1c      	ldr	r3, [pc, #112]	; (8006908 <xTaskResumeAll+0x120>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1cb      	bne.n	8006834 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068a2:	f000 fb55 	bl	8006f50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068a6:	4b1d      	ldr	r3, [pc, #116]	; (800691c <xTaskResumeAll+0x134>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d010      	beq.n	80068d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068b2:	f000 f847 	bl	8006944 <xTaskIncrementTick>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80068bc:	4b16      	ldr	r3, [pc, #88]	; (8006918 <xTaskResumeAll+0x130>)
 80068be:	2201      	movs	r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f1      	bne.n	80068b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80068ce:	4b13      	ldr	r3, [pc, #76]	; (800691c <xTaskResumeAll+0x134>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068d4:	4b10      	ldr	r3, [pc, #64]	; (8006918 <xTaskResumeAll+0x130>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d009      	beq.n	80068f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068dc:	2301      	movs	r3, #1
 80068de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068e0:	4b0f      	ldr	r3, [pc, #60]	; (8006920 <xTaskResumeAll+0x138>)
 80068e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068f0:	f001 f9d8 	bl	8007ca4 <vPortExitCritical>

	return xAlreadyYielded;
 80068f4:	68bb      	ldr	r3, [r7, #8]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000dc4 	.word	0x20000dc4
 8006904:	20000d9c 	.word	0x20000d9c
 8006908:	20000d5c 	.word	0x20000d5c
 800690c:	20000da4 	.word	0x20000da4
 8006910:	200008cc 	.word	0x200008cc
 8006914:	200008c8 	.word	0x200008c8
 8006918:	20000db0 	.word	0x20000db0
 800691c:	20000dac 	.word	0x20000dac
 8006920:	e000ed04 	.word	0xe000ed04

08006924 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800692a:	4b05      	ldr	r3, [pc, #20]	; (8006940 <xTaskGetTickCount+0x1c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006930:	687b      	ldr	r3, [r7, #4]
}
 8006932:	4618      	mov	r0, r3
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	20000da0 	.word	0x20000da0

08006944 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800694e:	4b4f      	ldr	r3, [pc, #316]	; (8006a8c <xTaskIncrementTick+0x148>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f040 808f 	bne.w	8006a76 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006958:	4b4d      	ldr	r3, [pc, #308]	; (8006a90 <xTaskIncrementTick+0x14c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3301      	adds	r3, #1
 800695e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006960:	4a4b      	ldr	r2, [pc, #300]	; (8006a90 <xTaskIncrementTick+0x14c>)
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d120      	bne.n	80069ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800696c:	4b49      	ldr	r3, [pc, #292]	; (8006a94 <xTaskIncrementTick+0x150>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <xTaskIncrementTick+0x48>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	603b      	str	r3, [r7, #0]
}
 8006988:	bf00      	nop
 800698a:	e7fe      	b.n	800698a <xTaskIncrementTick+0x46>
 800698c:	4b41      	ldr	r3, [pc, #260]	; (8006a94 <xTaskIncrementTick+0x150>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	4b41      	ldr	r3, [pc, #260]	; (8006a98 <xTaskIncrementTick+0x154>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a3f      	ldr	r2, [pc, #252]	; (8006a94 <xTaskIncrementTick+0x150>)
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	4a3f      	ldr	r2, [pc, #252]	; (8006a98 <xTaskIncrementTick+0x154>)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	4b3e      	ldr	r3, [pc, #248]	; (8006a9c <xTaskIncrementTick+0x158>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3301      	adds	r3, #1
 80069a6:	4a3d      	ldr	r2, [pc, #244]	; (8006a9c <xTaskIncrementTick+0x158>)
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	f000 fad1 	bl	8006f50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069ae:	4b3c      	ldr	r3, [pc, #240]	; (8006aa0 <xTaskIncrementTick+0x15c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d349      	bcc.n	8006a4c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069b8:	4b36      	ldr	r3, [pc, #216]	; (8006a94 <xTaskIncrementTick+0x150>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d104      	bne.n	80069cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069c2:	4b37      	ldr	r3, [pc, #220]	; (8006aa0 <xTaskIncrementTick+0x15c>)
 80069c4:	f04f 32ff 	mov.w	r2, #4294967295
 80069c8:	601a      	str	r2, [r3, #0]
					break;
 80069ca:	e03f      	b.n	8006a4c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069cc:	4b31      	ldr	r3, [pc, #196]	; (8006a94 <xTaskIncrementTick+0x150>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d203      	bcs.n	80069ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069e4:	4a2e      	ldr	r2, [pc, #184]	; (8006aa0 <xTaskIncrementTick+0x15c>)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069ea:	e02f      	b.n	8006a4c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	3304      	adds	r3, #4
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fe ff99 	bl	8005928 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d004      	beq.n	8006a08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	3318      	adds	r3, #24
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fe ff90 	bl	8005928 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0c:	4b25      	ldr	r3, [pc, #148]	; (8006aa4 <xTaskIncrementTick+0x160>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d903      	bls.n	8006a1c <xTaskIncrementTick+0xd8>
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	4a22      	ldr	r2, [pc, #136]	; (8006aa4 <xTaskIncrementTick+0x160>)
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a20:	4613      	mov	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4a1f      	ldr	r2, [pc, #124]	; (8006aa8 <xTaskIncrementTick+0x164>)
 8006a2a:	441a      	add	r2, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	4619      	mov	r1, r3
 8006a32:	4610      	mov	r0, r2
 8006a34:	f7fe ff1b 	bl	800586e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3c:	4b1b      	ldr	r3, [pc, #108]	; (8006aac <xTaskIncrementTick+0x168>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d3b8      	bcc.n	80069b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a46:	2301      	movs	r3, #1
 8006a48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a4a:	e7b5      	b.n	80069b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a4c:	4b17      	ldr	r3, [pc, #92]	; (8006aac <xTaskIncrementTick+0x168>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a52:	4915      	ldr	r1, [pc, #84]	; (8006aa8 <xTaskIncrementTick+0x164>)
 8006a54:	4613      	mov	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d901      	bls.n	8006a68 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006a64:	2301      	movs	r3, #1
 8006a66:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a68:	4b11      	ldr	r3, [pc, #68]	; (8006ab0 <xTaskIncrementTick+0x16c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d007      	beq.n	8006a80 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006a70:	2301      	movs	r3, #1
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	e004      	b.n	8006a80 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a76:	4b0f      	ldr	r3, [pc, #60]	; (8006ab4 <xTaskIncrementTick+0x170>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	4a0d      	ldr	r2, [pc, #52]	; (8006ab4 <xTaskIncrementTick+0x170>)
 8006a7e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a80:	697b      	ldr	r3, [r7, #20]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000dc4 	.word	0x20000dc4
 8006a90:	20000da0 	.word	0x20000da0
 8006a94:	20000d54 	.word	0x20000d54
 8006a98:	20000d58 	.word	0x20000d58
 8006a9c:	20000db4 	.word	0x20000db4
 8006aa0:	20000dbc 	.word	0x20000dbc
 8006aa4:	20000da4 	.word	0x20000da4
 8006aa8:	200008cc 	.word	0x200008cc
 8006aac:	200008c8 	.word	0x200008c8
 8006ab0:	20000db0 	.word	0x20000db0
 8006ab4:	20000dac 	.word	0x20000dac

08006ab8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006abe:	4b28      	ldr	r3, [pc, #160]	; (8006b60 <vTaskSwitchContext+0xa8>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ac6:	4b27      	ldr	r3, [pc, #156]	; (8006b64 <vTaskSwitchContext+0xac>)
 8006ac8:	2201      	movs	r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006acc:	e041      	b.n	8006b52 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006ace:	4b25      	ldr	r3, [pc, #148]	; (8006b64 <vTaskSwitchContext+0xac>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad4:	4b24      	ldr	r3, [pc, #144]	; (8006b68 <vTaskSwitchContext+0xb0>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	e010      	b.n	8006afe <vTaskSwitchContext+0x46>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <vTaskSwitchContext+0x40>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	607b      	str	r3, [r7, #4]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <vTaskSwitchContext+0x3e>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	491b      	ldr	r1, [pc, #108]	; (8006b6c <vTaskSwitchContext+0xb4>)
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	440b      	add	r3, r1
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0e4      	beq.n	8006adc <vTaskSwitchContext+0x24>
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4a13      	ldr	r2, [pc, #76]	; (8006b6c <vTaskSwitchContext+0xb4>)
 8006b1e:	4413      	add	r3, r2
 8006b20:	60bb      	str	r3, [r7, #8]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	605a      	str	r2, [r3, #4]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	3308      	adds	r3, #8
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d104      	bne.n	8006b42 <vTaskSwitchContext+0x8a>
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	605a      	str	r2, [r3, #4]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	4a09      	ldr	r2, [pc, #36]	; (8006b70 <vTaskSwitchContext+0xb8>)
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	4a06      	ldr	r2, [pc, #24]	; (8006b68 <vTaskSwitchContext+0xb0>)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6013      	str	r3, [r2, #0]
}
 8006b52:	bf00      	nop
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	20000dc4 	.word	0x20000dc4
 8006b64:	20000db0 	.word	0x20000db0
 8006b68:	20000da4 	.word	0x20000da4
 8006b6c:	200008cc 	.word	0x200008cc
 8006b70:	200008c8 	.word	0x200008c8

08006b74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10a      	bne.n	8006b9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	60fb      	str	r3, [r7, #12]
}
 8006b96:	bf00      	nop
 8006b98:	e7fe      	b.n	8006b98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b9a:	4b07      	ldr	r3, [pc, #28]	; (8006bb8 <vTaskPlaceOnEventList+0x44>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3318      	adds	r3, #24
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fe fe87 	bl	80058b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ba8:	2101      	movs	r1, #1
 8006baa:	6838      	ldr	r0, [r7, #0]
 8006bac:	f000 fb7c 	bl	80072a8 <prvAddCurrentTaskToDelayedList>
}
 8006bb0:	bf00      	nop
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	200008c8 	.word	0x200008c8

08006bbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	617b      	str	r3, [r7, #20]
}
 8006be0:	bf00      	nop
 8006be2:	e7fe      	b.n	8006be2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006be4:	4b0a      	ldr	r3, [pc, #40]	; (8006c10 <vTaskPlaceOnEventListRestricted+0x54>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3318      	adds	r3, #24
 8006bea:	4619      	mov	r1, r3
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7fe fe3e 	bl	800586e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bfc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	68b8      	ldr	r0, [r7, #8]
 8006c02:	f000 fb51 	bl	80072a8 <prvAddCurrentTaskToDelayedList>
	}
 8006c06:	bf00      	nop
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	200008c8 	.word	0x200008c8

08006c14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10a      	bne.n	8006c40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	60fb      	str	r3, [r7, #12]
}
 8006c3c:	bf00      	nop
 8006c3e:	e7fe      	b.n	8006c3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	3318      	adds	r3, #24
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fe fe6f 	bl	8005928 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c4a:	4b1e      	ldr	r3, [pc, #120]	; (8006cc4 <xTaskRemoveFromEventList+0xb0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d11d      	bne.n	8006c8e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	3304      	adds	r3, #4
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe fe66 	bl	8005928 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c60:	4b19      	ldr	r3, [pc, #100]	; (8006cc8 <xTaskRemoveFromEventList+0xb4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d903      	bls.n	8006c70 <xTaskRemoveFromEventList+0x5c>
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	4a16      	ldr	r2, [pc, #88]	; (8006cc8 <xTaskRemoveFromEventList+0xb4>)
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4a13      	ldr	r2, [pc, #76]	; (8006ccc <xTaskRemoveFromEventList+0xb8>)
 8006c7e:	441a      	add	r2, r3
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f7fe fdf1 	bl	800586e <vListInsertEnd>
 8006c8c:	e005      	b.n	8006c9a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	3318      	adds	r3, #24
 8006c92:	4619      	mov	r1, r3
 8006c94:	480e      	ldr	r0, [pc, #56]	; (8006cd0 <xTaskRemoveFromEventList+0xbc>)
 8006c96:	f7fe fdea 	bl	800586e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	; (8006cd4 <xTaskRemoveFromEventList+0xc0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d905      	bls.n	8006cb4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cac:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <xTaskRemoveFromEventList+0xc4>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	e001      	b.n	8006cb8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006cb8:	697b      	ldr	r3, [r7, #20]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000dc4 	.word	0x20000dc4
 8006cc8:	20000da4 	.word	0x20000da4
 8006ccc:	200008cc 	.word	0x200008cc
 8006cd0:	20000d5c 	.word	0x20000d5c
 8006cd4:	200008c8 	.word	0x200008c8
 8006cd8:	20000db0 	.word	0x20000db0

08006cdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ce4:	4b06      	ldr	r3, [pc, #24]	; (8006d00 <vTaskInternalSetTimeOutState+0x24>)
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006cec:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <vTaskInternalSetTimeOutState+0x28>)
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	605a      	str	r2, [r3, #4]
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	20000db4 	.word	0x20000db4
 8006d04:	20000da0 	.word	0x20000da0

08006d08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	613b      	str	r3, [r7, #16]
}
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	60fb      	str	r3, [r7, #12]
}
 8006d46:	bf00      	nop
 8006d48:	e7fe      	b.n	8006d48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006d4a:	f000 ff7b 	bl	8007c44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d4e:	4b1d      	ldr	r3, [pc, #116]	; (8006dc4 <xTaskCheckForTimeOut+0xbc>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d66:	d102      	bne.n	8006d6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61fb      	str	r3, [r7, #28]
 8006d6c:	e023      	b.n	8006db6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <xTaskCheckForTimeOut+0xc0>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d007      	beq.n	8006d8a <xTaskCheckForTimeOut+0x82>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d302      	bcc.n	8006d8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d84:	2301      	movs	r3, #1
 8006d86:	61fb      	str	r3, [r7, #28]
 8006d88:	e015      	b.n	8006db6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d20b      	bcs.n	8006dac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	1ad2      	subs	r2, r2, r3
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7ff ff9b 	bl	8006cdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006da6:	2300      	movs	r3, #0
 8006da8:	61fb      	str	r3, [r7, #28]
 8006daa:	e004      	b.n	8006db6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006db2:	2301      	movs	r3, #1
 8006db4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006db6:	f000 ff75 	bl	8007ca4 <vPortExitCritical>

	return xReturn;
 8006dba:	69fb      	ldr	r3, [r7, #28]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3720      	adds	r7, #32
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20000da0 	.word	0x20000da0
 8006dc8:	20000db4 	.word	0x20000db4

08006dcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006dd0:	4b03      	ldr	r3, [pc, #12]	; (8006de0 <vTaskMissedYield+0x14>)
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	20000db0 	.word	0x20000db0

08006de4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006dec:	f000 f852 	bl	8006e94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006df0:	4b06      	ldr	r3, [pc, #24]	; (8006e0c <prvIdleTask+0x28>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d9f9      	bls.n	8006dec <prvIdleTask+0x8>
			{
				taskYIELD();
 8006df8:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <prvIdleTask+0x2c>)
 8006dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e08:	e7f0      	b.n	8006dec <prvIdleTask+0x8>
 8006e0a:	bf00      	nop
 8006e0c:	200008cc 	.word	0x200008cc
 8006e10:	e000ed04 	.word	0xe000ed04

08006e14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	607b      	str	r3, [r7, #4]
 8006e1e:	e00c      	b.n	8006e3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4a12      	ldr	r2, [pc, #72]	; (8006e74 <prvInitialiseTaskLists+0x60>)
 8006e2c:	4413      	add	r3, r2
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe fcf0 	bl	8005814 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	3301      	adds	r3, #1
 8006e38:	607b      	str	r3, [r7, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b37      	cmp	r3, #55	; 0x37
 8006e3e:	d9ef      	bls.n	8006e20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e40:	480d      	ldr	r0, [pc, #52]	; (8006e78 <prvInitialiseTaskLists+0x64>)
 8006e42:	f7fe fce7 	bl	8005814 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e46:	480d      	ldr	r0, [pc, #52]	; (8006e7c <prvInitialiseTaskLists+0x68>)
 8006e48:	f7fe fce4 	bl	8005814 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e4c:	480c      	ldr	r0, [pc, #48]	; (8006e80 <prvInitialiseTaskLists+0x6c>)
 8006e4e:	f7fe fce1 	bl	8005814 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e52:	480c      	ldr	r0, [pc, #48]	; (8006e84 <prvInitialiseTaskLists+0x70>)
 8006e54:	f7fe fcde 	bl	8005814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e58:	480b      	ldr	r0, [pc, #44]	; (8006e88 <prvInitialiseTaskLists+0x74>)
 8006e5a:	f7fe fcdb 	bl	8005814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e5e:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <prvInitialiseTaskLists+0x78>)
 8006e60:	4a05      	ldr	r2, [pc, #20]	; (8006e78 <prvInitialiseTaskLists+0x64>)
 8006e62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e64:	4b0a      	ldr	r3, [pc, #40]	; (8006e90 <prvInitialiseTaskLists+0x7c>)
 8006e66:	4a05      	ldr	r2, [pc, #20]	; (8006e7c <prvInitialiseTaskLists+0x68>)
 8006e68:	601a      	str	r2, [r3, #0]
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	200008cc 	.word	0x200008cc
 8006e78:	20000d2c 	.word	0x20000d2c
 8006e7c:	20000d40 	.word	0x20000d40
 8006e80:	20000d5c 	.word	0x20000d5c
 8006e84:	20000d70 	.word	0x20000d70
 8006e88:	20000d88 	.word	0x20000d88
 8006e8c:	20000d54 	.word	0x20000d54
 8006e90:	20000d58 	.word	0x20000d58

08006e94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e9a:	e019      	b.n	8006ed0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e9c:	f000 fed2 	bl	8007c44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ea0:	4b10      	ldr	r3, [pc, #64]	; (8006ee4 <prvCheckTasksWaitingTermination+0x50>)
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fe fd3b 	bl	8005928 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <prvCheckTasksWaitingTermination+0x54>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	4a0b      	ldr	r2, [pc, #44]	; (8006ee8 <prvCheckTasksWaitingTermination+0x54>)
 8006eba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ebc:	4b0b      	ldr	r3, [pc, #44]	; (8006eec <prvCheckTasksWaitingTermination+0x58>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	4a0a      	ldr	r2, [pc, #40]	; (8006eec <prvCheckTasksWaitingTermination+0x58>)
 8006ec4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ec6:	f000 feed 	bl	8007ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f810 	bl	8006ef0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ed0:	4b06      	ldr	r3, [pc, #24]	; (8006eec <prvCheckTasksWaitingTermination+0x58>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1e1      	bne.n	8006e9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ed8:	bf00      	nop
 8006eda:	bf00      	nop
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000d70 	.word	0x20000d70
 8006ee8:	20000d9c 	.word	0x20000d9c
 8006eec:	20000d84 	.word	0x20000d84

08006ef0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d108      	bne.n	8006f14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	4618      	mov	r0, r3
 8006f08:	f001 f88a 	bl	8008020 <vPortFree>
				vPortFree( pxTCB );
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f001 f887 	bl	8008020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f12:	e018      	b.n	8006f46 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d103      	bne.n	8006f26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f001 f87e 	bl	8008020 <vPortFree>
	}
 8006f24:	e00f      	b.n	8006f46 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d00a      	beq.n	8006f46 <prvDeleteTCB+0x56>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	60fb      	str	r3, [r7, #12]
}
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <prvDeleteTCB+0x54>
	}
 8006f46:	bf00      	nop
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f56:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <prvResetNextTaskUnblockTime+0x38>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d104      	bne.n	8006f6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f60:	4b0a      	ldr	r3, [pc, #40]	; (8006f8c <prvResetNextTaskUnblockTime+0x3c>)
 8006f62:	f04f 32ff 	mov.w	r2, #4294967295
 8006f66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f68:	e008      	b.n	8006f7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f6a:	4b07      	ldr	r3, [pc, #28]	; (8006f88 <prvResetNextTaskUnblockTime+0x38>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	4a04      	ldr	r2, [pc, #16]	; (8006f8c <prvResetNextTaskUnblockTime+0x3c>)
 8006f7a:	6013      	str	r3, [r2, #0]
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	20000d54 	.word	0x20000d54
 8006f8c:	20000dbc 	.word	0x20000dbc

08006f90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f96:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <xTaskGetSchedulerState+0x34>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d102      	bne.n	8006fa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	607b      	str	r3, [r7, #4]
 8006fa2:	e008      	b.n	8006fb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fa4:	4b08      	ldr	r3, [pc, #32]	; (8006fc8 <xTaskGetSchedulerState+0x38>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d102      	bne.n	8006fb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fac:	2302      	movs	r3, #2
 8006fae:	607b      	str	r3, [r7, #4]
 8006fb0:	e001      	b.n	8006fb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fb6:	687b      	ldr	r3, [r7, #4]
	}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	20000da8 	.word	0x20000da8
 8006fc8:	20000dc4 	.word	0x20000dc4

08006fcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d056      	beq.n	8007090 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006fe2:	4b2e      	ldr	r3, [pc, #184]	; (800709c <xTaskPriorityDisinherit+0xd0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d00a      	beq.n	8007002 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	60fb      	str	r3, [r7, #12]
}
 8006ffe:	bf00      	nop
 8007000:	e7fe      	b.n	8007000 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	60bb      	str	r3, [r7, #8]
}
 800701c:	bf00      	nop
 800701e:	e7fe      	b.n	800701e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007024:	1e5a      	subs	r2, r3, #1
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007032:	429a      	cmp	r2, r3
 8007034:	d02c      	beq.n	8007090 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703a:	2b00      	cmp	r3, #0
 800703c:	d128      	bne.n	8007090 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	3304      	adds	r3, #4
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe fc70 	bl	8005928 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007060:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <xTaskPriorityDisinherit+0xd4>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d903      	bls.n	8007070 <xTaskPriorityDisinherit+0xa4>
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	4a0c      	ldr	r2, [pc, #48]	; (80070a0 <xTaskPriorityDisinherit+0xd4>)
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4a09      	ldr	r2, [pc, #36]	; (80070a4 <xTaskPriorityDisinherit+0xd8>)
 800707e:	441a      	add	r2, r3
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f7fe fbf1 	bl	800586e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800708c:	2301      	movs	r3, #1
 800708e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007090:	697b      	ldr	r3, [r7, #20]
	}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	200008c8 	.word	0x200008c8
 80070a0:	20000da4 	.word	0x20000da4
 80070a4:	200008cc 	.word	0x200008cc

080070a8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80070b2:	f000 fdc7 	bl	8007c44 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80070b6:	4b1e      	ldr	r3, [pc, #120]	; (8007130 <ulTaskNotifyTake+0x88>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d113      	bne.n	80070e8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80070c0:	4b1b      	ldr	r3, [pc, #108]	; (8007130 <ulTaskNotifyTake+0x88>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00b      	beq.n	80070e8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070d0:	2101      	movs	r1, #1
 80070d2:	6838      	ldr	r0, [r7, #0]
 80070d4:	f000 f8e8 	bl	80072a8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80070d8:	4b16      	ldr	r3, [pc, #88]	; (8007134 <ulTaskNotifyTake+0x8c>)
 80070da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80070e8:	f000 fddc 	bl	8007ca4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80070ec:	f000 fdaa 	bl	8007c44 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80070f0:	4b0f      	ldr	r3, [pc, #60]	; (8007130 <ulTaskNotifyTake+0x88>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00c      	beq.n	8007118 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d004      	beq.n	800710e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007104:	4b0a      	ldr	r3, [pc, #40]	; (8007130 <ulTaskNotifyTake+0x88>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2200      	movs	r2, #0
 800710a:	655a      	str	r2, [r3, #84]	; 0x54
 800710c:	e004      	b.n	8007118 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800710e:	4b08      	ldr	r3, [pc, #32]	; (8007130 <ulTaskNotifyTake+0x88>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	3a01      	subs	r2, #1
 8007116:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007118:	4b05      	ldr	r3, [pc, #20]	; (8007130 <ulTaskNotifyTake+0x88>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8007122:	f000 fdbf 	bl	8007ca4 <vPortExitCritical>

		return ulReturn;
 8007126:	68fb      	ldr	r3, [r7, #12]
	}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	200008c8 	.word	0x200008c8
 8007134:	e000ed04 	.word	0xe000ed04

08007138 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007138:	b580      	push	{r7, lr}
 800713a:	b08a      	sub	sp, #40	; 0x28
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	4613      	mov	r3, r2
 8007146:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007148:	2301      	movs	r3, #1
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10a      	bne.n	8007168 <xTaskGenericNotify+0x30>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	61bb      	str	r3, [r7, #24]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800716c:	f000 fd6a 	bl	8007c44 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007184:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	2202      	movs	r2, #2
 800718a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	2b04      	cmp	r3, #4
 8007192:	d828      	bhi.n	80071e6 <xTaskGenericNotify+0xae>
 8007194:	a201      	add	r2, pc, #4	; (adr r2, 800719c <xTaskGenericNotify+0x64>)
 8007196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719a:	bf00      	nop
 800719c:	08007207 	.word	0x08007207
 80071a0:	080071b1 	.word	0x080071b1
 80071a4:	080071bf 	.word	0x080071bf
 80071a8:	080071cb 	.word	0x080071cb
 80071ac:	080071d3 	.word	0x080071d3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80071bc:	e026      	b.n	800720c <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80071c8:	e020      	b.n	800720c <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80071d0:	e01c      	b.n	800720c <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80071d2:	7ffb      	ldrb	r3, [r7, #31]
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d003      	beq.n	80071e0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80071de:	e015      	b.n	800720c <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80071e4:	e012      	b.n	800720c <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ee:	d00c      	beq.n	800720a <xTaskGenericNotify+0xd2>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	617b      	str	r3, [r7, #20]
}
 8007202:	bf00      	nop
 8007204:	e7fe      	b.n	8007204 <xTaskGenericNotify+0xcc>
					break;
 8007206:	bf00      	nop
 8007208:	e000      	b.n	800720c <xTaskGenericNotify+0xd4>

					break;
 800720a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800720c:	7ffb      	ldrb	r3, [r7, #31]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d13a      	bne.n	8007288 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	3304      	adds	r3, #4
 8007216:	4618      	mov	r0, r3
 8007218:	f7fe fb86 	bl	8005928 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007220:	4b1d      	ldr	r3, [pc, #116]	; (8007298 <xTaskGenericNotify+0x160>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	429a      	cmp	r2, r3
 8007226:	d903      	bls.n	8007230 <xTaskGenericNotify+0xf8>
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	4a1a      	ldr	r2, [pc, #104]	; (8007298 <xTaskGenericNotify+0x160>)
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007234:	4613      	mov	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4a17      	ldr	r2, [pc, #92]	; (800729c <xTaskGenericNotify+0x164>)
 800723e:	441a      	add	r2, r3
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	3304      	adds	r3, #4
 8007244:	4619      	mov	r1, r3
 8007246:	4610      	mov	r0, r2
 8007248:	f7fe fb11 	bl	800586e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00a      	beq.n	800726a <xTaskGenericNotify+0x132>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	613b      	str	r3, [r7, #16]
}
 8007266:	bf00      	nop
 8007268:	e7fe      	b.n	8007268 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726e:	4b0c      	ldr	r3, [pc, #48]	; (80072a0 <xTaskGenericNotify+0x168>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007274:	429a      	cmp	r2, r3
 8007276:	d907      	bls.n	8007288 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007278:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <xTaskGenericNotify+0x16c>)
 800727a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007288:	f000 fd0c 	bl	8007ca4 <vPortExitCritical>

		return xReturn;
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800728e:	4618      	mov	r0, r3
 8007290:	3728      	adds	r7, #40	; 0x28
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20000da4 	.word	0x20000da4
 800729c:	200008cc 	.word	0x200008cc
 80072a0:	200008c8 	.word	0x200008c8
 80072a4:	e000ed04 	.word	0xe000ed04

080072a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072b2:	4b21      	ldr	r3, [pc, #132]	; (8007338 <prvAddCurrentTaskToDelayedList+0x90>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072b8:	4b20      	ldr	r3, [pc, #128]	; (800733c <prvAddCurrentTaskToDelayedList+0x94>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3304      	adds	r3, #4
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fe fb32 	bl	8005928 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ca:	d10a      	bne.n	80072e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d007      	beq.n	80072e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072d2:	4b1a      	ldr	r3, [pc, #104]	; (800733c <prvAddCurrentTaskToDelayedList+0x94>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4619      	mov	r1, r3
 80072da:	4819      	ldr	r0, [pc, #100]	; (8007340 <prvAddCurrentTaskToDelayedList+0x98>)
 80072dc:	f7fe fac7 	bl	800586e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072e0:	e026      	b.n	8007330 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4413      	add	r3, r2
 80072e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072ea:	4b14      	ldr	r3, [pc, #80]	; (800733c <prvAddCurrentTaskToDelayedList+0x94>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d209      	bcs.n	800730e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072fa:	4b12      	ldr	r3, [pc, #72]	; (8007344 <prvAddCurrentTaskToDelayedList+0x9c>)
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	4b0f      	ldr	r3, [pc, #60]	; (800733c <prvAddCurrentTaskToDelayedList+0x94>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3304      	adds	r3, #4
 8007304:	4619      	mov	r1, r3
 8007306:	4610      	mov	r0, r2
 8007308:	f7fe fad5 	bl	80058b6 <vListInsert>
}
 800730c:	e010      	b.n	8007330 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800730e:	4b0e      	ldr	r3, [pc, #56]	; (8007348 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4b0a      	ldr	r3, [pc, #40]	; (800733c <prvAddCurrentTaskToDelayedList+0x94>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3304      	adds	r3, #4
 8007318:	4619      	mov	r1, r3
 800731a:	4610      	mov	r0, r2
 800731c:	f7fe facb 	bl	80058b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	429a      	cmp	r2, r3
 8007328:	d202      	bcs.n	8007330 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800732a:	4a08      	ldr	r2, [pc, #32]	; (800734c <prvAddCurrentTaskToDelayedList+0xa4>)
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	6013      	str	r3, [r2, #0]
}
 8007330:	bf00      	nop
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	20000da0 	.word	0x20000da0
 800733c:	200008c8 	.word	0x200008c8
 8007340:	20000d88 	.word	0x20000d88
 8007344:	20000d58 	.word	0x20000d58
 8007348:	20000d54 	.word	0x20000d54
 800734c:	20000dbc 	.word	0x20000dbc

08007350 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b08a      	sub	sp, #40	; 0x28
 8007354:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007356:	2300      	movs	r3, #0
 8007358:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800735a:	f000 fb07 	bl	800796c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800735e:	4b1c      	ldr	r3, [pc, #112]	; (80073d0 <xTimerCreateTimerTask+0x80>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d021      	beq.n	80073aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007366:	2300      	movs	r3, #0
 8007368:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800736a:	2300      	movs	r3, #0
 800736c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800736e:	1d3a      	adds	r2, r7, #4
 8007370:	f107 0108 	add.w	r1, r7, #8
 8007374:	f107 030c 	add.w	r3, r7, #12
 8007378:	4618      	mov	r0, r3
 800737a:	f7fe fa31 	bl	80057e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	9202      	str	r2, [sp, #8]
 8007386:	9301      	str	r3, [sp, #4]
 8007388:	2302      	movs	r3, #2
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	2300      	movs	r3, #0
 800738e:	460a      	mov	r2, r1
 8007390:	4910      	ldr	r1, [pc, #64]	; (80073d4 <xTimerCreateTimerTask+0x84>)
 8007392:	4811      	ldr	r0, [pc, #68]	; (80073d8 <xTimerCreateTimerTask+0x88>)
 8007394:	f7fe ffde 	bl	8006354 <xTaskCreateStatic>
 8007398:	4603      	mov	r3, r0
 800739a:	4a10      	ldr	r2, [pc, #64]	; (80073dc <xTimerCreateTimerTask+0x8c>)
 800739c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800739e:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <xTimerCreateTimerTask+0x8c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80073a6:	2301      	movs	r3, #1
 80073a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10a      	bne.n	80073c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	613b      	str	r3, [r7, #16]
}
 80073c2:	bf00      	nop
 80073c4:	e7fe      	b.n	80073c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80073c6:	697b      	ldr	r3, [r7, #20]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	20000df8 	.word	0x20000df8
 80073d4:	0800b144 	.word	0x0800b144
 80073d8:	08007515 	.word	0x08007515
 80073dc:	20000dfc 	.word	0x20000dfc

080073e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08a      	sub	sp, #40	; 0x28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10a      	bne.n	800740e <xTimerGenericCommand+0x2e>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	623b      	str	r3, [r7, #32]
}
 800740a:	bf00      	nop
 800740c:	e7fe      	b.n	800740c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800740e:	4b1a      	ldr	r3, [pc, #104]	; (8007478 <xTimerGenericCommand+0x98>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d02a      	beq.n	800746c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2b05      	cmp	r3, #5
 8007426:	dc18      	bgt.n	800745a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007428:	f7ff fdb2 	bl	8006f90 <xTaskGetSchedulerState>
 800742c:	4603      	mov	r3, r0
 800742e:	2b02      	cmp	r3, #2
 8007430:	d109      	bne.n	8007446 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007432:	4b11      	ldr	r3, [pc, #68]	; (8007478 <xTimerGenericCommand+0x98>)
 8007434:	6818      	ldr	r0, [r3, #0]
 8007436:	f107 0110 	add.w	r1, r7, #16
 800743a:	2300      	movs	r3, #0
 800743c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800743e:	f7fe fba1 	bl	8005b84 <xQueueGenericSend>
 8007442:	6278      	str	r0, [r7, #36]	; 0x24
 8007444:	e012      	b.n	800746c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007446:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <xTimerGenericCommand+0x98>)
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	f107 0110 	add.w	r1, r7, #16
 800744e:	2300      	movs	r3, #0
 8007450:	2200      	movs	r2, #0
 8007452:	f7fe fb97 	bl	8005b84 <xQueueGenericSend>
 8007456:	6278      	str	r0, [r7, #36]	; 0x24
 8007458:	e008      	b.n	800746c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800745a:	4b07      	ldr	r3, [pc, #28]	; (8007478 <xTimerGenericCommand+0x98>)
 800745c:	6818      	ldr	r0, [r3, #0]
 800745e:	f107 0110 	add.w	r1, r7, #16
 8007462:	2300      	movs	r3, #0
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	f7fe fc8b 	bl	8005d80 <xQueueGenericSendFromISR>
 800746a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800746e:	4618      	mov	r0, r3
 8007470:	3728      	adds	r7, #40	; 0x28
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20000df8 	.word	0x20000df8

0800747c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af02      	add	r7, sp, #8
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007486:	4b22      	ldr	r3, [pc, #136]	; (8007510 <prvProcessExpiredTimer+0x94>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	3304      	adds	r3, #4
 8007494:	4618      	mov	r0, r3
 8007496:	f7fe fa47 	bl	8005928 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074a0:	f003 0304 	and.w	r3, r3, #4
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d022      	beq.n	80074ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	699a      	ldr	r2, [r3, #24]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	18d1      	adds	r1, r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	6978      	ldr	r0, [r7, #20]
 80074b6:	f000 f8d1 	bl	800765c <prvInsertTimerInActiveList>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d01f      	beq.n	8007500 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074c0:	2300      	movs	r3, #0
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	2300      	movs	r3, #0
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	2100      	movs	r1, #0
 80074ca:	6978      	ldr	r0, [r7, #20]
 80074cc:	f7ff ff88 	bl	80073e0 <xTimerGenericCommand>
 80074d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d113      	bne.n	8007500 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80074d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	60fb      	str	r3, [r7, #12]
}
 80074ea:	bf00      	nop
 80074ec:	e7fe      	b.n	80074ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074f4:	f023 0301 	bic.w	r3, r3, #1
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	6978      	ldr	r0, [r7, #20]
 8007506:	4798      	blx	r3
}
 8007508:	bf00      	nop
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20000df0 	.word	0x20000df0

08007514 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800751c:	f107 0308 	add.w	r3, r7, #8
 8007520:	4618      	mov	r0, r3
 8007522:	f000 f857 	bl	80075d4 <prvGetNextExpireTime>
 8007526:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	4619      	mov	r1, r3
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 f803 	bl	8007538 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007532:	f000 f8d5 	bl	80076e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007536:	e7f1      	b.n	800751c <prvTimerTask+0x8>

08007538 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007542:	f7ff f943 	bl	80067cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007546:	f107 0308 	add.w	r3, r7, #8
 800754a:	4618      	mov	r0, r3
 800754c:	f000 f866 	bl	800761c <prvSampleTimeNow>
 8007550:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d130      	bne.n	80075ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <prvProcessTimerOrBlockTask+0x3c>
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	429a      	cmp	r2, r3
 8007564:	d806      	bhi.n	8007574 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007566:	f7ff f93f 	bl	80067e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800756a:	68f9      	ldr	r1, [r7, #12]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff ff85 	bl	800747c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007572:	e024      	b.n	80075be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d008      	beq.n	800758c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800757a:	4b13      	ldr	r3, [pc, #76]	; (80075c8 <prvProcessTimerOrBlockTask+0x90>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <prvProcessTimerOrBlockTask+0x50>
 8007584:	2301      	movs	r3, #1
 8007586:	e000      	b.n	800758a <prvProcessTimerOrBlockTask+0x52>
 8007588:	2300      	movs	r3, #0
 800758a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800758c:	4b0f      	ldr	r3, [pc, #60]	; (80075cc <prvProcessTimerOrBlockTask+0x94>)
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	4619      	mov	r1, r3
 800759a:	f7fe fea7 	bl	80062ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800759e:	f7ff f923 	bl	80067e8 <xTaskResumeAll>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10a      	bne.n	80075be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80075a8:	4b09      	ldr	r3, [pc, #36]	; (80075d0 <prvProcessTimerOrBlockTask+0x98>)
 80075aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	f3bf 8f6f 	isb	sy
}
 80075b8:	e001      	b.n	80075be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80075ba:	f7ff f915 	bl	80067e8 <xTaskResumeAll>
}
 80075be:	bf00      	nop
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20000df4 	.word	0x20000df4
 80075cc:	20000df8 	.word	0x20000df8
 80075d0:	e000ed04 	.word	0xe000ed04

080075d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80075dc:	4b0e      	ldr	r3, [pc, #56]	; (8007618 <prvGetNextExpireTime+0x44>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <prvGetNextExpireTime+0x16>
 80075e6:	2201      	movs	r2, #1
 80075e8:	e000      	b.n	80075ec <prvGetNextExpireTime+0x18>
 80075ea:	2200      	movs	r2, #0
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d105      	bne.n	8007604 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075f8:	4b07      	ldr	r3, [pc, #28]	; (8007618 <prvGetNextExpireTime+0x44>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	e001      	b.n	8007608 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007608:	68fb      	ldr	r3, [r7, #12]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	20000df0 	.word	0x20000df0

0800761c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007624:	f7ff f97e 	bl	8006924 <xTaskGetTickCount>
 8007628:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800762a:	4b0b      	ldr	r3, [pc, #44]	; (8007658 <prvSampleTimeNow+0x3c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	429a      	cmp	r2, r3
 8007632:	d205      	bcs.n	8007640 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007634:	f000 f936 	bl	80078a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	e002      	b.n	8007646 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007646:	4a04      	ldr	r2, [pc, #16]	; (8007658 <prvSampleTimeNow+0x3c>)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800764c:	68fb      	ldr	r3, [r7, #12]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20000e00 	.word	0x20000e00

0800765c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
 8007668:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800766a:	2300      	movs	r3, #0
 800766c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	429a      	cmp	r2, r3
 8007680:	d812      	bhi.n	80076a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	1ad2      	subs	r2, r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	429a      	cmp	r2, r3
 800768e:	d302      	bcc.n	8007696 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007690:	2301      	movs	r3, #1
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	e01b      	b.n	80076ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007696:	4b10      	ldr	r3, [pc, #64]	; (80076d8 <prvInsertTimerInActiveList+0x7c>)
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3304      	adds	r3, #4
 800769e:	4619      	mov	r1, r3
 80076a0:	4610      	mov	r0, r2
 80076a2:	f7fe f908 	bl	80058b6 <vListInsert>
 80076a6:	e012      	b.n	80076ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d206      	bcs.n	80076be <prvInsertTimerInActiveList+0x62>
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d302      	bcc.n	80076be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80076b8:	2301      	movs	r3, #1
 80076ba:	617b      	str	r3, [r7, #20]
 80076bc:	e007      	b.n	80076ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076be:	4b07      	ldr	r3, [pc, #28]	; (80076dc <prvInsertTimerInActiveList+0x80>)
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3304      	adds	r3, #4
 80076c6:	4619      	mov	r1, r3
 80076c8:	4610      	mov	r0, r2
 80076ca:	f7fe f8f4 	bl	80058b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80076ce:	697b      	ldr	r3, [r7, #20]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3718      	adds	r7, #24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000df4 	.word	0x20000df4
 80076dc:	20000df0 	.word	0x20000df0

080076e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08e      	sub	sp, #56	; 0x38
 80076e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076e6:	e0ca      	b.n	800787e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	da18      	bge.n	8007720 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80076ee:	1d3b      	adds	r3, r7, #4
 80076f0:	3304      	adds	r3, #4
 80076f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80076f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10a      	bne.n	8007710 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	61fb      	str	r3, [r7, #28]
}
 800770c:	bf00      	nop
 800770e:	e7fe      	b.n	800770e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007716:	6850      	ldr	r0, [r2, #4]
 8007718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800771a:	6892      	ldr	r2, [r2, #8]
 800771c:	4611      	mov	r1, r2
 800771e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f2c0 80aa 	blt.w	800787c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800772c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d004      	beq.n	800773e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	3304      	adds	r3, #4
 8007738:	4618      	mov	r0, r3
 800773a:	f7fe f8f5 	bl	8005928 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800773e:	463b      	mov	r3, r7
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff ff6b 	bl	800761c <prvSampleTimeNow>
 8007746:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b09      	cmp	r3, #9
 800774c:	f200 8097 	bhi.w	800787e <prvProcessReceivedCommands+0x19e>
 8007750:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <prvProcessReceivedCommands+0x78>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	08007781 	.word	0x08007781
 800775c:	08007781 	.word	0x08007781
 8007760:	08007781 	.word	0x08007781
 8007764:	080077f5 	.word	0x080077f5
 8007768:	08007809 	.word	0x08007809
 800776c:	08007853 	.word	0x08007853
 8007770:	08007781 	.word	0x08007781
 8007774:	08007781 	.word	0x08007781
 8007778:	080077f5 	.word	0x080077f5
 800777c:	08007809 	.word	0x08007809
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007786:	f043 0301 	orr.w	r3, r3, #1
 800778a:	b2da      	uxtb	r2, r3
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	18d1      	adds	r1, r2, r3
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800779e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077a0:	f7ff ff5c 	bl	800765c <prvInsertTimerInActiveList>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d069      	beq.n	800787e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077b8:	f003 0304 	and.w	r3, r3, #4
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d05e      	beq.n	800787e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	441a      	add	r2, r3
 80077c8:	2300      	movs	r3, #0
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	2300      	movs	r3, #0
 80077ce:	2100      	movs	r1, #0
 80077d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077d2:	f7ff fe05 	bl	80073e0 <xTimerGenericCommand>
 80077d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d14f      	bne.n	800787e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	61bb      	str	r3, [r7, #24]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077fa:	f023 0301 	bic.w	r3, r3, #1
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007806:	e03a      	b.n	800787e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800780e:	f043 0301 	orr.w	r3, r3, #1
 8007812:	b2da      	uxtb	r2, r3
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10a      	bne.n	800783e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	617b      	str	r3, [r7, #20]
}
 800783a:	bf00      	nop
 800783c:	e7fe      	b.n	800783c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	18d1      	adds	r1, r2, r3
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800784a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800784c:	f7ff ff06 	bl	800765c <prvInsertTimerInActiveList>
					break;
 8007850:	e015      	b.n	800787e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d103      	bne.n	8007868 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007862:	f000 fbdd 	bl	8008020 <vPortFree>
 8007866:	e00a      	b.n	800787e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800786e:	f023 0301 	bic.w	r3, r3, #1
 8007872:	b2da      	uxtb	r2, r3
 8007874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800787a:	e000      	b.n	800787e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800787c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800787e:	4b08      	ldr	r3, [pc, #32]	; (80078a0 <prvProcessReceivedCommands+0x1c0>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	1d39      	adds	r1, r7, #4
 8007884:	2200      	movs	r2, #0
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe fb16 	bl	8005eb8 <xQueueReceive>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	f47f af2a 	bne.w	80076e8 <prvProcessReceivedCommands+0x8>
	}
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop
 8007898:	3730      	adds	r7, #48	; 0x30
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	20000df8 	.word	0x20000df8

080078a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b088      	sub	sp, #32
 80078a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078aa:	e048      	b.n	800793e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078ac:	4b2d      	ldr	r3, [pc, #180]	; (8007964 <prvSwitchTimerLists+0xc0>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078b6:	4b2b      	ldr	r3, [pc, #172]	; (8007964 <prvSwitchTimerLists+0xc0>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3304      	adds	r3, #4
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe f82f 	bl	8005928 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078d8:	f003 0304 	and.w	r3, r3, #4
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d02e      	beq.n	800793e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	4413      	add	r3, r2
 80078e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d90e      	bls.n	8007910 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078fe:	4b19      	ldr	r3, [pc, #100]	; (8007964 <prvSwitchTimerLists+0xc0>)
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3304      	adds	r3, #4
 8007906:	4619      	mov	r1, r3
 8007908:	4610      	mov	r0, r2
 800790a:	f7fd ffd4 	bl	80058b6 <vListInsert>
 800790e:	e016      	b.n	800793e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007910:	2300      	movs	r3, #0
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	2300      	movs	r3, #0
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	2100      	movs	r1, #0
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f7ff fd60 	bl	80073e0 <xTimerGenericCommand>
 8007920:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10a      	bne.n	800793e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	603b      	str	r3, [r7, #0]
}
 800793a:	bf00      	nop
 800793c:	e7fe      	b.n	800793c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800793e:	4b09      	ldr	r3, [pc, #36]	; (8007964 <prvSwitchTimerLists+0xc0>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1b1      	bne.n	80078ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007948:	4b06      	ldr	r3, [pc, #24]	; (8007964 <prvSwitchTimerLists+0xc0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800794e:	4b06      	ldr	r3, [pc, #24]	; (8007968 <prvSwitchTimerLists+0xc4>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a04      	ldr	r2, [pc, #16]	; (8007964 <prvSwitchTimerLists+0xc0>)
 8007954:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007956:	4a04      	ldr	r2, [pc, #16]	; (8007968 <prvSwitchTimerLists+0xc4>)
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	6013      	str	r3, [r2, #0]
}
 800795c:	bf00      	nop
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20000df0 	.word	0x20000df0
 8007968:	20000df4 	.word	0x20000df4

0800796c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007972:	f000 f967 	bl	8007c44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007976:	4b15      	ldr	r3, [pc, #84]	; (80079cc <prvCheckForValidListAndQueue+0x60>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d120      	bne.n	80079c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800797e:	4814      	ldr	r0, [pc, #80]	; (80079d0 <prvCheckForValidListAndQueue+0x64>)
 8007980:	f7fd ff48 	bl	8005814 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007984:	4813      	ldr	r0, [pc, #76]	; (80079d4 <prvCheckForValidListAndQueue+0x68>)
 8007986:	f7fd ff45 	bl	8005814 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800798a:	4b13      	ldr	r3, [pc, #76]	; (80079d8 <prvCheckForValidListAndQueue+0x6c>)
 800798c:	4a10      	ldr	r2, [pc, #64]	; (80079d0 <prvCheckForValidListAndQueue+0x64>)
 800798e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007990:	4b12      	ldr	r3, [pc, #72]	; (80079dc <prvCheckForValidListAndQueue+0x70>)
 8007992:	4a10      	ldr	r2, [pc, #64]	; (80079d4 <prvCheckForValidListAndQueue+0x68>)
 8007994:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007996:	2300      	movs	r3, #0
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	4b11      	ldr	r3, [pc, #68]	; (80079e0 <prvCheckForValidListAndQueue+0x74>)
 800799c:	4a11      	ldr	r2, [pc, #68]	; (80079e4 <prvCheckForValidListAndQueue+0x78>)
 800799e:	2110      	movs	r1, #16
 80079a0:	200a      	movs	r0, #10
 80079a2:	f7fe f853 	bl	8005a4c <xQueueGenericCreateStatic>
 80079a6:	4603      	mov	r3, r0
 80079a8:	4a08      	ldr	r2, [pc, #32]	; (80079cc <prvCheckForValidListAndQueue+0x60>)
 80079aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80079ac:	4b07      	ldr	r3, [pc, #28]	; (80079cc <prvCheckForValidListAndQueue+0x60>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d005      	beq.n	80079c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80079b4:	4b05      	ldr	r3, [pc, #20]	; (80079cc <prvCheckForValidListAndQueue+0x60>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	490b      	ldr	r1, [pc, #44]	; (80079e8 <prvCheckForValidListAndQueue+0x7c>)
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe fc6c 	bl	8006298 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079c0:	f000 f970 	bl	8007ca4 <vPortExitCritical>
}
 80079c4:	bf00      	nop
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20000df8 	.word	0x20000df8
 80079d0:	20000dc8 	.word	0x20000dc8
 80079d4:	20000ddc 	.word	0x20000ddc
 80079d8:	20000df0 	.word	0x20000df0
 80079dc:	20000df4 	.word	0x20000df4
 80079e0:	20000ea4 	.word	0x20000ea4
 80079e4:	20000e04 	.word	0x20000e04
 80079e8:	0800b14c 	.word	0x0800b14c

080079ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	3b04      	subs	r3, #4
 80079fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3b04      	subs	r3, #4
 8007a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f023 0201 	bic.w	r2, r3, #1
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3b04      	subs	r3, #4
 8007a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a1c:	4a0c      	ldr	r2, [pc, #48]	; (8007a50 <pxPortInitialiseStack+0x64>)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3b14      	subs	r3, #20
 8007a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3b04      	subs	r3, #4
 8007a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f06f 0202 	mvn.w	r2, #2
 8007a3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3b20      	subs	r3, #32
 8007a40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a42:	68fb      	ldr	r3, [r7, #12]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	08007a55 	.word	0x08007a55

08007a54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a5e:	4b12      	ldr	r3, [pc, #72]	; (8007aa8 <prvTaskExitError+0x54>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a66:	d00a      	beq.n	8007a7e <prvTaskExitError+0x2a>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	60fb      	str	r3, [r7, #12]
}
 8007a7a:	bf00      	nop
 8007a7c:	e7fe      	b.n	8007a7c <prvTaskExitError+0x28>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	60bb      	str	r3, [r7, #8]
}
 8007a90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a92:	bf00      	nop
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0fc      	beq.n	8007a94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a9a:	bf00      	nop
 8007a9c:	bf00      	nop
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	20000010 	.word	0x20000010
 8007aac:	00000000 	.word	0x00000000

08007ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ab0:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <pxCurrentTCBConst2>)
 8007ab2:	6819      	ldr	r1, [r3, #0]
 8007ab4:	6808      	ldr	r0, [r1, #0]
 8007ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aba:	f380 8809 	msr	PSP, r0
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f04f 0000 	mov.w	r0, #0
 8007ac6:	f380 8811 	msr	BASEPRI, r0
 8007aca:	4770      	bx	lr
 8007acc:	f3af 8000 	nop.w

08007ad0 <pxCurrentTCBConst2>:
 8007ad0:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop

08007ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ad8:	4808      	ldr	r0, [pc, #32]	; (8007afc <prvPortStartFirstTask+0x24>)
 8007ada:	6800      	ldr	r0, [r0, #0]
 8007adc:	6800      	ldr	r0, [r0, #0]
 8007ade:	f380 8808 	msr	MSP, r0
 8007ae2:	f04f 0000 	mov.w	r0, #0
 8007ae6:	f380 8814 	msr	CONTROL, r0
 8007aea:	b662      	cpsie	i
 8007aec:	b661      	cpsie	f
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	df00      	svc	0
 8007af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007afa:	bf00      	nop
 8007afc:	e000ed08 	.word	0xe000ed08

08007b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b06:	4b46      	ldr	r3, [pc, #280]	; (8007c20 <xPortStartScheduler+0x120>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a46      	ldr	r2, [pc, #280]	; (8007c24 <xPortStartScheduler+0x124>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d10a      	bne.n	8007b26 <xPortStartScheduler+0x26>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	613b      	str	r3, [r7, #16]
}
 8007b22:	bf00      	nop
 8007b24:	e7fe      	b.n	8007b24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b26:	4b3e      	ldr	r3, [pc, #248]	; (8007c20 <xPortStartScheduler+0x120>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a3f      	ldr	r2, [pc, #252]	; (8007c28 <xPortStartScheduler+0x128>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d10a      	bne.n	8007b46 <xPortStartScheduler+0x46>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	60fb      	str	r3, [r7, #12]
}
 8007b42:	bf00      	nop
 8007b44:	e7fe      	b.n	8007b44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b46:	4b39      	ldr	r3, [pc, #228]	; (8007c2c <xPortStartScheduler+0x12c>)
 8007b48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	22ff      	movs	r2, #255	; 0xff
 8007b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b60:	78fb      	ldrb	r3, [r7, #3]
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	4b31      	ldr	r3, [pc, #196]	; (8007c30 <xPortStartScheduler+0x130>)
 8007b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b6e:	4b31      	ldr	r3, [pc, #196]	; (8007c34 <xPortStartScheduler+0x134>)
 8007b70:	2207      	movs	r2, #7
 8007b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b74:	e009      	b.n	8007b8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007b76:	4b2f      	ldr	r3, [pc, #188]	; (8007c34 <xPortStartScheduler+0x134>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	4a2d      	ldr	r2, [pc, #180]	; (8007c34 <xPortStartScheduler+0x134>)
 8007b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b8a:	78fb      	ldrb	r3, [r7, #3]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b92:	2b80      	cmp	r3, #128	; 0x80
 8007b94:	d0ef      	beq.n	8007b76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b96:	4b27      	ldr	r3, [pc, #156]	; (8007c34 <xPortStartScheduler+0x134>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f1c3 0307 	rsb	r3, r3, #7
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d00a      	beq.n	8007bb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	60bb      	str	r3, [r7, #8]
}
 8007bb4:	bf00      	nop
 8007bb6:	e7fe      	b.n	8007bb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bb8:	4b1e      	ldr	r3, [pc, #120]	; (8007c34 <xPortStartScheduler+0x134>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	021b      	lsls	r3, r3, #8
 8007bbe:	4a1d      	ldr	r2, [pc, #116]	; (8007c34 <xPortStartScheduler+0x134>)
 8007bc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007bc2:	4b1c      	ldr	r3, [pc, #112]	; (8007c34 <xPortStartScheduler+0x134>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bca:	4a1a      	ldr	r2, [pc, #104]	; (8007c34 <xPortStartScheduler+0x134>)
 8007bcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bd6:	4b18      	ldr	r3, [pc, #96]	; (8007c38 <xPortStartScheduler+0x138>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a17      	ldr	r2, [pc, #92]	; (8007c38 <xPortStartScheduler+0x138>)
 8007bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007be2:	4b15      	ldr	r3, [pc, #84]	; (8007c38 <xPortStartScheduler+0x138>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a14      	ldr	r2, [pc, #80]	; (8007c38 <xPortStartScheduler+0x138>)
 8007be8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007bec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bee:	f000 f8dd 	bl	8007dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bf2:	4b12      	ldr	r3, [pc, #72]	; (8007c3c <xPortStartScheduler+0x13c>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bf8:	f000 f8fc 	bl	8007df4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bfc:	4b10      	ldr	r3, [pc, #64]	; (8007c40 <xPortStartScheduler+0x140>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a0f      	ldr	r2, [pc, #60]	; (8007c40 <xPortStartScheduler+0x140>)
 8007c02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c08:	f7ff ff66 	bl	8007ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c0c:	f7fe ff54 	bl	8006ab8 <vTaskSwitchContext>
	prvTaskExitError();
 8007c10:	f7ff ff20 	bl	8007a54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	e000ed00 	.word	0xe000ed00
 8007c24:	410fc271 	.word	0x410fc271
 8007c28:	410fc270 	.word	0x410fc270
 8007c2c:	e000e400 	.word	0xe000e400
 8007c30:	20000ef4 	.word	0x20000ef4
 8007c34:	20000ef8 	.word	0x20000ef8
 8007c38:	e000ed20 	.word	0xe000ed20
 8007c3c:	20000010 	.word	0x20000010
 8007c40:	e000ef34 	.word	0xe000ef34

08007c44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	607b      	str	r3, [r7, #4]
}
 8007c5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c5e:	4b0f      	ldr	r3, [pc, #60]	; (8007c9c <vPortEnterCritical+0x58>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3301      	adds	r3, #1
 8007c64:	4a0d      	ldr	r2, [pc, #52]	; (8007c9c <vPortEnterCritical+0x58>)
 8007c66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c68:	4b0c      	ldr	r3, [pc, #48]	; (8007c9c <vPortEnterCritical+0x58>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d10f      	bne.n	8007c90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c70:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <vPortEnterCritical+0x5c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <vPortEnterCritical+0x4c>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	603b      	str	r3, [r7, #0]
}
 8007c8c:	bf00      	nop
 8007c8e:	e7fe      	b.n	8007c8e <vPortEnterCritical+0x4a>
	}
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	20000010 	.word	0x20000010
 8007ca0:	e000ed04 	.word	0xe000ed04

08007ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007caa:	4b12      	ldr	r3, [pc, #72]	; (8007cf4 <vPortExitCritical+0x50>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10a      	bne.n	8007cc8 <vPortExitCritical+0x24>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	607b      	str	r3, [r7, #4]
}
 8007cc4:	bf00      	nop
 8007cc6:	e7fe      	b.n	8007cc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007cc8:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <vPortExitCritical+0x50>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	4a09      	ldr	r2, [pc, #36]	; (8007cf4 <vPortExitCritical+0x50>)
 8007cd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cd2:	4b08      	ldr	r3, [pc, #32]	; (8007cf4 <vPortExitCritical+0x50>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d105      	bne.n	8007ce6 <vPortExitCritical+0x42>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	f383 8811 	msr	BASEPRI, r3
}
 8007ce4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ce6:	bf00      	nop
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	20000010 	.word	0x20000010
	...

08007d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d00:	f3ef 8009 	mrs	r0, PSP
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	4b15      	ldr	r3, [pc, #84]	; (8007d60 <pxCurrentTCBConst>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	f01e 0f10 	tst.w	lr, #16
 8007d10:	bf08      	it	eq
 8007d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1a:	6010      	str	r0, [r2, #0]
 8007d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d24:	f380 8811 	msr	BASEPRI, r0
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f7fe fec2 	bl	8006ab8 <vTaskSwitchContext>
 8007d34:	f04f 0000 	mov.w	r0, #0
 8007d38:	f380 8811 	msr	BASEPRI, r0
 8007d3c:	bc09      	pop	{r0, r3}
 8007d3e:	6819      	ldr	r1, [r3, #0]
 8007d40:	6808      	ldr	r0, [r1, #0]
 8007d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d46:	f01e 0f10 	tst.w	lr, #16
 8007d4a:	bf08      	it	eq
 8007d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d50:	f380 8809 	msr	PSP, r0
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	f3af 8000 	nop.w

08007d60 <pxCurrentTCBConst>:
 8007d60:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop

08007d68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	607b      	str	r3, [r7, #4]
}
 8007d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d82:	f7fe fddf 	bl	8006944 <xTaskIncrementTick>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d8c:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <xPortSysTickHandler+0x40>)
 8007d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	2300      	movs	r3, #0
 8007d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	f383 8811 	msr	BASEPRI, r3
}
 8007d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	e000ed04 	.word	0xe000ed04

08007dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007db0:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <vPortSetupTimerInterrupt+0x34>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007db6:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <vPortSetupTimerInterrupt+0x38>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007dbc:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <vPortSetupTimerInterrupt+0x3c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a0a      	ldr	r2, [pc, #40]	; (8007dec <vPortSetupTimerInterrupt+0x40>)
 8007dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc6:	099b      	lsrs	r3, r3, #6
 8007dc8:	4a09      	ldr	r2, [pc, #36]	; (8007df0 <vPortSetupTimerInterrupt+0x44>)
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dce:	4b04      	ldr	r3, [pc, #16]	; (8007de0 <vPortSetupTimerInterrupt+0x34>)
 8007dd0:	2207      	movs	r2, #7
 8007dd2:	601a      	str	r2, [r3, #0]
}
 8007dd4:	bf00      	nop
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	e000e010 	.word	0xe000e010
 8007de4:	e000e018 	.word	0xe000e018
 8007de8:	20000004 	.word	0x20000004
 8007dec:	10624dd3 	.word	0x10624dd3
 8007df0:	e000e014 	.word	0xe000e014

08007df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007df4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e04 <vPortEnableVFP+0x10>
 8007df8:	6801      	ldr	r1, [r0, #0]
 8007dfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007dfe:	6001      	str	r1, [r0, #0]
 8007e00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e02:	bf00      	nop
 8007e04:	e000ed88 	.word	0xe000ed88

08007e08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e0e:	f3ef 8305 	mrs	r3, IPSR
 8007e12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2b0f      	cmp	r3, #15
 8007e18:	d914      	bls.n	8007e44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e1a:	4a17      	ldr	r2, [pc, #92]	; (8007e78 <vPortValidateInterruptPriority+0x70>)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4413      	add	r3, r2
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e24:	4b15      	ldr	r3, [pc, #84]	; (8007e7c <vPortValidateInterruptPriority+0x74>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	7afa      	ldrb	r2, [r7, #11]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d20a      	bcs.n	8007e44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	607b      	str	r3, [r7, #4]
}
 8007e40:	bf00      	nop
 8007e42:	e7fe      	b.n	8007e42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e44:	4b0e      	ldr	r3, [pc, #56]	; (8007e80 <vPortValidateInterruptPriority+0x78>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e4c:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <vPortValidateInterruptPriority+0x7c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d90a      	bls.n	8007e6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	603b      	str	r3, [r7, #0]
}
 8007e66:	bf00      	nop
 8007e68:	e7fe      	b.n	8007e68 <vPortValidateInterruptPriority+0x60>
	}
 8007e6a:	bf00      	nop
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	e000e3f0 	.word	0xe000e3f0
 8007e7c:	20000ef4 	.word	0x20000ef4
 8007e80:	e000ed0c 	.word	0xe000ed0c
 8007e84:	20000ef8 	.word	0x20000ef8

08007e88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08a      	sub	sp, #40	; 0x28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e90:	2300      	movs	r3, #0
 8007e92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e94:	f7fe fc9a 	bl	80067cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e98:	4b5b      	ldr	r3, [pc, #364]	; (8008008 <pvPortMalloc+0x180>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ea0:	f000 f920 	bl	80080e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ea4:	4b59      	ldr	r3, [pc, #356]	; (800800c <pvPortMalloc+0x184>)
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f040 8093 	bne.w	8007fd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d01d      	beq.n	8007ef4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007eb8:	2208      	movs	r2, #8
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d014      	beq.n	8007ef4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f023 0307 	bic.w	r3, r3, #7
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f003 0307 	and.w	r3, r3, #7
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <pvPortMalloc+0x6c>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	617b      	str	r3, [r7, #20]
}
 8007ef0:	bf00      	nop
 8007ef2:	e7fe      	b.n	8007ef2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d06e      	beq.n	8007fd8 <pvPortMalloc+0x150>
 8007efa:	4b45      	ldr	r3, [pc, #276]	; (8008010 <pvPortMalloc+0x188>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d869      	bhi.n	8007fd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f04:	4b43      	ldr	r3, [pc, #268]	; (8008014 <pvPortMalloc+0x18c>)
 8007f06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f08:	4b42      	ldr	r3, [pc, #264]	; (8008014 <pvPortMalloc+0x18c>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f0e:	e004      	b.n	8007f1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d903      	bls.n	8007f2c <pvPortMalloc+0xa4>
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1f1      	bne.n	8007f10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f2c:	4b36      	ldr	r3, [pc, #216]	; (8008008 <pvPortMalloc+0x180>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d050      	beq.n	8007fd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2208      	movs	r2, #8
 8007f3c:	4413      	add	r3, r2
 8007f3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	1ad2      	subs	r2, r2, r3
 8007f50:	2308      	movs	r3, #8
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d91f      	bls.n	8007f98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	f003 0307 	and.w	r3, r3, #7
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00a      	beq.n	8007f80 <pvPortMalloc+0xf8>
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	613b      	str	r3, [r7, #16]
}
 8007f7c:	bf00      	nop
 8007f7e:	e7fe      	b.n	8007f7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	1ad2      	subs	r2, r2, r3
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f92:	69b8      	ldr	r0, [r7, #24]
 8007f94:	f000 f908 	bl	80081a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f98:	4b1d      	ldr	r3, [pc, #116]	; (8008010 <pvPortMalloc+0x188>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	4a1b      	ldr	r2, [pc, #108]	; (8008010 <pvPortMalloc+0x188>)
 8007fa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007fa6:	4b1a      	ldr	r3, [pc, #104]	; (8008010 <pvPortMalloc+0x188>)
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	4b1b      	ldr	r3, [pc, #108]	; (8008018 <pvPortMalloc+0x190>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d203      	bcs.n	8007fba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007fb2:	4b17      	ldr	r3, [pc, #92]	; (8008010 <pvPortMalloc+0x188>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a18      	ldr	r2, [pc, #96]	; (8008018 <pvPortMalloc+0x190>)
 8007fb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	4b13      	ldr	r3, [pc, #76]	; (800800c <pvPortMalloc+0x184>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007fce:	4b13      	ldr	r3, [pc, #76]	; (800801c <pvPortMalloc+0x194>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	4a11      	ldr	r2, [pc, #68]	; (800801c <pvPortMalloc+0x194>)
 8007fd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fd8:	f7fe fc06 	bl	80067e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	f003 0307 	and.w	r3, r3, #7
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00a      	beq.n	8007ffc <pvPortMalloc+0x174>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	60fb      	str	r3, [r7, #12]
}
 8007ff8:	bf00      	nop
 8007ffa:	e7fe      	b.n	8007ffa <pvPortMalloc+0x172>
	return pvReturn;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3728      	adds	r7, #40	; 0x28
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20004b04 	.word	0x20004b04
 800800c:	20004b18 	.word	0x20004b18
 8008010:	20004b08 	.word	0x20004b08
 8008014:	20004afc 	.word	0x20004afc
 8008018:	20004b0c 	.word	0x20004b0c
 800801c:	20004b10 	.word	0x20004b10

08008020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d04d      	beq.n	80080ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008032:	2308      	movs	r3, #8
 8008034:	425b      	negs	r3, r3
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	4413      	add	r3, r2
 800803a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	4b24      	ldr	r3, [pc, #144]	; (80080d8 <vPortFree+0xb8>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4013      	ands	r3, r2
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10a      	bne.n	8008064 <vPortFree+0x44>
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	60fb      	str	r3, [r7, #12]
}
 8008060:	bf00      	nop
 8008062:	e7fe      	b.n	8008062 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00a      	beq.n	8008082 <vPortFree+0x62>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	60bb      	str	r3, [r7, #8]
}
 800807e:	bf00      	nop
 8008080:	e7fe      	b.n	8008080 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <vPortFree+0xb8>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4013      	ands	r3, r2
 800808c:	2b00      	cmp	r3, #0
 800808e:	d01e      	beq.n	80080ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d11a      	bne.n	80080ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	4b0e      	ldr	r3, [pc, #56]	; (80080d8 <vPortFree+0xb8>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	43db      	mvns	r3, r3
 80080a2:	401a      	ands	r2, r3
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80080a8:	f7fe fb90 	bl	80067cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	4b0a      	ldr	r3, [pc, #40]	; (80080dc <vPortFree+0xbc>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4413      	add	r3, r2
 80080b6:	4a09      	ldr	r2, [pc, #36]	; (80080dc <vPortFree+0xbc>)
 80080b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080ba:	6938      	ldr	r0, [r7, #16]
 80080bc:	f000 f874 	bl	80081a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80080c0:	4b07      	ldr	r3, [pc, #28]	; (80080e0 <vPortFree+0xc0>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3301      	adds	r3, #1
 80080c6:	4a06      	ldr	r2, [pc, #24]	; (80080e0 <vPortFree+0xc0>)
 80080c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80080ca:	f7fe fb8d 	bl	80067e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080ce:	bf00      	nop
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	20004b18 	.word	0x20004b18
 80080dc:	20004b08 	.word	0x20004b08
 80080e0:	20004b14 	.word	0x20004b14

080080e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80080ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080f0:	4b27      	ldr	r3, [pc, #156]	; (8008190 <prvHeapInit+0xac>)
 80080f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00c      	beq.n	8008118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3307      	adds	r3, #7
 8008102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f023 0307 	bic.w	r3, r3, #7
 800810a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	4a1f      	ldr	r2, [pc, #124]	; (8008190 <prvHeapInit+0xac>)
 8008114:	4413      	add	r3, r2
 8008116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800811c:	4a1d      	ldr	r2, [pc, #116]	; (8008194 <prvHeapInit+0xb0>)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008122:	4b1c      	ldr	r3, [pc, #112]	; (8008194 <prvHeapInit+0xb0>)
 8008124:	2200      	movs	r2, #0
 8008126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	4413      	add	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008130:	2208      	movs	r2, #8
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	1a9b      	subs	r3, r3, r2
 8008136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f023 0307 	bic.w	r3, r3, #7
 800813e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4a15      	ldr	r2, [pc, #84]	; (8008198 <prvHeapInit+0xb4>)
 8008144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008146:	4b14      	ldr	r3, [pc, #80]	; (8008198 <prvHeapInit+0xb4>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2200      	movs	r2, #0
 800814c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800814e:	4b12      	ldr	r3, [pc, #72]	; (8008198 <prvHeapInit+0xb4>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2200      	movs	r2, #0
 8008154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	1ad2      	subs	r2, r2, r3
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008164:	4b0c      	ldr	r3, [pc, #48]	; (8008198 <prvHeapInit+0xb4>)
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	4a0a      	ldr	r2, [pc, #40]	; (800819c <prvHeapInit+0xb8>)
 8008172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	4a09      	ldr	r2, [pc, #36]	; (80081a0 <prvHeapInit+0xbc>)
 800817a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800817c:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <prvHeapInit+0xc0>)
 800817e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008182:	601a      	str	r2, [r3, #0]
}
 8008184:	bf00      	nop
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	20000efc 	.word	0x20000efc
 8008194:	20004afc 	.word	0x20004afc
 8008198:	20004b04 	.word	0x20004b04
 800819c:	20004b0c 	.word	0x20004b0c
 80081a0:	20004b08 	.word	0x20004b08
 80081a4:	20004b18 	.word	0x20004b18

080081a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80081b0:	4b28      	ldr	r3, [pc, #160]	; (8008254 <prvInsertBlockIntoFreeList+0xac>)
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	e002      	b.n	80081bc <prvInsertBlockIntoFreeList+0x14>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d8f7      	bhi.n	80081b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	4413      	add	r3, r2
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d108      	bne.n	80081ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	441a      	add	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	441a      	add	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d118      	bne.n	8008230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	4b15      	ldr	r3, [pc, #84]	; (8008258 <prvInsertBlockIntoFreeList+0xb0>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	429a      	cmp	r2, r3
 8008208:	d00d      	beq.n	8008226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	441a      	add	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	e008      	b.n	8008238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008226:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <prvInsertBlockIntoFreeList+0xb0>)
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	e003      	b.n	8008238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	429a      	cmp	r2, r3
 800823e:	d002      	beq.n	8008246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008246:	bf00      	nop
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	20004afc 	.word	0x20004afc
 8008258:	20004b04 	.word	0x20004b04

0800825c <__errno>:
 800825c:	4b01      	ldr	r3, [pc, #4]	; (8008264 <__errno+0x8>)
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	20000014 	.word	0x20000014

08008268 <__libc_init_array>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	4d0d      	ldr	r5, [pc, #52]	; (80082a0 <__libc_init_array+0x38>)
 800826c:	4c0d      	ldr	r4, [pc, #52]	; (80082a4 <__libc_init_array+0x3c>)
 800826e:	1b64      	subs	r4, r4, r5
 8008270:	10a4      	asrs	r4, r4, #2
 8008272:	2600      	movs	r6, #0
 8008274:	42a6      	cmp	r6, r4
 8008276:	d109      	bne.n	800828c <__libc_init_array+0x24>
 8008278:	4d0b      	ldr	r5, [pc, #44]	; (80082a8 <__libc_init_array+0x40>)
 800827a:	4c0c      	ldr	r4, [pc, #48]	; (80082ac <__libc_init_array+0x44>)
 800827c:	f002 feb4 	bl	800afe8 <_init>
 8008280:	1b64      	subs	r4, r4, r5
 8008282:	10a4      	asrs	r4, r4, #2
 8008284:	2600      	movs	r6, #0
 8008286:	42a6      	cmp	r6, r4
 8008288:	d105      	bne.n	8008296 <__libc_init_array+0x2e>
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008290:	4798      	blx	r3
 8008292:	3601      	adds	r6, #1
 8008294:	e7ee      	b.n	8008274 <__libc_init_array+0xc>
 8008296:	f855 3b04 	ldr.w	r3, [r5], #4
 800829a:	4798      	blx	r3
 800829c:	3601      	adds	r6, #1
 800829e:	e7f2      	b.n	8008286 <__libc_init_array+0x1e>
 80082a0:	0800b5c4 	.word	0x0800b5c4
 80082a4:	0800b5c4 	.word	0x0800b5c4
 80082a8:	0800b5c4 	.word	0x0800b5c4
 80082ac:	0800b5c8 	.word	0x0800b5c8

080082b0 <memcpy>:
 80082b0:	440a      	add	r2, r1
 80082b2:	4291      	cmp	r1, r2
 80082b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80082b8:	d100      	bne.n	80082bc <memcpy+0xc>
 80082ba:	4770      	bx	lr
 80082bc:	b510      	push	{r4, lr}
 80082be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082c6:	4291      	cmp	r1, r2
 80082c8:	d1f9      	bne.n	80082be <memcpy+0xe>
 80082ca:	bd10      	pop	{r4, pc}

080082cc <memset>:
 80082cc:	4402      	add	r2, r0
 80082ce:	4603      	mov	r3, r0
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d100      	bne.n	80082d6 <memset+0xa>
 80082d4:	4770      	bx	lr
 80082d6:	f803 1b01 	strb.w	r1, [r3], #1
 80082da:	e7f9      	b.n	80082d0 <memset+0x4>

080082dc <__cvt>:
 80082dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082e0:	ec55 4b10 	vmov	r4, r5, d0
 80082e4:	2d00      	cmp	r5, #0
 80082e6:	460e      	mov	r6, r1
 80082e8:	4619      	mov	r1, r3
 80082ea:	462b      	mov	r3, r5
 80082ec:	bfbb      	ittet	lt
 80082ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80082f2:	461d      	movlt	r5, r3
 80082f4:	2300      	movge	r3, #0
 80082f6:	232d      	movlt	r3, #45	; 0x2d
 80082f8:	700b      	strb	r3, [r1, #0]
 80082fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008300:	4691      	mov	r9, r2
 8008302:	f023 0820 	bic.w	r8, r3, #32
 8008306:	bfbc      	itt	lt
 8008308:	4622      	movlt	r2, r4
 800830a:	4614      	movlt	r4, r2
 800830c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008310:	d005      	beq.n	800831e <__cvt+0x42>
 8008312:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008316:	d100      	bne.n	800831a <__cvt+0x3e>
 8008318:	3601      	adds	r6, #1
 800831a:	2102      	movs	r1, #2
 800831c:	e000      	b.n	8008320 <__cvt+0x44>
 800831e:	2103      	movs	r1, #3
 8008320:	ab03      	add	r3, sp, #12
 8008322:	9301      	str	r3, [sp, #4]
 8008324:	ab02      	add	r3, sp, #8
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	ec45 4b10 	vmov	d0, r4, r5
 800832c:	4653      	mov	r3, sl
 800832e:	4632      	mov	r2, r6
 8008330:	f000 fcea 	bl	8008d08 <_dtoa_r>
 8008334:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008338:	4607      	mov	r7, r0
 800833a:	d102      	bne.n	8008342 <__cvt+0x66>
 800833c:	f019 0f01 	tst.w	r9, #1
 8008340:	d022      	beq.n	8008388 <__cvt+0xac>
 8008342:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008346:	eb07 0906 	add.w	r9, r7, r6
 800834a:	d110      	bne.n	800836e <__cvt+0x92>
 800834c:	783b      	ldrb	r3, [r7, #0]
 800834e:	2b30      	cmp	r3, #48	; 0x30
 8008350:	d10a      	bne.n	8008368 <__cvt+0x8c>
 8008352:	2200      	movs	r2, #0
 8008354:	2300      	movs	r3, #0
 8008356:	4620      	mov	r0, r4
 8008358:	4629      	mov	r1, r5
 800835a:	f7f8 fbbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800835e:	b918      	cbnz	r0, 8008368 <__cvt+0x8c>
 8008360:	f1c6 0601 	rsb	r6, r6, #1
 8008364:	f8ca 6000 	str.w	r6, [sl]
 8008368:	f8da 3000 	ldr.w	r3, [sl]
 800836c:	4499      	add	r9, r3
 800836e:	2200      	movs	r2, #0
 8008370:	2300      	movs	r3, #0
 8008372:	4620      	mov	r0, r4
 8008374:	4629      	mov	r1, r5
 8008376:	f7f8 fbaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800837a:	b108      	cbz	r0, 8008380 <__cvt+0xa4>
 800837c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008380:	2230      	movs	r2, #48	; 0x30
 8008382:	9b03      	ldr	r3, [sp, #12]
 8008384:	454b      	cmp	r3, r9
 8008386:	d307      	bcc.n	8008398 <__cvt+0xbc>
 8008388:	9b03      	ldr	r3, [sp, #12]
 800838a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800838c:	1bdb      	subs	r3, r3, r7
 800838e:	4638      	mov	r0, r7
 8008390:	6013      	str	r3, [r2, #0]
 8008392:	b004      	add	sp, #16
 8008394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008398:	1c59      	adds	r1, r3, #1
 800839a:	9103      	str	r1, [sp, #12]
 800839c:	701a      	strb	r2, [r3, #0]
 800839e:	e7f0      	b.n	8008382 <__cvt+0xa6>

080083a0 <__exponent>:
 80083a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083a2:	4603      	mov	r3, r0
 80083a4:	2900      	cmp	r1, #0
 80083a6:	bfb8      	it	lt
 80083a8:	4249      	neglt	r1, r1
 80083aa:	f803 2b02 	strb.w	r2, [r3], #2
 80083ae:	bfb4      	ite	lt
 80083b0:	222d      	movlt	r2, #45	; 0x2d
 80083b2:	222b      	movge	r2, #43	; 0x2b
 80083b4:	2909      	cmp	r1, #9
 80083b6:	7042      	strb	r2, [r0, #1]
 80083b8:	dd2a      	ble.n	8008410 <__exponent+0x70>
 80083ba:	f10d 0407 	add.w	r4, sp, #7
 80083be:	46a4      	mov	ip, r4
 80083c0:	270a      	movs	r7, #10
 80083c2:	46a6      	mov	lr, r4
 80083c4:	460a      	mov	r2, r1
 80083c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80083ca:	fb07 1516 	mls	r5, r7, r6, r1
 80083ce:	3530      	adds	r5, #48	; 0x30
 80083d0:	2a63      	cmp	r2, #99	; 0x63
 80083d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80083d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80083da:	4631      	mov	r1, r6
 80083dc:	dcf1      	bgt.n	80083c2 <__exponent+0x22>
 80083de:	3130      	adds	r1, #48	; 0x30
 80083e0:	f1ae 0502 	sub.w	r5, lr, #2
 80083e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80083e8:	1c44      	adds	r4, r0, #1
 80083ea:	4629      	mov	r1, r5
 80083ec:	4561      	cmp	r1, ip
 80083ee:	d30a      	bcc.n	8008406 <__exponent+0x66>
 80083f0:	f10d 0209 	add.w	r2, sp, #9
 80083f4:	eba2 020e 	sub.w	r2, r2, lr
 80083f8:	4565      	cmp	r5, ip
 80083fa:	bf88      	it	hi
 80083fc:	2200      	movhi	r2, #0
 80083fe:	4413      	add	r3, r2
 8008400:	1a18      	subs	r0, r3, r0
 8008402:	b003      	add	sp, #12
 8008404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800840a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800840e:	e7ed      	b.n	80083ec <__exponent+0x4c>
 8008410:	2330      	movs	r3, #48	; 0x30
 8008412:	3130      	adds	r1, #48	; 0x30
 8008414:	7083      	strb	r3, [r0, #2]
 8008416:	70c1      	strb	r1, [r0, #3]
 8008418:	1d03      	adds	r3, r0, #4
 800841a:	e7f1      	b.n	8008400 <__exponent+0x60>

0800841c <_printf_float>:
 800841c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008420:	ed2d 8b02 	vpush	{d8}
 8008424:	b08d      	sub	sp, #52	; 0x34
 8008426:	460c      	mov	r4, r1
 8008428:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800842c:	4616      	mov	r6, r2
 800842e:	461f      	mov	r7, r3
 8008430:	4605      	mov	r5, r0
 8008432:	f001 fa55 	bl	80098e0 <_localeconv_r>
 8008436:	f8d0 a000 	ldr.w	sl, [r0]
 800843a:	4650      	mov	r0, sl
 800843c:	f7f7 fed0 	bl	80001e0 <strlen>
 8008440:	2300      	movs	r3, #0
 8008442:	930a      	str	r3, [sp, #40]	; 0x28
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	9305      	str	r3, [sp, #20]
 8008448:	f8d8 3000 	ldr.w	r3, [r8]
 800844c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008450:	3307      	adds	r3, #7
 8008452:	f023 0307 	bic.w	r3, r3, #7
 8008456:	f103 0208 	add.w	r2, r3, #8
 800845a:	f8c8 2000 	str.w	r2, [r8]
 800845e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008462:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008466:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800846a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800846e:	9307      	str	r3, [sp, #28]
 8008470:	f8cd 8018 	str.w	r8, [sp, #24]
 8008474:	ee08 0a10 	vmov	s16, r0
 8008478:	4b9f      	ldr	r3, [pc, #636]	; (80086f8 <_printf_float+0x2dc>)
 800847a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800847e:	f04f 32ff 	mov.w	r2, #4294967295
 8008482:	f7f8 fb5b 	bl	8000b3c <__aeabi_dcmpun>
 8008486:	bb88      	cbnz	r0, 80084ec <_printf_float+0xd0>
 8008488:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800848c:	4b9a      	ldr	r3, [pc, #616]	; (80086f8 <_printf_float+0x2dc>)
 800848e:	f04f 32ff 	mov.w	r2, #4294967295
 8008492:	f7f8 fb35 	bl	8000b00 <__aeabi_dcmple>
 8008496:	bb48      	cbnz	r0, 80084ec <_printf_float+0xd0>
 8008498:	2200      	movs	r2, #0
 800849a:	2300      	movs	r3, #0
 800849c:	4640      	mov	r0, r8
 800849e:	4649      	mov	r1, r9
 80084a0:	f7f8 fb24 	bl	8000aec <__aeabi_dcmplt>
 80084a4:	b110      	cbz	r0, 80084ac <_printf_float+0x90>
 80084a6:	232d      	movs	r3, #45	; 0x2d
 80084a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084ac:	4b93      	ldr	r3, [pc, #588]	; (80086fc <_printf_float+0x2e0>)
 80084ae:	4894      	ldr	r0, [pc, #592]	; (8008700 <_printf_float+0x2e4>)
 80084b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80084b4:	bf94      	ite	ls
 80084b6:	4698      	movls	r8, r3
 80084b8:	4680      	movhi	r8, r0
 80084ba:	2303      	movs	r3, #3
 80084bc:	6123      	str	r3, [r4, #16]
 80084be:	9b05      	ldr	r3, [sp, #20]
 80084c0:	f023 0204 	bic.w	r2, r3, #4
 80084c4:	6022      	str	r2, [r4, #0]
 80084c6:	f04f 0900 	mov.w	r9, #0
 80084ca:	9700      	str	r7, [sp, #0]
 80084cc:	4633      	mov	r3, r6
 80084ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80084d0:	4621      	mov	r1, r4
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 f9d8 	bl	8008888 <_printf_common>
 80084d8:	3001      	adds	r0, #1
 80084da:	f040 8090 	bne.w	80085fe <_printf_float+0x1e2>
 80084de:	f04f 30ff 	mov.w	r0, #4294967295
 80084e2:	b00d      	add	sp, #52	; 0x34
 80084e4:	ecbd 8b02 	vpop	{d8}
 80084e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ec:	4642      	mov	r2, r8
 80084ee:	464b      	mov	r3, r9
 80084f0:	4640      	mov	r0, r8
 80084f2:	4649      	mov	r1, r9
 80084f4:	f7f8 fb22 	bl	8000b3c <__aeabi_dcmpun>
 80084f8:	b140      	cbz	r0, 800850c <_printf_float+0xf0>
 80084fa:	464b      	mov	r3, r9
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	bfbc      	itt	lt
 8008500:	232d      	movlt	r3, #45	; 0x2d
 8008502:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008506:	487f      	ldr	r0, [pc, #508]	; (8008704 <_printf_float+0x2e8>)
 8008508:	4b7f      	ldr	r3, [pc, #508]	; (8008708 <_printf_float+0x2ec>)
 800850a:	e7d1      	b.n	80084b0 <_printf_float+0x94>
 800850c:	6863      	ldr	r3, [r4, #4]
 800850e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008512:	9206      	str	r2, [sp, #24]
 8008514:	1c5a      	adds	r2, r3, #1
 8008516:	d13f      	bne.n	8008598 <_printf_float+0x17c>
 8008518:	2306      	movs	r3, #6
 800851a:	6063      	str	r3, [r4, #4]
 800851c:	9b05      	ldr	r3, [sp, #20]
 800851e:	6861      	ldr	r1, [r4, #4]
 8008520:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008524:	2300      	movs	r3, #0
 8008526:	9303      	str	r3, [sp, #12]
 8008528:	ab0a      	add	r3, sp, #40	; 0x28
 800852a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800852e:	ab09      	add	r3, sp, #36	; 0x24
 8008530:	ec49 8b10 	vmov	d0, r8, r9
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	6022      	str	r2, [r4, #0]
 8008538:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800853c:	4628      	mov	r0, r5
 800853e:	f7ff fecd 	bl	80082dc <__cvt>
 8008542:	9b06      	ldr	r3, [sp, #24]
 8008544:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008546:	2b47      	cmp	r3, #71	; 0x47
 8008548:	4680      	mov	r8, r0
 800854a:	d108      	bne.n	800855e <_printf_float+0x142>
 800854c:	1cc8      	adds	r0, r1, #3
 800854e:	db02      	blt.n	8008556 <_printf_float+0x13a>
 8008550:	6863      	ldr	r3, [r4, #4]
 8008552:	4299      	cmp	r1, r3
 8008554:	dd41      	ble.n	80085da <_printf_float+0x1be>
 8008556:	f1ab 0b02 	sub.w	fp, fp, #2
 800855a:	fa5f fb8b 	uxtb.w	fp, fp
 800855e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008562:	d820      	bhi.n	80085a6 <_printf_float+0x18a>
 8008564:	3901      	subs	r1, #1
 8008566:	465a      	mov	r2, fp
 8008568:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800856c:	9109      	str	r1, [sp, #36]	; 0x24
 800856e:	f7ff ff17 	bl	80083a0 <__exponent>
 8008572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008574:	1813      	adds	r3, r2, r0
 8008576:	2a01      	cmp	r2, #1
 8008578:	4681      	mov	r9, r0
 800857a:	6123      	str	r3, [r4, #16]
 800857c:	dc02      	bgt.n	8008584 <_printf_float+0x168>
 800857e:	6822      	ldr	r2, [r4, #0]
 8008580:	07d2      	lsls	r2, r2, #31
 8008582:	d501      	bpl.n	8008588 <_printf_float+0x16c>
 8008584:	3301      	adds	r3, #1
 8008586:	6123      	str	r3, [r4, #16]
 8008588:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800858c:	2b00      	cmp	r3, #0
 800858e:	d09c      	beq.n	80084ca <_printf_float+0xae>
 8008590:	232d      	movs	r3, #45	; 0x2d
 8008592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008596:	e798      	b.n	80084ca <_printf_float+0xae>
 8008598:	9a06      	ldr	r2, [sp, #24]
 800859a:	2a47      	cmp	r2, #71	; 0x47
 800859c:	d1be      	bne.n	800851c <_printf_float+0x100>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1bc      	bne.n	800851c <_printf_float+0x100>
 80085a2:	2301      	movs	r3, #1
 80085a4:	e7b9      	b.n	800851a <_printf_float+0xfe>
 80085a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80085aa:	d118      	bne.n	80085de <_printf_float+0x1c2>
 80085ac:	2900      	cmp	r1, #0
 80085ae:	6863      	ldr	r3, [r4, #4]
 80085b0:	dd0b      	ble.n	80085ca <_printf_float+0x1ae>
 80085b2:	6121      	str	r1, [r4, #16]
 80085b4:	b913      	cbnz	r3, 80085bc <_printf_float+0x1a0>
 80085b6:	6822      	ldr	r2, [r4, #0]
 80085b8:	07d0      	lsls	r0, r2, #31
 80085ba:	d502      	bpl.n	80085c2 <_printf_float+0x1a6>
 80085bc:	3301      	adds	r3, #1
 80085be:	440b      	add	r3, r1
 80085c0:	6123      	str	r3, [r4, #16]
 80085c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80085c4:	f04f 0900 	mov.w	r9, #0
 80085c8:	e7de      	b.n	8008588 <_printf_float+0x16c>
 80085ca:	b913      	cbnz	r3, 80085d2 <_printf_float+0x1b6>
 80085cc:	6822      	ldr	r2, [r4, #0]
 80085ce:	07d2      	lsls	r2, r2, #31
 80085d0:	d501      	bpl.n	80085d6 <_printf_float+0x1ba>
 80085d2:	3302      	adds	r3, #2
 80085d4:	e7f4      	b.n	80085c0 <_printf_float+0x1a4>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e7f2      	b.n	80085c0 <_printf_float+0x1a4>
 80085da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80085de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e0:	4299      	cmp	r1, r3
 80085e2:	db05      	blt.n	80085f0 <_printf_float+0x1d4>
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	6121      	str	r1, [r4, #16]
 80085e8:	07d8      	lsls	r0, r3, #31
 80085ea:	d5ea      	bpl.n	80085c2 <_printf_float+0x1a6>
 80085ec:	1c4b      	adds	r3, r1, #1
 80085ee:	e7e7      	b.n	80085c0 <_printf_float+0x1a4>
 80085f0:	2900      	cmp	r1, #0
 80085f2:	bfd4      	ite	le
 80085f4:	f1c1 0202 	rsble	r2, r1, #2
 80085f8:	2201      	movgt	r2, #1
 80085fa:	4413      	add	r3, r2
 80085fc:	e7e0      	b.n	80085c0 <_printf_float+0x1a4>
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	055a      	lsls	r2, r3, #21
 8008602:	d407      	bmi.n	8008614 <_printf_float+0x1f8>
 8008604:	6923      	ldr	r3, [r4, #16]
 8008606:	4642      	mov	r2, r8
 8008608:	4631      	mov	r1, r6
 800860a:	4628      	mov	r0, r5
 800860c:	47b8      	blx	r7
 800860e:	3001      	adds	r0, #1
 8008610:	d12c      	bne.n	800866c <_printf_float+0x250>
 8008612:	e764      	b.n	80084de <_printf_float+0xc2>
 8008614:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008618:	f240 80e0 	bls.w	80087dc <_printf_float+0x3c0>
 800861c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008620:	2200      	movs	r2, #0
 8008622:	2300      	movs	r3, #0
 8008624:	f7f8 fa58 	bl	8000ad8 <__aeabi_dcmpeq>
 8008628:	2800      	cmp	r0, #0
 800862a:	d034      	beq.n	8008696 <_printf_float+0x27a>
 800862c:	4a37      	ldr	r2, [pc, #220]	; (800870c <_printf_float+0x2f0>)
 800862e:	2301      	movs	r3, #1
 8008630:	4631      	mov	r1, r6
 8008632:	4628      	mov	r0, r5
 8008634:	47b8      	blx	r7
 8008636:	3001      	adds	r0, #1
 8008638:	f43f af51 	beq.w	80084de <_printf_float+0xc2>
 800863c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008640:	429a      	cmp	r2, r3
 8008642:	db02      	blt.n	800864a <_printf_float+0x22e>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	07d8      	lsls	r0, r3, #31
 8008648:	d510      	bpl.n	800866c <_printf_float+0x250>
 800864a:	ee18 3a10 	vmov	r3, s16
 800864e:	4652      	mov	r2, sl
 8008650:	4631      	mov	r1, r6
 8008652:	4628      	mov	r0, r5
 8008654:	47b8      	blx	r7
 8008656:	3001      	adds	r0, #1
 8008658:	f43f af41 	beq.w	80084de <_printf_float+0xc2>
 800865c:	f04f 0800 	mov.w	r8, #0
 8008660:	f104 091a 	add.w	r9, r4, #26
 8008664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008666:	3b01      	subs	r3, #1
 8008668:	4543      	cmp	r3, r8
 800866a:	dc09      	bgt.n	8008680 <_printf_float+0x264>
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	079b      	lsls	r3, r3, #30
 8008670:	f100 8105 	bmi.w	800887e <_printf_float+0x462>
 8008674:	68e0      	ldr	r0, [r4, #12]
 8008676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008678:	4298      	cmp	r0, r3
 800867a:	bfb8      	it	lt
 800867c:	4618      	movlt	r0, r3
 800867e:	e730      	b.n	80084e2 <_printf_float+0xc6>
 8008680:	2301      	movs	r3, #1
 8008682:	464a      	mov	r2, r9
 8008684:	4631      	mov	r1, r6
 8008686:	4628      	mov	r0, r5
 8008688:	47b8      	blx	r7
 800868a:	3001      	adds	r0, #1
 800868c:	f43f af27 	beq.w	80084de <_printf_float+0xc2>
 8008690:	f108 0801 	add.w	r8, r8, #1
 8008694:	e7e6      	b.n	8008664 <_printf_float+0x248>
 8008696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008698:	2b00      	cmp	r3, #0
 800869a:	dc39      	bgt.n	8008710 <_printf_float+0x2f4>
 800869c:	4a1b      	ldr	r2, [pc, #108]	; (800870c <_printf_float+0x2f0>)
 800869e:	2301      	movs	r3, #1
 80086a0:	4631      	mov	r1, r6
 80086a2:	4628      	mov	r0, r5
 80086a4:	47b8      	blx	r7
 80086a6:	3001      	adds	r0, #1
 80086a8:	f43f af19 	beq.w	80084de <_printf_float+0xc2>
 80086ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086b0:	4313      	orrs	r3, r2
 80086b2:	d102      	bne.n	80086ba <_printf_float+0x29e>
 80086b4:	6823      	ldr	r3, [r4, #0]
 80086b6:	07d9      	lsls	r1, r3, #31
 80086b8:	d5d8      	bpl.n	800866c <_printf_float+0x250>
 80086ba:	ee18 3a10 	vmov	r3, s16
 80086be:	4652      	mov	r2, sl
 80086c0:	4631      	mov	r1, r6
 80086c2:	4628      	mov	r0, r5
 80086c4:	47b8      	blx	r7
 80086c6:	3001      	adds	r0, #1
 80086c8:	f43f af09 	beq.w	80084de <_printf_float+0xc2>
 80086cc:	f04f 0900 	mov.w	r9, #0
 80086d0:	f104 0a1a 	add.w	sl, r4, #26
 80086d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d6:	425b      	negs	r3, r3
 80086d8:	454b      	cmp	r3, r9
 80086da:	dc01      	bgt.n	80086e0 <_printf_float+0x2c4>
 80086dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086de:	e792      	b.n	8008606 <_printf_float+0x1ea>
 80086e0:	2301      	movs	r3, #1
 80086e2:	4652      	mov	r2, sl
 80086e4:	4631      	mov	r1, r6
 80086e6:	4628      	mov	r0, r5
 80086e8:	47b8      	blx	r7
 80086ea:	3001      	adds	r0, #1
 80086ec:	f43f aef7 	beq.w	80084de <_printf_float+0xc2>
 80086f0:	f109 0901 	add.w	r9, r9, #1
 80086f4:	e7ee      	b.n	80086d4 <_printf_float+0x2b8>
 80086f6:	bf00      	nop
 80086f8:	7fefffff 	.word	0x7fefffff
 80086fc:	0800b1dc 	.word	0x0800b1dc
 8008700:	0800b1e0 	.word	0x0800b1e0
 8008704:	0800b1e8 	.word	0x0800b1e8
 8008708:	0800b1e4 	.word	0x0800b1e4
 800870c:	0800b1ec 	.word	0x0800b1ec
 8008710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008712:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008714:	429a      	cmp	r2, r3
 8008716:	bfa8      	it	ge
 8008718:	461a      	movge	r2, r3
 800871a:	2a00      	cmp	r2, #0
 800871c:	4691      	mov	r9, r2
 800871e:	dc37      	bgt.n	8008790 <_printf_float+0x374>
 8008720:	f04f 0b00 	mov.w	fp, #0
 8008724:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008728:	f104 021a 	add.w	r2, r4, #26
 800872c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800872e:	9305      	str	r3, [sp, #20]
 8008730:	eba3 0309 	sub.w	r3, r3, r9
 8008734:	455b      	cmp	r3, fp
 8008736:	dc33      	bgt.n	80087a0 <_printf_float+0x384>
 8008738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800873c:	429a      	cmp	r2, r3
 800873e:	db3b      	blt.n	80087b8 <_printf_float+0x39c>
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	07da      	lsls	r2, r3, #31
 8008744:	d438      	bmi.n	80087b8 <_printf_float+0x39c>
 8008746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008748:	9b05      	ldr	r3, [sp, #20]
 800874a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	eba2 0901 	sub.w	r9, r2, r1
 8008752:	4599      	cmp	r9, r3
 8008754:	bfa8      	it	ge
 8008756:	4699      	movge	r9, r3
 8008758:	f1b9 0f00 	cmp.w	r9, #0
 800875c:	dc35      	bgt.n	80087ca <_printf_float+0x3ae>
 800875e:	f04f 0800 	mov.w	r8, #0
 8008762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008766:	f104 0a1a 	add.w	sl, r4, #26
 800876a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800876e:	1a9b      	subs	r3, r3, r2
 8008770:	eba3 0309 	sub.w	r3, r3, r9
 8008774:	4543      	cmp	r3, r8
 8008776:	f77f af79 	ble.w	800866c <_printf_float+0x250>
 800877a:	2301      	movs	r3, #1
 800877c:	4652      	mov	r2, sl
 800877e:	4631      	mov	r1, r6
 8008780:	4628      	mov	r0, r5
 8008782:	47b8      	blx	r7
 8008784:	3001      	adds	r0, #1
 8008786:	f43f aeaa 	beq.w	80084de <_printf_float+0xc2>
 800878a:	f108 0801 	add.w	r8, r8, #1
 800878e:	e7ec      	b.n	800876a <_printf_float+0x34e>
 8008790:	4613      	mov	r3, r2
 8008792:	4631      	mov	r1, r6
 8008794:	4642      	mov	r2, r8
 8008796:	4628      	mov	r0, r5
 8008798:	47b8      	blx	r7
 800879a:	3001      	adds	r0, #1
 800879c:	d1c0      	bne.n	8008720 <_printf_float+0x304>
 800879e:	e69e      	b.n	80084de <_printf_float+0xc2>
 80087a0:	2301      	movs	r3, #1
 80087a2:	4631      	mov	r1, r6
 80087a4:	4628      	mov	r0, r5
 80087a6:	9205      	str	r2, [sp, #20]
 80087a8:	47b8      	blx	r7
 80087aa:	3001      	adds	r0, #1
 80087ac:	f43f ae97 	beq.w	80084de <_printf_float+0xc2>
 80087b0:	9a05      	ldr	r2, [sp, #20]
 80087b2:	f10b 0b01 	add.w	fp, fp, #1
 80087b6:	e7b9      	b.n	800872c <_printf_float+0x310>
 80087b8:	ee18 3a10 	vmov	r3, s16
 80087bc:	4652      	mov	r2, sl
 80087be:	4631      	mov	r1, r6
 80087c0:	4628      	mov	r0, r5
 80087c2:	47b8      	blx	r7
 80087c4:	3001      	adds	r0, #1
 80087c6:	d1be      	bne.n	8008746 <_printf_float+0x32a>
 80087c8:	e689      	b.n	80084de <_printf_float+0xc2>
 80087ca:	9a05      	ldr	r2, [sp, #20]
 80087cc:	464b      	mov	r3, r9
 80087ce:	4442      	add	r2, r8
 80087d0:	4631      	mov	r1, r6
 80087d2:	4628      	mov	r0, r5
 80087d4:	47b8      	blx	r7
 80087d6:	3001      	adds	r0, #1
 80087d8:	d1c1      	bne.n	800875e <_printf_float+0x342>
 80087da:	e680      	b.n	80084de <_printf_float+0xc2>
 80087dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087de:	2a01      	cmp	r2, #1
 80087e0:	dc01      	bgt.n	80087e6 <_printf_float+0x3ca>
 80087e2:	07db      	lsls	r3, r3, #31
 80087e4:	d538      	bpl.n	8008858 <_printf_float+0x43c>
 80087e6:	2301      	movs	r3, #1
 80087e8:	4642      	mov	r2, r8
 80087ea:	4631      	mov	r1, r6
 80087ec:	4628      	mov	r0, r5
 80087ee:	47b8      	blx	r7
 80087f0:	3001      	adds	r0, #1
 80087f2:	f43f ae74 	beq.w	80084de <_printf_float+0xc2>
 80087f6:	ee18 3a10 	vmov	r3, s16
 80087fa:	4652      	mov	r2, sl
 80087fc:	4631      	mov	r1, r6
 80087fe:	4628      	mov	r0, r5
 8008800:	47b8      	blx	r7
 8008802:	3001      	adds	r0, #1
 8008804:	f43f ae6b 	beq.w	80084de <_printf_float+0xc2>
 8008808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800880c:	2200      	movs	r2, #0
 800880e:	2300      	movs	r3, #0
 8008810:	f7f8 f962 	bl	8000ad8 <__aeabi_dcmpeq>
 8008814:	b9d8      	cbnz	r0, 800884e <_printf_float+0x432>
 8008816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008818:	f108 0201 	add.w	r2, r8, #1
 800881c:	3b01      	subs	r3, #1
 800881e:	4631      	mov	r1, r6
 8008820:	4628      	mov	r0, r5
 8008822:	47b8      	blx	r7
 8008824:	3001      	adds	r0, #1
 8008826:	d10e      	bne.n	8008846 <_printf_float+0x42a>
 8008828:	e659      	b.n	80084de <_printf_float+0xc2>
 800882a:	2301      	movs	r3, #1
 800882c:	4652      	mov	r2, sl
 800882e:	4631      	mov	r1, r6
 8008830:	4628      	mov	r0, r5
 8008832:	47b8      	blx	r7
 8008834:	3001      	adds	r0, #1
 8008836:	f43f ae52 	beq.w	80084de <_printf_float+0xc2>
 800883a:	f108 0801 	add.w	r8, r8, #1
 800883e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008840:	3b01      	subs	r3, #1
 8008842:	4543      	cmp	r3, r8
 8008844:	dcf1      	bgt.n	800882a <_printf_float+0x40e>
 8008846:	464b      	mov	r3, r9
 8008848:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800884c:	e6dc      	b.n	8008608 <_printf_float+0x1ec>
 800884e:	f04f 0800 	mov.w	r8, #0
 8008852:	f104 0a1a 	add.w	sl, r4, #26
 8008856:	e7f2      	b.n	800883e <_printf_float+0x422>
 8008858:	2301      	movs	r3, #1
 800885a:	4642      	mov	r2, r8
 800885c:	e7df      	b.n	800881e <_printf_float+0x402>
 800885e:	2301      	movs	r3, #1
 8008860:	464a      	mov	r2, r9
 8008862:	4631      	mov	r1, r6
 8008864:	4628      	mov	r0, r5
 8008866:	47b8      	blx	r7
 8008868:	3001      	adds	r0, #1
 800886a:	f43f ae38 	beq.w	80084de <_printf_float+0xc2>
 800886e:	f108 0801 	add.w	r8, r8, #1
 8008872:	68e3      	ldr	r3, [r4, #12]
 8008874:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008876:	1a5b      	subs	r3, r3, r1
 8008878:	4543      	cmp	r3, r8
 800887a:	dcf0      	bgt.n	800885e <_printf_float+0x442>
 800887c:	e6fa      	b.n	8008674 <_printf_float+0x258>
 800887e:	f04f 0800 	mov.w	r8, #0
 8008882:	f104 0919 	add.w	r9, r4, #25
 8008886:	e7f4      	b.n	8008872 <_printf_float+0x456>

08008888 <_printf_common>:
 8008888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800888c:	4616      	mov	r6, r2
 800888e:	4699      	mov	r9, r3
 8008890:	688a      	ldr	r2, [r1, #8]
 8008892:	690b      	ldr	r3, [r1, #16]
 8008894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008898:	4293      	cmp	r3, r2
 800889a:	bfb8      	it	lt
 800889c:	4613      	movlt	r3, r2
 800889e:	6033      	str	r3, [r6, #0]
 80088a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088a4:	4607      	mov	r7, r0
 80088a6:	460c      	mov	r4, r1
 80088a8:	b10a      	cbz	r2, 80088ae <_printf_common+0x26>
 80088aa:	3301      	adds	r3, #1
 80088ac:	6033      	str	r3, [r6, #0]
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	0699      	lsls	r1, r3, #26
 80088b2:	bf42      	ittt	mi
 80088b4:	6833      	ldrmi	r3, [r6, #0]
 80088b6:	3302      	addmi	r3, #2
 80088b8:	6033      	strmi	r3, [r6, #0]
 80088ba:	6825      	ldr	r5, [r4, #0]
 80088bc:	f015 0506 	ands.w	r5, r5, #6
 80088c0:	d106      	bne.n	80088d0 <_printf_common+0x48>
 80088c2:	f104 0a19 	add.w	sl, r4, #25
 80088c6:	68e3      	ldr	r3, [r4, #12]
 80088c8:	6832      	ldr	r2, [r6, #0]
 80088ca:	1a9b      	subs	r3, r3, r2
 80088cc:	42ab      	cmp	r3, r5
 80088ce:	dc26      	bgt.n	800891e <_printf_common+0x96>
 80088d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088d4:	1e13      	subs	r3, r2, #0
 80088d6:	6822      	ldr	r2, [r4, #0]
 80088d8:	bf18      	it	ne
 80088da:	2301      	movne	r3, #1
 80088dc:	0692      	lsls	r2, r2, #26
 80088de:	d42b      	bmi.n	8008938 <_printf_common+0xb0>
 80088e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088e4:	4649      	mov	r1, r9
 80088e6:	4638      	mov	r0, r7
 80088e8:	47c0      	blx	r8
 80088ea:	3001      	adds	r0, #1
 80088ec:	d01e      	beq.n	800892c <_printf_common+0xa4>
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	68e5      	ldr	r5, [r4, #12]
 80088f2:	6832      	ldr	r2, [r6, #0]
 80088f4:	f003 0306 	and.w	r3, r3, #6
 80088f8:	2b04      	cmp	r3, #4
 80088fa:	bf08      	it	eq
 80088fc:	1aad      	subeq	r5, r5, r2
 80088fe:	68a3      	ldr	r3, [r4, #8]
 8008900:	6922      	ldr	r2, [r4, #16]
 8008902:	bf0c      	ite	eq
 8008904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008908:	2500      	movne	r5, #0
 800890a:	4293      	cmp	r3, r2
 800890c:	bfc4      	itt	gt
 800890e:	1a9b      	subgt	r3, r3, r2
 8008910:	18ed      	addgt	r5, r5, r3
 8008912:	2600      	movs	r6, #0
 8008914:	341a      	adds	r4, #26
 8008916:	42b5      	cmp	r5, r6
 8008918:	d11a      	bne.n	8008950 <_printf_common+0xc8>
 800891a:	2000      	movs	r0, #0
 800891c:	e008      	b.n	8008930 <_printf_common+0xa8>
 800891e:	2301      	movs	r3, #1
 8008920:	4652      	mov	r2, sl
 8008922:	4649      	mov	r1, r9
 8008924:	4638      	mov	r0, r7
 8008926:	47c0      	blx	r8
 8008928:	3001      	adds	r0, #1
 800892a:	d103      	bne.n	8008934 <_printf_common+0xac>
 800892c:	f04f 30ff 	mov.w	r0, #4294967295
 8008930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008934:	3501      	adds	r5, #1
 8008936:	e7c6      	b.n	80088c6 <_printf_common+0x3e>
 8008938:	18e1      	adds	r1, r4, r3
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	2030      	movs	r0, #48	; 0x30
 800893e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008942:	4422      	add	r2, r4
 8008944:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800894c:	3302      	adds	r3, #2
 800894e:	e7c7      	b.n	80088e0 <_printf_common+0x58>
 8008950:	2301      	movs	r3, #1
 8008952:	4622      	mov	r2, r4
 8008954:	4649      	mov	r1, r9
 8008956:	4638      	mov	r0, r7
 8008958:	47c0      	blx	r8
 800895a:	3001      	adds	r0, #1
 800895c:	d0e6      	beq.n	800892c <_printf_common+0xa4>
 800895e:	3601      	adds	r6, #1
 8008960:	e7d9      	b.n	8008916 <_printf_common+0x8e>
	...

08008964 <_printf_i>:
 8008964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008968:	460c      	mov	r4, r1
 800896a:	4691      	mov	r9, r2
 800896c:	7e27      	ldrb	r7, [r4, #24]
 800896e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008970:	2f78      	cmp	r7, #120	; 0x78
 8008972:	4680      	mov	r8, r0
 8008974:	469a      	mov	sl, r3
 8008976:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800897a:	d807      	bhi.n	800898c <_printf_i+0x28>
 800897c:	2f62      	cmp	r7, #98	; 0x62
 800897e:	d80a      	bhi.n	8008996 <_printf_i+0x32>
 8008980:	2f00      	cmp	r7, #0
 8008982:	f000 80d8 	beq.w	8008b36 <_printf_i+0x1d2>
 8008986:	2f58      	cmp	r7, #88	; 0x58
 8008988:	f000 80a3 	beq.w	8008ad2 <_printf_i+0x16e>
 800898c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008994:	e03a      	b.n	8008a0c <_printf_i+0xa8>
 8008996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800899a:	2b15      	cmp	r3, #21
 800899c:	d8f6      	bhi.n	800898c <_printf_i+0x28>
 800899e:	a001      	add	r0, pc, #4	; (adr r0, 80089a4 <_printf_i+0x40>)
 80089a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80089a4:	080089fd 	.word	0x080089fd
 80089a8:	08008a11 	.word	0x08008a11
 80089ac:	0800898d 	.word	0x0800898d
 80089b0:	0800898d 	.word	0x0800898d
 80089b4:	0800898d 	.word	0x0800898d
 80089b8:	0800898d 	.word	0x0800898d
 80089bc:	08008a11 	.word	0x08008a11
 80089c0:	0800898d 	.word	0x0800898d
 80089c4:	0800898d 	.word	0x0800898d
 80089c8:	0800898d 	.word	0x0800898d
 80089cc:	0800898d 	.word	0x0800898d
 80089d0:	08008b1d 	.word	0x08008b1d
 80089d4:	08008a41 	.word	0x08008a41
 80089d8:	08008aff 	.word	0x08008aff
 80089dc:	0800898d 	.word	0x0800898d
 80089e0:	0800898d 	.word	0x0800898d
 80089e4:	08008b3f 	.word	0x08008b3f
 80089e8:	0800898d 	.word	0x0800898d
 80089ec:	08008a41 	.word	0x08008a41
 80089f0:	0800898d 	.word	0x0800898d
 80089f4:	0800898d 	.word	0x0800898d
 80089f8:	08008b07 	.word	0x08008b07
 80089fc:	680b      	ldr	r3, [r1, #0]
 80089fe:	1d1a      	adds	r2, r3, #4
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	600a      	str	r2, [r1, #0]
 8008a04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e0a3      	b.n	8008b58 <_printf_i+0x1f4>
 8008a10:	6825      	ldr	r5, [r4, #0]
 8008a12:	6808      	ldr	r0, [r1, #0]
 8008a14:	062e      	lsls	r6, r5, #24
 8008a16:	f100 0304 	add.w	r3, r0, #4
 8008a1a:	d50a      	bpl.n	8008a32 <_printf_i+0xce>
 8008a1c:	6805      	ldr	r5, [r0, #0]
 8008a1e:	600b      	str	r3, [r1, #0]
 8008a20:	2d00      	cmp	r5, #0
 8008a22:	da03      	bge.n	8008a2c <_printf_i+0xc8>
 8008a24:	232d      	movs	r3, #45	; 0x2d
 8008a26:	426d      	negs	r5, r5
 8008a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a2c:	485e      	ldr	r0, [pc, #376]	; (8008ba8 <_printf_i+0x244>)
 8008a2e:	230a      	movs	r3, #10
 8008a30:	e019      	b.n	8008a66 <_printf_i+0x102>
 8008a32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008a36:	6805      	ldr	r5, [r0, #0]
 8008a38:	600b      	str	r3, [r1, #0]
 8008a3a:	bf18      	it	ne
 8008a3c:	b22d      	sxthne	r5, r5
 8008a3e:	e7ef      	b.n	8008a20 <_printf_i+0xbc>
 8008a40:	680b      	ldr	r3, [r1, #0]
 8008a42:	6825      	ldr	r5, [r4, #0]
 8008a44:	1d18      	adds	r0, r3, #4
 8008a46:	6008      	str	r0, [r1, #0]
 8008a48:	0628      	lsls	r0, r5, #24
 8008a4a:	d501      	bpl.n	8008a50 <_printf_i+0xec>
 8008a4c:	681d      	ldr	r5, [r3, #0]
 8008a4e:	e002      	b.n	8008a56 <_printf_i+0xf2>
 8008a50:	0669      	lsls	r1, r5, #25
 8008a52:	d5fb      	bpl.n	8008a4c <_printf_i+0xe8>
 8008a54:	881d      	ldrh	r5, [r3, #0]
 8008a56:	4854      	ldr	r0, [pc, #336]	; (8008ba8 <_printf_i+0x244>)
 8008a58:	2f6f      	cmp	r7, #111	; 0x6f
 8008a5a:	bf0c      	ite	eq
 8008a5c:	2308      	moveq	r3, #8
 8008a5e:	230a      	movne	r3, #10
 8008a60:	2100      	movs	r1, #0
 8008a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a66:	6866      	ldr	r6, [r4, #4]
 8008a68:	60a6      	str	r6, [r4, #8]
 8008a6a:	2e00      	cmp	r6, #0
 8008a6c:	bfa2      	ittt	ge
 8008a6e:	6821      	ldrge	r1, [r4, #0]
 8008a70:	f021 0104 	bicge.w	r1, r1, #4
 8008a74:	6021      	strge	r1, [r4, #0]
 8008a76:	b90d      	cbnz	r5, 8008a7c <_printf_i+0x118>
 8008a78:	2e00      	cmp	r6, #0
 8008a7a:	d04d      	beq.n	8008b18 <_printf_i+0x1b4>
 8008a7c:	4616      	mov	r6, r2
 8008a7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a82:	fb03 5711 	mls	r7, r3, r1, r5
 8008a86:	5dc7      	ldrb	r7, [r0, r7]
 8008a88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a8c:	462f      	mov	r7, r5
 8008a8e:	42bb      	cmp	r3, r7
 8008a90:	460d      	mov	r5, r1
 8008a92:	d9f4      	bls.n	8008a7e <_printf_i+0x11a>
 8008a94:	2b08      	cmp	r3, #8
 8008a96:	d10b      	bne.n	8008ab0 <_printf_i+0x14c>
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	07df      	lsls	r7, r3, #31
 8008a9c:	d508      	bpl.n	8008ab0 <_printf_i+0x14c>
 8008a9e:	6923      	ldr	r3, [r4, #16]
 8008aa0:	6861      	ldr	r1, [r4, #4]
 8008aa2:	4299      	cmp	r1, r3
 8008aa4:	bfde      	ittt	le
 8008aa6:	2330      	movle	r3, #48	; 0x30
 8008aa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008aac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ab0:	1b92      	subs	r2, r2, r6
 8008ab2:	6122      	str	r2, [r4, #16]
 8008ab4:	f8cd a000 	str.w	sl, [sp]
 8008ab8:	464b      	mov	r3, r9
 8008aba:	aa03      	add	r2, sp, #12
 8008abc:	4621      	mov	r1, r4
 8008abe:	4640      	mov	r0, r8
 8008ac0:	f7ff fee2 	bl	8008888 <_printf_common>
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	d14c      	bne.n	8008b62 <_printf_i+0x1fe>
 8008ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8008acc:	b004      	add	sp, #16
 8008ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad2:	4835      	ldr	r0, [pc, #212]	; (8008ba8 <_printf_i+0x244>)
 8008ad4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	680e      	ldr	r6, [r1, #0]
 8008adc:	061f      	lsls	r7, r3, #24
 8008ade:	f856 5b04 	ldr.w	r5, [r6], #4
 8008ae2:	600e      	str	r6, [r1, #0]
 8008ae4:	d514      	bpl.n	8008b10 <_printf_i+0x1ac>
 8008ae6:	07d9      	lsls	r1, r3, #31
 8008ae8:	bf44      	itt	mi
 8008aea:	f043 0320 	orrmi.w	r3, r3, #32
 8008aee:	6023      	strmi	r3, [r4, #0]
 8008af0:	b91d      	cbnz	r5, 8008afa <_printf_i+0x196>
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	f023 0320 	bic.w	r3, r3, #32
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	2310      	movs	r3, #16
 8008afc:	e7b0      	b.n	8008a60 <_printf_i+0xfc>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	f043 0320 	orr.w	r3, r3, #32
 8008b04:	6023      	str	r3, [r4, #0]
 8008b06:	2378      	movs	r3, #120	; 0x78
 8008b08:	4828      	ldr	r0, [pc, #160]	; (8008bac <_printf_i+0x248>)
 8008b0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b0e:	e7e3      	b.n	8008ad8 <_printf_i+0x174>
 8008b10:	065e      	lsls	r6, r3, #25
 8008b12:	bf48      	it	mi
 8008b14:	b2ad      	uxthmi	r5, r5
 8008b16:	e7e6      	b.n	8008ae6 <_printf_i+0x182>
 8008b18:	4616      	mov	r6, r2
 8008b1a:	e7bb      	b.n	8008a94 <_printf_i+0x130>
 8008b1c:	680b      	ldr	r3, [r1, #0]
 8008b1e:	6826      	ldr	r6, [r4, #0]
 8008b20:	6960      	ldr	r0, [r4, #20]
 8008b22:	1d1d      	adds	r5, r3, #4
 8008b24:	600d      	str	r5, [r1, #0]
 8008b26:	0635      	lsls	r5, r6, #24
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	d501      	bpl.n	8008b30 <_printf_i+0x1cc>
 8008b2c:	6018      	str	r0, [r3, #0]
 8008b2e:	e002      	b.n	8008b36 <_printf_i+0x1d2>
 8008b30:	0671      	lsls	r1, r6, #25
 8008b32:	d5fb      	bpl.n	8008b2c <_printf_i+0x1c8>
 8008b34:	8018      	strh	r0, [r3, #0]
 8008b36:	2300      	movs	r3, #0
 8008b38:	6123      	str	r3, [r4, #16]
 8008b3a:	4616      	mov	r6, r2
 8008b3c:	e7ba      	b.n	8008ab4 <_printf_i+0x150>
 8008b3e:	680b      	ldr	r3, [r1, #0]
 8008b40:	1d1a      	adds	r2, r3, #4
 8008b42:	600a      	str	r2, [r1, #0]
 8008b44:	681e      	ldr	r6, [r3, #0]
 8008b46:	6862      	ldr	r2, [r4, #4]
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f7f7 fb50 	bl	80001f0 <memchr>
 8008b50:	b108      	cbz	r0, 8008b56 <_printf_i+0x1f2>
 8008b52:	1b80      	subs	r0, r0, r6
 8008b54:	6060      	str	r0, [r4, #4]
 8008b56:	6863      	ldr	r3, [r4, #4]
 8008b58:	6123      	str	r3, [r4, #16]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b60:	e7a8      	b.n	8008ab4 <_printf_i+0x150>
 8008b62:	6923      	ldr	r3, [r4, #16]
 8008b64:	4632      	mov	r2, r6
 8008b66:	4649      	mov	r1, r9
 8008b68:	4640      	mov	r0, r8
 8008b6a:	47d0      	blx	sl
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	d0ab      	beq.n	8008ac8 <_printf_i+0x164>
 8008b70:	6823      	ldr	r3, [r4, #0]
 8008b72:	079b      	lsls	r3, r3, #30
 8008b74:	d413      	bmi.n	8008b9e <_printf_i+0x23a>
 8008b76:	68e0      	ldr	r0, [r4, #12]
 8008b78:	9b03      	ldr	r3, [sp, #12]
 8008b7a:	4298      	cmp	r0, r3
 8008b7c:	bfb8      	it	lt
 8008b7e:	4618      	movlt	r0, r3
 8008b80:	e7a4      	b.n	8008acc <_printf_i+0x168>
 8008b82:	2301      	movs	r3, #1
 8008b84:	4632      	mov	r2, r6
 8008b86:	4649      	mov	r1, r9
 8008b88:	4640      	mov	r0, r8
 8008b8a:	47d0      	blx	sl
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d09b      	beq.n	8008ac8 <_printf_i+0x164>
 8008b90:	3501      	adds	r5, #1
 8008b92:	68e3      	ldr	r3, [r4, #12]
 8008b94:	9903      	ldr	r1, [sp, #12]
 8008b96:	1a5b      	subs	r3, r3, r1
 8008b98:	42ab      	cmp	r3, r5
 8008b9a:	dcf2      	bgt.n	8008b82 <_printf_i+0x21e>
 8008b9c:	e7eb      	b.n	8008b76 <_printf_i+0x212>
 8008b9e:	2500      	movs	r5, #0
 8008ba0:	f104 0619 	add.w	r6, r4, #25
 8008ba4:	e7f5      	b.n	8008b92 <_printf_i+0x22e>
 8008ba6:	bf00      	nop
 8008ba8:	0800b1ee 	.word	0x0800b1ee
 8008bac:	0800b1ff 	.word	0x0800b1ff

08008bb0 <siprintf>:
 8008bb0:	b40e      	push	{r1, r2, r3}
 8008bb2:	b500      	push	{lr}
 8008bb4:	b09c      	sub	sp, #112	; 0x70
 8008bb6:	ab1d      	add	r3, sp, #116	; 0x74
 8008bb8:	9002      	str	r0, [sp, #8]
 8008bba:	9006      	str	r0, [sp, #24]
 8008bbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bc0:	4809      	ldr	r0, [pc, #36]	; (8008be8 <siprintf+0x38>)
 8008bc2:	9107      	str	r1, [sp, #28]
 8008bc4:	9104      	str	r1, [sp, #16]
 8008bc6:	4909      	ldr	r1, [pc, #36]	; (8008bec <siprintf+0x3c>)
 8008bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bcc:	9105      	str	r1, [sp, #20]
 8008bce:	6800      	ldr	r0, [r0, #0]
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	a902      	add	r1, sp, #8
 8008bd4:	f001 fb24 	bl	800a220 <_svfiprintf_r>
 8008bd8:	9b02      	ldr	r3, [sp, #8]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	701a      	strb	r2, [r3, #0]
 8008bde:	b01c      	add	sp, #112	; 0x70
 8008be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008be4:	b003      	add	sp, #12
 8008be6:	4770      	bx	lr
 8008be8:	20000014 	.word	0x20000014
 8008bec:	ffff0208 	.word	0xffff0208

08008bf0 <quorem>:
 8008bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf4:	6903      	ldr	r3, [r0, #16]
 8008bf6:	690c      	ldr	r4, [r1, #16]
 8008bf8:	42a3      	cmp	r3, r4
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	f2c0 8081 	blt.w	8008d02 <quorem+0x112>
 8008c00:	3c01      	subs	r4, #1
 8008c02:	f101 0814 	add.w	r8, r1, #20
 8008c06:	f100 0514 	add.w	r5, r0, #20
 8008c0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c0e:	9301      	str	r3, [sp, #4]
 8008c10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c24:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c28:	d331      	bcc.n	8008c8e <quorem+0x9e>
 8008c2a:	f04f 0e00 	mov.w	lr, #0
 8008c2e:	4640      	mov	r0, r8
 8008c30:	46ac      	mov	ip, r5
 8008c32:	46f2      	mov	sl, lr
 8008c34:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c38:	b293      	uxth	r3, r2
 8008c3a:	fb06 e303 	mla	r3, r6, r3, lr
 8008c3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	ebaa 0303 	sub.w	r3, sl, r3
 8008c48:	0c12      	lsrs	r2, r2, #16
 8008c4a:	f8dc a000 	ldr.w	sl, [ip]
 8008c4e:	fb06 e202 	mla	r2, r6, r2, lr
 8008c52:	fa13 f38a 	uxtah	r3, r3, sl
 8008c56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c5a:	fa1f fa82 	uxth.w	sl, r2
 8008c5e:	f8dc 2000 	ldr.w	r2, [ip]
 8008c62:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008c66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c70:	4581      	cmp	r9, r0
 8008c72:	f84c 3b04 	str.w	r3, [ip], #4
 8008c76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c7a:	d2db      	bcs.n	8008c34 <quorem+0x44>
 8008c7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c80:	b92b      	cbnz	r3, 8008c8e <quorem+0x9e>
 8008c82:	9b01      	ldr	r3, [sp, #4]
 8008c84:	3b04      	subs	r3, #4
 8008c86:	429d      	cmp	r5, r3
 8008c88:	461a      	mov	r2, r3
 8008c8a:	d32e      	bcc.n	8008cea <quorem+0xfa>
 8008c8c:	613c      	str	r4, [r7, #16]
 8008c8e:	4638      	mov	r0, r7
 8008c90:	f001 f8b0 	bl	8009df4 <__mcmp>
 8008c94:	2800      	cmp	r0, #0
 8008c96:	db24      	blt.n	8008ce2 <quorem+0xf2>
 8008c98:	3601      	adds	r6, #1
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	f04f 0c00 	mov.w	ip, #0
 8008ca0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ca4:	f8d0 e000 	ldr.w	lr, [r0]
 8008ca8:	b293      	uxth	r3, r2
 8008caa:	ebac 0303 	sub.w	r3, ip, r3
 8008cae:	0c12      	lsrs	r2, r2, #16
 8008cb0:	fa13 f38e 	uxtah	r3, r3, lr
 8008cb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008cb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cc2:	45c1      	cmp	r9, r8
 8008cc4:	f840 3b04 	str.w	r3, [r0], #4
 8008cc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ccc:	d2e8      	bcs.n	8008ca0 <quorem+0xb0>
 8008cce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cd6:	b922      	cbnz	r2, 8008ce2 <quorem+0xf2>
 8008cd8:	3b04      	subs	r3, #4
 8008cda:	429d      	cmp	r5, r3
 8008cdc:	461a      	mov	r2, r3
 8008cde:	d30a      	bcc.n	8008cf6 <quorem+0x106>
 8008ce0:	613c      	str	r4, [r7, #16]
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	b003      	add	sp, #12
 8008ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cea:	6812      	ldr	r2, [r2, #0]
 8008cec:	3b04      	subs	r3, #4
 8008cee:	2a00      	cmp	r2, #0
 8008cf0:	d1cc      	bne.n	8008c8c <quorem+0x9c>
 8008cf2:	3c01      	subs	r4, #1
 8008cf4:	e7c7      	b.n	8008c86 <quorem+0x96>
 8008cf6:	6812      	ldr	r2, [r2, #0]
 8008cf8:	3b04      	subs	r3, #4
 8008cfa:	2a00      	cmp	r2, #0
 8008cfc:	d1f0      	bne.n	8008ce0 <quorem+0xf0>
 8008cfe:	3c01      	subs	r4, #1
 8008d00:	e7eb      	b.n	8008cda <quorem+0xea>
 8008d02:	2000      	movs	r0, #0
 8008d04:	e7ee      	b.n	8008ce4 <quorem+0xf4>
	...

08008d08 <_dtoa_r>:
 8008d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d0c:	ed2d 8b02 	vpush	{d8}
 8008d10:	ec57 6b10 	vmov	r6, r7, d0
 8008d14:	b095      	sub	sp, #84	; 0x54
 8008d16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008d1c:	9105      	str	r1, [sp, #20]
 8008d1e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008d22:	4604      	mov	r4, r0
 8008d24:	9209      	str	r2, [sp, #36]	; 0x24
 8008d26:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d28:	b975      	cbnz	r5, 8008d48 <_dtoa_r+0x40>
 8008d2a:	2010      	movs	r0, #16
 8008d2c:	f000 fddc 	bl	80098e8 <malloc>
 8008d30:	4602      	mov	r2, r0
 8008d32:	6260      	str	r0, [r4, #36]	; 0x24
 8008d34:	b920      	cbnz	r0, 8008d40 <_dtoa_r+0x38>
 8008d36:	4bb2      	ldr	r3, [pc, #712]	; (8009000 <_dtoa_r+0x2f8>)
 8008d38:	21ea      	movs	r1, #234	; 0xea
 8008d3a:	48b2      	ldr	r0, [pc, #712]	; (8009004 <_dtoa_r+0x2fc>)
 8008d3c:	f001 fb80 	bl	800a440 <__assert_func>
 8008d40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d44:	6005      	str	r5, [r0, #0]
 8008d46:	60c5      	str	r5, [r0, #12]
 8008d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d4a:	6819      	ldr	r1, [r3, #0]
 8008d4c:	b151      	cbz	r1, 8008d64 <_dtoa_r+0x5c>
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	604a      	str	r2, [r1, #4]
 8008d52:	2301      	movs	r3, #1
 8008d54:	4093      	lsls	r3, r2
 8008d56:	608b      	str	r3, [r1, #8]
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 fe0d 	bl	8009978 <_Bfree>
 8008d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d60:	2200      	movs	r2, #0
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	1e3b      	subs	r3, r7, #0
 8008d66:	bfb9      	ittee	lt
 8008d68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d6c:	9303      	strlt	r3, [sp, #12]
 8008d6e:	2300      	movge	r3, #0
 8008d70:	f8c8 3000 	strge.w	r3, [r8]
 8008d74:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008d78:	4ba3      	ldr	r3, [pc, #652]	; (8009008 <_dtoa_r+0x300>)
 8008d7a:	bfbc      	itt	lt
 8008d7c:	2201      	movlt	r2, #1
 8008d7e:	f8c8 2000 	strlt.w	r2, [r8]
 8008d82:	ea33 0309 	bics.w	r3, r3, r9
 8008d86:	d11b      	bne.n	8008dc0 <_dtoa_r+0xb8>
 8008d88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d8e:	6013      	str	r3, [r2, #0]
 8008d90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d94:	4333      	orrs	r3, r6
 8008d96:	f000 857a 	beq.w	800988e <_dtoa_r+0xb86>
 8008d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d9c:	b963      	cbnz	r3, 8008db8 <_dtoa_r+0xb0>
 8008d9e:	4b9b      	ldr	r3, [pc, #620]	; (800900c <_dtoa_r+0x304>)
 8008da0:	e024      	b.n	8008dec <_dtoa_r+0xe4>
 8008da2:	4b9b      	ldr	r3, [pc, #620]	; (8009010 <_dtoa_r+0x308>)
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	3308      	adds	r3, #8
 8008da8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008daa:	6013      	str	r3, [r2, #0]
 8008dac:	9800      	ldr	r0, [sp, #0]
 8008dae:	b015      	add	sp, #84	; 0x54
 8008db0:	ecbd 8b02 	vpop	{d8}
 8008db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db8:	4b94      	ldr	r3, [pc, #592]	; (800900c <_dtoa_r+0x304>)
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	3303      	adds	r3, #3
 8008dbe:	e7f3      	b.n	8008da8 <_dtoa_r+0xa0>
 8008dc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	ec51 0b17 	vmov	r0, r1, d7
 8008dca:	2300      	movs	r3, #0
 8008dcc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008dd0:	f7f7 fe82 	bl	8000ad8 <__aeabi_dcmpeq>
 8008dd4:	4680      	mov	r8, r0
 8008dd6:	b158      	cbz	r0, 8008df0 <_dtoa_r+0xe8>
 8008dd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008dda:	2301      	movs	r3, #1
 8008ddc:	6013      	str	r3, [r2, #0]
 8008dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f000 8551 	beq.w	8009888 <_dtoa_r+0xb80>
 8008de6:	488b      	ldr	r0, [pc, #556]	; (8009014 <_dtoa_r+0x30c>)
 8008de8:	6018      	str	r0, [r3, #0]
 8008dea:	1e43      	subs	r3, r0, #1
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	e7dd      	b.n	8008dac <_dtoa_r+0xa4>
 8008df0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008df4:	aa12      	add	r2, sp, #72	; 0x48
 8008df6:	a913      	add	r1, sp, #76	; 0x4c
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f001 f89f 	bl	8009f3c <__d2b>
 8008dfe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e02:	4683      	mov	fp, r0
 8008e04:	2d00      	cmp	r5, #0
 8008e06:	d07c      	beq.n	8008f02 <_dtoa_r+0x1fa>
 8008e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e0a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008e0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e12:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008e16:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008e1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008e1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e22:	4b7d      	ldr	r3, [pc, #500]	; (8009018 <_dtoa_r+0x310>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	4630      	mov	r0, r6
 8008e28:	4639      	mov	r1, r7
 8008e2a:	f7f7 fa35 	bl	8000298 <__aeabi_dsub>
 8008e2e:	a36e      	add	r3, pc, #440	; (adr r3, 8008fe8 <_dtoa_r+0x2e0>)
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	f7f7 fbe8 	bl	8000608 <__aeabi_dmul>
 8008e38:	a36d      	add	r3, pc, #436	; (adr r3, 8008ff0 <_dtoa_r+0x2e8>)
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	f7f7 fa2d 	bl	800029c <__adddf3>
 8008e42:	4606      	mov	r6, r0
 8008e44:	4628      	mov	r0, r5
 8008e46:	460f      	mov	r7, r1
 8008e48:	f7f7 fb74 	bl	8000534 <__aeabi_i2d>
 8008e4c:	a36a      	add	r3, pc, #424	; (adr r3, 8008ff8 <_dtoa_r+0x2f0>)
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	f7f7 fbd9 	bl	8000608 <__aeabi_dmul>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	4639      	mov	r1, r7
 8008e5e:	f7f7 fa1d 	bl	800029c <__adddf3>
 8008e62:	4606      	mov	r6, r0
 8008e64:	460f      	mov	r7, r1
 8008e66:	f7f7 fe7f 	bl	8000b68 <__aeabi_d2iz>
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	4682      	mov	sl, r0
 8008e6e:	2300      	movs	r3, #0
 8008e70:	4630      	mov	r0, r6
 8008e72:	4639      	mov	r1, r7
 8008e74:	f7f7 fe3a 	bl	8000aec <__aeabi_dcmplt>
 8008e78:	b148      	cbz	r0, 8008e8e <_dtoa_r+0x186>
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	f7f7 fb5a 	bl	8000534 <__aeabi_i2d>
 8008e80:	4632      	mov	r2, r6
 8008e82:	463b      	mov	r3, r7
 8008e84:	f7f7 fe28 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e88:	b908      	cbnz	r0, 8008e8e <_dtoa_r+0x186>
 8008e8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e8e:	f1ba 0f16 	cmp.w	sl, #22
 8008e92:	d854      	bhi.n	8008f3e <_dtoa_r+0x236>
 8008e94:	4b61      	ldr	r3, [pc, #388]	; (800901c <_dtoa_r+0x314>)
 8008e96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ea2:	f7f7 fe23 	bl	8000aec <__aeabi_dcmplt>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d04b      	beq.n	8008f42 <_dtoa_r+0x23a>
 8008eaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008eae:	2300      	movs	r3, #0
 8008eb0:	930e      	str	r3, [sp, #56]	; 0x38
 8008eb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008eb4:	1b5d      	subs	r5, r3, r5
 8008eb6:	1e6b      	subs	r3, r5, #1
 8008eb8:	9304      	str	r3, [sp, #16]
 8008eba:	bf43      	ittte	mi
 8008ebc:	2300      	movmi	r3, #0
 8008ebe:	f1c5 0801 	rsbmi	r8, r5, #1
 8008ec2:	9304      	strmi	r3, [sp, #16]
 8008ec4:	f04f 0800 	movpl.w	r8, #0
 8008ec8:	f1ba 0f00 	cmp.w	sl, #0
 8008ecc:	db3b      	blt.n	8008f46 <_dtoa_r+0x23e>
 8008ece:	9b04      	ldr	r3, [sp, #16]
 8008ed0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008ed4:	4453      	add	r3, sl
 8008ed6:	9304      	str	r3, [sp, #16]
 8008ed8:	2300      	movs	r3, #0
 8008eda:	9306      	str	r3, [sp, #24]
 8008edc:	9b05      	ldr	r3, [sp, #20]
 8008ede:	2b09      	cmp	r3, #9
 8008ee0:	d869      	bhi.n	8008fb6 <_dtoa_r+0x2ae>
 8008ee2:	2b05      	cmp	r3, #5
 8008ee4:	bfc4      	itt	gt
 8008ee6:	3b04      	subgt	r3, #4
 8008ee8:	9305      	strgt	r3, [sp, #20]
 8008eea:	9b05      	ldr	r3, [sp, #20]
 8008eec:	f1a3 0302 	sub.w	r3, r3, #2
 8008ef0:	bfcc      	ite	gt
 8008ef2:	2500      	movgt	r5, #0
 8008ef4:	2501      	movle	r5, #1
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d869      	bhi.n	8008fce <_dtoa_r+0x2c6>
 8008efa:	e8df f003 	tbb	[pc, r3]
 8008efe:	4e2c      	.short	0x4e2c
 8008f00:	5a4c      	.short	0x5a4c
 8008f02:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008f06:	441d      	add	r5, r3
 8008f08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008f0c:	2b20      	cmp	r3, #32
 8008f0e:	bfc1      	itttt	gt
 8008f10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f14:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008f18:	fa09 f303 	lslgt.w	r3, r9, r3
 8008f1c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008f20:	bfda      	itte	le
 8008f22:	f1c3 0320 	rsble	r3, r3, #32
 8008f26:	fa06 f003 	lslle.w	r0, r6, r3
 8008f2a:	4318      	orrgt	r0, r3
 8008f2c:	f7f7 faf2 	bl	8000514 <__aeabi_ui2d>
 8008f30:	2301      	movs	r3, #1
 8008f32:	4606      	mov	r6, r0
 8008f34:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008f38:	3d01      	subs	r5, #1
 8008f3a:	9310      	str	r3, [sp, #64]	; 0x40
 8008f3c:	e771      	b.n	8008e22 <_dtoa_r+0x11a>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e7b6      	b.n	8008eb0 <_dtoa_r+0x1a8>
 8008f42:	900e      	str	r0, [sp, #56]	; 0x38
 8008f44:	e7b5      	b.n	8008eb2 <_dtoa_r+0x1aa>
 8008f46:	f1ca 0300 	rsb	r3, sl, #0
 8008f4a:	9306      	str	r3, [sp, #24]
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	eba8 080a 	sub.w	r8, r8, sl
 8008f52:	930d      	str	r3, [sp, #52]	; 0x34
 8008f54:	e7c2      	b.n	8008edc <_dtoa_r+0x1d4>
 8008f56:	2300      	movs	r3, #0
 8008f58:	9308      	str	r3, [sp, #32]
 8008f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	dc39      	bgt.n	8008fd4 <_dtoa_r+0x2cc>
 8008f60:	f04f 0901 	mov.w	r9, #1
 8008f64:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f68:	464b      	mov	r3, r9
 8008f6a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008f6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f70:	2200      	movs	r2, #0
 8008f72:	6042      	str	r2, [r0, #4]
 8008f74:	2204      	movs	r2, #4
 8008f76:	f102 0614 	add.w	r6, r2, #20
 8008f7a:	429e      	cmp	r6, r3
 8008f7c:	6841      	ldr	r1, [r0, #4]
 8008f7e:	d92f      	bls.n	8008fe0 <_dtoa_r+0x2d8>
 8008f80:	4620      	mov	r0, r4
 8008f82:	f000 fcb9 	bl	80098f8 <_Balloc>
 8008f86:	9000      	str	r0, [sp, #0]
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d14b      	bne.n	8009024 <_dtoa_r+0x31c>
 8008f8c:	4b24      	ldr	r3, [pc, #144]	; (8009020 <_dtoa_r+0x318>)
 8008f8e:	4602      	mov	r2, r0
 8008f90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008f94:	e6d1      	b.n	8008d3a <_dtoa_r+0x32>
 8008f96:	2301      	movs	r3, #1
 8008f98:	e7de      	b.n	8008f58 <_dtoa_r+0x250>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	9308      	str	r3, [sp, #32]
 8008f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa0:	eb0a 0903 	add.w	r9, sl, r3
 8008fa4:	f109 0301 	add.w	r3, r9, #1
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	9301      	str	r3, [sp, #4]
 8008fac:	bfb8      	it	lt
 8008fae:	2301      	movlt	r3, #1
 8008fb0:	e7dd      	b.n	8008f6e <_dtoa_r+0x266>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e7f2      	b.n	8008f9c <_dtoa_r+0x294>
 8008fb6:	2501      	movs	r5, #1
 8008fb8:	2300      	movs	r3, #0
 8008fba:	9305      	str	r3, [sp, #20]
 8008fbc:	9508      	str	r5, [sp, #32]
 8008fbe:	f04f 39ff 	mov.w	r9, #4294967295
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008fc8:	2312      	movs	r3, #18
 8008fca:	9209      	str	r2, [sp, #36]	; 0x24
 8008fcc:	e7cf      	b.n	8008f6e <_dtoa_r+0x266>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	9308      	str	r3, [sp, #32]
 8008fd2:	e7f4      	b.n	8008fbe <_dtoa_r+0x2b6>
 8008fd4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008fd8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008fdc:	464b      	mov	r3, r9
 8008fde:	e7c6      	b.n	8008f6e <_dtoa_r+0x266>
 8008fe0:	3101      	adds	r1, #1
 8008fe2:	6041      	str	r1, [r0, #4]
 8008fe4:	0052      	lsls	r2, r2, #1
 8008fe6:	e7c6      	b.n	8008f76 <_dtoa_r+0x26e>
 8008fe8:	636f4361 	.word	0x636f4361
 8008fec:	3fd287a7 	.word	0x3fd287a7
 8008ff0:	8b60c8b3 	.word	0x8b60c8b3
 8008ff4:	3fc68a28 	.word	0x3fc68a28
 8008ff8:	509f79fb 	.word	0x509f79fb
 8008ffc:	3fd34413 	.word	0x3fd34413
 8009000:	0800b21d 	.word	0x0800b21d
 8009004:	0800b234 	.word	0x0800b234
 8009008:	7ff00000 	.word	0x7ff00000
 800900c:	0800b219 	.word	0x0800b219
 8009010:	0800b210 	.word	0x0800b210
 8009014:	0800b1ed 	.word	0x0800b1ed
 8009018:	3ff80000 	.word	0x3ff80000
 800901c:	0800b330 	.word	0x0800b330
 8009020:	0800b293 	.word	0x0800b293
 8009024:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009026:	9a00      	ldr	r2, [sp, #0]
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	9b01      	ldr	r3, [sp, #4]
 800902c:	2b0e      	cmp	r3, #14
 800902e:	f200 80ad 	bhi.w	800918c <_dtoa_r+0x484>
 8009032:	2d00      	cmp	r5, #0
 8009034:	f000 80aa 	beq.w	800918c <_dtoa_r+0x484>
 8009038:	f1ba 0f00 	cmp.w	sl, #0
 800903c:	dd36      	ble.n	80090ac <_dtoa_r+0x3a4>
 800903e:	4ac3      	ldr	r2, [pc, #780]	; (800934c <_dtoa_r+0x644>)
 8009040:	f00a 030f 	and.w	r3, sl, #15
 8009044:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009048:	ed93 7b00 	vldr	d7, [r3]
 800904c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009050:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009054:	eeb0 8a47 	vmov.f32	s16, s14
 8009058:	eef0 8a67 	vmov.f32	s17, s15
 800905c:	d016      	beq.n	800908c <_dtoa_r+0x384>
 800905e:	4bbc      	ldr	r3, [pc, #752]	; (8009350 <_dtoa_r+0x648>)
 8009060:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009068:	f7f7 fbf8 	bl	800085c <__aeabi_ddiv>
 800906c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009070:	f007 070f 	and.w	r7, r7, #15
 8009074:	2503      	movs	r5, #3
 8009076:	4eb6      	ldr	r6, [pc, #728]	; (8009350 <_dtoa_r+0x648>)
 8009078:	b957      	cbnz	r7, 8009090 <_dtoa_r+0x388>
 800907a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800907e:	ec53 2b18 	vmov	r2, r3, d8
 8009082:	f7f7 fbeb 	bl	800085c <__aeabi_ddiv>
 8009086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800908a:	e029      	b.n	80090e0 <_dtoa_r+0x3d8>
 800908c:	2502      	movs	r5, #2
 800908e:	e7f2      	b.n	8009076 <_dtoa_r+0x36e>
 8009090:	07f9      	lsls	r1, r7, #31
 8009092:	d508      	bpl.n	80090a6 <_dtoa_r+0x39e>
 8009094:	ec51 0b18 	vmov	r0, r1, d8
 8009098:	e9d6 2300 	ldrd	r2, r3, [r6]
 800909c:	f7f7 fab4 	bl	8000608 <__aeabi_dmul>
 80090a0:	ec41 0b18 	vmov	d8, r0, r1
 80090a4:	3501      	adds	r5, #1
 80090a6:	107f      	asrs	r7, r7, #1
 80090a8:	3608      	adds	r6, #8
 80090aa:	e7e5      	b.n	8009078 <_dtoa_r+0x370>
 80090ac:	f000 80a6 	beq.w	80091fc <_dtoa_r+0x4f4>
 80090b0:	f1ca 0600 	rsb	r6, sl, #0
 80090b4:	4ba5      	ldr	r3, [pc, #660]	; (800934c <_dtoa_r+0x644>)
 80090b6:	4fa6      	ldr	r7, [pc, #664]	; (8009350 <_dtoa_r+0x648>)
 80090b8:	f006 020f 	and.w	r2, r6, #15
 80090bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090c8:	f7f7 fa9e 	bl	8000608 <__aeabi_dmul>
 80090cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090d0:	1136      	asrs	r6, r6, #4
 80090d2:	2300      	movs	r3, #0
 80090d4:	2502      	movs	r5, #2
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	f040 8085 	bne.w	80091e6 <_dtoa_r+0x4de>
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1d2      	bne.n	8009086 <_dtoa_r+0x37e>
 80090e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 808c 	beq.w	8009200 <_dtoa_r+0x4f8>
 80090e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80090ec:	4b99      	ldr	r3, [pc, #612]	; (8009354 <_dtoa_r+0x64c>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	4630      	mov	r0, r6
 80090f2:	4639      	mov	r1, r7
 80090f4:	f7f7 fcfa 	bl	8000aec <__aeabi_dcmplt>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	f000 8081 	beq.w	8009200 <_dtoa_r+0x4f8>
 80090fe:	9b01      	ldr	r3, [sp, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d07d      	beq.n	8009200 <_dtoa_r+0x4f8>
 8009104:	f1b9 0f00 	cmp.w	r9, #0
 8009108:	dd3c      	ble.n	8009184 <_dtoa_r+0x47c>
 800910a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800910e:	9307      	str	r3, [sp, #28]
 8009110:	2200      	movs	r2, #0
 8009112:	4b91      	ldr	r3, [pc, #580]	; (8009358 <_dtoa_r+0x650>)
 8009114:	4630      	mov	r0, r6
 8009116:	4639      	mov	r1, r7
 8009118:	f7f7 fa76 	bl	8000608 <__aeabi_dmul>
 800911c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009120:	3501      	adds	r5, #1
 8009122:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009126:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800912a:	4628      	mov	r0, r5
 800912c:	f7f7 fa02 	bl	8000534 <__aeabi_i2d>
 8009130:	4632      	mov	r2, r6
 8009132:	463b      	mov	r3, r7
 8009134:	f7f7 fa68 	bl	8000608 <__aeabi_dmul>
 8009138:	4b88      	ldr	r3, [pc, #544]	; (800935c <_dtoa_r+0x654>)
 800913a:	2200      	movs	r2, #0
 800913c:	f7f7 f8ae 	bl	800029c <__adddf3>
 8009140:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009148:	9303      	str	r3, [sp, #12]
 800914a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800914c:	2b00      	cmp	r3, #0
 800914e:	d15c      	bne.n	800920a <_dtoa_r+0x502>
 8009150:	4b83      	ldr	r3, [pc, #524]	; (8009360 <_dtoa_r+0x658>)
 8009152:	2200      	movs	r2, #0
 8009154:	4630      	mov	r0, r6
 8009156:	4639      	mov	r1, r7
 8009158:	f7f7 f89e 	bl	8000298 <__aeabi_dsub>
 800915c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009160:	4606      	mov	r6, r0
 8009162:	460f      	mov	r7, r1
 8009164:	f7f7 fce0 	bl	8000b28 <__aeabi_dcmpgt>
 8009168:	2800      	cmp	r0, #0
 800916a:	f040 8296 	bne.w	800969a <_dtoa_r+0x992>
 800916e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009172:	4630      	mov	r0, r6
 8009174:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009178:	4639      	mov	r1, r7
 800917a:	f7f7 fcb7 	bl	8000aec <__aeabi_dcmplt>
 800917e:	2800      	cmp	r0, #0
 8009180:	f040 8288 	bne.w	8009694 <_dtoa_r+0x98c>
 8009184:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009188:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800918c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800918e:	2b00      	cmp	r3, #0
 8009190:	f2c0 8158 	blt.w	8009444 <_dtoa_r+0x73c>
 8009194:	f1ba 0f0e 	cmp.w	sl, #14
 8009198:	f300 8154 	bgt.w	8009444 <_dtoa_r+0x73c>
 800919c:	4b6b      	ldr	r3, [pc, #428]	; (800934c <_dtoa_r+0x644>)
 800919e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80091a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f280 80e3 	bge.w	8009374 <_dtoa_r+0x66c>
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f300 80df 	bgt.w	8009374 <_dtoa_r+0x66c>
 80091b6:	f040 826d 	bne.w	8009694 <_dtoa_r+0x98c>
 80091ba:	4b69      	ldr	r3, [pc, #420]	; (8009360 <_dtoa_r+0x658>)
 80091bc:	2200      	movs	r2, #0
 80091be:	4640      	mov	r0, r8
 80091c0:	4649      	mov	r1, r9
 80091c2:	f7f7 fa21 	bl	8000608 <__aeabi_dmul>
 80091c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091ca:	f7f7 fca3 	bl	8000b14 <__aeabi_dcmpge>
 80091ce:	9e01      	ldr	r6, [sp, #4]
 80091d0:	4637      	mov	r7, r6
 80091d2:	2800      	cmp	r0, #0
 80091d4:	f040 8243 	bne.w	800965e <_dtoa_r+0x956>
 80091d8:	9d00      	ldr	r5, [sp, #0]
 80091da:	2331      	movs	r3, #49	; 0x31
 80091dc:	f805 3b01 	strb.w	r3, [r5], #1
 80091e0:	f10a 0a01 	add.w	sl, sl, #1
 80091e4:	e23f      	b.n	8009666 <_dtoa_r+0x95e>
 80091e6:	07f2      	lsls	r2, r6, #31
 80091e8:	d505      	bpl.n	80091f6 <_dtoa_r+0x4ee>
 80091ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ee:	f7f7 fa0b 	bl	8000608 <__aeabi_dmul>
 80091f2:	3501      	adds	r5, #1
 80091f4:	2301      	movs	r3, #1
 80091f6:	1076      	asrs	r6, r6, #1
 80091f8:	3708      	adds	r7, #8
 80091fa:	e76c      	b.n	80090d6 <_dtoa_r+0x3ce>
 80091fc:	2502      	movs	r5, #2
 80091fe:	e76f      	b.n	80090e0 <_dtoa_r+0x3d8>
 8009200:	9b01      	ldr	r3, [sp, #4]
 8009202:	f8cd a01c 	str.w	sl, [sp, #28]
 8009206:	930c      	str	r3, [sp, #48]	; 0x30
 8009208:	e78d      	b.n	8009126 <_dtoa_r+0x41e>
 800920a:	9900      	ldr	r1, [sp, #0]
 800920c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800920e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009210:	4b4e      	ldr	r3, [pc, #312]	; (800934c <_dtoa_r+0x644>)
 8009212:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009216:	4401      	add	r1, r0
 8009218:	9102      	str	r1, [sp, #8]
 800921a:	9908      	ldr	r1, [sp, #32]
 800921c:	eeb0 8a47 	vmov.f32	s16, s14
 8009220:	eef0 8a67 	vmov.f32	s17, s15
 8009224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009228:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800922c:	2900      	cmp	r1, #0
 800922e:	d045      	beq.n	80092bc <_dtoa_r+0x5b4>
 8009230:	494c      	ldr	r1, [pc, #304]	; (8009364 <_dtoa_r+0x65c>)
 8009232:	2000      	movs	r0, #0
 8009234:	f7f7 fb12 	bl	800085c <__aeabi_ddiv>
 8009238:	ec53 2b18 	vmov	r2, r3, d8
 800923c:	f7f7 f82c 	bl	8000298 <__aeabi_dsub>
 8009240:	9d00      	ldr	r5, [sp, #0]
 8009242:	ec41 0b18 	vmov	d8, r0, r1
 8009246:	4639      	mov	r1, r7
 8009248:	4630      	mov	r0, r6
 800924a:	f7f7 fc8d 	bl	8000b68 <__aeabi_d2iz>
 800924e:	900c      	str	r0, [sp, #48]	; 0x30
 8009250:	f7f7 f970 	bl	8000534 <__aeabi_i2d>
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	4630      	mov	r0, r6
 800925a:	4639      	mov	r1, r7
 800925c:	f7f7 f81c 	bl	8000298 <__aeabi_dsub>
 8009260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009262:	3330      	adds	r3, #48	; 0x30
 8009264:	f805 3b01 	strb.w	r3, [r5], #1
 8009268:	ec53 2b18 	vmov	r2, r3, d8
 800926c:	4606      	mov	r6, r0
 800926e:	460f      	mov	r7, r1
 8009270:	f7f7 fc3c 	bl	8000aec <__aeabi_dcmplt>
 8009274:	2800      	cmp	r0, #0
 8009276:	d165      	bne.n	8009344 <_dtoa_r+0x63c>
 8009278:	4632      	mov	r2, r6
 800927a:	463b      	mov	r3, r7
 800927c:	4935      	ldr	r1, [pc, #212]	; (8009354 <_dtoa_r+0x64c>)
 800927e:	2000      	movs	r0, #0
 8009280:	f7f7 f80a 	bl	8000298 <__aeabi_dsub>
 8009284:	ec53 2b18 	vmov	r2, r3, d8
 8009288:	f7f7 fc30 	bl	8000aec <__aeabi_dcmplt>
 800928c:	2800      	cmp	r0, #0
 800928e:	f040 80b9 	bne.w	8009404 <_dtoa_r+0x6fc>
 8009292:	9b02      	ldr	r3, [sp, #8]
 8009294:	429d      	cmp	r5, r3
 8009296:	f43f af75 	beq.w	8009184 <_dtoa_r+0x47c>
 800929a:	4b2f      	ldr	r3, [pc, #188]	; (8009358 <_dtoa_r+0x650>)
 800929c:	ec51 0b18 	vmov	r0, r1, d8
 80092a0:	2200      	movs	r2, #0
 80092a2:	f7f7 f9b1 	bl	8000608 <__aeabi_dmul>
 80092a6:	4b2c      	ldr	r3, [pc, #176]	; (8009358 <_dtoa_r+0x650>)
 80092a8:	ec41 0b18 	vmov	d8, r0, r1
 80092ac:	2200      	movs	r2, #0
 80092ae:	4630      	mov	r0, r6
 80092b0:	4639      	mov	r1, r7
 80092b2:	f7f7 f9a9 	bl	8000608 <__aeabi_dmul>
 80092b6:	4606      	mov	r6, r0
 80092b8:	460f      	mov	r7, r1
 80092ba:	e7c4      	b.n	8009246 <_dtoa_r+0x53e>
 80092bc:	ec51 0b17 	vmov	r0, r1, d7
 80092c0:	f7f7 f9a2 	bl	8000608 <__aeabi_dmul>
 80092c4:	9b02      	ldr	r3, [sp, #8]
 80092c6:	9d00      	ldr	r5, [sp, #0]
 80092c8:	930c      	str	r3, [sp, #48]	; 0x30
 80092ca:	ec41 0b18 	vmov	d8, r0, r1
 80092ce:	4639      	mov	r1, r7
 80092d0:	4630      	mov	r0, r6
 80092d2:	f7f7 fc49 	bl	8000b68 <__aeabi_d2iz>
 80092d6:	9011      	str	r0, [sp, #68]	; 0x44
 80092d8:	f7f7 f92c 	bl	8000534 <__aeabi_i2d>
 80092dc:	4602      	mov	r2, r0
 80092de:	460b      	mov	r3, r1
 80092e0:	4630      	mov	r0, r6
 80092e2:	4639      	mov	r1, r7
 80092e4:	f7f6 ffd8 	bl	8000298 <__aeabi_dsub>
 80092e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092ea:	3330      	adds	r3, #48	; 0x30
 80092ec:	f805 3b01 	strb.w	r3, [r5], #1
 80092f0:	9b02      	ldr	r3, [sp, #8]
 80092f2:	429d      	cmp	r5, r3
 80092f4:	4606      	mov	r6, r0
 80092f6:	460f      	mov	r7, r1
 80092f8:	f04f 0200 	mov.w	r2, #0
 80092fc:	d134      	bne.n	8009368 <_dtoa_r+0x660>
 80092fe:	4b19      	ldr	r3, [pc, #100]	; (8009364 <_dtoa_r+0x65c>)
 8009300:	ec51 0b18 	vmov	r0, r1, d8
 8009304:	f7f6 ffca 	bl	800029c <__adddf3>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	4630      	mov	r0, r6
 800930e:	4639      	mov	r1, r7
 8009310:	f7f7 fc0a 	bl	8000b28 <__aeabi_dcmpgt>
 8009314:	2800      	cmp	r0, #0
 8009316:	d175      	bne.n	8009404 <_dtoa_r+0x6fc>
 8009318:	ec53 2b18 	vmov	r2, r3, d8
 800931c:	4911      	ldr	r1, [pc, #68]	; (8009364 <_dtoa_r+0x65c>)
 800931e:	2000      	movs	r0, #0
 8009320:	f7f6 ffba 	bl	8000298 <__aeabi_dsub>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	4630      	mov	r0, r6
 800932a:	4639      	mov	r1, r7
 800932c:	f7f7 fbde 	bl	8000aec <__aeabi_dcmplt>
 8009330:	2800      	cmp	r0, #0
 8009332:	f43f af27 	beq.w	8009184 <_dtoa_r+0x47c>
 8009336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009338:	1e6b      	subs	r3, r5, #1
 800933a:	930c      	str	r3, [sp, #48]	; 0x30
 800933c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009340:	2b30      	cmp	r3, #48	; 0x30
 8009342:	d0f8      	beq.n	8009336 <_dtoa_r+0x62e>
 8009344:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009348:	e04a      	b.n	80093e0 <_dtoa_r+0x6d8>
 800934a:	bf00      	nop
 800934c:	0800b330 	.word	0x0800b330
 8009350:	0800b308 	.word	0x0800b308
 8009354:	3ff00000 	.word	0x3ff00000
 8009358:	40240000 	.word	0x40240000
 800935c:	401c0000 	.word	0x401c0000
 8009360:	40140000 	.word	0x40140000
 8009364:	3fe00000 	.word	0x3fe00000
 8009368:	4baf      	ldr	r3, [pc, #700]	; (8009628 <_dtoa_r+0x920>)
 800936a:	f7f7 f94d 	bl	8000608 <__aeabi_dmul>
 800936e:	4606      	mov	r6, r0
 8009370:	460f      	mov	r7, r1
 8009372:	e7ac      	b.n	80092ce <_dtoa_r+0x5c6>
 8009374:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009378:	9d00      	ldr	r5, [sp, #0]
 800937a:	4642      	mov	r2, r8
 800937c:	464b      	mov	r3, r9
 800937e:	4630      	mov	r0, r6
 8009380:	4639      	mov	r1, r7
 8009382:	f7f7 fa6b 	bl	800085c <__aeabi_ddiv>
 8009386:	f7f7 fbef 	bl	8000b68 <__aeabi_d2iz>
 800938a:	9002      	str	r0, [sp, #8]
 800938c:	f7f7 f8d2 	bl	8000534 <__aeabi_i2d>
 8009390:	4642      	mov	r2, r8
 8009392:	464b      	mov	r3, r9
 8009394:	f7f7 f938 	bl	8000608 <__aeabi_dmul>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	4630      	mov	r0, r6
 800939e:	4639      	mov	r1, r7
 80093a0:	f7f6 ff7a 	bl	8000298 <__aeabi_dsub>
 80093a4:	9e02      	ldr	r6, [sp, #8]
 80093a6:	9f01      	ldr	r7, [sp, #4]
 80093a8:	3630      	adds	r6, #48	; 0x30
 80093aa:	f805 6b01 	strb.w	r6, [r5], #1
 80093ae:	9e00      	ldr	r6, [sp, #0]
 80093b0:	1bae      	subs	r6, r5, r6
 80093b2:	42b7      	cmp	r7, r6
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	d137      	bne.n	800942a <_dtoa_r+0x722>
 80093ba:	f7f6 ff6f 	bl	800029c <__adddf3>
 80093be:	4642      	mov	r2, r8
 80093c0:	464b      	mov	r3, r9
 80093c2:	4606      	mov	r6, r0
 80093c4:	460f      	mov	r7, r1
 80093c6:	f7f7 fbaf 	bl	8000b28 <__aeabi_dcmpgt>
 80093ca:	b9c8      	cbnz	r0, 8009400 <_dtoa_r+0x6f8>
 80093cc:	4642      	mov	r2, r8
 80093ce:	464b      	mov	r3, r9
 80093d0:	4630      	mov	r0, r6
 80093d2:	4639      	mov	r1, r7
 80093d4:	f7f7 fb80 	bl	8000ad8 <__aeabi_dcmpeq>
 80093d8:	b110      	cbz	r0, 80093e0 <_dtoa_r+0x6d8>
 80093da:	9b02      	ldr	r3, [sp, #8]
 80093dc:	07d9      	lsls	r1, r3, #31
 80093de:	d40f      	bmi.n	8009400 <_dtoa_r+0x6f8>
 80093e0:	4620      	mov	r0, r4
 80093e2:	4659      	mov	r1, fp
 80093e4:	f000 fac8 	bl	8009978 <_Bfree>
 80093e8:	2300      	movs	r3, #0
 80093ea:	702b      	strb	r3, [r5, #0]
 80093ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093ee:	f10a 0001 	add.w	r0, sl, #1
 80093f2:	6018      	str	r0, [r3, #0]
 80093f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f43f acd8 	beq.w	8008dac <_dtoa_r+0xa4>
 80093fc:	601d      	str	r5, [r3, #0]
 80093fe:	e4d5      	b.n	8008dac <_dtoa_r+0xa4>
 8009400:	f8cd a01c 	str.w	sl, [sp, #28]
 8009404:	462b      	mov	r3, r5
 8009406:	461d      	mov	r5, r3
 8009408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800940c:	2a39      	cmp	r2, #57	; 0x39
 800940e:	d108      	bne.n	8009422 <_dtoa_r+0x71a>
 8009410:	9a00      	ldr	r2, [sp, #0]
 8009412:	429a      	cmp	r2, r3
 8009414:	d1f7      	bne.n	8009406 <_dtoa_r+0x6fe>
 8009416:	9a07      	ldr	r2, [sp, #28]
 8009418:	9900      	ldr	r1, [sp, #0]
 800941a:	3201      	adds	r2, #1
 800941c:	9207      	str	r2, [sp, #28]
 800941e:	2230      	movs	r2, #48	; 0x30
 8009420:	700a      	strb	r2, [r1, #0]
 8009422:	781a      	ldrb	r2, [r3, #0]
 8009424:	3201      	adds	r2, #1
 8009426:	701a      	strb	r2, [r3, #0]
 8009428:	e78c      	b.n	8009344 <_dtoa_r+0x63c>
 800942a:	4b7f      	ldr	r3, [pc, #508]	; (8009628 <_dtoa_r+0x920>)
 800942c:	2200      	movs	r2, #0
 800942e:	f7f7 f8eb 	bl	8000608 <__aeabi_dmul>
 8009432:	2200      	movs	r2, #0
 8009434:	2300      	movs	r3, #0
 8009436:	4606      	mov	r6, r0
 8009438:	460f      	mov	r7, r1
 800943a:	f7f7 fb4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800943e:	2800      	cmp	r0, #0
 8009440:	d09b      	beq.n	800937a <_dtoa_r+0x672>
 8009442:	e7cd      	b.n	80093e0 <_dtoa_r+0x6d8>
 8009444:	9a08      	ldr	r2, [sp, #32]
 8009446:	2a00      	cmp	r2, #0
 8009448:	f000 80c4 	beq.w	80095d4 <_dtoa_r+0x8cc>
 800944c:	9a05      	ldr	r2, [sp, #20]
 800944e:	2a01      	cmp	r2, #1
 8009450:	f300 80a8 	bgt.w	80095a4 <_dtoa_r+0x89c>
 8009454:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009456:	2a00      	cmp	r2, #0
 8009458:	f000 80a0 	beq.w	800959c <_dtoa_r+0x894>
 800945c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009460:	9e06      	ldr	r6, [sp, #24]
 8009462:	4645      	mov	r5, r8
 8009464:	9a04      	ldr	r2, [sp, #16]
 8009466:	2101      	movs	r1, #1
 8009468:	441a      	add	r2, r3
 800946a:	4620      	mov	r0, r4
 800946c:	4498      	add	r8, r3
 800946e:	9204      	str	r2, [sp, #16]
 8009470:	f000 fb3e 	bl	8009af0 <__i2b>
 8009474:	4607      	mov	r7, r0
 8009476:	2d00      	cmp	r5, #0
 8009478:	dd0b      	ble.n	8009492 <_dtoa_r+0x78a>
 800947a:	9b04      	ldr	r3, [sp, #16]
 800947c:	2b00      	cmp	r3, #0
 800947e:	dd08      	ble.n	8009492 <_dtoa_r+0x78a>
 8009480:	42ab      	cmp	r3, r5
 8009482:	9a04      	ldr	r2, [sp, #16]
 8009484:	bfa8      	it	ge
 8009486:	462b      	movge	r3, r5
 8009488:	eba8 0803 	sub.w	r8, r8, r3
 800948c:	1aed      	subs	r5, r5, r3
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	9304      	str	r3, [sp, #16]
 8009492:	9b06      	ldr	r3, [sp, #24]
 8009494:	b1fb      	cbz	r3, 80094d6 <_dtoa_r+0x7ce>
 8009496:	9b08      	ldr	r3, [sp, #32]
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 809f 	beq.w	80095dc <_dtoa_r+0x8d4>
 800949e:	2e00      	cmp	r6, #0
 80094a0:	dd11      	ble.n	80094c6 <_dtoa_r+0x7be>
 80094a2:	4639      	mov	r1, r7
 80094a4:	4632      	mov	r2, r6
 80094a6:	4620      	mov	r0, r4
 80094a8:	f000 fbde 	bl	8009c68 <__pow5mult>
 80094ac:	465a      	mov	r2, fp
 80094ae:	4601      	mov	r1, r0
 80094b0:	4607      	mov	r7, r0
 80094b2:	4620      	mov	r0, r4
 80094b4:	f000 fb32 	bl	8009b1c <__multiply>
 80094b8:	4659      	mov	r1, fp
 80094ba:	9007      	str	r0, [sp, #28]
 80094bc:	4620      	mov	r0, r4
 80094be:	f000 fa5b 	bl	8009978 <_Bfree>
 80094c2:	9b07      	ldr	r3, [sp, #28]
 80094c4:	469b      	mov	fp, r3
 80094c6:	9b06      	ldr	r3, [sp, #24]
 80094c8:	1b9a      	subs	r2, r3, r6
 80094ca:	d004      	beq.n	80094d6 <_dtoa_r+0x7ce>
 80094cc:	4659      	mov	r1, fp
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 fbca 	bl	8009c68 <__pow5mult>
 80094d4:	4683      	mov	fp, r0
 80094d6:	2101      	movs	r1, #1
 80094d8:	4620      	mov	r0, r4
 80094da:	f000 fb09 	bl	8009af0 <__i2b>
 80094de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	4606      	mov	r6, r0
 80094e4:	dd7c      	ble.n	80095e0 <_dtoa_r+0x8d8>
 80094e6:	461a      	mov	r2, r3
 80094e8:	4601      	mov	r1, r0
 80094ea:	4620      	mov	r0, r4
 80094ec:	f000 fbbc 	bl	8009c68 <__pow5mult>
 80094f0:	9b05      	ldr	r3, [sp, #20]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	4606      	mov	r6, r0
 80094f6:	dd76      	ble.n	80095e6 <_dtoa_r+0x8de>
 80094f8:	2300      	movs	r3, #0
 80094fa:	9306      	str	r3, [sp, #24]
 80094fc:	6933      	ldr	r3, [r6, #16]
 80094fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009502:	6918      	ldr	r0, [r3, #16]
 8009504:	f000 faa4 	bl	8009a50 <__hi0bits>
 8009508:	f1c0 0020 	rsb	r0, r0, #32
 800950c:	9b04      	ldr	r3, [sp, #16]
 800950e:	4418      	add	r0, r3
 8009510:	f010 001f 	ands.w	r0, r0, #31
 8009514:	f000 8086 	beq.w	8009624 <_dtoa_r+0x91c>
 8009518:	f1c0 0320 	rsb	r3, r0, #32
 800951c:	2b04      	cmp	r3, #4
 800951e:	dd7f      	ble.n	8009620 <_dtoa_r+0x918>
 8009520:	f1c0 001c 	rsb	r0, r0, #28
 8009524:	9b04      	ldr	r3, [sp, #16]
 8009526:	4403      	add	r3, r0
 8009528:	4480      	add	r8, r0
 800952a:	4405      	add	r5, r0
 800952c:	9304      	str	r3, [sp, #16]
 800952e:	f1b8 0f00 	cmp.w	r8, #0
 8009532:	dd05      	ble.n	8009540 <_dtoa_r+0x838>
 8009534:	4659      	mov	r1, fp
 8009536:	4642      	mov	r2, r8
 8009538:	4620      	mov	r0, r4
 800953a:	f000 fbef 	bl	8009d1c <__lshift>
 800953e:	4683      	mov	fp, r0
 8009540:	9b04      	ldr	r3, [sp, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	dd05      	ble.n	8009552 <_dtoa_r+0x84a>
 8009546:	4631      	mov	r1, r6
 8009548:	461a      	mov	r2, r3
 800954a:	4620      	mov	r0, r4
 800954c:	f000 fbe6 	bl	8009d1c <__lshift>
 8009550:	4606      	mov	r6, r0
 8009552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009554:	2b00      	cmp	r3, #0
 8009556:	d069      	beq.n	800962c <_dtoa_r+0x924>
 8009558:	4631      	mov	r1, r6
 800955a:	4658      	mov	r0, fp
 800955c:	f000 fc4a 	bl	8009df4 <__mcmp>
 8009560:	2800      	cmp	r0, #0
 8009562:	da63      	bge.n	800962c <_dtoa_r+0x924>
 8009564:	2300      	movs	r3, #0
 8009566:	4659      	mov	r1, fp
 8009568:	220a      	movs	r2, #10
 800956a:	4620      	mov	r0, r4
 800956c:	f000 fa26 	bl	80099bc <__multadd>
 8009570:	9b08      	ldr	r3, [sp, #32]
 8009572:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009576:	4683      	mov	fp, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 818f 	beq.w	800989c <_dtoa_r+0xb94>
 800957e:	4639      	mov	r1, r7
 8009580:	2300      	movs	r3, #0
 8009582:	220a      	movs	r2, #10
 8009584:	4620      	mov	r0, r4
 8009586:	f000 fa19 	bl	80099bc <__multadd>
 800958a:	f1b9 0f00 	cmp.w	r9, #0
 800958e:	4607      	mov	r7, r0
 8009590:	f300 808e 	bgt.w	80096b0 <_dtoa_r+0x9a8>
 8009594:	9b05      	ldr	r3, [sp, #20]
 8009596:	2b02      	cmp	r3, #2
 8009598:	dc50      	bgt.n	800963c <_dtoa_r+0x934>
 800959a:	e089      	b.n	80096b0 <_dtoa_r+0x9a8>
 800959c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800959e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80095a2:	e75d      	b.n	8009460 <_dtoa_r+0x758>
 80095a4:	9b01      	ldr	r3, [sp, #4]
 80095a6:	1e5e      	subs	r6, r3, #1
 80095a8:	9b06      	ldr	r3, [sp, #24]
 80095aa:	42b3      	cmp	r3, r6
 80095ac:	bfbf      	itttt	lt
 80095ae:	9b06      	ldrlt	r3, [sp, #24]
 80095b0:	9606      	strlt	r6, [sp, #24]
 80095b2:	1af2      	sublt	r2, r6, r3
 80095b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80095b6:	bfb6      	itet	lt
 80095b8:	189b      	addlt	r3, r3, r2
 80095ba:	1b9e      	subge	r6, r3, r6
 80095bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80095be:	9b01      	ldr	r3, [sp, #4]
 80095c0:	bfb8      	it	lt
 80095c2:	2600      	movlt	r6, #0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	bfb5      	itete	lt
 80095c8:	eba8 0503 	sublt.w	r5, r8, r3
 80095cc:	9b01      	ldrge	r3, [sp, #4]
 80095ce:	2300      	movlt	r3, #0
 80095d0:	4645      	movge	r5, r8
 80095d2:	e747      	b.n	8009464 <_dtoa_r+0x75c>
 80095d4:	9e06      	ldr	r6, [sp, #24]
 80095d6:	9f08      	ldr	r7, [sp, #32]
 80095d8:	4645      	mov	r5, r8
 80095da:	e74c      	b.n	8009476 <_dtoa_r+0x76e>
 80095dc:	9a06      	ldr	r2, [sp, #24]
 80095de:	e775      	b.n	80094cc <_dtoa_r+0x7c4>
 80095e0:	9b05      	ldr	r3, [sp, #20]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	dc18      	bgt.n	8009618 <_dtoa_r+0x910>
 80095e6:	9b02      	ldr	r3, [sp, #8]
 80095e8:	b9b3      	cbnz	r3, 8009618 <_dtoa_r+0x910>
 80095ea:	9b03      	ldr	r3, [sp, #12]
 80095ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095f0:	b9a3      	cbnz	r3, 800961c <_dtoa_r+0x914>
 80095f2:	9b03      	ldr	r3, [sp, #12]
 80095f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095f8:	0d1b      	lsrs	r3, r3, #20
 80095fa:	051b      	lsls	r3, r3, #20
 80095fc:	b12b      	cbz	r3, 800960a <_dtoa_r+0x902>
 80095fe:	9b04      	ldr	r3, [sp, #16]
 8009600:	3301      	adds	r3, #1
 8009602:	9304      	str	r3, [sp, #16]
 8009604:	f108 0801 	add.w	r8, r8, #1
 8009608:	2301      	movs	r3, #1
 800960a:	9306      	str	r3, [sp, #24]
 800960c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800960e:	2b00      	cmp	r3, #0
 8009610:	f47f af74 	bne.w	80094fc <_dtoa_r+0x7f4>
 8009614:	2001      	movs	r0, #1
 8009616:	e779      	b.n	800950c <_dtoa_r+0x804>
 8009618:	2300      	movs	r3, #0
 800961a:	e7f6      	b.n	800960a <_dtoa_r+0x902>
 800961c:	9b02      	ldr	r3, [sp, #8]
 800961e:	e7f4      	b.n	800960a <_dtoa_r+0x902>
 8009620:	d085      	beq.n	800952e <_dtoa_r+0x826>
 8009622:	4618      	mov	r0, r3
 8009624:	301c      	adds	r0, #28
 8009626:	e77d      	b.n	8009524 <_dtoa_r+0x81c>
 8009628:	40240000 	.word	0x40240000
 800962c:	9b01      	ldr	r3, [sp, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	dc38      	bgt.n	80096a4 <_dtoa_r+0x99c>
 8009632:	9b05      	ldr	r3, [sp, #20]
 8009634:	2b02      	cmp	r3, #2
 8009636:	dd35      	ble.n	80096a4 <_dtoa_r+0x99c>
 8009638:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800963c:	f1b9 0f00 	cmp.w	r9, #0
 8009640:	d10d      	bne.n	800965e <_dtoa_r+0x956>
 8009642:	4631      	mov	r1, r6
 8009644:	464b      	mov	r3, r9
 8009646:	2205      	movs	r2, #5
 8009648:	4620      	mov	r0, r4
 800964a:	f000 f9b7 	bl	80099bc <__multadd>
 800964e:	4601      	mov	r1, r0
 8009650:	4606      	mov	r6, r0
 8009652:	4658      	mov	r0, fp
 8009654:	f000 fbce 	bl	8009df4 <__mcmp>
 8009658:	2800      	cmp	r0, #0
 800965a:	f73f adbd 	bgt.w	80091d8 <_dtoa_r+0x4d0>
 800965e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009660:	9d00      	ldr	r5, [sp, #0]
 8009662:	ea6f 0a03 	mvn.w	sl, r3
 8009666:	f04f 0800 	mov.w	r8, #0
 800966a:	4631      	mov	r1, r6
 800966c:	4620      	mov	r0, r4
 800966e:	f000 f983 	bl	8009978 <_Bfree>
 8009672:	2f00      	cmp	r7, #0
 8009674:	f43f aeb4 	beq.w	80093e0 <_dtoa_r+0x6d8>
 8009678:	f1b8 0f00 	cmp.w	r8, #0
 800967c:	d005      	beq.n	800968a <_dtoa_r+0x982>
 800967e:	45b8      	cmp	r8, r7
 8009680:	d003      	beq.n	800968a <_dtoa_r+0x982>
 8009682:	4641      	mov	r1, r8
 8009684:	4620      	mov	r0, r4
 8009686:	f000 f977 	bl	8009978 <_Bfree>
 800968a:	4639      	mov	r1, r7
 800968c:	4620      	mov	r0, r4
 800968e:	f000 f973 	bl	8009978 <_Bfree>
 8009692:	e6a5      	b.n	80093e0 <_dtoa_r+0x6d8>
 8009694:	2600      	movs	r6, #0
 8009696:	4637      	mov	r7, r6
 8009698:	e7e1      	b.n	800965e <_dtoa_r+0x956>
 800969a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800969c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80096a0:	4637      	mov	r7, r6
 80096a2:	e599      	b.n	80091d8 <_dtoa_r+0x4d0>
 80096a4:	9b08      	ldr	r3, [sp, #32]
 80096a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 80fd 	beq.w	80098aa <_dtoa_r+0xba2>
 80096b0:	2d00      	cmp	r5, #0
 80096b2:	dd05      	ble.n	80096c0 <_dtoa_r+0x9b8>
 80096b4:	4639      	mov	r1, r7
 80096b6:	462a      	mov	r2, r5
 80096b8:	4620      	mov	r0, r4
 80096ba:	f000 fb2f 	bl	8009d1c <__lshift>
 80096be:	4607      	mov	r7, r0
 80096c0:	9b06      	ldr	r3, [sp, #24]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d05c      	beq.n	8009780 <_dtoa_r+0xa78>
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	4620      	mov	r0, r4
 80096ca:	f000 f915 	bl	80098f8 <_Balloc>
 80096ce:	4605      	mov	r5, r0
 80096d0:	b928      	cbnz	r0, 80096de <_dtoa_r+0x9d6>
 80096d2:	4b80      	ldr	r3, [pc, #512]	; (80098d4 <_dtoa_r+0xbcc>)
 80096d4:	4602      	mov	r2, r0
 80096d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80096da:	f7ff bb2e 	b.w	8008d3a <_dtoa_r+0x32>
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	3202      	adds	r2, #2
 80096e2:	0092      	lsls	r2, r2, #2
 80096e4:	f107 010c 	add.w	r1, r7, #12
 80096e8:	300c      	adds	r0, #12
 80096ea:	f7fe fde1 	bl	80082b0 <memcpy>
 80096ee:	2201      	movs	r2, #1
 80096f0:	4629      	mov	r1, r5
 80096f2:	4620      	mov	r0, r4
 80096f4:	f000 fb12 	bl	8009d1c <__lshift>
 80096f8:	9b00      	ldr	r3, [sp, #0]
 80096fa:	3301      	adds	r3, #1
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	9b00      	ldr	r3, [sp, #0]
 8009700:	444b      	add	r3, r9
 8009702:	9307      	str	r3, [sp, #28]
 8009704:	9b02      	ldr	r3, [sp, #8]
 8009706:	f003 0301 	and.w	r3, r3, #1
 800970a:	46b8      	mov	r8, r7
 800970c:	9306      	str	r3, [sp, #24]
 800970e:	4607      	mov	r7, r0
 8009710:	9b01      	ldr	r3, [sp, #4]
 8009712:	4631      	mov	r1, r6
 8009714:	3b01      	subs	r3, #1
 8009716:	4658      	mov	r0, fp
 8009718:	9302      	str	r3, [sp, #8]
 800971a:	f7ff fa69 	bl	8008bf0 <quorem>
 800971e:	4603      	mov	r3, r0
 8009720:	3330      	adds	r3, #48	; 0x30
 8009722:	9004      	str	r0, [sp, #16]
 8009724:	4641      	mov	r1, r8
 8009726:	4658      	mov	r0, fp
 8009728:	9308      	str	r3, [sp, #32]
 800972a:	f000 fb63 	bl	8009df4 <__mcmp>
 800972e:	463a      	mov	r2, r7
 8009730:	4681      	mov	r9, r0
 8009732:	4631      	mov	r1, r6
 8009734:	4620      	mov	r0, r4
 8009736:	f000 fb79 	bl	8009e2c <__mdiff>
 800973a:	68c2      	ldr	r2, [r0, #12]
 800973c:	9b08      	ldr	r3, [sp, #32]
 800973e:	4605      	mov	r5, r0
 8009740:	bb02      	cbnz	r2, 8009784 <_dtoa_r+0xa7c>
 8009742:	4601      	mov	r1, r0
 8009744:	4658      	mov	r0, fp
 8009746:	f000 fb55 	bl	8009df4 <__mcmp>
 800974a:	9b08      	ldr	r3, [sp, #32]
 800974c:	4602      	mov	r2, r0
 800974e:	4629      	mov	r1, r5
 8009750:	4620      	mov	r0, r4
 8009752:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009756:	f000 f90f 	bl	8009978 <_Bfree>
 800975a:	9b05      	ldr	r3, [sp, #20]
 800975c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800975e:	9d01      	ldr	r5, [sp, #4]
 8009760:	ea43 0102 	orr.w	r1, r3, r2
 8009764:	9b06      	ldr	r3, [sp, #24]
 8009766:	430b      	orrs	r3, r1
 8009768:	9b08      	ldr	r3, [sp, #32]
 800976a:	d10d      	bne.n	8009788 <_dtoa_r+0xa80>
 800976c:	2b39      	cmp	r3, #57	; 0x39
 800976e:	d029      	beq.n	80097c4 <_dtoa_r+0xabc>
 8009770:	f1b9 0f00 	cmp.w	r9, #0
 8009774:	dd01      	ble.n	800977a <_dtoa_r+0xa72>
 8009776:	9b04      	ldr	r3, [sp, #16]
 8009778:	3331      	adds	r3, #49	; 0x31
 800977a:	9a02      	ldr	r2, [sp, #8]
 800977c:	7013      	strb	r3, [r2, #0]
 800977e:	e774      	b.n	800966a <_dtoa_r+0x962>
 8009780:	4638      	mov	r0, r7
 8009782:	e7b9      	b.n	80096f8 <_dtoa_r+0x9f0>
 8009784:	2201      	movs	r2, #1
 8009786:	e7e2      	b.n	800974e <_dtoa_r+0xa46>
 8009788:	f1b9 0f00 	cmp.w	r9, #0
 800978c:	db06      	blt.n	800979c <_dtoa_r+0xa94>
 800978e:	9905      	ldr	r1, [sp, #20]
 8009790:	ea41 0909 	orr.w	r9, r1, r9
 8009794:	9906      	ldr	r1, [sp, #24]
 8009796:	ea59 0101 	orrs.w	r1, r9, r1
 800979a:	d120      	bne.n	80097de <_dtoa_r+0xad6>
 800979c:	2a00      	cmp	r2, #0
 800979e:	ddec      	ble.n	800977a <_dtoa_r+0xa72>
 80097a0:	4659      	mov	r1, fp
 80097a2:	2201      	movs	r2, #1
 80097a4:	4620      	mov	r0, r4
 80097a6:	9301      	str	r3, [sp, #4]
 80097a8:	f000 fab8 	bl	8009d1c <__lshift>
 80097ac:	4631      	mov	r1, r6
 80097ae:	4683      	mov	fp, r0
 80097b0:	f000 fb20 	bl	8009df4 <__mcmp>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	9b01      	ldr	r3, [sp, #4]
 80097b8:	dc02      	bgt.n	80097c0 <_dtoa_r+0xab8>
 80097ba:	d1de      	bne.n	800977a <_dtoa_r+0xa72>
 80097bc:	07da      	lsls	r2, r3, #31
 80097be:	d5dc      	bpl.n	800977a <_dtoa_r+0xa72>
 80097c0:	2b39      	cmp	r3, #57	; 0x39
 80097c2:	d1d8      	bne.n	8009776 <_dtoa_r+0xa6e>
 80097c4:	9a02      	ldr	r2, [sp, #8]
 80097c6:	2339      	movs	r3, #57	; 0x39
 80097c8:	7013      	strb	r3, [r2, #0]
 80097ca:	462b      	mov	r3, r5
 80097cc:	461d      	mov	r5, r3
 80097ce:	3b01      	subs	r3, #1
 80097d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80097d4:	2a39      	cmp	r2, #57	; 0x39
 80097d6:	d050      	beq.n	800987a <_dtoa_r+0xb72>
 80097d8:	3201      	adds	r2, #1
 80097da:	701a      	strb	r2, [r3, #0]
 80097dc:	e745      	b.n	800966a <_dtoa_r+0x962>
 80097de:	2a00      	cmp	r2, #0
 80097e0:	dd03      	ble.n	80097ea <_dtoa_r+0xae2>
 80097e2:	2b39      	cmp	r3, #57	; 0x39
 80097e4:	d0ee      	beq.n	80097c4 <_dtoa_r+0xabc>
 80097e6:	3301      	adds	r3, #1
 80097e8:	e7c7      	b.n	800977a <_dtoa_r+0xa72>
 80097ea:	9a01      	ldr	r2, [sp, #4]
 80097ec:	9907      	ldr	r1, [sp, #28]
 80097ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80097f2:	428a      	cmp	r2, r1
 80097f4:	d02a      	beq.n	800984c <_dtoa_r+0xb44>
 80097f6:	4659      	mov	r1, fp
 80097f8:	2300      	movs	r3, #0
 80097fa:	220a      	movs	r2, #10
 80097fc:	4620      	mov	r0, r4
 80097fe:	f000 f8dd 	bl	80099bc <__multadd>
 8009802:	45b8      	cmp	r8, r7
 8009804:	4683      	mov	fp, r0
 8009806:	f04f 0300 	mov.w	r3, #0
 800980a:	f04f 020a 	mov.w	r2, #10
 800980e:	4641      	mov	r1, r8
 8009810:	4620      	mov	r0, r4
 8009812:	d107      	bne.n	8009824 <_dtoa_r+0xb1c>
 8009814:	f000 f8d2 	bl	80099bc <__multadd>
 8009818:	4680      	mov	r8, r0
 800981a:	4607      	mov	r7, r0
 800981c:	9b01      	ldr	r3, [sp, #4]
 800981e:	3301      	adds	r3, #1
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	e775      	b.n	8009710 <_dtoa_r+0xa08>
 8009824:	f000 f8ca 	bl	80099bc <__multadd>
 8009828:	4639      	mov	r1, r7
 800982a:	4680      	mov	r8, r0
 800982c:	2300      	movs	r3, #0
 800982e:	220a      	movs	r2, #10
 8009830:	4620      	mov	r0, r4
 8009832:	f000 f8c3 	bl	80099bc <__multadd>
 8009836:	4607      	mov	r7, r0
 8009838:	e7f0      	b.n	800981c <_dtoa_r+0xb14>
 800983a:	f1b9 0f00 	cmp.w	r9, #0
 800983e:	9a00      	ldr	r2, [sp, #0]
 8009840:	bfcc      	ite	gt
 8009842:	464d      	movgt	r5, r9
 8009844:	2501      	movle	r5, #1
 8009846:	4415      	add	r5, r2
 8009848:	f04f 0800 	mov.w	r8, #0
 800984c:	4659      	mov	r1, fp
 800984e:	2201      	movs	r2, #1
 8009850:	4620      	mov	r0, r4
 8009852:	9301      	str	r3, [sp, #4]
 8009854:	f000 fa62 	bl	8009d1c <__lshift>
 8009858:	4631      	mov	r1, r6
 800985a:	4683      	mov	fp, r0
 800985c:	f000 faca 	bl	8009df4 <__mcmp>
 8009860:	2800      	cmp	r0, #0
 8009862:	dcb2      	bgt.n	80097ca <_dtoa_r+0xac2>
 8009864:	d102      	bne.n	800986c <_dtoa_r+0xb64>
 8009866:	9b01      	ldr	r3, [sp, #4]
 8009868:	07db      	lsls	r3, r3, #31
 800986a:	d4ae      	bmi.n	80097ca <_dtoa_r+0xac2>
 800986c:	462b      	mov	r3, r5
 800986e:	461d      	mov	r5, r3
 8009870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009874:	2a30      	cmp	r2, #48	; 0x30
 8009876:	d0fa      	beq.n	800986e <_dtoa_r+0xb66>
 8009878:	e6f7      	b.n	800966a <_dtoa_r+0x962>
 800987a:	9a00      	ldr	r2, [sp, #0]
 800987c:	429a      	cmp	r2, r3
 800987e:	d1a5      	bne.n	80097cc <_dtoa_r+0xac4>
 8009880:	f10a 0a01 	add.w	sl, sl, #1
 8009884:	2331      	movs	r3, #49	; 0x31
 8009886:	e779      	b.n	800977c <_dtoa_r+0xa74>
 8009888:	4b13      	ldr	r3, [pc, #76]	; (80098d8 <_dtoa_r+0xbd0>)
 800988a:	f7ff baaf 	b.w	8008dec <_dtoa_r+0xe4>
 800988e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009890:	2b00      	cmp	r3, #0
 8009892:	f47f aa86 	bne.w	8008da2 <_dtoa_r+0x9a>
 8009896:	4b11      	ldr	r3, [pc, #68]	; (80098dc <_dtoa_r+0xbd4>)
 8009898:	f7ff baa8 	b.w	8008dec <_dtoa_r+0xe4>
 800989c:	f1b9 0f00 	cmp.w	r9, #0
 80098a0:	dc03      	bgt.n	80098aa <_dtoa_r+0xba2>
 80098a2:	9b05      	ldr	r3, [sp, #20]
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	f73f aec9 	bgt.w	800963c <_dtoa_r+0x934>
 80098aa:	9d00      	ldr	r5, [sp, #0]
 80098ac:	4631      	mov	r1, r6
 80098ae:	4658      	mov	r0, fp
 80098b0:	f7ff f99e 	bl	8008bf0 <quorem>
 80098b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80098b8:	f805 3b01 	strb.w	r3, [r5], #1
 80098bc:	9a00      	ldr	r2, [sp, #0]
 80098be:	1aaa      	subs	r2, r5, r2
 80098c0:	4591      	cmp	r9, r2
 80098c2:	ddba      	ble.n	800983a <_dtoa_r+0xb32>
 80098c4:	4659      	mov	r1, fp
 80098c6:	2300      	movs	r3, #0
 80098c8:	220a      	movs	r2, #10
 80098ca:	4620      	mov	r0, r4
 80098cc:	f000 f876 	bl	80099bc <__multadd>
 80098d0:	4683      	mov	fp, r0
 80098d2:	e7eb      	b.n	80098ac <_dtoa_r+0xba4>
 80098d4:	0800b293 	.word	0x0800b293
 80098d8:	0800b1ec 	.word	0x0800b1ec
 80098dc:	0800b210 	.word	0x0800b210

080098e0 <_localeconv_r>:
 80098e0:	4800      	ldr	r0, [pc, #0]	; (80098e4 <_localeconv_r+0x4>)
 80098e2:	4770      	bx	lr
 80098e4:	20000168 	.word	0x20000168

080098e8 <malloc>:
 80098e8:	4b02      	ldr	r3, [pc, #8]	; (80098f4 <malloc+0xc>)
 80098ea:	4601      	mov	r1, r0
 80098ec:	6818      	ldr	r0, [r3, #0]
 80098ee:	f000 bbe1 	b.w	800a0b4 <_malloc_r>
 80098f2:	bf00      	nop
 80098f4:	20000014 	.word	0x20000014

080098f8 <_Balloc>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098fc:	4604      	mov	r4, r0
 80098fe:	460d      	mov	r5, r1
 8009900:	b976      	cbnz	r6, 8009920 <_Balloc+0x28>
 8009902:	2010      	movs	r0, #16
 8009904:	f7ff fff0 	bl	80098e8 <malloc>
 8009908:	4602      	mov	r2, r0
 800990a:	6260      	str	r0, [r4, #36]	; 0x24
 800990c:	b920      	cbnz	r0, 8009918 <_Balloc+0x20>
 800990e:	4b18      	ldr	r3, [pc, #96]	; (8009970 <_Balloc+0x78>)
 8009910:	4818      	ldr	r0, [pc, #96]	; (8009974 <_Balloc+0x7c>)
 8009912:	2166      	movs	r1, #102	; 0x66
 8009914:	f000 fd94 	bl	800a440 <__assert_func>
 8009918:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800991c:	6006      	str	r6, [r0, #0]
 800991e:	60c6      	str	r6, [r0, #12]
 8009920:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009922:	68f3      	ldr	r3, [r6, #12]
 8009924:	b183      	cbz	r3, 8009948 <_Balloc+0x50>
 8009926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800992e:	b9b8      	cbnz	r0, 8009960 <_Balloc+0x68>
 8009930:	2101      	movs	r1, #1
 8009932:	fa01 f605 	lsl.w	r6, r1, r5
 8009936:	1d72      	adds	r2, r6, #5
 8009938:	0092      	lsls	r2, r2, #2
 800993a:	4620      	mov	r0, r4
 800993c:	f000 fb5a 	bl	8009ff4 <_calloc_r>
 8009940:	b160      	cbz	r0, 800995c <_Balloc+0x64>
 8009942:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009946:	e00e      	b.n	8009966 <_Balloc+0x6e>
 8009948:	2221      	movs	r2, #33	; 0x21
 800994a:	2104      	movs	r1, #4
 800994c:	4620      	mov	r0, r4
 800994e:	f000 fb51 	bl	8009ff4 <_calloc_r>
 8009952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009954:	60f0      	str	r0, [r6, #12]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1e4      	bne.n	8009926 <_Balloc+0x2e>
 800995c:	2000      	movs	r0, #0
 800995e:	bd70      	pop	{r4, r5, r6, pc}
 8009960:	6802      	ldr	r2, [r0, #0]
 8009962:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009966:	2300      	movs	r3, #0
 8009968:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800996c:	e7f7      	b.n	800995e <_Balloc+0x66>
 800996e:	bf00      	nop
 8009970:	0800b21d 	.word	0x0800b21d
 8009974:	0800b2a4 	.word	0x0800b2a4

08009978 <_Bfree>:
 8009978:	b570      	push	{r4, r5, r6, lr}
 800997a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800997c:	4605      	mov	r5, r0
 800997e:	460c      	mov	r4, r1
 8009980:	b976      	cbnz	r6, 80099a0 <_Bfree+0x28>
 8009982:	2010      	movs	r0, #16
 8009984:	f7ff ffb0 	bl	80098e8 <malloc>
 8009988:	4602      	mov	r2, r0
 800998a:	6268      	str	r0, [r5, #36]	; 0x24
 800998c:	b920      	cbnz	r0, 8009998 <_Bfree+0x20>
 800998e:	4b09      	ldr	r3, [pc, #36]	; (80099b4 <_Bfree+0x3c>)
 8009990:	4809      	ldr	r0, [pc, #36]	; (80099b8 <_Bfree+0x40>)
 8009992:	218a      	movs	r1, #138	; 0x8a
 8009994:	f000 fd54 	bl	800a440 <__assert_func>
 8009998:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800999c:	6006      	str	r6, [r0, #0]
 800999e:	60c6      	str	r6, [r0, #12]
 80099a0:	b13c      	cbz	r4, 80099b2 <_Bfree+0x3a>
 80099a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80099a4:	6862      	ldr	r2, [r4, #4]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099ac:	6021      	str	r1, [r4, #0]
 80099ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099b2:	bd70      	pop	{r4, r5, r6, pc}
 80099b4:	0800b21d 	.word	0x0800b21d
 80099b8:	0800b2a4 	.word	0x0800b2a4

080099bc <__multadd>:
 80099bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c0:	690e      	ldr	r6, [r1, #16]
 80099c2:	4607      	mov	r7, r0
 80099c4:	4698      	mov	r8, r3
 80099c6:	460c      	mov	r4, r1
 80099c8:	f101 0014 	add.w	r0, r1, #20
 80099cc:	2300      	movs	r3, #0
 80099ce:	6805      	ldr	r5, [r0, #0]
 80099d0:	b2a9      	uxth	r1, r5
 80099d2:	fb02 8101 	mla	r1, r2, r1, r8
 80099d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80099da:	0c2d      	lsrs	r5, r5, #16
 80099dc:	fb02 c505 	mla	r5, r2, r5, ip
 80099e0:	b289      	uxth	r1, r1
 80099e2:	3301      	adds	r3, #1
 80099e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80099e8:	429e      	cmp	r6, r3
 80099ea:	f840 1b04 	str.w	r1, [r0], #4
 80099ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80099f2:	dcec      	bgt.n	80099ce <__multadd+0x12>
 80099f4:	f1b8 0f00 	cmp.w	r8, #0
 80099f8:	d022      	beq.n	8009a40 <__multadd+0x84>
 80099fa:	68a3      	ldr	r3, [r4, #8]
 80099fc:	42b3      	cmp	r3, r6
 80099fe:	dc19      	bgt.n	8009a34 <__multadd+0x78>
 8009a00:	6861      	ldr	r1, [r4, #4]
 8009a02:	4638      	mov	r0, r7
 8009a04:	3101      	adds	r1, #1
 8009a06:	f7ff ff77 	bl	80098f8 <_Balloc>
 8009a0a:	4605      	mov	r5, r0
 8009a0c:	b928      	cbnz	r0, 8009a1a <__multadd+0x5e>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	4b0d      	ldr	r3, [pc, #52]	; (8009a48 <__multadd+0x8c>)
 8009a12:	480e      	ldr	r0, [pc, #56]	; (8009a4c <__multadd+0x90>)
 8009a14:	21b5      	movs	r1, #181	; 0xb5
 8009a16:	f000 fd13 	bl	800a440 <__assert_func>
 8009a1a:	6922      	ldr	r2, [r4, #16]
 8009a1c:	3202      	adds	r2, #2
 8009a1e:	f104 010c 	add.w	r1, r4, #12
 8009a22:	0092      	lsls	r2, r2, #2
 8009a24:	300c      	adds	r0, #12
 8009a26:	f7fe fc43 	bl	80082b0 <memcpy>
 8009a2a:	4621      	mov	r1, r4
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	f7ff ffa3 	bl	8009978 <_Bfree>
 8009a32:	462c      	mov	r4, r5
 8009a34:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009a38:	3601      	adds	r6, #1
 8009a3a:	f8c3 8014 	str.w	r8, [r3, #20]
 8009a3e:	6126      	str	r6, [r4, #16]
 8009a40:	4620      	mov	r0, r4
 8009a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a46:	bf00      	nop
 8009a48:	0800b293 	.word	0x0800b293
 8009a4c:	0800b2a4 	.word	0x0800b2a4

08009a50 <__hi0bits>:
 8009a50:	0c03      	lsrs	r3, r0, #16
 8009a52:	041b      	lsls	r3, r3, #16
 8009a54:	b9d3      	cbnz	r3, 8009a8c <__hi0bits+0x3c>
 8009a56:	0400      	lsls	r0, r0, #16
 8009a58:	2310      	movs	r3, #16
 8009a5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a5e:	bf04      	itt	eq
 8009a60:	0200      	lsleq	r0, r0, #8
 8009a62:	3308      	addeq	r3, #8
 8009a64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a68:	bf04      	itt	eq
 8009a6a:	0100      	lsleq	r0, r0, #4
 8009a6c:	3304      	addeq	r3, #4
 8009a6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a72:	bf04      	itt	eq
 8009a74:	0080      	lsleq	r0, r0, #2
 8009a76:	3302      	addeq	r3, #2
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	db05      	blt.n	8009a88 <__hi0bits+0x38>
 8009a7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a80:	f103 0301 	add.w	r3, r3, #1
 8009a84:	bf08      	it	eq
 8009a86:	2320      	moveq	r3, #32
 8009a88:	4618      	mov	r0, r3
 8009a8a:	4770      	bx	lr
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	e7e4      	b.n	8009a5a <__hi0bits+0xa>

08009a90 <__lo0bits>:
 8009a90:	6803      	ldr	r3, [r0, #0]
 8009a92:	f013 0207 	ands.w	r2, r3, #7
 8009a96:	4601      	mov	r1, r0
 8009a98:	d00b      	beq.n	8009ab2 <__lo0bits+0x22>
 8009a9a:	07da      	lsls	r2, r3, #31
 8009a9c:	d424      	bmi.n	8009ae8 <__lo0bits+0x58>
 8009a9e:	0798      	lsls	r0, r3, #30
 8009aa0:	bf49      	itett	mi
 8009aa2:	085b      	lsrmi	r3, r3, #1
 8009aa4:	089b      	lsrpl	r3, r3, #2
 8009aa6:	2001      	movmi	r0, #1
 8009aa8:	600b      	strmi	r3, [r1, #0]
 8009aaa:	bf5c      	itt	pl
 8009aac:	600b      	strpl	r3, [r1, #0]
 8009aae:	2002      	movpl	r0, #2
 8009ab0:	4770      	bx	lr
 8009ab2:	b298      	uxth	r0, r3
 8009ab4:	b9b0      	cbnz	r0, 8009ae4 <__lo0bits+0x54>
 8009ab6:	0c1b      	lsrs	r3, r3, #16
 8009ab8:	2010      	movs	r0, #16
 8009aba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009abe:	bf04      	itt	eq
 8009ac0:	0a1b      	lsreq	r3, r3, #8
 8009ac2:	3008      	addeq	r0, #8
 8009ac4:	071a      	lsls	r2, r3, #28
 8009ac6:	bf04      	itt	eq
 8009ac8:	091b      	lsreq	r3, r3, #4
 8009aca:	3004      	addeq	r0, #4
 8009acc:	079a      	lsls	r2, r3, #30
 8009ace:	bf04      	itt	eq
 8009ad0:	089b      	lsreq	r3, r3, #2
 8009ad2:	3002      	addeq	r0, #2
 8009ad4:	07da      	lsls	r2, r3, #31
 8009ad6:	d403      	bmi.n	8009ae0 <__lo0bits+0x50>
 8009ad8:	085b      	lsrs	r3, r3, #1
 8009ada:	f100 0001 	add.w	r0, r0, #1
 8009ade:	d005      	beq.n	8009aec <__lo0bits+0x5c>
 8009ae0:	600b      	str	r3, [r1, #0]
 8009ae2:	4770      	bx	lr
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	e7e8      	b.n	8009aba <__lo0bits+0x2a>
 8009ae8:	2000      	movs	r0, #0
 8009aea:	4770      	bx	lr
 8009aec:	2020      	movs	r0, #32
 8009aee:	4770      	bx	lr

08009af0 <__i2b>:
 8009af0:	b510      	push	{r4, lr}
 8009af2:	460c      	mov	r4, r1
 8009af4:	2101      	movs	r1, #1
 8009af6:	f7ff feff 	bl	80098f8 <_Balloc>
 8009afa:	4602      	mov	r2, r0
 8009afc:	b928      	cbnz	r0, 8009b0a <__i2b+0x1a>
 8009afe:	4b05      	ldr	r3, [pc, #20]	; (8009b14 <__i2b+0x24>)
 8009b00:	4805      	ldr	r0, [pc, #20]	; (8009b18 <__i2b+0x28>)
 8009b02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b06:	f000 fc9b 	bl	800a440 <__assert_func>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	6144      	str	r4, [r0, #20]
 8009b0e:	6103      	str	r3, [r0, #16]
 8009b10:	bd10      	pop	{r4, pc}
 8009b12:	bf00      	nop
 8009b14:	0800b293 	.word	0x0800b293
 8009b18:	0800b2a4 	.word	0x0800b2a4

08009b1c <__multiply>:
 8009b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b20:	4614      	mov	r4, r2
 8009b22:	690a      	ldr	r2, [r1, #16]
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	bfb8      	it	lt
 8009b2a:	460b      	movlt	r3, r1
 8009b2c:	460d      	mov	r5, r1
 8009b2e:	bfbc      	itt	lt
 8009b30:	4625      	movlt	r5, r4
 8009b32:	461c      	movlt	r4, r3
 8009b34:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009b38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009b3c:	68ab      	ldr	r3, [r5, #8]
 8009b3e:	6869      	ldr	r1, [r5, #4]
 8009b40:	eb0a 0709 	add.w	r7, sl, r9
 8009b44:	42bb      	cmp	r3, r7
 8009b46:	b085      	sub	sp, #20
 8009b48:	bfb8      	it	lt
 8009b4a:	3101      	addlt	r1, #1
 8009b4c:	f7ff fed4 	bl	80098f8 <_Balloc>
 8009b50:	b930      	cbnz	r0, 8009b60 <__multiply+0x44>
 8009b52:	4602      	mov	r2, r0
 8009b54:	4b42      	ldr	r3, [pc, #264]	; (8009c60 <__multiply+0x144>)
 8009b56:	4843      	ldr	r0, [pc, #268]	; (8009c64 <__multiply+0x148>)
 8009b58:	f240 115d 	movw	r1, #349	; 0x15d
 8009b5c:	f000 fc70 	bl	800a440 <__assert_func>
 8009b60:	f100 0614 	add.w	r6, r0, #20
 8009b64:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009b68:	4633      	mov	r3, r6
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	4543      	cmp	r3, r8
 8009b6e:	d31e      	bcc.n	8009bae <__multiply+0x92>
 8009b70:	f105 0c14 	add.w	ip, r5, #20
 8009b74:	f104 0314 	add.w	r3, r4, #20
 8009b78:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009b7c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009b80:	9202      	str	r2, [sp, #8]
 8009b82:	ebac 0205 	sub.w	r2, ip, r5
 8009b86:	3a15      	subs	r2, #21
 8009b88:	f022 0203 	bic.w	r2, r2, #3
 8009b8c:	3204      	adds	r2, #4
 8009b8e:	f105 0115 	add.w	r1, r5, #21
 8009b92:	458c      	cmp	ip, r1
 8009b94:	bf38      	it	cc
 8009b96:	2204      	movcc	r2, #4
 8009b98:	9201      	str	r2, [sp, #4]
 8009b9a:	9a02      	ldr	r2, [sp, #8]
 8009b9c:	9303      	str	r3, [sp, #12]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d808      	bhi.n	8009bb4 <__multiply+0x98>
 8009ba2:	2f00      	cmp	r7, #0
 8009ba4:	dc55      	bgt.n	8009c52 <__multiply+0x136>
 8009ba6:	6107      	str	r7, [r0, #16]
 8009ba8:	b005      	add	sp, #20
 8009baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bae:	f843 2b04 	str.w	r2, [r3], #4
 8009bb2:	e7db      	b.n	8009b6c <__multiply+0x50>
 8009bb4:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bb8:	f1ba 0f00 	cmp.w	sl, #0
 8009bbc:	d020      	beq.n	8009c00 <__multiply+0xe4>
 8009bbe:	f105 0e14 	add.w	lr, r5, #20
 8009bc2:	46b1      	mov	r9, r6
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009bca:	f8d9 b000 	ldr.w	fp, [r9]
 8009bce:	b2a1      	uxth	r1, r4
 8009bd0:	fa1f fb8b 	uxth.w	fp, fp
 8009bd4:	fb0a b101 	mla	r1, sl, r1, fp
 8009bd8:	4411      	add	r1, r2
 8009bda:	f8d9 2000 	ldr.w	r2, [r9]
 8009bde:	0c24      	lsrs	r4, r4, #16
 8009be0:	0c12      	lsrs	r2, r2, #16
 8009be2:	fb0a 2404 	mla	r4, sl, r4, r2
 8009be6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009bea:	b289      	uxth	r1, r1
 8009bec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009bf0:	45f4      	cmp	ip, lr
 8009bf2:	f849 1b04 	str.w	r1, [r9], #4
 8009bf6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009bfa:	d8e4      	bhi.n	8009bc6 <__multiply+0xaa>
 8009bfc:	9901      	ldr	r1, [sp, #4]
 8009bfe:	5072      	str	r2, [r6, r1]
 8009c00:	9a03      	ldr	r2, [sp, #12]
 8009c02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c06:	3304      	adds	r3, #4
 8009c08:	f1b9 0f00 	cmp.w	r9, #0
 8009c0c:	d01f      	beq.n	8009c4e <__multiply+0x132>
 8009c0e:	6834      	ldr	r4, [r6, #0]
 8009c10:	f105 0114 	add.w	r1, r5, #20
 8009c14:	46b6      	mov	lr, r6
 8009c16:	f04f 0a00 	mov.w	sl, #0
 8009c1a:	880a      	ldrh	r2, [r1, #0]
 8009c1c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009c20:	fb09 b202 	mla	r2, r9, r2, fp
 8009c24:	4492      	add	sl, r2
 8009c26:	b2a4      	uxth	r4, r4
 8009c28:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009c2c:	f84e 4b04 	str.w	r4, [lr], #4
 8009c30:	f851 4b04 	ldr.w	r4, [r1], #4
 8009c34:	f8be 2000 	ldrh.w	r2, [lr]
 8009c38:	0c24      	lsrs	r4, r4, #16
 8009c3a:	fb09 2404 	mla	r4, r9, r4, r2
 8009c3e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009c42:	458c      	cmp	ip, r1
 8009c44:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009c48:	d8e7      	bhi.n	8009c1a <__multiply+0xfe>
 8009c4a:	9a01      	ldr	r2, [sp, #4]
 8009c4c:	50b4      	str	r4, [r6, r2]
 8009c4e:	3604      	adds	r6, #4
 8009c50:	e7a3      	b.n	8009b9a <__multiply+0x7e>
 8009c52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1a5      	bne.n	8009ba6 <__multiply+0x8a>
 8009c5a:	3f01      	subs	r7, #1
 8009c5c:	e7a1      	b.n	8009ba2 <__multiply+0x86>
 8009c5e:	bf00      	nop
 8009c60:	0800b293 	.word	0x0800b293
 8009c64:	0800b2a4 	.word	0x0800b2a4

08009c68 <__pow5mult>:
 8009c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c6c:	4615      	mov	r5, r2
 8009c6e:	f012 0203 	ands.w	r2, r2, #3
 8009c72:	4606      	mov	r6, r0
 8009c74:	460f      	mov	r7, r1
 8009c76:	d007      	beq.n	8009c88 <__pow5mult+0x20>
 8009c78:	4c25      	ldr	r4, [pc, #148]	; (8009d10 <__pow5mult+0xa8>)
 8009c7a:	3a01      	subs	r2, #1
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c82:	f7ff fe9b 	bl	80099bc <__multadd>
 8009c86:	4607      	mov	r7, r0
 8009c88:	10ad      	asrs	r5, r5, #2
 8009c8a:	d03d      	beq.n	8009d08 <__pow5mult+0xa0>
 8009c8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c8e:	b97c      	cbnz	r4, 8009cb0 <__pow5mult+0x48>
 8009c90:	2010      	movs	r0, #16
 8009c92:	f7ff fe29 	bl	80098e8 <malloc>
 8009c96:	4602      	mov	r2, r0
 8009c98:	6270      	str	r0, [r6, #36]	; 0x24
 8009c9a:	b928      	cbnz	r0, 8009ca8 <__pow5mult+0x40>
 8009c9c:	4b1d      	ldr	r3, [pc, #116]	; (8009d14 <__pow5mult+0xac>)
 8009c9e:	481e      	ldr	r0, [pc, #120]	; (8009d18 <__pow5mult+0xb0>)
 8009ca0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ca4:	f000 fbcc 	bl	800a440 <__assert_func>
 8009ca8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cac:	6004      	str	r4, [r0, #0]
 8009cae:	60c4      	str	r4, [r0, #12]
 8009cb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009cb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cb8:	b94c      	cbnz	r4, 8009cce <__pow5mult+0x66>
 8009cba:	f240 2171 	movw	r1, #625	; 0x271
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	f7ff ff16 	bl	8009af0 <__i2b>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cca:	4604      	mov	r4, r0
 8009ccc:	6003      	str	r3, [r0, #0]
 8009cce:	f04f 0900 	mov.w	r9, #0
 8009cd2:	07eb      	lsls	r3, r5, #31
 8009cd4:	d50a      	bpl.n	8009cec <__pow5mult+0x84>
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	4622      	mov	r2, r4
 8009cda:	4630      	mov	r0, r6
 8009cdc:	f7ff ff1e 	bl	8009b1c <__multiply>
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	4680      	mov	r8, r0
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	f7ff fe47 	bl	8009978 <_Bfree>
 8009cea:	4647      	mov	r7, r8
 8009cec:	106d      	asrs	r5, r5, #1
 8009cee:	d00b      	beq.n	8009d08 <__pow5mult+0xa0>
 8009cf0:	6820      	ldr	r0, [r4, #0]
 8009cf2:	b938      	cbnz	r0, 8009d04 <__pow5mult+0x9c>
 8009cf4:	4622      	mov	r2, r4
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f7ff ff0f 	bl	8009b1c <__multiply>
 8009cfe:	6020      	str	r0, [r4, #0]
 8009d00:	f8c0 9000 	str.w	r9, [r0]
 8009d04:	4604      	mov	r4, r0
 8009d06:	e7e4      	b.n	8009cd2 <__pow5mult+0x6a>
 8009d08:	4638      	mov	r0, r7
 8009d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d0e:	bf00      	nop
 8009d10:	0800b3f8 	.word	0x0800b3f8
 8009d14:	0800b21d 	.word	0x0800b21d
 8009d18:	0800b2a4 	.word	0x0800b2a4

08009d1c <__lshift>:
 8009d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d20:	460c      	mov	r4, r1
 8009d22:	6849      	ldr	r1, [r1, #4]
 8009d24:	6923      	ldr	r3, [r4, #16]
 8009d26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d2a:	68a3      	ldr	r3, [r4, #8]
 8009d2c:	4607      	mov	r7, r0
 8009d2e:	4691      	mov	r9, r2
 8009d30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d34:	f108 0601 	add.w	r6, r8, #1
 8009d38:	42b3      	cmp	r3, r6
 8009d3a:	db0b      	blt.n	8009d54 <__lshift+0x38>
 8009d3c:	4638      	mov	r0, r7
 8009d3e:	f7ff fddb 	bl	80098f8 <_Balloc>
 8009d42:	4605      	mov	r5, r0
 8009d44:	b948      	cbnz	r0, 8009d5a <__lshift+0x3e>
 8009d46:	4602      	mov	r2, r0
 8009d48:	4b28      	ldr	r3, [pc, #160]	; (8009dec <__lshift+0xd0>)
 8009d4a:	4829      	ldr	r0, [pc, #164]	; (8009df0 <__lshift+0xd4>)
 8009d4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009d50:	f000 fb76 	bl	800a440 <__assert_func>
 8009d54:	3101      	adds	r1, #1
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	e7ee      	b.n	8009d38 <__lshift+0x1c>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f100 0114 	add.w	r1, r0, #20
 8009d60:	f100 0210 	add.w	r2, r0, #16
 8009d64:	4618      	mov	r0, r3
 8009d66:	4553      	cmp	r3, sl
 8009d68:	db33      	blt.n	8009dd2 <__lshift+0xb6>
 8009d6a:	6920      	ldr	r0, [r4, #16]
 8009d6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d70:	f104 0314 	add.w	r3, r4, #20
 8009d74:	f019 091f 	ands.w	r9, r9, #31
 8009d78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d80:	d02b      	beq.n	8009dda <__lshift+0xbe>
 8009d82:	f1c9 0e20 	rsb	lr, r9, #32
 8009d86:	468a      	mov	sl, r1
 8009d88:	2200      	movs	r2, #0
 8009d8a:	6818      	ldr	r0, [r3, #0]
 8009d8c:	fa00 f009 	lsl.w	r0, r0, r9
 8009d90:	4302      	orrs	r2, r0
 8009d92:	f84a 2b04 	str.w	r2, [sl], #4
 8009d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d9a:	459c      	cmp	ip, r3
 8009d9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009da0:	d8f3      	bhi.n	8009d8a <__lshift+0x6e>
 8009da2:	ebac 0304 	sub.w	r3, ip, r4
 8009da6:	3b15      	subs	r3, #21
 8009da8:	f023 0303 	bic.w	r3, r3, #3
 8009dac:	3304      	adds	r3, #4
 8009dae:	f104 0015 	add.w	r0, r4, #21
 8009db2:	4584      	cmp	ip, r0
 8009db4:	bf38      	it	cc
 8009db6:	2304      	movcc	r3, #4
 8009db8:	50ca      	str	r2, [r1, r3]
 8009dba:	b10a      	cbz	r2, 8009dc0 <__lshift+0xa4>
 8009dbc:	f108 0602 	add.w	r6, r8, #2
 8009dc0:	3e01      	subs	r6, #1
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	612e      	str	r6, [r5, #16]
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	f7ff fdd6 	bl	8009978 <_Bfree>
 8009dcc:	4628      	mov	r0, r5
 8009dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	e7c5      	b.n	8009d66 <__lshift+0x4a>
 8009dda:	3904      	subs	r1, #4
 8009ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009de0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009de4:	459c      	cmp	ip, r3
 8009de6:	d8f9      	bhi.n	8009ddc <__lshift+0xc0>
 8009de8:	e7ea      	b.n	8009dc0 <__lshift+0xa4>
 8009dea:	bf00      	nop
 8009dec:	0800b293 	.word	0x0800b293
 8009df0:	0800b2a4 	.word	0x0800b2a4

08009df4 <__mcmp>:
 8009df4:	b530      	push	{r4, r5, lr}
 8009df6:	6902      	ldr	r2, [r0, #16]
 8009df8:	690c      	ldr	r4, [r1, #16]
 8009dfa:	1b12      	subs	r2, r2, r4
 8009dfc:	d10e      	bne.n	8009e1c <__mcmp+0x28>
 8009dfe:	f100 0314 	add.w	r3, r0, #20
 8009e02:	3114      	adds	r1, #20
 8009e04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e14:	42a5      	cmp	r5, r4
 8009e16:	d003      	beq.n	8009e20 <__mcmp+0x2c>
 8009e18:	d305      	bcc.n	8009e26 <__mcmp+0x32>
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	bd30      	pop	{r4, r5, pc}
 8009e20:	4283      	cmp	r3, r0
 8009e22:	d3f3      	bcc.n	8009e0c <__mcmp+0x18>
 8009e24:	e7fa      	b.n	8009e1c <__mcmp+0x28>
 8009e26:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2a:	e7f7      	b.n	8009e1c <__mcmp+0x28>

08009e2c <__mdiff>:
 8009e2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e30:	460c      	mov	r4, r1
 8009e32:	4606      	mov	r6, r0
 8009e34:	4611      	mov	r1, r2
 8009e36:	4620      	mov	r0, r4
 8009e38:	4617      	mov	r7, r2
 8009e3a:	f7ff ffdb 	bl	8009df4 <__mcmp>
 8009e3e:	1e05      	subs	r5, r0, #0
 8009e40:	d110      	bne.n	8009e64 <__mdiff+0x38>
 8009e42:	4629      	mov	r1, r5
 8009e44:	4630      	mov	r0, r6
 8009e46:	f7ff fd57 	bl	80098f8 <_Balloc>
 8009e4a:	b930      	cbnz	r0, 8009e5a <__mdiff+0x2e>
 8009e4c:	4b39      	ldr	r3, [pc, #228]	; (8009f34 <__mdiff+0x108>)
 8009e4e:	4602      	mov	r2, r0
 8009e50:	f240 2132 	movw	r1, #562	; 0x232
 8009e54:	4838      	ldr	r0, [pc, #224]	; (8009f38 <__mdiff+0x10c>)
 8009e56:	f000 faf3 	bl	800a440 <__assert_func>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e64:	bfa4      	itt	ge
 8009e66:	463b      	movge	r3, r7
 8009e68:	4627      	movge	r7, r4
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	6879      	ldr	r1, [r7, #4]
 8009e6e:	bfa6      	itte	ge
 8009e70:	461c      	movge	r4, r3
 8009e72:	2500      	movge	r5, #0
 8009e74:	2501      	movlt	r5, #1
 8009e76:	f7ff fd3f 	bl	80098f8 <_Balloc>
 8009e7a:	b920      	cbnz	r0, 8009e86 <__mdiff+0x5a>
 8009e7c:	4b2d      	ldr	r3, [pc, #180]	; (8009f34 <__mdiff+0x108>)
 8009e7e:	4602      	mov	r2, r0
 8009e80:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009e84:	e7e6      	b.n	8009e54 <__mdiff+0x28>
 8009e86:	693e      	ldr	r6, [r7, #16]
 8009e88:	60c5      	str	r5, [r0, #12]
 8009e8a:	6925      	ldr	r5, [r4, #16]
 8009e8c:	f107 0114 	add.w	r1, r7, #20
 8009e90:	f104 0914 	add.w	r9, r4, #20
 8009e94:	f100 0e14 	add.w	lr, r0, #20
 8009e98:	f107 0210 	add.w	r2, r7, #16
 8009e9c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009ea0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009ea4:	46f2      	mov	sl, lr
 8009ea6:	2700      	movs	r7, #0
 8009ea8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009eac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009eb0:	fa1f f883 	uxth.w	r8, r3
 8009eb4:	fa17 f78b 	uxtah	r7, r7, fp
 8009eb8:	0c1b      	lsrs	r3, r3, #16
 8009eba:	eba7 0808 	sub.w	r8, r7, r8
 8009ebe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ec2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ec6:	fa1f f888 	uxth.w	r8, r8
 8009eca:	141f      	asrs	r7, r3, #16
 8009ecc:	454d      	cmp	r5, r9
 8009ece:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ed2:	f84a 3b04 	str.w	r3, [sl], #4
 8009ed6:	d8e7      	bhi.n	8009ea8 <__mdiff+0x7c>
 8009ed8:	1b2b      	subs	r3, r5, r4
 8009eda:	3b15      	subs	r3, #21
 8009edc:	f023 0303 	bic.w	r3, r3, #3
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	3415      	adds	r4, #21
 8009ee4:	42a5      	cmp	r5, r4
 8009ee6:	bf38      	it	cc
 8009ee8:	2304      	movcc	r3, #4
 8009eea:	4419      	add	r1, r3
 8009eec:	4473      	add	r3, lr
 8009eee:	469e      	mov	lr, r3
 8009ef0:	460d      	mov	r5, r1
 8009ef2:	4565      	cmp	r5, ip
 8009ef4:	d30e      	bcc.n	8009f14 <__mdiff+0xe8>
 8009ef6:	f10c 0203 	add.w	r2, ip, #3
 8009efa:	1a52      	subs	r2, r2, r1
 8009efc:	f022 0203 	bic.w	r2, r2, #3
 8009f00:	3903      	subs	r1, #3
 8009f02:	458c      	cmp	ip, r1
 8009f04:	bf38      	it	cc
 8009f06:	2200      	movcc	r2, #0
 8009f08:	441a      	add	r2, r3
 8009f0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009f0e:	b17b      	cbz	r3, 8009f30 <__mdiff+0x104>
 8009f10:	6106      	str	r6, [r0, #16]
 8009f12:	e7a5      	b.n	8009e60 <__mdiff+0x34>
 8009f14:	f855 8b04 	ldr.w	r8, [r5], #4
 8009f18:	fa17 f488 	uxtah	r4, r7, r8
 8009f1c:	1422      	asrs	r2, r4, #16
 8009f1e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009f22:	b2a4      	uxth	r4, r4
 8009f24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009f28:	f84e 4b04 	str.w	r4, [lr], #4
 8009f2c:	1417      	asrs	r7, r2, #16
 8009f2e:	e7e0      	b.n	8009ef2 <__mdiff+0xc6>
 8009f30:	3e01      	subs	r6, #1
 8009f32:	e7ea      	b.n	8009f0a <__mdiff+0xde>
 8009f34:	0800b293 	.word	0x0800b293
 8009f38:	0800b2a4 	.word	0x0800b2a4

08009f3c <__d2b>:
 8009f3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f40:	4689      	mov	r9, r1
 8009f42:	2101      	movs	r1, #1
 8009f44:	ec57 6b10 	vmov	r6, r7, d0
 8009f48:	4690      	mov	r8, r2
 8009f4a:	f7ff fcd5 	bl	80098f8 <_Balloc>
 8009f4e:	4604      	mov	r4, r0
 8009f50:	b930      	cbnz	r0, 8009f60 <__d2b+0x24>
 8009f52:	4602      	mov	r2, r0
 8009f54:	4b25      	ldr	r3, [pc, #148]	; (8009fec <__d2b+0xb0>)
 8009f56:	4826      	ldr	r0, [pc, #152]	; (8009ff0 <__d2b+0xb4>)
 8009f58:	f240 310a 	movw	r1, #778	; 0x30a
 8009f5c:	f000 fa70 	bl	800a440 <__assert_func>
 8009f60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009f64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f68:	bb35      	cbnz	r5, 8009fb8 <__d2b+0x7c>
 8009f6a:	2e00      	cmp	r6, #0
 8009f6c:	9301      	str	r3, [sp, #4]
 8009f6e:	d028      	beq.n	8009fc2 <__d2b+0x86>
 8009f70:	4668      	mov	r0, sp
 8009f72:	9600      	str	r6, [sp, #0]
 8009f74:	f7ff fd8c 	bl	8009a90 <__lo0bits>
 8009f78:	9900      	ldr	r1, [sp, #0]
 8009f7a:	b300      	cbz	r0, 8009fbe <__d2b+0x82>
 8009f7c:	9a01      	ldr	r2, [sp, #4]
 8009f7e:	f1c0 0320 	rsb	r3, r0, #32
 8009f82:	fa02 f303 	lsl.w	r3, r2, r3
 8009f86:	430b      	orrs	r3, r1
 8009f88:	40c2      	lsrs	r2, r0
 8009f8a:	6163      	str	r3, [r4, #20]
 8009f8c:	9201      	str	r2, [sp, #4]
 8009f8e:	9b01      	ldr	r3, [sp, #4]
 8009f90:	61a3      	str	r3, [r4, #24]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	bf14      	ite	ne
 8009f96:	2202      	movne	r2, #2
 8009f98:	2201      	moveq	r2, #1
 8009f9a:	6122      	str	r2, [r4, #16]
 8009f9c:	b1d5      	cbz	r5, 8009fd4 <__d2b+0x98>
 8009f9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009fa2:	4405      	add	r5, r0
 8009fa4:	f8c9 5000 	str.w	r5, [r9]
 8009fa8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009fac:	f8c8 0000 	str.w	r0, [r8]
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	b003      	add	sp, #12
 8009fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fbc:	e7d5      	b.n	8009f6a <__d2b+0x2e>
 8009fbe:	6161      	str	r1, [r4, #20]
 8009fc0:	e7e5      	b.n	8009f8e <__d2b+0x52>
 8009fc2:	a801      	add	r0, sp, #4
 8009fc4:	f7ff fd64 	bl	8009a90 <__lo0bits>
 8009fc8:	9b01      	ldr	r3, [sp, #4]
 8009fca:	6163      	str	r3, [r4, #20]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	6122      	str	r2, [r4, #16]
 8009fd0:	3020      	adds	r0, #32
 8009fd2:	e7e3      	b.n	8009f9c <__d2b+0x60>
 8009fd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fdc:	f8c9 0000 	str.w	r0, [r9]
 8009fe0:	6918      	ldr	r0, [r3, #16]
 8009fe2:	f7ff fd35 	bl	8009a50 <__hi0bits>
 8009fe6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fea:	e7df      	b.n	8009fac <__d2b+0x70>
 8009fec:	0800b293 	.word	0x0800b293
 8009ff0:	0800b2a4 	.word	0x0800b2a4

08009ff4 <_calloc_r>:
 8009ff4:	b513      	push	{r0, r1, r4, lr}
 8009ff6:	434a      	muls	r2, r1
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	9201      	str	r2, [sp, #4]
 8009ffc:	f000 f85a 	bl	800a0b4 <_malloc_r>
 800a000:	4604      	mov	r4, r0
 800a002:	b118      	cbz	r0, 800a00c <_calloc_r+0x18>
 800a004:	9a01      	ldr	r2, [sp, #4]
 800a006:	2100      	movs	r1, #0
 800a008:	f7fe f960 	bl	80082cc <memset>
 800a00c:	4620      	mov	r0, r4
 800a00e:	b002      	add	sp, #8
 800a010:	bd10      	pop	{r4, pc}
	...

0800a014 <_free_r>:
 800a014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a016:	2900      	cmp	r1, #0
 800a018:	d048      	beq.n	800a0ac <_free_r+0x98>
 800a01a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a01e:	9001      	str	r0, [sp, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	f1a1 0404 	sub.w	r4, r1, #4
 800a026:	bfb8      	it	lt
 800a028:	18e4      	addlt	r4, r4, r3
 800a02a:	f000 fa65 	bl	800a4f8 <__malloc_lock>
 800a02e:	4a20      	ldr	r2, [pc, #128]	; (800a0b0 <_free_r+0x9c>)
 800a030:	9801      	ldr	r0, [sp, #4]
 800a032:	6813      	ldr	r3, [r2, #0]
 800a034:	4615      	mov	r5, r2
 800a036:	b933      	cbnz	r3, 800a046 <_free_r+0x32>
 800a038:	6063      	str	r3, [r4, #4]
 800a03a:	6014      	str	r4, [r2, #0]
 800a03c:	b003      	add	sp, #12
 800a03e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a042:	f000 ba5f 	b.w	800a504 <__malloc_unlock>
 800a046:	42a3      	cmp	r3, r4
 800a048:	d90b      	bls.n	800a062 <_free_r+0x4e>
 800a04a:	6821      	ldr	r1, [r4, #0]
 800a04c:	1862      	adds	r2, r4, r1
 800a04e:	4293      	cmp	r3, r2
 800a050:	bf04      	itt	eq
 800a052:	681a      	ldreq	r2, [r3, #0]
 800a054:	685b      	ldreq	r3, [r3, #4]
 800a056:	6063      	str	r3, [r4, #4]
 800a058:	bf04      	itt	eq
 800a05a:	1852      	addeq	r2, r2, r1
 800a05c:	6022      	streq	r2, [r4, #0]
 800a05e:	602c      	str	r4, [r5, #0]
 800a060:	e7ec      	b.n	800a03c <_free_r+0x28>
 800a062:	461a      	mov	r2, r3
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	b10b      	cbz	r3, 800a06c <_free_r+0x58>
 800a068:	42a3      	cmp	r3, r4
 800a06a:	d9fa      	bls.n	800a062 <_free_r+0x4e>
 800a06c:	6811      	ldr	r1, [r2, #0]
 800a06e:	1855      	adds	r5, r2, r1
 800a070:	42a5      	cmp	r5, r4
 800a072:	d10b      	bne.n	800a08c <_free_r+0x78>
 800a074:	6824      	ldr	r4, [r4, #0]
 800a076:	4421      	add	r1, r4
 800a078:	1854      	adds	r4, r2, r1
 800a07a:	42a3      	cmp	r3, r4
 800a07c:	6011      	str	r1, [r2, #0]
 800a07e:	d1dd      	bne.n	800a03c <_free_r+0x28>
 800a080:	681c      	ldr	r4, [r3, #0]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	6053      	str	r3, [r2, #4]
 800a086:	4421      	add	r1, r4
 800a088:	6011      	str	r1, [r2, #0]
 800a08a:	e7d7      	b.n	800a03c <_free_r+0x28>
 800a08c:	d902      	bls.n	800a094 <_free_r+0x80>
 800a08e:	230c      	movs	r3, #12
 800a090:	6003      	str	r3, [r0, #0]
 800a092:	e7d3      	b.n	800a03c <_free_r+0x28>
 800a094:	6825      	ldr	r5, [r4, #0]
 800a096:	1961      	adds	r1, r4, r5
 800a098:	428b      	cmp	r3, r1
 800a09a:	bf04      	itt	eq
 800a09c:	6819      	ldreq	r1, [r3, #0]
 800a09e:	685b      	ldreq	r3, [r3, #4]
 800a0a0:	6063      	str	r3, [r4, #4]
 800a0a2:	bf04      	itt	eq
 800a0a4:	1949      	addeq	r1, r1, r5
 800a0a6:	6021      	streq	r1, [r4, #0]
 800a0a8:	6054      	str	r4, [r2, #4]
 800a0aa:	e7c7      	b.n	800a03c <_free_r+0x28>
 800a0ac:	b003      	add	sp, #12
 800a0ae:	bd30      	pop	{r4, r5, pc}
 800a0b0:	20004b1c 	.word	0x20004b1c

0800a0b4 <_malloc_r>:
 800a0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b6:	1ccd      	adds	r5, r1, #3
 800a0b8:	f025 0503 	bic.w	r5, r5, #3
 800a0bc:	3508      	adds	r5, #8
 800a0be:	2d0c      	cmp	r5, #12
 800a0c0:	bf38      	it	cc
 800a0c2:	250c      	movcc	r5, #12
 800a0c4:	2d00      	cmp	r5, #0
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	db01      	blt.n	800a0ce <_malloc_r+0x1a>
 800a0ca:	42a9      	cmp	r1, r5
 800a0cc:	d903      	bls.n	800a0d6 <_malloc_r+0x22>
 800a0ce:	230c      	movs	r3, #12
 800a0d0:	6033      	str	r3, [r6, #0]
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d6:	f000 fa0f 	bl	800a4f8 <__malloc_lock>
 800a0da:	4921      	ldr	r1, [pc, #132]	; (800a160 <_malloc_r+0xac>)
 800a0dc:	680a      	ldr	r2, [r1, #0]
 800a0de:	4614      	mov	r4, r2
 800a0e0:	b99c      	cbnz	r4, 800a10a <_malloc_r+0x56>
 800a0e2:	4f20      	ldr	r7, [pc, #128]	; (800a164 <_malloc_r+0xb0>)
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	b923      	cbnz	r3, 800a0f2 <_malloc_r+0x3e>
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f000 f998 	bl	800a420 <_sbrk_r>
 800a0f0:	6038      	str	r0, [r7, #0]
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	f000 f993 	bl	800a420 <_sbrk_r>
 800a0fa:	1c43      	adds	r3, r0, #1
 800a0fc:	d123      	bne.n	800a146 <_malloc_r+0x92>
 800a0fe:	230c      	movs	r3, #12
 800a100:	6033      	str	r3, [r6, #0]
 800a102:	4630      	mov	r0, r6
 800a104:	f000 f9fe 	bl	800a504 <__malloc_unlock>
 800a108:	e7e3      	b.n	800a0d2 <_malloc_r+0x1e>
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	1b5b      	subs	r3, r3, r5
 800a10e:	d417      	bmi.n	800a140 <_malloc_r+0x8c>
 800a110:	2b0b      	cmp	r3, #11
 800a112:	d903      	bls.n	800a11c <_malloc_r+0x68>
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	441c      	add	r4, r3
 800a118:	6025      	str	r5, [r4, #0]
 800a11a:	e004      	b.n	800a126 <_malloc_r+0x72>
 800a11c:	6863      	ldr	r3, [r4, #4]
 800a11e:	42a2      	cmp	r2, r4
 800a120:	bf0c      	ite	eq
 800a122:	600b      	streq	r3, [r1, #0]
 800a124:	6053      	strne	r3, [r2, #4]
 800a126:	4630      	mov	r0, r6
 800a128:	f000 f9ec 	bl	800a504 <__malloc_unlock>
 800a12c:	f104 000b 	add.w	r0, r4, #11
 800a130:	1d23      	adds	r3, r4, #4
 800a132:	f020 0007 	bic.w	r0, r0, #7
 800a136:	1ac2      	subs	r2, r0, r3
 800a138:	d0cc      	beq.n	800a0d4 <_malloc_r+0x20>
 800a13a:	1a1b      	subs	r3, r3, r0
 800a13c:	50a3      	str	r3, [r4, r2]
 800a13e:	e7c9      	b.n	800a0d4 <_malloc_r+0x20>
 800a140:	4622      	mov	r2, r4
 800a142:	6864      	ldr	r4, [r4, #4]
 800a144:	e7cc      	b.n	800a0e0 <_malloc_r+0x2c>
 800a146:	1cc4      	adds	r4, r0, #3
 800a148:	f024 0403 	bic.w	r4, r4, #3
 800a14c:	42a0      	cmp	r0, r4
 800a14e:	d0e3      	beq.n	800a118 <_malloc_r+0x64>
 800a150:	1a21      	subs	r1, r4, r0
 800a152:	4630      	mov	r0, r6
 800a154:	f000 f964 	bl	800a420 <_sbrk_r>
 800a158:	3001      	adds	r0, #1
 800a15a:	d1dd      	bne.n	800a118 <_malloc_r+0x64>
 800a15c:	e7cf      	b.n	800a0fe <_malloc_r+0x4a>
 800a15e:	bf00      	nop
 800a160:	20004b1c 	.word	0x20004b1c
 800a164:	20004b20 	.word	0x20004b20

0800a168 <__ssputs_r>:
 800a168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a16c:	688e      	ldr	r6, [r1, #8]
 800a16e:	429e      	cmp	r6, r3
 800a170:	4682      	mov	sl, r0
 800a172:	460c      	mov	r4, r1
 800a174:	4690      	mov	r8, r2
 800a176:	461f      	mov	r7, r3
 800a178:	d838      	bhi.n	800a1ec <__ssputs_r+0x84>
 800a17a:	898a      	ldrh	r2, [r1, #12]
 800a17c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a180:	d032      	beq.n	800a1e8 <__ssputs_r+0x80>
 800a182:	6825      	ldr	r5, [r4, #0]
 800a184:	6909      	ldr	r1, [r1, #16]
 800a186:	eba5 0901 	sub.w	r9, r5, r1
 800a18a:	6965      	ldr	r5, [r4, #20]
 800a18c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a190:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a194:	3301      	adds	r3, #1
 800a196:	444b      	add	r3, r9
 800a198:	106d      	asrs	r5, r5, #1
 800a19a:	429d      	cmp	r5, r3
 800a19c:	bf38      	it	cc
 800a19e:	461d      	movcc	r5, r3
 800a1a0:	0553      	lsls	r3, r2, #21
 800a1a2:	d531      	bpl.n	800a208 <__ssputs_r+0xa0>
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	f7ff ff85 	bl	800a0b4 <_malloc_r>
 800a1aa:	4606      	mov	r6, r0
 800a1ac:	b950      	cbnz	r0, 800a1c4 <__ssputs_r+0x5c>
 800a1ae:	230c      	movs	r3, #12
 800a1b0:	f8ca 3000 	str.w	r3, [sl]
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1ba:	81a3      	strh	r3, [r4, #12]
 800a1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c4:	6921      	ldr	r1, [r4, #16]
 800a1c6:	464a      	mov	r2, r9
 800a1c8:	f7fe f872 	bl	80082b0 <memcpy>
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d6:	81a3      	strh	r3, [r4, #12]
 800a1d8:	6126      	str	r6, [r4, #16]
 800a1da:	6165      	str	r5, [r4, #20]
 800a1dc:	444e      	add	r6, r9
 800a1de:	eba5 0509 	sub.w	r5, r5, r9
 800a1e2:	6026      	str	r6, [r4, #0]
 800a1e4:	60a5      	str	r5, [r4, #8]
 800a1e6:	463e      	mov	r6, r7
 800a1e8:	42be      	cmp	r6, r7
 800a1ea:	d900      	bls.n	800a1ee <__ssputs_r+0x86>
 800a1ec:	463e      	mov	r6, r7
 800a1ee:	4632      	mov	r2, r6
 800a1f0:	6820      	ldr	r0, [r4, #0]
 800a1f2:	4641      	mov	r1, r8
 800a1f4:	f000 f966 	bl	800a4c4 <memmove>
 800a1f8:	68a3      	ldr	r3, [r4, #8]
 800a1fa:	6822      	ldr	r2, [r4, #0]
 800a1fc:	1b9b      	subs	r3, r3, r6
 800a1fe:	4432      	add	r2, r6
 800a200:	60a3      	str	r3, [r4, #8]
 800a202:	6022      	str	r2, [r4, #0]
 800a204:	2000      	movs	r0, #0
 800a206:	e7db      	b.n	800a1c0 <__ssputs_r+0x58>
 800a208:	462a      	mov	r2, r5
 800a20a:	f000 f981 	bl	800a510 <_realloc_r>
 800a20e:	4606      	mov	r6, r0
 800a210:	2800      	cmp	r0, #0
 800a212:	d1e1      	bne.n	800a1d8 <__ssputs_r+0x70>
 800a214:	6921      	ldr	r1, [r4, #16]
 800a216:	4650      	mov	r0, sl
 800a218:	f7ff fefc 	bl	800a014 <_free_r>
 800a21c:	e7c7      	b.n	800a1ae <__ssputs_r+0x46>
	...

0800a220 <_svfiprintf_r>:
 800a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a224:	4698      	mov	r8, r3
 800a226:	898b      	ldrh	r3, [r1, #12]
 800a228:	061b      	lsls	r3, r3, #24
 800a22a:	b09d      	sub	sp, #116	; 0x74
 800a22c:	4607      	mov	r7, r0
 800a22e:	460d      	mov	r5, r1
 800a230:	4614      	mov	r4, r2
 800a232:	d50e      	bpl.n	800a252 <_svfiprintf_r+0x32>
 800a234:	690b      	ldr	r3, [r1, #16]
 800a236:	b963      	cbnz	r3, 800a252 <_svfiprintf_r+0x32>
 800a238:	2140      	movs	r1, #64	; 0x40
 800a23a:	f7ff ff3b 	bl	800a0b4 <_malloc_r>
 800a23e:	6028      	str	r0, [r5, #0]
 800a240:	6128      	str	r0, [r5, #16]
 800a242:	b920      	cbnz	r0, 800a24e <_svfiprintf_r+0x2e>
 800a244:	230c      	movs	r3, #12
 800a246:	603b      	str	r3, [r7, #0]
 800a248:	f04f 30ff 	mov.w	r0, #4294967295
 800a24c:	e0d1      	b.n	800a3f2 <_svfiprintf_r+0x1d2>
 800a24e:	2340      	movs	r3, #64	; 0x40
 800a250:	616b      	str	r3, [r5, #20]
 800a252:	2300      	movs	r3, #0
 800a254:	9309      	str	r3, [sp, #36]	; 0x24
 800a256:	2320      	movs	r3, #32
 800a258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a25c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a260:	2330      	movs	r3, #48	; 0x30
 800a262:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a40c <_svfiprintf_r+0x1ec>
 800a266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a26a:	f04f 0901 	mov.w	r9, #1
 800a26e:	4623      	mov	r3, r4
 800a270:	469a      	mov	sl, r3
 800a272:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a276:	b10a      	cbz	r2, 800a27c <_svfiprintf_r+0x5c>
 800a278:	2a25      	cmp	r2, #37	; 0x25
 800a27a:	d1f9      	bne.n	800a270 <_svfiprintf_r+0x50>
 800a27c:	ebba 0b04 	subs.w	fp, sl, r4
 800a280:	d00b      	beq.n	800a29a <_svfiprintf_r+0x7a>
 800a282:	465b      	mov	r3, fp
 800a284:	4622      	mov	r2, r4
 800a286:	4629      	mov	r1, r5
 800a288:	4638      	mov	r0, r7
 800a28a:	f7ff ff6d 	bl	800a168 <__ssputs_r>
 800a28e:	3001      	adds	r0, #1
 800a290:	f000 80aa 	beq.w	800a3e8 <_svfiprintf_r+0x1c8>
 800a294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a296:	445a      	add	r2, fp
 800a298:	9209      	str	r2, [sp, #36]	; 0x24
 800a29a:	f89a 3000 	ldrb.w	r3, [sl]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f000 80a2 	beq.w	800a3e8 <_svfiprintf_r+0x1c8>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2ae:	f10a 0a01 	add.w	sl, sl, #1
 800a2b2:	9304      	str	r3, [sp, #16]
 800a2b4:	9307      	str	r3, [sp, #28]
 800a2b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a2bc:	4654      	mov	r4, sl
 800a2be:	2205      	movs	r2, #5
 800a2c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c4:	4851      	ldr	r0, [pc, #324]	; (800a40c <_svfiprintf_r+0x1ec>)
 800a2c6:	f7f5 ff93 	bl	80001f0 <memchr>
 800a2ca:	9a04      	ldr	r2, [sp, #16]
 800a2cc:	b9d8      	cbnz	r0, 800a306 <_svfiprintf_r+0xe6>
 800a2ce:	06d0      	lsls	r0, r2, #27
 800a2d0:	bf44      	itt	mi
 800a2d2:	2320      	movmi	r3, #32
 800a2d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2d8:	0711      	lsls	r1, r2, #28
 800a2da:	bf44      	itt	mi
 800a2dc:	232b      	movmi	r3, #43	; 0x2b
 800a2de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a2e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a2e8:	d015      	beq.n	800a316 <_svfiprintf_r+0xf6>
 800a2ea:	9a07      	ldr	r2, [sp, #28]
 800a2ec:	4654      	mov	r4, sl
 800a2ee:	2000      	movs	r0, #0
 800a2f0:	f04f 0c0a 	mov.w	ip, #10
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2fa:	3b30      	subs	r3, #48	; 0x30
 800a2fc:	2b09      	cmp	r3, #9
 800a2fe:	d94e      	bls.n	800a39e <_svfiprintf_r+0x17e>
 800a300:	b1b0      	cbz	r0, 800a330 <_svfiprintf_r+0x110>
 800a302:	9207      	str	r2, [sp, #28]
 800a304:	e014      	b.n	800a330 <_svfiprintf_r+0x110>
 800a306:	eba0 0308 	sub.w	r3, r0, r8
 800a30a:	fa09 f303 	lsl.w	r3, r9, r3
 800a30e:	4313      	orrs	r3, r2
 800a310:	9304      	str	r3, [sp, #16]
 800a312:	46a2      	mov	sl, r4
 800a314:	e7d2      	b.n	800a2bc <_svfiprintf_r+0x9c>
 800a316:	9b03      	ldr	r3, [sp, #12]
 800a318:	1d19      	adds	r1, r3, #4
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	9103      	str	r1, [sp, #12]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	bfbb      	ittet	lt
 800a322:	425b      	neglt	r3, r3
 800a324:	f042 0202 	orrlt.w	r2, r2, #2
 800a328:	9307      	strge	r3, [sp, #28]
 800a32a:	9307      	strlt	r3, [sp, #28]
 800a32c:	bfb8      	it	lt
 800a32e:	9204      	strlt	r2, [sp, #16]
 800a330:	7823      	ldrb	r3, [r4, #0]
 800a332:	2b2e      	cmp	r3, #46	; 0x2e
 800a334:	d10c      	bne.n	800a350 <_svfiprintf_r+0x130>
 800a336:	7863      	ldrb	r3, [r4, #1]
 800a338:	2b2a      	cmp	r3, #42	; 0x2a
 800a33a:	d135      	bne.n	800a3a8 <_svfiprintf_r+0x188>
 800a33c:	9b03      	ldr	r3, [sp, #12]
 800a33e:	1d1a      	adds	r2, r3, #4
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	9203      	str	r2, [sp, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	bfb8      	it	lt
 800a348:	f04f 33ff 	movlt.w	r3, #4294967295
 800a34c:	3402      	adds	r4, #2
 800a34e:	9305      	str	r3, [sp, #20]
 800a350:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a41c <_svfiprintf_r+0x1fc>
 800a354:	7821      	ldrb	r1, [r4, #0]
 800a356:	2203      	movs	r2, #3
 800a358:	4650      	mov	r0, sl
 800a35a:	f7f5 ff49 	bl	80001f0 <memchr>
 800a35e:	b140      	cbz	r0, 800a372 <_svfiprintf_r+0x152>
 800a360:	2340      	movs	r3, #64	; 0x40
 800a362:	eba0 000a 	sub.w	r0, r0, sl
 800a366:	fa03 f000 	lsl.w	r0, r3, r0
 800a36a:	9b04      	ldr	r3, [sp, #16]
 800a36c:	4303      	orrs	r3, r0
 800a36e:	3401      	adds	r4, #1
 800a370:	9304      	str	r3, [sp, #16]
 800a372:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a376:	4826      	ldr	r0, [pc, #152]	; (800a410 <_svfiprintf_r+0x1f0>)
 800a378:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a37c:	2206      	movs	r2, #6
 800a37e:	f7f5 ff37 	bl	80001f0 <memchr>
 800a382:	2800      	cmp	r0, #0
 800a384:	d038      	beq.n	800a3f8 <_svfiprintf_r+0x1d8>
 800a386:	4b23      	ldr	r3, [pc, #140]	; (800a414 <_svfiprintf_r+0x1f4>)
 800a388:	bb1b      	cbnz	r3, 800a3d2 <_svfiprintf_r+0x1b2>
 800a38a:	9b03      	ldr	r3, [sp, #12]
 800a38c:	3307      	adds	r3, #7
 800a38e:	f023 0307 	bic.w	r3, r3, #7
 800a392:	3308      	adds	r3, #8
 800a394:	9303      	str	r3, [sp, #12]
 800a396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a398:	4433      	add	r3, r6
 800a39a:	9309      	str	r3, [sp, #36]	; 0x24
 800a39c:	e767      	b.n	800a26e <_svfiprintf_r+0x4e>
 800a39e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	2001      	movs	r0, #1
 800a3a6:	e7a5      	b.n	800a2f4 <_svfiprintf_r+0xd4>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	3401      	adds	r4, #1
 800a3ac:	9305      	str	r3, [sp, #20]
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	f04f 0c0a 	mov.w	ip, #10
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3ba:	3a30      	subs	r2, #48	; 0x30
 800a3bc:	2a09      	cmp	r2, #9
 800a3be:	d903      	bls.n	800a3c8 <_svfiprintf_r+0x1a8>
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d0c5      	beq.n	800a350 <_svfiprintf_r+0x130>
 800a3c4:	9105      	str	r1, [sp, #20]
 800a3c6:	e7c3      	b.n	800a350 <_svfiprintf_r+0x130>
 800a3c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e7f0      	b.n	800a3b4 <_svfiprintf_r+0x194>
 800a3d2:	ab03      	add	r3, sp, #12
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	462a      	mov	r2, r5
 800a3d8:	4b0f      	ldr	r3, [pc, #60]	; (800a418 <_svfiprintf_r+0x1f8>)
 800a3da:	a904      	add	r1, sp, #16
 800a3dc:	4638      	mov	r0, r7
 800a3de:	f7fe f81d 	bl	800841c <_printf_float>
 800a3e2:	1c42      	adds	r2, r0, #1
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	d1d6      	bne.n	800a396 <_svfiprintf_r+0x176>
 800a3e8:	89ab      	ldrh	r3, [r5, #12]
 800a3ea:	065b      	lsls	r3, r3, #25
 800a3ec:	f53f af2c 	bmi.w	800a248 <_svfiprintf_r+0x28>
 800a3f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3f2:	b01d      	add	sp, #116	; 0x74
 800a3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f8:	ab03      	add	r3, sp, #12
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	462a      	mov	r2, r5
 800a3fe:	4b06      	ldr	r3, [pc, #24]	; (800a418 <_svfiprintf_r+0x1f8>)
 800a400:	a904      	add	r1, sp, #16
 800a402:	4638      	mov	r0, r7
 800a404:	f7fe faae 	bl	8008964 <_printf_i>
 800a408:	e7eb      	b.n	800a3e2 <_svfiprintf_r+0x1c2>
 800a40a:	bf00      	nop
 800a40c:	0800b404 	.word	0x0800b404
 800a410:	0800b40e 	.word	0x0800b40e
 800a414:	0800841d 	.word	0x0800841d
 800a418:	0800a169 	.word	0x0800a169
 800a41c:	0800b40a 	.word	0x0800b40a

0800a420 <_sbrk_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4d06      	ldr	r5, [pc, #24]	; (800a43c <_sbrk_r+0x1c>)
 800a424:	2300      	movs	r3, #0
 800a426:	4604      	mov	r4, r0
 800a428:	4608      	mov	r0, r1
 800a42a:	602b      	str	r3, [r5, #0]
 800a42c:	f7f7 fdaa 	bl	8001f84 <_sbrk>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d102      	bne.n	800a43a <_sbrk_r+0x1a>
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	b103      	cbz	r3, 800a43a <_sbrk_r+0x1a>
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	bd38      	pop	{r3, r4, r5, pc}
 800a43c:	20004d14 	.word	0x20004d14

0800a440 <__assert_func>:
 800a440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a442:	4614      	mov	r4, r2
 800a444:	461a      	mov	r2, r3
 800a446:	4b09      	ldr	r3, [pc, #36]	; (800a46c <__assert_func+0x2c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4605      	mov	r5, r0
 800a44c:	68d8      	ldr	r0, [r3, #12]
 800a44e:	b14c      	cbz	r4, 800a464 <__assert_func+0x24>
 800a450:	4b07      	ldr	r3, [pc, #28]	; (800a470 <__assert_func+0x30>)
 800a452:	9100      	str	r1, [sp, #0]
 800a454:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a458:	4906      	ldr	r1, [pc, #24]	; (800a474 <__assert_func+0x34>)
 800a45a:	462b      	mov	r3, r5
 800a45c:	f000 f80e 	bl	800a47c <fiprintf>
 800a460:	f000 faa4 	bl	800a9ac <abort>
 800a464:	4b04      	ldr	r3, [pc, #16]	; (800a478 <__assert_func+0x38>)
 800a466:	461c      	mov	r4, r3
 800a468:	e7f3      	b.n	800a452 <__assert_func+0x12>
 800a46a:	bf00      	nop
 800a46c:	20000014 	.word	0x20000014
 800a470:	0800b415 	.word	0x0800b415
 800a474:	0800b422 	.word	0x0800b422
 800a478:	0800b450 	.word	0x0800b450

0800a47c <fiprintf>:
 800a47c:	b40e      	push	{r1, r2, r3}
 800a47e:	b503      	push	{r0, r1, lr}
 800a480:	4601      	mov	r1, r0
 800a482:	ab03      	add	r3, sp, #12
 800a484:	4805      	ldr	r0, [pc, #20]	; (800a49c <fiprintf+0x20>)
 800a486:	f853 2b04 	ldr.w	r2, [r3], #4
 800a48a:	6800      	ldr	r0, [r0, #0]
 800a48c:	9301      	str	r3, [sp, #4]
 800a48e:	f000 f88f 	bl	800a5b0 <_vfiprintf_r>
 800a492:	b002      	add	sp, #8
 800a494:	f85d eb04 	ldr.w	lr, [sp], #4
 800a498:	b003      	add	sp, #12
 800a49a:	4770      	bx	lr
 800a49c:	20000014 	.word	0x20000014

0800a4a0 <__ascii_mbtowc>:
 800a4a0:	b082      	sub	sp, #8
 800a4a2:	b901      	cbnz	r1, 800a4a6 <__ascii_mbtowc+0x6>
 800a4a4:	a901      	add	r1, sp, #4
 800a4a6:	b142      	cbz	r2, 800a4ba <__ascii_mbtowc+0x1a>
 800a4a8:	b14b      	cbz	r3, 800a4be <__ascii_mbtowc+0x1e>
 800a4aa:	7813      	ldrb	r3, [r2, #0]
 800a4ac:	600b      	str	r3, [r1, #0]
 800a4ae:	7812      	ldrb	r2, [r2, #0]
 800a4b0:	1e10      	subs	r0, r2, #0
 800a4b2:	bf18      	it	ne
 800a4b4:	2001      	movne	r0, #1
 800a4b6:	b002      	add	sp, #8
 800a4b8:	4770      	bx	lr
 800a4ba:	4610      	mov	r0, r2
 800a4bc:	e7fb      	b.n	800a4b6 <__ascii_mbtowc+0x16>
 800a4be:	f06f 0001 	mvn.w	r0, #1
 800a4c2:	e7f8      	b.n	800a4b6 <__ascii_mbtowc+0x16>

0800a4c4 <memmove>:
 800a4c4:	4288      	cmp	r0, r1
 800a4c6:	b510      	push	{r4, lr}
 800a4c8:	eb01 0402 	add.w	r4, r1, r2
 800a4cc:	d902      	bls.n	800a4d4 <memmove+0x10>
 800a4ce:	4284      	cmp	r4, r0
 800a4d0:	4623      	mov	r3, r4
 800a4d2:	d807      	bhi.n	800a4e4 <memmove+0x20>
 800a4d4:	1e43      	subs	r3, r0, #1
 800a4d6:	42a1      	cmp	r1, r4
 800a4d8:	d008      	beq.n	800a4ec <memmove+0x28>
 800a4da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4e2:	e7f8      	b.n	800a4d6 <memmove+0x12>
 800a4e4:	4402      	add	r2, r0
 800a4e6:	4601      	mov	r1, r0
 800a4e8:	428a      	cmp	r2, r1
 800a4ea:	d100      	bne.n	800a4ee <memmove+0x2a>
 800a4ec:	bd10      	pop	{r4, pc}
 800a4ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4f6:	e7f7      	b.n	800a4e8 <memmove+0x24>

0800a4f8 <__malloc_lock>:
 800a4f8:	4801      	ldr	r0, [pc, #4]	; (800a500 <__malloc_lock+0x8>)
 800a4fa:	f000 bc17 	b.w	800ad2c <__retarget_lock_acquire_recursive>
 800a4fe:	bf00      	nop
 800a500:	20004d1c 	.word	0x20004d1c

0800a504 <__malloc_unlock>:
 800a504:	4801      	ldr	r0, [pc, #4]	; (800a50c <__malloc_unlock+0x8>)
 800a506:	f000 bc12 	b.w	800ad2e <__retarget_lock_release_recursive>
 800a50a:	bf00      	nop
 800a50c:	20004d1c 	.word	0x20004d1c

0800a510 <_realloc_r>:
 800a510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a512:	4607      	mov	r7, r0
 800a514:	4614      	mov	r4, r2
 800a516:	460e      	mov	r6, r1
 800a518:	b921      	cbnz	r1, 800a524 <_realloc_r+0x14>
 800a51a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a51e:	4611      	mov	r1, r2
 800a520:	f7ff bdc8 	b.w	800a0b4 <_malloc_r>
 800a524:	b922      	cbnz	r2, 800a530 <_realloc_r+0x20>
 800a526:	f7ff fd75 	bl	800a014 <_free_r>
 800a52a:	4625      	mov	r5, r4
 800a52c:	4628      	mov	r0, r5
 800a52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a530:	f000 fc62 	bl	800adf8 <_malloc_usable_size_r>
 800a534:	42a0      	cmp	r0, r4
 800a536:	d20f      	bcs.n	800a558 <_realloc_r+0x48>
 800a538:	4621      	mov	r1, r4
 800a53a:	4638      	mov	r0, r7
 800a53c:	f7ff fdba 	bl	800a0b4 <_malloc_r>
 800a540:	4605      	mov	r5, r0
 800a542:	2800      	cmp	r0, #0
 800a544:	d0f2      	beq.n	800a52c <_realloc_r+0x1c>
 800a546:	4631      	mov	r1, r6
 800a548:	4622      	mov	r2, r4
 800a54a:	f7fd feb1 	bl	80082b0 <memcpy>
 800a54e:	4631      	mov	r1, r6
 800a550:	4638      	mov	r0, r7
 800a552:	f7ff fd5f 	bl	800a014 <_free_r>
 800a556:	e7e9      	b.n	800a52c <_realloc_r+0x1c>
 800a558:	4635      	mov	r5, r6
 800a55a:	e7e7      	b.n	800a52c <_realloc_r+0x1c>

0800a55c <__sfputc_r>:
 800a55c:	6893      	ldr	r3, [r2, #8]
 800a55e:	3b01      	subs	r3, #1
 800a560:	2b00      	cmp	r3, #0
 800a562:	b410      	push	{r4}
 800a564:	6093      	str	r3, [r2, #8]
 800a566:	da08      	bge.n	800a57a <__sfputc_r+0x1e>
 800a568:	6994      	ldr	r4, [r2, #24]
 800a56a:	42a3      	cmp	r3, r4
 800a56c:	db01      	blt.n	800a572 <__sfputc_r+0x16>
 800a56e:	290a      	cmp	r1, #10
 800a570:	d103      	bne.n	800a57a <__sfputc_r+0x1e>
 800a572:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a576:	f000 b94b 	b.w	800a810 <__swbuf_r>
 800a57a:	6813      	ldr	r3, [r2, #0]
 800a57c:	1c58      	adds	r0, r3, #1
 800a57e:	6010      	str	r0, [r2, #0]
 800a580:	7019      	strb	r1, [r3, #0]
 800a582:	4608      	mov	r0, r1
 800a584:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <__sfputs_r>:
 800a58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58c:	4606      	mov	r6, r0
 800a58e:	460f      	mov	r7, r1
 800a590:	4614      	mov	r4, r2
 800a592:	18d5      	adds	r5, r2, r3
 800a594:	42ac      	cmp	r4, r5
 800a596:	d101      	bne.n	800a59c <__sfputs_r+0x12>
 800a598:	2000      	movs	r0, #0
 800a59a:	e007      	b.n	800a5ac <__sfputs_r+0x22>
 800a59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5a0:	463a      	mov	r2, r7
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f7ff ffda 	bl	800a55c <__sfputc_r>
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	d1f3      	bne.n	800a594 <__sfputs_r+0xa>
 800a5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5b0 <_vfiprintf_r>:
 800a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	460d      	mov	r5, r1
 800a5b6:	b09d      	sub	sp, #116	; 0x74
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	4698      	mov	r8, r3
 800a5bc:	4606      	mov	r6, r0
 800a5be:	b118      	cbz	r0, 800a5c8 <_vfiprintf_r+0x18>
 800a5c0:	6983      	ldr	r3, [r0, #24]
 800a5c2:	b90b      	cbnz	r3, 800a5c8 <_vfiprintf_r+0x18>
 800a5c4:	f000 fb14 	bl	800abf0 <__sinit>
 800a5c8:	4b89      	ldr	r3, [pc, #548]	; (800a7f0 <_vfiprintf_r+0x240>)
 800a5ca:	429d      	cmp	r5, r3
 800a5cc:	d11b      	bne.n	800a606 <_vfiprintf_r+0x56>
 800a5ce:	6875      	ldr	r5, [r6, #4]
 800a5d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5d2:	07d9      	lsls	r1, r3, #31
 800a5d4:	d405      	bmi.n	800a5e2 <_vfiprintf_r+0x32>
 800a5d6:	89ab      	ldrh	r3, [r5, #12]
 800a5d8:	059a      	lsls	r2, r3, #22
 800a5da:	d402      	bmi.n	800a5e2 <_vfiprintf_r+0x32>
 800a5dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5de:	f000 fba5 	bl	800ad2c <__retarget_lock_acquire_recursive>
 800a5e2:	89ab      	ldrh	r3, [r5, #12]
 800a5e4:	071b      	lsls	r3, r3, #28
 800a5e6:	d501      	bpl.n	800a5ec <_vfiprintf_r+0x3c>
 800a5e8:	692b      	ldr	r3, [r5, #16]
 800a5ea:	b9eb      	cbnz	r3, 800a628 <_vfiprintf_r+0x78>
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	f000 f96e 	bl	800a8d0 <__swsetup_r>
 800a5f4:	b1c0      	cbz	r0, 800a628 <_vfiprintf_r+0x78>
 800a5f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5f8:	07dc      	lsls	r4, r3, #31
 800a5fa:	d50e      	bpl.n	800a61a <_vfiprintf_r+0x6a>
 800a5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a600:	b01d      	add	sp, #116	; 0x74
 800a602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a606:	4b7b      	ldr	r3, [pc, #492]	; (800a7f4 <_vfiprintf_r+0x244>)
 800a608:	429d      	cmp	r5, r3
 800a60a:	d101      	bne.n	800a610 <_vfiprintf_r+0x60>
 800a60c:	68b5      	ldr	r5, [r6, #8]
 800a60e:	e7df      	b.n	800a5d0 <_vfiprintf_r+0x20>
 800a610:	4b79      	ldr	r3, [pc, #484]	; (800a7f8 <_vfiprintf_r+0x248>)
 800a612:	429d      	cmp	r5, r3
 800a614:	bf08      	it	eq
 800a616:	68f5      	ldreq	r5, [r6, #12]
 800a618:	e7da      	b.n	800a5d0 <_vfiprintf_r+0x20>
 800a61a:	89ab      	ldrh	r3, [r5, #12]
 800a61c:	0598      	lsls	r0, r3, #22
 800a61e:	d4ed      	bmi.n	800a5fc <_vfiprintf_r+0x4c>
 800a620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a622:	f000 fb84 	bl	800ad2e <__retarget_lock_release_recursive>
 800a626:	e7e9      	b.n	800a5fc <_vfiprintf_r+0x4c>
 800a628:	2300      	movs	r3, #0
 800a62a:	9309      	str	r3, [sp, #36]	; 0x24
 800a62c:	2320      	movs	r3, #32
 800a62e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a632:	f8cd 800c 	str.w	r8, [sp, #12]
 800a636:	2330      	movs	r3, #48	; 0x30
 800a638:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a7fc <_vfiprintf_r+0x24c>
 800a63c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a640:	f04f 0901 	mov.w	r9, #1
 800a644:	4623      	mov	r3, r4
 800a646:	469a      	mov	sl, r3
 800a648:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a64c:	b10a      	cbz	r2, 800a652 <_vfiprintf_r+0xa2>
 800a64e:	2a25      	cmp	r2, #37	; 0x25
 800a650:	d1f9      	bne.n	800a646 <_vfiprintf_r+0x96>
 800a652:	ebba 0b04 	subs.w	fp, sl, r4
 800a656:	d00b      	beq.n	800a670 <_vfiprintf_r+0xc0>
 800a658:	465b      	mov	r3, fp
 800a65a:	4622      	mov	r2, r4
 800a65c:	4629      	mov	r1, r5
 800a65e:	4630      	mov	r0, r6
 800a660:	f7ff ff93 	bl	800a58a <__sfputs_r>
 800a664:	3001      	adds	r0, #1
 800a666:	f000 80aa 	beq.w	800a7be <_vfiprintf_r+0x20e>
 800a66a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a66c:	445a      	add	r2, fp
 800a66e:	9209      	str	r2, [sp, #36]	; 0x24
 800a670:	f89a 3000 	ldrb.w	r3, [sl]
 800a674:	2b00      	cmp	r3, #0
 800a676:	f000 80a2 	beq.w	800a7be <_vfiprintf_r+0x20e>
 800a67a:	2300      	movs	r3, #0
 800a67c:	f04f 32ff 	mov.w	r2, #4294967295
 800a680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a684:	f10a 0a01 	add.w	sl, sl, #1
 800a688:	9304      	str	r3, [sp, #16]
 800a68a:	9307      	str	r3, [sp, #28]
 800a68c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a690:	931a      	str	r3, [sp, #104]	; 0x68
 800a692:	4654      	mov	r4, sl
 800a694:	2205      	movs	r2, #5
 800a696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69a:	4858      	ldr	r0, [pc, #352]	; (800a7fc <_vfiprintf_r+0x24c>)
 800a69c:	f7f5 fda8 	bl	80001f0 <memchr>
 800a6a0:	9a04      	ldr	r2, [sp, #16]
 800a6a2:	b9d8      	cbnz	r0, 800a6dc <_vfiprintf_r+0x12c>
 800a6a4:	06d1      	lsls	r1, r2, #27
 800a6a6:	bf44      	itt	mi
 800a6a8:	2320      	movmi	r3, #32
 800a6aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ae:	0713      	lsls	r3, r2, #28
 800a6b0:	bf44      	itt	mi
 800a6b2:	232b      	movmi	r3, #43	; 0x2b
 800a6b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a6be:	d015      	beq.n	800a6ec <_vfiprintf_r+0x13c>
 800a6c0:	9a07      	ldr	r2, [sp, #28]
 800a6c2:	4654      	mov	r4, sl
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	f04f 0c0a 	mov.w	ip, #10
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6d0:	3b30      	subs	r3, #48	; 0x30
 800a6d2:	2b09      	cmp	r3, #9
 800a6d4:	d94e      	bls.n	800a774 <_vfiprintf_r+0x1c4>
 800a6d6:	b1b0      	cbz	r0, 800a706 <_vfiprintf_r+0x156>
 800a6d8:	9207      	str	r2, [sp, #28]
 800a6da:	e014      	b.n	800a706 <_vfiprintf_r+0x156>
 800a6dc:	eba0 0308 	sub.w	r3, r0, r8
 800a6e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	9304      	str	r3, [sp, #16]
 800a6e8:	46a2      	mov	sl, r4
 800a6ea:	e7d2      	b.n	800a692 <_vfiprintf_r+0xe2>
 800a6ec:	9b03      	ldr	r3, [sp, #12]
 800a6ee:	1d19      	adds	r1, r3, #4
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	9103      	str	r1, [sp, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	bfbb      	ittet	lt
 800a6f8:	425b      	neglt	r3, r3
 800a6fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a6fe:	9307      	strge	r3, [sp, #28]
 800a700:	9307      	strlt	r3, [sp, #28]
 800a702:	bfb8      	it	lt
 800a704:	9204      	strlt	r2, [sp, #16]
 800a706:	7823      	ldrb	r3, [r4, #0]
 800a708:	2b2e      	cmp	r3, #46	; 0x2e
 800a70a:	d10c      	bne.n	800a726 <_vfiprintf_r+0x176>
 800a70c:	7863      	ldrb	r3, [r4, #1]
 800a70e:	2b2a      	cmp	r3, #42	; 0x2a
 800a710:	d135      	bne.n	800a77e <_vfiprintf_r+0x1ce>
 800a712:	9b03      	ldr	r3, [sp, #12]
 800a714:	1d1a      	adds	r2, r3, #4
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	9203      	str	r2, [sp, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bfb8      	it	lt
 800a71e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a722:	3402      	adds	r4, #2
 800a724:	9305      	str	r3, [sp, #20]
 800a726:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a80c <_vfiprintf_r+0x25c>
 800a72a:	7821      	ldrb	r1, [r4, #0]
 800a72c:	2203      	movs	r2, #3
 800a72e:	4650      	mov	r0, sl
 800a730:	f7f5 fd5e 	bl	80001f0 <memchr>
 800a734:	b140      	cbz	r0, 800a748 <_vfiprintf_r+0x198>
 800a736:	2340      	movs	r3, #64	; 0x40
 800a738:	eba0 000a 	sub.w	r0, r0, sl
 800a73c:	fa03 f000 	lsl.w	r0, r3, r0
 800a740:	9b04      	ldr	r3, [sp, #16]
 800a742:	4303      	orrs	r3, r0
 800a744:	3401      	adds	r4, #1
 800a746:	9304      	str	r3, [sp, #16]
 800a748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a74c:	482c      	ldr	r0, [pc, #176]	; (800a800 <_vfiprintf_r+0x250>)
 800a74e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a752:	2206      	movs	r2, #6
 800a754:	f7f5 fd4c 	bl	80001f0 <memchr>
 800a758:	2800      	cmp	r0, #0
 800a75a:	d03f      	beq.n	800a7dc <_vfiprintf_r+0x22c>
 800a75c:	4b29      	ldr	r3, [pc, #164]	; (800a804 <_vfiprintf_r+0x254>)
 800a75e:	bb1b      	cbnz	r3, 800a7a8 <_vfiprintf_r+0x1f8>
 800a760:	9b03      	ldr	r3, [sp, #12]
 800a762:	3307      	adds	r3, #7
 800a764:	f023 0307 	bic.w	r3, r3, #7
 800a768:	3308      	adds	r3, #8
 800a76a:	9303      	str	r3, [sp, #12]
 800a76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a76e:	443b      	add	r3, r7
 800a770:	9309      	str	r3, [sp, #36]	; 0x24
 800a772:	e767      	b.n	800a644 <_vfiprintf_r+0x94>
 800a774:	fb0c 3202 	mla	r2, ip, r2, r3
 800a778:	460c      	mov	r4, r1
 800a77a:	2001      	movs	r0, #1
 800a77c:	e7a5      	b.n	800a6ca <_vfiprintf_r+0x11a>
 800a77e:	2300      	movs	r3, #0
 800a780:	3401      	adds	r4, #1
 800a782:	9305      	str	r3, [sp, #20]
 800a784:	4619      	mov	r1, r3
 800a786:	f04f 0c0a 	mov.w	ip, #10
 800a78a:	4620      	mov	r0, r4
 800a78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a790:	3a30      	subs	r2, #48	; 0x30
 800a792:	2a09      	cmp	r2, #9
 800a794:	d903      	bls.n	800a79e <_vfiprintf_r+0x1ee>
 800a796:	2b00      	cmp	r3, #0
 800a798:	d0c5      	beq.n	800a726 <_vfiprintf_r+0x176>
 800a79a:	9105      	str	r1, [sp, #20]
 800a79c:	e7c3      	b.n	800a726 <_vfiprintf_r+0x176>
 800a79e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e7f0      	b.n	800a78a <_vfiprintf_r+0x1da>
 800a7a8:	ab03      	add	r3, sp, #12
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	462a      	mov	r2, r5
 800a7ae:	4b16      	ldr	r3, [pc, #88]	; (800a808 <_vfiprintf_r+0x258>)
 800a7b0:	a904      	add	r1, sp, #16
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f7fd fe32 	bl	800841c <_printf_float>
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	1c78      	adds	r0, r7, #1
 800a7bc:	d1d6      	bne.n	800a76c <_vfiprintf_r+0x1bc>
 800a7be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7c0:	07d9      	lsls	r1, r3, #31
 800a7c2:	d405      	bmi.n	800a7d0 <_vfiprintf_r+0x220>
 800a7c4:	89ab      	ldrh	r3, [r5, #12]
 800a7c6:	059a      	lsls	r2, r3, #22
 800a7c8:	d402      	bmi.n	800a7d0 <_vfiprintf_r+0x220>
 800a7ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7cc:	f000 faaf 	bl	800ad2e <__retarget_lock_release_recursive>
 800a7d0:	89ab      	ldrh	r3, [r5, #12]
 800a7d2:	065b      	lsls	r3, r3, #25
 800a7d4:	f53f af12 	bmi.w	800a5fc <_vfiprintf_r+0x4c>
 800a7d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7da:	e711      	b.n	800a600 <_vfiprintf_r+0x50>
 800a7dc:	ab03      	add	r3, sp, #12
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	462a      	mov	r2, r5
 800a7e2:	4b09      	ldr	r3, [pc, #36]	; (800a808 <_vfiprintf_r+0x258>)
 800a7e4:	a904      	add	r1, sp, #16
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f7fe f8bc 	bl	8008964 <_printf_i>
 800a7ec:	e7e4      	b.n	800a7b8 <_vfiprintf_r+0x208>
 800a7ee:	bf00      	nop
 800a7f0:	0800b57c 	.word	0x0800b57c
 800a7f4:	0800b59c 	.word	0x0800b59c
 800a7f8:	0800b55c 	.word	0x0800b55c
 800a7fc:	0800b404 	.word	0x0800b404
 800a800:	0800b40e 	.word	0x0800b40e
 800a804:	0800841d 	.word	0x0800841d
 800a808:	0800a58b 	.word	0x0800a58b
 800a80c:	0800b40a 	.word	0x0800b40a

0800a810 <__swbuf_r>:
 800a810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a812:	460e      	mov	r6, r1
 800a814:	4614      	mov	r4, r2
 800a816:	4605      	mov	r5, r0
 800a818:	b118      	cbz	r0, 800a822 <__swbuf_r+0x12>
 800a81a:	6983      	ldr	r3, [r0, #24]
 800a81c:	b90b      	cbnz	r3, 800a822 <__swbuf_r+0x12>
 800a81e:	f000 f9e7 	bl	800abf0 <__sinit>
 800a822:	4b21      	ldr	r3, [pc, #132]	; (800a8a8 <__swbuf_r+0x98>)
 800a824:	429c      	cmp	r4, r3
 800a826:	d12b      	bne.n	800a880 <__swbuf_r+0x70>
 800a828:	686c      	ldr	r4, [r5, #4]
 800a82a:	69a3      	ldr	r3, [r4, #24]
 800a82c:	60a3      	str	r3, [r4, #8]
 800a82e:	89a3      	ldrh	r3, [r4, #12]
 800a830:	071a      	lsls	r2, r3, #28
 800a832:	d52f      	bpl.n	800a894 <__swbuf_r+0x84>
 800a834:	6923      	ldr	r3, [r4, #16]
 800a836:	b36b      	cbz	r3, 800a894 <__swbuf_r+0x84>
 800a838:	6923      	ldr	r3, [r4, #16]
 800a83a:	6820      	ldr	r0, [r4, #0]
 800a83c:	1ac0      	subs	r0, r0, r3
 800a83e:	6963      	ldr	r3, [r4, #20]
 800a840:	b2f6      	uxtb	r6, r6
 800a842:	4283      	cmp	r3, r0
 800a844:	4637      	mov	r7, r6
 800a846:	dc04      	bgt.n	800a852 <__swbuf_r+0x42>
 800a848:	4621      	mov	r1, r4
 800a84a:	4628      	mov	r0, r5
 800a84c:	f000 f93c 	bl	800aac8 <_fflush_r>
 800a850:	bb30      	cbnz	r0, 800a8a0 <__swbuf_r+0x90>
 800a852:	68a3      	ldr	r3, [r4, #8]
 800a854:	3b01      	subs	r3, #1
 800a856:	60a3      	str	r3, [r4, #8]
 800a858:	6823      	ldr	r3, [r4, #0]
 800a85a:	1c5a      	adds	r2, r3, #1
 800a85c:	6022      	str	r2, [r4, #0]
 800a85e:	701e      	strb	r6, [r3, #0]
 800a860:	6963      	ldr	r3, [r4, #20]
 800a862:	3001      	adds	r0, #1
 800a864:	4283      	cmp	r3, r0
 800a866:	d004      	beq.n	800a872 <__swbuf_r+0x62>
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	07db      	lsls	r3, r3, #31
 800a86c:	d506      	bpl.n	800a87c <__swbuf_r+0x6c>
 800a86e:	2e0a      	cmp	r6, #10
 800a870:	d104      	bne.n	800a87c <__swbuf_r+0x6c>
 800a872:	4621      	mov	r1, r4
 800a874:	4628      	mov	r0, r5
 800a876:	f000 f927 	bl	800aac8 <_fflush_r>
 800a87a:	b988      	cbnz	r0, 800a8a0 <__swbuf_r+0x90>
 800a87c:	4638      	mov	r0, r7
 800a87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a880:	4b0a      	ldr	r3, [pc, #40]	; (800a8ac <__swbuf_r+0x9c>)
 800a882:	429c      	cmp	r4, r3
 800a884:	d101      	bne.n	800a88a <__swbuf_r+0x7a>
 800a886:	68ac      	ldr	r4, [r5, #8]
 800a888:	e7cf      	b.n	800a82a <__swbuf_r+0x1a>
 800a88a:	4b09      	ldr	r3, [pc, #36]	; (800a8b0 <__swbuf_r+0xa0>)
 800a88c:	429c      	cmp	r4, r3
 800a88e:	bf08      	it	eq
 800a890:	68ec      	ldreq	r4, [r5, #12]
 800a892:	e7ca      	b.n	800a82a <__swbuf_r+0x1a>
 800a894:	4621      	mov	r1, r4
 800a896:	4628      	mov	r0, r5
 800a898:	f000 f81a 	bl	800a8d0 <__swsetup_r>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d0cb      	beq.n	800a838 <__swbuf_r+0x28>
 800a8a0:	f04f 37ff 	mov.w	r7, #4294967295
 800a8a4:	e7ea      	b.n	800a87c <__swbuf_r+0x6c>
 800a8a6:	bf00      	nop
 800a8a8:	0800b57c 	.word	0x0800b57c
 800a8ac:	0800b59c 	.word	0x0800b59c
 800a8b0:	0800b55c 	.word	0x0800b55c

0800a8b4 <__ascii_wctomb>:
 800a8b4:	b149      	cbz	r1, 800a8ca <__ascii_wctomb+0x16>
 800a8b6:	2aff      	cmp	r2, #255	; 0xff
 800a8b8:	bf85      	ittet	hi
 800a8ba:	238a      	movhi	r3, #138	; 0x8a
 800a8bc:	6003      	strhi	r3, [r0, #0]
 800a8be:	700a      	strbls	r2, [r1, #0]
 800a8c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a8c4:	bf98      	it	ls
 800a8c6:	2001      	movls	r0, #1
 800a8c8:	4770      	bx	lr
 800a8ca:	4608      	mov	r0, r1
 800a8cc:	4770      	bx	lr
	...

0800a8d0 <__swsetup_r>:
 800a8d0:	4b32      	ldr	r3, [pc, #200]	; (800a99c <__swsetup_r+0xcc>)
 800a8d2:	b570      	push	{r4, r5, r6, lr}
 800a8d4:	681d      	ldr	r5, [r3, #0]
 800a8d6:	4606      	mov	r6, r0
 800a8d8:	460c      	mov	r4, r1
 800a8da:	b125      	cbz	r5, 800a8e6 <__swsetup_r+0x16>
 800a8dc:	69ab      	ldr	r3, [r5, #24]
 800a8de:	b913      	cbnz	r3, 800a8e6 <__swsetup_r+0x16>
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	f000 f985 	bl	800abf0 <__sinit>
 800a8e6:	4b2e      	ldr	r3, [pc, #184]	; (800a9a0 <__swsetup_r+0xd0>)
 800a8e8:	429c      	cmp	r4, r3
 800a8ea:	d10f      	bne.n	800a90c <__swsetup_r+0x3c>
 800a8ec:	686c      	ldr	r4, [r5, #4]
 800a8ee:	89a3      	ldrh	r3, [r4, #12]
 800a8f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8f4:	0719      	lsls	r1, r3, #28
 800a8f6:	d42c      	bmi.n	800a952 <__swsetup_r+0x82>
 800a8f8:	06dd      	lsls	r5, r3, #27
 800a8fa:	d411      	bmi.n	800a920 <__swsetup_r+0x50>
 800a8fc:	2309      	movs	r3, #9
 800a8fe:	6033      	str	r3, [r6, #0]
 800a900:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a904:	81a3      	strh	r3, [r4, #12]
 800a906:	f04f 30ff 	mov.w	r0, #4294967295
 800a90a:	e03e      	b.n	800a98a <__swsetup_r+0xba>
 800a90c:	4b25      	ldr	r3, [pc, #148]	; (800a9a4 <__swsetup_r+0xd4>)
 800a90e:	429c      	cmp	r4, r3
 800a910:	d101      	bne.n	800a916 <__swsetup_r+0x46>
 800a912:	68ac      	ldr	r4, [r5, #8]
 800a914:	e7eb      	b.n	800a8ee <__swsetup_r+0x1e>
 800a916:	4b24      	ldr	r3, [pc, #144]	; (800a9a8 <__swsetup_r+0xd8>)
 800a918:	429c      	cmp	r4, r3
 800a91a:	bf08      	it	eq
 800a91c:	68ec      	ldreq	r4, [r5, #12]
 800a91e:	e7e6      	b.n	800a8ee <__swsetup_r+0x1e>
 800a920:	0758      	lsls	r0, r3, #29
 800a922:	d512      	bpl.n	800a94a <__swsetup_r+0x7a>
 800a924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a926:	b141      	cbz	r1, 800a93a <__swsetup_r+0x6a>
 800a928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a92c:	4299      	cmp	r1, r3
 800a92e:	d002      	beq.n	800a936 <__swsetup_r+0x66>
 800a930:	4630      	mov	r0, r6
 800a932:	f7ff fb6f 	bl	800a014 <_free_r>
 800a936:	2300      	movs	r3, #0
 800a938:	6363      	str	r3, [r4, #52]	; 0x34
 800a93a:	89a3      	ldrh	r3, [r4, #12]
 800a93c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a940:	81a3      	strh	r3, [r4, #12]
 800a942:	2300      	movs	r3, #0
 800a944:	6063      	str	r3, [r4, #4]
 800a946:	6923      	ldr	r3, [r4, #16]
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	89a3      	ldrh	r3, [r4, #12]
 800a94c:	f043 0308 	orr.w	r3, r3, #8
 800a950:	81a3      	strh	r3, [r4, #12]
 800a952:	6923      	ldr	r3, [r4, #16]
 800a954:	b94b      	cbnz	r3, 800a96a <__swsetup_r+0x9a>
 800a956:	89a3      	ldrh	r3, [r4, #12]
 800a958:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a95c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a960:	d003      	beq.n	800a96a <__swsetup_r+0x9a>
 800a962:	4621      	mov	r1, r4
 800a964:	4630      	mov	r0, r6
 800a966:	f000 fa07 	bl	800ad78 <__smakebuf_r>
 800a96a:	89a0      	ldrh	r0, [r4, #12]
 800a96c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a970:	f010 0301 	ands.w	r3, r0, #1
 800a974:	d00a      	beq.n	800a98c <__swsetup_r+0xbc>
 800a976:	2300      	movs	r3, #0
 800a978:	60a3      	str	r3, [r4, #8]
 800a97a:	6963      	ldr	r3, [r4, #20]
 800a97c:	425b      	negs	r3, r3
 800a97e:	61a3      	str	r3, [r4, #24]
 800a980:	6923      	ldr	r3, [r4, #16]
 800a982:	b943      	cbnz	r3, 800a996 <__swsetup_r+0xc6>
 800a984:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a988:	d1ba      	bne.n	800a900 <__swsetup_r+0x30>
 800a98a:	bd70      	pop	{r4, r5, r6, pc}
 800a98c:	0781      	lsls	r1, r0, #30
 800a98e:	bf58      	it	pl
 800a990:	6963      	ldrpl	r3, [r4, #20]
 800a992:	60a3      	str	r3, [r4, #8]
 800a994:	e7f4      	b.n	800a980 <__swsetup_r+0xb0>
 800a996:	2000      	movs	r0, #0
 800a998:	e7f7      	b.n	800a98a <__swsetup_r+0xba>
 800a99a:	bf00      	nop
 800a99c:	20000014 	.word	0x20000014
 800a9a0:	0800b57c 	.word	0x0800b57c
 800a9a4:	0800b59c 	.word	0x0800b59c
 800a9a8:	0800b55c 	.word	0x0800b55c

0800a9ac <abort>:
 800a9ac:	b508      	push	{r3, lr}
 800a9ae:	2006      	movs	r0, #6
 800a9b0:	f000 fa52 	bl	800ae58 <raise>
 800a9b4:	2001      	movs	r0, #1
 800a9b6:	f7f7 fa6d 	bl	8001e94 <_exit>
	...

0800a9bc <__sflush_r>:
 800a9bc:	898a      	ldrh	r2, [r1, #12]
 800a9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	0710      	lsls	r0, r2, #28
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	d458      	bmi.n	800aa7c <__sflush_r+0xc0>
 800a9ca:	684b      	ldr	r3, [r1, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	dc05      	bgt.n	800a9dc <__sflush_r+0x20>
 800a9d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	dc02      	bgt.n	800a9dc <__sflush_r+0x20>
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9de:	2e00      	cmp	r6, #0
 800a9e0:	d0f9      	beq.n	800a9d6 <__sflush_r+0x1a>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9e8:	682f      	ldr	r7, [r5, #0]
 800a9ea:	602b      	str	r3, [r5, #0]
 800a9ec:	d032      	beq.n	800aa54 <__sflush_r+0x98>
 800a9ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9f0:	89a3      	ldrh	r3, [r4, #12]
 800a9f2:	075a      	lsls	r2, r3, #29
 800a9f4:	d505      	bpl.n	800aa02 <__sflush_r+0x46>
 800a9f6:	6863      	ldr	r3, [r4, #4]
 800a9f8:	1ac0      	subs	r0, r0, r3
 800a9fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9fc:	b10b      	cbz	r3, 800aa02 <__sflush_r+0x46>
 800a9fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa00:	1ac0      	subs	r0, r0, r3
 800aa02:	2300      	movs	r3, #0
 800aa04:	4602      	mov	r2, r0
 800aa06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa08:	6a21      	ldr	r1, [r4, #32]
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	47b0      	blx	r6
 800aa0e:	1c43      	adds	r3, r0, #1
 800aa10:	89a3      	ldrh	r3, [r4, #12]
 800aa12:	d106      	bne.n	800aa22 <__sflush_r+0x66>
 800aa14:	6829      	ldr	r1, [r5, #0]
 800aa16:	291d      	cmp	r1, #29
 800aa18:	d82c      	bhi.n	800aa74 <__sflush_r+0xb8>
 800aa1a:	4a2a      	ldr	r2, [pc, #168]	; (800aac4 <__sflush_r+0x108>)
 800aa1c:	40ca      	lsrs	r2, r1
 800aa1e:	07d6      	lsls	r6, r2, #31
 800aa20:	d528      	bpl.n	800aa74 <__sflush_r+0xb8>
 800aa22:	2200      	movs	r2, #0
 800aa24:	6062      	str	r2, [r4, #4]
 800aa26:	04d9      	lsls	r1, r3, #19
 800aa28:	6922      	ldr	r2, [r4, #16]
 800aa2a:	6022      	str	r2, [r4, #0]
 800aa2c:	d504      	bpl.n	800aa38 <__sflush_r+0x7c>
 800aa2e:	1c42      	adds	r2, r0, #1
 800aa30:	d101      	bne.n	800aa36 <__sflush_r+0x7a>
 800aa32:	682b      	ldr	r3, [r5, #0]
 800aa34:	b903      	cbnz	r3, 800aa38 <__sflush_r+0x7c>
 800aa36:	6560      	str	r0, [r4, #84]	; 0x54
 800aa38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa3a:	602f      	str	r7, [r5, #0]
 800aa3c:	2900      	cmp	r1, #0
 800aa3e:	d0ca      	beq.n	800a9d6 <__sflush_r+0x1a>
 800aa40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa44:	4299      	cmp	r1, r3
 800aa46:	d002      	beq.n	800aa4e <__sflush_r+0x92>
 800aa48:	4628      	mov	r0, r5
 800aa4a:	f7ff fae3 	bl	800a014 <_free_r>
 800aa4e:	2000      	movs	r0, #0
 800aa50:	6360      	str	r0, [r4, #52]	; 0x34
 800aa52:	e7c1      	b.n	800a9d8 <__sflush_r+0x1c>
 800aa54:	6a21      	ldr	r1, [r4, #32]
 800aa56:	2301      	movs	r3, #1
 800aa58:	4628      	mov	r0, r5
 800aa5a:	47b0      	blx	r6
 800aa5c:	1c41      	adds	r1, r0, #1
 800aa5e:	d1c7      	bne.n	800a9f0 <__sflush_r+0x34>
 800aa60:	682b      	ldr	r3, [r5, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d0c4      	beq.n	800a9f0 <__sflush_r+0x34>
 800aa66:	2b1d      	cmp	r3, #29
 800aa68:	d001      	beq.n	800aa6e <__sflush_r+0xb2>
 800aa6a:	2b16      	cmp	r3, #22
 800aa6c:	d101      	bne.n	800aa72 <__sflush_r+0xb6>
 800aa6e:	602f      	str	r7, [r5, #0]
 800aa70:	e7b1      	b.n	800a9d6 <__sflush_r+0x1a>
 800aa72:	89a3      	ldrh	r3, [r4, #12]
 800aa74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa78:	81a3      	strh	r3, [r4, #12]
 800aa7a:	e7ad      	b.n	800a9d8 <__sflush_r+0x1c>
 800aa7c:	690f      	ldr	r7, [r1, #16]
 800aa7e:	2f00      	cmp	r7, #0
 800aa80:	d0a9      	beq.n	800a9d6 <__sflush_r+0x1a>
 800aa82:	0793      	lsls	r3, r2, #30
 800aa84:	680e      	ldr	r6, [r1, #0]
 800aa86:	bf08      	it	eq
 800aa88:	694b      	ldreq	r3, [r1, #20]
 800aa8a:	600f      	str	r7, [r1, #0]
 800aa8c:	bf18      	it	ne
 800aa8e:	2300      	movne	r3, #0
 800aa90:	eba6 0807 	sub.w	r8, r6, r7
 800aa94:	608b      	str	r3, [r1, #8]
 800aa96:	f1b8 0f00 	cmp.w	r8, #0
 800aa9a:	dd9c      	ble.n	800a9d6 <__sflush_r+0x1a>
 800aa9c:	6a21      	ldr	r1, [r4, #32]
 800aa9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aaa0:	4643      	mov	r3, r8
 800aaa2:	463a      	mov	r2, r7
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	47b0      	blx	r6
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	dc06      	bgt.n	800aaba <__sflush_r+0xfe>
 800aaac:	89a3      	ldrh	r3, [r4, #12]
 800aaae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aab2:	81a3      	strh	r3, [r4, #12]
 800aab4:	f04f 30ff 	mov.w	r0, #4294967295
 800aab8:	e78e      	b.n	800a9d8 <__sflush_r+0x1c>
 800aaba:	4407      	add	r7, r0
 800aabc:	eba8 0800 	sub.w	r8, r8, r0
 800aac0:	e7e9      	b.n	800aa96 <__sflush_r+0xda>
 800aac2:	bf00      	nop
 800aac4:	20400001 	.word	0x20400001

0800aac8 <_fflush_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	690b      	ldr	r3, [r1, #16]
 800aacc:	4605      	mov	r5, r0
 800aace:	460c      	mov	r4, r1
 800aad0:	b913      	cbnz	r3, 800aad8 <_fflush_r+0x10>
 800aad2:	2500      	movs	r5, #0
 800aad4:	4628      	mov	r0, r5
 800aad6:	bd38      	pop	{r3, r4, r5, pc}
 800aad8:	b118      	cbz	r0, 800aae2 <_fflush_r+0x1a>
 800aada:	6983      	ldr	r3, [r0, #24]
 800aadc:	b90b      	cbnz	r3, 800aae2 <_fflush_r+0x1a>
 800aade:	f000 f887 	bl	800abf0 <__sinit>
 800aae2:	4b14      	ldr	r3, [pc, #80]	; (800ab34 <_fflush_r+0x6c>)
 800aae4:	429c      	cmp	r4, r3
 800aae6:	d11b      	bne.n	800ab20 <_fflush_r+0x58>
 800aae8:	686c      	ldr	r4, [r5, #4]
 800aaea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d0ef      	beq.n	800aad2 <_fflush_r+0xa>
 800aaf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aaf4:	07d0      	lsls	r0, r2, #31
 800aaf6:	d404      	bmi.n	800ab02 <_fflush_r+0x3a>
 800aaf8:	0599      	lsls	r1, r3, #22
 800aafa:	d402      	bmi.n	800ab02 <_fflush_r+0x3a>
 800aafc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aafe:	f000 f915 	bl	800ad2c <__retarget_lock_acquire_recursive>
 800ab02:	4628      	mov	r0, r5
 800ab04:	4621      	mov	r1, r4
 800ab06:	f7ff ff59 	bl	800a9bc <__sflush_r>
 800ab0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab0c:	07da      	lsls	r2, r3, #31
 800ab0e:	4605      	mov	r5, r0
 800ab10:	d4e0      	bmi.n	800aad4 <_fflush_r+0xc>
 800ab12:	89a3      	ldrh	r3, [r4, #12]
 800ab14:	059b      	lsls	r3, r3, #22
 800ab16:	d4dd      	bmi.n	800aad4 <_fflush_r+0xc>
 800ab18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab1a:	f000 f908 	bl	800ad2e <__retarget_lock_release_recursive>
 800ab1e:	e7d9      	b.n	800aad4 <_fflush_r+0xc>
 800ab20:	4b05      	ldr	r3, [pc, #20]	; (800ab38 <_fflush_r+0x70>)
 800ab22:	429c      	cmp	r4, r3
 800ab24:	d101      	bne.n	800ab2a <_fflush_r+0x62>
 800ab26:	68ac      	ldr	r4, [r5, #8]
 800ab28:	e7df      	b.n	800aaea <_fflush_r+0x22>
 800ab2a:	4b04      	ldr	r3, [pc, #16]	; (800ab3c <_fflush_r+0x74>)
 800ab2c:	429c      	cmp	r4, r3
 800ab2e:	bf08      	it	eq
 800ab30:	68ec      	ldreq	r4, [r5, #12]
 800ab32:	e7da      	b.n	800aaea <_fflush_r+0x22>
 800ab34:	0800b57c 	.word	0x0800b57c
 800ab38:	0800b59c 	.word	0x0800b59c
 800ab3c:	0800b55c 	.word	0x0800b55c

0800ab40 <std>:
 800ab40:	2300      	movs	r3, #0
 800ab42:	b510      	push	{r4, lr}
 800ab44:	4604      	mov	r4, r0
 800ab46:	e9c0 3300 	strd	r3, r3, [r0]
 800ab4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab4e:	6083      	str	r3, [r0, #8]
 800ab50:	8181      	strh	r1, [r0, #12]
 800ab52:	6643      	str	r3, [r0, #100]	; 0x64
 800ab54:	81c2      	strh	r2, [r0, #14]
 800ab56:	6183      	str	r3, [r0, #24]
 800ab58:	4619      	mov	r1, r3
 800ab5a:	2208      	movs	r2, #8
 800ab5c:	305c      	adds	r0, #92	; 0x5c
 800ab5e:	f7fd fbb5 	bl	80082cc <memset>
 800ab62:	4b05      	ldr	r3, [pc, #20]	; (800ab78 <std+0x38>)
 800ab64:	6263      	str	r3, [r4, #36]	; 0x24
 800ab66:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <std+0x3c>)
 800ab68:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab6a:	4b05      	ldr	r3, [pc, #20]	; (800ab80 <std+0x40>)
 800ab6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab6e:	4b05      	ldr	r3, [pc, #20]	; (800ab84 <std+0x44>)
 800ab70:	6224      	str	r4, [r4, #32]
 800ab72:	6323      	str	r3, [r4, #48]	; 0x30
 800ab74:	bd10      	pop	{r4, pc}
 800ab76:	bf00      	nop
 800ab78:	0800ae91 	.word	0x0800ae91
 800ab7c:	0800aeb3 	.word	0x0800aeb3
 800ab80:	0800aeeb 	.word	0x0800aeeb
 800ab84:	0800af0f 	.word	0x0800af0f

0800ab88 <_cleanup_r>:
 800ab88:	4901      	ldr	r1, [pc, #4]	; (800ab90 <_cleanup_r+0x8>)
 800ab8a:	f000 b8af 	b.w	800acec <_fwalk_reent>
 800ab8e:	bf00      	nop
 800ab90:	0800aac9 	.word	0x0800aac9

0800ab94 <__sfmoreglue>:
 800ab94:	b570      	push	{r4, r5, r6, lr}
 800ab96:	1e4a      	subs	r2, r1, #1
 800ab98:	2568      	movs	r5, #104	; 0x68
 800ab9a:	4355      	muls	r5, r2
 800ab9c:	460e      	mov	r6, r1
 800ab9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aba2:	f7ff fa87 	bl	800a0b4 <_malloc_r>
 800aba6:	4604      	mov	r4, r0
 800aba8:	b140      	cbz	r0, 800abbc <__sfmoreglue+0x28>
 800abaa:	2100      	movs	r1, #0
 800abac:	e9c0 1600 	strd	r1, r6, [r0]
 800abb0:	300c      	adds	r0, #12
 800abb2:	60a0      	str	r0, [r4, #8]
 800abb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abb8:	f7fd fb88 	bl	80082cc <memset>
 800abbc:	4620      	mov	r0, r4
 800abbe:	bd70      	pop	{r4, r5, r6, pc}

0800abc0 <__sfp_lock_acquire>:
 800abc0:	4801      	ldr	r0, [pc, #4]	; (800abc8 <__sfp_lock_acquire+0x8>)
 800abc2:	f000 b8b3 	b.w	800ad2c <__retarget_lock_acquire_recursive>
 800abc6:	bf00      	nop
 800abc8:	20004d20 	.word	0x20004d20

0800abcc <__sfp_lock_release>:
 800abcc:	4801      	ldr	r0, [pc, #4]	; (800abd4 <__sfp_lock_release+0x8>)
 800abce:	f000 b8ae 	b.w	800ad2e <__retarget_lock_release_recursive>
 800abd2:	bf00      	nop
 800abd4:	20004d20 	.word	0x20004d20

0800abd8 <__sinit_lock_acquire>:
 800abd8:	4801      	ldr	r0, [pc, #4]	; (800abe0 <__sinit_lock_acquire+0x8>)
 800abda:	f000 b8a7 	b.w	800ad2c <__retarget_lock_acquire_recursive>
 800abde:	bf00      	nop
 800abe0:	20004d1b 	.word	0x20004d1b

0800abe4 <__sinit_lock_release>:
 800abe4:	4801      	ldr	r0, [pc, #4]	; (800abec <__sinit_lock_release+0x8>)
 800abe6:	f000 b8a2 	b.w	800ad2e <__retarget_lock_release_recursive>
 800abea:	bf00      	nop
 800abec:	20004d1b 	.word	0x20004d1b

0800abf0 <__sinit>:
 800abf0:	b510      	push	{r4, lr}
 800abf2:	4604      	mov	r4, r0
 800abf4:	f7ff fff0 	bl	800abd8 <__sinit_lock_acquire>
 800abf8:	69a3      	ldr	r3, [r4, #24]
 800abfa:	b11b      	cbz	r3, 800ac04 <__sinit+0x14>
 800abfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac00:	f7ff bff0 	b.w	800abe4 <__sinit_lock_release>
 800ac04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac08:	6523      	str	r3, [r4, #80]	; 0x50
 800ac0a:	4b13      	ldr	r3, [pc, #76]	; (800ac58 <__sinit+0x68>)
 800ac0c:	4a13      	ldr	r2, [pc, #76]	; (800ac5c <__sinit+0x6c>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac12:	42a3      	cmp	r3, r4
 800ac14:	bf04      	itt	eq
 800ac16:	2301      	moveq	r3, #1
 800ac18:	61a3      	streq	r3, [r4, #24]
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f000 f820 	bl	800ac60 <__sfp>
 800ac20:	6060      	str	r0, [r4, #4]
 800ac22:	4620      	mov	r0, r4
 800ac24:	f000 f81c 	bl	800ac60 <__sfp>
 800ac28:	60a0      	str	r0, [r4, #8]
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f000 f818 	bl	800ac60 <__sfp>
 800ac30:	2200      	movs	r2, #0
 800ac32:	60e0      	str	r0, [r4, #12]
 800ac34:	2104      	movs	r1, #4
 800ac36:	6860      	ldr	r0, [r4, #4]
 800ac38:	f7ff ff82 	bl	800ab40 <std>
 800ac3c:	68a0      	ldr	r0, [r4, #8]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	2109      	movs	r1, #9
 800ac42:	f7ff ff7d 	bl	800ab40 <std>
 800ac46:	68e0      	ldr	r0, [r4, #12]
 800ac48:	2202      	movs	r2, #2
 800ac4a:	2112      	movs	r1, #18
 800ac4c:	f7ff ff78 	bl	800ab40 <std>
 800ac50:	2301      	movs	r3, #1
 800ac52:	61a3      	str	r3, [r4, #24]
 800ac54:	e7d2      	b.n	800abfc <__sinit+0xc>
 800ac56:	bf00      	nop
 800ac58:	0800b1d8 	.word	0x0800b1d8
 800ac5c:	0800ab89 	.word	0x0800ab89

0800ac60 <__sfp>:
 800ac60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac62:	4607      	mov	r7, r0
 800ac64:	f7ff ffac 	bl	800abc0 <__sfp_lock_acquire>
 800ac68:	4b1e      	ldr	r3, [pc, #120]	; (800ace4 <__sfp+0x84>)
 800ac6a:	681e      	ldr	r6, [r3, #0]
 800ac6c:	69b3      	ldr	r3, [r6, #24]
 800ac6e:	b913      	cbnz	r3, 800ac76 <__sfp+0x16>
 800ac70:	4630      	mov	r0, r6
 800ac72:	f7ff ffbd 	bl	800abf0 <__sinit>
 800ac76:	3648      	adds	r6, #72	; 0x48
 800ac78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	d503      	bpl.n	800ac88 <__sfp+0x28>
 800ac80:	6833      	ldr	r3, [r6, #0]
 800ac82:	b30b      	cbz	r3, 800acc8 <__sfp+0x68>
 800ac84:	6836      	ldr	r6, [r6, #0]
 800ac86:	e7f7      	b.n	800ac78 <__sfp+0x18>
 800ac88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac8c:	b9d5      	cbnz	r5, 800acc4 <__sfp+0x64>
 800ac8e:	4b16      	ldr	r3, [pc, #88]	; (800ace8 <__sfp+0x88>)
 800ac90:	60e3      	str	r3, [r4, #12]
 800ac92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac96:	6665      	str	r5, [r4, #100]	; 0x64
 800ac98:	f000 f847 	bl	800ad2a <__retarget_lock_init_recursive>
 800ac9c:	f7ff ff96 	bl	800abcc <__sfp_lock_release>
 800aca0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aca4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aca8:	6025      	str	r5, [r4, #0]
 800acaa:	61a5      	str	r5, [r4, #24]
 800acac:	2208      	movs	r2, #8
 800acae:	4629      	mov	r1, r5
 800acb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800acb4:	f7fd fb0a 	bl	80082cc <memset>
 800acb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800acbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acc0:	4620      	mov	r0, r4
 800acc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acc4:	3468      	adds	r4, #104	; 0x68
 800acc6:	e7d9      	b.n	800ac7c <__sfp+0x1c>
 800acc8:	2104      	movs	r1, #4
 800acca:	4638      	mov	r0, r7
 800accc:	f7ff ff62 	bl	800ab94 <__sfmoreglue>
 800acd0:	4604      	mov	r4, r0
 800acd2:	6030      	str	r0, [r6, #0]
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d1d5      	bne.n	800ac84 <__sfp+0x24>
 800acd8:	f7ff ff78 	bl	800abcc <__sfp_lock_release>
 800acdc:	230c      	movs	r3, #12
 800acde:	603b      	str	r3, [r7, #0]
 800ace0:	e7ee      	b.n	800acc0 <__sfp+0x60>
 800ace2:	bf00      	nop
 800ace4:	0800b1d8 	.word	0x0800b1d8
 800ace8:	ffff0001 	.word	0xffff0001

0800acec <_fwalk_reent>:
 800acec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acf0:	4606      	mov	r6, r0
 800acf2:	4688      	mov	r8, r1
 800acf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800acf8:	2700      	movs	r7, #0
 800acfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acfe:	f1b9 0901 	subs.w	r9, r9, #1
 800ad02:	d505      	bpl.n	800ad10 <_fwalk_reent+0x24>
 800ad04:	6824      	ldr	r4, [r4, #0]
 800ad06:	2c00      	cmp	r4, #0
 800ad08:	d1f7      	bne.n	800acfa <_fwalk_reent+0xe>
 800ad0a:	4638      	mov	r0, r7
 800ad0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad10:	89ab      	ldrh	r3, [r5, #12]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d907      	bls.n	800ad26 <_fwalk_reent+0x3a>
 800ad16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	d003      	beq.n	800ad26 <_fwalk_reent+0x3a>
 800ad1e:	4629      	mov	r1, r5
 800ad20:	4630      	mov	r0, r6
 800ad22:	47c0      	blx	r8
 800ad24:	4307      	orrs	r7, r0
 800ad26:	3568      	adds	r5, #104	; 0x68
 800ad28:	e7e9      	b.n	800acfe <_fwalk_reent+0x12>

0800ad2a <__retarget_lock_init_recursive>:
 800ad2a:	4770      	bx	lr

0800ad2c <__retarget_lock_acquire_recursive>:
 800ad2c:	4770      	bx	lr

0800ad2e <__retarget_lock_release_recursive>:
 800ad2e:	4770      	bx	lr

0800ad30 <__swhatbuf_r>:
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	460e      	mov	r6, r1
 800ad34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad38:	2900      	cmp	r1, #0
 800ad3a:	b096      	sub	sp, #88	; 0x58
 800ad3c:	4614      	mov	r4, r2
 800ad3e:	461d      	mov	r5, r3
 800ad40:	da07      	bge.n	800ad52 <__swhatbuf_r+0x22>
 800ad42:	2300      	movs	r3, #0
 800ad44:	602b      	str	r3, [r5, #0]
 800ad46:	89b3      	ldrh	r3, [r6, #12]
 800ad48:	061a      	lsls	r2, r3, #24
 800ad4a:	d410      	bmi.n	800ad6e <__swhatbuf_r+0x3e>
 800ad4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad50:	e00e      	b.n	800ad70 <__swhatbuf_r+0x40>
 800ad52:	466a      	mov	r2, sp
 800ad54:	f000 f902 	bl	800af5c <_fstat_r>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	dbf2      	blt.n	800ad42 <__swhatbuf_r+0x12>
 800ad5c:	9a01      	ldr	r2, [sp, #4]
 800ad5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad66:	425a      	negs	r2, r3
 800ad68:	415a      	adcs	r2, r3
 800ad6a:	602a      	str	r2, [r5, #0]
 800ad6c:	e7ee      	b.n	800ad4c <__swhatbuf_r+0x1c>
 800ad6e:	2340      	movs	r3, #64	; 0x40
 800ad70:	2000      	movs	r0, #0
 800ad72:	6023      	str	r3, [r4, #0]
 800ad74:	b016      	add	sp, #88	; 0x58
 800ad76:	bd70      	pop	{r4, r5, r6, pc}

0800ad78 <__smakebuf_r>:
 800ad78:	898b      	ldrh	r3, [r1, #12]
 800ad7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad7c:	079d      	lsls	r5, r3, #30
 800ad7e:	4606      	mov	r6, r0
 800ad80:	460c      	mov	r4, r1
 800ad82:	d507      	bpl.n	800ad94 <__smakebuf_r+0x1c>
 800ad84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad88:	6023      	str	r3, [r4, #0]
 800ad8a:	6123      	str	r3, [r4, #16]
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	6163      	str	r3, [r4, #20]
 800ad90:	b002      	add	sp, #8
 800ad92:	bd70      	pop	{r4, r5, r6, pc}
 800ad94:	ab01      	add	r3, sp, #4
 800ad96:	466a      	mov	r2, sp
 800ad98:	f7ff ffca 	bl	800ad30 <__swhatbuf_r>
 800ad9c:	9900      	ldr	r1, [sp, #0]
 800ad9e:	4605      	mov	r5, r0
 800ada0:	4630      	mov	r0, r6
 800ada2:	f7ff f987 	bl	800a0b4 <_malloc_r>
 800ada6:	b948      	cbnz	r0, 800adbc <__smakebuf_r+0x44>
 800ada8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adac:	059a      	lsls	r2, r3, #22
 800adae:	d4ef      	bmi.n	800ad90 <__smakebuf_r+0x18>
 800adb0:	f023 0303 	bic.w	r3, r3, #3
 800adb4:	f043 0302 	orr.w	r3, r3, #2
 800adb8:	81a3      	strh	r3, [r4, #12]
 800adba:	e7e3      	b.n	800ad84 <__smakebuf_r+0xc>
 800adbc:	4b0d      	ldr	r3, [pc, #52]	; (800adf4 <__smakebuf_r+0x7c>)
 800adbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800adc0:	89a3      	ldrh	r3, [r4, #12]
 800adc2:	6020      	str	r0, [r4, #0]
 800adc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adc8:	81a3      	strh	r3, [r4, #12]
 800adca:	9b00      	ldr	r3, [sp, #0]
 800adcc:	6163      	str	r3, [r4, #20]
 800adce:	9b01      	ldr	r3, [sp, #4]
 800add0:	6120      	str	r0, [r4, #16]
 800add2:	b15b      	cbz	r3, 800adec <__smakebuf_r+0x74>
 800add4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800add8:	4630      	mov	r0, r6
 800adda:	f000 f8d1 	bl	800af80 <_isatty_r>
 800adde:	b128      	cbz	r0, 800adec <__smakebuf_r+0x74>
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	f023 0303 	bic.w	r3, r3, #3
 800ade6:	f043 0301 	orr.w	r3, r3, #1
 800adea:	81a3      	strh	r3, [r4, #12]
 800adec:	89a0      	ldrh	r0, [r4, #12]
 800adee:	4305      	orrs	r5, r0
 800adf0:	81a5      	strh	r5, [r4, #12]
 800adf2:	e7cd      	b.n	800ad90 <__smakebuf_r+0x18>
 800adf4:	0800ab89 	.word	0x0800ab89

0800adf8 <_malloc_usable_size_r>:
 800adf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adfc:	1f18      	subs	r0, r3, #4
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	bfbc      	itt	lt
 800ae02:	580b      	ldrlt	r3, [r1, r0]
 800ae04:	18c0      	addlt	r0, r0, r3
 800ae06:	4770      	bx	lr

0800ae08 <_raise_r>:
 800ae08:	291f      	cmp	r1, #31
 800ae0a:	b538      	push	{r3, r4, r5, lr}
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	460d      	mov	r5, r1
 800ae10:	d904      	bls.n	800ae1c <_raise_r+0x14>
 800ae12:	2316      	movs	r3, #22
 800ae14:	6003      	str	r3, [r0, #0]
 800ae16:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae1e:	b112      	cbz	r2, 800ae26 <_raise_r+0x1e>
 800ae20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae24:	b94b      	cbnz	r3, 800ae3a <_raise_r+0x32>
 800ae26:	4620      	mov	r0, r4
 800ae28:	f000 f830 	bl	800ae8c <_getpid_r>
 800ae2c:	462a      	mov	r2, r5
 800ae2e:	4601      	mov	r1, r0
 800ae30:	4620      	mov	r0, r4
 800ae32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae36:	f000 b817 	b.w	800ae68 <_kill_r>
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d00a      	beq.n	800ae54 <_raise_r+0x4c>
 800ae3e:	1c59      	adds	r1, r3, #1
 800ae40:	d103      	bne.n	800ae4a <_raise_r+0x42>
 800ae42:	2316      	movs	r3, #22
 800ae44:	6003      	str	r3, [r0, #0]
 800ae46:	2001      	movs	r0, #1
 800ae48:	e7e7      	b.n	800ae1a <_raise_r+0x12>
 800ae4a:	2400      	movs	r4, #0
 800ae4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae50:	4628      	mov	r0, r5
 800ae52:	4798      	blx	r3
 800ae54:	2000      	movs	r0, #0
 800ae56:	e7e0      	b.n	800ae1a <_raise_r+0x12>

0800ae58 <raise>:
 800ae58:	4b02      	ldr	r3, [pc, #8]	; (800ae64 <raise+0xc>)
 800ae5a:	4601      	mov	r1, r0
 800ae5c:	6818      	ldr	r0, [r3, #0]
 800ae5e:	f7ff bfd3 	b.w	800ae08 <_raise_r>
 800ae62:	bf00      	nop
 800ae64:	20000014 	.word	0x20000014

0800ae68 <_kill_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4d07      	ldr	r5, [pc, #28]	; (800ae88 <_kill_r+0x20>)
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4604      	mov	r4, r0
 800ae70:	4608      	mov	r0, r1
 800ae72:	4611      	mov	r1, r2
 800ae74:	602b      	str	r3, [r5, #0]
 800ae76:	f7f6 fffd 	bl	8001e74 <_kill>
 800ae7a:	1c43      	adds	r3, r0, #1
 800ae7c:	d102      	bne.n	800ae84 <_kill_r+0x1c>
 800ae7e:	682b      	ldr	r3, [r5, #0]
 800ae80:	b103      	cbz	r3, 800ae84 <_kill_r+0x1c>
 800ae82:	6023      	str	r3, [r4, #0]
 800ae84:	bd38      	pop	{r3, r4, r5, pc}
 800ae86:	bf00      	nop
 800ae88:	20004d14 	.word	0x20004d14

0800ae8c <_getpid_r>:
 800ae8c:	f7f6 bfea 	b.w	8001e64 <_getpid>

0800ae90 <__sread>:
 800ae90:	b510      	push	{r4, lr}
 800ae92:	460c      	mov	r4, r1
 800ae94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae98:	f000 f894 	bl	800afc4 <_read_r>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	bfab      	itete	ge
 800aea0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aea2:	89a3      	ldrhlt	r3, [r4, #12]
 800aea4:	181b      	addge	r3, r3, r0
 800aea6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aeaa:	bfac      	ite	ge
 800aeac:	6563      	strge	r3, [r4, #84]	; 0x54
 800aeae:	81a3      	strhlt	r3, [r4, #12]
 800aeb0:	bd10      	pop	{r4, pc}

0800aeb2 <__swrite>:
 800aeb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb6:	461f      	mov	r7, r3
 800aeb8:	898b      	ldrh	r3, [r1, #12]
 800aeba:	05db      	lsls	r3, r3, #23
 800aebc:	4605      	mov	r5, r0
 800aebe:	460c      	mov	r4, r1
 800aec0:	4616      	mov	r6, r2
 800aec2:	d505      	bpl.n	800aed0 <__swrite+0x1e>
 800aec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec8:	2302      	movs	r3, #2
 800aeca:	2200      	movs	r2, #0
 800aecc:	f000 f868 	bl	800afa0 <_lseek_r>
 800aed0:	89a3      	ldrh	r3, [r4, #12]
 800aed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aeda:	81a3      	strh	r3, [r4, #12]
 800aedc:	4632      	mov	r2, r6
 800aede:	463b      	mov	r3, r7
 800aee0:	4628      	mov	r0, r5
 800aee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aee6:	f000 b817 	b.w	800af18 <_write_r>

0800aeea <__sseek>:
 800aeea:	b510      	push	{r4, lr}
 800aeec:	460c      	mov	r4, r1
 800aeee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef2:	f000 f855 	bl	800afa0 <_lseek_r>
 800aef6:	1c43      	adds	r3, r0, #1
 800aef8:	89a3      	ldrh	r3, [r4, #12]
 800aefa:	bf15      	itete	ne
 800aefc:	6560      	strne	r0, [r4, #84]	; 0x54
 800aefe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af06:	81a3      	strheq	r3, [r4, #12]
 800af08:	bf18      	it	ne
 800af0a:	81a3      	strhne	r3, [r4, #12]
 800af0c:	bd10      	pop	{r4, pc}

0800af0e <__sclose>:
 800af0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af12:	f000 b813 	b.w	800af3c <_close_r>
	...

0800af18 <_write_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4d07      	ldr	r5, [pc, #28]	; (800af38 <_write_r+0x20>)
 800af1c:	4604      	mov	r4, r0
 800af1e:	4608      	mov	r0, r1
 800af20:	4611      	mov	r1, r2
 800af22:	2200      	movs	r2, #0
 800af24:	602a      	str	r2, [r5, #0]
 800af26:	461a      	mov	r2, r3
 800af28:	f7f6 ffdb 	bl	8001ee2 <_write>
 800af2c:	1c43      	adds	r3, r0, #1
 800af2e:	d102      	bne.n	800af36 <_write_r+0x1e>
 800af30:	682b      	ldr	r3, [r5, #0]
 800af32:	b103      	cbz	r3, 800af36 <_write_r+0x1e>
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	bd38      	pop	{r3, r4, r5, pc}
 800af38:	20004d14 	.word	0x20004d14

0800af3c <_close_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	4d06      	ldr	r5, [pc, #24]	; (800af58 <_close_r+0x1c>)
 800af40:	2300      	movs	r3, #0
 800af42:	4604      	mov	r4, r0
 800af44:	4608      	mov	r0, r1
 800af46:	602b      	str	r3, [r5, #0]
 800af48:	f7f6 ffe7 	bl	8001f1a <_close>
 800af4c:	1c43      	adds	r3, r0, #1
 800af4e:	d102      	bne.n	800af56 <_close_r+0x1a>
 800af50:	682b      	ldr	r3, [r5, #0]
 800af52:	b103      	cbz	r3, 800af56 <_close_r+0x1a>
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	bd38      	pop	{r3, r4, r5, pc}
 800af58:	20004d14 	.word	0x20004d14

0800af5c <_fstat_r>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	4d07      	ldr	r5, [pc, #28]	; (800af7c <_fstat_r+0x20>)
 800af60:	2300      	movs	r3, #0
 800af62:	4604      	mov	r4, r0
 800af64:	4608      	mov	r0, r1
 800af66:	4611      	mov	r1, r2
 800af68:	602b      	str	r3, [r5, #0]
 800af6a:	f7f6 ffe2 	bl	8001f32 <_fstat>
 800af6e:	1c43      	adds	r3, r0, #1
 800af70:	d102      	bne.n	800af78 <_fstat_r+0x1c>
 800af72:	682b      	ldr	r3, [r5, #0]
 800af74:	b103      	cbz	r3, 800af78 <_fstat_r+0x1c>
 800af76:	6023      	str	r3, [r4, #0]
 800af78:	bd38      	pop	{r3, r4, r5, pc}
 800af7a:	bf00      	nop
 800af7c:	20004d14 	.word	0x20004d14

0800af80 <_isatty_r>:
 800af80:	b538      	push	{r3, r4, r5, lr}
 800af82:	4d06      	ldr	r5, [pc, #24]	; (800af9c <_isatty_r+0x1c>)
 800af84:	2300      	movs	r3, #0
 800af86:	4604      	mov	r4, r0
 800af88:	4608      	mov	r0, r1
 800af8a:	602b      	str	r3, [r5, #0]
 800af8c:	f7f6 ffe1 	bl	8001f52 <_isatty>
 800af90:	1c43      	adds	r3, r0, #1
 800af92:	d102      	bne.n	800af9a <_isatty_r+0x1a>
 800af94:	682b      	ldr	r3, [r5, #0]
 800af96:	b103      	cbz	r3, 800af9a <_isatty_r+0x1a>
 800af98:	6023      	str	r3, [r4, #0]
 800af9a:	bd38      	pop	{r3, r4, r5, pc}
 800af9c:	20004d14 	.word	0x20004d14

0800afa0 <_lseek_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4d07      	ldr	r5, [pc, #28]	; (800afc0 <_lseek_r+0x20>)
 800afa4:	4604      	mov	r4, r0
 800afa6:	4608      	mov	r0, r1
 800afa8:	4611      	mov	r1, r2
 800afaa:	2200      	movs	r2, #0
 800afac:	602a      	str	r2, [r5, #0]
 800afae:	461a      	mov	r2, r3
 800afb0:	f7f6 ffda 	bl	8001f68 <_lseek>
 800afb4:	1c43      	adds	r3, r0, #1
 800afb6:	d102      	bne.n	800afbe <_lseek_r+0x1e>
 800afb8:	682b      	ldr	r3, [r5, #0]
 800afba:	b103      	cbz	r3, 800afbe <_lseek_r+0x1e>
 800afbc:	6023      	str	r3, [r4, #0]
 800afbe:	bd38      	pop	{r3, r4, r5, pc}
 800afc0:	20004d14 	.word	0x20004d14

0800afc4 <_read_r>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	4d07      	ldr	r5, [pc, #28]	; (800afe4 <_read_r+0x20>)
 800afc8:	4604      	mov	r4, r0
 800afca:	4608      	mov	r0, r1
 800afcc:	4611      	mov	r1, r2
 800afce:	2200      	movs	r2, #0
 800afd0:	602a      	str	r2, [r5, #0]
 800afd2:	461a      	mov	r2, r3
 800afd4:	f7f6 ff68 	bl	8001ea8 <_read>
 800afd8:	1c43      	adds	r3, r0, #1
 800afda:	d102      	bne.n	800afe2 <_read_r+0x1e>
 800afdc:	682b      	ldr	r3, [r5, #0]
 800afde:	b103      	cbz	r3, 800afe2 <_read_r+0x1e>
 800afe0:	6023      	str	r3, [r4, #0]
 800afe2:	bd38      	pop	{r3, r4, r5, pc}
 800afe4:	20004d14 	.word	0x20004d14

0800afe8 <_init>:
 800afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afea:	bf00      	nop
 800afec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afee:	bc08      	pop	{r3}
 800aff0:	469e      	mov	lr, r3
 800aff2:	4770      	bx	lr

0800aff4 <_fini>:
 800aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff6:	bf00      	nop
 800aff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800affa:	bc08      	pop	{r3}
 800affc:	469e      	mov	lr, r3
 800affe:	4770      	bx	lr
