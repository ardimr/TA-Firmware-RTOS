
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a98  08012850  08012850  00022850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080132e8  080132e8  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  080132e8  080132e8  000232e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080132f0  080132f0  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080132f0  080132f0  000232f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080132f4  080132f4  000232f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080132f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057b8  20000200  080134f4  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200059b8  080134f4  000359b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000291da  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050d1  00000000  00000000  00059406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  0005e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d68  00000000  00000000  00060410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da6a  00000000  00000000  00062178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025460  00000000  00000000  0007fbe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad367  00000000  00000000  000a5042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001523a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009af0  00000000  00000000  001523fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012838 	.word	0x08012838

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	08012838 	.word	0x08012838

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <Write_MFRC522>:
 * Return value: None
 */

extern SPI_HandleTypeDef hspi1;

void Write_MFRC522(u_char addr, u_char val) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	u_char addr_bits = (((addr<<1) & 0x7E));
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001016:	b2db      	uxtb	r3, r3
 8001018:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2110      	movs	r1, #16
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <Write_MFRC522+0x58>)
 8001020:	f003 fb76 	bl	8004710 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi1, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8001024:	f107 010f 	add.w	r1, r7, #15
 8001028:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800102c:	2201      	movs	r2, #1
 800102e:	480a      	ldr	r0, [pc, #40]	; (8001058 <Write_MFRC522+0x5c>)
 8001030:	f005 f877 	bl	8006122 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &val, 1, 500);
 8001034:	1db9      	adds	r1, r7, #6
 8001036:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800103a:	2201      	movs	r2, #1
 800103c:	4806      	ldr	r0, [pc, #24]	; (8001058 <Write_MFRC522+0x5c>)
 800103e:	f005 f870 	bl	8006122 <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2110      	movs	r1, #16
 8001046:	4803      	ldr	r0, [pc, #12]	; (8001054 <Write_MFRC522+0x58>)
 8001048:	f003 fb62 	bl	8004710 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40020000 	.word	0x40020000
 8001058:	200051c0 	.word	0x200051c0

0800105c <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	b25b      	sxtb	r3, r3
 800106c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001070:	b25b      	sxtb	r3, r3
 8001072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001076:	b25b      	sxtb	r3, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2110      	movs	r1, #16
 8001080:	480e      	ldr	r0, [pc, #56]	; (80010bc <Read_MFRC522+0x60>)
 8001082:	f003 fb45 	bl	8004710 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi1, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8001086:	f107 010e 	add.w	r1, r7, #14
 800108a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800108e:	2201      	movs	r2, #1
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <Read_MFRC522+0x64>)
 8001092:	f005 f846 	bl	8006122 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, &rx_bits, 1, 500);
 8001096:	f107 010f 	add.w	r1, r7, #15
 800109a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800109e:	2201      	movs	r2, #1
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <Read_MFRC522+0x64>)
 80010a2:	f005 f97a 	bl	800639a <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2110      	movs	r1, #16
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <Read_MFRC522+0x60>)
 80010ac:	f003 fb30 	bl	8004710 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020000 	.word	0x40020000
 80010c0:	200051c0 	.word	0x200051c0

080010c4 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ffc0 	bl	800105c <Read_MFRC522>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff85 	bl	8000ffc <Write_MFRC522>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	460a      	mov	r2, r1
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	4613      	mov	r3, r2
 8001108:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ffa5 	bl	800105c <Read_MFRC522>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001116:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800111a:	43db      	mvns	r3, r3
 800111c:	b25a      	sxtb	r2, r3
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	4013      	ands	r3, r2
 8001124:	b25b      	sxtb	r3, r3
 8001126:	b2da      	uxtb	r2, r3
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff65 	bl	8000ffc <Write_MFRC522>
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 800113e:	2103      	movs	r1, #3
 8001140:	2014      	movs	r0, #20
 8001142:	f7ff ffbf 	bl	80010c4 <SetBitMask>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}

0800114a <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800114e:	210f      	movs	r1, #15
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff ff53 	bl	8000ffc <Write_MFRC522>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2102      	movs	r1, #2
 8001164:	4812      	ldr	r0, [pc, #72]	; (80011b0 <MFRC522_Init+0x54>)
 8001166:	f003 fad3 	bl	8004710 <HAL_GPIO_WritePin>
  MFRC522_Reset();
 800116a:	f7ff ffee 	bl	800114a <MFRC522_Reset>


  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	202a      	movs	r0, #42	; 0x2a
 8001172:	f7ff ff43 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); 	// TModeReg[3..0] + TPrescalerReg
 8001176:	21a9      	movs	r1, #169	; 0xa9
 8001178:	202b      	movs	r0, #43	; 0x2b
 800117a:	f7ff ff3f 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 800117e:	2103      	movs	r1, #3
 8001180:	202d      	movs	r0, #45	; 0x2d
 8001182:	f7ff ff3b 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 8001186:	21e8      	movs	r1, #232	; 0xe8
 8001188:	202c      	movs	r0, #44	; 0x2c
 800118a:	f7ff ff37 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     			// force 100% ASK modulation
 800118e:	2140      	movs	r1, #64	; 0x40
 8001190:	2015      	movs	r0, #21
 8001192:	f7ff ff33 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       			// CRC Initial value 0x6363
 8001196:	213d      	movs	r1, #61	; 0x3d
 8001198:	2011      	movs	r0, #17
 800119a:	f7ff ff2f 	bl	8000ffc <Write_MFRC522>
  Write_MFRC522(RFCfgReg, (0x07<<4)); 			// Set RX Gain to Max
 800119e:	2170      	movs	r1, #112	; 0x70
 80011a0:	2026      	movs	r0, #38	; 0x26
 80011a2:	f7ff ff2b 	bl	8000ffc <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 80011a6:	f7ff ffc8 	bl	800113a <AntennaOn>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40020000 	.word	0x40020000

080011b4 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 80011c0:	2107      	movs	r1, #7
 80011c2:	200d      	movs	r0, #13
 80011c4:	f7ff ff1a 	bl	8000ffc <Write_MFRC522>

  TagType[0] = reqMode;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	79fa      	ldrb	r2, [r7, #7]
 80011cc:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2201      	movs	r2, #1
 80011d8:	6839      	ldr	r1, [r7, #0]
 80011da:	200c      	movs	r0, #12
 80011dc:	f000 f80f 	bl	80011fe <MFRC522_ToCard>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <MFRC522_Request+0x3c>
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	d001      	beq.n	80011f4 <MFRC522_Request+0x40>
    status = MI_ERR;
 80011f0:	2302      	movs	r3, #2
 80011f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 80011fe:	b590      	push	{r4, r7, lr}
 8001200:	b089      	sub	sp, #36	; 0x24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	4613      	mov	r3, r2
 800120e:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 8001210:	2302      	movs	r3, #2
 8001212:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 8001214:	2300      	movs	r3, #0
 8001216:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 8001218:	2300      	movs	r3, #0
 800121a:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b0c      	cmp	r3, #12
 8001220:	d006      	beq.n	8001230 <MFRC522_ToCard+0x32>
 8001222:	2b0e      	cmp	r3, #14
 8001224:	d109      	bne.n	800123a <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8001226:	2312      	movs	r3, #18
 8001228:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 800122a:	2310      	movs	r3, #16
 800122c:	777b      	strb	r3, [r7, #29]
        break;
 800122e:	e005      	b.n	800123c <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 8001230:	2377      	movs	r3, #119	; 0x77
 8001232:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 8001234:	2330      	movs	r3, #48	; 0x30
 8001236:	777b      	strb	r3, [r7, #29]
        break;
 8001238:	e000      	b.n	800123c <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 800123a:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 800123c:	7fbb      	ldrb	r3, [r7, #30]
 800123e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	2002      	movs	r0, #2
 8001248:	f7ff fed8 	bl	8000ffc <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	2004      	movs	r0, #4
 8001250:	f7ff ff53 	bl	80010fa <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 8001254:	2180      	movs	r1, #128	; 0x80
 8001256:	200a      	movs	r0, #10
 8001258:	f7ff ff34 	bl	80010c4 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 800125c:	2100      	movs	r1, #0
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff fecc 	bl	8000ffc <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	e00a      	b.n	8001280 <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	2009      	movs	r0, #9
 8001276:	f7ff fec1 	bl	8000ffc <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	3301      	adds	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	7bbb      	ldrb	r3, [r7, #14]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3f0      	bcc.n	800126a <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	4619      	mov	r1, r3
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff feb5 	bl	8000ffc <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2b0c      	cmp	r3, #12
 8001296:	d103      	bne.n	80012a0 <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	200d      	movs	r0, #13
 800129c:	f7ff ff12 	bl	80010c4 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80012a0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012a4:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 80012a6:	2004      	movs	r0, #4
 80012a8:	f7ff fed8 	bl	800105c <Read_MFRC522>
 80012ac:	4603      	mov	r3, r0
 80012ae:	773b      	strb	r3, [r7, #28]
    i--;
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00a      	beq.n	80012d2 <MFRC522_ToCard+0xd4>
 80012bc:	7f3b      	ldrb	r3, [r7, #28]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d105      	bne.n	80012d2 <MFRC522_ToCard+0xd4>
 80012c6:	7f3a      	ldrb	r2, [r7, #28]
 80012c8:	7f7b      	ldrb	r3, [r7, #29]
 80012ca:	4013      	ands	r3, r2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0e9      	beq.n	80012a6 <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	200d      	movs	r0, #13
 80012d6:	f7ff ff10 	bl	80010fa <ClearBitMask>

  if (i != 0)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d052      	beq.n	8001386 <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 80012e0:	2006      	movs	r0, #6
 80012e2:	f7ff febb 	bl	800105c <Read_MFRC522>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f003 031b 	and.w	r3, r3, #27
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d148      	bne.n	8001382 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 80012f4:	7f3a      	ldrb	r2, [r7, #28]
 80012f6:	7fbb      	ldrb	r3, [r7, #30]
 80012f8:	4013      	ands	r3, r2
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 8001304:	2301      	movs	r3, #1
 8001306:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b0c      	cmp	r3, #12
 800130c:	d13b      	bne.n	8001386 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 800130e:	200a      	movs	r0, #10
 8001310:	f7ff fea4 	bl	800105c <Read_MFRC522>
 8001314:	4603      	mov	r3, r0
 8001316:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001318:	200c      	movs	r0, #12
 800131a:	f7ff fe9f 	bl	800105c <Read_MFRC522>
 800131e:	4603      	mov	r3, r0
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8001326:	7dfb      	ldrb	r3, [r7, #23]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d008      	beq.n	800133e <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 800132c:	7f3b      	ldrb	r3, [r7, #28]
 800132e:	3b01      	subs	r3, #1
 8001330:	00da      	lsls	r2, r3, #3
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	4413      	add	r3, r2
 8001336:	461a      	mov	r2, r3
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e004      	b.n	8001348 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 800133e:	7f3b      	ldrb	r3, [r7, #28]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	461a      	mov	r2, r3
 8001344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001346:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8001348:	7f3b      	ldrb	r3, [r7, #28]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <MFRC522_ToCard+0x154>
        {
          n = 1;
 800134e:	2301      	movs	r3, #1
 8001350:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 8001352:	7f3b      	ldrb	r3, [r7, #28]
 8001354:	2b10      	cmp	r3, #16
 8001356:	d901      	bls.n	800135c <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 8001358:	2310      	movs	r3, #16
 800135a:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	e00a      	b.n	8001378 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	18d4      	adds	r4, r2, r3
 8001368:	2009      	movs	r0, #9
 800136a:	f7ff fe77 	bl	800105c <Read_MFRC522>
 800136e:	4603      	mov	r3, r0
 8001370:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	3301      	adds	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	7f3b      	ldrb	r3, [r7, #28]
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3f0      	bcc.n	8001362 <MFRC522_ToCard+0x164>
 8001380:	e001      	b.n	8001386 <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 8001382:	2302      	movs	r3, #2
 8001384:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8001386:	7ffb      	ldrb	r3, [r7, #31]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3724      	adds	r7, #36	; 0x24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}

08001390 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
 8001396:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 8001398:	2300      	movs	r3, #0
 800139a:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800139c:	2100      	movs	r1, #0
 800139e:	200d      	movs	r0, #13
 80013a0:	f7ff fe2c 	bl	8000ffc <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2293      	movs	r2, #147	; 0x93
 80013a8:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3301      	adds	r3, #1
 80013ae:	2220      	movs	r2, #32
 80013b0:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2202      	movs	r2, #2
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	200c      	movs	r0, #12
 80013c0:	f7ff ff1d 	bl	80011fe <MFRC522_ToCard>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d118      	bne.n	8001400 <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	73bb      	strb	r3, [r7, #14]
 80013d2:	e009      	b.n	80013e8 <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	7b7b      	ldrb	r3, [r7, #13]
 80013de:	4053      	eors	r3, r2
 80013e0:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 80013e2:	7bbb      	ldrb	r3, [r7, #14]
 80013e4:	3301      	adds	r3, #1
 80013e6:	73bb      	strb	r3, [r7, #14]
 80013e8:	7bbb      	ldrb	r3, [r7, #14]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d9f2      	bls.n	80013d4 <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	7b7a      	ldrb	r2, [r7, #13]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d001      	beq.n	8001400 <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 80013fc:	2302      	movs	r3, #2
 80013fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	0000      	movs	r0, r0
 800140c:	0000      	movs	r0, r0
	...

08001410 <RCFilter_Init>:
#include "RCFilter.h"
#include <math.h>

void RCFilter_Init(RCFilter * filter, float cutoffFreqHz, float sampleFreq_Hz){
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	ed87 0a02 	vstr	s0, [r7, #8]
 800141c:	edc7 0a01 	vstr	s1, [r7, #4]
	/*Clear output buffer*/
	filter->out[0] = 0.0f;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
	filter->out[1] = 0.0f;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
	float sampleTime_s = 1.0f/ sampleFreq_Hz;
 8001430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001434:	ed97 7a01 	vldr	s14, [r7, #4]
 8001438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143c:	edc7 7a05 	vstr	s15, [r7, #20]
	/*Compute equivalent RC Constant from cutoff Frequency*/
	float RC = 1.0f/(2* M_PI * cutoffFreqHz);
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f7ff f889 	bl	8000558 <__aeabi_f2d>
 8001446:	a31b      	add	r3, pc, #108	; (adr r3, 80014b4 <RCFilter_Init+0xa4>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f8dc 	bl	8000608 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	f04f 0000 	mov.w	r0, #0
 8001458:	4915      	ldr	r1, [pc, #84]	; (80014b0 <RCFilter_Init+0xa0>)
 800145a:	f7ff f9ff 	bl	800085c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fbc7 	bl	8000bf8 <__aeabi_d2f>
 800146a:	4603      	mov	r3, r0
 800146c:	613b      	str	r3, [r7, #16]
	/*Pre-compute filter coefficient for first order low-pass filter*/
	filter->coeff[0] = sampleTime_s/(sampleTime_s+ RC);
 800146e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001472:	edd7 7a04 	vldr	s15, [r7, #16]
 8001476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147a:	edd7 6a05 	vldr	s13, [r7, #20]
 800147e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	edc3 7a00 	vstr	s15, [r3]
	filter->coeff[1] = RC/(sampleTime_s+RC);
 8001488:	ed97 7a05 	vldr	s14, [r7, #20]
 800148c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001494:	edd7 6a04 	vldr	s13, [r7, #16]
 8001498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a01 	vstr	s15, [r3, #4]

}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	f3af 8000 	nop.w
 80014b0:	3ff00000 	.word	0x3ff00000
 80014b4:	54442d18 	.word	0x54442d18
 80014b8:	401921fb 	.word	0x401921fb

080014bc <RCFilter_Update>:

float RCFilter_Update(RCFilter *filter, float input){
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	ed87 0a00 	vstr	s0, [r7]
	/* Shift output samples */
	filter->out[1] = filter->out[0];
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]

	/* Compute new ouput sample */
	filter->out[0] = filter->coeff[0] * input+filter->coeff[1] * filter->out[1];
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	ed93 7a00 	vldr	s14, [r3]
 80014d6:	edd7 7a00 	vldr	s15, [r7]
 80014da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80014ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Return Filtered sample */
	return filter->out[0];
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	ee07 3a90 	vmov	s15, r3
}
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <MovAvgFilter_init>:

void MovAvgFilter_init(MovAvgFilter * filter){
 800150e:	b480      	push	{r7}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	/*Clear output buffer*/
	filter->out = 0.0f;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	/*clear value*/
	for (int i = 0; i<BUFF_LENGTH; i++){
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	e009      	b.n	800153a <MovAvgFilter_init+0x2c>
		filter -> val[i]= 0;
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<BUFF_LENGTH; i++){
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b31      	cmp	r3, #49	; 0x31
 800153e:	ddf2      	ble.n	8001526 <MovAvgFilter_init+0x18>
	}
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <MovAvgFilter_Update>:

float MovAvgFilter_Update(MovAvgFilter *filter, float input){
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	ed87 0a00 	vstr	s0, [r7]
	/*Shifting Value and calculate the cumulative sum*/
	float sum = 0;
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < BUFF_LENGTH; i++){
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	e019      	b.n	800159c <MovAvgFilter_Update+0x4c>
		filter->val[i] = filter-> val[i+1];
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	3301      	adds	r3, #1
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	601a      	str	r2, [r3, #0]
		sum += filter -> val[i];
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	ed97 7a05 	vldr	s14, [r7, #20]
 800158e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001592:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < BUFF_LENGTH; i++){
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	3301      	adds	r3, #1
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b31      	cmp	r3, #49	; 0x31
 80015a0:	dde2      	ble.n	8001568 <MovAvgFilter_Update+0x18>
	}
	(filter -> val[BUFF_LENGTH-1]) = input;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	sum += input;
 80015aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80015ae:	edd7 7a00 	vldr	s15, [r7]
 80015b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b6:	edc7 7a05 	vstr	s15, [r7, #20]

	/*Calculating the average*/
	float avg = sum/BUFF_LENGTH;
 80015ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80015be:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80015ec <MovAvgFilter_Update+0x9c>
 80015c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c6:	edc7 7a03 	vstr	s15, [r7, #12]
	filter -> out = avg;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	return filter -> out;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80015d8:	ee07 3a90 	vmov	s15, r3
}
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	42480000 	.word	0x42480000

080015f0 <nmea0183_checksum>:
void ADCProcesing(void *argument);

/* USER CODE BEGIN PFP */
// function to calculate checksum of the NMEA sentence
// -4, but not -3 because the NMEA sentences are delimited with \r\n, and there also is the invisible \r in the end
int nmea0183_checksum(char *msg) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	int checksum = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
	// the first $ sign and the last two bytes of original CRC + the * sign
	for (j = 1; j < strlen(msg) - 4; j++) {
 8001600:	2301      	movs	r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	e00a      	b.n	800161c <nmea0183_checksum+0x2c>
		checksum = checksum ^ (unsigned) msg[j];
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4053      	eors	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
	for (j = 1; j < strlen(msg) - 4; j++) {
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3301      	adds	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7fe fddf 	bl	80001e0 <strlen>
 8001622:	4603      	mov	r3, r0
 8001624:	1f1a      	subs	r2, r3, #4
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8ec      	bhi.n	8001606 <nmea0183_checksum+0x16>
	}
	return checksum;
 800162c:	68fb      	ldr	r3, [r7, #12]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  for(int i = 0; i<3; i++){
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	e010      	b.n	8001668 <HAL_ADC_ConvCpltCallback+0x30>
	  value[i] = buffer[i];
 8001646:	4a0d      	ldr	r2, [pc, #52]	; (800167c <HAL_ADC_ConvCpltCallback+0x44>)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_ADC_ConvCpltCallback+0x48>)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i<3; i++){
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3301      	adds	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b02      	cmp	r3, #2
 800166c:	ddeb      	ble.n	8001646 <HAL_ADC_ConvCpltCallback+0xe>
  }
  //Filtering Analog reading
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	2000513c 	.word	0x2000513c
 8001680:	200054a4 	.word	0x200054a4

08001684 <myprintf>:

void myprintf(const char *fmt, ...) {
 8001684:	b40f      	push	{r0, r1, r2, r3}
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800169a:	480b      	ldr	r0, [pc, #44]	; (80016c8 <myprintf+0x44>)
 800169c:	f00e f9c6 	bl	800fa2c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <myprintf+0x44>)
 80016a2:	f7fe fd9d 	bl	80001e0 <strlen>
 80016a6:	4603      	mov	r3, r0
 80016a8:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	4905      	ldr	r1, [pc, #20]	; (80016c8 <myprintf+0x44>)
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <myprintf+0x48>)
 80016b6:	f005 fd20 	bl	80070fa <HAL_UART_Transmit>

}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016c4:	b004      	add	sp, #16
 80016c6:	4770      	bx	lr
 80016c8:	20000234 	.word	0x20000234
 80016cc:	20005218 	.word	0x20005218

080016d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b09a      	sub	sp, #104	; 0x68
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d6:	f001 fd65 	bl	80031a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016da:	f000 f883 	bl	80017e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016de:	f000 fa3b 	bl	8001b58 <MX_GPIO_Init>
  MX_DMA_Init();
 80016e2:	f000 fa11 	bl	8001b08 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016e6:	f000 f9e5 	bl	8001ab4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016ea:	f000 f955 	bl	8001998 <MX_I2C1_Init>
  MX_SPI1_Init();
 80016ee:	f000 f981 	bl	80019f4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80016f2:	f000 f9b5 	bl	8001a60 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80016f6:	f000 f8e1 	bl	80018bc <MX_ADC1_Init>
  MX_FATFS_Init();
 80016fa:	f006 fc1d 	bl	8007f38 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  char txBuffer [100] = {};
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	2260      	movs	r2, #96	; 0x60
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f00c fdd2 	bl	800e2b4 <memset>
  sprintf(txBuffer, "Bismillah..\n");
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	4920      	ldr	r1, [pc, #128]	; (8001794 <main+0xc4>)
 8001714:	4618      	mov	r0, r3
 8001716:	f00d fa3f 	bl	800eb98 <siprintf>
  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 800171a:	1d39      	adds	r1, r7, #4
 800171c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001720:	2264      	movs	r2, #100	; 0x64
 8001722:	481d      	ldr	r0, [pc, #116]	; (8001798 <main+0xc8>)
 8001724:	f005 fce9 	bl	80070fa <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001728:	f009 f9d4 	bl	800aad4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(Display, NULL, &DisplayTask_attributes);
 800172c:	4a1b      	ldr	r2, [pc, #108]	; (800179c <main+0xcc>)
 800172e:	2100      	movs	r1, #0
 8001730:	481b      	ldr	r0, [pc, #108]	; (80017a0 <main+0xd0>)
 8001732:	f009 fa19 	bl	800ab68 <osThreadNew>
 8001736:	4603      	mov	r3, r0
 8001738:	4a1a      	ldr	r2, [pc, #104]	; (80017a4 <main+0xd4>)
 800173a:	6013      	str	r3, [r2, #0]

  /* creation of IMUTask */
  IMUTaskHandle = osThreadNew(IMU, NULL, &IMUTask_attributes);
 800173c:	4a1a      	ldr	r2, [pc, #104]	; (80017a8 <main+0xd8>)
 800173e:	2100      	movs	r1, #0
 8001740:	481a      	ldr	r0, [pc, #104]	; (80017ac <main+0xdc>)
 8001742:	f009 fa11 	bl	800ab68 <osThreadNew>
 8001746:	4603      	mov	r3, r0
 8001748:	4a19      	ldr	r2, [pc, #100]	; (80017b0 <main+0xe0>)
 800174a:	6013      	str	r3, [r2, #0]

  /* creation of GPSTask */
  GPSTaskHandle = osThreadNew(GPS, NULL, &GPSTask_attributes);
 800174c:	4a19      	ldr	r2, [pc, #100]	; (80017b4 <main+0xe4>)
 800174e:	2100      	movs	r1, #0
 8001750:	4819      	ldr	r0, [pc, #100]	; (80017b8 <main+0xe8>)
 8001752:	f009 fa09 	bl	800ab68 <osThreadNew>
 8001756:	4603      	mov	r3, r0
 8001758:	4a18      	ldr	r2, [pc, #96]	; (80017bc <main+0xec>)
 800175a:	6013      	str	r3, [r2, #0]

  /* creation of RFIDTask */
  RFIDTaskHandle = osThreadNew(RFID, NULL, &RFIDTask_attributes);
 800175c:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <main+0xf0>)
 800175e:	2100      	movs	r1, #0
 8001760:	4818      	ldr	r0, [pc, #96]	; (80017c4 <main+0xf4>)
 8001762:	f009 fa01 	bl	800ab68 <osThreadNew>
 8001766:	4603      	mov	r3, r0
 8001768:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <main+0xf8>)
 800176a:	6013      	str	r3, [r2, #0]

  /* creation of SDCardTask */
  SDCardTaskHandle = osThreadNew(SDCard, NULL, &SDCardTask_attributes);
 800176c:	4a17      	ldr	r2, [pc, #92]	; (80017cc <main+0xfc>)
 800176e:	2100      	movs	r1, #0
 8001770:	4817      	ldr	r0, [pc, #92]	; (80017d0 <main+0x100>)
 8001772:	f009 f9f9 	bl	800ab68 <osThreadNew>
 8001776:	4603      	mov	r3, r0
 8001778:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <main+0x104>)
 800177a:	6013      	str	r3, [r2, #0]

  /* creation of ADCProcessingTa */
  ADCProcessingTaHandle = osThreadNew(ADCProcesing, NULL, &ADCProcessingTa_attributes);
 800177c:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <main+0x108>)
 800177e:	2100      	movs	r1, #0
 8001780:	4816      	ldr	r0, [pc, #88]	; (80017dc <main+0x10c>)
 8001782:	f009 f9f1 	bl	800ab68 <osThreadNew>
 8001786:	4603      	mov	r3, r0
 8001788:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <main+0x110>)
 800178a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800178c:	f009 f9c6 	bl	800ab1c <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    /* Infinite loop */

  while (1)
 8001790:	e7fe      	b.n	8001790 <main+0xc0>
 8001792:	bf00      	nop
 8001794:	08012894 	.word	0x08012894
 8001798:	20005218 	.word	0x20005218
 800179c:	08012c68 	.word	0x08012c68
 80017a0:	08001c99 	.word	0x08001c99
 80017a4:	200051bc 	.word	0x200051bc
 80017a8:	08012c8c 	.word	0x08012c8c
 80017ac:	08001d85 	.word	0x08001d85
 80017b0:	20004f24 	.word	0x20004f24
 80017b4:	08012cb0 	.word	0x08012cb0
 80017b8:	08001e19 	.word	0x08001e19
 80017bc:	2000525c 	.word	0x2000525c
 80017c0:	08012cd4 	.word	0x08012cd4
 80017c4:	08002411 	.word	0x08002411
 80017c8:	200051a8 	.word	0x200051a8
 80017cc:	08012cf8 	.word	0x08012cf8
 80017d0:	0800256d 	.word	0x0800256d
 80017d4:	20004c88 	.word	0x20004c88
 80017d8:	08012d1c 	.word	0x08012d1c
 80017dc:	08002741 	.word	0x08002741
 80017e0:	20005138 	.word	0x20005138

080017e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b094      	sub	sp, #80	; 0x50
 80017e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ea:	f107 0320 	add.w	r3, r7, #32
 80017ee:	2230      	movs	r2, #48	; 0x30
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f00c fd5e 	bl	800e2b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <SystemClock_Config+0xd0>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	4a28      	ldr	r2, [pc, #160]	; (80018b4 <SystemClock_Config+0xd0>)
 8001812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001816:	6413      	str	r3, [r2, #64]	; 0x40
 8001818:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <SystemClock_Config+0xd0>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <SystemClock_Config+0xd4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001830:	4a21      	ldr	r2, [pc, #132]	; (80018b8 <SystemClock_Config+0xd4>)
 8001832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <SystemClock_Config+0xd4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001844:	2302      	movs	r3, #2
 8001846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001848:	2301      	movs	r3, #1
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184c:	2310      	movs	r3, #16
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001850:	2302      	movs	r3, #2
 8001852:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001854:	2300      	movs	r3, #0
 8001856:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001858:	2310      	movs	r3, #16
 800185a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800185c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001860:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001862:	2304      	movs	r3, #4
 8001864:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001866:	2307      	movs	r3, #7
 8001868:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186a:	f107 0320 	add.w	r3, r7, #32
 800186e:	4618      	mov	r0, r3
 8001870:	f003 ff28 	bl	80056c4 <HAL_RCC_OscConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800187a:	f000 ffef 	bl	800285c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187e:	230f      	movs	r3, #15
 8001880:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001882:	2302      	movs	r3, #2
 8001884:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800188a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2102      	movs	r1, #2
 800189a:	4618      	mov	r0, r3
 800189c:	f004 f98a 	bl	8005bb4 <HAL_RCC_ClockConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018a6:	f000 ffd9 	bl	800285c <Error_Handler>
  }
}
 80018aa:	bf00      	nop
 80018ac:	3750      	adds	r7, #80	; 0x50
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40007000 	.word	0x40007000

080018bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018c2:	463b      	mov	r3, r7
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018ce:	4b2f      	ldr	r3, [pc, #188]	; (800198c <MX_ADC1_Init+0xd0>)
 80018d0:	4a2f      	ldr	r2, [pc, #188]	; (8001990 <MX_ADC1_Init+0xd4>)
 80018d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018d4:	4b2d      	ldr	r3, [pc, #180]	; (800198c <MX_ADC1_Init+0xd0>)
 80018d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018dc:	4b2b      	ldr	r3, [pc, #172]	; (800198c <MX_ADC1_Init+0xd0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018e2:	4b2a      	ldr	r3, [pc, #168]	; (800198c <MX_ADC1_Init+0xd0>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018e8:	4b28      	ldr	r3, [pc, #160]	; (800198c <MX_ADC1_Init+0xd0>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ee:	4b27      	ldr	r3, [pc, #156]	; (800198c <MX_ADC1_Init+0xd0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018f6:	4b25      	ldr	r3, [pc, #148]	; (800198c <MX_ADC1_Init+0xd0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018fc:	4b23      	ldr	r3, [pc, #140]	; (800198c <MX_ADC1_Init+0xd0>)
 80018fe:	4a25      	ldr	r2, [pc, #148]	; (8001994 <MX_ADC1_Init+0xd8>)
 8001900:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <MX_ADC1_Init+0xd0>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001908:	4b20      	ldr	r3, [pc, #128]	; (800198c <MX_ADC1_Init+0xd0>)
 800190a:	2203      	movs	r2, #3
 800190c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800190e:	4b1f      	ldr	r3, [pc, #124]	; (800198c <MX_ADC1_Init+0xd0>)
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <MX_ADC1_Init+0xd0>)
 8001918:	2201      	movs	r2, #1
 800191a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800191c:	481b      	ldr	r0, [pc, #108]	; (800198c <MX_ADC1_Init+0xd0>)
 800191e:	f001 fca7 	bl	8003270 <HAL_ADC_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001928:	f000 ff98 	bl	800285c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800192c:	230f      	movs	r3, #15
 800192e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001930:	2301      	movs	r3, #1
 8001932:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001934:	2307      	movs	r3, #7
 8001936:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001938:	463b      	mov	r3, r7
 800193a:	4619      	mov	r1, r3
 800193c:	4813      	ldr	r0, [pc, #76]	; (800198c <MX_ADC1_Init+0xd0>)
 800193e:	f001 fddf 	bl	8003500 <HAL_ADC_ConfigChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001948:	f000 ff88 	bl	800285c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800194c:	2308      	movs	r3, #8
 800194e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001950:	2302      	movs	r3, #2
 8001952:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001954:	463b      	mov	r3, r7
 8001956:	4619      	mov	r1, r3
 8001958:	480c      	ldr	r0, [pc, #48]	; (800198c <MX_ADC1_Init+0xd0>)
 800195a:	f001 fdd1 	bl	8003500 <HAL_ADC_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001964:	f000 ff7a 	bl	800285c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001968:	2309      	movs	r3, #9
 800196a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800196c:	2303      	movs	r3, #3
 800196e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_ADC1_Init+0xd0>)
 8001976:	f001 fdc3 	bl	8003500 <HAL_ADC_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001980:	f000 ff6c 	bl	800285c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	2000504c 	.word	0x2000504c
 8001990:	40012000 	.word	0x40012000
 8001994:	0f000001 	.word	0x0f000001

08001998 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_I2C1_Init+0x50>)
 800199e:	4a13      	ldr	r2, [pc, #76]	; (80019ec <MX_I2C1_Init+0x54>)
 80019a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019a4:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <MX_I2C1_Init+0x58>)
 80019a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019be:	2200      	movs	r2, #0
 80019c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019d6:	f002 feb5 	bl	8004744 <HAL_I2C_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019e0:	f000 ff3c 	bl	800285c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20004ed0 	.word	0x20004ed0
 80019ec:	40005400 	.word	0x40005400
 80019f0:	000186a0 	.word	0x000186a0

080019f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <MX_SPI1_Init+0x64>)
 80019fa:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <MX_SPI1_Init+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <MX_SPI1_Init+0x64>)
 8001a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_SPI1_Init+0x64>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <MX_SPI1_Init+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_SPI1_Init+0x64>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <MX_SPI1_Init+0x64>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_SPI1_Init+0x64>)
 8001a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_SPI1_Init+0x64>)
 8001a28:	2230      	movs	r2, #48	; 0x30
 8001a2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <MX_SPI1_Init+0x64>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_SPI1_Init+0x64>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <MX_SPI1_Init+0x64>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_SPI1_Init+0x64>)
 8001a40:	220a      	movs	r2, #10
 8001a42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a44:	4804      	ldr	r0, [pc, #16]	; (8001a58 <MX_SPI1_Init+0x64>)
 8001a46:	f004 fae3 	bl	8006010 <HAL_SPI_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a50:	f000 ff04 	bl	800285c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200051c0 	.word	0x200051c0
 8001a5c:	40013000 	.word	0x40013000

08001a60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <MX_USART1_UART_Init+0x50>)
 8001a68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a86:	220c      	movs	r2, #12
 8001a88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a98:	f005 fae2 	bl	8007060 <HAL_UART_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aa2:	f000 fedb 	bl	800285c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200050f4 	.word	0x200050f4
 8001ab0:	40011000 	.word	0x40011000

08001ab4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <MX_USART2_UART_Init+0x50>)
 8001abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001aec:	f005 fab8 	bl	8007060 <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001af6:	f000 feb1 	bl	800285c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20005218 	.word	0x20005218
 8001b04:	40004400 	.word	0x40004400

08001b08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_DMA_Init+0x4c>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <MX_DMA_Init+0x4c>)
 8001b18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <MX_DMA_Init+0x4c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2105      	movs	r1, #5
 8001b2e:	2038      	movs	r0, #56	; 0x38
 8001b30:	f002 f83e 	bl	8003bb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b34:	2038      	movs	r0, #56	; 0x38
 8001b36:	f002 f857 	bl	8003be8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2105      	movs	r1, #5
 8001b3e:	203a      	movs	r0, #58	; 0x3a
 8001b40:	f002 f836 	bl	8003bb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b44:	203a      	movs	r0, #58	; 0x3a
 8001b46:	f002 f84f 	bl	8003be8 <HAL_NVIC_EnableIRQ>

}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800

08001b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
 8001b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <MX_GPIO_Init+0x12c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a43      	ldr	r2, [pc, #268]	; (8001c84 <MX_GPIO_Init+0x12c>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <MX_GPIO_Init+0x12c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <MX_GPIO_Init+0x12c>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a3c      	ldr	r2, [pc, #240]	; (8001c84 <MX_GPIO_Init+0x12c>)
 8001b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b3a      	ldr	r3, [pc, #232]	; (8001c84 <MX_GPIO_Init+0x12c>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <MX_GPIO_Init+0x12c>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a35      	ldr	r2, [pc, #212]	; (8001c84 <MX_GPIO_Init+0x12c>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <MX_GPIO_Init+0x12c>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <MX_GPIO_Init+0x12c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a2e      	ldr	r2, [pc, #184]	; (8001c84 <MX_GPIO_Init+0x12c>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <MX_GPIO_Init+0x12c>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFID_RST_Pin|RFID_CS_Pin, GPIO_PIN_SET);
 8001bde:	2201      	movs	r2, #1
 8001be0:	2112      	movs	r1, #18
 8001be2:	4829      	ldr	r0, [pc, #164]	; (8001c88 <MX_GPIO_Init+0x130>)
 8001be4:	f002 fd94 	bl	8004710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|POWER_SEL_Pin|IGNITION_LOGIC_Pin, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 7144 	mov.w	r1, #784	; 0x310
 8001bee:	4827      	ldr	r0, [pc, #156]	; (8001c8c <MX_GPIO_Init+0x134>)
 8001bf0:	f002 fd8e 	bl	8004710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bfa:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <MX_GPIO_Init+0x138>)
 8001bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	4820      	ldr	r0, [pc, #128]	; (8001c8c <MX_GPIO_Init+0x134>)
 8001c0a:	f002 fbfd 	bl	8004408 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_RST_Pin RFID_CS_Pin */
  GPIO_InitStruct.Pin = RFID_RST_Pin|RFID_CS_Pin;
 8001c0e:	2312      	movs	r3, #18
 8001c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c16:	2301      	movs	r3, #1
 8001c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	4818      	ldr	r0, [pc, #96]	; (8001c88 <MX_GPIO_Init+0x130>)
 8001c26:	f002 fbef 	bl	8004408 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin POWER_SEL_Pin IGNITION_LOGIC_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|POWER_SEL_Pin|IGNITION_LOGIC_Pin;
 8001c2a:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c30:	2301      	movs	r3, #1
 8001c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	4812      	ldr	r0, [pc, #72]	; (8001c8c <MX_GPIO_Init+0x134>)
 8001c44:	f002 fbe0 	bl	8004408 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHARGING_SIGNAL_Pin */
  GPIO_InitStruct.Pin = CHARGING_SIGNAL_Pin;
 8001c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHARGING_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	480d      	ldr	r0, [pc, #52]	; (8001c94 <MX_GPIO_Init+0x13c>)
 8001c5e:	f002 fbd3 	bl	8004408 <HAL_GPIO_Init>

  /*Configure GPIO pin : IGNITION_SIGNAL_Pin */
  GPIO_InitStruct.Pin = IGNITION_SIGNAL_Pin;
 8001c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IGNITION_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	4804      	ldr	r0, [pc, #16]	; (8001c88 <MX_GPIO_Init+0x130>)
 8001c78:	f002 fbc6 	bl	8004408 <HAL_GPIO_Init>

}
 8001c7c:	bf00      	nop
 8001c7e:	3728      	adds	r7, #40	; 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	40020800 	.word	0x40020800
 8001c90:	10210000 	.word	0x10210000
 8001c94:	40020400 	.word	0x40020400

08001c98 <Display>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Display */
void Display(void *argument)
{
 8001c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c9c:	b0c3      	sub	sp, #268	; 0x10c
 8001c9e:	af0a      	add	r7, sp, #40	; 0x28
 8001ca0:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN 5 */
	char txBuffer [200] = {};
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	f107 0318 	add.w	r3, r7, #24
 8001caa:	22c4      	movs	r2, #196	; 0xc4
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f00c fb00 	bl	800e2b4 <memset>
	sprintf(txBuffer, "Running Display Task..\n");
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	492b      	ldr	r1, [pc, #172]	; (8001d68 <Display+0xd0>)
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f00c ff6c 	bl	800eb98 <siprintf>
  /* Infinite loop */
	uint8_t identification = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  for(;;)
  {
	  //Identification Check
	  if (identification == 1){
 8001cc6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d106      	bne.n	8001cdc <Display+0x44>
		  xTaskNotifyGive(IMUTaskHandle);
 8001cce:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <Display+0xd4>)
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	f00b fa1c 	bl	800d114 <xTaskGenericNotify>
	  }

	  if(UID[0]== 0x29){ // Need to add driver database
 8001cdc:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <Display+0xd8>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b29      	cmp	r3, #41	; 0x29
 8001ce2:	d103      	bne.n	8001cec <Display+0x54>
		  identification = 1;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8001cea:	e002      	b.n	8001cf2 <Display+0x5a>
	  } else {
		  identification = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	  }
	  //End of Identification Check
	  sprintf(txBuffer,"ID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f\n",
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <Display+0xd8>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
	  sprintf(txBuffer,"ID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f\n",
 8001cf6:	60bb      	str	r3, [r7, #8]
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <Display+0xd8>)
 8001cfa:	785b      	ldrb	r3, [r3, #1]
	  sprintf(txBuffer,"ID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f\n",
 8001cfc:	607b      	str	r3, [r7, #4]
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <Display+0xd8>)
 8001d00:	789b      	ldrb	r3, [r3, #2]
	  sprintf(txBuffer,"ID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f\n",
 8001d02:	461e      	mov	r6, r3
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001d04:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <Display+0xd8>)
 8001d06:	78db      	ldrb	r3, [r3, #3]
	  sprintf(txBuffer,"ID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f\n",
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <Display+0xdc>)
 8001d0c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <Display+0xdc>)
 8001d12:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <Display+0xdc>)
 8001d18:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
			  UID[0],UID[1],UID[2],UID[3], MPU6050.Ax, MPU6050.Ay,MPU6050.Az,MAFiltFuel.out);
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <Display+0xe0>)
 8001d1e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
	  sprintf(txBuffer,"ID : %x-%x-%x-%x\tAx = %.2f Ay = %.2f Az = %.2f Fuel : %.2f\n",
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fc18 	bl	8000558 <__aeabi_f2d>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	f107 0014 	add.w	r0, r7, #20
 8001d30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d34:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001d38:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001d3c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001d40:	6839      	ldr	r1, [r7, #0]
 8001d42:	9101      	str	r1, [sp, #4]
 8001d44:	9600      	str	r6, [sp, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	490c      	ldr	r1, [pc, #48]	; (8001d7c <Display+0xe4>)
 8001d4c:	f00c ff24 	bl	800eb98 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
 8001d50:	f107 0114 	add.w	r1, r7, #20
 8001d54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d58:	22c8      	movs	r2, #200	; 0xc8
 8001d5a:	4809      	ldr	r0, [pc, #36]	; (8001d80 <Display+0xe8>)
 8001d5c:	f005 f9cd 	bl	80070fa <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(10);
 8001d60:	200a      	movs	r0, #10
 8001d62:	f008 ff93 	bl	800ac8c <osDelay>
	  if (identification == 1){
 8001d66:	e7ae      	b.n	8001cc6 <Display+0x2e>
 8001d68:	080128a4 	.word	0x080128a4
 8001d6c:	20004f24 	.word	0x20004f24
 8001d70:	2000021c 	.word	0x2000021c
 8001d74:	20004f28 	.word	0x20004f28
 8001d78:	20004f80 	.word	0x20004f80
 8001d7c:	080128bc 	.word	0x080128bc
 8001d80:	20005218 	.word	0x20005218

08001d84 <IMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IMU */
void IMU(void *argument)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b09c      	sub	sp, #112	; 0x70
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IMU */
	char txBuffer[100]= {};
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	2260      	movs	r2, #96	; 0x60
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f00c fa8b 	bl	800e2b4 <memset>
	sprintf(txBuffer, "Running IMU Task..\n");
 8001d9e:	f107 0308 	add.w	r3, r7, #8
 8001da2:	4918      	ldr	r1, [pc, #96]	; (8001e04 <IMU+0x80>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f00c fef7 	bl	800eb98 <siprintf>

	uint8_t ID = MPU6050_Init(&hi2c1);
 8001daa:	4817      	ldr	r0, [pc, #92]	; (8001e08 <IMU+0x84>)
 8001dac:	f000 fd5b 	bl	8002866 <MPU6050_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(txBuffer,"Id : %d Initialization Success .. \n", ID);
 8001db6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	4913      	ldr	r1, [pc, #76]	; (8001e0c <IMU+0x88>)
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f00c fee9 	bl	800eb98 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, sizeof(txBuffer), 100);
 8001dc6:	f107 0108 	add.w	r1, r7, #8
 8001dca:	2364      	movs	r3, #100	; 0x64
 8001dcc:	2264      	movs	r2, #100	; 0x64
 8001dce:	4810      	ldr	r0, [pc, #64]	; (8001e10 <IMU+0x8c>)
 8001dd0:	f005 f993 	bl	80070fa <HAL_UART_Transmit>
	//Clearing Buffer
	memset(txBuffer,0,sizeof(txBuffer));
 8001dd4:	f107 0308 	add.w	r3, r7, #8
 8001dd8:	2264      	movs	r2, #100	; 0x64
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f00c fa69 	bl	800e2b4 <memset>
	osDelay(200);
 8001de2:	20c8      	movs	r0, #200	; 0xc8
 8001de4:	f008 ff52 	bl	800ac8c <osDelay>
  /* Infinite loop */
  for(;;)
  {
	//Blocking Until Notified
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	2001      	movs	r0, #1
 8001dee:	f00b f949 	bl	800d084 <ulTaskNotifyTake>
	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <IMU+0x90>)
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <IMU+0x84>)
 8001df6:	f000 fdaf 	bl	8002958 <MPU6050_Read_Accel>
//	sprintf(txBuffer,"Ax = %.2f Ay = %.2f Az = %.2f\n", MPU6050.Ax, MPU6050.Ay,MPU6050.Az );
//	HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 500);
    osDelay(50);
 8001dfa:	2032      	movs	r0, #50	; 0x32
 8001dfc:	f008 ff46 	bl	800ac8c <osDelay>
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8001e00:	e7f2      	b.n	8001de8 <IMU+0x64>
 8001e02:	bf00      	nop
 8001e04:	080128f8 	.word	0x080128f8
 8001e08:	20004ed0 	.word	0x20004ed0
 8001e0c:	0801290c 	.word	0x0801290c
 8001e10:	20005218 	.word	0x20005218
 8001e14:	20004f28 	.word	0x20004f28

08001e18 <GPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPS */
void GPS(void *argument)
{
 8001e18:	b5b0      	push	{r4, r5, r7, lr}
 8001e1a:	f5ad 7d6e 	sub.w	sp, sp, #952	; 0x3b8
 8001e1e:	af04      	add	r7, sp, #16
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	6018      	str	r0, [r3, #0]

	  char hH[2]; // hours
	  char mM[2]; // minutes
	  char sS[2]; // seconds

	  uint8_t cnt = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393

	  HAL_UART_Receive_DMA(&huart1, buff, 255);
 8001e2a:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8001e2e:	22ff      	movs	r2, #255	; 0xff
 8001e30:	4619      	mov	r1, r3
 8001e32:	487b      	ldr	r0, [pc, #492]	; (8002020 <GPS+0x208>)
 8001e34:	f005 f9f3 	bl	800721e <HAL_UART_Receive_DMA>

	  HAL_UART_Transmit(&huart2, (unsigned char *) "Start\n", 6, 500);
 8001e38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e3c:	2206      	movs	r2, #6
 8001e3e:	4979      	ldr	r1, [pc, #484]	; (8002024 <GPS+0x20c>)
 8001e40:	4879      	ldr	r0, [pc, #484]	; (8002028 <GPS+0x210>)
 8001e42:	f005 f95a 	bl	80070fa <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  char txBuffer[200] = {};
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	3304      	adds	r3, #4
 8001e50:	22c4      	movs	r2, #196	; 0xc4
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f00c fa2d 	bl	800e2b4 <memset>
	  sprintf(txBuffer,"\nFlag : %d", flag);
 8001e5a:	4b74      	ldr	r3, [pc, #464]	; (800202c <GPS+0x214>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	4972      	ldr	r1, [pc, #456]	; (8002030 <GPS+0x218>)
 8001e66:	4618      	mov	r0, r3
 8001e68:	f00c fe96 	bl	800eb98 <siprintf>
	  //	  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
	  if (flag) {
 8001e6c:	4b6f      	ldr	r3, [pc, #444]	; (800202c <GPS+0x214>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 82c7 	beq.w	8002404 <GPS+0x5ec>
	  	memset(buffStr, 0, 255);
 8001e76:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001e7a:	22ff      	movs	r2, #255	; 0xff
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f00c fa18 	bl	800e2b4 <memset>
	  	sprintf(buffStr, "%s", buff);
 8001e84:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8001e88:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001e8c:	4969      	ldr	r1, [pc, #420]	; (8002034 <GPS+0x21c>)
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f00c fe82 	bl	800eb98 <siprintf>
	  //HAL_UART_Transmit(&huart2, (uint8_t *)buffStr, sizeof(buffStr), 70);
	  // splitting the buffStr by the "\n" delimiter with the strsep() C function
	  // see http://www.manpagez.com/man/3/strsep/
	  	char *token, *string;
	  	// actually splitting the string by "\n" delimiter
	  	string = strdup(buffStr);
 8001e94:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f00c fec1 	bl	800ec20 <strdup>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ea6:	601a      	str	r2, [r3, #0]
	  	while ((token = strsep(&string, "\n")) != NULL) {
 8001ea8:	e281      	b.n	80023ae <GPS+0x596>
	  		memset(nmeaSnt, 0, 80);
 8001eaa:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001eae:	2250      	movs	r2, #80	; 0x50
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f00c f9fe 	bl	800e2b4 <memset>
	  		sprintf(nmeaSnt, "%s", token);
 8001eb8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001ebc:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8001ec0:	495c      	ldr	r1, [pc, #368]	; (8002034 <GPS+0x21c>)
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f00c fe68 	bl	800eb98 <siprintf>

	  		memset(txBuffer,0,sizeof(txBuffer));
 8001ec8:	f107 030c 	add.w	r3, r7, #12
 8001ecc:	22c8      	movs	r2, #200	; 0xc8
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f00c f9ef 	bl	800e2b4 <memset>
	  //HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 100);
	  // selecting only $GNGLL sentences, combined GPS and GLONAS
	  // on my GPS sensor this good NMEA sentence is always 50 characters
	  		if ((strstr(nmeaSnt, "$GPGGA") != 0) && (strlen(nmeaSnt) > 49) &&(strlen(nmeaSnt) <90) && strstr(nmeaSnt, "*") != 0) {
 8001ed6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001eda:	4957      	ldr	r1, [pc, #348]	; (8002038 <GPS+0x220>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	f00c fed4 	bl	800ec8a <strstr>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8262 	beq.w	80023ae <GPS+0x596>
 8001eea:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe f976 	bl	80001e0 <strlen>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b31      	cmp	r3, #49	; 0x31
 8001ef8:	f240 8259 	bls.w	80023ae <GPS+0x596>
 8001efc:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe f96d 	bl	80001e0 <strlen>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b59      	cmp	r3, #89	; 0x59
 8001f0a:	f200 8250 	bhi.w	80023ae <GPS+0x596>
 8001f0e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f12:	212a      	movs	r1, #42	; 0x2a
 8001f14:	4618      	mov	r0, r3
 8001f16:	f00c fe6e 	bl	800ebf6 <strchr>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 8246 	beq.w	80023ae <GPS+0x596>
	  			rawSum = strstr(nmeaSnt, "*");
 8001f22:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f26:	212a      	movs	r1, #42	; 0x2a
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f00c fe64 	bl	800ebf6 <strchr>
 8001f2e:	f8c7 0384 	str.w	r0, [r7, #900]	; 0x384
	  			memcpy(smNmbr, &rawSum[1], 2);
 8001f32:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8001f36:	3301      	adds	r3, #1
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f40:	801a      	strh	r2, [r3, #0]
	  			smNmbr[2] = '\0';
 8001f42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f46:	2200      	movs	r2, #0
 8001f48:	709a      	strb	r2, [r3, #2]

	  			uint8_t intSum = nmea0183_checksum(nmeaSnt);
 8001f4a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fb4e 	bl	80015f0 <nmea0183_checksum>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f887 3383 	strb.w	r3, [r7, #899]	; 0x383
	  			char hex[2];
	  			// "%X" unsigned hexadecimal integer (capital letters)
	  			sprintf(hex, "%X", intSum);
 8001f5a:	f897 2383 	ldrb.w	r2, [r7, #899]	; 0x383
 8001f5e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f62:	4936      	ldr	r1, [pc, #216]	; (800203c <GPS+0x224>)
 8001f64:	4618      	mov	r0, r3
 8001f66:	f00c fe17 	bl	800eb98 <siprintf>

	  			// checksum data verification, if OK, then we can really trust
	  			// the data in the the NMEA sentence
	  			if (strstr(smNmbr, hex) != NULL) {
 8001f6a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8001f6e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f00c fe88 	bl	800ec8a <strstr>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8216 	beq.w	80023ae <GPS+0x596>
	  				cnt = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
	  //			sprintf(txBuffer,"pV : %s\n", pV);
	  			// splitting the good NMEA sentence into the tokens by the comma delimiter
	  				for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8001f88:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f8c:	492c      	ldr	r1, [pc, #176]	; (8002040 <GPS+0x228>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f00d fcc4 	bl	800f91c <strtok>
 8001f94:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
 8001f98:	e069      	b.n	800206e <GPS+0x256>
	  					memset(txBuffer,0,sizeof(txBuffer));
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	22c8      	movs	r2, #200	; 0xc8
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f00c f986 	bl	800e2b4 <memset>
	  					sprintf(txBuffer,"pV[%d] : %s\n",cnt, pV);
 8001fa8:	f897 2393 	ldrb.w	r2, [r7, #915]	; 0x393
 8001fac:	f107 000c 	add.w	r0, r7, #12
 8001fb0:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8001fb4:	4923      	ldr	r1, [pc, #140]	; (8002044 <GPS+0x22c>)
 8001fb6:	f00c fdef 	bl	800eb98 <siprintf>
	  //				HAL_UART_Transmit(&huart2, (unsigned char *) txBuffer, sizeof(txBuffer), 100);
	  					switch (cnt) {
 8001fba:	f897 3393 	ldrb.w	r3, [r7, #915]	; 0x393
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d849      	bhi.n	8002058 <GPS+0x240>
 8001fc4:	a201      	add	r2, pc, #4	; (adr r2, 8001fcc <GPS+0x1b4>)
 8001fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fca:	bf00      	nop
 8001fcc:	08001fe1 	.word	0x08001fe1
 8001fd0:	08001ff1 	.word	0x08001ff1
 8001fd4:	08002001 	.word	0x08002001
 8001fd8:	08002011 	.word	0x08002011
 8001fdc:	08002049 	.word	0x08002049
	  						case 1:
	  							  utcRaw = strdup(pV);
 8001fe0:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8001fe4:	f00c fe1c 	bl	800ec20 <strdup>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
	  							  break;
 8001fee:	e033      	b.n	8002058 <GPS+0x240>
	  						case 2:
	  							  latRaw = strdup(pV);
 8001ff0:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8001ff4:	f00c fe14 	bl	800ec20 <strdup>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
	  							  break;
 8001ffe:	e02b      	b.n	8002058 <GPS+0x240>
	  						case 3:
	  							  hemNS = strdup(pV);
 8002000:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8002004:	f00c fe0c 	bl	800ec20 <strdup>
 8002008:	4603      	mov	r3, r0
 800200a:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
	  							  break;
 800200e:	e023      	b.n	8002058 <GPS+0x240>
	  						case 4:
	  							  lonRaw = strdup(pV);
 8002010:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8002014:	f00c fe04 	bl	800ec20 <strdup>
 8002018:	4603      	mov	r3, r0
 800201a:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
	  							  break;
 800201e:	e01b      	b.n	8002058 <GPS+0x240>
 8002020:	200050f4 	.word	0x200050f4
 8002024:	08012930 	.word	0x08012930
 8002028:	20005218 	.word	0x20005218
 800202c:	20000230 	.word	0x20000230
 8002030:	08012938 	.word	0x08012938
 8002034:	08012944 	.word	0x08012944
 8002038:	08012948 	.word	0x08012948
 800203c:	08012950 	.word	0x08012950
 8002040:	08012954 	.word	0x08012954
 8002044:	08012958 	.word	0x08012958
	  						case 5:
	  							  hemEW = strdup(pV);
 8002048:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 800204c:	f00c fde8 	bl	800ec20 <strdup>
 8002050:	4603      	mov	r3, r0
 8002052:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
	  							  break;
 8002056:	bf00      	nop
	  					}
	  					cnt++;
 8002058:	f897 3393 	ldrb.w	r3, [r7, #915]	; 0x393
 800205c:	3301      	adds	r3, #1
 800205e:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
	  				for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8002062:	49db      	ldr	r1, [pc, #876]	; (80023d0 <GPS+0x5b8>)
 8002064:	2000      	movs	r0, #0
 8002066:	f00d fc59 	bl	800f91c <strtok>
 800206a:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
 800206e:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8002072:	2b00      	cmp	r3, #0
 8002074:	d191      	bne.n	8001f9a <GPS+0x182>
	  				} //end for

	  				//Converting Longitude and Latitude into Float
	  				latitude = atof(latRaw);
 8002076:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 800207a:	f00c f8df 	bl	800e23c <atof>
 800207e:	ec53 2b10 	vmov	r2, r3, d0
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f7fe fdb7 	bl	8000bf8 <__aeabi_d2f>
 800208a:	4603      	mov	r3, r0
 800208c:	4ad1      	ldr	r2, [pc, #836]	; (80023d4 <GPS+0x5bc>)
 800208e:	6013      	str	r3, [r2, #0]
	  				longitude = atof(lonRaw);
 8002090:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8002094:	f00c f8d2 	bl	800e23c <atof>
 8002098:	ec53 2b10 	vmov	r2, r3, d0
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f7fe fdaa 	bl	8000bf8 <__aeabi_d2f>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4acc      	ldr	r2, [pc, #816]	; (80023d8 <GPS+0x5c0>)
 80020a8:	6013      	str	r3, [r2, #0]

	  				if (*hemNS == 'S') {
 80020aa:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b53      	cmp	r3, #83	; 0x53
 80020b2:	d112      	bne.n	80020da <GPS+0x2c2>
	  					latitude  *= -1.0;
 80020b4:	4bc7      	ldr	r3, [pc, #796]	; (80023d4 <GPS+0x5bc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa4d 	bl	8000558 <__aeabi_f2d>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	f7fe fd97 	bl	8000bf8 <__aeabi_d2f>
 80020ca:	4603      	mov	r3, r0
 80020cc:	ee07 3a90 	vmov	s15, r3
 80020d0:	eef1 7a67 	vneg.f32	s15, s15
 80020d4:	4bbf      	ldr	r3, [pc, #764]	; (80023d4 <GPS+0x5bc>)
 80020d6:	edc3 7a00 	vstr	s15, [r3]
	  				}
	  				if (*hemEW == 'W') {
 80020da:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b57      	cmp	r3, #87	; 0x57
 80020e2:	d112      	bne.n	800210a <GPS+0x2f2>
	  					longitude *= -1.0;
 80020e4:	4bbc      	ldr	r3, [pc, #752]	; (80023d8 <GPS+0x5c0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fa35 	bl	8000558 <__aeabi_f2d>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	f7fe fd7f 	bl	8000bf8 <__aeabi_d2f>
 80020fa:	4603      	mov	r3, r0
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eef1 7a67 	vneg.f32	s15, s15
 8002104:	4bb4      	ldr	r3, [pc, #720]	; (80023d8 <GPS+0x5c0>)
 8002106:	edc3 7a00 	vstr	s15, [r3]
	  				}
	  				char * token;
	  				//Get LatitudeDegree
	  				token = strtok(latRaw, ".");
 800210a:	49b4      	ldr	r1, [pc, #720]	; (80023dc <GPS+0x5c4>)
 800210c:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 8002110:	f00d fc04 	bl	800f91c <strtok>
 8002114:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(latDg, 0, sizeof(latDg));
 8002118:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800211c:	220a      	movs	r2, #10
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f00c f8c7 	bl	800e2b4 <memset>
	  //			memcpy(latDg, token, strlen(token));
	  				sprintf(latDg, token);
 8002126:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800212a:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 800212e:	4618      	mov	r0, r3
 8002130:	f00c fd32 	bl	800eb98 <siprintf>
	  				//Get Minutes
	  				token = strtok(NULL,".");
 8002134:	49a9      	ldr	r1, [pc, #676]	; (80023dc <GPS+0x5c4>)
 8002136:	2000      	movs	r0, #0
 8002138:	f00d fbf0 	bl	800f91c <strtok>
 800213c:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(latMS, 0, sizeof(latMS));
 8002140:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002144:	2214      	movs	r2, #20
 8002146:	2100      	movs	r1, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f00c f8b3 	bl	800e2b4 <memset>
	  //			memcpy(latMS, token, strlen(token));
	  				sprintf(latMS, token);
 800214e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002152:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8002156:	4618      	mov	r0, r3
 8002158:	f00c fd1e 	bl	800eb98 <siprintf>
	  //			latMS[7] = '.';

	  				//Get longitude Degree
	  				float degrees = trunc(latitude / 100.0f);
 800215c:	4b9d      	ldr	r3, [pc, #628]	; (80023d4 <GPS+0x5bc>)
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80023e0 <GPS+0x5c8>
 8002166:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800216a:	ee16 0a90 	vmov	r0, s13
 800216e:	f7fe f9f3 	bl	8000558 <__aeabi_f2d>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	ec43 2b10 	vmov	d0, r2, r3
 800217a:	f010 fb2b 	bl	80127d4 <trunc>
 800217e:	ec53 2b10 	vmov	r2, r3, d0
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f7fe fd37 	bl	8000bf8 <__aeabi_d2f>
 800218a:	4603      	mov	r3, r0
 800218c:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
	  				float minutes = latitude - (degrees * 100.0f);
 8002190:	4b90      	ldr	r3, [pc, #576]	; (80023d4 <GPS+0x5bc>)
 8002192:	ed93 7a00 	vldr	s14, [r3]
 8002196:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 800219a:	eddf 6a91 	vldr	s13, [pc, #580]	; 80023e0 <GPS+0x5c8>
 800219e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a6:	edc7 7add 	vstr	s15, [r7, #884]	; 0x374
	  				latitude = degrees + (minutes / 60.0f);
 80021aa:	edd7 7add 	vldr	s15, [r7, #884]	; 0x374
 80021ae:	eddf 6a8d 	vldr	s13, [pc, #564]	; 80023e4 <GPS+0x5cc>
 80021b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021b6:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 80021ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021be:	4b85      	ldr	r3, [pc, #532]	; (80023d4 <GPS+0x5bc>)
 80021c0:	edc3 7a00 	vstr	s15, [r3]

	  				degrees = trunc(longitude / 100.0f);
 80021c4:	4b84      	ldr	r3, [pc, #528]	; (80023d8 <GPS+0x5c0>)
 80021c6:	edd3 7a00 	vldr	s15, [r3]
 80021ca:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80023e0 <GPS+0x5c8>
 80021ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021d2:	ee16 0a90 	vmov	r0, s13
 80021d6:	f7fe f9bf 	bl	8000558 <__aeabi_f2d>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	ec43 2b10 	vmov	d0, r2, r3
 80021e2:	f010 faf7 	bl	80127d4 <trunc>
 80021e6:	ec53 2b10 	vmov	r2, r3, d0
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	f7fe fd03 	bl	8000bf8 <__aeabi_d2f>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
	  				minutes = longitude - (degrees * 100.0f);
 80021f8:	4b77      	ldr	r3, [pc, #476]	; (80023d8 <GPS+0x5c0>)
 80021fa:	ed93 7a00 	vldr	s14, [r3]
 80021fe:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 8002202:	eddf 6a77 	vldr	s13, [pc, #476]	; 80023e0 <GPS+0x5c8>
 8002206:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800220a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800220e:	edc7 7add 	vstr	s15, [r7, #884]	; 0x374
	  				longitude = degrees + (minutes / 60.0f);
 8002212:	edd7 7add 	vldr	s15, [r7, #884]	; 0x374
 8002216:	eddf 6a73 	vldr	s13, [pc, #460]	; 80023e4 <GPS+0x5cc>
 800221a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800221e:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	4b6c      	ldr	r3, [pc, #432]	; (80023d8 <GPS+0x5c0>)
 8002228:	edc3 7a00 	vstr	s15, [r3]


	  				token = strtok(lonRaw, ".");
 800222c:	496b      	ldr	r1, [pc, #428]	; (80023dc <GPS+0x5c4>)
 800222e:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8002232:	f00d fb73 	bl	800f91c <strtok>
 8002236:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(lonDg, 0, sizeof(lonDg));
 800223a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800223e:	220a      	movs	r2, #10
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f00c f836 	bl	800e2b4 <memset>
	  				memcpy(lonDg, token, strlen(token));
 8002248:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 800224c:	f7fd ffc8 	bl	80001e0 <strlen>
 8002250:	4602      	mov	r2, r0
 8002252:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002256:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 800225a:	4618      	mov	r0, r3
 800225c:	f00c f81c 	bl	800e298 <memcpy>

	  				token = strtok(NULL, ".");
 8002260:	495e      	ldr	r1, [pc, #376]	; (80023dc <GPS+0x5c4>)
 8002262:	2000      	movs	r0, #0
 8002264:	f00d fb5a 	bl	800f91c <strtok>
 8002268:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
	  				memset(lonMS, 0, sizeof(lonMS));
 800226c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002270:	220a      	movs	r2, #10
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f00c f81d 	bl	800e2b4 <memset>
	  				memcpy(lonMS, token, strlen(token));
 800227a:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 800227e:	f7fd ffaf 	bl	80001e0 <strlen>
 8002282:	4602      	mov	r2, r0
 8002284:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002288:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 800228c:	4618      	mov	r0, r3
 800228e:	f00c f803 	bl	800e298 <memcpy>

	  				memset(txBuffer,0,sizeof(txBuffer));
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	22c8      	movs	r2, #200	; 0xc8
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f00c f80a 	bl	800e2b4 <memset>
	  				sprintf(txBuffer, "latDg : %s latMs : %s lonDg : %s lonMs : %s\n",latDg,latMS,lonDg,lonMS );
 80022a0:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80022a4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80022a8:	f107 000c 	add.w	r0, r7, #12
 80022ac:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	460b      	mov	r3, r1
 80022ba:	494b      	ldr	r1, [pc, #300]	; (80023e8 <GPS+0x5d0>)
 80022bc:	f00c fc6c 	bl	800eb98 <siprintf>
 80022c0:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	b29a      	uxth	r2, r3
	  //		  HAL_UART_Transmit(&huart2, (unsigned char *)txBuffer, sizeof(txBuffer), 100);

	  					  //converting the UTC time in the hh:mm:ss format
	  				memcpy(hH, &utcRaw[0], 2);
 80022c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022cc:	801a      	strh	r2, [r3, #0]
	  				hH[2] = '\0';
 80022ce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022d2:	2200      	movs	r2, #0
 80022d4:	709a      	strb	r2, [r3, #2]

	  				memcpy(mM, &utcRaw[2], 2);
 80022d6:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80022da:	3302      	adds	r3, #2
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022e4:	801a      	strh	r2, [r3, #0]
	  				mM[2] = '\0';
 80022e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022ea:	2200      	movs	r2, #0
 80022ec:	709a      	strb	r2, [r3, #2]

	  				memcpy(sS, &utcRaw[4], 2);
 80022ee:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80022f2:	3304      	adds	r3, #4
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022fc:	801a      	strh	r2, [r3, #0]
	  				sS[2] = '\0';
 80022fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002302:	2200      	movs	r2, #0
 8002304:	709a      	strb	r2, [r3, #2]
//	  				float latDg_f = atof(latDg)/100.0;
//	  				float latMS_f = atof(latMS)/60.0;
//	  				float lonDg_f = atof(lonDg)/100.0;
//	  				float lonMS_f = atof(lonMS)/60.0;

	  				strcpy(strUTC, hH);
 8002306:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800230a:	4619      	mov	r1, r3
 800230c:	4837      	ldr	r0, [pc, #220]	; (80023ec <GPS+0x5d4>)
 800230e:	f00c fc7f 	bl	800ec10 <strcpy>
	  				strcat(strUTC, ":");
 8002312:	4836      	ldr	r0, [pc, #216]	; (80023ec <GPS+0x5d4>)
 8002314:	f7fd ff64 	bl	80001e0 <strlen>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	4b33      	ldr	r3, [pc, #204]	; (80023ec <GPS+0x5d4>)
 800231e:	4413      	add	r3, r2
 8002320:	4933      	ldr	r1, [pc, #204]	; (80023f0 <GPS+0x5d8>)
 8002322:	461a      	mov	r2, r3
 8002324:	460b      	mov	r3, r1
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	8013      	strh	r3, [r2, #0]
	  				strcat(strUTC, mM);
 800232a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800232e:	4619      	mov	r1, r3
 8002330:	482e      	ldr	r0, [pc, #184]	; (80023ec <GPS+0x5d4>)
 8002332:	f00c fc51 	bl	800ebd8 <strcat>
	  				strcat(strUTC, ":");
 8002336:	482d      	ldr	r0, [pc, #180]	; (80023ec <GPS+0x5d4>)
 8002338:	f7fd ff52 	bl	80001e0 <strlen>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	4b2a      	ldr	r3, [pc, #168]	; (80023ec <GPS+0x5d4>)
 8002342:	4413      	add	r3, r2
 8002344:	492a      	ldr	r1, [pc, #168]	; (80023f0 <GPS+0x5d8>)
 8002346:	461a      	mov	r2, r3
 8002348:	460b      	mov	r3, r1
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	8013      	strh	r3, [r2, #0]
	  				strcat(strUTC, sS);
 800234e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002352:	4619      	mov	r1, r3
 8002354:	4825      	ldr	r0, [pc, #148]	; (80023ec <GPS+0x5d4>)
 8002356:	f00c fc3f 	bl	800ebd8 <strcat>
	  				strUTC[8] = '\0';
 800235a:	4b24      	ldr	r3, [pc, #144]	; (80023ec <GPS+0x5d4>)
 800235c:	2200      	movs	r2, #0
 800235e:	721a      	strb	r2, [r3, #8]

	  				memset(txBuffer,0,sizeof(txBuffer));
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	22c8      	movs	r2, #200	; 0xc8
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f00b ffa3 	bl	800e2b4 <memset>
	  				sprintf(txBuffer, "Latitude : %f Longitude : %f UTC : %s\n",latitude,longitude, strUTC);
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <GPS+0x5bc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f8f0 	bl	8000558 <__aeabi_f2d>
 8002378:	4604      	mov	r4, r0
 800237a:	460d      	mov	r5, r1
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <GPS+0x5c0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8e9 	bl	8000558 <__aeabi_f2d>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	f107 000c 	add.w	r0, r7, #12
 800238e:	4917      	ldr	r1, [pc, #92]	; (80023ec <GPS+0x5d4>)
 8002390:	9102      	str	r1, [sp, #8]
 8002392:	e9cd 2300 	strd	r2, r3, [sp]
 8002396:	4622      	mov	r2, r4
 8002398:	462b      	mov	r3, r5
 800239a:	4916      	ldr	r1, [pc, #88]	; (80023f4 <GPS+0x5dc>)
 800239c:	f00c fbfc 	bl	800eb98 <siprintf>
	  				HAL_UART_Transmit(&huart2, (unsigned char *)txBuffer, sizeof(txBuffer), 100);
 80023a0:	f107 010c 	add.w	r1, r7, #12
 80023a4:	2364      	movs	r3, #100	; 0x64
 80023a6:	22c8      	movs	r2, #200	; 0xc8
 80023a8:	4813      	ldr	r0, [pc, #76]	; (80023f8 <GPS+0x5e0>)
 80023aa:	f004 fea6 	bl	80070fa <HAL_UART_Transmit>
	  	while ((token = strsep(&string, "\n")) != NULL) {
 80023ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80023b2:	4912      	ldr	r1, [pc, #72]	; (80023fc <GPS+0x5e4>)
 80023b4:	4618      	mov	r0, r3
 80023b6:	f00c fc63 	bl	800ec80 <strsep>
 80023ba:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
 80023be:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f47f ad71 	bne.w	8001eaa <GPS+0x92>

	  			} //end of the chekcsum data verification
	  		} //end of %GPPGA Sentences selection
	  	}// end of splotting the buffstr by the "\n" delimiter with strsep() c function
	  	flag = 0;
 80023c8:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <GPS+0x5e8>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	e019      	b.n	8002404 <GPS+0x5ec>
 80023d0:	08012954 	.word	0x08012954
 80023d4:	20000220 	.word	0x20000220
 80023d8:	20000224 	.word	0x20000224
 80023dc:	08012968 	.word	0x08012968
 80023e0:	42c80000 	.word	0x42c80000
 80023e4:	42700000 	.word	0x42700000
 80023e8:	0801296c 	.word	0x0801296c
 80023ec:	20000228 	.word	0x20000228
 80023f0:	0801299c 	.word	0x0801299c
 80023f4:	080129a0 	.word	0x080129a0
 80023f8:	20005218 	.word	0x20005218
 80023fc:	080129c8 	.word	0x080129c8
 8002400:	20000230 	.word	0x20000230
	  }
	  osDelay(500);
 8002404:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002408:	f008 fc40 	bl	800ac8c <osDelay>
  {
 800240c:	e51b      	b.n	8001e46 <GPS+0x2e>
 800240e:	bf00      	nop

08002410 <RFID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RFID */
void RFID(void *argument)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b0a2      	sub	sp, #136	; 0x88
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RFID */
	char txBuffer [100] ={};
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	2260      	movs	r2, #96	; 0x60
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f00b ff45 	bl	800e2b4 <memset>
	u_char status, checksum1, cardstr[MAX_LEN];
	MFRC522_Init();
 800242a:	f7fe fe97 	bl	800115c <MFRC522_Init>
	status = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	while (status == 0){
 8002434:	e018      	b.n	8002468 <RFID+0x58>
		status = Read_MFRC522(VersionReg);
 8002436:	2037      	movs	r0, #55	; 0x37
 8002438:	f7fe fe10 	bl	800105c <Read_MFRC522>
 800243c:	4603      	mov	r3, r0
 800243e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		sprintf(txBuffer,"Running RC522 ver :%x\n", status);
 8002442:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002446:	f107 0318 	add.w	r3, r7, #24
 800244a:	4943      	ldr	r1, [pc, #268]	; (8002558 <RFID+0x148>)
 800244c:	4618      	mov	r0, r3
 800244e:	f00c fba3 	bl	800eb98 <siprintf>
		HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
 8002452:	f107 0118 	add.w	r1, r7, #24
 8002456:	f241 3388 	movw	r3, #5000	; 0x1388
 800245a:	2264      	movs	r2, #100	; 0x64
 800245c:	483f      	ldr	r0, [pc, #252]	; (800255c <RFID+0x14c>)
 800245e:	f004 fe4c 	bl	80070fa <HAL_UART_Transmit>
		osDelay(100);
 8002462:	2064      	movs	r0, #100	; 0x64
 8002464:	f008 fc12 	bl	800ac8c <osDelay>
	while (status == 0){
 8002468:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0e2      	beq.n	8002436 <RFID+0x26>
	}
	//Printing to PC
	memset(txBuffer,0,sizeof(txBuffer));
 8002470:	f107 0318 	add.w	r3, r7, #24
 8002474:	2264      	movs	r2, #100	; 0x64
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f00b ff1b 	bl	800e2b4 <memset>
	status = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	osDelay(200);
 8002484:	20c8      	movs	r0, #200	; 0xc8
 8002486:	f008 fc01 	bl	800ac8c <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  status = MFRC522_Request(PICC_REQIDL, cardstr);
 800248a:	f107 0308 	add.w	r3, r7, #8
 800248e:	4619      	mov	r1, r3
 8002490:	2026      	movs	r0, #38	; 0x26
 8002492:	f7fe fe8f 	bl	80011b4 <MFRC522_Request>
 8002496:	4603      	mov	r3, r0
 8002498:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	  if(status == MI_OK){
 800249c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d145      	bne.n	8002530 <RFID+0x120>
		  sprintf(txBuffer,"Card detected ..\n");
 80024a4:	f107 0318 	add.w	r3, r7, #24
 80024a8:	492d      	ldr	r1, [pc, #180]	; (8002560 <RFID+0x150>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00c fb74 	bl	800eb98 <siprintf>
		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
 80024b0:	f107 0118 	add.w	r1, r7, #24
 80024b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024b8:	2264      	movs	r2, #100	; 0x64
 80024ba:	4828      	ldr	r0, [pc, #160]	; (800255c <RFID+0x14c>)
 80024bc:	f004 fe1d 	bl	80070fa <HAL_UART_Transmit>
//		  sprintf(txBuffer,"Card Type : %x %x %x\n", cardstr[0],cardstr[1],cardstr[2]);
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 500);
		  memset(txBuffer,0,sizeof(txBuffer));
 80024c0:	f107 0318 	add.w	r3, r7, #24
 80024c4:	2264      	movs	r2, #100	; 0x64
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f00b fef3 	bl	800e2b4 <memset>

		  //Anti-collision, return card serial number == 4 bytes
		  status = MFRC522_Anticoll(cardstr);
 80024ce:	f107 0308 	add.w	r3, r7, #8
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe ff5c 	bl	8001390 <MFRC522_Anticoll>
 80024d8:	4603      	mov	r3, r0
 80024da:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  if (status == MI_OK){
 80024de:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d133      	bne.n	800254e <RFID+0x13e>
			  checksum1 = cardstr[0] ^ cardstr[1] ^ cardstr[2] ^ cardstr[3];
 80024e6:	7a3a      	ldrb	r2, [r7, #8]
 80024e8:	7a7b      	ldrb	r3, [r7, #9]
 80024ea:	4053      	eors	r3, r2
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	7abb      	ldrb	r3, [r7, #10]
 80024f0:	4053      	eors	r3, r2
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	7afb      	ldrb	r3, [r7, #11]
 80024f6:	4053      	eors	r3, r2
 80024f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			  for(int i = 0; i <4 ;i++){
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002502:	e010      	b.n	8002526 <RFID+0x116>
				  UID[i]=cardstr[i];
 8002504:	f107 0208 	add.w	r2, r7, #8
 8002508:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800250c:	4413      	add	r3, r2
 800250e:	7819      	ldrb	r1, [r3, #0]
 8002510:	4a14      	ldr	r2, [pc, #80]	; (8002564 <RFID+0x154>)
 8002512:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002516:	4413      	add	r3, r2
 8002518:	460a      	mov	r2, r1
 800251a:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i <4 ;i++){
 800251c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002520:	3301      	adds	r3, #1
 8002522:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002526:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800252a:	2b03      	cmp	r3, #3
 800252c:	ddea      	ble.n	8002504 <RFID+0xf4>
 800252e:	e00e      	b.n	800254e <RFID+0x13e>
//			  sprintf(txBuffer,"UID: %x %x %x %x\n\r",(u_char)cardstr[0], (u_char)cardstr[1],(u_char)cardstr[2],(u_char)cardstr[3]);
//			  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
		  }
	  }
	  else {
		  memset(txBuffer,0,sizeof(txBuffer));
 8002530:	f107 0318 	add.w	r3, r7, #24
 8002534:	2264      	movs	r2, #100	; 0x64
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f00b febb 	bl	800e2b4 <memset>
		  sprintf(txBuffer,"Status :%x\n", status);
 800253e:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002542:	f107 0318 	add.w	r3, r7, #24
 8002546:	4908      	ldr	r1, [pc, #32]	; (8002568 <RFID+0x158>)
 8002548:	4618      	mov	r0, r3
 800254a:	f00c fb25 	bl	800eb98 <siprintf>
//		  HAL_UART_Transmit(&huart2, (unsigned char*) txBuffer, sizeof(txBuffer), 5000);
		  //		  sprintf(txBuffer,"Finding ..\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), 100);
	  }
    osDelay(100);
 800254e:	2064      	movs	r0, #100	; 0x64
 8002550:	f008 fb9c 	bl	800ac8c <osDelay>
	  status = MFRC522_Request(PICC_REQIDL, cardstr);
 8002554:	e799      	b.n	800248a <RFID+0x7a>
 8002556:	bf00      	nop
 8002558:	080129cc 	.word	0x080129cc
 800255c:	20005218 	.word	0x20005218
 8002560:	080129e4 	.word	0x080129e4
 8002564:	2000021c 	.word	0x2000021c
 8002568:	080129f8 	.word	0x080129f8

0800256c <SDCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SDCard */
void SDCard(void *argument)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b0a4      	sub	sp, #144	; 0x90
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDCard */
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8002574:	2201      	movs	r2, #1
 8002576:	4961      	ldr	r1, [pc, #388]	; (80026fc <SDCard+0x190>)
 8002578:	4861      	ldr	r0, [pc, #388]	; (8002700 <SDCard+0x194>)
 800257a:	f007 fad9 	bl	8009b30 <f_mount>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	4b60      	ldr	r3, [pc, #384]	; (8002704 <SDCard+0x198>)
 8002584:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8002586:	4b5f      	ldr	r3, [pc, #380]	; (8002704 <SDCard+0x198>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d006      	beq.n	800259c <SDCard+0x30>
		myprintf("f_mount error (%i)\r\n", fres);
 800258e:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <SDCard+0x198>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	4619      	mov	r1, r3
 8002594:	485c      	ldr	r0, [pc, #368]	; (8002708 <SDCard+0x19c>)
 8002596:	f7ff f875 	bl	8001684 <myprintf>
		while(1);
 800259a:	e7fe      	b.n	800259a <SDCard+0x2e>
	}
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;
    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 800259c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80025a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025a4:	4619      	mov	r1, r3
 80025a6:	4855      	ldr	r0, [pc, #340]	; (80026fc <SDCard+0x190>)
 80025a8:	f008 f8b5 	bl	800a716 <f_getfree>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b54      	ldr	r3, [pc, #336]	; (8002704 <SDCard+0x198>)
 80025b2:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 80025b4:	4b53      	ldr	r3, [pc, #332]	; (8002704 <SDCard+0x198>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d006      	beq.n	80025ca <SDCard+0x5e>
  	myprintf("f_getfree error (%i)\r\n", fres);
 80025bc:	4b51      	ldr	r3, [pc, #324]	; (8002704 <SDCard+0x198>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	4852      	ldr	r0, [pc, #328]	; (800270c <SDCard+0x1a0>)
 80025c4:	f7ff f85e 	bl	8001684 <myprintf>
  	while(1);
 80025c8:	e7fe      	b.n	80025c8 <SDCard+0x5c>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80025ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	3b02      	subs	r3, #2
 80025d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80025d2:	8952      	ldrh	r2, [r2, #10]
 80025d4:	fb02 f303 	mul.w	r3, r2, r3
 80025d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    free_sectors = free_clusters * getFreeFs->csize;
 80025dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025de:	895b      	ldrh	r3, [r3, #10]
 80025e0:	461a      	mov	r2, r3
 80025e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e4:	fb03 f302 	mul.w	r3, r3, r2
 80025e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80025ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025f0:	0859      	lsrs	r1, r3, #1
 80025f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025f6:	085b      	lsrs	r3, r3, #1
 80025f8:	461a      	mov	r2, r3
 80025fa:	4845      	ldr	r0, [pc, #276]	; (8002710 <SDCard+0x1a4>)
 80025fc:	f7ff f842 	bl	8001684 <myprintf>

    //Now let's try to open file "test.txt"
    fres = f_open(&fil, "tesjson.txt", FA_READ);
 8002600:	2201      	movs	r2, #1
 8002602:	4944      	ldr	r1, [pc, #272]	; (8002714 <SDCard+0x1a8>)
 8002604:	4844      	ldr	r0, [pc, #272]	; (8002718 <SDCard+0x1ac>)
 8002606:	f007 faf7 	bl	8009bf8 <f_open>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <SDCard+0x198>)
 8002610:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 8002612:	4b3c      	ldr	r3, [pc, #240]	; (8002704 <SDCard+0x198>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <SDCard+0xb6>
  	myprintf("f_open error (%i)\r\n");
 800261a:	4840      	ldr	r0, [pc, #256]	; (800271c <SDCard+0x1b0>)
 800261c:	f7ff f832 	bl	8001684 <myprintf>
  	while(1);
 8002620:	e7fe      	b.n	8002620 <SDCard+0xb4>
    }
    myprintf("I was able to open 'tesjson.txt' for reading!\r\n");
 8002622:	483f      	ldr	r0, [pc, #252]	; (8002720 <SDCard+0x1b4>)
 8002624:	f7ff f82e 	bl	8001684 <myprintf>
    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[100];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 100, &fil);
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	4a3a      	ldr	r2, [pc, #232]	; (8002718 <SDCard+0x1ac>)
 800262e:	2164      	movs	r1, #100	; 0x64
 8002630:	4618      	mov	r0, r3
 8002632:	f008 f92c 	bl	800a88e <f_gets>
 8002636:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    if(rres != 0) {
 800263a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800263e:	2b00      	cmp	r3, #0
 8002640:	d006      	beq.n	8002650 <SDCard+0xe4>
  	myprintf("Read string from 'tesjson.txt'' contents: %s\r\n", readBuf);
 8002642:	f107 0310 	add.w	r3, r7, #16
 8002646:	4619      	mov	r1, r3
 8002648:	4836      	ldr	r0, [pc, #216]	; (8002724 <SDCard+0x1b8>)
 800264a:	f7ff f81b 	bl	8001684 <myprintf>
 800264e:	e005      	b.n	800265c <SDCard+0xf0>
    } else {
  	myprintf("f_gets error (%i)\r\n", fres);
 8002650:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <SDCard+0x198>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	4834      	ldr	r0, [pc, #208]	; (8002728 <SDCard+0x1bc>)
 8002658:	f7ff f814 	bl	8001684 <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 800265c:	482e      	ldr	r0, [pc, #184]	; (8002718 <SDCard+0x1ac>)
 800265e:	f008 f82b 	bl	800a6b8 <f_close>

    //Now let's try and write a file "write.txt"
    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002662:	221a      	movs	r2, #26
 8002664:	4931      	ldr	r1, [pc, #196]	; (800272c <SDCard+0x1c0>)
 8002666:	482c      	ldr	r0, [pc, #176]	; (8002718 <SDCard+0x1ac>)
 8002668:	f007 fac6 	bl	8009bf8 <f_open>
 800266c:	4603      	mov	r3, r0
 800266e:	461a      	mov	r2, r3
 8002670:	4b24      	ldr	r3, [pc, #144]	; (8002704 <SDCard+0x198>)
 8002672:	701a      	strb	r2, [r3, #0]
    if(fres == FR_OK) {
 8002674:	4b23      	ldr	r3, [pc, #140]	; (8002704 <SDCard+0x198>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d103      	bne.n	8002684 <SDCard+0x118>
    	myprintf("I was able to open 'write.txt' for writing\r\n");
 800267c:	482c      	ldr	r0, [pc, #176]	; (8002730 <SDCard+0x1c4>)
 800267e:	f7ff f801 	bl	8001684 <myprintf>
 8002682:	e005      	b.n	8002690 <SDCard+0x124>
    } else {
    	myprintf("f_open error (%i)\r\n", fres);
 8002684:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <SDCard+0x198>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	4824      	ldr	r0, [pc, #144]	; (800271c <SDCard+0x1b0>)
 800268c:	f7fe fffa 	bl	8001684 <myprintf>
    }

    //Copy in a string
//    strncpy((char*)readBuf, "a new file is made!", 19);
    char* kirimjson = "{'Lokasi':'-6.914744,107.609810','Time_Stamp':'27 April 2021, 20:22'}" ;
 8002690:	4b28      	ldr	r3, [pc, #160]	; (8002734 <SDCard+0x1c8>)
 8002692:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    uint32_t length_var = strlen(kirimjson);
 8002696:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800269a:	f7fd fda1 	bl	80001e0 <strlen>
 800269e:	67f8      	str	r0, [r7, #124]	; 0x7c
    strncpy((char*)readBuf, kirimjson, length_var);
 80026a0:	f107 0310 	add.w	r3, r7, #16
 80026a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80026a6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80026aa:	4618      	mov	r0, r3
 80026ac:	f00c fad5 	bl	800ec5a <strncpy>
    UINT bytesWrote;
    fres = f_write(&fil, readBuf, length_var, &bytesWrote);
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	f107 0110 	add.w	r1, r7, #16
 80026b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80026ba:	4817      	ldr	r0, [pc, #92]	; (8002718 <SDCard+0x1ac>)
 80026bc:	f007 fdcf 	bl	800a25e <f_write>
 80026c0:	4603      	mov	r3, r0
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <SDCard+0x198>)
 80026c6:	701a      	strb	r2, [r3, #0]
    if(fres == FR_OK) {
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <SDCard+0x198>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d105      	bne.n	80026dc <SDCard+0x170>
    	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4619      	mov	r1, r3
 80026d4:	4818      	ldr	r0, [pc, #96]	; (8002738 <SDCard+0x1cc>)
 80026d6:	f7fe ffd5 	bl	8001684 <myprintf>
 80026da:	e002      	b.n	80026e2 <SDCard+0x176>
    } else {
    	myprintf("f_write error (%i)\r\n");
 80026dc:	4817      	ldr	r0, [pc, #92]	; (800273c <SDCard+0x1d0>)
 80026de:	f7fe ffd1 	bl	8001684 <myprintf>
    }
    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 80026e2:	480d      	ldr	r0, [pc, #52]	; (8002718 <SDCard+0x1ac>)
 80026e4:	f007 ffe8 	bl	800a6b8 <f_close>
//    f_unlink("/write.txt"); Buat ngedelete file
    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 80026e8:	2200      	movs	r2, #0
 80026ea:	4904      	ldr	r1, [pc, #16]	; (80026fc <SDCard+0x190>)
 80026ec:	2000      	movs	r0, #0
 80026ee:	f007 fa1f 	bl	8009b30 <f_mount>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80026f2:	2001      	movs	r0, #1
 80026f4:	f008 faca 	bl	800ac8c <osDelay>
 80026f8:	e7fb      	b.n	80026f2 <SDCard+0x186>
 80026fa:	bf00      	nop
 80026fc:	08012a04 	.word	0x08012a04
 8002700:	20004c8c 	.word	0x20004c8c
 8002704:	20005260 	.word	0x20005260
 8002708:	08012a08 	.word	0x08012a08
 800270c:	08012a20 	.word	0x08012a20
 8002710:	08012a38 	.word	0x08012a38
 8002714:	08012a80 	.word	0x08012a80
 8002718:	20005264 	.word	0x20005264
 800271c:	08012a8c 	.word	0x08012a8c
 8002720:	08012aa0 	.word	0x08012aa0
 8002724:	08012ad0 	.word	0x08012ad0
 8002728:	08012b00 	.word	0x08012b00
 800272c:	08012b14 	.word	0x08012b14
 8002730:	08012b20 	.word	0x08012b20
 8002734:	08012b50 	.word	0x08012b50
 8002738:	08012b98 	.word	0x08012b98
 800273c:	08012bbc 	.word	0x08012bbc

08002740 <ADCProcesing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADCProcesing */
void ADCProcesing(void *argument)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b09c      	sub	sp, #112	; 0x70
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADCProcesing */
	char txBuffer[100] = {};
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	2260      	movs	r2, #96	; 0x60
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f00b fdad 	bl	800e2b4 <memset>
	HAL_ADC_Start_DMA(&hadc1, buffer, 3);
 800275a:	2203      	movs	r2, #3
 800275c:	492c      	ldr	r1, [pc, #176]	; (8002810 <ADCProcesing+0xd0>)
 800275e:	482d      	ldr	r0, [pc, #180]	; (8002814 <ADCProcesing+0xd4>)
 8002760:	f000 fdca 	bl	80032f8 <HAL_ADC_Start_DMA>
	sprintf(txBuffer,"ADC Intialization..\n");
 8002764:	f107 0308 	add.w	r3, r7, #8
 8002768:	492b      	ldr	r1, [pc, #172]	; (8002818 <ADCProcesing+0xd8>)
 800276a:	4618      	mov	r0, r3
 800276c:	f00c fa14 	bl	800eb98 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 8002770:	f107 0108 	add.w	r1, r7, #8
 8002774:	f04f 33ff 	mov.w	r3, #4294967295
 8002778:	2264      	movs	r2, #100	; 0x64
 800277a:	4828      	ldr	r0, [pc, #160]	; (800281c <ADCProcesing+0xdc>)
 800277c:	f004 fcbd 	bl	80070fa <HAL_UART_Transmit>
	/* Initialize RC Filter */
	RCFilter_Init(&rcFiltFuel, 5.0f, 100.0f);
 8002780:	eddf 0a27 	vldr	s1, [pc, #156]	; 8002820 <ADCProcesing+0xe0>
 8002784:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002788:	4826      	ldr	r0, [pc, #152]	; (8002824 <ADCProcesing+0xe4>)
 800278a:	f7fe fe41 	bl	8001410 <RCFilter_Init>

	/*Initialize Moving Average Filter*/
	MovAvgFilter_init(&MAFiltFuel);
 800278e:	4826      	ldr	r0, [pc, #152]	; (8002828 <ADCProcesing+0xe8>)
 8002790:	f7fe febd 	bl	800150e <MovAvgFilter_init>
	/* Start ADC */
	HAL_ADC_Start_DMA(&hadc1, buffer, 3);
 8002794:	2203      	movs	r2, #3
 8002796:	491e      	ldr	r1, [pc, #120]	; (8002810 <ADCProcesing+0xd0>)
 8002798:	481e      	ldr	r0, [pc, #120]	; (8002814 <ADCProcesing+0xd4>)
 800279a:	f000 fdad 	bl	80032f8 <HAL_ADC_Start_DMA>
	sprintf(txBuffer,"ADC Intialization Success..\n");
 800279e:	f107 0308 	add.w	r3, r7, #8
 80027a2:	4922      	ldr	r1, [pc, #136]	; (800282c <ADCProcesing+0xec>)
 80027a4:	4618      	mov	r0, r3
 80027a6:	f00c f9f7 	bl	800eb98 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 80027aa:	f107 0108 	add.w	r1, r7, #8
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	2264      	movs	r2, #100	; 0x64
 80027b4:	4819      	ldr	r0, [pc, #100]	; (800281c <ADCProcesing+0xdc>)
 80027b6:	f004 fca0 	bl	80070fa <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  float input = (value[1]/ADC_RESOLUTION) * VOLTAGE_REFERENCE;
 80027ba:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <ADCProcesing+0xf0>)
 80027bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80027c0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002834 <ADCProcesing+0xf4>
 80027c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027c8:	ee16 0a90 	vmov	r0, s13
 80027cc:	f7fd fec4 	bl	8000558 <__aeabi_f2d>
 80027d0:	a30d      	add	r3, pc, #52	; (adr r3, 8002808 <ADCProcesing+0xc8>)
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f7fd ff17 	bl	8000608 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f7fe fa09 	bl	8000bf8 <__aeabi_d2f>
 80027e6:	4603      	mov	r3, r0
 80027e8:	66fb      	str	r3, [r7, #108]	; 0x6c
	  RCFilter_Update(&rcFiltFuel, input);
 80027ea:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 80027ee:	480d      	ldr	r0, [pc, #52]	; (8002824 <ADCProcesing+0xe4>)
 80027f0:	f7fe fe64 	bl	80014bc <RCFilter_Update>
	  MovAvgFilter_Update(&MAFiltFuel, input);
 80027f4:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 80027f8:	480b      	ldr	r0, [pc, #44]	; (8002828 <ADCProcesing+0xe8>)
 80027fa:	f7fe fea9 	bl	8001550 <MovAvgFilter_Update>
//	  sprintf(txBuffer,"Raw : %.3f Filtered : %.3f\n", input, rcFiltFuel.out[0]);
//	  HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
	  osDelay(100); //100 Hz Sampling Rate
 80027fe:	2064      	movs	r0, #100	; 0x64
 8002800:	f008 fa44 	bl	800ac8c <osDelay>
  {
 8002804:	e7d9      	b.n	80027ba <ADCProcesing+0x7a>
 8002806:	bf00      	nop
 8002808:	66666666 	.word	0x66666666
 800280c:	400a6666 	.word	0x400a6666
 8002810:	2000513c 	.word	0x2000513c
 8002814:	2000504c 	.word	0x2000504c
 8002818:	08012bd4 	.word	0x08012bd4
 800281c:	20005218 	.word	0x20005218
 8002820:	42c80000 	.word	0x42c80000
 8002824:	200051ac 	.word	0x200051ac
 8002828:	20004f80 	.word	0x20004f80
 800282c:	08012bec 	.word	0x08012bec
 8002830:	200054a4 	.word	0x200054a4
 8002834:	45800000 	.word	0x45800000

08002838 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800284a:	f000 fccd 	bl	80031e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40010000 	.word	0x40010000

0800285c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002860:	b672      	cpsid	i
}
 8002862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002864:	e7fe      	b.n	8002864 <Error_Handler+0x8>

08002866 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002866:	b580      	push	{r7, lr}
 8002868:	b088      	sub	sp, #32
 800286a:	af04      	add	r7, sp, #16
 800286c:	6078      	str	r0, [r7, #4]
    uint8_t registerContents;


    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_DEVID_REG, 1, &check, 1, i2c_timeout);
 800286e:	2364      	movs	r3, #100	; 0x64
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	2301      	movs	r3, #1
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	f107 030f 	add.w	r3, r7, #15
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2301      	movs	r3, #1
 800287e:	2200      	movs	r2, #0
 8002880:	21a6      	movs	r1, #166	; 0xa6
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f002 f99c 	bl	8004bc0 <HAL_I2C_Mem_Read>
    if (check == 0xE5)  // 0xE5 will be returned by the sensor if everything goes well
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	2be5      	cmp	r3, #229	; 0xe5
 800288c:	d15e      	bne.n	800294c <MPU6050_Init+0xe6>
    {
        // power management register 0X2D we should write all 0's to wake the sensor up
        Data = 0x0;
 800288e:	2300      	movs	r3, #0
 8002890:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 8002892:	2364      	movs	r3, #100	; 0x64
 8002894:	9302      	str	r3, [sp, #8]
 8002896:	2301      	movs	r3, #1
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	f107 030e 	add.w	r3, r7, #14
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	2301      	movs	r3, #1
 80028a2:	222d      	movs	r2, #45	; 0x2d
 80028a4:	21a6      	movs	r1, #166	; 0xa6
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f002 f890 	bl	80049cc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80028ac:	2064      	movs	r0, #100	; 0x64
 80028ae:	f000 fcbb 	bl	8003228 <HAL_Delay>

        // Set DATA FORMAT
        Data = 0x0B;
 80028b2:	230b      	movs	r3, #11
 80028b4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_DATA_FORMAT_REG, 1, &Data, 1, i2c_timeout);
 80028b6:	2364      	movs	r3, #100	; 0x64
 80028b8:	9302      	str	r3, [sp, #8]
 80028ba:	2301      	movs	r3, #1
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	f107 030e 	add.w	r3, r7, #14
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2301      	movs	r3, #1
 80028c6:	2231      	movs	r2, #49	; 0x31
 80028c8:	21a6      	movs	r1, #166	; 0xa6
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f002 f87e 	bl	80049cc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80028d0:	2064      	movs	r0, #100	; 0x64
 80028d2:	f000 fca9 	bl	8003228 <HAL_Delay>

        // Get the current register contents, so we don't clobber the power bit
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 80028d6:	2364      	movs	r3, #100	; 0x64
 80028d8:	9302      	str	r3, [sp, #8]
 80028da:	2301      	movs	r3, #1
 80028dc:	9301      	str	r3, [sp, #4]
 80028de:	f107 030d 	add.w	r3, r7, #13
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2301      	movs	r3, #1
 80028e6:	222c      	movs	r2, #44	; 0x2c
 80028e8:	21a6      	movs	r1, #166	; 0xa6
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f002 f968 	bl	8004bc0 <HAL_I2C_Mem_Read>
        registerContents &= 0x10;
 80028f0:	7b7b      	ldrb	r3, [r7, #13]
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	737b      	strb	r3, [r7, #13]
        registerContents |= ADXL345_3200HZ;
 80028fa:	7b7b      	ldrb	r3, [r7, #13]
 80028fc:	f043 030f 	orr.w	r3, r3, #15
 8002900:	b2db      	uxtb	r3, r3
 8002902:	737b      	strb	r3, [r7, #13]

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_BW_RATE_REG, 1, &registerContents, 1, i2c_timeout);
 8002904:	2364      	movs	r3, #100	; 0x64
 8002906:	9302      	str	r3, [sp, #8]
 8002908:	2301      	movs	r3, #1
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	f107 030d 	add.w	r3, r7, #13
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	2301      	movs	r3, #1
 8002914:	222c      	movs	r2, #44	; 0x2c
 8002916:	21a6      	movs	r1, #166	; 0xa6
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f002 f857 	bl	80049cc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 800291e:	2064      	movs	r0, #100	; 0x64
 8002920:	f000 fc82 	bl	8003228 <HAL_Delay>

        // Set Power Control to Measurement mode
        Data = 0x08;
 8002924:	2308      	movs	r3, #8
 8002926:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ADXL345_POWER_CTL_REG, 1, &Data, 1, i2c_timeout);
 8002928:	2364      	movs	r3, #100	; 0x64
 800292a:	9302      	str	r3, [sp, #8]
 800292c:	2301      	movs	r3, #1
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	f107 030e 	add.w	r3, r7, #14
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2301      	movs	r3, #1
 8002938:	222d      	movs	r2, #45	; 0x2d
 800293a:	21a6      	movs	r1, #166	; 0xa6
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f002 f845 	bl	80049cc <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8002942:	2064      	movs	r0, #100	; 0x64
 8002944:	f000 fc70 	bl	8003228 <HAL_Delay>

        return check;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	e000      	b.n	800294e <MPU6050_Init+0xe8>
    }
    return 1;
 800294c:	2301      	movs	r3, #1
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <MPU6050_Read_Accel>:
	}
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, address, 1, &offset, 1, i2c_timeout);

	return offset;
}
void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af04      	add	r7, sp, #16
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8002962:	2364      	movs	r3, #100	; 0x64
 8002964:	9302      	str	r3, [sp, #8]
 8002966:	2306      	movs	r3, #6
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	f107 0308 	add.w	r3, r7, #8
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2301      	movs	r3, #1
 8002972:	2232      	movs	r2, #50	; 0x32
 8002974:	21a6      	movs	r1, #166	; 0xa6
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f002 f922 	bl	8004bc0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[1] << 8 | Rec_Data[0]);
 800297c:	7a7b      	ldrb	r3, [r7, #9]
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	b21a      	sxth	r2, r3
 8002982:	7a3b      	ldrb	r3, [r7, #8]
 8002984:	b21b      	sxth	r3, r3
 8002986:	4313      	orrs	r3, r2
 8002988:	b21a      	sxth	r2, r3
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[3] << 8 | Rec_Data[2]);
 800298e:	7afb      	ldrb	r3, [r7, #11]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	b21a      	sxth	r2, r3
 8002994:	7abb      	ldrb	r3, [r7, #10]
 8002996:	b21b      	sxth	r3, r3
 8002998:	4313      	orrs	r3, r2
 800299a:	b21a      	sxth	r2, r3
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[5] << 8 | Rec_Data[4]);
 80029a0:	7b7b      	ldrb	r3, [r7, #13]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	b21a      	sxth	r2, r3
 80029a6:	7b3b      	ldrb	r3, [r7, #12]
 80029a8:	b21b      	sxth	r3, r3
 80029aa:	4313      	orrs	r3, r2
 80029ac:	b21a      	sxth	r2, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW * scale_factor / GRAVITY;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029c0:	4b27      	ldr	r3, [pc, #156]	; (8002a60 <MPU6050_Read_Accel+0x108>)
 80029c2:	edd3 7a00 	vldr	s15, [r3]
 80029c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ca:	ee17 0a90 	vmov	r0, s15
 80029ce:	f7fd fdc3 	bl	8000558 <__aeabi_f2d>
 80029d2:	a321      	add	r3, pc, #132	; (adr r3, 8002a58 <MPU6050_Read_Accel+0x100>)
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	f7fd ff40 	bl	800085c <__aeabi_ddiv>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	6839      	ldr	r1, [r7, #0]
 80029e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW * scale_factor / GRAVITY;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029ec:	ee07 3a90 	vmov	s15, r3
 80029f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029f4:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <MPU6050_Read_Accel+0x108>)
 80029f6:	edd3 7a00 	vldr	s15, [r3]
 80029fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fe:	ee17 0a90 	vmov	r0, s15
 8002a02:	f7fd fda9 	bl	8000558 <__aeabi_f2d>
 8002a06:	a314      	add	r3, pc, #80	; (adr r3, 8002a58 <MPU6050_Read_Accel+0x100>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd ff26 	bl	800085c <__aeabi_ddiv>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	6839      	ldr	r1, [r7, #0]
 8002a16:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW * scale_factor / GRAVITY;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a20:	ee07 3a90 	vmov	s15, r3
 8002a24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a28:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <MPU6050_Read_Accel+0x108>)
 8002a2a:	edd3 7a00 	vldr	s15, [r3]
 8002a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a32:	ee17 0a90 	vmov	r0, s15
 8002a36:	f7fd fd8f 	bl	8000558 <__aeabi_f2d>
 8002a3a:	a307      	add	r3, pc, #28	; (adr r3, 8002a58 <MPU6050_Read_Accel+0x100>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	f7fd ff0c 	bl	800085c <__aeabi_ddiv>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	6839      	ldr	r1, [r7, #0]
 8002a4a:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	3a92a305 	.word	0x3a92a305
 8002a5c:	40239d01 	.word	0x40239d01
 8002a60:	20000000 	.word	0x20000000

08002a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_MspInit+0x54>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	4a11      	ldr	r2, [pc, #68]	; (8002ab8 <HAL_MspInit+0x54>)
 8002a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a78:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7a:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <HAL_MspInit+0x54>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_MspInit+0x54>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <HAL_MspInit+0x54>)
 8002a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_MspInit+0x54>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	210f      	movs	r1, #15
 8002aa6:	f06f 0001 	mvn.w	r0, #1
 8002aaa:	f001 f881 	bl	8003bb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800

08002abc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a3c      	ldr	r2, [pc, #240]	; (8002bcc <HAL_ADC_MspInit+0x110>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d171      	bne.n	8002bc2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <HAL_ADC_MspInit+0x114>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	4a3a      	ldr	r2, [pc, #232]	; (8002bd0 <HAL_ADC_MspInit+0x114>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aec:	6453      	str	r3, [r2, #68]	; 0x44
 8002aee:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <HAL_ADC_MspInit+0x114>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	4b34      	ldr	r3, [pc, #208]	; (8002bd0 <HAL_ADC_MspInit+0x114>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	4a33      	ldr	r2, [pc, #204]	; (8002bd0 <HAL_ADC_MspInit+0x114>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0a:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_ADC_MspInit+0x114>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <HAL_ADC_MspInit+0x114>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	4a2c      	ldr	r2, [pc, #176]	; (8002bd0 <HAL_ADC_MspInit+0x114>)
 8002b20:	f043 0302 	orr.w	r3, r3, #2
 8002b24:	6313      	str	r3, [r2, #48]	; 0x30
 8002b26:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <HAL_ADC_MspInit+0x114>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BATT_LEVEL_Pin;
 8002b32:	2320      	movs	r3, #32
 8002b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b36:	2303      	movs	r3, #3
 8002b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	4619      	mov	r1, r3
 8002b44:	4823      	ldr	r0, [pc, #140]	; (8002bd4 <HAL_ADC_MspInit+0x118>)
 8002b46:	f001 fc5f 	bl	8004408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ACCU_LEVEL_Pin|FUEL_LEVEL_Pin;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b56:	f107 0314 	add.w	r3, r7, #20
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	481e      	ldr	r0, [pc, #120]	; (8002bd8 <HAL_ADC_MspInit+0x11c>)
 8002b5e:	f001 fc53 	bl	8004408 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002b62:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <HAL_ADC_MspInit+0x120>)
 8002b64:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <HAL_ADC_MspInit+0x124>)
 8002b66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b68:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <HAL_ADC_MspInit+0x120>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <HAL_ADC_MspInit+0x120>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_ADC_MspInit+0x120>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b7a:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <HAL_ADC_MspInit+0x120>)
 8002b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b82:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <HAL_ADC_MspInit+0x120>)
 8002b84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b8a:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <HAL_ADC_MspInit+0x120>)
 8002b8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_ADC_MspInit+0x120>)
 8002b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_ADC_MspInit+0x120>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <HAL_ADC_MspInit+0x120>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ba6:	480d      	ldr	r0, [pc, #52]	; (8002bdc <HAL_ADC_MspInit+0x120>)
 8002ba8:	f001 f82c 	bl	8003c04 <HAL_DMA_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002bb2:	f7ff fe53 	bl	800285c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a08      	ldr	r2, [pc, #32]	; (8002bdc <HAL_ADC_MspInit+0x120>)
 8002bba:	639a      	str	r2, [r3, #56]	; 0x38
 8002bbc:	4a07      	ldr	r2, [pc, #28]	; (8002bdc <HAL_ADC_MspInit+0x120>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bc2:	bf00      	nop
 8002bc4:	3728      	adds	r7, #40	; 0x28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40012000 	.word	0x40012000
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40020800 	.word	0x40020800
 8002bd8:	40020400 	.word	0x40020400
 8002bdc:	20005148 	.word	0x20005148
 8002be0:	40026410 	.word	0x40026410

08002be4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	; 0x28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <HAL_I2C_MspInit+0x84>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d12b      	bne.n	8002c5e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_I2C_MspInit+0x88>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <HAL_I2C_MspInit+0x88>)
 8002c10:	f043 0302 	orr.w	r3, r3, #2
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <HAL_I2C_MspInit+0x88>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c22:	23c0      	movs	r3, #192	; 0xc0
 8002c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c26:	2312      	movs	r3, #18
 8002c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c32:	2304      	movs	r3, #4
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c36:	f107 0314 	add.w	r3, r7, #20
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	480c      	ldr	r0, [pc, #48]	; (8002c70 <HAL_I2C_MspInit+0x8c>)
 8002c3e:	f001 fbe3 	bl	8004408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HAL_I2C_MspInit+0x88>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	4a08      	ldr	r2, [pc, #32]	; (8002c6c <HAL_I2C_MspInit+0x88>)
 8002c4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c50:	6413      	str	r3, [r2, #64]	; 0x40
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_I2C_MspInit+0x88>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c5e:	bf00      	nop
 8002c60:	3728      	adds	r7, #40	; 0x28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40005400 	.word	0x40005400
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40020400 	.word	0x40020400

08002c74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a19      	ldr	r2, [pc, #100]	; (8002cf8 <HAL_SPI_MspInit+0x84>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d12b      	bne.n	8002cee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <HAL_SPI_MspInit+0x88>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <HAL_SPI_MspInit+0x88>)
 8002ca0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <HAL_SPI_MspInit+0x88>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_SPI_MspInit+0x88>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	4a10      	ldr	r2, [pc, #64]	; (8002cfc <HAL_SPI_MspInit+0x88>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <HAL_SPI_MspInit+0x88>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002cce:	23e0      	movs	r3, #224	; 0xe0
 8002cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cde:	2305      	movs	r3, #5
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce2:	f107 0314 	add.w	r3, r7, #20
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4805      	ldr	r0, [pc, #20]	; (8002d00 <HAL_SPI_MspInit+0x8c>)
 8002cea:	f001 fb8d 	bl	8004408 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002cee:	bf00      	nop
 8002cf0:	3728      	adds	r7, #40	; 0x28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40013000 	.word	0x40013000
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40020000 	.word	0x40020000

08002d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08c      	sub	sp, #48	; 0x30
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 031c 	add.w	r3, r7, #28
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a4e      	ldr	r2, [pc, #312]	; (8002e5c <HAL_UART_MspInit+0x158>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d164      	bne.n	8002df0 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	4b4d      	ldr	r3, [pc, #308]	; (8002e60 <HAL_UART_MspInit+0x15c>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4a4c      	ldr	r2, [pc, #304]	; (8002e60 <HAL_UART_MspInit+0x15c>)
 8002d30:	f043 0310 	orr.w	r3, r3, #16
 8002d34:	6453      	str	r3, [r2, #68]	; 0x44
 8002d36:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <HAL_UART_MspInit+0x15c>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	61bb      	str	r3, [r7, #24]
 8002d40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	4b46      	ldr	r3, [pc, #280]	; (8002e60 <HAL_UART_MspInit+0x15c>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a45      	ldr	r2, [pc, #276]	; (8002e60 <HAL_UART_MspInit+0x15c>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b43      	ldr	r3, [pc, #268]	; (8002e60 <HAL_UART_MspInit+0x15c>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d70:	2307      	movs	r3, #7
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	f107 031c 	add.w	r3, r7, #28
 8002d78:	4619      	mov	r1, r3
 8002d7a:	483a      	ldr	r0, [pc, #232]	; (8002e64 <HAL_UART_MspInit+0x160>)
 8002d7c:	f001 fb44 	bl	8004408 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002d80:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <HAL_UART_MspInit+0x164>)
 8002d82:	4a3a      	ldr	r2, [pc, #232]	; (8002e6c <HAL_UART_MspInit+0x168>)
 8002d84:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002d86:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <HAL_UART_MspInit+0x164>)
 8002d88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d8c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d8e:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <HAL_UART_MspInit+0x164>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d94:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <HAL_UART_MspInit+0x164>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d9a:	4b33      	ldr	r3, [pc, #204]	; (8002e68 <HAL_UART_MspInit+0x164>)
 8002d9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002da0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002da2:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <HAL_UART_MspInit+0x164>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002da8:	4b2f      	ldr	r3, [pc, #188]	; (8002e68 <HAL_UART_MspInit+0x164>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002dae:	4b2e      	ldr	r3, [pc, #184]	; (8002e68 <HAL_UART_MspInit+0x164>)
 8002db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002db4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002db6:	4b2c      	ldr	r3, [pc, #176]	; (8002e68 <HAL_UART_MspInit+0x164>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dbc:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <HAL_UART_MspInit+0x164>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002dc2:	4829      	ldr	r0, [pc, #164]	; (8002e68 <HAL_UART_MspInit+0x164>)
 8002dc4:	f000 ff1e 	bl	8003c04 <HAL_DMA_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002dce:	f7ff fd45 	bl	800285c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <HAL_UART_MspInit+0x164>)
 8002dd6:	639a      	str	r2, [r3, #56]	; 0x38
 8002dd8:	4a23      	ldr	r2, [pc, #140]	; (8002e68 <HAL_UART_MspInit+0x164>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2105      	movs	r1, #5
 8002de2:	2025      	movs	r0, #37	; 0x25
 8002de4:	f000 fee4 	bl	8003bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002de8:	2025      	movs	r0, #37	; 0x25
 8002dea:	f000 fefd 	bl	8003be8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002dee:	e030      	b.n	8002e52 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <HAL_UART_MspInit+0x16c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d12b      	bne.n	8002e52 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_UART_MspInit+0x15c>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	4a17      	ldr	r2, [pc, #92]	; (8002e60 <HAL_UART_MspInit+0x15c>)
 8002e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e08:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <HAL_UART_MspInit+0x15c>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <HAL_UART_MspInit+0x15c>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	4a10      	ldr	r2, [pc, #64]	; (8002e60 <HAL_UART_MspInit+0x15c>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6313      	str	r3, [r2, #48]	; 0x30
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <HAL_UART_MspInit+0x15c>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e32:	230c      	movs	r3, #12
 8002e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e36:	2302      	movs	r3, #2
 8002e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e42:	2307      	movs	r3, #7
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e46:	f107 031c 	add.w	r3, r7, #28
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4805      	ldr	r0, [pc, #20]	; (8002e64 <HAL_UART_MspInit+0x160>)
 8002e4e:	f001 fadb 	bl	8004408 <HAL_GPIO_Init>
}
 8002e52:	bf00      	nop
 8002e54:	3730      	adds	r7, #48	; 0x30
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40011000 	.word	0x40011000
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40020000 	.word	0x40020000
 8002e68:	20005094 	.word	0x20005094
 8002e6c:	40026440 	.word	0x40026440
 8002e70:	40004400 	.word	0x40004400

08002e74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08c      	sub	sp, #48	; 0x30
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002e84:	2200      	movs	r2, #0
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	2019      	movs	r0, #25
 8002e8a:	f000 fe91 	bl	8003bb0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e8e:	2019      	movs	r0, #25
 8002e90:	f000 feaa 	bl	8003be8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <HAL_InitTick+0xa0>)
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <HAL_InitTick+0xa0>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <HAL_InitTick+0xa0>)
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002eb0:	f107 0210 	add.w	r2, r7, #16
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f003 f876 	bl	8005fac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002ec0:	f003 f860 	bl	8005f84 <HAL_RCC_GetPCLK2Freq>
 8002ec4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <HAL_InitTick+0xa4>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	0c9b      	lsrs	r3, r3, #18
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002ed4:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <HAL_InitTick+0xa8>)
 8002ed6:	4a12      	ldr	r2, [pc, #72]	; (8002f20 <HAL_InitTick+0xac>)
 8002ed8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002eda:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_InitTick+0xa8>)
 8002edc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ee0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002ee2:	4a0e      	ldr	r2, [pc, #56]	; (8002f1c <HAL_InitTick+0xa8>)
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <HAL_InitTick+0xa8>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_InitTick+0xa8>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002ef4:	4809      	ldr	r0, [pc, #36]	; (8002f1c <HAL_InitTick+0xa8>)
 8002ef6:	f003 fe33 	bl	8006b60 <HAL_TIM_Base_Init>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d104      	bne.n	8002f0a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002f00:	4806      	ldr	r0, [pc, #24]	; (8002f1c <HAL_InitTick+0xa8>)
 8002f02:	f003 fe87 	bl	8006c14 <HAL_TIM_Base_Start_IT>
 8002f06:	4603      	mov	r3, r0
 8002f08:	e000      	b.n	8002f0c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3730      	adds	r7, #48	; 0x30
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40023800 	.word	0x40023800
 8002f18:	431bde83 	.word	0x431bde83
 8002f1c:	200054b0 	.word	0x200054b0
 8002f20:	40010000 	.word	0x40010000

08002f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f28:	e7fe      	b.n	8002f28 <NMI_Handler+0x4>

08002f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f2e:	e7fe      	b.n	8002f2e <HardFault_Handler+0x4>

08002f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f34:	e7fe      	b.n	8002f34 <MemManage_Handler+0x4>

08002f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f36:	b480      	push	{r7}
 8002f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f3a:	e7fe      	b.n	8002f3a <BusFault_Handler+0x4>

08002f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f40:	e7fe      	b.n	8002f40 <UsageFault_Handler+0x4>

08002f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f54:	4802      	ldr	r0, [pc, #8]	; (8002f60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002f56:	f003 febf 	bl	8006cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200054b0 	.word	0x200054b0

08002f64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f68:	4802      	ldr	r0, [pc, #8]	; (8002f74 <USART1_IRQHandler+0x10>)
 8002f6a:	f004 f989 	bl	8007280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200050f4 	.word	0x200050f4

08002f78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f7c:	4802      	ldr	r0, [pc, #8]	; (8002f88 <DMA2_Stream0_IRQHandler+0x10>)
 8002f7e:	f000 ffd9 	bl	8003f34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20005148 	.word	0x20005148

08002f8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002f90:	4802      	ldr	r0, [pc, #8]	; (8002f9c <DMA2_Stream2_IRQHandler+0x10>)
 8002f92:	f000 ffcf 	bl	8003f34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20005094 	.word	0x20005094

08002fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
	return 1;
 8002fa4:	2301      	movs	r3, #1
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <_kill>:

int _kill(int pid, int sig)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002fba:	f00b f943 	bl	800e244 <__errno>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2216      	movs	r2, #22
 8002fc2:	601a      	str	r2, [r3, #0]
	return -1;
 8002fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <_exit>:

void _exit (int status)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ffe7 	bl	8002fb0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002fe2:	e7fe      	b.n	8002fe2 <_exit+0x12>

08002fe4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	e00a      	b.n	800300c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ff6:	f3af 8000 	nop.w
 8002ffa:	4601      	mov	r1, r0
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	60ba      	str	r2, [r7, #8]
 8003002:	b2ca      	uxtb	r2, r1
 8003004:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3301      	adds	r3, #1
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	429a      	cmp	r2, r3
 8003012:	dbf0      	blt.n	8002ff6 <_read+0x12>
	}

return len;
 8003014:	687b      	ldr	r3, [r7, #4]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	e009      	b.n	8003044 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	60ba      	str	r2, [r7, #8]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	3301      	adds	r3, #1
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	429a      	cmp	r2, r3
 800304a:	dbf1      	blt.n	8003030 <_write+0x12>
	}
	return len;
 800304c:	687b      	ldr	r3, [r7, #4]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <_close>:

int _close(int file)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
	return -1;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800307e:	605a      	str	r2, [r3, #4]
	return 0;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <_isatty>:

int _isatty(int file)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
	return 1;
 8003096:	2301      	movs	r3, #1
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
	return 0;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030c8:	4a14      	ldr	r2, [pc, #80]	; (800311c <_sbrk+0x5c>)
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <_sbrk+0x60>)
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030d4:	4b13      	ldr	r3, [pc, #76]	; (8003124 <_sbrk+0x64>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <_sbrk+0x64>)
 80030de:	4a12      	ldr	r2, [pc, #72]	; (8003128 <_sbrk+0x68>)
 80030e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <_sbrk+0x64>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d207      	bcs.n	8003100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030f0:	f00b f8a8 	bl	800e244 <__errno>
 80030f4:	4603      	mov	r3, r0
 80030f6:	220c      	movs	r2, #12
 80030f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030fa:	f04f 33ff 	mov.w	r3, #4294967295
 80030fe:	e009      	b.n	8003114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <_sbrk+0x64>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <_sbrk+0x64>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	4a05      	ldr	r2, [pc, #20]	; (8003124 <_sbrk+0x64>)
 8003110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003112:	68fb      	ldr	r3, [r7, #12]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20018000 	.word	0x20018000
 8003120:	00000400 	.word	0x00000400
 8003124:	20000334 	.word	0x20000334
 8003128:	200059b8 	.word	0x200059b8

0800312c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <SystemInit+0x20>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003136:	4a05      	ldr	r2, [pc, #20]	; (800314c <SystemInit+0x20>)
 8003138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800313c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003188 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003154:	480d      	ldr	r0, [pc, #52]	; (800318c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003156:	490e      	ldr	r1, [pc, #56]	; (8003190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003158:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800315a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800315c:	e002      	b.n	8003164 <LoopCopyDataInit>

0800315e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800315e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003162:	3304      	adds	r3, #4

08003164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003168:	d3f9      	bcc.n	800315e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800316a:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800316c:	4c0b      	ldr	r4, [pc, #44]	; (800319c <LoopFillZerobss+0x26>)
  movs r3, #0
 800316e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003170:	e001      	b.n	8003176 <LoopFillZerobss>

08003172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003174:	3204      	adds	r2, #4

08003176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003178:	d3fb      	bcc.n	8003172 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800317a:	f7ff ffd7 	bl	800312c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800317e:	f00b f867 	bl	800e250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003182:	f7fe faa5 	bl	80016d0 <main>
  bx  lr    
 8003186:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003188:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800318c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003190:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003194:	080132f8 	.word	0x080132f8
  ldr r2, =_sbss
 8003198:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800319c:	200059b8 	.word	0x200059b8

080031a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031a0:	e7fe      	b.n	80031a0 <ADC_IRQHandler>
	...

080031a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <HAL_Init+0x40>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <HAL_Init+0x40>)
 80031ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_Init+0x40>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <HAL_Init+0x40>)
 80031ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c0:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <HAL_Init+0x40>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <HAL_Init+0x40>)
 80031c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031cc:	2003      	movs	r0, #3
 80031ce:	f000 fce4 	bl	8003b9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031d2:	2000      	movs	r0, #0
 80031d4:	f7ff fe4e 	bl	8002e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031d8:	f7ff fc44 	bl	8002a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023c00 	.word	0x40023c00

080031e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_IncTick+0x20>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_IncTick+0x24>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4413      	add	r3, r2
 80031f8:	4a04      	ldr	r2, [pc, #16]	; (800320c <HAL_IncTick+0x24>)
 80031fa:	6013      	str	r3, [r2, #0]
}
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	2000000c 	.word	0x2000000c
 800320c:	200054f8 	.word	0x200054f8

08003210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return uwTick;
 8003214:	4b03      	ldr	r3, [pc, #12]	; (8003224 <HAL_GetTick+0x14>)
 8003216:	681b      	ldr	r3, [r3, #0]
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	200054f8 	.word	0x200054f8

08003228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003230:	f7ff ffee 	bl	8003210 <HAL_GetTick>
 8003234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003240:	d005      	beq.n	800324e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <HAL_Delay+0x44>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800324e:	bf00      	nop
 8003250:	f7ff ffde 	bl	8003210 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	429a      	cmp	r2, r3
 800325e:	d8f7      	bhi.n	8003250 <HAL_Delay+0x28>
  {
  }
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	2000000c 	.word	0x2000000c

08003270 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e033      	b.n	80032ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff fc14 	bl	8002abc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d118      	bne.n	80032e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032b6:	f023 0302 	bic.w	r3, r3, #2
 80032ba:	f043 0202 	orr.w	r2, r3, #2
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fa3e 	bl	8003744 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f023 0303 	bic.w	r3, r3, #3
 80032d6:	f043 0201 	orr.w	r2, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
 80032de:	e001      	b.n	80032e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_ADC_Start_DMA+0x1e>
 8003312:	2302      	movs	r3, #2
 8003314:	e0ce      	b.n	80034b4 <HAL_ADC_Start_DMA+0x1bc>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d018      	beq.n	800335e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800333c:	4b5f      	ldr	r3, [pc, #380]	; (80034bc <HAL_ADC_Start_DMA+0x1c4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a5f      	ldr	r2, [pc, #380]	; (80034c0 <HAL_ADC_Start_DMA+0x1c8>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	0c9a      	lsrs	r2, r3, #18
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003350:	e002      	b.n	8003358 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	3b01      	subs	r3, #1
 8003356:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f9      	bne.n	8003352 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336c:	d107      	bne.n	800337e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800337c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b01      	cmp	r3, #1
 800338a:	f040 8086 	bne.w	800349a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d007      	beq.n	80033c0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033cc:	d106      	bne.n	80033dc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	f023 0206 	bic.w	r2, r3, #6
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44
 80033da:	e002      	b.n	80033e2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033ea:	4b36      	ldr	r3, [pc, #216]	; (80034c4 <HAL_ADC_Start_DMA+0x1cc>)
 80033ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	4a35      	ldr	r2, [pc, #212]	; (80034c8 <HAL_ADC_Start_DMA+0x1d0>)
 80033f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	4a34      	ldr	r2, [pc, #208]	; (80034cc <HAL_ADC_Start_DMA+0x1d4>)
 80033fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	4a33      	ldr	r2, [pc, #204]	; (80034d0 <HAL_ADC_Start_DMA+0x1d8>)
 8003404:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800340e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800341e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800342e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	334c      	adds	r3, #76	; 0x4c
 800343a:	4619      	mov	r1, r3
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f000 fc8e 	bl	8003d60 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10f      	bne.n	8003470 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d129      	bne.n	80034b2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	e020      	b.n	80034b2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a17      	ldr	r2, [pc, #92]	; (80034d4 <HAL_ADC_Start_DMA+0x1dc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d11b      	bne.n	80034b2 <HAL_ADC_Start_DMA+0x1ba>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d114      	bne.n	80034b2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	e00b      	b.n	80034b2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f043 0210 	orr.w	r2, r3, #16
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	f043 0201 	orr.w	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20000004 	.word	0x20000004
 80034c0:	431bde83 	.word	0x431bde83
 80034c4:	40012300 	.word	0x40012300
 80034c8:	0800393d 	.word	0x0800393d
 80034cc:	080039f7 	.word	0x080039f7
 80034d0:	08003a13 	.word	0x08003a13
 80034d4:	40012000 	.word	0x40012000

080034d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_ADC_ConfigChannel+0x1c>
 8003518:	2302      	movs	r3, #2
 800351a:	e105      	b.n	8003728 <HAL_ADC_ConfigChannel+0x228>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b09      	cmp	r3, #9
 800352a:	d925      	bls.n	8003578 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68d9      	ldr	r1, [r3, #12]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	3b1e      	subs	r3, #30
 8003542:	2207      	movs	r2, #7
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43da      	mvns	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	400a      	ands	r2, r1
 8003550:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68d9      	ldr	r1, [r3, #12]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	4618      	mov	r0, r3
 8003564:	4603      	mov	r3, r0
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4403      	add	r3, r0
 800356a:	3b1e      	subs	r3, #30
 800356c:	409a      	lsls	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	e022      	b.n	80035be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6919      	ldr	r1, [r3, #16]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	2207      	movs	r2, #7
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43da      	mvns	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	400a      	ands	r2, r1
 800359a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6919      	ldr	r1, [r3, #16]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	4618      	mov	r0, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4403      	add	r3, r0
 80035b4:	409a      	lsls	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d824      	bhi.n	8003610 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	3b05      	subs	r3, #5
 80035d8:	221f      	movs	r2, #31
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43da      	mvns	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	400a      	ands	r2, r1
 80035e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	4618      	mov	r0, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	3b05      	subs	r3, #5
 8003602:	fa00 f203 	lsl.w	r2, r0, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	635a      	str	r2, [r3, #52]	; 0x34
 800360e:	e04c      	b.n	80036aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b0c      	cmp	r3, #12
 8003616:	d824      	bhi.n	8003662 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	3b23      	subs	r3, #35	; 0x23
 800362a:	221f      	movs	r2, #31
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43da      	mvns	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	400a      	ands	r2, r1
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	b29b      	uxth	r3, r3
 8003646:	4618      	mov	r0, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	3b23      	subs	r3, #35	; 0x23
 8003654:	fa00 f203 	lsl.w	r2, r0, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
 8003660:	e023      	b.n	80036aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	3b41      	subs	r3, #65	; 0x41
 8003674:	221f      	movs	r2, #31
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43da      	mvns	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	400a      	ands	r2, r1
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	b29b      	uxth	r3, r3
 8003690:	4618      	mov	r0, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	3b41      	subs	r3, #65	; 0x41
 800369e:	fa00 f203 	lsl.w	r2, r0, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036aa:	4b22      	ldr	r3, [pc, #136]	; (8003734 <HAL_ADC_ConfigChannel+0x234>)
 80036ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a21      	ldr	r2, [pc, #132]	; (8003738 <HAL_ADC_ConfigChannel+0x238>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d109      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x1cc>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b12      	cmp	r3, #18
 80036be:	d105      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a19      	ldr	r2, [pc, #100]	; (8003738 <HAL_ADC_ConfigChannel+0x238>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d123      	bne.n	800371e <HAL_ADC_ConfigChannel+0x21e>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b10      	cmp	r3, #16
 80036dc:	d003      	beq.n	80036e6 <HAL_ADC_ConfigChannel+0x1e6>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b11      	cmp	r3, #17
 80036e4:	d11b      	bne.n	800371e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b10      	cmp	r3, #16
 80036f8:	d111      	bne.n	800371e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <HAL_ADC_ConfigChannel+0x23c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a10      	ldr	r2, [pc, #64]	; (8003740 <HAL_ADC_ConfigChannel+0x240>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	0c9a      	lsrs	r2, r3, #18
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003710:	e002      	b.n	8003718 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3b01      	subs	r3, #1
 8003716:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f9      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40012300 	.word	0x40012300
 8003738:	40012000 	.word	0x40012000
 800373c:	20000004 	.word	0x20000004
 8003740:	431bde83 	.word	0x431bde83

08003744 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800374c:	4b79      	ldr	r3, [pc, #484]	; (8003934 <ADC_Init+0x1f0>)
 800374e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003778:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6859      	ldr	r1, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	021a      	lsls	r2, r3, #8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800379c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6899      	ldr	r1, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	4a58      	ldr	r2, [pc, #352]	; (8003938 <ADC_Init+0x1f4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d022      	beq.n	8003822 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6899      	ldr	r1, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800380c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6899      	ldr	r1, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	e00f      	b.n	8003842 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003830:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003840:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0202 	bic.w	r2, r2, #2
 8003850:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6899      	ldr	r1, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7e1b      	ldrb	r3, [r3, #24]
 800385c:	005a      	lsls	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01b      	beq.n	80038a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800387e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800388e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6859      	ldr	r1, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	3b01      	subs	r3, #1
 800389c:	035a      	lsls	r2, r3, #13
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	e007      	b.n	80038b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	051a      	lsls	r2, r3, #20
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6899      	ldr	r1, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038fa:	025a      	lsls	r2, r3, #9
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6899      	ldr	r1, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	029a      	lsls	r2, r3, #10
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	609a      	str	r2, [r3, #8]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	40012300 	.word	0x40012300
 8003938:	0f000001 	.word	0x0f000001

0800393c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003952:	2b00      	cmp	r3, #0
 8003954:	d13c      	bne.n	80039d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d12b      	bne.n	80039c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003974:	2b00      	cmp	r3, #0
 8003976:	d127      	bne.n	80039c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003982:	2b00      	cmp	r3, #0
 8003984:	d006      	beq.n	8003994 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003990:	2b00      	cmp	r3, #0
 8003992:	d119      	bne.n	80039c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0220 	bic.w	r2, r2, #32
 80039a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f043 0201 	orr.w	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f7fd fe35 	bl	8001638 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039ce:	e00e      	b.n	80039ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7ff fd85 	bl	80034ec <HAL_ADC_ErrorCallback>
}
 80039e2:	e004      	b.n	80039ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f7ff fd67 	bl	80034d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2240      	movs	r2, #64	; 0x40
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f043 0204 	orr.w	r2, r3, #4
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f7ff fd5a 	bl	80034ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <__NVIC_SetPriorityGrouping+0x44>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a72:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <__NVIC_SetPriorityGrouping+0x44>)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	60d3      	str	r3, [r2, #12]
}
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a8c:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	0a1b      	lsrs	r3, r3, #8
 8003a92:	f003 0307 	and.w	r3, r3, #7
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	db0b      	blt.n	8003ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	f003 021f 	and.w	r2, r3, #31
 8003abc:	4907      	ldr	r1, [pc, #28]	; (8003adc <__NVIC_EnableIRQ+0x38>)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	e000e100 	.word	0xe000e100

08003ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	6039      	str	r1, [r7, #0]
 8003aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	db0a      	blt.n	8003b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	490c      	ldr	r1, [pc, #48]	; (8003b2c <__NVIC_SetPriority+0x4c>)
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	0112      	lsls	r2, r2, #4
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	440b      	add	r3, r1
 8003b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b08:	e00a      	b.n	8003b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	4908      	ldr	r1, [pc, #32]	; (8003b30 <__NVIC_SetPriority+0x50>)
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	3b04      	subs	r3, #4
 8003b18:	0112      	lsls	r2, r2, #4
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	761a      	strb	r2, [r3, #24]
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	e000e100 	.word	0xe000e100
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b089      	sub	sp, #36	; 0x24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f1c3 0307 	rsb	r3, r3, #7
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	bf28      	it	cs
 8003b52:	2304      	movcs	r3, #4
 8003b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	2b06      	cmp	r3, #6
 8003b5c:	d902      	bls.n	8003b64 <NVIC_EncodePriority+0x30>
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3b03      	subs	r3, #3
 8003b62:	e000      	b.n	8003b66 <NVIC_EncodePriority+0x32>
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b68:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43da      	mvns	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	401a      	ands	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	fa01 f303 	lsl.w	r3, r1, r3
 8003b86:	43d9      	mvns	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b8c:	4313      	orrs	r3, r2
         );
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3724      	adds	r7, #36	; 0x24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff ff4c 	bl	8003a40 <__NVIC_SetPriorityGrouping>
}
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bc2:	f7ff ff61 	bl	8003a88 <__NVIC_GetPriorityGrouping>
 8003bc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	6978      	ldr	r0, [r7, #20]
 8003bce:	f7ff ffb1 	bl	8003b34 <NVIC_EncodePriority>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd8:	4611      	mov	r1, r2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff ff80 	bl	8003ae0 <__NVIC_SetPriority>
}
 8003be0:	bf00      	nop
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff ff54 	bl	8003aa4 <__NVIC_EnableIRQ>
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c10:	f7ff fafe 	bl	8003210 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e099      	b.n	8003d54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c40:	e00f      	b.n	8003c62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c42:	f7ff fae5 	bl	8003210 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b05      	cmp	r3, #5
 8003c4e:	d908      	bls.n	8003c62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2203      	movs	r2, #3
 8003c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e078      	b.n	8003d54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e8      	bne.n	8003c42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4b38      	ldr	r3, [pc, #224]	; (8003d5c <HAL_DMA_Init+0x158>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d107      	bne.n	8003ccc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f023 0307 	bic.w	r3, r3, #7
 8003ce2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d117      	bne.n	8003d26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00e      	beq.n	8003d26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fb01 	bl	8004310 <DMA_CheckFifoParam>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2240      	movs	r2, #64	; 0x40
 8003d18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d22:	2301      	movs	r3, #1
 8003d24:	e016      	b.n	8003d54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fab8 	bl	80042a4 <DMA_CalcBaseAndBitshift>
 8003d34:	4603      	mov	r3, r0
 8003d36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3c:	223f      	movs	r2, #63	; 0x3f
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	f010803f 	.word	0xf010803f

08003d60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_DMA_Start_IT+0x26>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e040      	b.n	8003e08 <HAL_DMA_Start_IT+0xa8>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d12f      	bne.n	8003dfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 fa4a 	bl	8004248 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db8:	223f      	movs	r2, #63	; 0x3f
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0216 	orr.w	r2, r2, #22
 8003dce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d007      	beq.n	8003de8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0208 	orr.w	r2, r2, #8
 8003de6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	e005      	b.n	8003e06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e02:	2302      	movs	r3, #2
 8003e04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e1e:	f7ff f9f7 	bl	8003210 <HAL_GetTick>
 8003e22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d008      	beq.n	8003e42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2280      	movs	r2, #128	; 0x80
 8003e34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e052      	b.n	8003ee8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0216 	bic.w	r2, r2, #22
 8003e50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <HAL_DMA_Abort+0x62>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0208 	bic.w	r2, r2, #8
 8003e80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e92:	e013      	b.n	8003ebc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e94:	f7ff f9bc 	bl	8003210 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d90c      	bls.n	8003ebc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e015      	b.n	8003ee8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1e4      	bne.n	8003e94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	223f      	movs	r2, #63	; 0x3f
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d004      	beq.n	8003f0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2280      	movs	r2, #128	; 0x80
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e00c      	b.n	8003f28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2205      	movs	r2, #5
 8003f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f40:	4b92      	ldr	r3, [pc, #584]	; (800418c <HAL_DMA_IRQHandler+0x258>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a92      	ldr	r2, [pc, #584]	; (8004190 <HAL_DMA_IRQHandler+0x25c>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	0a9b      	lsrs	r3, r3, #10
 8003f4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5e:	2208      	movs	r2, #8
 8003f60:	409a      	lsls	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4013      	ands	r3, r2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01a      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d013      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0204 	bic.w	r2, r2, #4
 8003f86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f98:	f043 0201 	orr.w	r2, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	409a      	lsls	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d012      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00b      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fce:	f043 0202 	orr.w	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fda:	2204      	movs	r2, #4
 8003fdc:	409a      	lsls	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d012      	beq.n	800400c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00b      	beq.n	800400c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff8:	2204      	movs	r2, #4
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004004:	f043 0204 	orr.w	r2, r3, #4
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004010:	2210      	movs	r2, #16
 8004012:	409a      	lsls	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4013      	ands	r3, r2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d043      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d03c      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402e:	2210      	movs	r2, #16
 8004030:	409a      	lsls	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d018      	beq.n	8004076 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d108      	bne.n	8004064 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d024      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
 8004062:	e01f      	b.n	80040a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01b      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	4798      	blx	r3
 8004074:	e016      	b.n	80040a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d107      	bne.n	8004094 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0208 	bic.w	r2, r2, #8
 8004092:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	2220      	movs	r2, #32
 80040aa:	409a      	lsls	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 808e 	beq.w	80041d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8086 	beq.w	80041d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ca:	2220      	movs	r2, #32
 80040cc:	409a      	lsls	r2, r3
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b05      	cmp	r3, #5
 80040dc:	d136      	bne.n	800414c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0216 	bic.w	r2, r2, #22
 80040ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d103      	bne.n	800410e <HAL_DMA_IRQHandler+0x1da>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410a:	2b00      	cmp	r3, #0
 800410c:	d007      	beq.n	800411e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0208 	bic.w	r2, r2, #8
 800411c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004122:	223f      	movs	r2, #63	; 0x3f
 8004124:	409a      	lsls	r2, r3
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413e:	2b00      	cmp	r3, #0
 8004140:	d07d      	beq.n	800423e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
        }
        return;
 800414a:	e078      	b.n	800423e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d01c      	beq.n	8004194 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d108      	bne.n	800417a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416c:	2b00      	cmp	r3, #0
 800416e:	d030      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4798      	blx	r3
 8004178:	e02b      	b.n	80041d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d027      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	4798      	blx	r3
 800418a:	e022      	b.n	80041d2 <HAL_DMA_IRQHandler+0x29e>
 800418c:	20000004 	.word	0x20000004
 8004190:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10f      	bne.n	80041c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0210 	bic.w	r2, r2, #16
 80041b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d032      	beq.n	8004240 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d022      	beq.n	800422c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2205      	movs	r2, #5
 80041ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	3301      	adds	r3, #1
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	429a      	cmp	r2, r3
 8004208:	d307      	bcc.n	800421a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f2      	bne.n	80041fe <HAL_DMA_IRQHandler+0x2ca>
 8004218:	e000      	b.n	800421c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800421a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
 800423c:	e000      	b.n	8004240 <HAL_DMA_IRQHandler+0x30c>
        return;
 800423e:	bf00      	nop
    }
  }
}
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop

08004248 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004264:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b40      	cmp	r3, #64	; 0x40
 8004274:	d108      	bne.n	8004288 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004286:	e007      	b.n	8004298 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	60da      	str	r2, [r3, #12]
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	3b10      	subs	r3, #16
 80042b4:	4a14      	ldr	r2, [pc, #80]	; (8004308 <DMA_CalcBaseAndBitshift+0x64>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	091b      	lsrs	r3, r3, #4
 80042bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042be:	4a13      	ldr	r2, [pc, #76]	; (800430c <DMA_CalcBaseAndBitshift+0x68>)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4413      	add	r3, r2
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d909      	bls.n	80042e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042da:	f023 0303 	bic.w	r3, r3, #3
 80042de:	1d1a      	adds	r2, r3, #4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	659a      	str	r2, [r3, #88]	; 0x58
 80042e4:	e007      	b.n	80042f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042ee:	f023 0303 	bic.w	r3, r3, #3
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	aaaaaaab 	.word	0xaaaaaaab
 800430c:	08012d58 	.word	0x08012d58

08004310 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d11f      	bne.n	800436a <DMA_CheckFifoParam+0x5a>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b03      	cmp	r3, #3
 800432e:	d856      	bhi.n	80043de <DMA_CheckFifoParam+0xce>
 8004330:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <DMA_CheckFifoParam+0x28>)
 8004332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004336:	bf00      	nop
 8004338:	08004349 	.word	0x08004349
 800433c:	0800435b 	.word	0x0800435b
 8004340:	08004349 	.word	0x08004349
 8004344:	080043df 	.word	0x080043df
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d046      	beq.n	80043e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004358:	e043      	b.n	80043e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004362:	d140      	bne.n	80043e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004368:	e03d      	b.n	80043e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004372:	d121      	bne.n	80043b8 <DMA_CheckFifoParam+0xa8>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b03      	cmp	r3, #3
 8004378:	d837      	bhi.n	80043ea <DMA_CheckFifoParam+0xda>
 800437a:	a201      	add	r2, pc, #4	; (adr r2, 8004380 <DMA_CheckFifoParam+0x70>)
 800437c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004380:	08004391 	.word	0x08004391
 8004384:	08004397 	.word	0x08004397
 8004388:	08004391 	.word	0x08004391
 800438c:	080043a9 	.word	0x080043a9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
      break;
 8004394:	e030      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d025      	beq.n	80043ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a6:	e022      	b.n	80043ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043b0:	d11f      	bne.n	80043f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043b6:	e01c      	b.n	80043f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d903      	bls.n	80043c6 <DMA_CheckFifoParam+0xb6>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d003      	beq.n	80043cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043c4:	e018      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
      break;
 80043ca:	e015      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00e      	beq.n	80043f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
      break;
 80043dc:	e00b      	b.n	80043f6 <DMA_CheckFifoParam+0xe6>
      break;
 80043de:	bf00      	nop
 80043e0:	e00a      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
      break;
 80043e2:	bf00      	nop
 80043e4:	e008      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
      break;
 80043e6:	bf00      	nop
 80043e8:	e006      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
      break;
 80043ea:	bf00      	nop
 80043ec:	e004      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
      break;
 80043ee:	bf00      	nop
 80043f0:	e002      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80043f2:	bf00      	nop
 80043f4:	e000      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
      break;
 80043f6:	bf00      	nop
    }
  } 
  
  return status; 
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop

08004408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004408:	b480      	push	{r7}
 800440a:	b089      	sub	sp, #36	; 0x24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004416:	2300      	movs	r3, #0
 8004418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800441a:	2300      	movs	r3, #0
 800441c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	e159      	b.n	80046d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004424:	2201      	movs	r2, #1
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	429a      	cmp	r2, r3
 800443e:	f040 8148 	bne.w	80046d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b01      	cmp	r3, #1
 800444c:	d005      	beq.n	800445a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004456:	2b02      	cmp	r3, #2
 8004458:	d130      	bne.n	80044bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	2203      	movs	r2, #3
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	43db      	mvns	r3, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	4313      	orrs	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004490:	2201      	movs	r2, #1
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	f003 0201 	and.w	r2, r3, #1
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d017      	beq.n	80044f8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	2203      	movs	r2, #3
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	43db      	mvns	r3, r3
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	4013      	ands	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d123      	bne.n	800454c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	08da      	lsrs	r2, r3, #3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3208      	adds	r2, #8
 800450c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	220f      	movs	r2, #15
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4013      	ands	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4313      	orrs	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	08da      	lsrs	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3208      	adds	r2, #8
 8004546:	69b9      	ldr	r1, [r7, #24]
 8004548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	2203      	movs	r2, #3
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	43db      	mvns	r3, r3
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4013      	ands	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 0203 	and.w	r2, r3, #3
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4313      	orrs	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80a2 	beq.w	80046d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	4b57      	ldr	r3, [pc, #348]	; (80046f0 <HAL_GPIO_Init+0x2e8>)
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	4a56      	ldr	r2, [pc, #344]	; (80046f0 <HAL_GPIO_Init+0x2e8>)
 8004598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800459c:	6453      	str	r3, [r2, #68]	; 0x44
 800459e:	4b54      	ldr	r3, [pc, #336]	; (80046f0 <HAL_GPIO_Init+0x2e8>)
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045aa:	4a52      	ldr	r2, [pc, #328]	; (80046f4 <HAL_GPIO_Init+0x2ec>)
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	089b      	lsrs	r3, r3, #2
 80045b0:	3302      	adds	r3, #2
 80045b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	220f      	movs	r2, #15
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43db      	mvns	r3, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4013      	ands	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a49      	ldr	r2, [pc, #292]	; (80046f8 <HAL_GPIO_Init+0x2f0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d019      	beq.n	800460a <HAL_GPIO_Init+0x202>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a48      	ldr	r2, [pc, #288]	; (80046fc <HAL_GPIO_Init+0x2f4>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d013      	beq.n	8004606 <HAL_GPIO_Init+0x1fe>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a47      	ldr	r2, [pc, #284]	; (8004700 <HAL_GPIO_Init+0x2f8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00d      	beq.n	8004602 <HAL_GPIO_Init+0x1fa>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a46      	ldr	r2, [pc, #280]	; (8004704 <HAL_GPIO_Init+0x2fc>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d007      	beq.n	80045fe <HAL_GPIO_Init+0x1f6>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a45      	ldr	r2, [pc, #276]	; (8004708 <HAL_GPIO_Init+0x300>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d101      	bne.n	80045fa <HAL_GPIO_Init+0x1f2>
 80045f6:	2304      	movs	r3, #4
 80045f8:	e008      	b.n	800460c <HAL_GPIO_Init+0x204>
 80045fa:	2307      	movs	r3, #7
 80045fc:	e006      	b.n	800460c <HAL_GPIO_Init+0x204>
 80045fe:	2303      	movs	r3, #3
 8004600:	e004      	b.n	800460c <HAL_GPIO_Init+0x204>
 8004602:	2302      	movs	r3, #2
 8004604:	e002      	b.n	800460c <HAL_GPIO_Init+0x204>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <HAL_GPIO_Init+0x204>
 800460a:	2300      	movs	r3, #0
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	f002 0203 	and.w	r2, r2, #3
 8004612:	0092      	lsls	r2, r2, #2
 8004614:	4093      	lsls	r3, r2
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4313      	orrs	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800461c:	4935      	ldr	r1, [pc, #212]	; (80046f4 <HAL_GPIO_Init+0x2ec>)
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	089b      	lsrs	r3, r3, #2
 8004622:	3302      	adds	r3, #2
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800462a:	4b38      	ldr	r3, [pc, #224]	; (800470c <HAL_GPIO_Init+0x304>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	43db      	mvns	r3, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800464e:	4a2f      	ldr	r2, [pc, #188]	; (800470c <HAL_GPIO_Init+0x304>)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004654:	4b2d      	ldr	r3, [pc, #180]	; (800470c <HAL_GPIO_Init+0x304>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	43db      	mvns	r3, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4013      	ands	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004678:	4a24      	ldr	r2, [pc, #144]	; (800470c <HAL_GPIO_Init+0x304>)
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800467e:	4b23      	ldr	r3, [pc, #140]	; (800470c <HAL_GPIO_Init+0x304>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046a2:	4a1a      	ldr	r2, [pc, #104]	; (800470c <HAL_GPIO_Init+0x304>)
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046a8:	4b18      	ldr	r3, [pc, #96]	; (800470c <HAL_GPIO_Init+0x304>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046cc:	4a0f      	ldr	r2, [pc, #60]	; (800470c <HAL_GPIO_Init+0x304>)
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	3301      	adds	r3, #1
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	2b0f      	cmp	r3, #15
 80046dc:	f67f aea2 	bls.w	8004424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	3724      	adds	r7, #36	; 0x24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40023800 	.word	0x40023800
 80046f4:	40013800 	.word	0x40013800
 80046f8:	40020000 	.word	0x40020000
 80046fc:	40020400 	.word	0x40020400
 8004700:	40020800 	.word	0x40020800
 8004704:	40020c00 	.word	0x40020c00
 8004708:	40021000 	.word	0x40021000
 800470c:	40013c00 	.word	0x40013c00

08004710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	807b      	strh	r3, [r7, #2]
 800471c:	4613      	mov	r3, r2
 800471e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004720:	787b      	ldrb	r3, [r7, #1]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004726:	887a      	ldrh	r2, [r7, #2]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800472c:	e003      	b.n	8004736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800472e:	887b      	ldrh	r3, [r7, #2]
 8004730:	041a      	lsls	r2, r3, #16
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	619a      	str	r2, [r3, #24]
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e12b      	b.n	80049ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fe fa3a 	bl	8002be4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2224      	movs	r2, #36	; 0x24
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0201 	bic.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004796:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047a8:	f001 fbd8 	bl	8005f5c <HAL_RCC_GetPCLK1Freq>
 80047ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4a81      	ldr	r2, [pc, #516]	; (80049b8 <HAL_I2C_Init+0x274>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d807      	bhi.n	80047c8 <HAL_I2C_Init+0x84>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4a80      	ldr	r2, [pc, #512]	; (80049bc <HAL_I2C_Init+0x278>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	bf94      	ite	ls
 80047c0:	2301      	movls	r3, #1
 80047c2:	2300      	movhi	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e006      	b.n	80047d6 <HAL_I2C_Init+0x92>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4a7d      	ldr	r2, [pc, #500]	; (80049c0 <HAL_I2C_Init+0x27c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	bf94      	ite	ls
 80047d0:	2301      	movls	r3, #1
 80047d2:	2300      	movhi	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e0e7      	b.n	80049ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4a78      	ldr	r2, [pc, #480]	; (80049c4 <HAL_I2C_Init+0x280>)
 80047e2:	fba2 2303 	umull	r2, r3, r2, r3
 80047e6:	0c9b      	lsrs	r3, r3, #18
 80047e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	4a6a      	ldr	r2, [pc, #424]	; (80049b8 <HAL_I2C_Init+0x274>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d802      	bhi.n	8004818 <HAL_I2C_Init+0xd4>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	3301      	adds	r3, #1
 8004816:	e009      	b.n	800482c <HAL_I2C_Init+0xe8>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	4a69      	ldr	r2, [pc, #420]	; (80049c8 <HAL_I2C_Init+0x284>)
 8004824:	fba2 2303 	umull	r2, r3, r2, r3
 8004828:	099b      	lsrs	r3, r3, #6
 800482a:	3301      	adds	r3, #1
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	430b      	orrs	r3, r1
 8004832:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800483e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	495c      	ldr	r1, [pc, #368]	; (80049b8 <HAL_I2C_Init+0x274>)
 8004848:	428b      	cmp	r3, r1
 800484a:	d819      	bhi.n	8004880 <HAL_I2C_Init+0x13c>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	1e59      	subs	r1, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	fbb1 f3f3 	udiv	r3, r1, r3
 800485a:	1c59      	adds	r1, r3, #1
 800485c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004860:	400b      	ands	r3, r1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_I2C_Init+0x138>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1e59      	subs	r1, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	fbb1 f3f3 	udiv	r3, r1, r3
 8004874:	3301      	adds	r3, #1
 8004876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487a:	e051      	b.n	8004920 <HAL_I2C_Init+0x1dc>
 800487c:	2304      	movs	r3, #4
 800487e:	e04f      	b.n	8004920 <HAL_I2C_Init+0x1dc>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d111      	bne.n	80048ac <HAL_I2C_Init+0x168>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1e58      	subs	r0, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6859      	ldr	r1, [r3, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	440b      	add	r3, r1
 8004896:	fbb0 f3f3 	udiv	r3, r0, r3
 800489a:	3301      	adds	r3, #1
 800489c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bf0c      	ite	eq
 80048a4:	2301      	moveq	r3, #1
 80048a6:	2300      	movne	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	e012      	b.n	80048d2 <HAL_I2C_Init+0x18e>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	1e58      	subs	r0, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6859      	ldr	r1, [r3, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	440b      	add	r3, r1
 80048ba:	0099      	lsls	r1, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	fbb0 f3f3 	udiv	r3, r0, r3
 80048c2:	3301      	adds	r3, #1
 80048c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf0c      	ite	eq
 80048cc:	2301      	moveq	r3, #1
 80048ce:	2300      	movne	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_I2C_Init+0x196>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e022      	b.n	8004920 <HAL_I2C_Init+0x1dc>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10e      	bne.n	8004900 <HAL_I2C_Init+0x1bc>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1e58      	subs	r0, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6859      	ldr	r1, [r3, #4]
 80048ea:	460b      	mov	r3, r1
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	440b      	add	r3, r1
 80048f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80048f4:	3301      	adds	r3, #1
 80048f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048fe:	e00f      	b.n	8004920 <HAL_I2C_Init+0x1dc>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	1e58      	subs	r0, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6859      	ldr	r1, [r3, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	0099      	lsls	r1, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	fbb0 f3f3 	udiv	r3, r0, r3
 8004916:	3301      	adds	r3, #1
 8004918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800491c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	6809      	ldr	r1, [r1, #0]
 8004924:	4313      	orrs	r3, r2
 8004926:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69da      	ldr	r2, [r3, #28]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800494e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6911      	ldr	r1, [r2, #16]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	68d2      	ldr	r2, [r2, #12]
 800495a:	4311      	orrs	r1, r2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6812      	ldr	r2, [r2, #0]
 8004960:	430b      	orrs	r3, r1
 8004962:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	000186a0 	.word	0x000186a0
 80049bc:	001e847f 	.word	0x001e847f
 80049c0:	003d08ff 	.word	0x003d08ff
 80049c4:	431bde83 	.word	0x431bde83
 80049c8:	10624dd3 	.word	0x10624dd3

080049cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	4608      	mov	r0, r1
 80049d6:	4611      	mov	r1, r2
 80049d8:	461a      	mov	r2, r3
 80049da:	4603      	mov	r3, r0
 80049dc:	817b      	strh	r3, [r7, #10]
 80049de:	460b      	mov	r3, r1
 80049e0:	813b      	strh	r3, [r7, #8]
 80049e2:	4613      	mov	r3, r2
 80049e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049e6:	f7fe fc13 	bl	8003210 <HAL_GetTick>
 80049ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	f040 80d9 	bne.w	8004bac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	2319      	movs	r3, #25
 8004a00:	2201      	movs	r2, #1
 8004a02:	496d      	ldr	r1, [pc, #436]	; (8004bb8 <HAL_I2C_Mem_Write+0x1ec>)
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 fc7f 	bl	8005308 <I2C_WaitOnFlagUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a10:	2302      	movs	r3, #2
 8004a12:	e0cc      	b.n	8004bae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_I2C_Mem_Write+0x56>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e0c5      	b.n	8004bae <HAL_I2C_Mem_Write+0x1e2>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d007      	beq.n	8004a48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2221      	movs	r2, #33	; 0x21
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2240      	movs	r2, #64	; 0x40
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a3a      	ldr	r2, [r7, #32]
 8004a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a4d      	ldr	r2, [pc, #308]	; (8004bbc <HAL_I2C_Mem_Write+0x1f0>)
 8004a88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a8a:	88f8      	ldrh	r0, [r7, #6]
 8004a8c:	893a      	ldrh	r2, [r7, #8]
 8004a8e:	8979      	ldrh	r1, [r7, #10]
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	4603      	mov	r3, r0
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 fab6 	bl	800500c <I2C_RequestMemoryWrite>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d052      	beq.n	8004b4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e081      	b.n	8004bae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fd00 	bl	80054b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00d      	beq.n	8004ad6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d107      	bne.n	8004ad2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e06b      	b.n	8004bae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	781a      	ldrb	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d11b      	bne.n	8004b4c <HAL_I2C_Mem_Write+0x180>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d017      	beq.n	8004b4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	781a      	ldrb	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1aa      	bne.n	8004aaa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fcec 	bl	8005536 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00d      	beq.n	8004b80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d107      	bne.n	8004b7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e016      	b.n	8004bae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e000      	b.n	8004bae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004bac:	2302      	movs	r3, #2
  }
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	00100002 	.word	0x00100002
 8004bbc:	ffff0000 	.word	0xffff0000

08004bc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08c      	sub	sp, #48	; 0x30
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	4608      	mov	r0, r1
 8004bca:	4611      	mov	r1, r2
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4603      	mov	r3, r0
 8004bd0:	817b      	strh	r3, [r7, #10]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	813b      	strh	r3, [r7, #8]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bda:	f7fe fb19 	bl	8003210 <HAL_GetTick>
 8004bde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	f040 8208 	bne.w	8004ffe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	2319      	movs	r3, #25
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	497b      	ldr	r1, [pc, #492]	; (8004de4 <HAL_I2C_Mem_Read+0x224>)
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 fb85 	bl	8005308 <I2C_WaitOnFlagUntilTimeout>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c04:	2302      	movs	r3, #2
 8004c06:	e1fb      	b.n	8005000 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_I2C_Mem_Read+0x56>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e1f4      	b.n	8005000 <HAL_I2C_Mem_Read+0x440>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d007      	beq.n	8004c3c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2222      	movs	r2, #34	; 0x22
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2240      	movs	r2, #64	; 0x40
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4a5b      	ldr	r2, [pc, #364]	; (8004de8 <HAL_I2C_Mem_Read+0x228>)
 8004c7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c7e:	88f8      	ldrh	r0, [r7, #6]
 8004c80:	893a      	ldrh	r2, [r7, #8]
 8004c82:	8979      	ldrh	r1, [r7, #10]
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	9301      	str	r3, [sp, #4]
 8004c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 fa52 	bl	8005138 <I2C_RequestMemoryRead>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e1b0      	b.n	8005000 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d113      	bne.n	8004cce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	623b      	str	r3, [r7, #32]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	623b      	str	r3, [r7, #32]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	623b      	str	r3, [r7, #32]
 8004cba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e184      	b.n	8004fd8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d11b      	bne.n	8004d0e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	e164      	b.n	8004fd8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d11b      	bne.n	8004d4e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d36:	2300      	movs	r3, #0
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	e144      	b.n	8004fd8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d64:	e138      	b.n	8004fd8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	f200 80f1 	bhi.w	8004f52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d123      	bne.n	8004dc0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 fc1b 	bl	80055b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e139      	b.n	8005000 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dbe:	e10b      	b.n	8004fd8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d14e      	bne.n	8004e66 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dce:	2200      	movs	r2, #0
 8004dd0:	4906      	ldr	r1, [pc, #24]	; (8004dec <HAL_I2C_Mem_Read+0x22c>)
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 fa98 	bl	8005308 <I2C_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d008      	beq.n	8004df0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e10e      	b.n	8005000 <HAL_I2C_Mem_Read+0x440>
 8004de2:	bf00      	nop
 8004de4:	00100002 	.word	0x00100002
 8004de8:	ffff0000 	.word	0xffff0000
 8004dec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e64:	e0b8      	b.n	8004fd8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	4966      	ldr	r1, [pc, #408]	; (8005008 <HAL_I2C_Mem_Read+0x448>)
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 fa49 	bl	8005308 <I2C_WaitOnFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e0bf      	b.n	8005000 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	2200      	movs	r2, #0
 8004eca:	494f      	ldr	r1, [pc, #316]	; (8005008 <HAL_I2C_Mem_Read+0x448>)
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fa1b 	bl	8005308 <I2C_WaitOnFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e091      	b.n	8005000 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691a      	ldr	r2, [r3, #16]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f50:	e042      	b.n	8004fd8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 fb2e 	bl	80055b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e04c      	b.n	8005000 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d118      	bne.n	8004fd8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f47f aec2 	bne.w	8004d66 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e000      	b.n	8005000 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ffe:	2302      	movs	r3, #2
  }
}
 8005000:	4618      	mov	r0, r3
 8005002:	3728      	adds	r7, #40	; 0x28
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	00010004 	.word	0x00010004

0800500c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	4608      	mov	r0, r1
 8005016:	4611      	mov	r1, r2
 8005018:	461a      	mov	r2, r3
 800501a:	4603      	mov	r3, r0
 800501c:	817b      	strh	r3, [r7, #10]
 800501e:	460b      	mov	r3, r1
 8005020:	813b      	strh	r3, [r7, #8]
 8005022:	4613      	mov	r3, r2
 8005024:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005034:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	2200      	movs	r2, #0
 800503e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f960 	bl	8005308 <I2C_WaitOnFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00d      	beq.n	800506a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800505c:	d103      	bne.n	8005066 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005064:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e05f      	b.n	800512a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800506a:	897b      	ldrh	r3, [r7, #10]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005078:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	6a3a      	ldr	r2, [r7, #32]
 800507e:	492d      	ldr	r1, [pc, #180]	; (8005134 <I2C_RequestMemoryWrite+0x128>)
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f998 	bl	80053b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e04c      	b.n	800512a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a8:	6a39      	ldr	r1, [r7, #32]
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fa02 	bl	80054b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00d      	beq.n	80050d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d107      	bne.n	80050ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e02b      	b.n	800512a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050d2:	88fb      	ldrh	r3, [r7, #6]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d105      	bne.n	80050e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050d8:	893b      	ldrh	r3, [r7, #8]
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	611a      	str	r2, [r3, #16]
 80050e2:	e021      	b.n	8005128 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050e4:	893b      	ldrh	r3, [r7, #8]
 80050e6:	0a1b      	lsrs	r3, r3, #8
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f4:	6a39      	ldr	r1, [r7, #32]
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 f9dc 	bl	80054b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00d      	beq.n	800511e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	2b04      	cmp	r3, #4
 8005108:	d107      	bne.n	800511a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005118:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e005      	b.n	800512a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800511e:	893b      	ldrh	r3, [r7, #8]
 8005120:	b2da      	uxtb	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	00010002 	.word	0x00010002

08005138 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	4608      	mov	r0, r1
 8005142:	4611      	mov	r1, r2
 8005144:	461a      	mov	r2, r3
 8005146:	4603      	mov	r3, r0
 8005148:	817b      	strh	r3, [r7, #10]
 800514a:	460b      	mov	r3, r1
 800514c:	813b      	strh	r3, [r7, #8]
 800514e:	4613      	mov	r3, r2
 8005150:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005160:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005170:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	2200      	movs	r2, #0
 800517a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f8c2 	bl	8005308 <I2C_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00d      	beq.n	80051a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005198:	d103      	bne.n	80051a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e0aa      	b.n	80052fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051a6:	897b      	ldrh	r3, [r7, #10]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	461a      	mov	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	6a3a      	ldr	r2, [r7, #32]
 80051ba:	4952      	ldr	r1, [pc, #328]	; (8005304 <I2C_RequestMemoryRead+0x1cc>)
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f8fa 	bl	80053b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e097      	b.n	80052fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051cc:	2300      	movs	r3, #0
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e4:	6a39      	ldr	r1, [r7, #32]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 f964 	bl	80054b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d107      	bne.n	800520a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005208:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e076      	b.n	80052fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800520e:	88fb      	ldrh	r3, [r7, #6]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d105      	bne.n	8005220 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005214:	893b      	ldrh	r3, [r7, #8]
 8005216:	b2da      	uxtb	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	611a      	str	r2, [r3, #16]
 800521e:	e021      	b.n	8005264 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005220:	893b      	ldrh	r3, [r7, #8]
 8005222:	0a1b      	lsrs	r3, r3, #8
 8005224:	b29b      	uxth	r3, r3
 8005226:	b2da      	uxtb	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800522e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005230:	6a39      	ldr	r1, [r7, #32]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 f93e 	bl	80054b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00d      	beq.n	800525a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	2b04      	cmp	r3, #4
 8005244:	d107      	bne.n	8005256 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005254:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e050      	b.n	80052fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800525a:	893b      	ldrh	r3, [r7, #8]
 800525c:	b2da      	uxtb	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005266:	6a39      	ldr	r1, [r7, #32]
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f923 	bl	80054b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00d      	beq.n	8005290 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	2b04      	cmp	r3, #4
 800527a:	d107      	bne.n	800528c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800528a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e035      	b.n	80052fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800529e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 f82b 	bl	8005308 <I2C_WaitOnFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00d      	beq.n	80052d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c6:	d103      	bne.n	80052d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e013      	b.n	80052fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052d4:	897b      	ldrh	r3, [r7, #10]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	f043 0301 	orr.w	r3, r3, #1
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	6a3a      	ldr	r2, [r7, #32]
 80052e8:	4906      	ldr	r1, [pc, #24]	; (8005304 <I2C_RequestMemoryRead+0x1cc>)
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f863 	bl	80053b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	00010002 	.word	0x00010002

08005308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	4613      	mov	r3, r2
 8005316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005318:	e025      	b.n	8005366 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005320:	d021      	beq.n	8005366 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005322:	f7fd ff75 	bl	8003210 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d302      	bcc.n	8005338 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d116      	bne.n	8005366 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2220      	movs	r2, #32
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	f043 0220 	orr.w	r2, r3, #32
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e023      	b.n	80053ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	0c1b      	lsrs	r3, r3, #16
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b01      	cmp	r3, #1
 800536e:	d10d      	bne.n	800538c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	43da      	mvns	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4013      	ands	r3, r2
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	bf0c      	ite	eq
 8005382:	2301      	moveq	r3, #1
 8005384:	2300      	movne	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	461a      	mov	r2, r3
 800538a:	e00c      	b.n	80053a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	43da      	mvns	r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4013      	ands	r3, r2
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	bf0c      	ite	eq
 800539e:	2301      	moveq	r3, #1
 80053a0:	2300      	movne	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d0b6      	beq.n	800531a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	607a      	str	r2, [r7, #4]
 80053c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053c4:	e051      	b.n	800546a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d4:	d123      	bne.n	800541e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f043 0204 	orr.w	r2, r3, #4
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e046      	b.n	80054ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005424:	d021      	beq.n	800546a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005426:	f7fd fef3 	bl	8003210 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d302      	bcc.n	800543c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d116      	bne.n	800546a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	f043 0220 	orr.w	r2, r3, #32
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e020      	b.n	80054ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	0c1b      	lsrs	r3, r3, #16
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b01      	cmp	r3, #1
 8005472:	d10c      	bne.n	800548e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	43da      	mvns	r2, r3
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4013      	ands	r3, r2
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	bf14      	ite	ne
 8005486:	2301      	movne	r3, #1
 8005488:	2300      	moveq	r3, #0
 800548a:	b2db      	uxtb	r3, r3
 800548c:	e00b      	b.n	80054a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	43da      	mvns	r2, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	4013      	ands	r3, r2
 800549a:	b29b      	uxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	bf14      	ite	ne
 80054a0:	2301      	movne	r3, #1
 80054a2:	2300      	moveq	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d18d      	bne.n	80053c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054c0:	e02d      	b.n	800551e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f8ce 	bl	8005664 <I2C_IsAcknowledgeFailed>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e02d      	b.n	800552e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d8:	d021      	beq.n	800551e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054da:	f7fd fe99 	bl	8003210 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d302      	bcc.n	80054f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d116      	bne.n	800551e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f043 0220 	orr.w	r2, r3, #32
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e007      	b.n	800552e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005528:	2b80      	cmp	r3, #128	; 0x80
 800552a:	d1ca      	bne.n	80054c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005542:	e02d      	b.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 f88d 	bl	8005664 <I2C_IsAcknowledgeFailed>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e02d      	b.n	80055b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555a:	d021      	beq.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555c:	f7fd fe58 	bl	8003210 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	429a      	cmp	r2, r3
 800556a:	d302      	bcc.n	8005572 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d116      	bne.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	f043 0220 	orr.w	r2, r3, #32
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e007      	b.n	80055b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d1ca      	bne.n	8005544 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055c4:	e042      	b.n	800564c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b10      	cmp	r3, #16
 80055d2:	d119      	bne.n	8005608 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0210 	mvn.w	r2, #16
 80055dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e029      	b.n	800565c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005608:	f7fd fe02 	bl	8003210 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	429a      	cmp	r2, r3
 8005616:	d302      	bcc.n	800561e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d116      	bne.n	800564c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	f043 0220 	orr.w	r2, r3, #32
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e007      	b.n	800565c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b40      	cmp	r3, #64	; 0x40
 8005658:	d1b5      	bne.n	80055c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567a:	d11b      	bne.n	80056b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005684:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	f043 0204 	orr.w	r2, r3, #4
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e000      	b.n	80056b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e264      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d075      	beq.n	80057ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056e2:	4ba3      	ldr	r3, [pc, #652]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 030c 	and.w	r3, r3, #12
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d00c      	beq.n	8005708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ee:	4ba0      	ldr	r3, [pc, #640]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d112      	bne.n	8005720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056fa:	4b9d      	ldr	r3, [pc, #628]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005706:	d10b      	bne.n	8005720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005708:	4b99      	ldr	r3, [pc, #612]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d05b      	beq.n	80057cc <HAL_RCC_OscConfig+0x108>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d157      	bne.n	80057cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e23f      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005728:	d106      	bne.n	8005738 <HAL_RCC_OscConfig+0x74>
 800572a:	4b91      	ldr	r3, [pc, #580]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a90      	ldr	r2, [pc, #576]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	e01d      	b.n	8005774 <HAL_RCC_OscConfig+0xb0>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005740:	d10c      	bne.n	800575c <HAL_RCC_OscConfig+0x98>
 8005742:	4b8b      	ldr	r3, [pc, #556]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a8a      	ldr	r2, [pc, #552]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	4b88      	ldr	r3, [pc, #544]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a87      	ldr	r2, [pc, #540]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	e00b      	b.n	8005774 <HAL_RCC_OscConfig+0xb0>
 800575c:	4b84      	ldr	r3, [pc, #528]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a83      	ldr	r2, [pc, #524]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	4b81      	ldr	r3, [pc, #516]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a80      	ldr	r2, [pc, #512]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 800576e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d013      	beq.n	80057a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577c:	f7fd fd48 	bl	8003210 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005784:	f7fd fd44 	bl	8003210 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b64      	cmp	r3, #100	; 0x64
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e204      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005796:	4b76      	ldr	r3, [pc, #472]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0xc0>
 80057a2:	e014      	b.n	80057ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a4:	f7fd fd34 	bl	8003210 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057ac:	f7fd fd30 	bl	8003210 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b64      	cmp	r3, #100	; 0x64
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e1f0      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057be:	4b6c      	ldr	r3, [pc, #432]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0xe8>
 80057ca:	e000      	b.n	80057ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d063      	beq.n	80058a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057da:	4b65      	ldr	r3, [pc, #404]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00b      	beq.n	80057fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057e6:	4b62      	ldr	r3, [pc, #392]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d11c      	bne.n	800582c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057f2:	4b5f      	ldr	r3, [pc, #380]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d116      	bne.n	800582c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057fe:	4b5c      	ldr	r3, [pc, #368]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <HAL_RCC_OscConfig+0x152>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d001      	beq.n	8005816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e1c4      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005816:	4b56      	ldr	r3, [pc, #344]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	4952      	ldr	r1, [pc, #328]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005826:	4313      	orrs	r3, r2
 8005828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800582a:	e03a      	b.n	80058a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d020      	beq.n	8005876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005834:	4b4f      	ldr	r3, [pc, #316]	; (8005974 <HAL_RCC_OscConfig+0x2b0>)
 8005836:	2201      	movs	r2, #1
 8005838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583a:	f7fd fce9 	bl	8003210 <HAL_GetTick>
 800583e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005840:	e008      	b.n	8005854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005842:	f7fd fce5 	bl	8003210 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e1a5      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005854:	4b46      	ldr	r3, [pc, #280]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0f0      	beq.n	8005842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005860:	4b43      	ldr	r3, [pc, #268]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	4940      	ldr	r1, [pc, #256]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005870:	4313      	orrs	r3, r2
 8005872:	600b      	str	r3, [r1, #0]
 8005874:	e015      	b.n	80058a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005876:	4b3f      	ldr	r3, [pc, #252]	; (8005974 <HAL_RCC_OscConfig+0x2b0>)
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587c:	f7fd fcc8 	bl	8003210 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005884:	f7fd fcc4 	bl	8003210 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e184      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005896:	4b36      	ldr	r3, [pc, #216]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1f0      	bne.n	8005884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0308 	and.w	r3, r3, #8
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d030      	beq.n	8005910 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d016      	beq.n	80058e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058b6:	4b30      	ldr	r3, [pc, #192]	; (8005978 <HAL_RCC_OscConfig+0x2b4>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058bc:	f7fd fca8 	bl	8003210 <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058c2:	e008      	b.n	80058d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058c4:	f7fd fca4 	bl	8003210 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e164      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058d6:	4b26      	ldr	r3, [pc, #152]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80058d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0f0      	beq.n	80058c4 <HAL_RCC_OscConfig+0x200>
 80058e2:	e015      	b.n	8005910 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058e4:	4b24      	ldr	r3, [pc, #144]	; (8005978 <HAL_RCC_OscConfig+0x2b4>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058ea:	f7fd fc91 	bl	8003210 <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058f2:	f7fd fc8d 	bl	8003210 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e14d      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005904:	4b1a      	ldr	r3, [pc, #104]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1f0      	bne.n	80058f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 80a0 	beq.w	8005a5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800591e:	2300      	movs	r3, #0
 8005920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005922:	4b13      	ldr	r3, [pc, #76]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10f      	bne.n	800594e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800592e:	2300      	movs	r3, #0
 8005930:	60bb      	str	r3, [r7, #8]
 8005932:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	4a0e      	ldr	r2, [pc, #56]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800593c:	6413      	str	r3, [r2, #64]	; 0x40
 800593e:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005946:	60bb      	str	r3, [r7, #8]
 8005948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800594a:	2301      	movs	r3, #1
 800594c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800594e:	4b0b      	ldr	r3, [pc, #44]	; (800597c <HAL_RCC_OscConfig+0x2b8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005956:	2b00      	cmp	r3, #0
 8005958:	d121      	bne.n	800599e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800595a:	4b08      	ldr	r3, [pc, #32]	; (800597c <HAL_RCC_OscConfig+0x2b8>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a07      	ldr	r2, [pc, #28]	; (800597c <HAL_RCC_OscConfig+0x2b8>)
 8005960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005966:	f7fd fc53 	bl	8003210 <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800596c:	e011      	b.n	8005992 <HAL_RCC_OscConfig+0x2ce>
 800596e:	bf00      	nop
 8005970:	40023800 	.word	0x40023800
 8005974:	42470000 	.word	0x42470000
 8005978:	42470e80 	.word	0x42470e80
 800597c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005980:	f7fd fc46 	bl	8003210 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e106      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005992:	4b85      	ldr	r3, [pc, #532]	; (8005ba8 <HAL_RCC_OscConfig+0x4e4>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d106      	bne.n	80059b4 <HAL_RCC_OscConfig+0x2f0>
 80059a6:	4b81      	ldr	r3, [pc, #516]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059aa:	4a80      	ldr	r2, [pc, #512]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 80059ac:	f043 0301 	orr.w	r3, r3, #1
 80059b0:	6713      	str	r3, [r2, #112]	; 0x70
 80059b2:	e01c      	b.n	80059ee <HAL_RCC_OscConfig+0x32a>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	2b05      	cmp	r3, #5
 80059ba:	d10c      	bne.n	80059d6 <HAL_RCC_OscConfig+0x312>
 80059bc:	4b7b      	ldr	r3, [pc, #492]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 80059be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c0:	4a7a      	ldr	r2, [pc, #488]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 80059c2:	f043 0304 	orr.w	r3, r3, #4
 80059c6:	6713      	str	r3, [r2, #112]	; 0x70
 80059c8:	4b78      	ldr	r3, [pc, #480]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 80059ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059cc:	4a77      	ldr	r2, [pc, #476]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	6713      	str	r3, [r2, #112]	; 0x70
 80059d4:	e00b      	b.n	80059ee <HAL_RCC_OscConfig+0x32a>
 80059d6:	4b75      	ldr	r3, [pc, #468]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 80059d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059da:	4a74      	ldr	r2, [pc, #464]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	6713      	str	r3, [r2, #112]	; 0x70
 80059e2:	4b72      	ldr	r3, [pc, #456]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 80059e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e6:	4a71      	ldr	r2, [pc, #452]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 80059e8:	f023 0304 	bic.w	r3, r3, #4
 80059ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d015      	beq.n	8005a22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f6:	f7fd fc0b 	bl	8003210 <HAL_GetTick>
 80059fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059fc:	e00a      	b.n	8005a14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059fe:	f7fd fc07 	bl	8003210 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e0c5      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a14:	4b65      	ldr	r3, [pc, #404]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 8005a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0ee      	beq.n	80059fe <HAL_RCC_OscConfig+0x33a>
 8005a20:	e014      	b.n	8005a4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a22:	f7fd fbf5 	bl	8003210 <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a28:	e00a      	b.n	8005a40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a2a:	f7fd fbf1 	bl	8003210 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e0af      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a40:	4b5a      	ldr	r3, [pc, #360]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 8005a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1ee      	bne.n	8005a2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d105      	bne.n	8005a5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a52:	4b56      	ldr	r3, [pc, #344]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	4a55      	ldr	r2, [pc, #340]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 8005a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 809b 	beq.w	8005b9e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a68:	4b50      	ldr	r3, [pc, #320]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 030c 	and.w	r3, r3, #12
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d05c      	beq.n	8005b2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d141      	bne.n	8005b00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a7c:	4b4c      	ldr	r3, [pc, #304]	; (8005bb0 <HAL_RCC_OscConfig+0x4ec>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a82:	f7fd fbc5 	bl	8003210 <HAL_GetTick>
 8005a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a88:	e008      	b.n	8005a9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a8a:	f7fd fbc1 	bl	8003210 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e081      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a9c:	4b43      	ldr	r3, [pc, #268]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1f0      	bne.n	8005a8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69da      	ldr	r2, [r3, #28]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	019b      	lsls	r3, r3, #6
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abe:	085b      	lsrs	r3, r3, #1
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	041b      	lsls	r3, r3, #16
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	061b      	lsls	r3, r3, #24
 8005acc:	4937      	ldr	r1, [pc, #220]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ad2:	4b37      	ldr	r3, [pc, #220]	; (8005bb0 <HAL_RCC_OscConfig+0x4ec>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad8:	f7fd fb9a 	bl	8003210 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae0:	f7fd fb96 	bl	8003210 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e056      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005af2:	4b2e      	ldr	r3, [pc, #184]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0f0      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x41c>
 8005afe:	e04e      	b.n	8005b9e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b00:	4b2b      	ldr	r3, [pc, #172]	; (8005bb0 <HAL_RCC_OscConfig+0x4ec>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b06:	f7fd fb83 	bl	8003210 <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b0c:	e008      	b.n	8005b20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b0e:	f7fd fb7f 	bl	8003210 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e03f      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b20:	4b22      	ldr	r3, [pc, #136]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1f0      	bne.n	8005b0e <HAL_RCC_OscConfig+0x44a>
 8005b2c:	e037      	b.n	8005b9e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d101      	bne.n	8005b3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e032      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b3a:	4b1c      	ldr	r3, [pc, #112]	; (8005bac <HAL_RCC_OscConfig+0x4e8>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d028      	beq.n	8005b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d121      	bne.n	8005b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d11a      	bne.n	8005b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d111      	bne.n	8005b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b80:	085b      	lsrs	r3, r3, #1
 8005b82:	3b01      	subs	r3, #1
 8005b84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d107      	bne.n	8005b9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d001      	beq.n	8005b9e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	40007000 	.word	0x40007000
 8005bac:	40023800 	.word	0x40023800
 8005bb0:	42470060 	.word	0x42470060

08005bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0cc      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bc8:	4b68      	ldr	r3, [pc, #416]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d90c      	bls.n	8005bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd6:	4b65      	ldr	r3, [pc, #404]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bde:	4b63      	ldr	r3, [pc, #396]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0307 	and.w	r3, r3, #7
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d001      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0b8      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d020      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d005      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c08:	4b59      	ldr	r3, [pc, #356]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	4a58      	ldr	r2, [pc, #352]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c20:	4b53      	ldr	r3, [pc, #332]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	4a52      	ldr	r2, [pc, #328]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c2c:	4b50      	ldr	r3, [pc, #320]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	494d      	ldr	r1, [pc, #308]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d044      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d107      	bne.n	8005c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c52:	4b47      	ldr	r3, [pc, #284]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d119      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e07f      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d003      	beq.n	8005c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d107      	bne.n	8005c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c72:	4b3f      	ldr	r3, [pc, #252]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d109      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e06f      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c82:	4b3b      	ldr	r3, [pc, #236]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e067      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c92:	4b37      	ldr	r3, [pc, #220]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f023 0203 	bic.w	r2, r3, #3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	4934      	ldr	r1, [pc, #208]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ca4:	f7fd fab4 	bl	8003210 <HAL_GetTick>
 8005ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005caa:	e00a      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cac:	f7fd fab0 	bl	8003210 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e04f      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cc2:	4b2b      	ldr	r3, [pc, #172]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 020c 	and.w	r2, r3, #12
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d1eb      	bne.n	8005cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd4:	4b25      	ldr	r3, [pc, #148]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d20c      	bcs.n	8005cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce2:	4b22      	ldr	r3, [pc, #136]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cea:	4b20      	ldr	r3, [pc, #128]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d001      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e032      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d08:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	4916      	ldr	r1, [pc, #88]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d26:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	490e      	ldr	r1, [pc, #56]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d3a:	f000 f821 	bl	8005d80 <HAL_RCC_GetSysClockFreq>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	490a      	ldr	r1, [pc, #40]	; (8005d74 <HAL_RCC_ClockConfig+0x1c0>)
 8005d4c:	5ccb      	ldrb	r3, [r1, r3]
 8005d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d52:	4a09      	ldr	r2, [pc, #36]	; (8005d78 <HAL_RCC_ClockConfig+0x1c4>)
 8005d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fd f88a 	bl	8002e74 <HAL_InitTick>

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40023c00 	.word	0x40023c00
 8005d70:	40023800 	.word	0x40023800
 8005d74:	08012d40 	.word	0x08012d40
 8005d78:	20000004 	.word	0x20000004
 8005d7c:	20000008 	.word	0x20000008

08005d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	607b      	str	r3, [r7, #4]
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	2300      	movs	r3, #0
 8005d92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d98:	4b67      	ldr	r3, [pc, #412]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 030c 	and.w	r3, r3, #12
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d00d      	beq.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	f200 80bd 	bhi.w	8005f24 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <HAL_RCC_GetSysClockFreq+0x34>
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d003      	beq.n	8005dba <HAL_RCC_GetSysClockFreq+0x3a>
 8005db2:	e0b7      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005db4:	4b61      	ldr	r3, [pc, #388]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005db6:	60bb      	str	r3, [r7, #8]
       break;
 8005db8:	e0b7      	b.n	8005f2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dba:	4b61      	ldr	r3, [pc, #388]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005dbc:	60bb      	str	r3, [r7, #8]
      break;
 8005dbe:	e0b4      	b.n	8005f2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dc0:	4b5d      	ldr	r3, [pc, #372]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dca:	4b5b      	ldr	r3, [pc, #364]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d04d      	beq.n	8005e72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dd6:	4b58      	ldr	r3, [pc, #352]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	099b      	lsrs	r3, r3, #6
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f04f 0300 	mov.w	r3, #0
 8005de2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005de6:	f04f 0100 	mov.w	r1, #0
 8005dea:	ea02 0800 	and.w	r8, r2, r0
 8005dee:	ea03 0901 	and.w	r9, r3, r1
 8005df2:	4640      	mov	r0, r8
 8005df4:	4649      	mov	r1, r9
 8005df6:	f04f 0200 	mov.w	r2, #0
 8005dfa:	f04f 0300 	mov.w	r3, #0
 8005dfe:	014b      	lsls	r3, r1, #5
 8005e00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e04:	0142      	lsls	r2, r0, #5
 8005e06:	4610      	mov	r0, r2
 8005e08:	4619      	mov	r1, r3
 8005e0a:	ebb0 0008 	subs.w	r0, r0, r8
 8005e0e:	eb61 0109 	sbc.w	r1, r1, r9
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	f04f 0300 	mov.w	r3, #0
 8005e1a:	018b      	lsls	r3, r1, #6
 8005e1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e20:	0182      	lsls	r2, r0, #6
 8005e22:	1a12      	subs	r2, r2, r0
 8005e24:	eb63 0301 	sbc.w	r3, r3, r1
 8005e28:	f04f 0000 	mov.w	r0, #0
 8005e2c:	f04f 0100 	mov.w	r1, #0
 8005e30:	00d9      	lsls	r1, r3, #3
 8005e32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e36:	00d0      	lsls	r0, r2, #3
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	eb12 0208 	adds.w	r2, r2, r8
 8005e40:	eb43 0309 	adc.w	r3, r3, r9
 8005e44:	f04f 0000 	mov.w	r0, #0
 8005e48:	f04f 0100 	mov.w	r1, #0
 8005e4c:	0259      	lsls	r1, r3, #9
 8005e4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005e52:	0250      	lsls	r0, r2, #9
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4610      	mov	r0, r2
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f04f 0300 	mov.w	r3, #0
 8005e64:	f7fa ff18 	bl	8000c98 <__aeabi_uldivmod>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	e04a      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e72:	4b31      	ldr	r3, [pc, #196]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	099b      	lsrs	r3, r3, #6
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e82:	f04f 0100 	mov.w	r1, #0
 8005e86:	ea02 0400 	and.w	r4, r2, r0
 8005e8a:	ea03 0501 	and.w	r5, r3, r1
 8005e8e:	4620      	mov	r0, r4
 8005e90:	4629      	mov	r1, r5
 8005e92:	f04f 0200 	mov.w	r2, #0
 8005e96:	f04f 0300 	mov.w	r3, #0
 8005e9a:	014b      	lsls	r3, r1, #5
 8005e9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ea0:	0142      	lsls	r2, r0, #5
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	1b00      	subs	r0, r0, r4
 8005ea8:	eb61 0105 	sbc.w	r1, r1, r5
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	018b      	lsls	r3, r1, #6
 8005eb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005eba:	0182      	lsls	r2, r0, #6
 8005ebc:	1a12      	subs	r2, r2, r0
 8005ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8005ec2:	f04f 0000 	mov.w	r0, #0
 8005ec6:	f04f 0100 	mov.w	r1, #0
 8005eca:	00d9      	lsls	r1, r3, #3
 8005ecc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ed0:	00d0      	lsls	r0, r2, #3
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	1912      	adds	r2, r2, r4
 8005ed8:	eb45 0303 	adc.w	r3, r5, r3
 8005edc:	f04f 0000 	mov.w	r0, #0
 8005ee0:	f04f 0100 	mov.w	r1, #0
 8005ee4:	0299      	lsls	r1, r3, #10
 8005ee6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005eea:	0290      	lsls	r0, r2, #10
 8005eec:	4602      	mov	r2, r0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	f7fa fecc 	bl	8000c98 <__aeabi_uldivmod>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4613      	mov	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	0c1b      	lsrs	r3, r3, #16
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	3301      	adds	r3, #1
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f20:	60bb      	str	r3, [r7, #8]
      break;
 8005f22:	e002      	b.n	8005f2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f24:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005f26:	60bb      	str	r3, [r7, #8]
      break;
 8005f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005f36:	bf00      	nop
 8005f38:	40023800 	.word	0x40023800
 8005f3c:	00f42400 	.word	0x00f42400
 8005f40:	007a1200 	.word	0x007a1200

08005f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f48:	4b03      	ldr	r3, [pc, #12]	; (8005f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	20000004 	.word	0x20000004

08005f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f60:	f7ff fff0 	bl	8005f44 <HAL_RCC_GetHCLKFreq>
 8005f64:	4602      	mov	r2, r0
 8005f66:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	0a9b      	lsrs	r3, r3, #10
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	4903      	ldr	r1, [pc, #12]	; (8005f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f72:	5ccb      	ldrb	r3, [r1, r3]
 8005f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	08012d50 	.word	0x08012d50

08005f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f88:	f7ff ffdc 	bl	8005f44 <HAL_RCC_GetHCLKFreq>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	0b5b      	lsrs	r3, r3, #13
 8005f94:	f003 0307 	and.w	r3, r3, #7
 8005f98:	4903      	ldr	r1, [pc, #12]	; (8005fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f9a:	5ccb      	ldrb	r3, [r1, r3]
 8005f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40023800 	.word	0x40023800
 8005fa8:	08012d50 	.word	0x08012d50

08005fac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	220f      	movs	r2, #15
 8005fba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005fbc:	4b12      	ldr	r3, [pc, #72]	; (8006008 <HAL_RCC_GetClockConfig+0x5c>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f003 0203 	and.w	r2, r3, #3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005fc8:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <HAL_RCC_GetClockConfig+0x5c>)
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005fd4:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <HAL_RCC_GetClockConfig+0x5c>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005fe0:	4b09      	ldr	r3, [pc, #36]	; (8006008 <HAL_RCC_GetClockConfig+0x5c>)
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	08db      	lsrs	r3, r3, #3
 8005fe6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005fee:	4b07      	ldr	r3, [pc, #28]	; (800600c <HAL_RCC_GetClockConfig+0x60>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0207 	and.w	r2, r3, #7
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	601a      	str	r2, [r3, #0]
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40023800 	.word	0x40023800
 800600c:	40023c00 	.word	0x40023c00

08006010 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e07b      	b.n	800611a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	2b00      	cmp	r3, #0
 8006028:	d108      	bne.n	800603c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006032:	d009      	beq.n	8006048 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	61da      	str	r2, [r3, #28]
 800603a:	e005      	b.n	8006048 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fc fe06 	bl	8002c74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006090:	431a      	orrs	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800609a:	431a      	orrs	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	431a      	orrs	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060b8:	431a      	orrs	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060cc:	ea42 0103 	orr.w	r1, r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	0c1b      	lsrs	r3, r3, #16
 80060e6:	f003 0104 	and.w	r1, r3, #4
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	f003 0210 	and.w	r2, r3, #16
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69da      	ldr	r2, [r3, #28]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b088      	sub	sp, #32
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	603b      	str	r3, [r7, #0]
 800612e:	4613      	mov	r3, r2
 8006130:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800613c:	2b01      	cmp	r3, #1
 800613e:	d101      	bne.n	8006144 <HAL_SPI_Transmit+0x22>
 8006140:	2302      	movs	r3, #2
 8006142:	e126      	b.n	8006392 <HAL_SPI_Transmit+0x270>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800614c:	f7fd f860 	bl	8003210 <HAL_GetTick>
 8006150:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006152:	88fb      	ldrh	r3, [r7, #6]
 8006154:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b01      	cmp	r3, #1
 8006160:	d002      	beq.n	8006168 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006162:	2302      	movs	r3, #2
 8006164:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006166:	e10b      	b.n	8006380 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_SPI_Transmit+0x52>
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d102      	bne.n	800617a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006178:	e102      	b.n	8006380 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2203      	movs	r2, #3
 800617e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	88fa      	ldrh	r2, [r7, #6]
 8006192:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	88fa      	ldrh	r2, [r7, #6]
 8006198:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061c0:	d10f      	bne.n	80061e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ec:	2b40      	cmp	r3, #64	; 0x40
 80061ee:	d007      	beq.n	8006200 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006208:	d14b      	bne.n	80062a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <HAL_SPI_Transmit+0xf6>
 8006212:	8afb      	ldrh	r3, [r7, #22]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d13e      	bne.n	8006296 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	881a      	ldrh	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006228:	1c9a      	adds	r2, r3, #2
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006232:	b29b      	uxth	r3, r3
 8006234:	3b01      	subs	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800623c:	e02b      	b.n	8006296 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b02      	cmp	r3, #2
 800624a:	d112      	bne.n	8006272 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006250:	881a      	ldrh	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625c:	1c9a      	adds	r2, r3, #2
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006266:	b29b      	uxth	r3, r3
 8006268:	3b01      	subs	r3, #1
 800626a:	b29a      	uxth	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006270:	e011      	b.n	8006296 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006272:	f7fc ffcd 	bl	8003210 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d803      	bhi.n	800628a <HAL_SPI_Transmit+0x168>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006288:	d102      	bne.n	8006290 <HAL_SPI_Transmit+0x16e>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d102      	bne.n	8006296 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006294:	e074      	b.n	8006380 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1ce      	bne.n	800623e <HAL_SPI_Transmit+0x11c>
 80062a0:	e04c      	b.n	800633c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <HAL_SPI_Transmit+0x18e>
 80062aa:	8afb      	ldrh	r3, [r7, #22]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d140      	bne.n	8006332 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	330c      	adds	r3, #12
 80062ba:	7812      	ldrb	r2, [r2, #0]
 80062bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062d6:	e02c      	b.n	8006332 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d113      	bne.n	800630e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	330c      	adds	r3, #12
 80062f0:	7812      	ldrb	r2, [r2, #0]
 80062f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	86da      	strh	r2, [r3, #54]	; 0x36
 800630c:	e011      	b.n	8006332 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800630e:	f7fc ff7f 	bl	8003210 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d803      	bhi.n	8006326 <HAL_SPI_Transmit+0x204>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006324:	d102      	bne.n	800632c <HAL_SPI_Transmit+0x20a>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d102      	bne.n	8006332 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006330:	e026      	b.n	8006380 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006336:	b29b      	uxth	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1cd      	bne.n	80062d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 fbcb 	bl	8006adc <SPI_EndRxTxTransaction>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2220      	movs	r2, #32
 8006350:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800635a:	2300      	movs	r3, #0
 800635c:	613b      	str	r3, [r7, #16]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	613b      	str	r3, [r7, #16]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	613b      	str	r3, [r7, #16]
 800636e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	77fb      	strb	r3, [r7, #31]
 800637c:	e000      	b.n	8006380 <HAL_SPI_Transmit+0x25e>
  }

error:
 800637e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006390:	7ffb      	ldrb	r3, [r7, #31]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3720      	adds	r7, #32
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b088      	sub	sp, #32
 800639e:	af02      	add	r7, sp, #8
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	603b      	str	r3, [r7, #0]
 80063a6:	4613      	mov	r3, r2
 80063a8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063b6:	d112      	bne.n	80063de <HAL_SPI_Receive+0x44>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10e      	bne.n	80063de <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2204      	movs	r2, #4
 80063c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80063c8:	88fa      	ldrh	r2, [r7, #6]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	4613      	mov	r3, r2
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	68b9      	ldr	r1, [r7, #8]
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 f8f1 	bl	80065bc <HAL_SPI_TransmitReceive>
 80063da:	4603      	mov	r3, r0
 80063dc:	e0ea      	b.n	80065b4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_SPI_Receive+0x52>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e0e3      	b.n	80065b4 <HAL_SPI_Receive+0x21a>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063f4:	f7fc ff0c 	bl	8003210 <HAL_GetTick>
 80063f8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b01      	cmp	r3, #1
 8006404:	d002      	beq.n	800640c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006406:	2302      	movs	r3, #2
 8006408:	75fb      	strb	r3, [r7, #23]
    goto error;
 800640a:	e0ca      	b.n	80065a2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <HAL_SPI_Receive+0x7e>
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d102      	bne.n	800641e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800641c:	e0c1      	b.n	80065a2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2204      	movs	r2, #4
 8006422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	88fa      	ldrh	r2, [r7, #6]
 8006436:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	88fa      	ldrh	r2, [r7, #6]
 800643c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006464:	d10f      	bne.n	8006486 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006474:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006484:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006490:	2b40      	cmp	r3, #64	; 0x40
 8006492:	d007      	beq.n	80064a4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d162      	bne.n	8006572 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80064ac:	e02e      	b.n	800650c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d115      	bne.n	80064e8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f103 020c 	add.w	r2, r3, #12
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	7812      	ldrb	r2, [r2, #0]
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064e6:	e011      	b.n	800650c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064e8:	f7fc fe92 	bl	8003210 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d803      	bhi.n	8006500 <HAL_SPI_Receive+0x166>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fe:	d102      	bne.n	8006506 <HAL_SPI_Receive+0x16c>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d102      	bne.n	800650c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	75fb      	strb	r3, [r7, #23]
          goto error;
 800650a:	e04a      	b.n	80065a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1cb      	bne.n	80064ae <HAL_SPI_Receive+0x114>
 8006516:	e031      	b.n	800657c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b01      	cmp	r3, #1
 8006524:	d113      	bne.n	800654e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006530:	b292      	uxth	r2, r2
 8006532:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006538:	1c9a      	adds	r2, r3, #2
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006542:	b29b      	uxth	r3, r3
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800654c:	e011      	b.n	8006572 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800654e:	f7fc fe5f 	bl	8003210 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d803      	bhi.n	8006566 <HAL_SPI_Receive+0x1cc>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006564:	d102      	bne.n	800656c <HAL_SPI_Receive+0x1d2>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d102      	bne.n	8006572 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006570:	e017      	b.n	80065a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1cd      	bne.n	8006518 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fa45 	bl	8006a10 <SPI_EndRxTransaction>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	75fb      	strb	r3, [r7, #23]
 800659e:	e000      	b.n	80065a2 <HAL_SPI_Receive+0x208>
  }

error :
 80065a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08c      	sub	sp, #48	; 0x30
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
 80065c8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065ca:	2301      	movs	r3, #1
 80065cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <HAL_SPI_TransmitReceive+0x26>
 80065de:	2302      	movs	r3, #2
 80065e0:	e18a      	b.n	80068f8 <HAL_SPI_TransmitReceive+0x33c>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065ea:	f7fc fe11 	bl	8003210 <HAL_GetTick>
 80065ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006600:	887b      	ldrh	r3, [r7, #2]
 8006602:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006604:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006608:	2b01      	cmp	r3, #1
 800660a:	d00f      	beq.n	800662c <HAL_SPI_TransmitReceive+0x70>
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006612:	d107      	bne.n	8006624 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d103      	bne.n	8006624 <HAL_SPI_TransmitReceive+0x68>
 800661c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006620:	2b04      	cmp	r3, #4
 8006622:	d003      	beq.n	800662c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006624:	2302      	movs	r3, #2
 8006626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800662a:	e15b      	b.n	80068e4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d005      	beq.n	800663e <HAL_SPI_TransmitReceive+0x82>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <HAL_SPI_TransmitReceive+0x82>
 8006638:	887b      	ldrh	r3, [r7, #2]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d103      	bne.n	8006646 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006644:	e14e      	b.n	80068e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b04      	cmp	r3, #4
 8006650:	d003      	beq.n	800665a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2205      	movs	r2, #5
 8006656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	887a      	ldrh	r2, [r7, #2]
 800666a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	887a      	ldrh	r2, [r7, #2]
 8006670:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	887a      	ldrh	r2, [r7, #2]
 800667c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	887a      	ldrh	r2, [r7, #2]
 8006682:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669a:	2b40      	cmp	r3, #64	; 0x40
 800669c:	d007      	beq.n	80066ae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b6:	d178      	bne.n	80067aa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <HAL_SPI_TransmitReceive+0x10a>
 80066c0:	8b7b      	ldrh	r3, [r7, #26]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d166      	bne.n	8006794 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	881a      	ldrh	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	1c9a      	adds	r2, r3, #2
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ea:	e053      	b.n	8006794 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d11b      	bne.n	8006732 <HAL_SPI_TransmitReceive+0x176>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066fe:	b29b      	uxth	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d016      	beq.n	8006732 <HAL_SPI_TransmitReceive+0x176>
 8006704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006706:	2b01      	cmp	r3, #1
 8006708:	d113      	bne.n	8006732 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	881a      	ldrh	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	1c9a      	adds	r2, r3, #2
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006724:	b29b      	uxth	r3, r3
 8006726:	3b01      	subs	r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b01      	cmp	r3, #1
 800673e:	d119      	bne.n	8006774 <HAL_SPI_TransmitReceive+0x1b8>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d014      	beq.n	8006774 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006754:	b292      	uxth	r2, r2
 8006756:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675c:	1c9a      	adds	r2, r3, #2
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006766:	b29b      	uxth	r3, r3
 8006768:	3b01      	subs	r3, #1
 800676a:	b29a      	uxth	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006770:	2301      	movs	r3, #1
 8006772:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006774:	f7fc fd4c 	bl	8003210 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006780:	429a      	cmp	r2, r3
 8006782:	d807      	bhi.n	8006794 <HAL_SPI_TransmitReceive+0x1d8>
 8006784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678a:	d003      	beq.n	8006794 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006792:	e0a7      	b.n	80068e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1a6      	bne.n	80066ec <HAL_SPI_TransmitReceive+0x130>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1a1      	bne.n	80066ec <HAL_SPI_TransmitReceive+0x130>
 80067a8:	e07c      	b.n	80068a4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <HAL_SPI_TransmitReceive+0x1fc>
 80067b2:	8b7b      	ldrh	r3, [r7, #26]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d16b      	bne.n	8006890 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	330c      	adds	r3, #12
 80067c2:	7812      	ldrb	r2, [r2, #0]
 80067c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067de:	e057      	b.n	8006890 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d11c      	bne.n	8006828 <HAL_SPI_TransmitReceive+0x26c>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d017      	beq.n	8006828 <HAL_SPI_TransmitReceive+0x26c>
 80067f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d114      	bne.n	8006828 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	330c      	adds	r3, #12
 8006808:	7812      	ldrb	r2, [r2, #0]
 800680a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800681a:	b29b      	uxth	r3, r3
 800681c:	3b01      	subs	r3, #1
 800681e:	b29a      	uxth	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b01      	cmp	r3, #1
 8006834:	d119      	bne.n	800686a <HAL_SPI_TransmitReceive+0x2ae>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800683a:	b29b      	uxth	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d014      	beq.n	800686a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800685c:	b29b      	uxth	r3, r3
 800685e:	3b01      	subs	r3, #1
 8006860:	b29a      	uxth	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006866:	2301      	movs	r3, #1
 8006868:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800686a:	f7fc fcd1 	bl	8003210 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006876:	429a      	cmp	r2, r3
 8006878:	d803      	bhi.n	8006882 <HAL_SPI_TransmitReceive+0x2c6>
 800687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006880:	d102      	bne.n	8006888 <HAL_SPI_TransmitReceive+0x2cc>
 8006882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006884:	2b00      	cmp	r3, #0
 8006886:	d103      	bne.n	8006890 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800688e:	e029      	b.n	80068e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1a2      	bne.n	80067e0 <HAL_SPI_TransmitReceive+0x224>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800689e:	b29b      	uxth	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d19d      	bne.n	80067e0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f917 	bl	8006adc <SPI_EndRxTxTransaction>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d006      	beq.n	80068c2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2220      	movs	r2, #32
 80068be:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80068c0:	e010      	b.n	80068e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10b      	bne.n	80068e2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	617b      	str	r3, [r7, #20]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	e000      	b.n	80068e4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80068e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3730      	adds	r7, #48	; 0x30
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b088      	sub	sp, #32
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	4613      	mov	r3, r2
 800690e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006910:	f7fc fc7e 	bl	8003210 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	1a9b      	subs	r3, r3, r2
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	4413      	add	r3, r2
 800691e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006920:	f7fc fc76 	bl	8003210 <HAL_GetTick>
 8006924:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006926:	4b39      	ldr	r3, [pc, #228]	; (8006a0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	015b      	lsls	r3, r3, #5
 800692c:	0d1b      	lsrs	r3, r3, #20
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	fb02 f303 	mul.w	r3, r2, r3
 8006934:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006936:	e054      	b.n	80069e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693e:	d050      	beq.n	80069e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006940:	f7fc fc66 	bl	8003210 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	69fa      	ldr	r2, [r7, #28]
 800694c:	429a      	cmp	r2, r3
 800694e:	d902      	bls.n	8006956 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d13d      	bne.n	80069d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006964:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800696e:	d111      	bne.n	8006994 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006978:	d004      	beq.n	8006984 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006982:	d107      	bne.n	8006994 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006992:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800699c:	d10f      	bne.n	80069be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e017      	b.n	8006a02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	3b01      	subs	r3, #1
 80069e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	4013      	ands	r3, r2
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	bf0c      	ite	eq
 80069f2:	2301      	moveq	r3, #1
 80069f4:	2300      	movne	r3, #0
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	461a      	mov	r2, r3
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d19b      	bne.n	8006938 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3720      	adds	r7, #32
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20000004 	.word	0x20000004

08006a10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a24:	d111      	bne.n	8006a4a <SPI_EndRxTransaction+0x3a>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a2e:	d004      	beq.n	8006a3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a38:	d107      	bne.n	8006a4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a48:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a52:	d12a      	bne.n	8006aaa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5c:	d012      	beq.n	8006a84 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2200      	movs	r2, #0
 8006a66:	2180      	movs	r1, #128	; 0x80
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f7ff ff49 	bl	8006900 <SPI_WaitFlagStateUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d02d      	beq.n	8006ad0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a78:	f043 0220 	orr.w	r2, r3, #32
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e026      	b.n	8006ad2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7ff ff36 	bl	8006900 <SPI_WaitFlagStateUntilTimeout>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d01a      	beq.n	8006ad0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9e:	f043 0220 	orr.w	r2, r3, #32
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e013      	b.n	8006ad2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f7ff ff23 	bl	8006900 <SPI_WaitFlagStateUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d007      	beq.n	8006ad0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac4:	f043 0220 	orr.w	r2, r3, #32
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e000      	b.n	8006ad2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ae8:	4b1b      	ldr	r3, [pc, #108]	; (8006b58 <SPI_EndRxTxTransaction+0x7c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a1b      	ldr	r2, [pc, #108]	; (8006b5c <SPI_EndRxTxTransaction+0x80>)
 8006aee:	fba2 2303 	umull	r2, r3, r2, r3
 8006af2:	0d5b      	lsrs	r3, r3, #21
 8006af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006af8:	fb02 f303 	mul.w	r3, r2, r3
 8006afc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b06:	d112      	bne.n	8006b2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2180      	movs	r1, #128	; 0x80
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7ff fef4 	bl	8006900 <SPI_WaitFlagStateUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d016      	beq.n	8006b4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	f043 0220 	orr.w	r2, r3, #32
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e00f      	b.n	8006b4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00a      	beq.n	8006b4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b44:	2b80      	cmp	r3, #128	; 0x80
 8006b46:	d0f2      	beq.n	8006b2e <SPI_EndRxTxTransaction+0x52>
 8006b48:	e000      	b.n	8006b4c <SPI_EndRxTxTransaction+0x70>
        break;
 8006b4a:	bf00      	nop
  }

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000004 	.word	0x20000004
 8006b5c:	165e9f81 	.word	0x165e9f81

08006b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e041      	b.n	8006bf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f839 	bl	8006bfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	f000 f9ca 	bl	8006f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
	...

08006c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d001      	beq.n	8006c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e044      	b.n	8006cb6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0201 	orr.w	r2, r2, #1
 8006c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1e      	ldr	r2, [pc, #120]	; (8006cc4 <HAL_TIM_Base_Start_IT+0xb0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d018      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x6c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c56:	d013      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x6c>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a1a      	ldr	r2, [pc, #104]	; (8006cc8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00e      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x6c>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a19      	ldr	r2, [pc, #100]	; (8006ccc <HAL_TIM_Base_Start_IT+0xb8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d009      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x6c>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a17      	ldr	r2, [pc, #92]	; (8006cd0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d004      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x6c>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a16      	ldr	r2, [pc, #88]	; (8006cd4 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d111      	bne.n	8006ca4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b06      	cmp	r3, #6
 8006c90:	d010      	beq.n	8006cb4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f042 0201 	orr.w	r2, r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca2:	e007      	b.n	8006cb4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0201 	orr.w	r2, r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	40010000 	.word	0x40010000
 8006cc8:	40000400 	.word	0x40000400
 8006ccc:	40000800 	.word	0x40000800
 8006cd0:	40000c00 	.word	0x40000c00
 8006cd4:	40014000 	.word	0x40014000

08006cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d122      	bne.n	8006d34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d11b      	bne.n	8006d34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f06f 0202 	mvn.w	r2, #2
 8006d04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	f003 0303 	and.w	r3, r3, #3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f8ee 	bl	8006efc <HAL_TIM_IC_CaptureCallback>
 8006d20:	e005      	b.n	8006d2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f8e0 	bl	8006ee8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f8f1 	bl	8006f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d122      	bne.n	8006d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d11b      	bne.n	8006d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f06f 0204 	mvn.w	r2, #4
 8006d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f8c4 	bl	8006efc <HAL_TIM_IC_CaptureCallback>
 8006d74:	e005      	b.n	8006d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f8b6 	bl	8006ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f8c7 	bl	8006f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f003 0308 	and.w	r3, r3, #8
 8006d92:	2b08      	cmp	r3, #8
 8006d94:	d122      	bne.n	8006ddc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d11b      	bne.n	8006ddc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f06f 0208 	mvn.w	r2, #8
 8006dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2204      	movs	r2, #4
 8006db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f89a 	bl	8006efc <HAL_TIM_IC_CaptureCallback>
 8006dc8:	e005      	b.n	8006dd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f88c 	bl	8006ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f89d 	bl	8006f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	f003 0310 	and.w	r3, r3, #16
 8006de6:	2b10      	cmp	r3, #16
 8006de8:	d122      	bne.n	8006e30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b10      	cmp	r3, #16
 8006df6:	d11b      	bne.n	8006e30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f06f 0210 	mvn.w	r2, #16
 8006e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2208      	movs	r2, #8
 8006e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f870 	bl	8006efc <HAL_TIM_IC_CaptureCallback>
 8006e1c:	e005      	b.n	8006e2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f862 	bl	8006ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f873 	bl	8006f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d10e      	bne.n	8006e5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d107      	bne.n	8006e5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f06f 0201 	mvn.w	r2, #1
 8006e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fb fcee 	bl	8002838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e66:	2b80      	cmp	r3, #128	; 0x80
 8006e68:	d10e      	bne.n	8006e88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e74:	2b80      	cmp	r3, #128	; 0x80
 8006e76:	d107      	bne.n	8006e88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f8e2 	bl	800704c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e92:	2b40      	cmp	r3, #64	; 0x40
 8006e94:	d10e      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea0:	2b40      	cmp	r3, #64	; 0x40
 8006ea2:	d107      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f838 	bl	8006f24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	d10e      	bne.n	8006ee0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	d107      	bne.n	8006ee0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0220 	mvn.w	r2, #32
 8006ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f8ac 	bl	8007038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ee0:	bf00      	nop
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a34      	ldr	r2, [pc, #208]	; (800701c <TIM_Base_SetConfig+0xe4>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00f      	beq.n	8006f70 <TIM_Base_SetConfig+0x38>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f56:	d00b      	beq.n	8006f70 <TIM_Base_SetConfig+0x38>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a31      	ldr	r2, [pc, #196]	; (8007020 <TIM_Base_SetConfig+0xe8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d007      	beq.n	8006f70 <TIM_Base_SetConfig+0x38>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a30      	ldr	r2, [pc, #192]	; (8007024 <TIM_Base_SetConfig+0xec>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_Base_SetConfig+0x38>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a2f      	ldr	r2, [pc, #188]	; (8007028 <TIM_Base_SetConfig+0xf0>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d108      	bne.n	8006f82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a25      	ldr	r2, [pc, #148]	; (800701c <TIM_Base_SetConfig+0xe4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d01b      	beq.n	8006fc2 <TIM_Base_SetConfig+0x8a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f90:	d017      	beq.n	8006fc2 <TIM_Base_SetConfig+0x8a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a22      	ldr	r2, [pc, #136]	; (8007020 <TIM_Base_SetConfig+0xe8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d013      	beq.n	8006fc2 <TIM_Base_SetConfig+0x8a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a21      	ldr	r2, [pc, #132]	; (8007024 <TIM_Base_SetConfig+0xec>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00f      	beq.n	8006fc2 <TIM_Base_SetConfig+0x8a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a20      	ldr	r2, [pc, #128]	; (8007028 <TIM_Base_SetConfig+0xf0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00b      	beq.n	8006fc2 <TIM_Base_SetConfig+0x8a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a1f      	ldr	r2, [pc, #124]	; (800702c <TIM_Base_SetConfig+0xf4>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d007      	beq.n	8006fc2 <TIM_Base_SetConfig+0x8a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a1e      	ldr	r2, [pc, #120]	; (8007030 <TIM_Base_SetConfig+0xf8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d003      	beq.n	8006fc2 <TIM_Base_SetConfig+0x8a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a1d      	ldr	r2, [pc, #116]	; (8007034 <TIM_Base_SetConfig+0xfc>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d108      	bne.n	8006fd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a08      	ldr	r2, [pc, #32]	; (800701c <TIM_Base_SetConfig+0xe4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d103      	bne.n	8007008 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	691a      	ldr	r2, [r3, #16]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	615a      	str	r2, [r3, #20]
}
 800700e:	bf00      	nop
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40010000 	.word	0x40010000
 8007020:	40000400 	.word	0x40000400
 8007024:	40000800 	.word	0x40000800
 8007028:	40000c00 	.word	0x40000c00
 800702c:	40014000 	.word	0x40014000
 8007030:	40014400 	.word	0x40014400
 8007034:	40014800 	.word	0x40014800

08007038 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e03f      	b.n	80070f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d106      	bne.n	800708c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fb fe3c 	bl	8002d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2224      	movs	r2, #36	; 0x24
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fd7f 	bl	8007ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	691a      	ldr	r2, [r3, #16]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	695a      	ldr	r2, [r3, #20]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b08a      	sub	sp, #40	; 0x28
 80070fe:	af02      	add	r7, sp, #8
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	603b      	str	r3, [r7, #0]
 8007106:	4613      	mov	r3, r2
 8007108:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b20      	cmp	r3, #32
 8007118:	d17c      	bne.n	8007214 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <HAL_UART_Transmit+0x2c>
 8007120:	88fb      	ldrh	r3, [r7, #6]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e075      	b.n	8007216 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007130:	2b01      	cmp	r3, #1
 8007132:	d101      	bne.n	8007138 <HAL_UART_Transmit+0x3e>
 8007134:	2302      	movs	r3, #2
 8007136:	e06e      	b.n	8007216 <HAL_UART_Transmit+0x11c>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2221      	movs	r2, #33	; 0x21
 800714a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800714e:	f7fc f85f 	bl	8003210 <HAL_GetTick>
 8007152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	88fa      	ldrh	r2, [r7, #6]
 8007158:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	88fa      	ldrh	r2, [r7, #6]
 800715e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007168:	d108      	bne.n	800717c <HAL_UART_Transmit+0x82>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d104      	bne.n	800717c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	61bb      	str	r3, [r7, #24]
 800717a:	e003      	b.n	8007184 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007180:	2300      	movs	r3, #0
 8007182:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800718c:	e02a      	b.n	80071e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	2200      	movs	r2, #0
 8007196:	2180      	movs	r1, #128	; 0x80
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 fb01 	bl	80077a0 <UART_WaitOnFlagUntilTimeout>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e036      	b.n	8007216 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10b      	bne.n	80071c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	3302      	adds	r3, #2
 80071c2:	61bb      	str	r3, [r7, #24]
 80071c4:	e007      	b.n	80071d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	781a      	ldrb	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	3301      	adds	r3, #1
 80071d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1cf      	bne.n	800718e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2200      	movs	r2, #0
 80071f6:	2140      	movs	r1, #64	; 0x40
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 fad1 	bl	80077a0 <UART_WaitOnFlagUntilTimeout>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e006      	b.n	8007216 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	e000      	b.n	8007216 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007214:	2302      	movs	r3, #2
  }
}
 8007216:	4618      	mov	r0, r3
 8007218:	3720      	adds	r7, #32
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b084      	sub	sp, #16
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	4613      	mov	r3, r2
 800722a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b20      	cmp	r3, #32
 8007236:	d11d      	bne.n	8007274 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <HAL_UART_Receive_DMA+0x26>
 800723e:	88fb      	ldrh	r3, [r7, #6]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e016      	b.n	8007276 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800724e:	2b01      	cmp	r3, #1
 8007250:	d101      	bne.n	8007256 <HAL_UART_Receive_DMA+0x38>
 8007252:	2302      	movs	r3, #2
 8007254:	e00f      	b.n	8007276 <HAL_UART_Receive_DMA+0x58>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007264:	88fb      	ldrh	r3, [r7, #6]
 8007266:	461a      	mov	r2, r3
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 fae2 	bl	8007834 <UART_Start_Receive_DMA>
 8007270:	4603      	mov	r3, r0
 8007272:	e000      	b.n	8007276 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007274:	2302      	movs	r3, #2
  }
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08a      	sub	sp, #40	; 0x28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10d      	bne.n	80072d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	f003 0320 	and.w	r3, r3, #32
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d008      	beq.n	80072d2 <HAL_UART_IRQHandler+0x52>
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	f003 0320 	and.w	r3, r3, #32
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fbd5 	bl	8007a7a <UART_Receive_IT>
      return;
 80072d0:	e17c      	b.n	80075cc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 80b1 	beq.w	800743c <HAL_UART_IRQHandler+0x1bc>
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d105      	bne.n	80072f0 <HAL_UART_IRQHandler+0x70>
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 80a6 	beq.w	800743c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <HAL_UART_IRQHandler+0x90>
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	f043 0201 	orr.w	r2, r3, #1
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	f003 0304 	and.w	r3, r3, #4
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <HAL_UART_IRQHandler+0xb0>
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	d005      	beq.n	8007330 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007328:	f043 0202 	orr.w	r2, r3, #2
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <HAL_UART_IRQHandler+0xd0>
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007348:	f043 0204 	orr.w	r2, r3, #4
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	f003 0308 	and.w	r3, r3, #8
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00f      	beq.n	800737a <HAL_UART_IRQHandler+0xfa>
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	f003 0320 	and.w	r3, r3, #32
 8007360:	2b00      	cmp	r3, #0
 8007362:	d104      	bne.n	800736e <HAL_UART_IRQHandler+0xee>
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d005      	beq.n	800737a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	f043 0208 	orr.w	r2, r3, #8
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 811f 	beq.w	80075c2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	d007      	beq.n	800739e <HAL_UART_IRQHandler+0x11e>
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	f003 0320 	and.w	r3, r3, #32
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fb6e 	bl	8007a7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a8:	2b40      	cmp	r3, #64	; 0x40
 80073aa:	bf0c      	ite	eq
 80073ac:	2301      	moveq	r3, #1
 80073ae:	2300      	movne	r3, #0
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b8:	f003 0308 	and.w	r3, r3, #8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d102      	bne.n	80073c6 <HAL_UART_IRQHandler+0x146>
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d031      	beq.n	800742a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 faae 	bl	8007928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d6:	2b40      	cmp	r3, #64	; 0x40
 80073d8:	d123      	bne.n	8007422 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	695a      	ldr	r2, [r3, #20]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d013      	beq.n	800741a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f6:	4a77      	ldr	r2, [pc, #476]	; (80075d4 <HAL_UART_IRQHandler+0x354>)
 80073f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fc fd76 	bl	8003ef0 <HAL_DMA_Abort_IT>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d016      	beq.n	8007438 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007418:	e00e      	b.n	8007438 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f8fa 	bl	8007614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007420:	e00a      	b.n	8007438 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f8f6 	bl	8007614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007428:	e006      	b.n	8007438 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f8f2 	bl	8007614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007436:	e0c4      	b.n	80075c2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007438:	bf00      	nop
    return;
 800743a:	e0c2      	b.n	80075c2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	2b01      	cmp	r3, #1
 8007442:	f040 80a2 	bne.w	800758a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 809c 	beq.w	800758a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 8096 	beq.w	800758a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747e:	2b40      	cmp	r3, #64	; 0x40
 8007480:	d14f      	bne.n	8007522 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800748c:	8a3b      	ldrh	r3, [r7, #16]
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 8099 	beq.w	80075c6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007498:	8a3a      	ldrh	r2, [r7, #16]
 800749a:	429a      	cmp	r2, r3
 800749c:	f080 8093 	bcs.w	80075c6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	8a3a      	ldrh	r2, [r7, #16]
 80074a4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b0:	d02b      	beq.n	800750a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074c0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	695a      	ldr	r2, [r3, #20]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0201 	bic.w	r2, r2, #1
 80074d0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	695a      	ldr	r2, [r3, #20]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074e0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0210 	bic.w	r2, r2, #16
 80074fe:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007504:	4618      	mov	r0, r3
 8007506:	f7fc fc83 	bl	8003e10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007512:	b29b      	uxth	r3, r3
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	b29b      	uxth	r3, r3
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f884 	bl	8007628 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007520:	e051      	b.n	80075c6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800752a:	b29b      	uxth	r3, r3
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007534:	b29b      	uxth	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d047      	beq.n	80075ca <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800753a:	8a7b      	ldrh	r3, [r7, #18]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d044      	beq.n	80075ca <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68da      	ldr	r2, [r3, #12]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800754e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695a      	ldr	r2, [r3, #20]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0201 	bic.w	r2, r2, #1
 800755e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68da      	ldr	r2, [r3, #12]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 0210 	bic.w	r2, r2, #16
 800757c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800757e:	8a7b      	ldrh	r3, [r7, #18]
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f850 	bl	8007628 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007588:	e01f      	b.n	80075ca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007590:	2b00      	cmp	r3, #0
 8007592:	d008      	beq.n	80075a6 <HAL_UART_IRQHandler+0x326>
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fa03 	bl	80079aa <UART_Transmit_IT>
    return;
 80075a4:	e012      	b.n	80075cc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00d      	beq.n	80075cc <HAL_UART_IRQHandler+0x34c>
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d008      	beq.n	80075cc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fa45 	bl	8007a4a <UART_EndTransmit_IT>
    return;
 80075c0:	e004      	b.n	80075cc <HAL_UART_IRQHandler+0x34c>
    return;
 80075c2:	bf00      	nop
 80075c4:	e002      	b.n	80075cc <HAL_UART_IRQHandler+0x34c>
      return;
 80075c6:	bf00      	nop
 80075c8:	e000      	b.n	80075cc <HAL_UART_IRQHandler+0x34c>
      return;
 80075ca:	bf00      	nop
  }
}
 80075cc:	3728      	adds	r7, #40	; 0x28
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	08007983 	.word	0x08007983

080075d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	460b      	mov	r3, r1
 8007632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007658:	2b00      	cmp	r3, #0
 800765a:	d12a      	bne.n	80076b2 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007670:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	695a      	ldr	r2, [r3, #20]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0201 	bic.w	r2, r2, #1
 8007680:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	695a      	ldr	r2, [r3, #20]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007690:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2220      	movs	r2, #32
 8007696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d107      	bne.n	80076b2 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68da      	ldr	r2, [r3, #12]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0210 	bic.w	r2, r2, #16
 80076b0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d106      	bne.n	80076c8 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076be:	4619      	mov	r1, r3
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f7ff ffb1 	bl	8007628 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076c6:	e002      	b.n	80076ce <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f7ff ff8f 	bl	80075ec <HAL_UART_RxCpltCallback>
}
 80076ce:	bf00      	nop
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d108      	bne.n	80076fe <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076f0:	085b      	lsrs	r3, r3, #1
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	4619      	mov	r1, r3
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f7ff ff96 	bl	8007628 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076fc:	e002      	b.n	8007704 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f7ff ff7e 	bl	8007600 <HAL_UART_RxHalfCpltCallback>
}
 8007704:	bf00      	nop
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007714:	2300      	movs	r3, #0
 8007716:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007728:	2b80      	cmp	r3, #128	; 0x80
 800772a:	bf0c      	ite	eq
 800772c:	2301      	moveq	r3, #1
 800772e:	2300      	movne	r3, #0
 8007730:	b2db      	uxtb	r3, r3
 8007732:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b21      	cmp	r3, #33	; 0x21
 800773e:	d108      	bne.n	8007752 <UART_DMAError+0x46>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2200      	movs	r2, #0
 800774a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800774c:	68b8      	ldr	r0, [r7, #8]
 800774e:	f000 f8d5 	bl	80078fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775c:	2b40      	cmp	r3, #64	; 0x40
 800775e:	bf0c      	ite	eq
 8007760:	2301      	moveq	r3, #1
 8007762:	2300      	movne	r3, #0
 8007764:	b2db      	uxtb	r3, r3
 8007766:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b22      	cmp	r3, #34	; 0x22
 8007772:	d108      	bne.n	8007786 <UART_DMAError+0x7a>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d005      	beq.n	8007786 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2200      	movs	r2, #0
 800777e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007780:	68b8      	ldr	r0, [r7, #8]
 8007782:	f000 f8d1 	bl	8007928 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	f043 0210 	orr.w	r2, r3, #16
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007792:	68b8      	ldr	r0, [r7, #8]
 8007794:	f7ff ff3e 	bl	8007614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007798:	bf00      	nop
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	4613      	mov	r3, r2
 80077ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b0:	e02c      	b.n	800780c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b8:	d028      	beq.n	800780c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d007      	beq.n	80077d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80077c0:	f7fb fd26 	bl	8003210 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d21d      	bcs.n	800780c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80077de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	695a      	ldr	r2, [r3, #20]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 0201 	bic.w	r2, r2, #1
 80077ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2220      	movs	r2, #32
 80077fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e00f      	b.n	800782c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	4013      	ands	r3, r2
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	429a      	cmp	r2, r3
 800781a:	bf0c      	ite	eq
 800781c:	2301      	moveq	r3, #1
 800781e:	2300      	movne	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	461a      	mov	r2, r3
 8007824:	79fb      	ldrb	r3, [r7, #7]
 8007826:	429a      	cmp	r2, r3
 8007828:	d0c3      	beq.n	80077b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	4613      	mov	r3, r2
 8007840:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	88fa      	ldrh	r2, [r7, #6]
 800784c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2222      	movs	r2, #34	; 0x22
 8007858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	4a23      	ldr	r2, [pc, #140]	; (80078f0 <UART_Start_Receive_DMA+0xbc>)
 8007862:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007868:	4a22      	ldr	r2, [pc, #136]	; (80078f4 <UART_Start_Receive_DMA+0xc0>)
 800786a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007870:	4a21      	ldr	r2, [pc, #132]	; (80078f8 <UART_Start_Receive_DMA+0xc4>)
 8007872:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007878:	2200      	movs	r2, #0
 800787a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800787c:	f107 0308 	add.w	r3, r7, #8
 8007880:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3304      	adds	r3, #4
 800788c:	4619      	mov	r1, r3
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	f7fc fa64 	bl	8003d60 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007898:	2300      	movs	r3, #0
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	613b      	str	r3, [r7, #16]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68da      	ldr	r2, [r3, #12]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078c4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	695a      	ldr	r2, [r3, #20]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f042 0201 	orr.w	r2, r2, #1
 80078d4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	695a      	ldr	r2, [r3, #20]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078e4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3718      	adds	r7, #24
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	08007641 	.word	0x08007641
 80078f4:	080076d7 	.word	0x080076d7
 80078f8:	0800770d 	.word	0x0800770d

080078fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68da      	ldr	r2, [r3, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007912:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2220      	movs	r2, #32
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68da      	ldr	r2, [r3, #12]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800793e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	695a      	ldr	r2, [r3, #20]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f022 0201 	bic.w	r2, r2, #1
 800794e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007954:	2b01      	cmp	r3, #1
 8007956:	d107      	bne.n	8007968 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 0210 	bic.w	r2, r2, #16
 8007966:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2220      	movs	r2, #32
 800796c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b084      	sub	sp, #16
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f7ff fe39 	bl	8007614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079a2:	bf00      	nop
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b085      	sub	sp, #20
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b21      	cmp	r3, #33	; 0x21
 80079bc:	d13e      	bne.n	8007a3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c6:	d114      	bne.n	80079f2 <UART_Transmit_IT+0x48>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d110      	bne.n	80079f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	1c9a      	adds	r2, r3, #2
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	621a      	str	r2, [r3, #32]
 80079f0:	e008      	b.n	8007a04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	1c59      	adds	r1, r3, #1
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	6211      	str	r1, [r2, #32]
 80079fc:	781a      	ldrb	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	4619      	mov	r1, r3
 8007a12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10f      	bne.n	8007a38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68da      	ldr	r2, [r3, #12]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	e000      	b.n	8007a3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a3c:	2302      	movs	r3, #2
  }
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68da      	ldr	r2, [r3, #12]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7ff fdb4 	bl	80075d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b22      	cmp	r3, #34	; 0x22
 8007a8c:	f040 8087 	bne.w	8007b9e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a98:	d117      	bne.n	8007aca <UART_Receive_IT+0x50>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d113      	bne.n	8007aca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aaa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac2:	1c9a      	adds	r2, r3, #2
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8007ac8:	e026      	b.n	8007b18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ace:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007adc:	d007      	beq.n	8007aee <UART_Receive_IT+0x74>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10a      	bne.n	8007afc <UART_Receive_IT+0x82>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d106      	bne.n	8007afc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	701a      	strb	r2, [r3, #0]
 8007afa:	e008      	b.n	8007b0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b12:	1c5a      	adds	r2, r3, #1
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	4619      	mov	r1, r3
 8007b26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d136      	bne.n	8007b9a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f022 0220 	bic.w	r2, r2, #32
 8007b3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	695a      	ldr	r2, [r3, #20]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0201 	bic.w	r2, r2, #1
 8007b5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d10e      	bne.n	8007b8a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f022 0210 	bic.w	r2, r2, #16
 8007b7a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff fd50 	bl	8007628 <HAL_UARTEx_RxEventCallback>
 8007b88:	e002      	b.n	8007b90 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7ff fd2e 	bl	80075ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	e002      	b.n	8007ba0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e000      	b.n	8007ba0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007b9e:	2302      	movs	r3, #2
  }
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bac:	b09f      	sub	sp, #124	; 0x7c
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bbe:	68d9      	ldr	r1, [r3, #12]
 8007bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	ea40 0301 	orr.w	r3, r0, r1
 8007bc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bcc:	689a      	ldr	r2, [r3, #8]
 8007bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007bec:	f021 010c 	bic.w	r1, r1, #12
 8007bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bf6:	430b      	orrs	r3, r1
 8007bf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c06:	6999      	ldr	r1, [r3, #24]
 8007c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	ea40 0301 	orr.w	r3, r0, r1
 8007c10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	4bc5      	ldr	r3, [pc, #788]	; (8007f2c <UART_SetConfig+0x384>)
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d004      	beq.n	8007c26 <UART_SetConfig+0x7e>
 8007c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	4bc3      	ldr	r3, [pc, #780]	; (8007f30 <UART_SetConfig+0x388>)
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d103      	bne.n	8007c2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c26:	f7fe f9ad 	bl	8005f84 <HAL_RCC_GetPCLK2Freq>
 8007c2a:	6778      	str	r0, [r7, #116]	; 0x74
 8007c2c:	e002      	b.n	8007c34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c2e:	f7fe f995 	bl	8005f5c <HAL_RCC_GetPCLK1Freq>
 8007c32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c3c:	f040 80b6 	bne.w	8007dac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c42:	461c      	mov	r4, r3
 8007c44:	f04f 0500 	mov.w	r5, #0
 8007c48:	4622      	mov	r2, r4
 8007c4a:	462b      	mov	r3, r5
 8007c4c:	1891      	adds	r1, r2, r2
 8007c4e:	6439      	str	r1, [r7, #64]	; 0x40
 8007c50:	415b      	adcs	r3, r3
 8007c52:	647b      	str	r3, [r7, #68]	; 0x44
 8007c54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c58:	1912      	adds	r2, r2, r4
 8007c5a:	eb45 0303 	adc.w	r3, r5, r3
 8007c5e:	f04f 0000 	mov.w	r0, #0
 8007c62:	f04f 0100 	mov.w	r1, #0
 8007c66:	00d9      	lsls	r1, r3, #3
 8007c68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c6c:	00d0      	lsls	r0, r2, #3
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	1911      	adds	r1, r2, r4
 8007c74:	6639      	str	r1, [r7, #96]	; 0x60
 8007c76:	416b      	adcs	r3, r5
 8007c78:	667b      	str	r3, [r7, #100]	; 0x64
 8007c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	f04f 0300 	mov.w	r3, #0
 8007c84:	1891      	adds	r1, r2, r2
 8007c86:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c88:	415b      	adcs	r3, r3
 8007c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007c94:	f7f9 f800 	bl	8000c98 <__aeabi_uldivmod>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4ba5      	ldr	r3, [pc, #660]	; (8007f34 <UART_SetConfig+0x38c>)
 8007c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8007ca2:	095b      	lsrs	r3, r3, #5
 8007ca4:	011e      	lsls	r6, r3, #4
 8007ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ca8:	461c      	mov	r4, r3
 8007caa:	f04f 0500 	mov.w	r5, #0
 8007cae:	4622      	mov	r2, r4
 8007cb0:	462b      	mov	r3, r5
 8007cb2:	1891      	adds	r1, r2, r2
 8007cb4:	6339      	str	r1, [r7, #48]	; 0x30
 8007cb6:	415b      	adcs	r3, r3
 8007cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007cba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007cbe:	1912      	adds	r2, r2, r4
 8007cc0:	eb45 0303 	adc.w	r3, r5, r3
 8007cc4:	f04f 0000 	mov.w	r0, #0
 8007cc8:	f04f 0100 	mov.w	r1, #0
 8007ccc:	00d9      	lsls	r1, r3, #3
 8007cce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cd2:	00d0      	lsls	r0, r2, #3
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	1911      	adds	r1, r2, r4
 8007cda:	65b9      	str	r1, [r7, #88]	; 0x58
 8007cdc:	416b      	adcs	r3, r5
 8007cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	f04f 0300 	mov.w	r3, #0
 8007cea:	1891      	adds	r1, r2, r2
 8007cec:	62b9      	str	r1, [r7, #40]	; 0x28
 8007cee:	415b      	adcs	r3, r3
 8007cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cf6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007cfa:	f7f8 ffcd 	bl	8000c98 <__aeabi_uldivmod>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4b8c      	ldr	r3, [pc, #560]	; (8007f34 <UART_SetConfig+0x38c>)
 8007d04:	fba3 1302 	umull	r1, r3, r3, r2
 8007d08:	095b      	lsrs	r3, r3, #5
 8007d0a:	2164      	movs	r1, #100	; 0x64
 8007d0c:	fb01 f303 	mul.w	r3, r1, r3
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	3332      	adds	r3, #50	; 0x32
 8007d16:	4a87      	ldr	r2, [pc, #540]	; (8007f34 <UART_SetConfig+0x38c>)
 8007d18:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1c:	095b      	lsrs	r3, r3, #5
 8007d1e:	005b      	lsls	r3, r3, #1
 8007d20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d24:	441e      	add	r6, r3
 8007d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f04f 0100 	mov.w	r1, #0
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	1894      	adds	r4, r2, r2
 8007d34:	623c      	str	r4, [r7, #32]
 8007d36:	415b      	adcs	r3, r3
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
 8007d3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d3e:	1812      	adds	r2, r2, r0
 8007d40:	eb41 0303 	adc.w	r3, r1, r3
 8007d44:	f04f 0400 	mov.w	r4, #0
 8007d48:	f04f 0500 	mov.w	r5, #0
 8007d4c:	00dd      	lsls	r5, r3, #3
 8007d4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d52:	00d4      	lsls	r4, r2, #3
 8007d54:	4622      	mov	r2, r4
 8007d56:	462b      	mov	r3, r5
 8007d58:	1814      	adds	r4, r2, r0
 8007d5a:	653c      	str	r4, [r7, #80]	; 0x50
 8007d5c:	414b      	adcs	r3, r1
 8007d5e:	657b      	str	r3, [r7, #84]	; 0x54
 8007d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	461a      	mov	r2, r3
 8007d66:	f04f 0300 	mov.w	r3, #0
 8007d6a:	1891      	adds	r1, r2, r2
 8007d6c:	61b9      	str	r1, [r7, #24]
 8007d6e:	415b      	adcs	r3, r3
 8007d70:	61fb      	str	r3, [r7, #28]
 8007d72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d7a:	f7f8 ff8d 	bl	8000c98 <__aeabi_uldivmod>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4b6c      	ldr	r3, [pc, #432]	; (8007f34 <UART_SetConfig+0x38c>)
 8007d84:	fba3 1302 	umull	r1, r3, r3, r2
 8007d88:	095b      	lsrs	r3, r3, #5
 8007d8a:	2164      	movs	r1, #100	; 0x64
 8007d8c:	fb01 f303 	mul.w	r3, r1, r3
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	3332      	adds	r3, #50	; 0x32
 8007d96:	4a67      	ldr	r2, [pc, #412]	; (8007f34 <UART_SetConfig+0x38c>)
 8007d98:	fba2 2303 	umull	r2, r3, r2, r3
 8007d9c:	095b      	lsrs	r3, r3, #5
 8007d9e:	f003 0207 	and.w	r2, r3, #7
 8007da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4432      	add	r2, r6
 8007da8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007daa:	e0b9      	b.n	8007f20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dae:	461c      	mov	r4, r3
 8007db0:	f04f 0500 	mov.w	r5, #0
 8007db4:	4622      	mov	r2, r4
 8007db6:	462b      	mov	r3, r5
 8007db8:	1891      	adds	r1, r2, r2
 8007dba:	6139      	str	r1, [r7, #16]
 8007dbc:	415b      	adcs	r3, r3
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007dc4:	1912      	adds	r2, r2, r4
 8007dc6:	eb45 0303 	adc.w	r3, r5, r3
 8007dca:	f04f 0000 	mov.w	r0, #0
 8007dce:	f04f 0100 	mov.w	r1, #0
 8007dd2:	00d9      	lsls	r1, r3, #3
 8007dd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dd8:	00d0      	lsls	r0, r2, #3
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	eb12 0804 	adds.w	r8, r2, r4
 8007de2:	eb43 0905 	adc.w	r9, r3, r5
 8007de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f04f 0100 	mov.w	r1, #0
 8007df0:	f04f 0200 	mov.w	r2, #0
 8007df4:	f04f 0300 	mov.w	r3, #0
 8007df8:	008b      	lsls	r3, r1, #2
 8007dfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007dfe:	0082      	lsls	r2, r0, #2
 8007e00:	4640      	mov	r0, r8
 8007e02:	4649      	mov	r1, r9
 8007e04:	f7f8 ff48 	bl	8000c98 <__aeabi_uldivmod>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4b49      	ldr	r3, [pc, #292]	; (8007f34 <UART_SetConfig+0x38c>)
 8007e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e12:	095b      	lsrs	r3, r3, #5
 8007e14:	011e      	lsls	r6, r3, #4
 8007e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f04f 0100 	mov.w	r1, #0
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	1894      	adds	r4, r2, r2
 8007e24:	60bc      	str	r4, [r7, #8]
 8007e26:	415b      	adcs	r3, r3
 8007e28:	60fb      	str	r3, [r7, #12]
 8007e2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e2e:	1812      	adds	r2, r2, r0
 8007e30:	eb41 0303 	adc.w	r3, r1, r3
 8007e34:	f04f 0400 	mov.w	r4, #0
 8007e38:	f04f 0500 	mov.w	r5, #0
 8007e3c:	00dd      	lsls	r5, r3, #3
 8007e3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e42:	00d4      	lsls	r4, r2, #3
 8007e44:	4622      	mov	r2, r4
 8007e46:	462b      	mov	r3, r5
 8007e48:	1814      	adds	r4, r2, r0
 8007e4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8007e4c:	414b      	adcs	r3, r1
 8007e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f04f 0100 	mov.w	r1, #0
 8007e5a:	f04f 0200 	mov.w	r2, #0
 8007e5e:	f04f 0300 	mov.w	r3, #0
 8007e62:	008b      	lsls	r3, r1, #2
 8007e64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e68:	0082      	lsls	r2, r0, #2
 8007e6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007e6e:	f7f8 ff13 	bl	8000c98 <__aeabi_uldivmod>
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	4b2f      	ldr	r3, [pc, #188]	; (8007f34 <UART_SetConfig+0x38c>)
 8007e78:	fba3 1302 	umull	r1, r3, r3, r2
 8007e7c:	095b      	lsrs	r3, r3, #5
 8007e7e:	2164      	movs	r1, #100	; 0x64
 8007e80:	fb01 f303 	mul.w	r3, r1, r3
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	011b      	lsls	r3, r3, #4
 8007e88:	3332      	adds	r3, #50	; 0x32
 8007e8a:	4a2a      	ldr	r2, [pc, #168]	; (8007f34 <UART_SetConfig+0x38c>)
 8007e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e90:	095b      	lsrs	r3, r3, #5
 8007e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e96:	441e      	add	r6, r3
 8007e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f04f 0100 	mov.w	r1, #0
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	1894      	adds	r4, r2, r2
 8007ea6:	603c      	str	r4, [r7, #0]
 8007ea8:	415b      	adcs	r3, r3
 8007eaa:	607b      	str	r3, [r7, #4]
 8007eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eb0:	1812      	adds	r2, r2, r0
 8007eb2:	eb41 0303 	adc.w	r3, r1, r3
 8007eb6:	f04f 0400 	mov.w	r4, #0
 8007eba:	f04f 0500 	mov.w	r5, #0
 8007ebe:	00dd      	lsls	r5, r3, #3
 8007ec0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ec4:	00d4      	lsls	r4, r2, #3
 8007ec6:	4622      	mov	r2, r4
 8007ec8:	462b      	mov	r3, r5
 8007eca:	eb12 0a00 	adds.w	sl, r2, r0
 8007ece:	eb43 0b01 	adc.w	fp, r3, r1
 8007ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f04f 0100 	mov.w	r1, #0
 8007edc:	f04f 0200 	mov.w	r2, #0
 8007ee0:	f04f 0300 	mov.w	r3, #0
 8007ee4:	008b      	lsls	r3, r1, #2
 8007ee6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007eea:	0082      	lsls	r2, r0, #2
 8007eec:	4650      	mov	r0, sl
 8007eee:	4659      	mov	r1, fp
 8007ef0:	f7f8 fed2 	bl	8000c98 <__aeabi_uldivmod>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4b0e      	ldr	r3, [pc, #56]	; (8007f34 <UART_SetConfig+0x38c>)
 8007efa:	fba3 1302 	umull	r1, r3, r3, r2
 8007efe:	095b      	lsrs	r3, r3, #5
 8007f00:	2164      	movs	r1, #100	; 0x64
 8007f02:	fb01 f303 	mul.w	r3, r1, r3
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	011b      	lsls	r3, r3, #4
 8007f0a:	3332      	adds	r3, #50	; 0x32
 8007f0c:	4a09      	ldr	r2, [pc, #36]	; (8007f34 <UART_SetConfig+0x38c>)
 8007f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f12:	095b      	lsrs	r3, r3, #5
 8007f14:	f003 020f 	and.w	r2, r3, #15
 8007f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4432      	add	r2, r6
 8007f1e:	609a      	str	r2, [r3, #8]
}
 8007f20:	bf00      	nop
 8007f22:	377c      	adds	r7, #124	; 0x7c
 8007f24:	46bd      	mov	sp, r7
 8007f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2a:	bf00      	nop
 8007f2c:	40011000 	.word	0x40011000
 8007f30:	40011400 	.word	0x40011400
 8007f34:	51eb851f 	.word	0x51eb851f

08007f38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007f3c:	4904      	ldr	r1, [pc, #16]	; (8007f50 <MX_FATFS_Init+0x18>)
 8007f3e:	4805      	ldr	r0, [pc, #20]	; (8007f54 <MX_FATFS_Init+0x1c>)
 8007f40:	f002 fd2e 	bl	800a9a0 <FATFS_LinkDriver>
 8007f44:	4603      	mov	r3, r0
 8007f46:	461a      	mov	r2, r3
 8007f48:	4b03      	ldr	r3, [pc, #12]	; (8007f58 <MX_FATFS_Init+0x20>)
 8007f4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007f4c:	bf00      	nop
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	200054fc 	.word	0x200054fc
 8007f54:	20000010 	.word	0x20000010
 8007f58:	20005500 	.word	0x20005500

08007f5c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007f60:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007f76:	4b06      	ldr	r3, [pc, #24]	; (8007f90 <USER_initialize+0x24>)
 8007f78:	2201      	movs	r2, #1
 8007f7a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007f7c:	4b04      	ldr	r3, [pc, #16]	; (8007f90 <USER_initialize+0x24>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	2000000d 	.word	0x2000000d

08007f94 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007f9e:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <USER_status+0x24>)
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007fa4:	4b04      	ldr	r3, [pc, #16]	; (8007fb8 <USER_status+0x24>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	2000000d 	.word	0x2000000d

08007fbc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	607a      	str	r2, [r7, #4]
 8007fc6:	603b      	str	r3, [r7, #0]
 8007fc8:	4603      	mov	r3, r0
 8007fca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8007fcc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b085      	sub	sp, #20
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	603b      	str	r3, [r7, #0]
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8007fea:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	603a      	str	r2, [r7, #0]
 8008002:	71fb      	strb	r3, [r7, #7]
 8008004:	460b      	mov	r3, r1
 8008006:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	73fb      	strb	r3, [r7, #15]
    return res;
 800800c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
	...

0800801c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008026:	79fb      	ldrb	r3, [r7, #7]
 8008028:	4a08      	ldr	r2, [pc, #32]	; (800804c <disk_status+0x30>)
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	79fa      	ldrb	r2, [r7, #7]
 8008034:	4905      	ldr	r1, [pc, #20]	; (800804c <disk_status+0x30>)
 8008036:	440a      	add	r2, r1
 8008038:	7a12      	ldrb	r2, [r2, #8]
 800803a:	4610      	mov	r0, r2
 800803c:	4798      	blx	r3
 800803e:	4603      	mov	r3, r0
 8008040:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008042:	7bfb      	ldrb	r3, [r7, #15]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	20000360 	.word	0x20000360

08008050 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	4603      	mov	r3, r0
 8008058:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800805e:	79fb      	ldrb	r3, [r7, #7]
 8008060:	4a0d      	ldr	r2, [pc, #52]	; (8008098 <disk_initialize+0x48>)
 8008062:	5cd3      	ldrb	r3, [r2, r3]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d111      	bne.n	800808c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008068:	79fb      	ldrb	r3, [r7, #7]
 800806a:	4a0b      	ldr	r2, [pc, #44]	; (8008098 <disk_initialize+0x48>)
 800806c:	2101      	movs	r1, #1
 800806e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008070:	79fb      	ldrb	r3, [r7, #7]
 8008072:	4a09      	ldr	r2, [pc, #36]	; (8008098 <disk_initialize+0x48>)
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	79fa      	ldrb	r2, [r7, #7]
 800807e:	4906      	ldr	r1, [pc, #24]	; (8008098 <disk_initialize+0x48>)
 8008080:	440a      	add	r2, r1
 8008082:	7a12      	ldrb	r2, [r2, #8]
 8008084:	4610      	mov	r0, r2
 8008086:	4798      	blx	r3
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800808c:	7bfb      	ldrb	r3, [r7, #15]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20000360 	.word	0x20000360

0800809c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800809c:	b590      	push	{r4, r7, lr}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60b9      	str	r1, [r7, #8]
 80080a4:	607a      	str	r2, [r7, #4]
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	4603      	mov	r3, r0
 80080aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	4a0a      	ldr	r2, [pc, #40]	; (80080d8 <disk_read+0x3c>)
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	689c      	ldr	r4, [r3, #8]
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	4a07      	ldr	r2, [pc, #28]	; (80080d8 <disk_read+0x3c>)
 80080bc:	4413      	add	r3, r2
 80080be:	7a18      	ldrb	r0, [r3, #8]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	68b9      	ldr	r1, [r7, #8]
 80080c6:	47a0      	blx	r4
 80080c8:	4603      	mov	r3, r0
 80080ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd90      	pop	{r4, r7, pc}
 80080d6:	bf00      	nop
 80080d8:	20000360 	.word	0x20000360

080080dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80080dc:	b590      	push	{r4, r7, lr}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60b9      	str	r1, [r7, #8]
 80080e4:	607a      	str	r2, [r7, #4]
 80080e6:	603b      	str	r3, [r7, #0]
 80080e8:	4603      	mov	r3, r0
 80080ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	4a0a      	ldr	r2, [pc, #40]	; (8008118 <disk_write+0x3c>)
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	68dc      	ldr	r4, [r3, #12]
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	4a07      	ldr	r2, [pc, #28]	; (8008118 <disk_write+0x3c>)
 80080fc:	4413      	add	r3, r2
 80080fe:	7a18      	ldrb	r0, [r3, #8]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	68b9      	ldr	r1, [r7, #8]
 8008106:	47a0      	blx	r4
 8008108:	4603      	mov	r3, r0
 800810a:	75fb      	strb	r3, [r7, #23]
  return res;
 800810c:	7dfb      	ldrb	r3, [r7, #23]
}
 800810e:	4618      	mov	r0, r3
 8008110:	371c      	adds	r7, #28
 8008112:	46bd      	mov	sp, r7
 8008114:	bd90      	pop	{r4, r7, pc}
 8008116:	bf00      	nop
 8008118:	20000360 	.word	0x20000360

0800811c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	4603      	mov	r3, r0
 8008124:	603a      	str	r2, [r7, #0]
 8008126:	71fb      	strb	r3, [r7, #7]
 8008128:	460b      	mov	r3, r1
 800812a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800812c:	79fb      	ldrb	r3, [r7, #7]
 800812e:	4a09      	ldr	r2, [pc, #36]	; (8008154 <disk_ioctl+0x38>)
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	79fa      	ldrb	r2, [r7, #7]
 800813a:	4906      	ldr	r1, [pc, #24]	; (8008154 <disk_ioctl+0x38>)
 800813c:	440a      	add	r2, r1
 800813e:	7a10      	ldrb	r0, [r2, #8]
 8008140:	79b9      	ldrb	r1, [r7, #6]
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	4798      	blx	r3
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]
  return res;
 800814a:	7bfb      	ldrb	r3, [r7, #15]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	20000360 	.word	0x20000360

08008158 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3301      	adds	r3, #1
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008168:	89fb      	ldrh	r3, [r7, #14]
 800816a:	021b      	lsls	r3, r3, #8
 800816c:	b21a      	sxth	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	b21b      	sxth	r3, r3
 8008174:	4313      	orrs	r3, r2
 8008176:	b21b      	sxth	r3, r3
 8008178:	81fb      	strh	r3, [r7, #14]
	return rv;
 800817a:	89fb      	ldrh	r3, [r7, #14]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	3303      	adds	r3, #3
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	021b      	lsls	r3, r3, #8
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	3202      	adds	r2, #2
 80081a0:	7812      	ldrb	r2, [r2, #0]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	021b      	lsls	r3, r3, #8
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	3201      	adds	r2, #1
 80081ae:	7812      	ldrb	r2, [r2, #0]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	021b      	lsls	r3, r3, #8
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	7812      	ldrb	r2, [r2, #0]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
	return rv;
 80081c0:	68fb      	ldr	r3, [r7, #12]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	460b      	mov	r3, r1
 80081d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	1c5a      	adds	r2, r3, #1
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	887a      	ldrh	r2, [r7, #2]
 80081e2:	b2d2      	uxtb	r2, r2
 80081e4:	701a      	strb	r2, [r3, #0]
 80081e6:	887b      	ldrh	r3, [r7, #2]
 80081e8:	0a1b      	lsrs	r3, r3, #8
 80081ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	1c5a      	adds	r2, r3, #1
 80081f0:	607a      	str	r2, [r7, #4]
 80081f2:	887a      	ldrh	r2, [r7, #2]
 80081f4:	b2d2      	uxtb	r2, r2
 80081f6:	701a      	strb	r2, [r3, #0]
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	607a      	str	r2, [r7, #4]
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	b2d2      	uxtb	r2, r2
 8008218:	701a      	strb	r2, [r3, #0]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	0a1b      	lsrs	r3, r3, #8
 800821e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	607a      	str	r2, [r7, #4]
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	b2d2      	uxtb	r2, r2
 800822a:	701a      	strb	r2, [r3, #0]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	0a1b      	lsrs	r3, r3, #8
 8008230:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	607a      	str	r2, [r7, #4]
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	b2d2      	uxtb	r2, r2
 800823c:	701a      	strb	r2, [r3, #0]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	0a1b      	lsrs	r3, r3, #8
 8008242:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	607a      	str	r2, [r7, #4]
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	b2d2      	uxtb	r2, r2
 800824e:	701a      	strb	r2, [r3, #0]
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800825c:	b480      	push	{r7}
 800825e:	b087      	sub	sp, #28
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00d      	beq.n	8008292 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	1c53      	adds	r3, r2, #1
 800827a:	613b      	str	r3, [r7, #16]
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	1c59      	adds	r1, r3, #1
 8008280:	6179      	str	r1, [r7, #20]
 8008282:	7812      	ldrb	r2, [r2, #0]
 8008284:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	3b01      	subs	r3, #1
 800828a:	607b      	str	r3, [r7, #4]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1f1      	bne.n	8008276 <mem_cpy+0x1a>
	}
}
 8008292:	bf00      	nop
 8008294:	371c      	adds	r7, #28
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800829e:	b480      	push	{r7}
 80082a0:	b087      	sub	sp, #28
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	617a      	str	r2, [r7, #20]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3b01      	subs	r3, #1
 80082be:	607b      	str	r3, [r7, #4]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1f3      	bne.n	80082ae <mem_set+0x10>
}
 80082c6:	bf00      	nop
 80082c8:	bf00      	nop
 80082ca:	371c      	adds	r7, #28
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80082d4:	b480      	push	{r7}
 80082d6:	b089      	sub	sp, #36	; 0x24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	61fb      	str	r3, [r7, #28]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	1c5a      	adds	r2, r3, #1
 80082f0:	61fa      	str	r2, [r7, #28]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	4619      	mov	r1, r3
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	1c5a      	adds	r2, r3, #1
 80082fa:	61ba      	str	r2, [r7, #24]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	1acb      	subs	r3, r1, r3
 8008300:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	3b01      	subs	r3, #1
 8008306:	607b      	str	r3, [r7, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <mem_cmp+0x40>
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d0eb      	beq.n	80082ec <mem_cmp+0x18>

	return r;
 8008314:	697b      	ldr	r3, [r7, #20]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3724      	adds	r7, #36	; 0x24
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008322:	b480      	push	{r7}
 8008324:	b083      	sub	sp, #12
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800832c:	e002      	b.n	8008334 <chk_chr+0x12>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	3301      	adds	r3, #1
 8008332:	607b      	str	r3, [r7, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <chk_chr+0x26>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	461a      	mov	r2, r3
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	4293      	cmp	r3, r2
 8008346:	d1f2      	bne.n	800832e <chk_chr+0xc>
	return *str;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	781b      	ldrb	r3, [r3, #0]
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d009      	beq.n	800837a <lock_fs+0x22>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	4618      	mov	r0, r3
 800836c:	f002 fb4e 	bl	800aa0c <ff_req_grant>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <lock_fs+0x22>
 8008376:	2301      	movs	r3, #1
 8008378:	e000      	b.n	800837c <lock_fs+0x24>
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00d      	beq.n	80083b2 <unlock_fs+0x2e>
 8008396:	78fb      	ldrb	r3, [r7, #3]
 8008398:	2b0c      	cmp	r3, #12
 800839a:	d00a      	beq.n	80083b2 <unlock_fs+0x2e>
 800839c:	78fb      	ldrb	r3, [r7, #3]
 800839e:	2b0b      	cmp	r3, #11
 80083a0:	d007      	beq.n	80083b2 <unlock_fs+0x2e>
 80083a2:	78fb      	ldrb	r3, [r7, #3]
 80083a4:	2b0f      	cmp	r3, #15
 80083a6:	d004      	beq.n	80083b2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f002 fb42 	bl	800aa36 <ff_rel_grant>
	}
}
 80083b2:	bf00      	nop
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
	...

080083bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80083c6:	2300      	movs	r3, #0
 80083c8:	60bb      	str	r3, [r7, #8]
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	60fb      	str	r3, [r7, #12]
 80083ce:	e029      	b.n	8008424 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80083d0:	4a27      	ldr	r2, [pc, #156]	; (8008470 <chk_lock+0xb4>)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	011b      	lsls	r3, r3, #4
 80083d6:	4413      	add	r3, r2
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d01d      	beq.n	800841a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80083de:	4a24      	ldr	r2, [pc, #144]	; (8008470 <chk_lock+0xb4>)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	011b      	lsls	r3, r3, #4
 80083e4:	4413      	add	r3, r2
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d116      	bne.n	800841e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80083f0:	4a1f      	ldr	r2, [pc, #124]	; (8008470 <chk_lock+0xb4>)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	011b      	lsls	r3, r3, #4
 80083f6:	4413      	add	r3, r2
 80083f8:	3304      	adds	r3, #4
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008400:	429a      	cmp	r2, r3
 8008402:	d10c      	bne.n	800841e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008404:	4a1a      	ldr	r2, [pc, #104]	; (8008470 <chk_lock+0xb4>)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	4413      	add	r3, r2
 800840c:	3308      	adds	r3, #8
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008414:	429a      	cmp	r2, r3
 8008416:	d102      	bne.n	800841e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008418:	e007      	b.n	800842a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800841a:	2301      	movs	r3, #1
 800841c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3301      	adds	r3, #1
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d9d2      	bls.n	80083d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2b02      	cmp	r3, #2
 800842e:	d109      	bne.n	8008444 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d102      	bne.n	800843c <chk_lock+0x80>
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b02      	cmp	r3, #2
 800843a:	d101      	bne.n	8008440 <chk_lock+0x84>
 800843c:	2300      	movs	r3, #0
 800843e:	e010      	b.n	8008462 <chk_lock+0xa6>
 8008440:	2312      	movs	r3, #18
 8008442:	e00e      	b.n	8008462 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d108      	bne.n	800845c <chk_lock+0xa0>
 800844a:	4a09      	ldr	r2, [pc, #36]	; (8008470 <chk_lock+0xb4>)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	011b      	lsls	r3, r3, #4
 8008450:	4413      	add	r3, r2
 8008452:	330c      	adds	r3, #12
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800845a:	d101      	bne.n	8008460 <chk_lock+0xa4>
 800845c:	2310      	movs	r3, #16
 800845e:	e000      	b.n	8008462 <chk_lock+0xa6>
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	20000340 	.word	0x20000340

08008474 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800847a:	2300      	movs	r3, #0
 800847c:	607b      	str	r3, [r7, #4]
 800847e:	e002      	b.n	8008486 <enq_lock+0x12>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	3301      	adds	r3, #1
 8008484:	607b      	str	r3, [r7, #4]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d806      	bhi.n	800849a <enq_lock+0x26>
 800848c:	4a09      	ldr	r2, [pc, #36]	; (80084b4 <enq_lock+0x40>)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	4413      	add	r3, r2
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1f2      	bne.n	8008480 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b02      	cmp	r3, #2
 800849e:	bf14      	ite	ne
 80084a0:	2301      	movne	r3, #1
 80084a2:	2300      	moveq	r3, #0
 80084a4:	b2db      	uxtb	r3, r3
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	20000340 	.word	0x20000340

080084b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80084c2:	2300      	movs	r3, #0
 80084c4:	60fb      	str	r3, [r7, #12]
 80084c6:	e01f      	b.n	8008508 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80084c8:	4a41      	ldr	r2, [pc, #260]	; (80085d0 <inc_lock+0x118>)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	011b      	lsls	r3, r3, #4
 80084ce:	4413      	add	r3, r2
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d113      	bne.n	8008502 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80084da:	4a3d      	ldr	r2, [pc, #244]	; (80085d0 <inc_lock+0x118>)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	011b      	lsls	r3, r3, #4
 80084e0:	4413      	add	r3, r2
 80084e2:	3304      	adds	r3, #4
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d109      	bne.n	8008502 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80084ee:	4a38      	ldr	r2, [pc, #224]	; (80085d0 <inc_lock+0x118>)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	011b      	lsls	r3, r3, #4
 80084f4:	4413      	add	r3, r2
 80084f6:	3308      	adds	r3, #8
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80084fe:	429a      	cmp	r2, r3
 8008500:	d006      	beq.n	8008510 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	3301      	adds	r3, #1
 8008506:	60fb      	str	r3, [r7, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d9dc      	bls.n	80084c8 <inc_lock+0x10>
 800850e:	e000      	b.n	8008512 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008510:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2b02      	cmp	r3, #2
 8008516:	d132      	bne.n	800857e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008518:	2300      	movs	r3, #0
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	e002      	b.n	8008524 <inc_lock+0x6c>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3301      	adds	r3, #1
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d806      	bhi.n	8008538 <inc_lock+0x80>
 800852a:	4a29      	ldr	r2, [pc, #164]	; (80085d0 <inc_lock+0x118>)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	011b      	lsls	r3, r3, #4
 8008530:	4413      	add	r3, r2
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1f2      	bne.n	800851e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2b02      	cmp	r3, #2
 800853c:	d101      	bne.n	8008542 <inc_lock+0x8a>
 800853e:	2300      	movs	r3, #0
 8008540:	e040      	b.n	80085c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	4922      	ldr	r1, [pc, #136]	; (80085d0 <inc_lock+0x118>)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	011b      	lsls	r3, r3, #4
 800854c:	440b      	add	r3, r1
 800854e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	491e      	ldr	r1, [pc, #120]	; (80085d0 <inc_lock+0x118>)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	011b      	lsls	r3, r3, #4
 800855a:	440b      	add	r3, r1
 800855c:	3304      	adds	r3, #4
 800855e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	695a      	ldr	r2, [r3, #20]
 8008564:	491a      	ldr	r1, [pc, #104]	; (80085d0 <inc_lock+0x118>)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	011b      	lsls	r3, r3, #4
 800856a:	440b      	add	r3, r1
 800856c:	3308      	adds	r3, #8
 800856e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008570:	4a17      	ldr	r2, [pc, #92]	; (80085d0 <inc_lock+0x118>)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	4413      	add	r3, r2
 8008578:	330c      	adds	r3, #12
 800857a:	2200      	movs	r2, #0
 800857c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d009      	beq.n	8008598 <inc_lock+0xe0>
 8008584:	4a12      	ldr	r2, [pc, #72]	; (80085d0 <inc_lock+0x118>)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	011b      	lsls	r3, r3, #4
 800858a:	4413      	add	r3, r2
 800858c:	330c      	adds	r3, #12
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <inc_lock+0xe0>
 8008594:	2300      	movs	r3, #0
 8008596:	e015      	b.n	80085c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d108      	bne.n	80085b0 <inc_lock+0xf8>
 800859e:	4a0c      	ldr	r2, [pc, #48]	; (80085d0 <inc_lock+0x118>)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	011b      	lsls	r3, r3, #4
 80085a4:	4413      	add	r3, r2
 80085a6:	330c      	adds	r3, #12
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	3301      	adds	r3, #1
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	e001      	b.n	80085b4 <inc_lock+0xfc>
 80085b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085b4:	4906      	ldr	r1, [pc, #24]	; (80085d0 <inc_lock+0x118>)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	011b      	lsls	r3, r3, #4
 80085ba:	440b      	add	r3, r1
 80085bc:	330c      	adds	r3, #12
 80085be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	3301      	adds	r3, #1
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	20000340 	.word	0x20000340

080085d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3b01      	subs	r3, #1
 80085e0:	607b      	str	r3, [r7, #4]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d825      	bhi.n	8008634 <dec_lock+0x60>
		n = Files[i].ctr;
 80085e8:	4a17      	ldr	r2, [pc, #92]	; (8008648 <dec_lock+0x74>)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	011b      	lsls	r3, r3, #4
 80085ee:	4413      	add	r3, r2
 80085f0:	330c      	adds	r3, #12
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80085f6:	89fb      	ldrh	r3, [r7, #14]
 80085f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085fc:	d101      	bne.n	8008602 <dec_lock+0x2e>
 80085fe:	2300      	movs	r3, #0
 8008600:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008602:	89fb      	ldrh	r3, [r7, #14]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d002      	beq.n	800860e <dec_lock+0x3a>
 8008608:	89fb      	ldrh	r3, [r7, #14]
 800860a:	3b01      	subs	r3, #1
 800860c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800860e:	4a0e      	ldr	r2, [pc, #56]	; (8008648 <dec_lock+0x74>)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	011b      	lsls	r3, r3, #4
 8008614:	4413      	add	r3, r2
 8008616:	330c      	adds	r3, #12
 8008618:	89fa      	ldrh	r2, [r7, #14]
 800861a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800861c:	89fb      	ldrh	r3, [r7, #14]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d105      	bne.n	800862e <dec_lock+0x5a>
 8008622:	4a09      	ldr	r2, [pc, #36]	; (8008648 <dec_lock+0x74>)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	011b      	lsls	r3, r3, #4
 8008628:	4413      	add	r3, r2
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	737b      	strb	r3, [r7, #13]
 8008632:	e001      	b.n	8008638 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008634:	2302      	movs	r3, #2
 8008636:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008638:	7b7b      	ldrb	r3, [r7, #13]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	20000340 	.word	0x20000340

0800864c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008654:	2300      	movs	r3, #0
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	e010      	b.n	800867c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800865a:	4a0d      	ldr	r2, [pc, #52]	; (8008690 <clear_lock+0x44>)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	011b      	lsls	r3, r3, #4
 8008660:	4413      	add	r3, r2
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	429a      	cmp	r2, r3
 8008668:	d105      	bne.n	8008676 <clear_lock+0x2a>
 800866a:	4a09      	ldr	r2, [pc, #36]	; (8008690 <clear_lock+0x44>)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	011b      	lsls	r3, r3, #4
 8008670:	4413      	add	r3, r2
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3301      	adds	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d9eb      	bls.n	800865a <clear_lock+0xe>
	}
}
 8008682:	bf00      	nop
 8008684:	bf00      	nop
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	20000340 	.word	0x20000340

08008694 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	78db      	ldrb	r3, [r3, #3]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d034      	beq.n	8008712 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	7858      	ldrb	r0, [r3, #1]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80086b8:	2301      	movs	r3, #1
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	f7ff fd0e 	bl	80080dc <disk_write>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d002      	beq.n	80086cc <sync_window+0x38>
			res = FR_DISK_ERR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	73fb      	strb	r3, [r7, #15]
 80086ca:	e022      	b.n	8008712 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	1ad2      	subs	r2, r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d217      	bcs.n	8008712 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	789b      	ldrb	r3, [r3, #2]
 80086e6:	613b      	str	r3, [r7, #16]
 80086e8:	e010      	b.n	800870c <sync_window+0x78>
					wsect += fs->fsize;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	4413      	add	r3, r2
 80086f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	7858      	ldrb	r0, [r3, #1]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80086fe:	2301      	movs	r3, #1
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	f7ff fceb 	bl	80080dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	3b01      	subs	r3, #1
 800870a:	613b      	str	r3, [r7, #16]
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d8eb      	bhi.n	80086ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008712:	7bfb      	ldrb	r3, [r7, #15]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	429a      	cmp	r2, r3
 8008732:	d01b      	beq.n	800876c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7ff ffad 	bl	8008694 <sync_window>
 800873a:	4603      	mov	r3, r0
 800873c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d113      	bne.n	800876c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	7858      	ldrb	r0, [r3, #1]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800874e:	2301      	movs	r3, #1
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	f7ff fca3 	bl	800809c <disk_read>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d004      	beq.n	8008766 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800875c:	f04f 33ff 	mov.w	r3, #4294967295
 8008760:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008762:	2301      	movs	r3, #1
 8008764:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7ff ff87 	bl	8008694 <sync_window>
 8008786:	4603      	mov	r3, r0
 8008788:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d158      	bne.n	8008842 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b03      	cmp	r3, #3
 8008796:	d148      	bne.n	800882a <sync_fs+0xb2>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	791b      	ldrb	r3, [r3, #4]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d144      	bne.n	800882a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	3334      	adds	r3, #52	; 0x34
 80087a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087a8:	2100      	movs	r1, #0
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7ff fd77 	bl	800829e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	3334      	adds	r3, #52	; 0x34
 80087b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80087b8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80087bc:	4618      	mov	r0, r3
 80087be:	f7ff fd06 	bl	80081ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	3334      	adds	r3, #52	; 0x34
 80087c6:	4921      	ldr	r1, [pc, #132]	; (800884c <sync_fs+0xd4>)
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff fd1b 	bl	8008204 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	3334      	adds	r3, #52	; 0x34
 80087d2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80087d6:	491e      	ldr	r1, [pc, #120]	; (8008850 <sync_fs+0xd8>)
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff fd13 	bl	8008204 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	3334      	adds	r3, #52	; 0x34
 80087e2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	4619      	mov	r1, r3
 80087ec:	4610      	mov	r0, r2
 80087ee:	f7ff fd09 	bl	8008204 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	3334      	adds	r3, #52	; 0x34
 80087f6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	4619      	mov	r1, r3
 8008800:	4610      	mov	r0, r2
 8008802:	f7ff fcff 	bl	8008204 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a1b      	ldr	r3, [r3, #32]
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	7858      	ldrb	r0, [r3, #1]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800881e:	2301      	movs	r3, #1
 8008820:	f7ff fc5c 	bl	80080dc <disk_write>
			fs->fsi_flag = 0;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	785b      	ldrb	r3, [r3, #1]
 800882e:	2200      	movs	r2, #0
 8008830:	2100      	movs	r1, #0
 8008832:	4618      	mov	r0, r3
 8008834:	f7ff fc72 	bl	800811c <disk_ioctl>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d001      	beq.n	8008842 <sync_fs+0xca>
 800883e:	2301      	movs	r3, #1
 8008840:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008842:	7bfb      	ldrb	r3, [r7, #15]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	41615252 	.word	0x41615252
 8008850:	61417272 	.word	0x61417272

08008854 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	3b02      	subs	r3, #2
 8008862:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	3b02      	subs	r3, #2
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	429a      	cmp	r2, r3
 800886e:	d301      	bcc.n	8008874 <clust2sect+0x20>
 8008870:	2300      	movs	r3, #0
 8008872:	e008      	b.n	8008886 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	895b      	ldrh	r3, [r3, #10]
 8008878:	461a      	mov	r2, r3
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	fb03 f202 	mul.w	r2, r3, r2
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	4413      	add	r3, r2
}
 8008886:	4618      	mov	r0, r3
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b086      	sub	sp, #24
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d904      	bls.n	80088b2 <get_fat+0x20>
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d302      	bcc.n	80088b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80088b2:	2301      	movs	r3, #1
 80088b4:	617b      	str	r3, [r7, #20]
 80088b6:	e08f      	b.n	80089d8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80088b8:	f04f 33ff 	mov.w	r3, #4294967295
 80088bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d062      	beq.n	800898c <get_fat+0xfa>
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	dc7c      	bgt.n	80089c4 <get_fat+0x132>
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d002      	beq.n	80088d4 <get_fat+0x42>
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d042      	beq.n	8008958 <get_fat+0xc6>
 80088d2:	e077      	b.n	80089c4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	085b      	lsrs	r3, r3, #1
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	0a5b      	lsrs	r3, r3, #9
 80088ea:	4413      	add	r3, r2
 80088ec:	4619      	mov	r1, r3
 80088ee:	6938      	ldr	r0, [r7, #16]
 80088f0:	f7ff ff14 	bl	800871c <move_window>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d167      	bne.n	80089ca <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	60fa      	str	r2, [r7, #12]
 8008900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	4413      	add	r3, r2
 8008908:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800890c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	0a5b      	lsrs	r3, r3, #9
 8008916:	4413      	add	r3, r2
 8008918:	4619      	mov	r1, r3
 800891a:	6938      	ldr	r0, [r7, #16]
 800891c:	f7ff fefe 	bl	800871c <move_window>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d153      	bne.n	80089ce <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	4413      	add	r3, r2
 8008930:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008934:	021b      	lsls	r3, r3, #8
 8008936:	461a      	mov	r2, r3
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	4313      	orrs	r3, r2
 800893c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <get_fat+0xbc>
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	091b      	lsrs	r3, r3, #4
 800894c:	e002      	b.n	8008954 <get_fat+0xc2>
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008954:	617b      	str	r3, [r7, #20]
			break;
 8008956:	e03f      	b.n	80089d8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	0a1b      	lsrs	r3, r3, #8
 8008960:	4413      	add	r3, r2
 8008962:	4619      	mov	r1, r3
 8008964:	6938      	ldr	r0, [r7, #16]
 8008966:	f7ff fed9 	bl	800871c <move_window>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d130      	bne.n	80089d2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800897e:	4413      	add	r3, r2
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff fbe9 	bl	8008158 <ld_word>
 8008986:	4603      	mov	r3, r0
 8008988:	617b      	str	r3, [r7, #20]
			break;
 800898a:	e025      	b.n	80089d8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	09db      	lsrs	r3, r3, #7
 8008994:	4413      	add	r3, r2
 8008996:	4619      	mov	r1, r3
 8008998:	6938      	ldr	r0, [r7, #16]
 800899a:	f7ff febf 	bl	800871c <move_window>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d118      	bne.n	80089d6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80089b2:	4413      	add	r3, r2
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7ff fbe7 	bl	8008188 <ld_dword>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80089c0:	617b      	str	r3, [r7, #20]
			break;
 80089c2:	e009      	b.n	80089d8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80089c4:	2301      	movs	r3, #1
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	e006      	b.n	80089d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089ca:	bf00      	nop
 80089cc:	e004      	b.n	80089d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089ce:	bf00      	nop
 80089d0:	e002      	b.n	80089d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80089d2:	bf00      	nop
 80089d4:	e000      	b.n	80089d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80089d6:	bf00      	nop
		}
	}

	return val;
 80089d8:	697b      	ldr	r3, [r7, #20]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80089e2:	b590      	push	{r4, r7, lr}
 80089e4:	b089      	sub	sp, #36	; 0x24
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80089ee:	2302      	movs	r3, #2
 80089f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	f240 80d2 	bls.w	8008b9e <put_fat+0x1bc>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	f080 80cc 	bcs.w	8008b9e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	2b03      	cmp	r3, #3
 8008a0c:	f000 8096 	beq.w	8008b3c <put_fat+0x15a>
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	f300 80cd 	bgt.w	8008bb0 <put_fat+0x1ce>
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d002      	beq.n	8008a20 <put_fat+0x3e>
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d06e      	beq.n	8008afc <put_fat+0x11a>
 8008a1e:	e0c7      	b.n	8008bb0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	61bb      	str	r3, [r7, #24]
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	085b      	lsrs	r3, r3, #1
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	0a5b      	lsrs	r3, r3, #9
 8008a36:	4413      	add	r3, r2
 8008a38:	4619      	mov	r1, r3
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f7ff fe6e 	bl	800871c <move_window>
 8008a40:	4603      	mov	r3, r0
 8008a42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a44:	7ffb      	ldrb	r3, [r7, #31]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f040 80ab 	bne.w	8008ba2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	1c59      	adds	r1, r3, #1
 8008a56:	61b9      	str	r1, [r7, #24]
 8008a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5c:	4413      	add	r3, r2
 8008a5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f003 0301 	and.w	r3, r3, #1
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00d      	beq.n	8008a86 <put_fat+0xa4>
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	b25b      	sxtb	r3, r3
 8008a70:	f003 030f 	and.w	r3, r3, #15
 8008a74:	b25a      	sxtb	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	011b      	lsls	r3, r3, #4
 8008a7c:	b25b      	sxtb	r3, r3
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	b25b      	sxtb	r3, r3
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	e001      	b.n	8008a8a <put_fat+0xa8>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2201      	movs	r2, #1
 8008a92:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	0a5b      	lsrs	r3, r3, #9
 8008a9c:	4413      	add	r3, r2
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f7ff fe3b 	bl	800871c <move_window>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008aaa:	7ffb      	ldrb	r3, [r7, #31]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d17a      	bne.n	8008ba6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008abc:	4413      	add	r3, r2
 8008abe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <put_fat+0xf0>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	091b      	lsrs	r3, r3, #4
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	e00e      	b.n	8008af0 <put_fat+0x10e>
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	b25b      	sxtb	r3, r3
 8008ad8:	f023 030f 	bic.w	r3, r3, #15
 8008adc:	b25a      	sxtb	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	0a1b      	lsrs	r3, r3, #8
 8008ae2:	b25b      	sxtb	r3, r3
 8008ae4:	f003 030f 	and.w	r3, r3, #15
 8008ae8:	b25b      	sxtb	r3, r3
 8008aea:	4313      	orrs	r3, r2
 8008aec:	b25b      	sxtb	r3, r3
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2201      	movs	r2, #1
 8008af8:	70da      	strb	r2, [r3, #3]
			break;
 8008afa:	e059      	b.n	8008bb0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	0a1b      	lsrs	r3, r3, #8
 8008b04:	4413      	add	r3, r2
 8008b06:	4619      	mov	r1, r3
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f7ff fe07 	bl	800871c <move_window>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b12:	7ffb      	ldrb	r3, [r7, #31]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d148      	bne.n	8008baa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008b26:	4413      	add	r3, r2
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	b292      	uxth	r2, r2
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7ff fb4d 	bl	80081ce <st_word>
			fs->wflag = 1;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	70da      	strb	r2, [r3, #3]
			break;
 8008b3a:	e039      	b.n	8008bb0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	09db      	lsrs	r3, r3, #7
 8008b44:	4413      	add	r3, r2
 8008b46:	4619      	mov	r1, r3
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f7ff fde7 	bl	800871c <move_window>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b52:	7ffb      	ldrb	r3, [r7, #31]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d12a      	bne.n	8008bae <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008b6c:	4413      	add	r3, r2
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7ff fb0a 	bl	8008188 <ld_dword>
 8008b74:	4603      	mov	r3, r0
 8008b76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b7a:	4323      	orrs	r3, r4
 8008b7c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008b8c:	4413      	add	r3, r2
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff fb37 	bl	8008204 <st_dword>
			fs->wflag = 1;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	70da      	strb	r2, [r3, #3]
			break;
 8008b9c:	e008      	b.n	8008bb0 <put_fat+0x1ce>
		}
	}
 8008b9e:	bf00      	nop
 8008ba0:	e006      	b.n	8008bb0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008ba2:	bf00      	nop
 8008ba4:	e004      	b.n	8008bb0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008ba6:	bf00      	nop
 8008ba8:	e002      	b.n	8008bb0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008baa:	bf00      	nop
 8008bac:	e000      	b.n	8008bb0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008bae:	bf00      	nop
	return res;
 8008bb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3724      	adds	r7, #36	; 0x24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd90      	pop	{r4, r7, pc}

08008bba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b088      	sub	sp, #32
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	60f8      	str	r0, [r7, #12]
 8008bc2:	60b9      	str	r1, [r7, #8]
 8008bc4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d904      	bls.n	8008be0 <remove_chain+0x26>
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d301      	bcc.n	8008be4 <remove_chain+0x2a>
 8008be0:	2302      	movs	r3, #2
 8008be2:	e04b      	b.n	8008c7c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00c      	beq.n	8008c04 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008bea:	f04f 32ff 	mov.w	r2, #4294967295
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	69b8      	ldr	r0, [r7, #24]
 8008bf2:	f7ff fef6 	bl	80089e2 <put_fat>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008bfa:	7ffb      	ldrb	r3, [r7, #31]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <remove_chain+0x4a>
 8008c00:	7ffb      	ldrb	r3, [r7, #31]
 8008c02:	e03b      	b.n	8008c7c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008c04:	68b9      	ldr	r1, [r7, #8]
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f7ff fe43 	bl	8008892 <get_fat>
 8008c0c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d031      	beq.n	8008c78 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d101      	bne.n	8008c1e <remove_chain+0x64>
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	e02e      	b.n	8008c7c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c24:	d101      	bne.n	8008c2a <remove_chain+0x70>
 8008c26:	2301      	movs	r3, #1
 8008c28:	e028      	b.n	8008c7c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	68b9      	ldr	r1, [r7, #8]
 8008c2e:	69b8      	ldr	r0, [r7, #24]
 8008c30:	f7ff fed7 	bl	80089e2 <put_fat>
 8008c34:	4603      	mov	r3, r0
 8008c36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008c38:	7ffb      	ldrb	r3, [r7, #31]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <remove_chain+0x88>
 8008c3e:	7ffb      	ldrb	r3, [r7, #31]
 8008c40:	e01c      	b.n	8008c7c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	695a      	ldr	r2, [r3, #20]
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	3b02      	subs	r3, #2
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d20b      	bcs.n	8008c68 <remove_chain+0xae>
			fs->free_clst++;
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	1c5a      	adds	r2, r3, #1
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	791b      	ldrb	r3, [r3, #4]
 8008c5e:	f043 0301 	orr.w	r3, r3, #1
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d3c6      	bcc.n	8008c04 <remove_chain+0x4a>
 8008c76:	e000      	b.n	8008c7a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008c78:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3720      	adds	r7, #32
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b088      	sub	sp, #32
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10d      	bne.n	8008cb6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d004      	beq.n	8008cb0 <create_chain+0x2c>
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d31b      	bcc.n	8008ce8 <create_chain+0x64>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	61bb      	str	r3, [r7, #24]
 8008cb4:	e018      	b.n	8008ce8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7ff fdea 	bl	8008892 <get_fat>
 8008cbe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d801      	bhi.n	8008cca <create_chain+0x46>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e070      	b.n	8008dac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd0:	d101      	bne.n	8008cd6 <create_chain+0x52>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	e06a      	b.n	8008dac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d201      	bcs.n	8008ce4 <create_chain+0x60>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	e063      	b.n	8008dac <create_chain+0x128>
		scl = clst;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	69fa      	ldr	r2, [r7, #28]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d307      	bcc.n	8008d0c <create_chain+0x88>
				ncl = 2;
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008d00:	69fa      	ldr	r2, [r7, #28]
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d901      	bls.n	8008d0c <create_chain+0x88>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	e04f      	b.n	8008dac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008d0c:	69f9      	ldr	r1, [r7, #28]
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7ff fdbf 	bl	8008892 <get_fat>
 8008d14:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00e      	beq.n	8008d3a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d003      	beq.n	8008d2a <create_chain+0xa6>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d28:	d101      	bne.n	8008d2e <create_chain+0xaa>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	e03e      	b.n	8008dac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008d2e:	69fa      	ldr	r2, [r7, #28]
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d1da      	bne.n	8008cec <create_chain+0x68>
 8008d36:	2300      	movs	r3, #0
 8008d38:	e038      	b.n	8008dac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008d3a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d40:	69f9      	ldr	r1, [r7, #28]
 8008d42:	6938      	ldr	r0, [r7, #16]
 8008d44:	f7ff fe4d 	bl	80089e2 <put_fat>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008d4c:	7dfb      	ldrb	r3, [r7, #23]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d109      	bne.n	8008d66 <create_chain+0xe2>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d006      	beq.n	8008d66 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008d58:	69fa      	ldr	r2, [r7, #28]
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6938      	ldr	r0, [r7, #16]
 8008d5e:	f7ff fe40 	bl	80089e2 <put_fat>
 8008d62:	4603      	mov	r3, r0
 8008d64:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d116      	bne.n	8008d9a <create_chain+0x116>
		fs->last_clst = ncl;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	695a      	ldr	r2, [r3, #20]
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	3b02      	subs	r3, #2
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d804      	bhi.n	8008d8a <create_chain+0x106>
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	1e5a      	subs	r2, r3, #1
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	791b      	ldrb	r3, [r3, #4]
 8008d8e:	f043 0301 	orr.w	r3, r3, #1
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	711a      	strb	r2, [r3, #4]
 8008d98:	e007      	b.n	8008daa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d102      	bne.n	8008da6 <create_chain+0x122>
 8008da0:	f04f 33ff 	mov.w	r3, #4294967295
 8008da4:	e000      	b.n	8008da8 <create_chain+0x124>
 8008da6:	2301      	movs	r3, #1
 8008da8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008daa:	69fb      	ldr	r3, [r7, #28]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3720      	adds	r7, #32
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b087      	sub	sp, #28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	3304      	adds	r3, #4
 8008dca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	0a5b      	lsrs	r3, r3, #9
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	8952      	ldrh	r2, [r2, #10]
 8008dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dd8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	1d1a      	adds	r2, r3, #4
 8008dde:	613a      	str	r2, [r7, #16]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <clmt_clust+0x3a>
 8008dea:	2300      	movs	r3, #0
 8008dec:	e010      	b.n	8008e10 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d307      	bcc.n	8008e06 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	617b      	str	r3, [r7, #20]
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	3304      	adds	r3, #4
 8008e02:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e04:	e7e9      	b.n	8008dda <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008e06:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	4413      	add	r3, r2
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	371c      	adds	r7, #28
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e32:	d204      	bcs.n	8008e3e <dir_sdi+0x22>
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	f003 031f 	and.w	r3, r3, #31
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e063      	b.n	8008f0a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d106      	bne.n	8008e62 <dir_sdi+0x46>
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d902      	bls.n	8008e62 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e60:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10c      	bne.n	8008e82 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	095b      	lsrs	r3, r3, #5
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	8912      	ldrh	r2, [r2, #8]
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d301      	bcc.n	8008e78 <dir_sdi+0x5c>
 8008e74:	2302      	movs	r3, #2
 8008e76:	e048      	b.n	8008f0a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	61da      	str	r2, [r3, #28]
 8008e80:	e029      	b.n	8008ed6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	895b      	ldrh	r3, [r3, #10]
 8008e86:	025b      	lsls	r3, r3, #9
 8008e88:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008e8a:	e019      	b.n	8008ec0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6979      	ldr	r1, [r7, #20]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7ff fcfe 	bl	8008892 <get_fat>
 8008e96:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9e:	d101      	bne.n	8008ea4 <dir_sdi+0x88>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e032      	b.n	8008f0a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d904      	bls.n	8008eb4 <dir_sdi+0x98>
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d301      	bcc.n	8008eb8 <dir_sdi+0x9c>
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	e028      	b.n	8008f0a <dir_sdi+0xee>
			ofs -= csz;
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d2e1      	bcs.n	8008e8c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008ec8:	6979      	ldr	r1, [r7, #20]
 8008eca:	6938      	ldr	r0, [r7, #16]
 8008ecc:	f7ff fcc2 	bl	8008854 <clust2sect>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	69db      	ldr	r3, [r3, #28]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <dir_sdi+0xcc>
 8008ee4:	2302      	movs	r3, #2
 8008ee6:	e010      	b.n	8008f0a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	69da      	ldr	r2, [r3, #28]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	0a5b      	lsrs	r3, r3, #9
 8008ef0:	441a      	add	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f02:	441a      	add	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b086      	sub	sp, #24
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	3320      	adds	r3, #32
 8008f28:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d003      	beq.n	8008f3a <dir_next+0x28>
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f38:	d301      	bcc.n	8008f3e <dir_next+0x2c>
 8008f3a:	2304      	movs	r3, #4
 8008f3c:	e0aa      	b.n	8009094 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f040 8098 	bne.w	800907a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	1c5a      	adds	r2, r3, #1
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10b      	bne.n	8008f74 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	095b      	lsrs	r3, r3, #5
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	8912      	ldrh	r2, [r2, #8]
 8008f64:	4293      	cmp	r3, r2
 8008f66:	f0c0 8088 	bcc.w	800907a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	61da      	str	r2, [r3, #28]
 8008f70:	2304      	movs	r3, #4
 8008f72:	e08f      	b.n	8009094 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	0a5b      	lsrs	r3, r3, #9
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	8952      	ldrh	r2, [r2, #10]
 8008f7c:	3a01      	subs	r2, #1
 8008f7e:	4013      	ands	r3, r2
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d17a      	bne.n	800907a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	f7ff fc80 	bl	8008892 <get_fat>
 8008f92:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d801      	bhi.n	8008f9e <dir_next+0x8c>
 8008f9a:	2302      	movs	r3, #2
 8008f9c:	e07a      	b.n	8009094 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa4:	d101      	bne.n	8008faa <dir_next+0x98>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e074      	b.n	8009094 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d358      	bcc.n	8009066 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d104      	bne.n	8008fc4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	61da      	str	r2, [r3, #28]
 8008fc0:	2304      	movs	r3, #4
 8008fc2:	e067      	b.n	8009094 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	4610      	mov	r0, r2
 8008fce:	f7ff fe59 	bl	8008c84 <create_chain>
 8008fd2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <dir_next+0xcc>
 8008fda:	2307      	movs	r3, #7
 8008fdc:	e05a      	b.n	8009094 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d101      	bne.n	8008fe8 <dir_next+0xd6>
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	e055      	b.n	8009094 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fee:	d101      	bne.n	8008ff4 <dir_next+0xe2>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e04f      	b.n	8009094 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f7ff fb4d 	bl	8008694 <sync_window>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <dir_next+0xf2>
 8009000:	2301      	movs	r3, #1
 8009002:	e047      	b.n	8009094 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	3334      	adds	r3, #52	; 0x34
 8009008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800900c:	2100      	movs	r1, #0
 800900e:	4618      	mov	r0, r3
 8009010:	f7ff f945 	bl	800829e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009014:	2300      	movs	r3, #0
 8009016:	613b      	str	r3, [r7, #16]
 8009018:	6979      	ldr	r1, [r7, #20]
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f7ff fc1a 	bl	8008854 <clust2sect>
 8009020:	4602      	mov	r2, r0
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	631a      	str	r2, [r3, #48]	; 0x30
 8009026:	e012      	b.n	800904e <dir_next+0x13c>
						fs->wflag = 1;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2201      	movs	r2, #1
 800902c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f7ff fb30 	bl	8008694 <sync_window>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <dir_next+0x12c>
 800903a:	2301      	movs	r3, #1
 800903c:	e02a      	b.n	8009094 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	3301      	adds	r3, #1
 8009042:	613b      	str	r3, [r7, #16]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	631a      	str	r2, [r3, #48]	; 0x30
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	895b      	ldrh	r3, [r3, #10]
 8009052:	461a      	mov	r2, r3
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	4293      	cmp	r3, r2
 8009058:	d3e6      	bcc.n	8009028 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	1ad2      	subs	r2, r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800906c:	6979      	ldr	r1, [r7, #20]
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f7ff fbf0 	bl	8008854 <clust2sect>
 8009074:	4602      	mov	r2, r0
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800908c:	441a      	add	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3718      	adds	r7, #24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80090ac:	2100      	movs	r1, #0
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7ff feb4 	bl	8008e1c <dir_sdi>
 80090b4:	4603      	mov	r3, r0
 80090b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d12b      	bne.n	8009116 <dir_alloc+0x7a>
		n = 0;
 80090be:	2300      	movs	r3, #0
 80090c0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	4619      	mov	r1, r3
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f7ff fb27 	bl	800871c <move_window>
 80090ce:	4603      	mov	r3, r0
 80090d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80090d2:	7dfb      	ldrb	r3, [r7, #23]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d11d      	bne.n	8009114 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a1b      	ldr	r3, [r3, #32]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2be5      	cmp	r3, #229	; 0xe5
 80090e0:	d004      	beq.n	80090ec <dir_alloc+0x50>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a1b      	ldr	r3, [r3, #32]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d107      	bne.n	80090fc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	3301      	adds	r3, #1
 80090f0:	613b      	str	r3, [r7, #16]
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d102      	bne.n	8009100 <dir_alloc+0x64>
 80090fa:	e00c      	b.n	8009116 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80090fc:	2300      	movs	r3, #0
 80090fe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009100:	2101      	movs	r1, #1
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7ff ff05 	bl	8008f12 <dir_next>
 8009108:	4603      	mov	r3, r0
 800910a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800910c:	7dfb      	ldrb	r3, [r7, #23]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d0d7      	beq.n	80090c2 <dir_alloc+0x26>
 8009112:	e000      	b.n	8009116 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009114:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009116:	7dfb      	ldrb	r3, [r7, #23]
 8009118:	2b04      	cmp	r3, #4
 800911a:	d101      	bne.n	8009120 <dir_alloc+0x84>
 800911c:	2307      	movs	r3, #7
 800911e:	75fb      	strb	r3, [r7, #23]
	return res;
 8009120:	7dfb      	ldrb	r3, [r7, #23]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b084      	sub	sp, #16
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	331a      	adds	r3, #26
 8009138:	4618      	mov	r0, r3
 800913a:	f7ff f80d 	bl	8008158 <ld_word>
 800913e:	4603      	mov	r3, r0
 8009140:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b03      	cmp	r3, #3
 8009148:	d109      	bne.n	800915e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	3314      	adds	r3, #20
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff f802 	bl	8008158 <ld_word>
 8009154:	4603      	mov	r3, r0
 8009156:	041b      	lsls	r3, r3, #16
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800915e:	68fb      	ldr	r3, [r7, #12]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	331a      	adds	r3, #26
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	b292      	uxth	r2, r2
 800917c:	4611      	mov	r1, r2
 800917e:	4618      	mov	r0, r3
 8009180:	f7ff f825 	bl	80081ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	2b03      	cmp	r3, #3
 800918a:	d109      	bne.n	80091a0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f103 0214 	add.w	r2, r3, #20
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	0c1b      	lsrs	r3, r3, #16
 8009196:	b29b      	uxth	r3, r3
 8009198:	4619      	mov	r1, r3
 800919a:	4610      	mov	r0, r2
 800919c:	f7ff f817 	bl	80081ce <st_word>
	}
}
 80091a0:	bf00      	nop
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80091b6:	2100      	movs	r1, #0
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7ff fe2f 	bl	8008e1c <dir_sdi>
 80091be:	4603      	mov	r3, r0
 80091c0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <dir_find+0x24>
 80091c8:	7dfb      	ldrb	r3, [r7, #23]
 80091ca:	e03e      	b.n	800924a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	4619      	mov	r1, r3
 80091d2:	6938      	ldr	r0, [r7, #16]
 80091d4:	f7ff faa2 	bl	800871c <move_window>
 80091d8:	4603      	mov	r3, r0
 80091da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d12f      	bne.n	8009242 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d102      	bne.n	80091f6 <dir_find+0x4e>
 80091f0:	2304      	movs	r3, #4
 80091f2:	75fb      	strb	r3, [r7, #23]
 80091f4:	e028      	b.n	8009248 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	330b      	adds	r3, #11
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009202:	b2da      	uxtb	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a1b      	ldr	r3, [r3, #32]
 800920c:	330b      	adds	r3, #11
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	f003 0308 	and.w	r3, r3, #8
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10a      	bne.n	800922e <dir_find+0x86>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a18      	ldr	r0, [r3, #32]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	3324      	adds	r3, #36	; 0x24
 8009220:	220b      	movs	r2, #11
 8009222:	4619      	mov	r1, r3
 8009224:	f7ff f856 	bl	80082d4 <mem_cmp>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00b      	beq.n	8009246 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800922e:	2100      	movs	r1, #0
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7ff fe6e 	bl	8008f12 <dir_next>
 8009236:	4603      	mov	r3, r0
 8009238:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800923a:	7dfb      	ldrb	r3, [r7, #23]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0c5      	beq.n	80091cc <dir_find+0x24>
 8009240:	e002      	b.n	8009248 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009242:	bf00      	nop
 8009244:	e000      	b.n	8009248 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009246:	bf00      	nop

	return res;
 8009248:	7dfb      	ldrb	r3, [r7, #23]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b084      	sub	sp, #16
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009260:	2101      	movs	r1, #1
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7ff ff1a 	bl	800909c <dir_alloc>
 8009268:	4603      	mov	r3, r0
 800926a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800926c:	7bfb      	ldrb	r3, [r7, #15]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d11c      	bne.n	80092ac <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	69db      	ldr	r3, [r3, #28]
 8009276:	4619      	mov	r1, r3
 8009278:	68b8      	ldr	r0, [r7, #8]
 800927a:	f7ff fa4f 	bl	800871c <move_window>
 800927e:	4603      	mov	r3, r0
 8009280:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d111      	bne.n	80092ac <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	2220      	movs	r2, #32
 800928e:	2100      	movs	r1, #0
 8009290:	4618      	mov	r0, r3
 8009292:	f7ff f804 	bl	800829e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a18      	ldr	r0, [r3, #32]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	3324      	adds	r3, #36	; 0x24
 800929e:	220b      	movs	r2, #11
 80092a0:	4619      	mov	r1, r3
 80092a2:	f7fe ffdb 	bl	800825c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	2201      	movs	r2, #1
 80092aa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b088      	sub	sp, #32
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	3324      	adds	r3, #36	; 0x24
 80092cc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80092ce:	220b      	movs	r2, #11
 80092d0:	2120      	movs	r1, #32
 80092d2:	68b8      	ldr	r0, [r7, #8]
 80092d4:	f7fe ffe3 	bl	800829e <mem_set>
	si = i = 0; ni = 8;
 80092d8:	2300      	movs	r3, #0
 80092da:	613b      	str	r3, [r7, #16]
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	61fb      	str	r3, [r7, #28]
 80092e0:	2308      	movs	r3, #8
 80092e2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	1c5a      	adds	r2, r3, #1
 80092e8:	61fa      	str	r2, [r7, #28]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	4413      	add	r3, r2
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80092f2:	7efb      	ldrb	r3, [r7, #27]
 80092f4:	2b20      	cmp	r3, #32
 80092f6:	d94e      	bls.n	8009396 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80092f8:	7efb      	ldrb	r3, [r7, #27]
 80092fa:	2b2f      	cmp	r3, #47	; 0x2f
 80092fc:	d006      	beq.n	800930c <create_name+0x54>
 80092fe:	7efb      	ldrb	r3, [r7, #27]
 8009300:	2b5c      	cmp	r3, #92	; 0x5c
 8009302:	d110      	bne.n	8009326 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009304:	e002      	b.n	800930c <create_name+0x54>
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	3301      	adds	r3, #1
 800930a:	61fb      	str	r3, [r7, #28]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	4413      	add	r3, r2
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	2b2f      	cmp	r3, #47	; 0x2f
 8009316:	d0f6      	beq.n	8009306 <create_name+0x4e>
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	4413      	add	r3, r2
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	2b5c      	cmp	r3, #92	; 0x5c
 8009322:	d0f0      	beq.n	8009306 <create_name+0x4e>
			break;
 8009324:	e038      	b.n	8009398 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009326:	7efb      	ldrb	r3, [r7, #27]
 8009328:	2b2e      	cmp	r3, #46	; 0x2e
 800932a:	d003      	beq.n	8009334 <create_name+0x7c>
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	429a      	cmp	r2, r3
 8009332:	d30c      	bcc.n	800934e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	2b0b      	cmp	r3, #11
 8009338:	d002      	beq.n	8009340 <create_name+0x88>
 800933a:	7efb      	ldrb	r3, [r7, #27]
 800933c:	2b2e      	cmp	r3, #46	; 0x2e
 800933e:	d001      	beq.n	8009344 <create_name+0x8c>
 8009340:	2306      	movs	r3, #6
 8009342:	e044      	b.n	80093ce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009344:	2308      	movs	r3, #8
 8009346:	613b      	str	r3, [r7, #16]
 8009348:	230b      	movs	r3, #11
 800934a:	617b      	str	r3, [r7, #20]
			continue;
 800934c:	e022      	b.n	8009394 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800934e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009352:	2b00      	cmp	r3, #0
 8009354:	da04      	bge.n	8009360 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009356:	7efb      	ldrb	r3, [r7, #27]
 8009358:	3b80      	subs	r3, #128	; 0x80
 800935a:	4a1f      	ldr	r2, [pc, #124]	; (80093d8 <create_name+0x120>)
 800935c:	5cd3      	ldrb	r3, [r2, r3]
 800935e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009360:	7efb      	ldrb	r3, [r7, #27]
 8009362:	4619      	mov	r1, r3
 8009364:	481d      	ldr	r0, [pc, #116]	; (80093dc <create_name+0x124>)
 8009366:	f7fe ffdc 	bl	8008322 <chk_chr>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <create_name+0xbc>
 8009370:	2306      	movs	r3, #6
 8009372:	e02c      	b.n	80093ce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009374:	7efb      	ldrb	r3, [r7, #27]
 8009376:	2b60      	cmp	r3, #96	; 0x60
 8009378:	d905      	bls.n	8009386 <create_name+0xce>
 800937a:	7efb      	ldrb	r3, [r7, #27]
 800937c:	2b7a      	cmp	r3, #122	; 0x7a
 800937e:	d802      	bhi.n	8009386 <create_name+0xce>
 8009380:	7efb      	ldrb	r3, [r7, #27]
 8009382:	3b20      	subs	r3, #32
 8009384:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	1c5a      	adds	r2, r3, #1
 800938a:	613a      	str	r2, [r7, #16]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	4413      	add	r3, r2
 8009390:	7efa      	ldrb	r2, [r7, #27]
 8009392:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009394:	e7a6      	b.n	80092e4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009396:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	441a      	add	r2, r3
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <create_name+0xf4>
 80093a8:	2306      	movs	r3, #6
 80093aa:	e010      	b.n	80093ce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2be5      	cmp	r3, #229	; 0xe5
 80093b2:	d102      	bne.n	80093ba <create_name+0x102>
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	2205      	movs	r2, #5
 80093b8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80093ba:	7efb      	ldrb	r3, [r7, #27]
 80093bc:	2b20      	cmp	r3, #32
 80093be:	d801      	bhi.n	80093c4 <create_name+0x10c>
 80093c0:	2204      	movs	r2, #4
 80093c2:	e000      	b.n	80093c6 <create_name+0x10e>
 80093c4:	2200      	movs	r2, #0
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	330b      	adds	r3, #11
 80093ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80093cc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3720      	adds	r7, #32
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	08012d60 	.word	0x08012d60
 80093dc:	08012c0c 	.word	0x08012c0c

080093e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80093f4:	e002      	b.n	80093fc <follow_path+0x1c>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	603b      	str	r3, [r7, #0]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	2b2f      	cmp	r3, #47	; 0x2f
 8009402:	d0f8      	beq.n	80093f6 <follow_path+0x16>
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2b5c      	cmp	r3, #92	; 0x5c
 800940a:	d0f4      	beq.n	80093f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	2200      	movs	r2, #0
 8009410:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	2b1f      	cmp	r3, #31
 8009418:	d80a      	bhi.n	8009430 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2280      	movs	r2, #128	; 0x80
 800941e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009422:	2100      	movs	r1, #0
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7ff fcf9 	bl	8008e1c <dir_sdi>
 800942a:	4603      	mov	r3, r0
 800942c:	75fb      	strb	r3, [r7, #23]
 800942e:	e043      	b.n	80094b8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009430:	463b      	mov	r3, r7
 8009432:	4619      	mov	r1, r3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7ff ff3f 	bl	80092b8 <create_name>
 800943a:	4603      	mov	r3, r0
 800943c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800943e:	7dfb      	ldrb	r3, [r7, #23]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d134      	bne.n	80094ae <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7ff feaf 	bl	80091a8 <dir_find>
 800944a:	4603      	mov	r3, r0
 800944c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009454:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009456:	7dfb      	ldrb	r3, [r7, #23]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00a      	beq.n	8009472 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800945c:	7dfb      	ldrb	r3, [r7, #23]
 800945e:	2b04      	cmp	r3, #4
 8009460:	d127      	bne.n	80094b2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009462:	7afb      	ldrb	r3, [r7, #11]
 8009464:	f003 0304 	and.w	r3, r3, #4
 8009468:	2b00      	cmp	r3, #0
 800946a:	d122      	bne.n	80094b2 <follow_path+0xd2>
 800946c:	2305      	movs	r3, #5
 800946e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009470:	e01f      	b.n	80094b2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009472:	7afb      	ldrb	r3, [r7, #11]
 8009474:	f003 0304 	and.w	r3, r3, #4
 8009478:	2b00      	cmp	r3, #0
 800947a:	d11c      	bne.n	80094b6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	799b      	ldrb	r3, [r3, #6]
 8009480:	f003 0310 	and.w	r3, r3, #16
 8009484:	2b00      	cmp	r3, #0
 8009486:	d102      	bne.n	800948e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009488:	2305      	movs	r3, #5
 800948a:	75fb      	strb	r3, [r7, #23]
 800948c:	e014      	b.n	80094b8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	695b      	ldr	r3, [r3, #20]
 8009498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949c:	4413      	add	r3, r2
 800949e:	4619      	mov	r1, r3
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f7ff fe42 	bl	800912a <ld_clust>
 80094a6:	4602      	mov	r2, r0
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80094ac:	e7c0      	b.n	8009430 <follow_path+0x50>
			if (res != FR_OK) break;
 80094ae:	bf00      	nop
 80094b0:	e002      	b.n	80094b8 <follow_path+0xd8>
				break;
 80094b2:	bf00      	nop
 80094b4:	e000      	b.n	80094b8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80094b6:	bf00      	nop
			}
		}
	}

	return res;
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3718      	adds	r7, #24
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b087      	sub	sp, #28
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80094ca:	f04f 33ff 	mov.w	r3, #4294967295
 80094ce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d031      	beq.n	800953c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	617b      	str	r3, [r7, #20]
 80094de:	e002      	b.n	80094e6 <get_ldnumber+0x24>
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	3301      	adds	r3, #1
 80094e4:	617b      	str	r3, [r7, #20]
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	2b20      	cmp	r3, #32
 80094ec:	d903      	bls.n	80094f6 <get_ldnumber+0x34>
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	2b3a      	cmp	r3, #58	; 0x3a
 80094f4:	d1f4      	bne.n	80094e0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	2b3a      	cmp	r3, #58	; 0x3a
 80094fc:	d11c      	bne.n	8009538 <get_ldnumber+0x76>
			tp = *path;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	1c5a      	adds	r2, r3, #1
 8009508:	60fa      	str	r2, [r7, #12]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	3b30      	subs	r3, #48	; 0x30
 800950e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b09      	cmp	r3, #9
 8009514:	d80e      	bhi.n	8009534 <get_ldnumber+0x72>
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	429a      	cmp	r2, r3
 800951c:	d10a      	bne.n	8009534 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d107      	bne.n	8009534 <get_ldnumber+0x72>
					vol = (int)i;
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	3301      	adds	r3, #1
 800952c:	617b      	str	r3, [r7, #20]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	e002      	b.n	800953e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009538:	2300      	movs	r3, #0
 800953a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800953c:	693b      	ldr	r3, [r7, #16]
}
 800953e:	4618      	mov	r0, r3
 8009540:	371c      	adds	r7, #28
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
	...

0800954c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	70da      	strb	r2, [r3, #3]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f04f 32ff 	mov.w	r2, #4294967295
 8009562:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7ff f8d8 	bl	800871c <move_window>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <check_fs+0x2a>
 8009572:	2304      	movs	r3, #4
 8009574:	e038      	b.n	80095e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	3334      	adds	r3, #52	; 0x34
 800957a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe fdea 	bl	8008158 <ld_word>
 8009584:	4603      	mov	r3, r0
 8009586:	461a      	mov	r2, r3
 8009588:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800958c:	429a      	cmp	r2, r3
 800958e:	d001      	beq.n	8009594 <check_fs+0x48>
 8009590:	2303      	movs	r3, #3
 8009592:	e029      	b.n	80095e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800959a:	2be9      	cmp	r3, #233	; 0xe9
 800959c:	d009      	beq.n	80095b2 <check_fs+0x66>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80095a4:	2beb      	cmp	r3, #235	; 0xeb
 80095a6:	d11e      	bne.n	80095e6 <check_fs+0x9a>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80095ae:	2b90      	cmp	r3, #144	; 0x90
 80095b0:	d119      	bne.n	80095e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	3334      	adds	r3, #52	; 0x34
 80095b6:	3336      	adds	r3, #54	; 0x36
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fe fde5 	bl	8008188 <ld_dword>
 80095be:	4603      	mov	r3, r0
 80095c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80095c4:	4a0a      	ldr	r2, [pc, #40]	; (80095f0 <check_fs+0xa4>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d101      	bne.n	80095ce <check_fs+0x82>
 80095ca:	2300      	movs	r3, #0
 80095cc:	e00c      	b.n	80095e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	3334      	adds	r3, #52	; 0x34
 80095d2:	3352      	adds	r3, #82	; 0x52
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fe fdd7 	bl	8008188 <ld_dword>
 80095da:	4603      	mov	r3, r0
 80095dc:	4a05      	ldr	r2, [pc, #20]	; (80095f4 <check_fs+0xa8>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d101      	bne.n	80095e6 <check_fs+0x9a>
 80095e2:	2300      	movs	r3, #0
 80095e4:	e000      	b.n	80095e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80095e6:	2302      	movs	r3, #2
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	00544146 	.word	0x00544146
 80095f4:	33544146 	.word	0x33544146

080095f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b096      	sub	sp, #88	; 0x58
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	4613      	mov	r3, r2
 8009604:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	2200      	movs	r2, #0
 800960a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f7ff ff58 	bl	80094c2 <get_ldnumber>
 8009612:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009616:	2b00      	cmp	r3, #0
 8009618:	da01      	bge.n	800961e <find_volume+0x26>
 800961a:	230b      	movs	r3, #11
 800961c:	e236      	b.n	8009a8c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800961e:	4aac      	ldr	r2, [pc, #688]	; (80098d0 <find_volume+0x2d8>)
 8009620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009626:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <find_volume+0x3a>
 800962e:	230c      	movs	r3, #12
 8009630:	e22c      	b.n	8009a8c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8009632:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009634:	f7fe fe90 	bl	8008358 <lock_fs>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <find_volume+0x4a>
 800963e:	230f      	movs	r3, #15
 8009640:	e224      	b.n	8009a8c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009646:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	f023 0301 	bic.w	r3, r3, #1
 800964e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d01a      	beq.n	800968e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965a:	785b      	ldrb	r3, [r3, #1]
 800965c:	4618      	mov	r0, r3
 800965e:	f7fe fcdd 	bl	800801c <disk_status>
 8009662:	4603      	mov	r3, r0
 8009664:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009668:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10c      	bne.n	800968e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009674:	79fb      	ldrb	r3, [r7, #7]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d007      	beq.n	800968a <find_volume+0x92>
 800967a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800967e:	f003 0304 	and.w	r3, r3, #4
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009686:	230a      	movs	r3, #10
 8009688:	e200      	b.n	8009a8c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800968a:	2300      	movs	r3, #0
 800968c:	e1fe      	b.n	8009a8c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800968e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009690:	2200      	movs	r2, #0
 8009692:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009696:	b2da      	uxtb	r2, r3
 8009698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800969c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969e:	785b      	ldrb	r3, [r3, #1]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fe fcd5 	bl	8008050 <disk_initialize>
 80096a6:	4603      	mov	r3, r0
 80096a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80096ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096b0:	f003 0301 	and.w	r3, r3, #1
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80096b8:	2303      	movs	r3, #3
 80096ba:	e1e7      	b.n	8009a8c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80096bc:	79fb      	ldrb	r3, [r7, #7]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d007      	beq.n	80096d2 <find_volume+0xda>
 80096c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096c6:	f003 0304 	and.w	r3, r3, #4
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80096ce:	230a      	movs	r3, #10
 80096d0:	e1dc      	b.n	8009a8c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80096d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096da:	f7ff ff37 	bl	800954c <check_fs>
 80096de:	4603      	mov	r3, r0
 80096e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80096e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d14b      	bne.n	8009784 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80096ec:	2300      	movs	r3, #0
 80096ee:	643b      	str	r3, [r7, #64]	; 0x40
 80096f0:	e01f      	b.n	8009732 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80096f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80096f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096fa:	011b      	lsls	r3, r3, #4
 80096fc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009700:	4413      	add	r3, r2
 8009702:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009706:	3304      	adds	r3, #4
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d006      	beq.n	800971c <find_volume+0x124>
 800970e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009710:	3308      	adds	r3, #8
 8009712:	4618      	mov	r0, r3
 8009714:	f7fe fd38 	bl	8008188 <ld_dword>
 8009718:	4602      	mov	r2, r0
 800971a:	e000      	b.n	800971e <find_volume+0x126>
 800971c:	2200      	movs	r2, #0
 800971e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009726:	440b      	add	r3, r1
 8009728:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800972c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800972e:	3301      	adds	r3, #1
 8009730:	643b      	str	r3, [r7, #64]	; 0x40
 8009732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009734:	2b03      	cmp	r3, #3
 8009736:	d9dc      	bls.n	80096f2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009738:	2300      	movs	r3, #0
 800973a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800973c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800973e:	2b00      	cmp	r3, #0
 8009740:	d002      	beq.n	8009748 <find_volume+0x150>
 8009742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009744:	3b01      	subs	r3, #1
 8009746:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009750:	4413      	add	r3, r2
 8009752:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009756:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800975a:	2b00      	cmp	r3, #0
 800975c:	d005      	beq.n	800976a <find_volume+0x172>
 800975e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009760:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009762:	f7ff fef3 	bl	800954c <check_fs>
 8009766:	4603      	mov	r3, r0
 8009768:	e000      	b.n	800976c <find_volume+0x174>
 800976a:	2303      	movs	r3, #3
 800976c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009774:	2b01      	cmp	r3, #1
 8009776:	d905      	bls.n	8009784 <find_volume+0x18c>
 8009778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800977a:	3301      	adds	r3, #1
 800977c:	643b      	str	r3, [r7, #64]	; 0x40
 800977e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009780:	2b03      	cmp	r3, #3
 8009782:	d9e1      	bls.n	8009748 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009784:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009788:	2b04      	cmp	r3, #4
 800978a:	d101      	bne.n	8009790 <find_volume+0x198>
 800978c:	2301      	movs	r3, #1
 800978e:	e17d      	b.n	8009a8c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009790:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009794:	2b01      	cmp	r3, #1
 8009796:	d901      	bls.n	800979c <find_volume+0x1a4>
 8009798:	230d      	movs	r3, #13
 800979a:	e177      	b.n	8009a8c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	3334      	adds	r3, #52	; 0x34
 80097a0:	330b      	adds	r3, #11
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fe fcd8 	bl	8008158 <ld_word>
 80097a8:	4603      	mov	r3, r0
 80097aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097ae:	d001      	beq.n	80097b4 <find_volume+0x1bc>
 80097b0:	230d      	movs	r3, #13
 80097b2:	e16b      	b.n	8009a8c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80097b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b6:	3334      	adds	r3, #52	; 0x34
 80097b8:	3316      	adds	r3, #22
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fe fccc 	bl	8008158 <ld_word>
 80097c0:	4603      	mov	r3, r0
 80097c2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80097c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d106      	bne.n	80097d8 <find_volume+0x1e0>
 80097ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097cc:	3334      	adds	r3, #52	; 0x34
 80097ce:	3324      	adds	r3, #36	; 0x24
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fe fcd9 	bl	8008188 <ld_dword>
 80097d6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097dc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80097de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80097e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80097e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ea:	789b      	ldrb	r3, [r3, #2]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d005      	beq.n	80097fc <find_volume+0x204>
 80097f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f2:	789b      	ldrb	r3, [r3, #2]
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d001      	beq.n	80097fc <find_volume+0x204>
 80097f8:	230d      	movs	r3, #13
 80097fa:	e147      	b.n	8009a8c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80097fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fe:	789b      	ldrb	r3, [r3, #2]
 8009800:	461a      	mov	r2, r3
 8009802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009804:	fb02 f303 	mul.w	r3, r2, r3
 8009808:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800980a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009810:	b29a      	uxth	r2, r3
 8009812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009814:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009818:	895b      	ldrh	r3, [r3, #10]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d008      	beq.n	8009830 <find_volume+0x238>
 800981e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009820:	895b      	ldrh	r3, [r3, #10]
 8009822:	461a      	mov	r2, r3
 8009824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009826:	895b      	ldrh	r3, [r3, #10]
 8009828:	3b01      	subs	r3, #1
 800982a:	4013      	ands	r3, r2
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <find_volume+0x23c>
 8009830:	230d      	movs	r3, #13
 8009832:	e12b      	b.n	8009a8c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009836:	3334      	adds	r3, #52	; 0x34
 8009838:	3311      	adds	r3, #17
 800983a:	4618      	mov	r0, r3
 800983c:	f7fe fc8c 	bl	8008158 <ld_word>
 8009840:	4603      	mov	r3, r0
 8009842:	461a      	mov	r2, r3
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984a:	891b      	ldrh	r3, [r3, #8]
 800984c:	f003 030f 	and.w	r3, r3, #15
 8009850:	b29b      	uxth	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <find_volume+0x262>
 8009856:	230d      	movs	r3, #13
 8009858:	e118      	b.n	8009a8c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800985a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985c:	3334      	adds	r3, #52	; 0x34
 800985e:	3313      	adds	r3, #19
 8009860:	4618      	mov	r0, r3
 8009862:	f7fe fc79 	bl	8008158 <ld_word>
 8009866:	4603      	mov	r3, r0
 8009868:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800986a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800986c:	2b00      	cmp	r3, #0
 800986e:	d106      	bne.n	800987e <find_volume+0x286>
 8009870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009872:	3334      	adds	r3, #52	; 0x34
 8009874:	3320      	adds	r3, #32
 8009876:	4618      	mov	r0, r3
 8009878:	f7fe fc86 	bl	8008188 <ld_dword>
 800987c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800987e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009880:	3334      	adds	r3, #52	; 0x34
 8009882:	330e      	adds	r3, #14
 8009884:	4618      	mov	r0, r3
 8009886:	f7fe fc67 	bl	8008158 <ld_word>
 800988a:	4603      	mov	r3, r0
 800988c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800988e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009890:	2b00      	cmp	r3, #0
 8009892:	d101      	bne.n	8009898 <find_volume+0x2a0>
 8009894:	230d      	movs	r3, #13
 8009896:	e0f9      	b.n	8009a8c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009898:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800989a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800989c:	4413      	add	r3, r2
 800989e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098a0:	8912      	ldrh	r2, [r2, #8]
 80098a2:	0912      	lsrs	r2, r2, #4
 80098a4:	b292      	uxth	r2, r2
 80098a6:	4413      	add	r3, r2
 80098a8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80098aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d201      	bcs.n	80098b6 <find_volume+0x2be>
 80098b2:	230d      	movs	r3, #13
 80098b4:	e0ea      	b.n	8009a8c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80098b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098be:	8952      	ldrh	r2, [r2, #10]
 80098c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80098c4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d103      	bne.n	80098d4 <find_volume+0x2dc>
 80098cc:	230d      	movs	r3, #13
 80098ce:	e0dd      	b.n	8009a8c <find_volume+0x494>
 80098d0:	20000338 	.word	0x20000338
		fmt = FS_FAT32;
 80098d4:	2303      	movs	r3, #3
 80098d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d802      	bhi.n	80098ea <find_volume+0x2f2>
 80098e4:	2302      	movs	r3, #2
 80098e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	f640 72f5 	movw	r2, #4085	; 0xff5
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d802      	bhi.n	80098fa <find_volume+0x302>
 80098f4:	2301      	movs	r3, #1
 80098f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	1c9a      	adds	r2, r3, #2
 80098fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009900:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009904:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009906:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009908:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800990a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800990c:	441a      	add	r2, r3
 800990e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009910:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009912:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	441a      	add	r2, r3
 8009918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800991c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009920:	2b03      	cmp	r3, #3
 8009922:	d11e      	bne.n	8009962 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009926:	3334      	adds	r3, #52	; 0x34
 8009928:	332a      	adds	r3, #42	; 0x2a
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe fc14 	bl	8008158 <ld_word>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d001      	beq.n	800993a <find_volume+0x342>
 8009936:	230d      	movs	r3, #13
 8009938:	e0a8      	b.n	8009a8c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800993a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993c:	891b      	ldrh	r3, [r3, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <find_volume+0x34e>
 8009942:	230d      	movs	r3, #13
 8009944:	e0a2      	b.n	8009a8c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009948:	3334      	adds	r3, #52	; 0x34
 800994a:	332c      	adds	r3, #44	; 0x2c
 800994c:	4618      	mov	r0, r3
 800994e:	f7fe fc1b 	bl	8008188 <ld_dword>
 8009952:	4602      	mov	r2, r0
 8009954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009956:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	647b      	str	r3, [r7, #68]	; 0x44
 8009960:	e01f      	b.n	80099a2 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009964:	891b      	ldrh	r3, [r3, #8]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <find_volume+0x376>
 800996a:	230d      	movs	r3, #13
 800996c:	e08e      	b.n	8009a8c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800996e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009974:	441a      	add	r2, r3
 8009976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009978:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800997a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800997e:	2b02      	cmp	r3, #2
 8009980:	d103      	bne.n	800998a <find_volume+0x392>
 8009982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	005b      	lsls	r3, r3, #1
 8009988:	e00a      	b.n	80099a0 <find_volume+0x3a8>
 800998a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998c:	699a      	ldr	r2, [r3, #24]
 800998e:	4613      	mov	r3, r2
 8009990:	005b      	lsls	r3, r3, #1
 8009992:	4413      	add	r3, r2
 8009994:	085a      	lsrs	r2, r3, #1
 8009996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009998:	699b      	ldr	r3, [r3, #24]
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80099a0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80099a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a4:	69da      	ldr	r2, [r3, #28]
 80099a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80099ac:	0a5b      	lsrs	r3, r3, #9
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d201      	bcs.n	80099b6 <find_volume+0x3be>
 80099b2:	230d      	movs	r3, #13
 80099b4:	e06a      	b.n	8009a8c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80099b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b8:	f04f 32ff 	mov.w	r2, #4294967295
 80099bc:	615a      	str	r2, [r3, #20]
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	695a      	ldr	r2, [r3, #20]
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80099c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c8:	2280      	movs	r2, #128	; 0x80
 80099ca:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80099cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099d0:	2b03      	cmp	r3, #3
 80099d2:	d149      	bne.n	8009a68 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80099d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d6:	3334      	adds	r3, #52	; 0x34
 80099d8:	3330      	adds	r3, #48	; 0x30
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fe fbbc 	bl	8008158 <ld_word>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d140      	bne.n	8009a68 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80099e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099e8:	3301      	adds	r3, #1
 80099ea:	4619      	mov	r1, r3
 80099ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099ee:	f7fe fe95 	bl	800871c <move_window>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d137      	bne.n	8009a68 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80099f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fa:	2200      	movs	r2, #0
 80099fc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80099fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a00:	3334      	adds	r3, #52	; 0x34
 8009a02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe fba6 	bl	8008158 <ld_word>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d127      	bne.n	8009a68 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1a:	3334      	adds	r3, #52	; 0x34
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe fbb3 	bl	8008188 <ld_dword>
 8009a22:	4603      	mov	r3, r0
 8009a24:	4a1b      	ldr	r2, [pc, #108]	; (8009a94 <find_volume+0x49c>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d11e      	bne.n	8009a68 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2c:	3334      	adds	r3, #52	; 0x34
 8009a2e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fe fba8 	bl	8008188 <ld_dword>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	4a17      	ldr	r2, [pc, #92]	; (8009a98 <find_volume+0x4a0>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d113      	bne.n	8009a68 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a42:	3334      	adds	r3, #52	; 0x34
 8009a44:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7fe fb9d 	bl	8008188 <ld_dword>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a52:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a56:	3334      	adds	r3, #52	; 0x34
 8009a58:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7fe fb93 	bl	8008188 <ld_dword>
 8009a62:	4602      	mov	r2, r0
 8009a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a66:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009a6e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009a70:	4b0a      	ldr	r3, [pc, #40]	; (8009a9c <find_volume+0x4a4>)
 8009a72:	881b      	ldrh	r3, [r3, #0]
 8009a74:	3301      	adds	r3, #1
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	4b08      	ldr	r3, [pc, #32]	; (8009a9c <find_volume+0x4a4>)
 8009a7a:	801a      	strh	r2, [r3, #0]
 8009a7c:	4b07      	ldr	r3, [pc, #28]	; (8009a9c <find_volume+0x4a4>)
 8009a7e:	881a      	ldrh	r2, [r3, #0]
 8009a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a82:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009a84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a86:	f7fe fde1 	bl	800864c <clear_lock>
#endif
	return FR_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3758      	adds	r7, #88	; 0x58
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	41615252 	.word	0x41615252
 8009a98:	61417272 	.word	0x61417272
 8009a9c:	2000033c 	.word	0x2000033c

08009aa0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009aaa:	2309      	movs	r3, #9
 8009aac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d02e      	beq.n	8009b12 <validate+0x72>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d02a      	beq.n	8009b12 <validate+0x72>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d025      	beq.n	8009b12 <validate+0x72>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	889a      	ldrh	r2, [r3, #4]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	88db      	ldrh	r3, [r3, #6]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d11e      	bne.n	8009b12 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fe fc3d 	bl	8008358 <lock_fs>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d014      	beq.n	8009b0e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	785b      	ldrb	r3, [r3, #1]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe fa96 	bl	800801c <disk_status>
 8009af0:	4603      	mov	r3, r0
 8009af2:	f003 0301 	and.w	r3, r3, #1
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d102      	bne.n	8009b00 <validate+0x60>
				res = FR_OK;
 8009afa:	2300      	movs	r3, #0
 8009afc:	73fb      	strb	r3, [r7, #15]
 8009afe:	e008      	b.n	8009b12 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2100      	movs	r1, #0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fe fc3c 	bl	8008384 <unlock_fs>
 8009b0c:	e001      	b.n	8009b12 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8009b0e:	230f      	movs	r3, #15
 8009b10:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d102      	bne.n	8009b1e <validate+0x7e>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	e000      	b.n	8009b20 <validate+0x80>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	6013      	str	r3, [r2, #0]
	return res;
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
	...

08009b30 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b088      	sub	sp, #32
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009b42:	f107 0310 	add.w	r3, r7, #16
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff fcbb 	bl	80094c2 <get_ldnumber>
 8009b4c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	da01      	bge.n	8009b58 <f_mount+0x28>
 8009b54:	230b      	movs	r3, #11
 8009b56:	e048      	b.n	8009bea <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009b58:	4a26      	ldr	r2, [pc, #152]	; (8009bf4 <f_mount+0xc4>)
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b60:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00f      	beq.n	8009b88 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009b68:	69b8      	ldr	r0, [r7, #24]
 8009b6a:	f7fe fd6f 	bl	800864c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 ff3e 	bl	800a9f4 <ff_del_syncobj>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d101      	bne.n	8009b82 <f_mount+0x52>
 8009b7e:	2302      	movs	r3, #2
 8009b80:	e033      	b.n	8009bea <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	2200      	movs	r2, #0
 8009b86:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00f      	beq.n	8009bae <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2200      	movs	r2, #0
 8009b92:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	330c      	adds	r3, #12
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	f000 ff0d 	bl	800a9be <ff_cre_syncobj>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d101      	bne.n	8009bae <f_mount+0x7e>
 8009baa:	2302      	movs	r3, #2
 8009bac:	e01d      	b.n	8009bea <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	4910      	ldr	r1, [pc, #64]	; (8009bf4 <f_mount+0xc4>)
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <f_mount+0x94>
 8009bbe:	79fb      	ldrb	r3, [r7, #7]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d001      	beq.n	8009bc8 <f_mount+0x98>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	e010      	b.n	8009bea <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009bc8:	f107 010c 	add.w	r1, r7, #12
 8009bcc:	f107 0308 	add.w	r3, r7, #8
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7ff fd10 	bl	80095f8 <find_volume>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	7dfa      	ldrb	r2, [r7, #23]
 8009be0:	4611      	mov	r1, r2
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fe fbce 	bl	8008384 <unlock_fs>
 8009be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3720      	adds	r7, #32
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20000338 	.word	0x20000338

08009bf8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b098      	sub	sp, #96	; 0x60
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	4613      	mov	r3, r2
 8009c04:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d101      	bne.n	8009c10 <f_open+0x18>
 8009c0c:	2309      	movs	r3, #9
 8009c0e:	e1b4      	b.n	8009f7a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009c10:	79fb      	ldrb	r3, [r7, #7]
 8009c12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c16:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009c18:	79fa      	ldrb	r2, [r7, #7]
 8009c1a:	f107 0110 	add.w	r1, r7, #16
 8009c1e:	f107 0308 	add.w	r3, r7, #8
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff fce8 	bl	80095f8 <find_volume>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009c2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f040 8191 	bne.w	8009f5a <f_open+0x362>
		dj.obj.fs = fs;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	f107 0314 	add.w	r3, r7, #20
 8009c42:	4611      	mov	r1, r2
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7ff fbcb 	bl	80093e0 <follow_path>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009c50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d11a      	bne.n	8009c8e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009c58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c5c:	b25b      	sxtb	r3, r3
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	da03      	bge.n	8009c6a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009c62:	2306      	movs	r3, #6
 8009c64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c68:	e011      	b.n	8009c8e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009c6a:	79fb      	ldrb	r3, [r7, #7]
 8009c6c:	f023 0301 	bic.w	r3, r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	bf14      	ite	ne
 8009c74:	2301      	movne	r3, #1
 8009c76:	2300      	moveq	r3, #0
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	f107 0314 	add.w	r3, r7, #20
 8009c80:	4611      	mov	r1, r2
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fe fb9a 	bl	80083bc <chk_lock>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009c8e:	79fb      	ldrb	r3, [r7, #7]
 8009c90:	f003 031c 	and.w	r3, r3, #28
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d07f      	beq.n	8009d98 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009c98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d017      	beq.n	8009cd0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009ca0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ca4:	2b04      	cmp	r3, #4
 8009ca6:	d10e      	bne.n	8009cc6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009ca8:	f7fe fbe4 	bl	8008474 <enq_lock>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d006      	beq.n	8009cc0 <f_open+0xc8>
 8009cb2:	f107 0314 	add.w	r3, r7, #20
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7ff facb 	bl	8009252 <dir_register>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	e000      	b.n	8009cc2 <f_open+0xca>
 8009cc0:	2312      	movs	r3, #18
 8009cc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	f043 0308 	orr.w	r3, r3, #8
 8009ccc:	71fb      	strb	r3, [r7, #7]
 8009cce:	e010      	b.n	8009cf2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009cd0:	7ebb      	ldrb	r3, [r7, #26]
 8009cd2:	f003 0311 	and.w	r3, r3, #17
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <f_open+0xea>
					res = FR_DENIED;
 8009cda:	2307      	movs	r3, #7
 8009cdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009ce0:	e007      	b.n	8009cf2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009ce2:	79fb      	ldrb	r3, [r7, #7]
 8009ce4:	f003 0304 	and.w	r3, r3, #4
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d002      	beq.n	8009cf2 <f_open+0xfa>
 8009cec:	2308      	movs	r3, #8
 8009cee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009cf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d168      	bne.n	8009dcc <f_open+0x1d4>
 8009cfa:	79fb      	ldrb	r3, [r7, #7]
 8009cfc:	f003 0308 	and.w	r3, r3, #8
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d063      	beq.n	8009dcc <f_open+0x1d4>
				dw = GET_FATTIME();
 8009d04:	f7fe f92a 	bl	8007f5c <get_fattime>
 8009d08:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d0c:	330e      	adds	r3, #14
 8009d0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fe fa77 	bl	8008204 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d18:	3316      	adds	r3, #22
 8009d1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fe fa71 	bl	8008204 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d24:	330b      	adds	r3, #11
 8009d26:	2220      	movs	r2, #32
 8009d28:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d2e:	4611      	mov	r1, r2
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7ff f9fa 	bl	800912a <ld_clust>
 8009d36:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7ff fa12 	bl	8009168 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d46:	331c      	adds	r3, #28
 8009d48:	2100      	movs	r1, #0
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fe fa5a 	bl	8008204 <st_dword>
					fs->wflag = 1;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	2201      	movs	r2, #1
 8009d54:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d037      	beq.n	8009dcc <f_open+0x1d4>
						dw = fs->winsect;
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d60:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009d62:	f107 0314 	add.w	r3, r7, #20
 8009d66:	2200      	movs	r2, #0
 8009d68:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fe ff25 	bl	8008bba <remove_chain>
 8009d70:	4603      	mov	r3, r0
 8009d72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009d76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d126      	bne.n	8009dcc <f_open+0x1d4>
							res = move_window(fs, dw);
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe fcca 	bl	800871c <move_window>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d92:	3a01      	subs	r2, #1
 8009d94:	611a      	str	r2, [r3, #16]
 8009d96:	e019      	b.n	8009dcc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009d98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d115      	bne.n	8009dcc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009da0:	7ebb      	ldrb	r3, [r7, #26]
 8009da2:	f003 0310 	and.w	r3, r3, #16
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d003      	beq.n	8009db2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009daa:	2304      	movs	r3, #4
 8009dac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009db0:	e00c      	b.n	8009dcc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009db2:	79fb      	ldrb	r3, [r7, #7]
 8009db4:	f003 0302 	and.w	r3, r3, #2
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d007      	beq.n	8009dcc <f_open+0x1d4>
 8009dbc:	7ebb      	ldrb	r3, [r7, #26]
 8009dbe:	f003 0301 	and.w	r3, r3, #1
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d002      	beq.n	8009dcc <f_open+0x1d4>
						res = FR_DENIED;
 8009dc6:	2307      	movs	r3, #7
 8009dc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009dcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d128      	bne.n	8009e26 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009dd4:	79fb      	ldrb	r3, [r7, #7]
 8009dd6:	f003 0308 	and.w	r3, r3, #8
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d003      	beq.n	8009de6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009dde:	79fb      	ldrb	r3, [r7, #7]
 8009de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009df4:	79fb      	ldrb	r3, [r7, #7]
 8009df6:	f023 0301 	bic.w	r3, r3, #1
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	bf14      	ite	ne
 8009dfe:	2301      	movne	r3, #1
 8009e00:	2300      	moveq	r3, #0
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	461a      	mov	r2, r3
 8009e06:	f107 0314 	add.w	r3, r7, #20
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7fe fb53 	bl	80084b8 <inc_lock>
 8009e12:	4602      	mov	r2, r0
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d102      	bne.n	8009e26 <f_open+0x22e>
 8009e20:	2302      	movs	r3, #2
 8009e22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009e26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f040 8095 	bne.w	8009f5a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e34:	4611      	mov	r1, r2
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7ff f977 	bl	800912a <ld_clust>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e44:	331c      	adds	r3, #28
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fe f99e 	bl	8008188 <ld_dword>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	88da      	ldrh	r2, [r3, #6]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	79fa      	ldrb	r2, [r7, #7]
 8009e6a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	3330      	adds	r3, #48	; 0x30
 8009e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e86:	2100      	movs	r1, #0
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fe fa08 	bl	800829e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009e8e:	79fb      	ldrb	r3, [r7, #7]
 8009e90:	f003 0320 	and.w	r3, r3, #32
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d060      	beq.n	8009f5a <f_open+0x362>
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d05c      	beq.n	8009f5a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	68da      	ldr	r2, [r3, #12]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	895b      	ldrh	r3, [r3, #10]
 8009eac:	025b      	lsls	r3, r3, #9
 8009eae:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	657b      	str	r3, [r7, #84]	; 0x54
 8009ebc:	e016      	b.n	8009eec <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fe fce5 	bl	8008892 <get_fat>
 8009ec8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d802      	bhi.n	8009ed6 <f_open+0x2de>
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009ed6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009edc:	d102      	bne.n	8009ee4 <f_open+0x2ec>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009ee4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	657b      	str	r3, [r7, #84]	; 0x54
 8009eec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d103      	bne.n	8009efc <f_open+0x304>
 8009ef4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d8e0      	bhi.n	8009ebe <f_open+0x2c6>
				}
				fp->clust = clst;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f00:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009f02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d127      	bne.n	8009f5a <f_open+0x362>
 8009f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d022      	beq.n	8009f5a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fe fc9b 	bl	8008854 <clust2sect>
 8009f1e:	6478      	str	r0, [r7, #68]	; 0x44
 8009f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d103      	bne.n	8009f2e <f_open+0x336>
						res = FR_INT_ERR;
 8009f26:	2302      	movs	r3, #2
 8009f28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009f2c:	e015      	b.n	8009f5a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f30:	0a5a      	lsrs	r2, r3, #9
 8009f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f34:	441a      	add	r2, r3
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	7858      	ldrb	r0, [r3, #1]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6a1a      	ldr	r2, [r3, #32]
 8009f48:	2301      	movs	r3, #1
 8009f4a:	f7fe f8a7 	bl	800809c <disk_read>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d002      	beq.n	8009f5a <f_open+0x362>
 8009f54:	2301      	movs	r3, #1
 8009f56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d002      	beq.n	8009f68 <f_open+0x370>
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8009f6e:	4611      	mov	r1, r2
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fe fa07 	bl	8008384 <unlock_fs>
 8009f76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3760      	adds	r7, #96	; 0x60
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b08e      	sub	sp, #56	; 0x38
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	60f8      	str	r0, [r7, #12]
 8009f8a:	60b9      	str	r1, [r7, #8]
 8009f8c:	607a      	str	r2, [r7, #4]
 8009f8e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2200      	movs	r2, #0
 8009f98:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f107 0214 	add.w	r2, r7, #20
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7ff fd7c 	bl	8009aa0 <validate>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009fae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d107      	bne.n	8009fc6 <f_read+0x44>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	7d5b      	ldrb	r3, [r3, #21]
 8009fba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009fbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d009      	beq.n	8009fda <f_read+0x58>
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009fcc:	4611      	mov	r1, r2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fe f9d8 	bl	8008384 <unlock_fs>
 8009fd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009fd8:	e13d      	b.n	800a256 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	7d1b      	ldrb	r3, [r3, #20]
 8009fde:	f003 0301 	and.w	r3, r3, #1
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d106      	bne.n	8009ff4 <f_read+0x72>
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2107      	movs	r1, #7
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fe f9ca 	bl	8008384 <unlock_fs>
 8009ff0:	2307      	movs	r3, #7
 8009ff2:	e130      	b.n	800a256 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	68da      	ldr	r2, [r3, #12]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	429a      	cmp	r2, r3
 800a006:	f240 811c 	bls.w	800a242 <f_read+0x2c0>
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a00e:	e118      	b.n	800a242 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f040 80e4 	bne.w	800a1e6 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	0a5b      	lsrs	r3, r3, #9
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	8952      	ldrh	r2, [r2, #10]
 800a028:	3a01      	subs	r2, #1
 800a02a:	4013      	ands	r3, r2
 800a02c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d139      	bne.n	800a0a8 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d103      	bne.n	800a044 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	633b      	str	r3, [r7, #48]	; 0x30
 800a042:	e013      	b.n	800a06c <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d007      	beq.n	800a05c <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	4619      	mov	r1, r3
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f7fe feae 	bl	8008db4 <clmt_clust>
 800a058:	6338      	str	r0, [r7, #48]	; 0x30
 800a05a:	e007      	b.n	800a06c <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	69db      	ldr	r3, [r3, #28]
 800a062:	4619      	mov	r1, r3
 800a064:	4610      	mov	r0, r2
 800a066:	f7fe fc14 	bl	8008892 <get_fat>
 800a06a:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d809      	bhi.n	800a086 <f_read+0x104>
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2202      	movs	r2, #2
 800a076:	755a      	strb	r2, [r3, #21]
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2102      	movs	r1, #2
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fe f981 	bl	8008384 <unlock_fs>
 800a082:	2302      	movs	r3, #2
 800a084:	e0e7      	b.n	800a256 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08c:	d109      	bne.n	800a0a2 <f_read+0x120>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2201      	movs	r2, #1
 800a092:	755a      	strb	r2, [r3, #21]
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	2101      	movs	r1, #1
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fe f973 	bl	8008384 <unlock_fs>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e0d9      	b.n	800a256 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0a6:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	f7fe fbcf 	bl	8008854 <clust2sect>
 800a0b6:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d109      	bne.n	800a0d2 <f_read+0x150>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	755a      	strb	r2, [r3, #21]
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2102      	movs	r1, #2
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7fe f95b 	bl	8008384 <unlock_fs>
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	e0c1      	b.n	800a256 <f_read+0x2d4>
			sect += csect;
 800a0d2:	69ba      	ldr	r2, [r7, #24]
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	0a5b      	lsrs	r3, r3, #9
 800a0de:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d03e      	beq.n	800a164 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a0e6:	69fa      	ldr	r2, [r7, #28]
 800a0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ea:	4413      	add	r3, r2
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	8952      	ldrh	r2, [r2, #10]
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d905      	bls.n	800a100 <f_read+0x17e>
					cc = fs->csize - csect;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	895b      	ldrh	r3, [r3, #10]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	7858      	ldrb	r0, [r3, #1]
 800a104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a106:	69ba      	ldr	r2, [r7, #24]
 800a108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a10a:	f7fd ffc7 	bl	800809c <disk_read>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d009      	beq.n	800a128 <f_read+0x1a6>
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2201      	movs	r2, #1
 800a118:	755a      	strb	r2, [r3, #21]
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	2101      	movs	r1, #1
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fe f930 	bl	8008384 <unlock_fs>
 800a124:	2301      	movs	r3, #1
 800a126:	e096      	b.n	800a256 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	7d1b      	ldrb	r3, [r3, #20]
 800a12c:	b25b      	sxtb	r3, r3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	da14      	bge.n	800a15c <f_read+0x1da>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6a1a      	ldr	r2, [r3, #32]
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d90d      	bls.n	800a15c <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6a1a      	ldr	r2, [r3, #32]
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	025b      	lsls	r3, r3, #9
 800a14a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a14c:	18d0      	adds	r0, r2, r3
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3330      	adds	r3, #48	; 0x30
 800a152:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a156:	4619      	mov	r1, r3
 800a158:	f7fe f880 	bl	800825c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15e:	025b      	lsls	r3, r3, #9
 800a160:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a162:	e05a      	b.n	800a21a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6a1b      	ldr	r3, [r3, #32]
 800a168:	69ba      	ldr	r2, [r7, #24]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d038      	beq.n	800a1e0 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	7d1b      	ldrb	r3, [r3, #20]
 800a172:	b25b      	sxtb	r3, r3
 800a174:	2b00      	cmp	r3, #0
 800a176:	da1d      	bge.n	800a1b4 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	7858      	ldrb	r0, [r3, #1]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6a1a      	ldr	r2, [r3, #32]
 800a186:	2301      	movs	r3, #1
 800a188:	f7fd ffa8 	bl	80080dc <disk_write>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d009      	beq.n	800a1a6 <f_read+0x224>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2201      	movs	r2, #1
 800a196:	755a      	strb	r2, [r3, #21]
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	2101      	movs	r1, #1
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe f8f1 	bl	8008384 <unlock_fs>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e057      	b.n	800a256 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	7d1b      	ldrb	r3, [r3, #20]
 800a1aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ae:	b2da      	uxtb	r2, r3
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	7858      	ldrb	r0, [r3, #1]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1be:	2301      	movs	r3, #1
 800a1c0:	69ba      	ldr	r2, [r7, #24]
 800a1c2:	f7fd ff6b 	bl	800809c <disk_read>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d009      	beq.n	800a1e0 <f_read+0x25e>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	755a      	strb	r2, [r3, #21]
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fe f8d4 	bl	8008384 <unlock_fs>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e03a      	b.n	800a256 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	69ba      	ldr	r2, [r7, #24]
 800a1e4:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ee:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a1f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d901      	bls.n	800a200 <f_read+0x27e>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a20e:	4413      	add	r3, r2
 800a210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a212:	4619      	mov	r1, r3
 800a214:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a216:	f7fe f821 	bl	800825c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a21a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21e:	4413      	add	r3, r2
 800a220:	627b      	str	r3, [r7, #36]	; 0x24
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	699a      	ldr	r2, [r3, #24]
 800a226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a228:	441a      	add	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	619a      	str	r2, [r3, #24]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a234:	441a      	add	r2, r3
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	f47f aee3 	bne.w	800a010 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	2100      	movs	r1, #0
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fe f898 	bl	8008384 <unlock_fs>
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3738      	adds	r7, #56	; 0x38
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b08c      	sub	sp, #48	; 0x30
 800a262:	af00      	add	r7, sp, #0
 800a264:	60f8      	str	r0, [r7, #12]
 800a266:	60b9      	str	r1, [r7, #8]
 800a268:	607a      	str	r2, [r7, #4]
 800a26a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	2200      	movs	r2, #0
 800a274:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f107 0210 	add.w	r2, r7, #16
 800a27c:	4611      	mov	r1, r2
 800a27e:	4618      	mov	r0, r3
 800a280:	f7ff fc0e 	bl	8009aa0 <validate>
 800a284:	4603      	mov	r3, r0
 800a286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a28a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d107      	bne.n	800a2a2 <f_write+0x44>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	7d5b      	ldrb	r3, [r3, #21]
 800a296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a29a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d009      	beq.n	800a2b6 <f_write+0x58>
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fe f86a 	bl	8008384 <unlock_fs>
 800a2b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2b4:	e173      	b.n	800a59e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	7d1b      	ldrb	r3, [r3, #20]
 800a2ba:	f003 0302 	and.w	r3, r3, #2
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d106      	bne.n	800a2d0 <f_write+0x72>
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	2107      	movs	r1, #7
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fe f85c 	bl	8008384 <unlock_fs>
 800a2cc:	2307      	movs	r3, #7
 800a2ce:	e166      	b.n	800a59e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	699a      	ldr	r2, [r3, #24]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	441a      	add	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	f080 814b 	bcs.w	800a578 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	43db      	mvns	r3, r3
 800a2e8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a2ea:	e145      	b.n	800a578 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f040 8101 	bne.w	800a4fc <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	699b      	ldr	r3, [r3, #24]
 800a2fe:	0a5b      	lsrs	r3, r3, #9
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	8952      	ldrh	r2, [r2, #10]
 800a304:	3a01      	subs	r2, #1
 800a306:	4013      	ands	r3, r2
 800a308:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d14d      	bne.n	800a3ac <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10c      	bne.n	800a332 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a320:	2b00      	cmp	r3, #0
 800a322:	d11a      	bne.n	800a35a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2100      	movs	r1, #0
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fe fcab 	bl	8008c84 <create_chain>
 800a32e:	62b8      	str	r0, [r7, #40]	; 0x28
 800a330:	e013      	b.n	800a35a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a336:	2b00      	cmp	r3, #0
 800a338:	d007      	beq.n	800a34a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	699b      	ldr	r3, [r3, #24]
 800a33e:	4619      	mov	r1, r3
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f7fe fd37 	bl	8008db4 <clmt_clust>
 800a346:	62b8      	str	r0, [r7, #40]	; 0x28
 800a348:	e007      	b.n	800a35a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	69db      	ldr	r3, [r3, #28]
 800a350:	4619      	mov	r1, r3
 800a352:	4610      	mov	r0, r2
 800a354:	f7fe fc96 	bl	8008c84 <create_chain>
 800a358:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 8110 	beq.w	800a582 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a364:	2b01      	cmp	r3, #1
 800a366:	d109      	bne.n	800a37c <f_write+0x11e>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2202      	movs	r2, #2
 800a36c:	755a      	strb	r2, [r3, #21]
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	2102      	movs	r1, #2
 800a372:	4618      	mov	r0, r3
 800a374:	f7fe f806 	bl	8008384 <unlock_fs>
 800a378:	2302      	movs	r3, #2
 800a37a:	e110      	b.n	800a59e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a382:	d109      	bne.n	800a398 <f_write+0x13a>
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2201      	movs	r2, #1
 800a388:	755a      	strb	r2, [r3, #21]
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	2101      	movs	r1, #1
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fd fff8 	bl	8008384 <unlock_fs>
 800a394:	2301      	movs	r3, #1
 800a396:	e102      	b.n	800a59e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a39c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d102      	bne.n	800a3ac <f_write+0x14e>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3aa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	7d1b      	ldrb	r3, [r3, #20]
 800a3b0:	b25b      	sxtb	r3, r3
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	da1d      	bge.n	800a3f2 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	7858      	ldrb	r0, [r3, #1]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6a1a      	ldr	r2, [r3, #32]
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	f7fd fe89 	bl	80080dc <disk_write>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d009      	beq.n	800a3e4 <f_write+0x186>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	755a      	strb	r2, [r3, #21]
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	2101      	movs	r1, #1
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fd ffd2 	bl	8008384 <unlock_fs>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e0dc      	b.n	800a59e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	7d1b      	ldrb	r3, [r3, #20]
 800a3e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	69db      	ldr	r3, [r3, #28]
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	f7fe fa2a 	bl	8008854 <clust2sect>
 800a400:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d109      	bne.n	800a41c <f_write+0x1be>
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2202      	movs	r2, #2
 800a40c:	755a      	strb	r2, [r3, #21]
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	2102      	movs	r1, #2
 800a412:	4618      	mov	r0, r3
 800a414:	f7fd ffb6 	bl	8008384 <unlock_fs>
 800a418:	2302      	movs	r3, #2
 800a41a:	e0c0      	b.n	800a59e <f_write+0x340>
			sect += csect;
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	4413      	add	r3, r2
 800a422:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	0a5b      	lsrs	r3, r3, #9
 800a428:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a42a:	6a3b      	ldr	r3, [r7, #32]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d041      	beq.n	800a4b4 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a430:	69ba      	ldr	r2, [r7, #24]
 800a432:	6a3b      	ldr	r3, [r7, #32]
 800a434:	4413      	add	r3, r2
 800a436:	693a      	ldr	r2, [r7, #16]
 800a438:	8952      	ldrh	r2, [r2, #10]
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d905      	bls.n	800a44a <f_write+0x1ec>
					cc = fs->csize - csect;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	895b      	ldrh	r3, [r3, #10]
 800a442:	461a      	mov	r2, r3
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	7858      	ldrb	r0, [r3, #1]
 800a44e:	6a3b      	ldr	r3, [r7, #32]
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	69f9      	ldr	r1, [r7, #28]
 800a454:	f7fd fe42 	bl	80080dc <disk_write>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d009      	beq.n	800a472 <f_write+0x214>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2201      	movs	r2, #1
 800a462:	755a      	strb	r2, [r3, #21]
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	2101      	movs	r1, #1
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fd ff8b 	bl	8008384 <unlock_fs>
 800a46e:	2301      	movs	r3, #1
 800a470:	e095      	b.n	800a59e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6a1a      	ldr	r2, [r3, #32]
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	1ad3      	subs	r3, r2, r3
 800a47a:	6a3a      	ldr	r2, [r7, #32]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d915      	bls.n	800a4ac <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	6a1a      	ldr	r2, [r3, #32]
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	025b      	lsls	r3, r3, #9
 800a490:	69fa      	ldr	r2, [r7, #28]
 800a492:	4413      	add	r3, r2
 800a494:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a498:	4619      	mov	r1, r3
 800a49a:	f7fd fedf 	bl	800825c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	7d1b      	ldrb	r3, [r3, #20]
 800a4a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	025b      	lsls	r3, r3, #9
 800a4b0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a4b2:	e044      	b.n	800a53e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6a1b      	ldr	r3, [r3, #32]
 800a4b8:	697a      	ldr	r2, [r7, #20]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d01b      	beq.n	800a4f6 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	699a      	ldr	r2, [r3, #24]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d215      	bcs.n	800a4f6 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	7858      	ldrb	r0, [r3, #1]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	f7fd fde0 	bl	800809c <disk_read>
 800a4dc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d009      	beq.n	800a4f6 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	755a      	strb	r2, [r3, #21]
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	2101      	movs	r1, #1
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7fd ff49 	bl	8008384 <unlock_fs>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e053      	b.n	800a59e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	697a      	ldr	r2, [r7, #20]
 800a4fa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a504:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a508:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a50a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d901      	bls.n	800a516 <f_write+0x2b8>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	699b      	ldr	r3, [r3, #24]
 800a520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a524:	4413      	add	r3, r2
 800a526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a528:	69f9      	ldr	r1, [r7, #28]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fd fe96 	bl	800825c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	7d1b      	ldrb	r3, [r3, #20]
 800a534:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a53e:	69fa      	ldr	r2, [r7, #28]
 800a540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a542:	4413      	add	r3, r2
 800a544:	61fb      	str	r3, [r7, #28]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	699a      	ldr	r2, [r3, #24]
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54c:	441a      	add	r2, r3
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	619a      	str	r2, [r3, #24]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	68da      	ldr	r2, [r3, #12]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	bf38      	it	cc
 800a55e:	461a      	movcc	r2, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	60da      	str	r2, [r3, #12]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56a:	441a      	add	r2, r3
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f47f aeb6 	bne.w	800a2ec <f_write+0x8e>
 800a580:	e000      	b.n	800a584 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a582:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	7d1b      	ldrb	r3, [r3, #20]
 800a588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a58c:	b2da      	uxtb	r2, r3
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	2100      	movs	r1, #0
 800a596:	4618      	mov	r0, r3
 800a598:	f7fd fef4 	bl	8008384 <unlock_fs>
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3730      	adds	r7, #48	; 0x30
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b086      	sub	sp, #24
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f107 0208 	add.w	r2, r7, #8
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7ff fa72 	bl	8009aa0 <validate>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a5c0:	7dfb      	ldrb	r3, [r7, #23]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d16d      	bne.n	800a6a2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	7d1b      	ldrb	r3, [r3, #20]
 800a5ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d067      	beq.n	800a6a2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	7d1b      	ldrb	r3, [r3, #20]
 800a5d6:	b25b      	sxtb	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	da1a      	bge.n	800a612 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	7858      	ldrb	r0, [r3, #1]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a1a      	ldr	r2, [r3, #32]
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	f7fd fd76 	bl	80080dc <disk_write>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d006      	beq.n	800a604 <f_sync+0x5e>
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	2101      	movs	r1, #1
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fd fec2 	bl	8008384 <unlock_fs>
 800a600:	2301      	movs	r3, #1
 800a602:	e055      	b.n	800a6b0 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	7d1b      	ldrb	r3, [r3, #20]
 800a608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a612:	f7fd fca3 	bl	8007f5c <get_fattime>
 800a616:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a618:	68ba      	ldr	r2, [r7, #8]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	4619      	mov	r1, r3
 800a620:	4610      	mov	r0, r2
 800a622:	f7fe f87b 	bl	800871c <move_window>
 800a626:	4603      	mov	r3, r0
 800a628:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a62a:	7dfb      	ldrb	r3, [r7, #23]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d138      	bne.n	800a6a2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a634:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	330b      	adds	r3, #11
 800a63a:	781a      	ldrb	r2, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	330b      	adds	r3, #11
 800a640:	f042 0220 	orr.w	r2, r2, #32
 800a644:	b2d2      	uxtb	r2, r2
 800a646:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6818      	ldr	r0, [r3, #0]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	461a      	mov	r2, r3
 800a652:	68f9      	ldr	r1, [r7, #12]
 800a654:	f7fe fd88 	bl	8009168 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f103 021c 	add.w	r2, r3, #28
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	4619      	mov	r1, r3
 800a664:	4610      	mov	r0, r2
 800a666:	f7fd fdcd 	bl	8008204 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	3316      	adds	r3, #22
 800a66e:	6939      	ldr	r1, [r7, #16]
 800a670:	4618      	mov	r0, r3
 800a672:	f7fd fdc7 	bl	8008204 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	3312      	adds	r3, #18
 800a67a:	2100      	movs	r1, #0
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fd fda6 	bl	80081ce <st_word>
					fs->wflag = 1;
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	2201      	movs	r2, #1
 800a686:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7fe f874 	bl	8008778 <sync_fs>
 800a690:	4603      	mov	r3, r0
 800a692:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	7d1b      	ldrb	r3, [r3, #20]
 800a698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	7dfa      	ldrb	r2, [r7, #23]
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7fd fe6b 	bl	8008384 <unlock_fs>
 800a6ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3718      	adds	r7, #24
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7ff ff70 	bl	800a5a6 <f_sync>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a6ca:	7bfb      	ldrb	r3, [r7, #15]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d11d      	bne.n	800a70c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f107 0208 	add.w	r2, r7, #8
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7ff f9e1 	bl	8009aa0 <validate>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d111      	bne.n	800a70c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	691b      	ldr	r3, [r3, #16]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fd ff71 	bl	80085d4 <dec_lock>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d102      	bne.n	800a702 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	2100      	movs	r1, #0
 800a706:	4618      	mov	r0, r3
 800a708:	f7fd fe3c 	bl	8008384 <unlock_fs>
#endif
		}
	}
	return res;
 800a70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b092      	sub	sp, #72	; 0x48
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	60f8      	str	r0, [r7, #12]
 800a71e:	60b9      	str	r1, [r7, #8]
 800a720:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a722:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a726:	f107 030c 	add.w	r3, r7, #12
 800a72a:	2200      	movs	r2, #0
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fe ff63 	bl	80095f8 <find_volume>
 800a732:	4603      	mov	r3, r0
 800a734:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800a738:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f040 8099 	bne.w	800a874 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74a:	695a      	ldr	r2, [r3, #20]
 800a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	3b02      	subs	r3, #2
 800a752:	429a      	cmp	r2, r3
 800a754:	d804      	bhi.n	800a760 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a758:	695a      	ldr	r2, [r3, #20]
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	601a      	str	r2, [r3, #0]
 800a75e:	e089      	b.n	800a874 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d128      	bne.n	800a7be <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a76c:	2302      	movs	r3, #2
 800a76e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a772:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a774:	f107 0314 	add.w	r3, r7, #20
 800a778:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fe f889 	bl	8008892 <get_fat>
 800a780:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a788:	d103      	bne.n	800a792 <f_getfree+0x7c>
 800a78a:	2301      	movs	r3, #1
 800a78c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a790:	e063      	b.n	800a85a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a794:	2b01      	cmp	r3, #1
 800a796:	d103      	bne.n	800a7a0 <f_getfree+0x8a>
 800a798:	2302      	movs	r3, #2
 800a79a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a79e:	e05c      	b.n	800a85a <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d102      	bne.n	800a7ac <f_getfree+0x96>
 800a7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800a7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d3db      	bcc.n	800a774 <f_getfree+0x5e>
 800a7bc:	e04d      	b.n	800a85a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c8:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800a7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d113      	bne.n	800a800 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a7d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7dc:	1c5a      	adds	r2, r3, #1
 800a7de:	63ba      	str	r2, [r7, #56]	; 0x38
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	f7fd ff9b 	bl	800871c <move_window>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800a7ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d131      	bne.n	800a858 <f_getfree+0x142>
							p = fs->win;
 800a7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f6:	3334      	adds	r3, #52	; 0x34
 800a7f8:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800a7fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7fe:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	2b02      	cmp	r3, #2
 800a806:	d10f      	bne.n	800a828 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a80a:	f7fd fca5 	bl	8008158 <ld_word>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d102      	bne.n	800a81a <f_getfree+0x104>
 800a814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a816:	3301      	adds	r3, #1
 800a818:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800a81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81c:	3302      	adds	r3, #2
 800a81e:	633b      	str	r3, [r7, #48]	; 0x30
 800a820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a822:	3b02      	subs	r3, #2
 800a824:	637b      	str	r3, [r7, #52]	; 0x34
 800a826:	e010      	b.n	800a84a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a82a:	f7fd fcad 	bl	8008188 <ld_dword>
 800a82e:	4603      	mov	r3, r0
 800a830:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a834:	2b00      	cmp	r3, #0
 800a836:	d102      	bne.n	800a83e <f_getfree+0x128>
 800a838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a83a:	3301      	adds	r3, #1
 800a83c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800a83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a840:	3304      	adds	r3, #4
 800a842:	633b      	str	r3, [r7, #48]	; 0x30
 800a844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a846:	3b04      	subs	r3, #4
 800a848:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800a84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a84c:	3b01      	subs	r3, #1
 800a84e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1bd      	bne.n	800a7d2 <f_getfree+0xbc>
 800a856:	e000      	b.n	800a85a <f_getfree+0x144>
							if (res != FR_OK) break;
 800a858:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a85e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a862:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a864:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a868:	791a      	ldrb	r2, [r3, #4]
 800a86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86c:	f042 0201 	orr.w	r2, r2, #1
 800a870:	b2d2      	uxtb	r2, r2
 800a872:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a876:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800a87a:	4611      	mov	r1, r2
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7fd fd81 	bl	8008384 <unlock_fs>
 800a882:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a886:	4618      	mov	r0, r3
 800a888:	3748      	adds	r7, #72	; 0x48
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b088      	sub	sp, #32
 800a892:	af00      	add	r7, sp, #0
 800a894:	60f8      	str	r0, [r7, #12]
 800a896:	60b9      	str	r1, [r7, #8]
 800a898:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a8a2:	e01b      	b.n	800a8dc <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a8a4:	f107 0310 	add.w	r3, r7, #16
 800a8a8:	f107 0114 	add.w	r1, r7, #20
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f7ff fb67 	bl	8009f82 <f_read>
		if (rc != 1) break;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d116      	bne.n	800a8e8 <f_gets+0x5a>
		c = s[0];
 800a8ba:	7d3b      	ldrb	r3, [r7, #20]
 800a8bc:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a8be:	7dfb      	ldrb	r3, [r7, #23]
 800a8c0:	2b0d      	cmp	r3, #13
 800a8c2:	d100      	bne.n	800a8c6 <f_gets+0x38>
 800a8c4:	e00a      	b.n	800a8dc <f_gets+0x4e>
		*p++ = c;
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	1c5a      	adds	r2, r3, #1
 800a8ca:	61ba      	str	r2, [r7, #24]
 800a8cc:	7dfa      	ldrb	r2, [r7, #23]
 800a8ce:	701a      	strb	r2, [r3, #0]
		n++;
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a8d6:	7dfb      	ldrb	r3, [r7, #23]
 800a8d8:	2b0a      	cmp	r3, #10
 800a8da:	d007      	beq.n	800a8ec <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	69fa      	ldr	r2, [r7, #28]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	dbde      	blt.n	800a8a4 <f_gets+0x16>
 800a8e6:	e002      	b.n	800a8ee <f_gets+0x60>
		if (rc != 1) break;
 800a8e8:	bf00      	nop
 800a8ea:	e000      	b.n	800a8ee <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800a8ec:	bf00      	nop
	}
	*p = 0;
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <f_gets+0x70>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	e000      	b.n	800a900 <f_gets+0x72>
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3720      	adds	r7, #32
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a908:	b480      	push	{r7}
 800a90a:	b087      	sub	sp, #28
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	4613      	mov	r3, r2
 800a914:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a916:	2301      	movs	r3, #1
 800a918:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a91e:	4b1f      	ldr	r3, [pc, #124]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a920:	7a5b      	ldrb	r3, [r3, #9]
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b00      	cmp	r3, #0
 800a926:	d131      	bne.n	800a98c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a928:	4b1c      	ldr	r3, [pc, #112]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a92a:	7a5b      	ldrb	r3, [r3, #9]
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	461a      	mov	r2, r3
 800a930:	4b1a      	ldr	r3, [pc, #104]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a932:	2100      	movs	r1, #0
 800a934:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a936:	4b19      	ldr	r3, [pc, #100]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a938:	7a5b      	ldrb	r3, [r3, #9]
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	4a17      	ldr	r2, [pc, #92]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a946:	4b15      	ldr	r3, [pc, #84]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a948:	7a5b      	ldrb	r3, [r3, #9]
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	461a      	mov	r2, r3
 800a94e:	4b13      	ldr	r3, [pc, #76]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a950:	4413      	add	r3, r2
 800a952:	79fa      	ldrb	r2, [r7, #7]
 800a954:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a956:	4b11      	ldr	r3, [pc, #68]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a958:	7a5b      	ldrb	r3, [r3, #9]
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	1c5a      	adds	r2, r3, #1
 800a95e:	b2d1      	uxtb	r1, r2
 800a960:	4a0e      	ldr	r2, [pc, #56]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a962:	7251      	strb	r1, [r2, #9]
 800a964:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a966:	7dbb      	ldrb	r3, [r7, #22]
 800a968:	3330      	adds	r3, #48	; 0x30
 800a96a:	b2da      	uxtb	r2, r3
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	3301      	adds	r3, #1
 800a974:	223a      	movs	r2, #58	; 0x3a
 800a976:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	3302      	adds	r3, #2
 800a97c:	222f      	movs	r2, #47	; 0x2f
 800a97e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	3303      	adds	r3, #3
 800a984:	2200      	movs	r2, #0
 800a986:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	371c      	adds	r7, #28
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	20000360 	.word	0x20000360

0800a9a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7ff ffaa 	bl	800a908 <FATFS_LinkDriverEx>
 800a9b4:	4603      	mov	r3, r0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	6039      	str	r1, [r7, #0]
 800a9c8:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	2001      	movs	r0, #1
 800a9d0:	f000 f977 	bl	800acc2 <osSemaphoreNew>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	bf14      	ite	ne
 800a9e2:	2301      	movne	r3, #1
 800a9e4:	2300      	moveq	r3, #0
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	60fb      	str	r3, [r7, #12]

    return ret;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fa7f 	bl	800af00 <osSemaphoreDelete>
#endif
    return 1;
 800aa02:	2301      	movs	r3, #1
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800aa18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 f9d9 	bl	800add4 <osSemaphoreAcquire>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d101      	bne.n	800aa2c <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b082      	sub	sp, #8
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fa1a 	bl	800ae78 <osSemaphoreRelease>
#endif
}
 800aa44:	bf00      	nop
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <__NVIC_SetPriority>:
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	4603      	mov	r3, r0
 800aa54:	6039      	str	r1, [r7, #0]
 800aa56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aa58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	db0a      	blt.n	800aa76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	490c      	ldr	r1, [pc, #48]	; (800aa98 <__NVIC_SetPriority+0x4c>)
 800aa66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa6a:	0112      	lsls	r2, r2, #4
 800aa6c:	b2d2      	uxtb	r2, r2
 800aa6e:	440b      	add	r3, r1
 800aa70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800aa74:	e00a      	b.n	800aa8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	b2da      	uxtb	r2, r3
 800aa7a:	4908      	ldr	r1, [pc, #32]	; (800aa9c <__NVIC_SetPriority+0x50>)
 800aa7c:	79fb      	ldrb	r3, [r7, #7]
 800aa7e:	f003 030f 	and.w	r3, r3, #15
 800aa82:	3b04      	subs	r3, #4
 800aa84:	0112      	lsls	r2, r2, #4
 800aa86:	b2d2      	uxtb	r2, r2
 800aa88:	440b      	add	r3, r1
 800aa8a:	761a      	strb	r2, [r3, #24]
}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr
 800aa98:	e000e100 	.word	0xe000e100
 800aa9c:	e000ed00 	.word	0xe000ed00

0800aaa0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800aaa4:	4b05      	ldr	r3, [pc, #20]	; (800aabc <SysTick_Handler+0x1c>)
 800aaa6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800aaa8:	f002 f962 	bl	800cd70 <xTaskGetSchedulerState>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d001      	beq.n	800aab6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800aab2:	f003 f949 	bl	800dd48 <xPortSysTickHandler>
  }
}
 800aab6:	bf00      	nop
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	e000e010 	.word	0xe000e010

0800aac0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aac0:	b580      	push	{r7, lr}
 800aac2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800aac4:	2100      	movs	r1, #0
 800aac6:	f06f 0004 	mvn.w	r0, #4
 800aaca:	f7ff ffbf 	bl	800aa4c <__NVIC_SetPriority>
#endif
}
 800aace:	bf00      	nop
 800aad0:	bd80      	pop	{r7, pc}
	...

0800aad4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aada:	f3ef 8305 	mrs	r3, IPSR
 800aade:	603b      	str	r3, [r7, #0]
  return(result);
 800aae0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d003      	beq.n	800aaee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800aae6:	f06f 0305 	mvn.w	r3, #5
 800aaea:	607b      	str	r3, [r7, #4]
 800aaec:	e00c      	b.n	800ab08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aaee:	4b0a      	ldr	r3, [pc, #40]	; (800ab18 <osKernelInitialize+0x44>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d105      	bne.n	800ab02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aaf6:	4b08      	ldr	r3, [pc, #32]	; (800ab18 <osKernelInitialize+0x44>)
 800aaf8:	2201      	movs	r2, #1
 800aafa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aafc:	2300      	movs	r3, #0
 800aafe:	607b      	str	r3, [r7, #4]
 800ab00:	e002      	b.n	800ab08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ab02:	f04f 33ff 	mov.w	r3, #4294967295
 800ab06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ab08:	687b      	ldr	r3, [r7, #4]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	2000036c 	.word	0x2000036c

0800ab1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab22:	f3ef 8305 	mrs	r3, IPSR
 800ab26:	603b      	str	r3, [r7, #0]
  return(result);
 800ab28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d003      	beq.n	800ab36 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ab2e:	f06f 0305 	mvn.w	r3, #5
 800ab32:	607b      	str	r3, [r7, #4]
 800ab34:	e010      	b.n	800ab58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ab36:	4b0b      	ldr	r3, [pc, #44]	; (800ab64 <osKernelStart+0x48>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d109      	bne.n	800ab52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ab3e:	f7ff ffbf 	bl	800aac0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ab42:	4b08      	ldr	r3, [pc, #32]	; (800ab64 <osKernelStart+0x48>)
 800ab44:	2202      	movs	r2, #2
 800ab46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ab48:	f001 fcca 	bl	800c4e0 <vTaskStartScheduler>
      stat = osOK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	607b      	str	r3, [r7, #4]
 800ab50:	e002      	b.n	800ab58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ab52:	f04f 33ff 	mov.w	r3, #4294967295
 800ab56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ab58:	687b      	ldr	r3, [r7, #4]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	2000036c 	.word	0x2000036c

0800ab68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b08e      	sub	sp, #56	; 0x38
 800ab6c:	af04      	add	r7, sp, #16
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ab74:	2300      	movs	r3, #0
 800ab76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab78:	f3ef 8305 	mrs	r3, IPSR
 800ab7c:	617b      	str	r3, [r7, #20]
  return(result);
 800ab7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d17e      	bne.n	800ac82 <osThreadNew+0x11a>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d07b      	beq.n	800ac82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ab8a:	2380      	movs	r3, #128	; 0x80
 800ab8c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ab8e:	2318      	movs	r3, #24
 800ab90:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ab92:	2300      	movs	r3, #0
 800ab94:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ab96:	f04f 33ff 	mov.w	r3, #4294967295
 800ab9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d045      	beq.n	800ac2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d002      	beq.n	800abb0 <osThreadNew+0x48>
        name = attr->name;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d002      	beq.n	800abbe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	699b      	ldr	r3, [r3, #24]
 800abbc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d008      	beq.n	800abd6 <osThreadNew+0x6e>
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	2b38      	cmp	r3, #56	; 0x38
 800abc8:	d805      	bhi.n	800abd6 <osThreadNew+0x6e>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	f003 0301 	and.w	r3, r3, #1
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d001      	beq.n	800abda <osThreadNew+0x72>
        return (NULL);
 800abd6:	2300      	movs	r3, #0
 800abd8:	e054      	b.n	800ac84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d003      	beq.n	800abea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	089b      	lsrs	r3, r3, #2
 800abe8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00e      	beq.n	800ac10 <osThreadNew+0xa8>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	2b5b      	cmp	r3, #91	; 0x5b
 800abf8:	d90a      	bls.n	800ac10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d006      	beq.n	800ac10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	695b      	ldr	r3, [r3, #20]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d002      	beq.n	800ac10 <osThreadNew+0xa8>
        mem = 1;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	61bb      	str	r3, [r7, #24]
 800ac0e:	e010      	b.n	800ac32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10c      	bne.n	800ac32 <osThreadNew+0xca>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d108      	bne.n	800ac32 <osThreadNew+0xca>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d104      	bne.n	800ac32 <osThreadNew+0xca>
          mem = 0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	61bb      	str	r3, [r7, #24]
 800ac2c:	e001      	b.n	800ac32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d110      	bne.n	800ac5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac40:	9202      	str	r2, [sp, #8]
 800ac42:	9301      	str	r3, [sp, #4]
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	9300      	str	r3, [sp, #0]
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	6a3a      	ldr	r2, [r7, #32]
 800ac4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f001 fa70 	bl	800c134 <xTaskCreateStatic>
 800ac54:	4603      	mov	r3, r0
 800ac56:	613b      	str	r3, [r7, #16]
 800ac58:	e013      	b.n	800ac82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d110      	bne.n	800ac82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ac60:	6a3b      	ldr	r3, [r7, #32]
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	f107 0310 	add.w	r3, r7, #16
 800ac68:	9301      	str	r3, [sp, #4]
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f001 fabb 	bl	800c1ee <xTaskCreate>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d001      	beq.n	800ac82 <osThreadNew+0x11a>
            hTask = NULL;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ac82:	693b      	ldr	r3, [r7, #16]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3728      	adds	r7, #40	; 0x28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac94:	f3ef 8305 	mrs	r3, IPSR
 800ac98:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d003      	beq.n	800aca8 <osDelay+0x1c>
    stat = osErrorISR;
 800aca0:	f06f 0305 	mvn.w	r3, #5
 800aca4:	60fb      	str	r3, [r7, #12]
 800aca6:	e007      	b.n	800acb8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800aca8:	2300      	movs	r3, #0
 800acaa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d002      	beq.n	800acb8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f001 fbe0 	bl	800c478 <vTaskDelay>
    }
  }

  return (stat);
 800acb8:	68fb      	ldr	r3, [r7, #12]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b08a      	sub	sp, #40	; 0x28
 800acc6:	af02      	add	r7, sp, #8
 800acc8:	60f8      	str	r0, [r7, #12]
 800acca:	60b9      	str	r1, [r7, #8]
 800accc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800acce:	2300      	movs	r3, #0
 800acd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acd2:	f3ef 8305 	mrs	r3, IPSR
 800acd6:	613b      	str	r3, [r7, #16]
  return(result);
 800acd8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d175      	bne.n	800adca <osSemaphoreNew+0x108>
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d072      	beq.n	800adca <osSemaphoreNew+0x108>
 800ace4:	68ba      	ldr	r2, [r7, #8]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d86e      	bhi.n	800adca <osSemaphoreNew+0x108>
    mem = -1;
 800acec:	f04f 33ff 	mov.w	r3, #4294967295
 800acf0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d015      	beq.n	800ad24 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d006      	beq.n	800ad0e <osSemaphoreNew+0x4c>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	2b4f      	cmp	r3, #79	; 0x4f
 800ad06:	d902      	bls.n	800ad0e <osSemaphoreNew+0x4c>
        mem = 1;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	61bb      	str	r3, [r7, #24]
 800ad0c:	e00c      	b.n	800ad28 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d108      	bne.n	800ad28 <osSemaphoreNew+0x66>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d104      	bne.n	800ad28 <osSemaphoreNew+0x66>
          mem = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	61bb      	str	r3, [r7, #24]
 800ad22:	e001      	b.n	800ad28 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ad24:	2300      	movs	r3, #0
 800ad26:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad2e:	d04c      	beq.n	800adca <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d128      	bne.n	800ad88 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d10a      	bne.n	800ad52 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	2203      	movs	r2, #3
 800ad42:	9200      	str	r2, [sp, #0]
 800ad44:	2200      	movs	r2, #0
 800ad46:	2100      	movs	r1, #0
 800ad48:	2001      	movs	r0, #1
 800ad4a:	f000 fa4d 	bl	800b1e8 <xQueueGenericCreateStatic>
 800ad4e:	61f8      	str	r0, [r7, #28]
 800ad50:	e005      	b.n	800ad5e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ad52:	2203      	movs	r2, #3
 800ad54:	2100      	movs	r1, #0
 800ad56:	2001      	movs	r0, #1
 800ad58:	f000 fabe 	bl	800b2d8 <xQueueGenericCreate>
 800ad5c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d022      	beq.n	800adaa <osSemaphoreNew+0xe8>
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d01f      	beq.n	800adaa <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	2100      	movs	r1, #0
 800ad70:	69f8      	ldr	r0, [r7, #28]
 800ad72:	f000 fb79 	bl	800b468 <xQueueGenericSend>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d016      	beq.n	800adaa <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ad7c:	69f8      	ldr	r0, [r7, #28]
 800ad7e:	f001 f805 	bl	800bd8c <vQueueDelete>
            hSemaphore = NULL;
 800ad82:	2300      	movs	r3, #0
 800ad84:	61fb      	str	r3, [r7, #28]
 800ad86:	e010      	b.n	800adaa <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d108      	bne.n	800ada0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	461a      	mov	r2, r3
 800ad94:	68b9      	ldr	r1, [r7, #8]
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 fafb 	bl	800b392 <xQueueCreateCountingSemaphoreStatic>
 800ad9c:	61f8      	str	r0, [r7, #28]
 800ad9e:	e004      	b.n	800adaa <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ada0:	68b9      	ldr	r1, [r7, #8]
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f000 fb2c 	bl	800b400 <xQueueCreateCountingSemaphore>
 800ada8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00c      	beq.n	800adca <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d003      	beq.n	800adbe <osSemaphoreNew+0xfc>
          name = attr->name;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	617b      	str	r3, [r7, #20]
 800adbc:	e001      	b.n	800adc2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800adbe:	2300      	movs	r3, #0
 800adc0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800adc2:	6979      	ldr	r1, [r7, #20]
 800adc4:	69f8      	ldr	r0, [r7, #28]
 800adc6:	f001 f92d 	bl	800c024 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800adca:	69fb      	ldr	r3, [r7, #28]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3720      	adds	r7, #32
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d103      	bne.n	800adf4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800adec:	f06f 0303 	mvn.w	r3, #3
 800adf0:	617b      	str	r3, [r7, #20]
 800adf2:	e039      	b.n	800ae68 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adf4:	f3ef 8305 	mrs	r3, IPSR
 800adf8:	60fb      	str	r3, [r7, #12]
  return(result);
 800adfa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d022      	beq.n	800ae46 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d003      	beq.n	800ae0e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ae06:	f06f 0303 	mvn.w	r3, #3
 800ae0a:	617b      	str	r3, [r7, #20]
 800ae0c:	e02c      	b.n	800ae68 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ae12:	f107 0308 	add.w	r3, r7, #8
 800ae16:	461a      	mov	r2, r3
 800ae18:	2100      	movs	r1, #0
 800ae1a:	6938      	ldr	r0, [r7, #16]
 800ae1c:	f000 ff36 	bl	800bc8c <xQueueReceiveFromISR>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d003      	beq.n	800ae2e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ae26:	f06f 0302 	mvn.w	r3, #2
 800ae2a:	617b      	str	r3, [r7, #20]
 800ae2c:	e01c      	b.n	800ae68 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d019      	beq.n	800ae68 <osSemaphoreAcquire+0x94>
 800ae34:	4b0f      	ldr	r3, [pc, #60]	; (800ae74 <osSemaphoreAcquire+0xa0>)
 800ae36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae3a:	601a      	str	r2, [r3, #0]
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	f3bf 8f6f 	isb	sy
 800ae44:	e010      	b.n	800ae68 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ae46:	6839      	ldr	r1, [r7, #0]
 800ae48:	6938      	ldr	r0, [r7, #16]
 800ae4a:	f000 fe13 	bl	800ba74 <xQueueSemaphoreTake>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d009      	beq.n	800ae68 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d003      	beq.n	800ae62 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ae5a:	f06f 0301 	mvn.w	r3, #1
 800ae5e:	617b      	str	r3, [r7, #20]
 800ae60:	e002      	b.n	800ae68 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ae62:	f06f 0302 	mvn.w	r3, #2
 800ae66:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ae68:	697b      	ldr	r3, [r7, #20]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3718      	adds	r7, #24
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	e000ed04 	.word	0xe000ed04

0800ae78 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b086      	sub	sp, #24
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ae84:	2300      	movs	r3, #0
 800ae86:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d103      	bne.n	800ae96 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ae8e:	f06f 0303 	mvn.w	r3, #3
 800ae92:	617b      	str	r3, [r7, #20]
 800ae94:	e02c      	b.n	800aef0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae96:	f3ef 8305 	mrs	r3, IPSR
 800ae9a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d01a      	beq.n	800aed8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800aea2:	2300      	movs	r3, #0
 800aea4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800aea6:	f107 0308 	add.w	r3, r7, #8
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6938      	ldr	r0, [r7, #16]
 800aeae:	f000 fc74 	bl	800b79a <xQueueGiveFromISR>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d003      	beq.n	800aec0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800aeb8:	f06f 0302 	mvn.w	r3, #2
 800aebc:	617b      	str	r3, [r7, #20]
 800aebe:	e017      	b.n	800aef0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d014      	beq.n	800aef0 <osSemaphoreRelease+0x78>
 800aec6:	4b0d      	ldr	r3, [pc, #52]	; (800aefc <osSemaphoreRelease+0x84>)
 800aec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	f3bf 8f6f 	isb	sy
 800aed6:	e00b      	b.n	800aef0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800aed8:	2300      	movs	r3, #0
 800aeda:	2200      	movs	r2, #0
 800aedc:	2100      	movs	r1, #0
 800aede:	6938      	ldr	r0, [r7, #16]
 800aee0:	f000 fac2 	bl	800b468 <xQueueGenericSend>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d002      	beq.n	800aef0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800aeea:	f06f 0302 	mvn.w	r3, #2
 800aeee:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800aef0:	697b      	ldr	r3, [r7, #20]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3718      	adds	r7, #24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	e000ed04 	.word	0xe000ed04

0800af00 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af0c:	f3ef 8305 	mrs	r3, IPSR
 800af10:	60fb      	str	r3, [r7, #12]
  return(result);
 800af12:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800af14:	2b00      	cmp	r3, #0
 800af16:	d003      	beq.n	800af20 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800af18:	f06f 0305 	mvn.w	r3, #5
 800af1c:	617b      	str	r3, [r7, #20]
 800af1e:	e00e      	b.n	800af3e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d103      	bne.n	800af2e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800af26:	f06f 0303 	mvn.w	r3, #3
 800af2a:	617b      	str	r3, [r7, #20]
 800af2c:	e007      	b.n	800af3e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800af2e:	6938      	ldr	r0, [r7, #16]
 800af30:	f001 f8a2 	bl	800c078 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800af34:	2300      	movs	r3, #0
 800af36:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800af38:	6938      	ldr	r0, [r7, #16]
 800af3a:	f000 ff27 	bl	800bd8c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800af3e:	697b      	ldr	r3, [r7, #20]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3718      	adds	r7, #24
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	4a07      	ldr	r2, [pc, #28]	; (800af74 <vApplicationGetIdleTaskMemory+0x2c>)
 800af58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	4a06      	ldr	r2, [pc, #24]	; (800af78 <vApplicationGetIdleTaskMemory+0x30>)
 800af5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2280      	movs	r2, #128	; 0x80
 800af64:	601a      	str	r2, [r3, #0]
}
 800af66:	bf00      	nop
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	20000370 	.word	0x20000370
 800af78:	200003cc 	.word	0x200003cc

0800af7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	4a07      	ldr	r2, [pc, #28]	; (800afa8 <vApplicationGetTimerTaskMemory+0x2c>)
 800af8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	4a06      	ldr	r2, [pc, #24]	; (800afac <vApplicationGetTimerTaskMemory+0x30>)
 800af92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af9a:	601a      	str	r2, [r3, #0]
}
 800af9c:	bf00      	nop
 800af9e:	3714      	adds	r7, #20
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr
 800afa8:	200005cc 	.word	0x200005cc
 800afac:	20000628 	.word	0x20000628

0800afb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f103 0208 	add.w	r2, r3, #8
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f04f 32ff 	mov.w	r2, #4294967295
 800afc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f103 0208 	add.w	r2, r3, #8
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f103 0208 	add.w	r2, r3, #8
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800afe4:	bf00      	nop
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800affe:	bf00      	nop
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr

0800b00a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b00a:	b480      	push	{r7}
 800b00c:	b085      	sub	sp, #20
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	689a      	ldr	r2, [r3, #8]
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	683a      	ldr	r2, [r7, #0]
 800b02e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	683a      	ldr	r2, [r7, #0]
 800b034:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	1c5a      	adds	r2, r3, #1
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	601a      	str	r2, [r3, #0]
}
 800b046:	bf00      	nop
 800b048:	3714      	adds	r7, #20
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr

0800b052 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b052:	b480      	push	{r7}
 800b054:	b085      	sub	sp, #20
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b068:	d103      	bne.n	800b072 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	60fb      	str	r3, [r7, #12]
 800b070:	e00c      	b.n	800b08c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	3308      	adds	r3, #8
 800b076:	60fb      	str	r3, [r7, #12]
 800b078:	e002      	b.n	800b080 <vListInsert+0x2e>
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	60fb      	str	r3, [r7, #12]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68ba      	ldr	r2, [r7, #8]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d2f6      	bcs.n	800b07a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	685a      	ldr	r2, [r3, #4]
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	683a      	ldr	r2, [r7, #0]
 800b0a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	1c5a      	adds	r2, r3, #1
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	601a      	str	r2, [r3, #0]
}
 800b0b8:	bf00      	nop
 800b0ba:	3714      	adds	r7, #20
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	691b      	ldr	r3, [r3, #16]
 800b0d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	6892      	ldr	r2, [r2, #8]
 800b0da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	6852      	ldr	r2, [r2, #4]
 800b0e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d103      	bne.n	800b0f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	689a      	ldr	r2, [r3, #8]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	1e5a      	subs	r2, r3, #1
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3714      	adds	r7, #20
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10a      	bne.n	800b142 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b130:	f383 8811 	msr	BASEPRI, r3
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	f3bf 8f4f 	dsb	sy
 800b13c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b13e:	bf00      	nop
 800b140:	e7fe      	b.n	800b140 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b142:	f002 fd6f 	bl	800dc24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b14e:	68f9      	ldr	r1, [r7, #12]
 800b150:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b152:	fb01 f303 	mul.w	r3, r1, r3
 800b156:	441a      	add	r2, r3
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b172:	3b01      	subs	r3, #1
 800b174:	68f9      	ldr	r1, [r7, #12]
 800b176:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b178:	fb01 f303 	mul.w	r3, r1, r3
 800b17c:	441a      	add	r2, r3
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	22ff      	movs	r2, #255	; 0xff
 800b186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	22ff      	movs	r2, #255	; 0xff
 800b18e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d114      	bne.n	800b1c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	691b      	ldr	r3, [r3, #16]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d01a      	beq.n	800b1d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3310      	adds	r3, #16
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f001 fc25 	bl	800c9f4 <xTaskRemoveFromEventList>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d012      	beq.n	800b1d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b1b0:	4b0c      	ldr	r3, [pc, #48]	; (800b1e4 <xQueueGenericReset+0xcc>)
 800b1b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1b6:	601a      	str	r2, [r3, #0]
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	f3bf 8f6f 	isb	sy
 800b1c0:	e009      	b.n	800b1d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	3310      	adds	r3, #16
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7ff fef2 	bl	800afb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3324      	adds	r3, #36	; 0x24
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7ff feed 	bl	800afb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b1d6:	f002 fd55 	bl	800dc84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b1da:	2301      	movs	r3, #1
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	e000ed04 	.word	0xe000ed04

0800b1e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b08e      	sub	sp, #56	; 0x38
 800b1ec:	af02      	add	r7, sp, #8
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
 800b1f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10a      	bne.n	800b212 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b20e:	bf00      	nop
 800b210:	e7fe      	b.n	800b210 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d10a      	bne.n	800b22e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21c:	f383 8811 	msr	BASEPRI, r3
 800b220:	f3bf 8f6f 	isb	sy
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b22a:	bf00      	nop
 800b22c:	e7fe      	b.n	800b22c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d002      	beq.n	800b23a <xQueueGenericCreateStatic+0x52>
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <xQueueGenericCreateStatic+0x56>
 800b23a:	2301      	movs	r3, #1
 800b23c:	e000      	b.n	800b240 <xQueueGenericCreateStatic+0x58>
 800b23e:	2300      	movs	r3, #0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d10a      	bne.n	800b25a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b248:	f383 8811 	msr	BASEPRI, r3
 800b24c:	f3bf 8f6f 	isb	sy
 800b250:	f3bf 8f4f 	dsb	sy
 800b254:	623b      	str	r3, [r7, #32]
}
 800b256:	bf00      	nop
 800b258:	e7fe      	b.n	800b258 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d102      	bne.n	800b266 <xQueueGenericCreateStatic+0x7e>
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d101      	bne.n	800b26a <xQueueGenericCreateStatic+0x82>
 800b266:	2301      	movs	r3, #1
 800b268:	e000      	b.n	800b26c <xQueueGenericCreateStatic+0x84>
 800b26a:	2300      	movs	r3, #0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d10a      	bne.n	800b286 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	61fb      	str	r3, [r7, #28]
}
 800b282:	bf00      	nop
 800b284:	e7fe      	b.n	800b284 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b286:	2350      	movs	r3, #80	; 0x50
 800b288:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	2b50      	cmp	r3, #80	; 0x50
 800b28e:	d00a      	beq.n	800b2a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b294:	f383 8811 	msr	BASEPRI, r3
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	61bb      	str	r3, [r7, #24]
}
 800b2a2:	bf00      	nop
 800b2a4:	e7fe      	b.n	800b2a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b2a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00d      	beq.n	800b2ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b2ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	68b9      	ldr	r1, [r7, #8]
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f000 f83f 	bl	800b34c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3730      	adds	r7, #48	; 0x30
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b08a      	sub	sp, #40	; 0x28
 800b2dc:	af02      	add	r7, sp, #8
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10a      	bne.n	800b302 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f0:	f383 8811 	msr	BASEPRI, r3
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	613b      	str	r3, [r7, #16]
}
 800b2fe:	bf00      	nop
 800b300:	e7fe      	b.n	800b300 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	68ba      	ldr	r2, [r7, #8]
 800b306:	fb02 f303 	mul.w	r3, r2, r3
 800b30a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	3350      	adds	r3, #80	; 0x50
 800b310:	4618      	mov	r0, r3
 800b312:	f002 fda9 	bl	800de68 <pvPortMalloc>
 800b316:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d011      	beq.n	800b342 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	3350      	adds	r3, #80	; 0x50
 800b326:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b330:	79fa      	ldrb	r2, [r7, #7]
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	4613      	mov	r3, r2
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	68b9      	ldr	r1, [r7, #8]
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f000 f805 	bl	800b34c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b342:	69bb      	ldr	r3, [r7, #24]
	}
 800b344:	4618      	mov	r0, r3
 800b346:	3720      	adds	r7, #32
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
 800b358:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d103      	bne.n	800b368 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	69ba      	ldr	r2, [r7, #24]
 800b364:	601a      	str	r2, [r3, #0]
 800b366:	e002      	b.n	800b36e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	68ba      	ldr	r2, [r7, #8]
 800b378:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b37a:	2101      	movs	r1, #1
 800b37c:	69b8      	ldr	r0, [r7, #24]
 800b37e:	f7ff fecb 	bl	800b118 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	78fa      	ldrb	r2, [r7, #3]
 800b386:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b38a:	bf00      	nop
 800b38c:	3710      	adds	r7, #16
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b392:	b580      	push	{r7, lr}
 800b394:	b08a      	sub	sp, #40	; 0x28
 800b396:	af02      	add	r7, sp, #8
 800b398:	60f8      	str	r0, [r7, #12]
 800b39a:	60b9      	str	r1, [r7, #8]
 800b39c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10a      	bne.n	800b3ba <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a8:	f383 8811 	msr	BASEPRI, r3
 800b3ac:	f3bf 8f6f 	isb	sy
 800b3b0:	f3bf 8f4f 	dsb	sy
 800b3b4:	61bb      	str	r3, [r7, #24]
}
 800b3b6:	bf00      	nop
 800b3b8:	e7fe      	b.n	800b3b8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d90a      	bls.n	800b3d8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c6:	f383 8811 	msr	BASEPRI, r3
 800b3ca:	f3bf 8f6f 	isb	sy
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	617b      	str	r3, [r7, #20]
}
 800b3d4:	bf00      	nop
 800b3d6:	e7fe      	b.n	800b3d6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b3d8:	2302      	movs	r3, #2
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f7ff ff00 	bl	800b1e8 <xQueueGenericCreateStatic>
 800b3e8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d002      	beq.n	800b3f6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b3f6:	69fb      	ldr	r3, [r7, #28]
	}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3720      	adds	r7, #32
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d10a      	bne.n	800b426 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b414:	f383 8811 	msr	BASEPRI, r3
 800b418:	f3bf 8f6f 	isb	sy
 800b41c:	f3bf 8f4f 	dsb	sy
 800b420:	613b      	str	r3, [r7, #16]
}
 800b422:	bf00      	nop
 800b424:	e7fe      	b.n	800b424 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d90a      	bls.n	800b444 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	60fb      	str	r3, [r7, #12]
}
 800b440:	bf00      	nop
 800b442:	e7fe      	b.n	800b442 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b444:	2202      	movs	r2, #2
 800b446:	2100      	movs	r1, #0
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f7ff ff45 	bl	800b2d8 <xQueueGenericCreate>
 800b44e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d002      	beq.n	800b45c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	683a      	ldr	r2, [r7, #0]
 800b45a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b45c:	697b      	ldr	r3, [r7, #20]
	}
 800b45e:	4618      	mov	r0, r3
 800b460:	3718      	adds	r7, #24
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
	...

0800b468 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08e      	sub	sp, #56	; 0x38
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b476:	2300      	movs	r3, #0
 800b478:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10a      	bne.n	800b49a <xQueueGenericSend+0x32>
	__asm volatile
 800b484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b488:	f383 8811 	msr	BASEPRI, r3
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b496:	bf00      	nop
 800b498:	e7fe      	b.n	800b498 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d103      	bne.n	800b4a8 <xQueueGenericSend+0x40>
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d101      	bne.n	800b4ac <xQueueGenericSend+0x44>
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e000      	b.n	800b4ae <xQueueGenericSend+0x46>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10a      	bne.n	800b4c8 <xQueueGenericSend+0x60>
	__asm volatile
 800b4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4c4:	bf00      	nop
 800b4c6:	e7fe      	b.n	800b4c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	2b02      	cmp	r3, #2
 800b4cc:	d103      	bne.n	800b4d6 <xQueueGenericSend+0x6e>
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d101      	bne.n	800b4da <xQueueGenericSend+0x72>
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e000      	b.n	800b4dc <xQueueGenericSend+0x74>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10a      	bne.n	800b4f6 <xQueueGenericSend+0x8e>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	623b      	str	r3, [r7, #32]
}
 800b4f2:	bf00      	nop
 800b4f4:	e7fe      	b.n	800b4f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4f6:	f001 fc3b 	bl	800cd70 <xTaskGetSchedulerState>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d102      	bne.n	800b506 <xQueueGenericSend+0x9e>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d101      	bne.n	800b50a <xQueueGenericSend+0xa2>
 800b506:	2301      	movs	r3, #1
 800b508:	e000      	b.n	800b50c <xQueueGenericSend+0xa4>
 800b50a:	2300      	movs	r3, #0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10a      	bne.n	800b526 <xQueueGenericSend+0xbe>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	61fb      	str	r3, [r7, #28]
}
 800b522:	bf00      	nop
 800b524:	e7fe      	b.n	800b524 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b526:	f002 fb7d 	bl	800dc24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b532:	429a      	cmp	r2, r3
 800b534:	d302      	bcc.n	800b53c <xQueueGenericSend+0xd4>
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	2b02      	cmp	r3, #2
 800b53a:	d129      	bne.n	800b590 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b53c:	683a      	ldr	r2, [r7, #0]
 800b53e:	68b9      	ldr	r1, [r7, #8]
 800b540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b542:	f000 fc5e 	bl	800be02 <prvCopyDataToQueue>
 800b546:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d010      	beq.n	800b572 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b552:	3324      	adds	r3, #36	; 0x24
 800b554:	4618      	mov	r0, r3
 800b556:	f001 fa4d 	bl	800c9f4 <xTaskRemoveFromEventList>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d013      	beq.n	800b588 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b560:	4b3f      	ldr	r3, [pc, #252]	; (800b660 <xQueueGenericSend+0x1f8>)
 800b562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b566:	601a      	str	r2, [r3, #0]
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	e00a      	b.n	800b588 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b574:	2b00      	cmp	r3, #0
 800b576:	d007      	beq.n	800b588 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b578:	4b39      	ldr	r3, [pc, #228]	; (800b660 <xQueueGenericSend+0x1f8>)
 800b57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b57e:	601a      	str	r2, [r3, #0]
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b588:	f002 fb7c 	bl	800dc84 <vPortExitCritical>
				return pdPASS;
 800b58c:	2301      	movs	r3, #1
 800b58e:	e063      	b.n	800b658 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d103      	bne.n	800b59e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b596:	f002 fb75 	bl	800dc84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b59a:	2300      	movs	r3, #0
 800b59c:	e05c      	b.n	800b658 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d106      	bne.n	800b5b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b5a4:	f107 0314 	add.w	r3, r7, #20
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f001 fa87 	bl	800cabc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5b2:	f002 fb67 	bl	800dc84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5b6:	f000 fff9 	bl	800c5ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5ba:	f002 fb33 	bl	800dc24 <vPortEnterCritical>
 800b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5c4:	b25b      	sxtb	r3, r3
 800b5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ca:	d103      	bne.n	800b5d4 <xQueueGenericSend+0x16c>
 800b5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5da:	b25b      	sxtb	r3, r3
 800b5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5e0:	d103      	bne.n	800b5ea <xQueueGenericSend+0x182>
 800b5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5ea:	f002 fb4b 	bl	800dc84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5ee:	1d3a      	adds	r2, r7, #4
 800b5f0:	f107 0314 	add.w	r3, r7, #20
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f001 fa76 	bl	800cae8 <xTaskCheckForTimeOut>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d124      	bne.n	800b64c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b604:	f000 fcf5 	bl	800bff2 <prvIsQueueFull>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d018      	beq.n	800b640 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b610:	3310      	adds	r3, #16
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	4611      	mov	r1, r2
 800b616:	4618      	mov	r0, r3
 800b618:	f001 f99c 	bl	800c954 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b61c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b61e:	f000 fc80 	bl	800bf22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b622:	f000 ffd1 	bl	800c5c8 <xTaskResumeAll>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f47f af7c 	bne.w	800b526 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b62e:	4b0c      	ldr	r3, [pc, #48]	; (800b660 <xQueueGenericSend+0x1f8>)
 800b630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b634:	601a      	str	r2, [r3, #0]
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	e772      	b.n	800b526 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b642:	f000 fc6e 	bl	800bf22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b646:	f000 ffbf 	bl	800c5c8 <xTaskResumeAll>
 800b64a:	e76c      	b.n	800b526 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b64c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b64e:	f000 fc68 	bl	800bf22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b652:	f000 ffb9 	bl	800c5c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b656:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3738      	adds	r7, #56	; 0x38
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	e000ed04 	.word	0xe000ed04

0800b664 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b090      	sub	sp, #64	; 0x40
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	607a      	str	r2, [r7, #4]
 800b670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10a      	bne.n	800b692 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b680:	f383 8811 	msr	BASEPRI, r3
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b68e:	bf00      	nop
 800b690:	e7fe      	b.n	800b690 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d103      	bne.n	800b6a0 <xQueueGenericSendFromISR+0x3c>
 800b698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d101      	bne.n	800b6a4 <xQueueGenericSendFromISR+0x40>
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e000      	b.n	800b6a6 <xQueueGenericSendFromISR+0x42>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10a      	bne.n	800b6c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ae:	f383 8811 	msr	BASEPRI, r3
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	f3bf 8f4f 	dsb	sy
 800b6ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6bc:	bf00      	nop
 800b6be:	e7fe      	b.n	800b6be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d103      	bne.n	800b6ce <xQueueGenericSendFromISR+0x6a>
 800b6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d101      	bne.n	800b6d2 <xQueueGenericSendFromISR+0x6e>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e000      	b.n	800b6d4 <xQueueGenericSendFromISR+0x70>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d10a      	bne.n	800b6ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6dc:	f383 8811 	msr	BASEPRI, r3
 800b6e0:	f3bf 8f6f 	isb	sy
 800b6e4:	f3bf 8f4f 	dsb	sy
 800b6e8:	623b      	str	r3, [r7, #32]
}
 800b6ea:	bf00      	nop
 800b6ec:	e7fe      	b.n	800b6ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6ee:	f002 fb7b 	bl	800dde8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b6f2:	f3ef 8211 	mrs	r2, BASEPRI
 800b6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fa:	f383 8811 	msr	BASEPRI, r3
 800b6fe:	f3bf 8f6f 	isb	sy
 800b702:	f3bf 8f4f 	dsb	sy
 800b706:	61fa      	str	r2, [r7, #28]
 800b708:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b70a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b70c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b716:	429a      	cmp	r2, r3
 800b718:	d302      	bcc.n	800b720 <xQueueGenericSendFromISR+0xbc>
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d12f      	bne.n	800b780 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b722:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b730:	683a      	ldr	r2, [r7, #0]
 800b732:	68b9      	ldr	r1, [r7, #8]
 800b734:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b736:	f000 fb64 	bl	800be02 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b73a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b742:	d112      	bne.n	800b76a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d016      	beq.n	800b77a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74e:	3324      	adds	r3, #36	; 0x24
 800b750:	4618      	mov	r0, r3
 800b752:	f001 f94f 	bl	800c9f4 <xTaskRemoveFromEventList>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00e      	beq.n	800b77a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00b      	beq.n	800b77a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2201      	movs	r2, #1
 800b766:	601a      	str	r2, [r3, #0]
 800b768:	e007      	b.n	800b77a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b76a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b76e:	3301      	adds	r3, #1
 800b770:	b2db      	uxtb	r3, r3
 800b772:	b25a      	sxtb	r2, r3
 800b774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b77a:	2301      	movs	r3, #1
 800b77c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b77e:	e001      	b.n	800b784 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b780:	2300      	movs	r3, #0
 800b782:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b786:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b78e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b792:	4618      	mov	r0, r3
 800b794:	3740      	adds	r7, #64	; 0x40
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b08e      	sub	sp, #56	; 0x38
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d10a      	bne.n	800b7c4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b2:	f383 8811 	msr	BASEPRI, r3
 800b7b6:	f3bf 8f6f 	isb	sy
 800b7ba:	f3bf 8f4f 	dsb	sy
 800b7be:	623b      	str	r3, [r7, #32]
}
 800b7c0:	bf00      	nop
 800b7c2:	e7fe      	b.n	800b7c2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00a      	beq.n	800b7e2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d0:	f383 8811 	msr	BASEPRI, r3
 800b7d4:	f3bf 8f6f 	isb	sy
 800b7d8:	f3bf 8f4f 	dsb	sy
 800b7dc:	61fb      	str	r3, [r7, #28]
}
 800b7de:	bf00      	nop
 800b7e0:	e7fe      	b.n	800b7e0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d103      	bne.n	800b7f2 <xQueueGiveFromISR+0x58>
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d101      	bne.n	800b7f6 <xQueueGiveFromISR+0x5c>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e000      	b.n	800b7f8 <xQueueGiveFromISR+0x5e>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10a      	bne.n	800b812 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	61bb      	str	r3, [r7, #24]
}
 800b80e:	bf00      	nop
 800b810:	e7fe      	b.n	800b810 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b812:	f002 fae9 	bl	800dde8 <vPortValidateInterruptPriority>
	__asm volatile
 800b816:	f3ef 8211 	mrs	r2, BASEPRI
 800b81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	617a      	str	r2, [r7, #20]
 800b82c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b82e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b830:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b836:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b83c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b83e:	429a      	cmp	r2, r3
 800b840:	d22b      	bcs.n	800b89a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84e:	1c5a      	adds	r2, r3, #1
 800b850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b852:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b854:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b85c:	d112      	bne.n	800b884 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b862:	2b00      	cmp	r3, #0
 800b864:	d016      	beq.n	800b894 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b868:	3324      	adds	r3, #36	; 0x24
 800b86a:	4618      	mov	r0, r3
 800b86c:	f001 f8c2 	bl	800c9f4 <xTaskRemoveFromEventList>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00e      	beq.n	800b894 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00b      	beq.n	800b894 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2201      	movs	r2, #1
 800b880:	601a      	str	r2, [r3, #0]
 800b882:	e007      	b.n	800b894 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b888:	3301      	adds	r3, #1
 800b88a:	b2db      	uxtb	r3, r3
 800b88c:	b25a      	sxtb	r2, r3
 800b88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b894:	2301      	movs	r3, #1
 800b896:	637b      	str	r3, [r7, #52]	; 0x34
 800b898:	e001      	b.n	800b89e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b89a:	2300      	movs	r3, #0
 800b89c:	637b      	str	r3, [r7, #52]	; 0x34
 800b89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f383 8811 	msr	BASEPRI, r3
}
 800b8a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3738      	adds	r7, #56	; 0x38
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b08c      	sub	sp, #48	; 0x30
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10a      	bne.n	800b8e4 <xQueueReceive+0x30>
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	623b      	str	r3, [r7, #32]
}
 800b8e0:	bf00      	nop
 800b8e2:	e7fe      	b.n	800b8e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d103      	bne.n	800b8f2 <xQueueReceive+0x3e>
 800b8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d101      	bne.n	800b8f6 <xQueueReceive+0x42>
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e000      	b.n	800b8f8 <xQueueReceive+0x44>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d10a      	bne.n	800b912 <xQueueReceive+0x5e>
	__asm volatile
 800b8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b900:	f383 8811 	msr	BASEPRI, r3
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	61fb      	str	r3, [r7, #28]
}
 800b90e:	bf00      	nop
 800b910:	e7fe      	b.n	800b910 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b912:	f001 fa2d 	bl	800cd70 <xTaskGetSchedulerState>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d102      	bne.n	800b922 <xQueueReceive+0x6e>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d101      	bne.n	800b926 <xQueueReceive+0x72>
 800b922:	2301      	movs	r3, #1
 800b924:	e000      	b.n	800b928 <xQueueReceive+0x74>
 800b926:	2300      	movs	r3, #0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10a      	bne.n	800b942 <xQueueReceive+0x8e>
	__asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	61bb      	str	r3, [r7, #24]
}
 800b93e:	bf00      	nop
 800b940:	e7fe      	b.n	800b940 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b942:	f002 f96f 	bl	800dc24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b94a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d01f      	beq.n	800b992 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b952:	68b9      	ldr	r1, [r7, #8]
 800b954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b956:	f000 fabe 	bl	800bed6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	1e5a      	subs	r2, r3, #1
 800b95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b960:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00f      	beq.n	800b98a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96c:	3310      	adds	r3, #16
 800b96e:	4618      	mov	r0, r3
 800b970:	f001 f840 	bl	800c9f4 <xTaskRemoveFromEventList>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d007      	beq.n	800b98a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b97a:	4b3d      	ldr	r3, [pc, #244]	; (800ba70 <xQueueReceive+0x1bc>)
 800b97c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b980:	601a      	str	r2, [r3, #0]
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b98a:	f002 f97b 	bl	800dc84 <vPortExitCritical>
				return pdPASS;
 800b98e:	2301      	movs	r3, #1
 800b990:	e069      	b.n	800ba66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d103      	bne.n	800b9a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b998:	f002 f974 	bl	800dc84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b99c:	2300      	movs	r3, #0
 800b99e:	e062      	b.n	800ba66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d106      	bne.n	800b9b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9a6:	f107 0310 	add.w	r3, r7, #16
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f001 f886 	bl	800cabc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9b4:	f002 f966 	bl	800dc84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9b8:	f000 fdf8 	bl	800c5ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9bc:	f002 f932 	bl	800dc24 <vPortEnterCritical>
 800b9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9c6:	b25b      	sxtb	r3, r3
 800b9c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9cc:	d103      	bne.n	800b9d6 <xQueueReceive+0x122>
 800b9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9dc:	b25b      	sxtb	r3, r3
 800b9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e2:	d103      	bne.n	800b9ec <xQueueReceive+0x138>
 800b9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9ec:	f002 f94a 	bl	800dc84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9f0:	1d3a      	adds	r2, r7, #4
 800b9f2:	f107 0310 	add.w	r3, r7, #16
 800b9f6:	4611      	mov	r1, r2
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f001 f875 	bl	800cae8 <xTaskCheckForTimeOut>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d123      	bne.n	800ba4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba06:	f000 fade 	bl	800bfc6 <prvIsQueueEmpty>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d017      	beq.n	800ba40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba12:	3324      	adds	r3, #36	; 0x24
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	4611      	mov	r1, r2
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f000 ff9b 	bl	800c954 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba20:	f000 fa7f 	bl	800bf22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba24:	f000 fdd0 	bl	800c5c8 <xTaskResumeAll>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d189      	bne.n	800b942 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ba2e:	4b10      	ldr	r3, [pc, #64]	; (800ba70 <xQueueReceive+0x1bc>)
 800ba30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba34:	601a      	str	r2, [r3, #0]
 800ba36:	f3bf 8f4f 	dsb	sy
 800ba3a:	f3bf 8f6f 	isb	sy
 800ba3e:	e780      	b.n	800b942 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba42:	f000 fa6e 	bl	800bf22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba46:	f000 fdbf 	bl	800c5c8 <xTaskResumeAll>
 800ba4a:	e77a      	b.n	800b942 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba4e:	f000 fa68 	bl	800bf22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba52:	f000 fdb9 	bl	800c5c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba58:	f000 fab5 	bl	800bfc6 <prvIsQueueEmpty>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f43f af6f 	beq.w	800b942 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3730      	adds	r7, #48	; 0x30
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	e000ed04 	.word	0xe000ed04

0800ba74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b08e      	sub	sp, #56	; 0x38
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ba86:	2300      	movs	r3, #0
 800ba88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d10a      	bne.n	800baa6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ba90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba94:	f383 8811 	msr	BASEPRI, r3
 800ba98:	f3bf 8f6f 	isb	sy
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	623b      	str	r3, [r7, #32]
}
 800baa2:	bf00      	nop
 800baa4:	e7fe      	b.n	800baa4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800baa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00a      	beq.n	800bac4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	61fb      	str	r3, [r7, #28]
}
 800bac0:	bf00      	nop
 800bac2:	e7fe      	b.n	800bac2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bac4:	f001 f954 	bl	800cd70 <xTaskGetSchedulerState>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d102      	bne.n	800bad4 <xQueueSemaphoreTake+0x60>
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d101      	bne.n	800bad8 <xQueueSemaphoreTake+0x64>
 800bad4:	2301      	movs	r3, #1
 800bad6:	e000      	b.n	800bada <xQueueSemaphoreTake+0x66>
 800bad8:	2300      	movs	r3, #0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d10a      	bne.n	800baf4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae2:	f383 8811 	msr	BASEPRI, r3
 800bae6:	f3bf 8f6f 	isb	sy
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	61bb      	str	r3, [r7, #24]
}
 800baf0:	bf00      	nop
 800baf2:	e7fe      	b.n	800baf2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800baf4:	f002 f896 	bl	800dc24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800baf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bafc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d024      	beq.n	800bb4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb06:	1e5a      	subs	r2, r3, #1
 800bb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d104      	bne.n	800bb1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bb14:	f001 faa2 	bl	800d05c <pvTaskIncrementMutexHeldCount>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00f      	beq.n	800bb46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb28:	3310      	adds	r3, #16
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f000 ff62 	bl	800c9f4 <xTaskRemoveFromEventList>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d007      	beq.n	800bb46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb36:	4b54      	ldr	r3, [pc, #336]	; (800bc88 <xQueueSemaphoreTake+0x214>)
 800bb38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb3c:	601a      	str	r2, [r3, #0]
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb46:	f002 f89d 	bl	800dc84 <vPortExitCritical>
				return pdPASS;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e097      	b.n	800bc7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d111      	bne.n	800bb78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d00a      	beq.n	800bb70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5e:	f383 8811 	msr	BASEPRI, r3
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	617b      	str	r3, [r7, #20]
}
 800bb6c:	bf00      	nop
 800bb6e:	e7fe      	b.n	800bb6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bb70:	f002 f888 	bl	800dc84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb74:	2300      	movs	r3, #0
 800bb76:	e082      	b.n	800bc7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d106      	bne.n	800bb8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb7e:	f107 030c 	add.w	r3, r7, #12
 800bb82:	4618      	mov	r0, r3
 800bb84:	f000 ff9a 	bl	800cabc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb8c:	f002 f87a 	bl	800dc84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb90:	f000 fd0c 	bl	800c5ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb94:	f002 f846 	bl	800dc24 <vPortEnterCritical>
 800bb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb9e:	b25b      	sxtb	r3, r3
 800bba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba4:	d103      	bne.n	800bbae <xQueueSemaphoreTake+0x13a>
 800bba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbb4:	b25b      	sxtb	r3, r3
 800bbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbba:	d103      	bne.n	800bbc4 <xQueueSemaphoreTake+0x150>
 800bbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbc4:	f002 f85e 	bl	800dc84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbc8:	463a      	mov	r2, r7
 800bbca:	f107 030c 	add.w	r3, r7, #12
 800bbce:	4611      	mov	r1, r2
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f000 ff89 	bl	800cae8 <xTaskCheckForTimeOut>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d132      	bne.n	800bc42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbde:	f000 f9f2 	bl	800bfc6 <prvIsQueueEmpty>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d026      	beq.n	800bc36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d109      	bne.n	800bc04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bbf0:	f002 f818 	bl	800dc24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f001 f8d7 	bl	800cdac <xTaskPriorityInherit>
 800bbfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bc00:	f002 f840 	bl	800dc84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc06:	3324      	adds	r3, #36	; 0x24
 800bc08:	683a      	ldr	r2, [r7, #0]
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f000 fea1 	bl	800c954 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc14:	f000 f985 	bl	800bf22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc18:	f000 fcd6 	bl	800c5c8 <xTaskResumeAll>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f47f af68 	bne.w	800baf4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bc24:	4b18      	ldr	r3, [pc, #96]	; (800bc88 <xQueueSemaphoreTake+0x214>)
 800bc26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc2a:	601a      	str	r2, [r3, #0]
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	f3bf 8f6f 	isb	sy
 800bc34:	e75e      	b.n	800baf4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bc36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc38:	f000 f973 	bl	800bf22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc3c:	f000 fcc4 	bl	800c5c8 <xTaskResumeAll>
 800bc40:	e758      	b.n	800baf4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bc42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc44:	f000 f96d 	bl	800bf22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc48:	f000 fcbe 	bl	800c5c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc4e:	f000 f9ba 	bl	800bfc6 <prvIsQueueEmpty>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f43f af4d 	beq.w	800baf4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00d      	beq.n	800bc7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bc60:	f001 ffe0 	bl	800dc24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bc64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc66:	f000 f8b4 	bl	800bdd2 <prvGetDisinheritPriorityAfterTimeout>
 800bc6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc72:	4618      	mov	r0, r3
 800bc74:	f001 f970 	bl	800cf58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bc78:	f002 f804 	bl	800dc84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3738      	adds	r7, #56	; 0x38
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	e000ed04 	.word	0xe000ed04

0800bc8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b08e      	sub	sp, #56	; 0x38
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d10a      	bne.n	800bcb8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca6:	f383 8811 	msr	BASEPRI, r3
 800bcaa:	f3bf 8f6f 	isb	sy
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	623b      	str	r3, [r7, #32]
}
 800bcb4:	bf00      	nop
 800bcb6:	e7fe      	b.n	800bcb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d103      	bne.n	800bcc6 <xQueueReceiveFromISR+0x3a>
 800bcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d101      	bne.n	800bcca <xQueueReceiveFromISR+0x3e>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e000      	b.n	800bccc <xQueueReceiveFromISR+0x40>
 800bcca:	2300      	movs	r3, #0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10a      	bne.n	800bce6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	61fb      	str	r3, [r7, #28]
}
 800bce2:	bf00      	nop
 800bce4:	e7fe      	b.n	800bce4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bce6:	f002 f87f 	bl	800dde8 <vPortValidateInterruptPriority>
	__asm volatile
 800bcea:	f3ef 8211 	mrs	r2, BASEPRI
 800bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	61ba      	str	r2, [r7, #24]
 800bd00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bd02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d02f      	beq.n	800bd72 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd1c:	68b9      	ldr	r1, [r7, #8]
 800bd1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd20:	f000 f8d9 	bl	800bed6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd26:	1e5a      	subs	r2, r3, #1
 800bd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bd2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd34:	d112      	bne.n	800bd5c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd38:	691b      	ldr	r3, [r3, #16]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d016      	beq.n	800bd6c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	3310      	adds	r3, #16
 800bd42:	4618      	mov	r0, r3
 800bd44:	f000 fe56 	bl	800c9f4 <xTaskRemoveFromEventList>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00e      	beq.n	800bd6c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00b      	beq.n	800bd6c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2201      	movs	r2, #1
 800bd58:	601a      	str	r2, [r3, #0]
 800bd5a:	e007      	b.n	800bd6c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bd5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd60:	3301      	adds	r3, #1
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	b25a      	sxtb	r2, r3
 800bd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	637b      	str	r3, [r7, #52]	; 0x34
 800bd70:	e001      	b.n	800bd76 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bd72:	2300      	movs	r3, #0
 800bd74:	637b      	str	r3, [r7, #52]	; 0x34
 800bd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd78:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	f383 8811 	msr	BASEPRI, r3
}
 800bd80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3738      	adds	r7, #56	; 0x38
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10a      	bne.n	800bdb4 <vQueueDelete+0x28>
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	60bb      	str	r3, [r7, #8]
}
 800bdb0:	bf00      	nop
 800bdb2:	e7fe      	b.n	800bdb2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bdb4:	68f8      	ldr	r0, [r7, #12]
 800bdb6:	f000 f95f 	bl	800c078 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d102      	bne.n	800bdca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f002 f91b 	bl	800e000 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bdca:	bf00      	nop
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bdd2:	b480      	push	{r7}
 800bdd4:	b085      	sub	sp, #20
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d006      	beq.n	800bdf0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800bdec:	60fb      	str	r3, [r7, #12]
 800bdee:	e001      	b.n	800bdf4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
	}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3714      	adds	r7, #20
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr

0800be02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b086      	sub	sp, #24
 800be06:	af00      	add	r7, sp, #0
 800be08:	60f8      	str	r0, [r7, #12]
 800be0a:	60b9      	str	r1, [r7, #8]
 800be0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800be0e:	2300      	movs	r3, #0
 800be10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10d      	bne.n	800be3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d14d      	bne.n	800bec4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f001 f825 	bl	800ce7c <xTaskPriorityDisinherit>
 800be32:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2200      	movs	r2, #0
 800be38:	609a      	str	r2, [r3, #8]
 800be3a:	e043      	b.n	800bec4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d119      	bne.n	800be76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	6858      	ldr	r0, [r3, #4]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4a:	461a      	mov	r2, r3
 800be4c:	68b9      	ldr	r1, [r7, #8]
 800be4e:	f002 fa23 	bl	800e298 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	685a      	ldr	r2, [r3, #4]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be5a:	441a      	add	r2, r3
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	685a      	ldr	r2, [r3, #4]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d32b      	bcc.n	800bec4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	605a      	str	r2, [r3, #4]
 800be74:	e026      	b.n	800bec4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	68d8      	ldr	r0, [r3, #12]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7e:	461a      	mov	r2, r3
 800be80:	68b9      	ldr	r1, [r7, #8]
 800be82:	f002 fa09 	bl	800e298 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	68da      	ldr	r2, [r3, #12]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8e:	425b      	negs	r3, r3
 800be90:	441a      	add	r2, r3
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	68da      	ldr	r2, [r3, #12]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d207      	bcs.n	800beb2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	689a      	ldr	r2, [r3, #8]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beaa:	425b      	negs	r3, r3
 800beac:	441a      	add	r2, r3
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	d105      	bne.n	800bec4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d002      	beq.n	800bec4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	3b01      	subs	r3, #1
 800bec2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	1c5a      	adds	r2, r3, #1
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800becc:	697b      	ldr	r3, [r7, #20]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3718      	adds	r7, #24
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b082      	sub	sp, #8
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
 800bede:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d018      	beq.n	800bf1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	68da      	ldr	r2, [r3, #12]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef0:	441a      	add	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	68da      	ldr	r2, [r3, #12]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d303      	bcc.n	800bf0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	68d9      	ldr	r1, [r3, #12]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf12:	461a      	mov	r2, r3
 800bf14:	6838      	ldr	r0, [r7, #0]
 800bf16:	f002 f9bf 	bl	800e298 <memcpy>
	}
}
 800bf1a:	bf00      	nop
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b084      	sub	sp, #16
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bf2a:	f001 fe7b 	bl	800dc24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf36:	e011      	b.n	800bf5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d012      	beq.n	800bf66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	3324      	adds	r3, #36	; 0x24
 800bf44:	4618      	mov	r0, r3
 800bf46:	f000 fd55 	bl	800c9f4 <xTaskRemoveFromEventList>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d001      	beq.n	800bf54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bf50:	f000 fe2c 	bl	800cbac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bf54:	7bfb      	ldrb	r3, [r7, #15]
 800bf56:	3b01      	subs	r3, #1
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	dce9      	bgt.n	800bf38 <prvUnlockQueue+0x16>
 800bf64:	e000      	b.n	800bf68 <prvUnlockQueue+0x46>
					break;
 800bf66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	22ff      	movs	r2, #255	; 0xff
 800bf6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bf70:	f001 fe88 	bl	800dc84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bf74:	f001 fe56 	bl	800dc24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf80:	e011      	b.n	800bfa6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d012      	beq.n	800bfb0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	3310      	adds	r3, #16
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f000 fd30 	bl	800c9f4 <xTaskRemoveFromEventList>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d001      	beq.n	800bf9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bf9a:	f000 fe07 	bl	800cbac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bf9e:	7bbb      	ldrb	r3, [r7, #14]
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bfa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	dce9      	bgt.n	800bf82 <prvUnlockQueue+0x60>
 800bfae:	e000      	b.n	800bfb2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bfb0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	22ff      	movs	r2, #255	; 0xff
 800bfb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bfba:	f001 fe63 	bl	800dc84 <vPortExitCritical>
}
 800bfbe:	bf00      	nop
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b084      	sub	sp, #16
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bfce:	f001 fe29 	bl	800dc24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d102      	bne.n	800bfe0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	60fb      	str	r3, [r7, #12]
 800bfde:	e001      	b.n	800bfe4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bfe4:	f001 fe4e 	bl	800dc84 <vPortExitCritical>

	return xReturn;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3710      	adds	r7, #16
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b084      	sub	sp, #16
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bffa:	f001 fe13 	bl	800dc24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c006:	429a      	cmp	r2, r3
 800c008:	d102      	bne.n	800c010 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c00a:	2301      	movs	r3, #1
 800c00c:	60fb      	str	r3, [r7, #12]
 800c00e:	e001      	b.n	800c014 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c010:	2300      	movs	r3, #0
 800c012:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c014:	f001 fe36 	bl	800dc84 <vPortExitCritical>

	return xReturn;
 800c018:	68fb      	ldr	r3, [r7, #12]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
	...

0800c024 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c02e:	2300      	movs	r3, #0
 800c030:	60fb      	str	r3, [r7, #12]
 800c032:	e014      	b.n	800c05e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c034:	4a0f      	ldr	r2, [pc, #60]	; (800c074 <vQueueAddToRegistry+0x50>)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d10b      	bne.n	800c058 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c040:	490c      	ldr	r1, [pc, #48]	; (800c074 <vQueueAddToRegistry+0x50>)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	683a      	ldr	r2, [r7, #0]
 800c046:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c04a:	4a0a      	ldr	r2, [pc, #40]	; (800c074 <vQueueAddToRegistry+0x50>)
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	00db      	lsls	r3, r3, #3
 800c050:	4413      	add	r3, r2
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c056:	e006      	b.n	800c066 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	3301      	adds	r3, #1
 800c05c:	60fb      	str	r3, [r7, #12]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2b07      	cmp	r3, #7
 800c062:	d9e7      	bls.n	800c034 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c064:	bf00      	nop
 800c066:	bf00      	nop
 800c068:	3714      	adds	r7, #20
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	20005968 	.word	0x20005968

0800c078 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c080:	2300      	movs	r3, #0
 800c082:	60fb      	str	r3, [r7, #12]
 800c084:	e016      	b.n	800c0b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c086:	4a10      	ldr	r2, [pc, #64]	; (800c0c8 <vQueueUnregisterQueue+0x50>)
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	00db      	lsls	r3, r3, #3
 800c08c:	4413      	add	r3, r2
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	429a      	cmp	r2, r3
 800c094:	d10b      	bne.n	800c0ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c096:	4a0c      	ldr	r2, [pc, #48]	; (800c0c8 <vQueueUnregisterQueue+0x50>)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2100      	movs	r1, #0
 800c09c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c0a0:	4a09      	ldr	r2, [pc, #36]	; (800c0c8 <vQueueUnregisterQueue+0x50>)
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	00db      	lsls	r3, r3, #3
 800c0a6:	4413      	add	r3, r2
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	605a      	str	r2, [r3, #4]
				break;
 800c0ac:	e006      	b.n	800c0bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	60fb      	str	r3, [r7, #12]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2b07      	cmp	r3, #7
 800c0b8:	d9e5      	bls.n	800c086 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c0ba:	bf00      	nop
 800c0bc:	bf00      	nop
 800c0be:	3714      	adds	r7, #20
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	20005968 	.word	0x20005968

0800c0cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b086      	sub	sp, #24
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c0dc:	f001 fda2 	bl	800dc24 <vPortEnterCritical>
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0e6:	b25b      	sxtb	r3, r3
 800c0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ec:	d103      	bne.n	800c0f6 <vQueueWaitForMessageRestricted+0x2a>
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0fc:	b25b      	sxtb	r3, r3
 800c0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c102:	d103      	bne.n	800c10c <vQueueWaitForMessageRestricted+0x40>
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	2200      	movs	r2, #0
 800c108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c10c:	f001 fdba 	bl	800dc84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c114:	2b00      	cmp	r3, #0
 800c116:	d106      	bne.n	800c126 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	3324      	adds	r3, #36	; 0x24
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	68b9      	ldr	r1, [r7, #8]
 800c120:	4618      	mov	r0, r3
 800c122:	f000 fc3b 	bl	800c99c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c126:	6978      	ldr	r0, [r7, #20]
 800c128:	f7ff fefb 	bl	800bf22 <prvUnlockQueue>
	}
 800c12c:	bf00      	nop
 800c12e:	3718      	adds	r7, #24
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c134:	b580      	push	{r7, lr}
 800c136:	b08e      	sub	sp, #56	; 0x38
 800c138:	af04      	add	r7, sp, #16
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
 800c140:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10a      	bne.n	800c15e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	623b      	str	r3, [r7, #32]
}
 800c15a:	bf00      	nop
 800c15c:	e7fe      	b.n	800c15c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10a      	bne.n	800c17a <xTaskCreateStatic+0x46>
	__asm volatile
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	61fb      	str	r3, [r7, #28]
}
 800c176:	bf00      	nop
 800c178:	e7fe      	b.n	800c178 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c17a:	235c      	movs	r3, #92	; 0x5c
 800c17c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	2b5c      	cmp	r3, #92	; 0x5c
 800c182:	d00a      	beq.n	800c19a <xTaskCreateStatic+0x66>
	__asm volatile
 800c184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c188:	f383 8811 	msr	BASEPRI, r3
 800c18c:	f3bf 8f6f 	isb	sy
 800c190:	f3bf 8f4f 	dsb	sy
 800c194:	61bb      	str	r3, [r7, #24]
}
 800c196:	bf00      	nop
 800c198:	e7fe      	b.n	800c198 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c19a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d01e      	beq.n	800c1e0 <xTaskCreateStatic+0xac>
 800c1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d01b      	beq.n	800c1e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b4:	2202      	movs	r2, #2
 800c1b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	9303      	str	r3, [sp, #12]
 800c1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c0:	9302      	str	r3, [sp, #8]
 800c1c2:	f107 0314 	add.w	r3, r7, #20
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	68b9      	ldr	r1, [r7, #8]
 800c1d2:	68f8      	ldr	r0, [r7, #12]
 800c1d4:	f000 f850 	bl	800c278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1da:	f000 f8dd 	bl	800c398 <prvAddNewTaskToReadyList>
 800c1de:	e001      	b.n	800c1e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c1e4:	697b      	ldr	r3, [r7, #20]
	}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3728      	adds	r7, #40	; 0x28
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b08c      	sub	sp, #48	; 0x30
 800c1f2:	af04      	add	r7, sp, #16
 800c1f4:	60f8      	str	r0, [r7, #12]
 800c1f6:	60b9      	str	r1, [r7, #8]
 800c1f8:	603b      	str	r3, [r7, #0]
 800c1fa:	4613      	mov	r3, r2
 800c1fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c1fe:	88fb      	ldrh	r3, [r7, #6]
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	4618      	mov	r0, r3
 800c204:	f001 fe30 	bl	800de68 <pvPortMalloc>
 800c208:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00e      	beq.n	800c22e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c210:	205c      	movs	r0, #92	; 0x5c
 800c212:	f001 fe29 	bl	800de68 <pvPortMalloc>
 800c216:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d003      	beq.n	800c226 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c21e:	69fb      	ldr	r3, [r7, #28]
 800c220:	697a      	ldr	r2, [r7, #20]
 800c222:	631a      	str	r2, [r3, #48]	; 0x30
 800c224:	e005      	b.n	800c232 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c226:	6978      	ldr	r0, [r7, #20]
 800c228:	f001 feea 	bl	800e000 <vPortFree>
 800c22c:	e001      	b.n	800c232 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c22e:	2300      	movs	r3, #0
 800c230:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d017      	beq.n	800c268 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c240:	88fa      	ldrh	r2, [r7, #6]
 800c242:	2300      	movs	r3, #0
 800c244:	9303      	str	r3, [sp, #12]
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	9302      	str	r3, [sp, #8]
 800c24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24c:	9301      	str	r3, [sp, #4]
 800c24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c250:	9300      	str	r3, [sp, #0]
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	68b9      	ldr	r1, [r7, #8]
 800c256:	68f8      	ldr	r0, [r7, #12]
 800c258:	f000 f80e 	bl	800c278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c25c:	69f8      	ldr	r0, [r7, #28]
 800c25e:	f000 f89b 	bl	800c398 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c262:	2301      	movs	r3, #1
 800c264:	61bb      	str	r3, [r7, #24]
 800c266:	e002      	b.n	800c26e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c268:	f04f 33ff 	mov.w	r3, #4294967295
 800c26c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c26e:	69bb      	ldr	r3, [r7, #24]
	}
 800c270:	4618      	mov	r0, r3
 800c272:	3720      	adds	r7, #32
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b088      	sub	sp, #32
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	607a      	str	r2, [r7, #4]
 800c284:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c288:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	461a      	mov	r2, r3
 800c290:	21a5      	movs	r1, #165	; 0xa5
 800c292:	f002 f80f 	bl	800e2b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	4413      	add	r3, r2
 800c2a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	f023 0307 	bic.w	r3, r3, #7
 800c2ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	f003 0307 	and.w	r3, r3, #7
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00a      	beq.n	800c2d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	617b      	str	r3, [r7, #20]
}
 800c2cc:	bf00      	nop
 800c2ce:	e7fe      	b.n	800c2ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d01f      	beq.n	800c316 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	61fb      	str	r3, [r7, #28]
 800c2da:	e012      	b.n	800c302 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	7819      	ldrb	r1, [r3, #0]
 800c2e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	3334      	adds	r3, #52	; 0x34
 800c2ec:	460a      	mov	r2, r1
 800c2ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c2f0:	68ba      	ldr	r2, [r7, #8]
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d006      	beq.n	800c30a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	3301      	adds	r3, #1
 800c300:	61fb      	str	r3, [r7, #28]
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	2b0f      	cmp	r3, #15
 800c306:	d9e9      	bls.n	800c2dc <prvInitialiseNewTask+0x64>
 800c308:	e000      	b.n	800c30c <prvInitialiseNewTask+0x94>
			{
				break;
 800c30a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30e:	2200      	movs	r2, #0
 800c310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c314:	e003      	b.n	800c31e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c318:	2200      	movs	r2, #0
 800c31a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c320:	2b37      	cmp	r3, #55	; 0x37
 800c322:	d901      	bls.n	800c328 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c324:	2337      	movs	r3, #55	; 0x37
 800c326:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c32c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c332:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c336:	2200      	movs	r2, #0
 800c338:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33c:	3304      	adds	r3, #4
 800c33e:	4618      	mov	r0, r3
 800c340:	f7fe fe56 	bl	800aff0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c346:	3318      	adds	r3, #24
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fe fe51 	bl	800aff0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c352:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c356:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c362:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c366:	2200      	movs	r2, #0
 800c368:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36c:	2200      	movs	r2, #0
 800c36e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	68f9      	ldr	r1, [r7, #12]
 800c376:	69b8      	ldr	r0, [r7, #24]
 800c378:	f001 fb26 	bl	800d9c8 <pxPortInitialiseStack>
 800c37c:	4602      	mov	r2, r0
 800c37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c380:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c384:	2b00      	cmp	r3, #0
 800c386:	d002      	beq.n	800c38e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c38c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c38e:	bf00      	nop
 800c390:	3720      	adds	r7, #32
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
	...

0800c398 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c3a0:	f001 fc40 	bl	800dc24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c3a4:	4b2d      	ldr	r3, [pc, #180]	; (800c45c <prvAddNewTaskToReadyList+0xc4>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	4a2c      	ldr	r2, [pc, #176]	; (800c45c <prvAddNewTaskToReadyList+0xc4>)
 800c3ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c3ae:	4b2c      	ldr	r3, [pc, #176]	; (800c460 <prvAddNewTaskToReadyList+0xc8>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d109      	bne.n	800c3ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c3b6:	4a2a      	ldr	r2, [pc, #168]	; (800c460 <prvAddNewTaskToReadyList+0xc8>)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c3bc:	4b27      	ldr	r3, [pc, #156]	; (800c45c <prvAddNewTaskToReadyList+0xc4>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d110      	bne.n	800c3e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c3c4:	f000 fc16 	bl	800cbf4 <prvInitialiseTaskLists>
 800c3c8:	e00d      	b.n	800c3e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c3ca:	4b26      	ldr	r3, [pc, #152]	; (800c464 <prvAddNewTaskToReadyList+0xcc>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d109      	bne.n	800c3e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c3d2:	4b23      	ldr	r3, [pc, #140]	; (800c460 <prvAddNewTaskToReadyList+0xc8>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d802      	bhi.n	800c3e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c3e0:	4a1f      	ldr	r2, [pc, #124]	; (800c460 <prvAddNewTaskToReadyList+0xc8>)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c3e6:	4b20      	ldr	r3, [pc, #128]	; (800c468 <prvAddNewTaskToReadyList+0xd0>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	4a1e      	ldr	r2, [pc, #120]	; (800c468 <prvAddNewTaskToReadyList+0xd0>)
 800c3ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c3f0:	4b1d      	ldr	r3, [pc, #116]	; (800c468 <prvAddNewTaskToReadyList+0xd0>)
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3fc:	4b1b      	ldr	r3, [pc, #108]	; (800c46c <prvAddNewTaskToReadyList+0xd4>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	429a      	cmp	r2, r3
 800c402:	d903      	bls.n	800c40c <prvAddNewTaskToReadyList+0x74>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c408:	4a18      	ldr	r2, [pc, #96]	; (800c46c <prvAddNewTaskToReadyList+0xd4>)
 800c40a:	6013      	str	r3, [r2, #0]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c410:	4613      	mov	r3, r2
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	4413      	add	r3, r2
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	4a15      	ldr	r2, [pc, #84]	; (800c470 <prvAddNewTaskToReadyList+0xd8>)
 800c41a:	441a      	add	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	3304      	adds	r3, #4
 800c420:	4619      	mov	r1, r3
 800c422:	4610      	mov	r0, r2
 800c424:	f7fe fdf1 	bl	800b00a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c428:	f001 fc2c 	bl	800dc84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c42c:	4b0d      	ldr	r3, [pc, #52]	; (800c464 <prvAddNewTaskToReadyList+0xcc>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00e      	beq.n	800c452 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c434:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <prvAddNewTaskToReadyList+0xc8>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c43e:	429a      	cmp	r2, r3
 800c440:	d207      	bcs.n	800c452 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c442:	4b0c      	ldr	r3, [pc, #48]	; (800c474 <prvAddNewTaskToReadyList+0xdc>)
 800c444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c448:	601a      	str	r2, [r3, #0]
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c452:	bf00      	nop
 800c454:	3708      	adds	r7, #8
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	20000efc 	.word	0x20000efc
 800c460:	20000a28 	.word	0x20000a28
 800c464:	20000f08 	.word	0x20000f08
 800c468:	20000f18 	.word	0x20000f18
 800c46c:	20000f04 	.word	0x20000f04
 800c470:	20000a2c 	.word	0x20000a2c
 800c474:	e000ed04 	.word	0xe000ed04

0800c478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c480:	2300      	movs	r3, #0
 800c482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d017      	beq.n	800c4ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c48a:	4b13      	ldr	r3, [pc, #76]	; (800c4d8 <vTaskDelay+0x60>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00a      	beq.n	800c4a8 <vTaskDelay+0x30>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	60bb      	str	r3, [r7, #8]
}
 800c4a4:	bf00      	nop
 800c4a6:	e7fe      	b.n	800c4a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c4a8:	f000 f880 	bl	800c5ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 fee8 	bl	800d284 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c4b4:	f000 f888 	bl	800c5c8 <xTaskResumeAll>
 800c4b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d107      	bne.n	800c4d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c4c0:	4b06      	ldr	r3, [pc, #24]	; (800c4dc <vTaskDelay+0x64>)
 800c4c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4c6:	601a      	str	r2, [r3, #0]
 800c4c8:	f3bf 8f4f 	dsb	sy
 800c4cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4d0:	bf00      	nop
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	20000f24 	.word	0x20000f24
 800c4dc:	e000ed04 	.word	0xe000ed04

0800c4e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b08a      	sub	sp, #40	; 0x28
 800c4e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c4ee:	463a      	mov	r2, r7
 800c4f0:	1d39      	adds	r1, r7, #4
 800c4f2:	f107 0308 	add.w	r3, r7, #8
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7fe fd26 	bl	800af48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c4fc:	6839      	ldr	r1, [r7, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	9202      	str	r2, [sp, #8]
 800c504:	9301      	str	r3, [sp, #4]
 800c506:	2300      	movs	r3, #0
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	2300      	movs	r3, #0
 800c50c:	460a      	mov	r2, r1
 800c50e:	4921      	ldr	r1, [pc, #132]	; (800c594 <vTaskStartScheduler+0xb4>)
 800c510:	4821      	ldr	r0, [pc, #132]	; (800c598 <vTaskStartScheduler+0xb8>)
 800c512:	f7ff fe0f 	bl	800c134 <xTaskCreateStatic>
 800c516:	4603      	mov	r3, r0
 800c518:	4a20      	ldr	r2, [pc, #128]	; (800c59c <vTaskStartScheduler+0xbc>)
 800c51a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c51c:	4b1f      	ldr	r3, [pc, #124]	; (800c59c <vTaskStartScheduler+0xbc>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d002      	beq.n	800c52a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c524:	2301      	movs	r3, #1
 800c526:	617b      	str	r3, [r7, #20]
 800c528:	e001      	b.n	800c52e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c52a:	2300      	movs	r3, #0
 800c52c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	2b01      	cmp	r3, #1
 800c532:	d102      	bne.n	800c53a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c534:	f000 fefa 	bl	800d32c <xTimerCreateTimerTask>
 800c538:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d116      	bne.n	800c56e <vTaskStartScheduler+0x8e>
	__asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	613b      	str	r3, [r7, #16]
}
 800c552:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c554:	4b12      	ldr	r3, [pc, #72]	; (800c5a0 <vTaskStartScheduler+0xc0>)
 800c556:	f04f 32ff 	mov.w	r2, #4294967295
 800c55a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c55c:	4b11      	ldr	r3, [pc, #68]	; (800c5a4 <vTaskStartScheduler+0xc4>)
 800c55e:	2201      	movs	r2, #1
 800c560:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c562:	4b11      	ldr	r3, [pc, #68]	; (800c5a8 <vTaskStartScheduler+0xc8>)
 800c564:	2200      	movs	r2, #0
 800c566:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c568:	f001 faba 	bl	800dae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c56c:	e00e      	b.n	800c58c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c574:	d10a      	bne.n	800c58c <vTaskStartScheduler+0xac>
	__asm volatile
 800c576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	60fb      	str	r3, [r7, #12]
}
 800c588:	bf00      	nop
 800c58a:	e7fe      	b.n	800c58a <vTaskStartScheduler+0xaa>
}
 800c58c:	bf00      	nop
 800c58e:	3718      	adds	r7, #24
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	08012c50 	.word	0x08012c50
 800c598:	0800cbc5 	.word	0x0800cbc5
 800c59c:	20000f20 	.word	0x20000f20
 800c5a0:	20000f1c 	.word	0x20000f1c
 800c5a4:	20000f08 	.word	0x20000f08
 800c5a8:	20000f00 	.word	0x20000f00

0800c5ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c5b0:	4b04      	ldr	r3, [pc, #16]	; (800c5c4 <vTaskSuspendAll+0x18>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	4a03      	ldr	r2, [pc, #12]	; (800c5c4 <vTaskSuspendAll+0x18>)
 800c5b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c5ba:	bf00      	nop
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr
 800c5c4:	20000f24 	.word	0x20000f24

0800c5c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c5d6:	4b42      	ldr	r3, [pc, #264]	; (800c6e0 <xTaskResumeAll+0x118>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d10a      	bne.n	800c5f4 <xTaskResumeAll+0x2c>
	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e2:	f383 8811 	msr	BASEPRI, r3
 800c5e6:	f3bf 8f6f 	isb	sy
 800c5ea:	f3bf 8f4f 	dsb	sy
 800c5ee:	603b      	str	r3, [r7, #0]
}
 800c5f0:	bf00      	nop
 800c5f2:	e7fe      	b.n	800c5f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c5f4:	f001 fb16 	bl	800dc24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c5f8:	4b39      	ldr	r3, [pc, #228]	; (800c6e0 <xTaskResumeAll+0x118>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	4a38      	ldr	r2, [pc, #224]	; (800c6e0 <xTaskResumeAll+0x118>)
 800c600:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c602:	4b37      	ldr	r3, [pc, #220]	; (800c6e0 <xTaskResumeAll+0x118>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d162      	bne.n	800c6d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c60a:	4b36      	ldr	r3, [pc, #216]	; (800c6e4 <xTaskResumeAll+0x11c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d05e      	beq.n	800c6d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c612:	e02f      	b.n	800c674 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c614:	4b34      	ldr	r3, [pc, #208]	; (800c6e8 <xTaskResumeAll+0x120>)
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	3318      	adds	r3, #24
 800c620:	4618      	mov	r0, r3
 800c622:	f7fe fd4f 	bl	800b0c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	3304      	adds	r3, #4
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7fe fd4a 	bl	800b0c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c634:	4b2d      	ldr	r3, [pc, #180]	; (800c6ec <xTaskResumeAll+0x124>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d903      	bls.n	800c644 <xTaskResumeAll+0x7c>
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c640:	4a2a      	ldr	r2, [pc, #168]	; (800c6ec <xTaskResumeAll+0x124>)
 800c642:	6013      	str	r3, [r2, #0]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c648:	4613      	mov	r3, r2
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	4413      	add	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4a27      	ldr	r2, [pc, #156]	; (800c6f0 <xTaskResumeAll+0x128>)
 800c652:	441a      	add	r2, r3
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	3304      	adds	r3, #4
 800c658:	4619      	mov	r1, r3
 800c65a:	4610      	mov	r0, r2
 800c65c:	f7fe fcd5 	bl	800b00a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c664:	4b23      	ldr	r3, [pc, #140]	; (800c6f4 <xTaskResumeAll+0x12c>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d302      	bcc.n	800c674 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c66e:	4b22      	ldr	r3, [pc, #136]	; (800c6f8 <xTaskResumeAll+0x130>)
 800c670:	2201      	movs	r2, #1
 800c672:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c674:	4b1c      	ldr	r3, [pc, #112]	; (800c6e8 <xTaskResumeAll+0x120>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1cb      	bne.n	800c614 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d001      	beq.n	800c686 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c682:	f000 fb55 	bl	800cd30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c686:	4b1d      	ldr	r3, [pc, #116]	; (800c6fc <xTaskResumeAll+0x134>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d010      	beq.n	800c6b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c692:	f000 f847 	bl	800c724 <xTaskIncrementTick>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d002      	beq.n	800c6a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c69c:	4b16      	ldr	r3, [pc, #88]	; (800c6f8 <xTaskResumeAll+0x130>)
 800c69e:	2201      	movs	r2, #1
 800c6a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1f1      	bne.n	800c692 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c6ae:	4b13      	ldr	r3, [pc, #76]	; (800c6fc <xTaskResumeAll+0x134>)
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c6b4:	4b10      	ldr	r3, [pc, #64]	; (800c6f8 <xTaskResumeAll+0x130>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d009      	beq.n	800c6d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c6c0:	4b0f      	ldr	r3, [pc, #60]	; (800c700 <xTaskResumeAll+0x138>)
 800c6c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6c6:	601a      	str	r2, [r3, #0]
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6d0:	f001 fad8 	bl	800dc84 <vPortExitCritical>

	return xAlreadyYielded;
 800c6d4:	68bb      	ldr	r3, [r7, #8]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	20000f24 	.word	0x20000f24
 800c6e4:	20000efc 	.word	0x20000efc
 800c6e8:	20000ebc 	.word	0x20000ebc
 800c6ec:	20000f04 	.word	0x20000f04
 800c6f0:	20000a2c 	.word	0x20000a2c
 800c6f4:	20000a28 	.word	0x20000a28
 800c6f8:	20000f10 	.word	0x20000f10
 800c6fc:	20000f0c 	.word	0x20000f0c
 800c700:	e000ed04 	.word	0xe000ed04

0800c704 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c704:	b480      	push	{r7}
 800c706:	b083      	sub	sp, #12
 800c708:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c70a:	4b05      	ldr	r3, [pc, #20]	; (800c720 <xTaskGetTickCount+0x1c>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c710:	687b      	ldr	r3, [r7, #4]
}
 800c712:	4618      	mov	r0, r3
 800c714:	370c      	adds	r7, #12
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	20000f00 	.word	0x20000f00

0800c724 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b086      	sub	sp, #24
 800c728:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c72a:	2300      	movs	r3, #0
 800c72c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c72e:	4b4f      	ldr	r3, [pc, #316]	; (800c86c <xTaskIncrementTick+0x148>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	f040 808f 	bne.w	800c856 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c738:	4b4d      	ldr	r3, [pc, #308]	; (800c870 <xTaskIncrementTick+0x14c>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	3301      	adds	r3, #1
 800c73e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c740:	4a4b      	ldr	r2, [pc, #300]	; (800c870 <xTaskIncrementTick+0x14c>)
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d120      	bne.n	800c78e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c74c:	4b49      	ldr	r3, [pc, #292]	; (800c874 <xTaskIncrementTick+0x150>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00a      	beq.n	800c76c <xTaskIncrementTick+0x48>
	__asm volatile
 800c756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75a:	f383 8811 	msr	BASEPRI, r3
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	f3bf 8f4f 	dsb	sy
 800c766:	603b      	str	r3, [r7, #0]
}
 800c768:	bf00      	nop
 800c76a:	e7fe      	b.n	800c76a <xTaskIncrementTick+0x46>
 800c76c:	4b41      	ldr	r3, [pc, #260]	; (800c874 <xTaskIncrementTick+0x150>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	60fb      	str	r3, [r7, #12]
 800c772:	4b41      	ldr	r3, [pc, #260]	; (800c878 <xTaskIncrementTick+0x154>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a3f      	ldr	r2, [pc, #252]	; (800c874 <xTaskIncrementTick+0x150>)
 800c778:	6013      	str	r3, [r2, #0]
 800c77a:	4a3f      	ldr	r2, [pc, #252]	; (800c878 <xTaskIncrementTick+0x154>)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6013      	str	r3, [r2, #0]
 800c780:	4b3e      	ldr	r3, [pc, #248]	; (800c87c <xTaskIncrementTick+0x158>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	3301      	adds	r3, #1
 800c786:	4a3d      	ldr	r2, [pc, #244]	; (800c87c <xTaskIncrementTick+0x158>)
 800c788:	6013      	str	r3, [r2, #0]
 800c78a:	f000 fad1 	bl	800cd30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c78e:	4b3c      	ldr	r3, [pc, #240]	; (800c880 <xTaskIncrementTick+0x15c>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	693a      	ldr	r2, [r7, #16]
 800c794:	429a      	cmp	r2, r3
 800c796:	d349      	bcc.n	800c82c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c798:	4b36      	ldr	r3, [pc, #216]	; (800c874 <xTaskIncrementTick+0x150>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d104      	bne.n	800c7ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7a2:	4b37      	ldr	r3, [pc, #220]	; (800c880 <xTaskIncrementTick+0x15c>)
 800c7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a8:	601a      	str	r2, [r3, #0]
					break;
 800c7aa:	e03f      	b.n	800c82c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7ac:	4b31      	ldr	r3, [pc, #196]	; (800c874 <xTaskIncrementTick+0x150>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68db      	ldr	r3, [r3, #12]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c7bc:	693a      	ldr	r2, [r7, #16]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d203      	bcs.n	800c7cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c7c4:	4a2e      	ldr	r2, [pc, #184]	; (800c880 <xTaskIncrementTick+0x15c>)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c7ca:	e02f      	b.n	800c82c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	3304      	adds	r3, #4
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7fe fc77 	bl	800b0c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d004      	beq.n	800c7e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	3318      	adds	r3, #24
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fe fc6e 	bl	800b0c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ec:	4b25      	ldr	r3, [pc, #148]	; (800c884 <xTaskIncrementTick+0x160>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d903      	bls.n	800c7fc <xTaskIncrementTick+0xd8>
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f8:	4a22      	ldr	r2, [pc, #136]	; (800c884 <xTaskIncrementTick+0x160>)
 800c7fa:	6013      	str	r3, [r2, #0]
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c800:	4613      	mov	r3, r2
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	4413      	add	r3, r2
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	4a1f      	ldr	r2, [pc, #124]	; (800c888 <xTaskIncrementTick+0x164>)
 800c80a:	441a      	add	r2, r3
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	3304      	adds	r3, #4
 800c810:	4619      	mov	r1, r3
 800c812:	4610      	mov	r0, r2
 800c814:	f7fe fbf9 	bl	800b00a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c81c:	4b1b      	ldr	r3, [pc, #108]	; (800c88c <xTaskIncrementTick+0x168>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c822:	429a      	cmp	r2, r3
 800c824:	d3b8      	bcc.n	800c798 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c826:	2301      	movs	r3, #1
 800c828:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c82a:	e7b5      	b.n	800c798 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c82c:	4b17      	ldr	r3, [pc, #92]	; (800c88c <xTaskIncrementTick+0x168>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c832:	4915      	ldr	r1, [pc, #84]	; (800c888 <xTaskIncrementTick+0x164>)
 800c834:	4613      	mov	r3, r2
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	4413      	add	r3, r2
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	440b      	add	r3, r1
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2b01      	cmp	r3, #1
 800c842:	d901      	bls.n	800c848 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c844:	2301      	movs	r3, #1
 800c846:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c848:	4b11      	ldr	r3, [pc, #68]	; (800c890 <xTaskIncrementTick+0x16c>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d007      	beq.n	800c860 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c850:	2301      	movs	r3, #1
 800c852:	617b      	str	r3, [r7, #20]
 800c854:	e004      	b.n	800c860 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c856:	4b0f      	ldr	r3, [pc, #60]	; (800c894 <xTaskIncrementTick+0x170>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	3301      	adds	r3, #1
 800c85c:	4a0d      	ldr	r2, [pc, #52]	; (800c894 <xTaskIncrementTick+0x170>)
 800c85e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c860:	697b      	ldr	r3, [r7, #20]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3718      	adds	r7, #24
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	20000f24 	.word	0x20000f24
 800c870:	20000f00 	.word	0x20000f00
 800c874:	20000eb4 	.word	0x20000eb4
 800c878:	20000eb8 	.word	0x20000eb8
 800c87c:	20000f14 	.word	0x20000f14
 800c880:	20000f1c 	.word	0x20000f1c
 800c884:	20000f04 	.word	0x20000f04
 800c888:	20000a2c 	.word	0x20000a2c
 800c88c:	20000a28 	.word	0x20000a28
 800c890:	20000f10 	.word	0x20000f10
 800c894:	20000f0c 	.word	0x20000f0c

0800c898 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c898:	b480      	push	{r7}
 800c89a:	b085      	sub	sp, #20
 800c89c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c89e:	4b28      	ldr	r3, [pc, #160]	; (800c940 <vTaskSwitchContext+0xa8>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d003      	beq.n	800c8ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c8a6:	4b27      	ldr	r3, [pc, #156]	; (800c944 <vTaskSwitchContext+0xac>)
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c8ac:	e041      	b.n	800c932 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c8ae:	4b25      	ldr	r3, [pc, #148]	; (800c944 <vTaskSwitchContext+0xac>)
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8b4:	4b24      	ldr	r3, [pc, #144]	; (800c948 <vTaskSwitchContext+0xb0>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	60fb      	str	r3, [r7, #12]
 800c8ba:	e010      	b.n	800c8de <vTaskSwitchContext+0x46>
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d10a      	bne.n	800c8d8 <vTaskSwitchContext+0x40>
	__asm volatile
 800c8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c6:	f383 8811 	msr	BASEPRI, r3
 800c8ca:	f3bf 8f6f 	isb	sy
 800c8ce:	f3bf 8f4f 	dsb	sy
 800c8d2:	607b      	str	r3, [r7, #4]
}
 800c8d4:	bf00      	nop
 800c8d6:	e7fe      	b.n	800c8d6 <vTaskSwitchContext+0x3e>
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	60fb      	str	r3, [r7, #12]
 800c8de:	491b      	ldr	r1, [pc, #108]	; (800c94c <vTaskSwitchContext+0xb4>)
 800c8e0:	68fa      	ldr	r2, [r7, #12]
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	4413      	add	r3, r2
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	440b      	add	r3, r1
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d0e4      	beq.n	800c8bc <vTaskSwitchContext+0x24>
 800c8f2:	68fa      	ldr	r2, [r7, #12]
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	4413      	add	r3, r2
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	4a13      	ldr	r2, [pc, #76]	; (800c94c <vTaskSwitchContext+0xb4>)
 800c8fe:	4413      	add	r3, r2
 800c900:	60bb      	str	r3, [r7, #8]
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	685a      	ldr	r2, [r3, #4]
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	605a      	str	r2, [r3, #4]
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	685a      	ldr	r2, [r3, #4]
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	3308      	adds	r3, #8
 800c914:	429a      	cmp	r2, r3
 800c916:	d104      	bne.n	800c922 <vTaskSwitchContext+0x8a>
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	685a      	ldr	r2, [r3, #4]
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	605a      	str	r2, [r3, #4]
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	4a09      	ldr	r2, [pc, #36]	; (800c950 <vTaskSwitchContext+0xb8>)
 800c92a:	6013      	str	r3, [r2, #0]
 800c92c:	4a06      	ldr	r2, [pc, #24]	; (800c948 <vTaskSwitchContext+0xb0>)
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	6013      	str	r3, [r2, #0]
}
 800c932:	bf00      	nop
 800c934:	3714      	adds	r7, #20
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	20000f24 	.word	0x20000f24
 800c944:	20000f10 	.word	0x20000f10
 800c948:	20000f04 	.word	0x20000f04
 800c94c:	20000a2c 	.word	0x20000a2c
 800c950:	20000a28 	.word	0x20000a28

0800c954 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d10a      	bne.n	800c97a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c968:	f383 8811 	msr	BASEPRI, r3
 800c96c:	f3bf 8f6f 	isb	sy
 800c970:	f3bf 8f4f 	dsb	sy
 800c974:	60fb      	str	r3, [r7, #12]
}
 800c976:	bf00      	nop
 800c978:	e7fe      	b.n	800c978 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c97a:	4b07      	ldr	r3, [pc, #28]	; (800c998 <vTaskPlaceOnEventList+0x44>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	3318      	adds	r3, #24
 800c980:	4619      	mov	r1, r3
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7fe fb65 	bl	800b052 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c988:	2101      	movs	r1, #1
 800c98a:	6838      	ldr	r0, [r7, #0]
 800c98c:	f000 fc7a 	bl	800d284 <prvAddCurrentTaskToDelayedList>
}
 800c990:	bf00      	nop
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	20000a28 	.word	0x20000a28

0800c99c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10a      	bne.n	800c9c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	617b      	str	r3, [r7, #20]
}
 800c9c0:	bf00      	nop
 800c9c2:	e7fe      	b.n	800c9c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c9c4:	4b0a      	ldr	r3, [pc, #40]	; (800c9f0 <vTaskPlaceOnEventListRestricted+0x54>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	3318      	adds	r3, #24
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f7fe fb1c 	bl	800b00a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d002      	beq.n	800c9de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c9de:	6879      	ldr	r1, [r7, #4]
 800c9e0:	68b8      	ldr	r0, [r7, #8]
 800c9e2:	f000 fc4f 	bl	800d284 <prvAddCurrentTaskToDelayedList>
	}
 800c9e6:	bf00      	nop
 800c9e8:	3718      	adds	r7, #24
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	20000a28 	.word	0x20000a28

0800c9f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b086      	sub	sp, #24
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d10a      	bne.n	800ca20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ca0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0e:	f383 8811 	msr	BASEPRI, r3
 800ca12:	f3bf 8f6f 	isb	sy
 800ca16:	f3bf 8f4f 	dsb	sy
 800ca1a:	60fb      	str	r3, [r7, #12]
}
 800ca1c:	bf00      	nop
 800ca1e:	e7fe      	b.n	800ca1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	3318      	adds	r3, #24
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7fe fb4d 	bl	800b0c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca2a:	4b1e      	ldr	r3, [pc, #120]	; (800caa4 <xTaskRemoveFromEventList+0xb0>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d11d      	bne.n	800ca6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	3304      	adds	r3, #4
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7fe fb44 	bl	800b0c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca40:	4b19      	ldr	r3, [pc, #100]	; (800caa8 <xTaskRemoveFromEventList+0xb4>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d903      	bls.n	800ca50 <xTaskRemoveFromEventList+0x5c>
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4c:	4a16      	ldr	r2, [pc, #88]	; (800caa8 <xTaskRemoveFromEventList+0xb4>)
 800ca4e:	6013      	str	r3, [r2, #0]
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca54:	4613      	mov	r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	4413      	add	r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	4a13      	ldr	r2, [pc, #76]	; (800caac <xTaskRemoveFromEventList+0xb8>)
 800ca5e:	441a      	add	r2, r3
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	3304      	adds	r3, #4
 800ca64:	4619      	mov	r1, r3
 800ca66:	4610      	mov	r0, r2
 800ca68:	f7fe facf 	bl	800b00a <vListInsertEnd>
 800ca6c:	e005      	b.n	800ca7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	3318      	adds	r3, #24
 800ca72:	4619      	mov	r1, r3
 800ca74:	480e      	ldr	r0, [pc, #56]	; (800cab0 <xTaskRemoveFromEventList+0xbc>)
 800ca76:	f7fe fac8 	bl	800b00a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca7e:	4b0d      	ldr	r3, [pc, #52]	; (800cab4 <xTaskRemoveFromEventList+0xc0>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d905      	bls.n	800ca94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ca8c:	4b0a      	ldr	r3, [pc, #40]	; (800cab8 <xTaskRemoveFromEventList+0xc4>)
 800ca8e:	2201      	movs	r2, #1
 800ca90:	601a      	str	r2, [r3, #0]
 800ca92:	e001      	b.n	800ca98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ca94:	2300      	movs	r3, #0
 800ca96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ca98:	697b      	ldr	r3, [r7, #20]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3718      	adds	r7, #24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	20000f24 	.word	0x20000f24
 800caa8:	20000f04 	.word	0x20000f04
 800caac:	20000a2c 	.word	0x20000a2c
 800cab0:	20000ebc 	.word	0x20000ebc
 800cab4:	20000a28 	.word	0x20000a28
 800cab8:	20000f10 	.word	0x20000f10

0800cabc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cac4:	4b06      	ldr	r3, [pc, #24]	; (800cae0 <vTaskInternalSetTimeOutState+0x24>)
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cacc:	4b05      	ldr	r3, [pc, #20]	; (800cae4 <vTaskInternalSetTimeOutState+0x28>)
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	605a      	str	r2, [r3, #4]
}
 800cad4:	bf00      	nop
 800cad6:	370c      	adds	r7, #12
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr
 800cae0:	20000f14 	.word	0x20000f14
 800cae4:	20000f00 	.word	0x20000f00

0800cae8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b088      	sub	sp, #32
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d10a      	bne.n	800cb0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800caf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafc:	f383 8811 	msr	BASEPRI, r3
 800cb00:	f3bf 8f6f 	isb	sy
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	613b      	str	r3, [r7, #16]
}
 800cb0a:	bf00      	nop
 800cb0c:	e7fe      	b.n	800cb0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d10a      	bne.n	800cb2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb18:	f383 8811 	msr	BASEPRI, r3
 800cb1c:	f3bf 8f6f 	isb	sy
 800cb20:	f3bf 8f4f 	dsb	sy
 800cb24:	60fb      	str	r3, [r7, #12]
}
 800cb26:	bf00      	nop
 800cb28:	e7fe      	b.n	800cb28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cb2a:	f001 f87b 	bl	800dc24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cb2e:	4b1d      	ldr	r3, [pc, #116]	; (800cba4 <xTaskCheckForTimeOut+0xbc>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	69ba      	ldr	r2, [r7, #24]
 800cb3a:	1ad3      	subs	r3, r2, r3
 800cb3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb46:	d102      	bne.n	800cb4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	61fb      	str	r3, [r7, #28]
 800cb4c:	e023      	b.n	800cb96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	4b15      	ldr	r3, [pc, #84]	; (800cba8 <xTaskCheckForTimeOut+0xc0>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d007      	beq.n	800cb6a <xTaskCheckForTimeOut+0x82>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	69ba      	ldr	r2, [r7, #24]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d302      	bcc.n	800cb6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cb64:	2301      	movs	r3, #1
 800cb66:	61fb      	str	r3, [r7, #28]
 800cb68:	e015      	b.n	800cb96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	697a      	ldr	r2, [r7, #20]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d20b      	bcs.n	800cb8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	1ad2      	subs	r2, r2, r3
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f7ff ff9b 	bl	800cabc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cb86:	2300      	movs	r3, #0
 800cb88:	61fb      	str	r3, [r7, #28]
 800cb8a:	e004      	b.n	800cb96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cb92:	2301      	movs	r3, #1
 800cb94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cb96:	f001 f875 	bl	800dc84 <vPortExitCritical>

	return xReturn;
 800cb9a:	69fb      	ldr	r3, [r7, #28]
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3720      	adds	r7, #32
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	20000f00 	.word	0x20000f00
 800cba8:	20000f14 	.word	0x20000f14

0800cbac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cbac:	b480      	push	{r7}
 800cbae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cbb0:	4b03      	ldr	r3, [pc, #12]	; (800cbc0 <vTaskMissedYield+0x14>)
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	601a      	str	r2, [r3, #0]
}
 800cbb6:	bf00      	nop
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr
 800cbc0:	20000f10 	.word	0x20000f10

0800cbc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cbcc:	f000 f852 	bl	800cc74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cbd0:	4b06      	ldr	r3, [pc, #24]	; (800cbec <prvIdleTask+0x28>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d9f9      	bls.n	800cbcc <prvIdleTask+0x8>
			{
				taskYIELD();
 800cbd8:	4b05      	ldr	r3, [pc, #20]	; (800cbf0 <prvIdleTask+0x2c>)
 800cbda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbde:	601a      	str	r2, [r3, #0]
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cbe8:	e7f0      	b.n	800cbcc <prvIdleTask+0x8>
 800cbea:	bf00      	nop
 800cbec:	20000a2c 	.word	0x20000a2c
 800cbf0:	e000ed04 	.word	0xe000ed04

0800cbf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	607b      	str	r3, [r7, #4]
 800cbfe:	e00c      	b.n	800cc1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	4613      	mov	r3, r2
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	4413      	add	r3, r2
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	4a12      	ldr	r2, [pc, #72]	; (800cc54 <prvInitialiseTaskLists+0x60>)
 800cc0c:	4413      	add	r3, r2
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7fe f9ce 	bl	800afb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	3301      	adds	r3, #1
 800cc18:	607b      	str	r3, [r7, #4]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2b37      	cmp	r3, #55	; 0x37
 800cc1e:	d9ef      	bls.n	800cc00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cc20:	480d      	ldr	r0, [pc, #52]	; (800cc58 <prvInitialiseTaskLists+0x64>)
 800cc22:	f7fe f9c5 	bl	800afb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cc26:	480d      	ldr	r0, [pc, #52]	; (800cc5c <prvInitialiseTaskLists+0x68>)
 800cc28:	f7fe f9c2 	bl	800afb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cc2c:	480c      	ldr	r0, [pc, #48]	; (800cc60 <prvInitialiseTaskLists+0x6c>)
 800cc2e:	f7fe f9bf 	bl	800afb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cc32:	480c      	ldr	r0, [pc, #48]	; (800cc64 <prvInitialiseTaskLists+0x70>)
 800cc34:	f7fe f9bc 	bl	800afb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cc38:	480b      	ldr	r0, [pc, #44]	; (800cc68 <prvInitialiseTaskLists+0x74>)
 800cc3a:	f7fe f9b9 	bl	800afb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cc3e:	4b0b      	ldr	r3, [pc, #44]	; (800cc6c <prvInitialiseTaskLists+0x78>)
 800cc40:	4a05      	ldr	r2, [pc, #20]	; (800cc58 <prvInitialiseTaskLists+0x64>)
 800cc42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cc44:	4b0a      	ldr	r3, [pc, #40]	; (800cc70 <prvInitialiseTaskLists+0x7c>)
 800cc46:	4a05      	ldr	r2, [pc, #20]	; (800cc5c <prvInitialiseTaskLists+0x68>)
 800cc48:	601a      	str	r2, [r3, #0]
}
 800cc4a:	bf00      	nop
 800cc4c:	3708      	adds	r7, #8
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	20000a2c 	.word	0x20000a2c
 800cc58:	20000e8c 	.word	0x20000e8c
 800cc5c:	20000ea0 	.word	0x20000ea0
 800cc60:	20000ebc 	.word	0x20000ebc
 800cc64:	20000ed0 	.word	0x20000ed0
 800cc68:	20000ee8 	.word	0x20000ee8
 800cc6c:	20000eb4 	.word	0x20000eb4
 800cc70:	20000eb8 	.word	0x20000eb8

0800cc74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc7a:	e019      	b.n	800ccb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cc7c:	f000 ffd2 	bl	800dc24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc80:	4b10      	ldr	r3, [pc, #64]	; (800ccc4 <prvCheckTasksWaitingTermination+0x50>)
 800cc82:	68db      	ldr	r3, [r3, #12]
 800cc84:	68db      	ldr	r3, [r3, #12]
 800cc86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3304      	adds	r3, #4
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7fe fa19 	bl	800b0c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cc92:	4b0d      	ldr	r3, [pc, #52]	; (800ccc8 <prvCheckTasksWaitingTermination+0x54>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	3b01      	subs	r3, #1
 800cc98:	4a0b      	ldr	r2, [pc, #44]	; (800ccc8 <prvCheckTasksWaitingTermination+0x54>)
 800cc9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc9c:	4b0b      	ldr	r3, [pc, #44]	; (800cccc <prvCheckTasksWaitingTermination+0x58>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	3b01      	subs	r3, #1
 800cca2:	4a0a      	ldr	r2, [pc, #40]	; (800cccc <prvCheckTasksWaitingTermination+0x58>)
 800cca4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cca6:	f000 ffed 	bl	800dc84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 f810 	bl	800ccd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ccb0:	4b06      	ldr	r3, [pc, #24]	; (800cccc <prvCheckTasksWaitingTermination+0x58>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1e1      	bne.n	800cc7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ccb8:	bf00      	nop
 800ccba:	bf00      	nop
 800ccbc:	3708      	adds	r7, #8
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	20000ed0 	.word	0x20000ed0
 800ccc8:	20000efc 	.word	0x20000efc
 800cccc:	20000ee4 	.word	0x20000ee4

0800ccd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d108      	bne.n	800ccf4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cce6:	4618      	mov	r0, r3
 800cce8:	f001 f98a 	bl	800e000 <vPortFree>
				vPortFree( pxTCB );
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f001 f987 	bl	800e000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ccf2:	e018      	b.n	800cd26 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d103      	bne.n	800cd06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f001 f97e 	bl	800e000 <vPortFree>
	}
 800cd04:	e00f      	b.n	800cd26 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	d00a      	beq.n	800cd26 <prvDeleteTCB+0x56>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	60fb      	str	r3, [r7, #12]
}
 800cd22:	bf00      	nop
 800cd24:	e7fe      	b.n	800cd24 <prvDeleteTCB+0x54>
	}
 800cd26:	bf00      	nop
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
	...

0800cd30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd36:	4b0c      	ldr	r3, [pc, #48]	; (800cd68 <prvResetNextTaskUnblockTime+0x38>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d104      	bne.n	800cd4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cd40:	4b0a      	ldr	r3, [pc, #40]	; (800cd6c <prvResetNextTaskUnblockTime+0x3c>)
 800cd42:	f04f 32ff 	mov.w	r2, #4294967295
 800cd46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cd48:	e008      	b.n	800cd5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd4a:	4b07      	ldr	r3, [pc, #28]	; (800cd68 <prvResetNextTaskUnblockTime+0x38>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	4a04      	ldr	r2, [pc, #16]	; (800cd6c <prvResetNextTaskUnblockTime+0x3c>)
 800cd5a:	6013      	str	r3, [r2, #0]
}
 800cd5c:	bf00      	nop
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr
 800cd68:	20000eb4 	.word	0x20000eb4
 800cd6c:	20000f1c 	.word	0x20000f1c

0800cd70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cd76:	4b0b      	ldr	r3, [pc, #44]	; (800cda4 <xTaskGetSchedulerState+0x34>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d102      	bne.n	800cd84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	607b      	str	r3, [r7, #4]
 800cd82:	e008      	b.n	800cd96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd84:	4b08      	ldr	r3, [pc, #32]	; (800cda8 <xTaskGetSchedulerState+0x38>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d102      	bne.n	800cd92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cd8c:	2302      	movs	r3, #2
 800cd8e:	607b      	str	r3, [r7, #4]
 800cd90:	e001      	b.n	800cd96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cd92:	2300      	movs	r3, #0
 800cd94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cd96:	687b      	ldr	r3, [r7, #4]
	}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	20000f08 	.word	0x20000f08
 800cda8:	20000f24 	.word	0x20000f24

0800cdac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d051      	beq.n	800ce66 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdc6:	4b2a      	ldr	r3, [pc, #168]	; (800ce70 <xTaskPriorityInherit+0xc4>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d241      	bcs.n	800ce54 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	699b      	ldr	r3, [r3, #24]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	db06      	blt.n	800cde6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdd8:	4b25      	ldr	r3, [pc, #148]	; (800ce70 <xTaskPriorityInherit+0xc4>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	6959      	ldr	r1, [r3, #20]
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdee:	4613      	mov	r3, r2
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	4413      	add	r3, r2
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	4a1f      	ldr	r2, [pc, #124]	; (800ce74 <xTaskPriorityInherit+0xc8>)
 800cdf8:	4413      	add	r3, r2
 800cdfa:	4299      	cmp	r1, r3
 800cdfc:	d122      	bne.n	800ce44 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	3304      	adds	r3, #4
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7fe f95e 	bl	800b0c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce08:	4b19      	ldr	r3, [pc, #100]	; (800ce70 <xTaskPriorityInherit+0xc4>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce16:	4b18      	ldr	r3, [pc, #96]	; (800ce78 <xTaskPriorityInherit+0xcc>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d903      	bls.n	800ce26 <xTaskPriorityInherit+0x7a>
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce22:	4a15      	ldr	r2, [pc, #84]	; (800ce78 <xTaskPriorityInherit+0xcc>)
 800ce24:	6013      	str	r3, [r2, #0]
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	4413      	add	r3, r2
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	4a10      	ldr	r2, [pc, #64]	; (800ce74 <xTaskPriorityInherit+0xc8>)
 800ce34:	441a      	add	r2, r3
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	3304      	adds	r3, #4
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	4610      	mov	r0, r2
 800ce3e:	f7fe f8e4 	bl	800b00a <vListInsertEnd>
 800ce42:	e004      	b.n	800ce4e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce44:	4b0a      	ldr	r3, [pc, #40]	; (800ce70 <xTaskPriorityInherit+0xc4>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	60fb      	str	r3, [r7, #12]
 800ce52:	e008      	b.n	800ce66 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ce58:	4b05      	ldr	r3, [pc, #20]	; (800ce70 <xTaskPriorityInherit+0xc4>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d201      	bcs.n	800ce66 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ce62:	2301      	movs	r3, #1
 800ce64:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce66:	68fb      	ldr	r3, [r7, #12]
	}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3710      	adds	r7, #16
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	20000a28 	.word	0x20000a28
 800ce74:	20000a2c 	.word	0x20000a2c
 800ce78:	20000f04 	.word	0x20000f04

0800ce7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b086      	sub	sp, #24
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d056      	beq.n	800cf40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ce92:	4b2e      	ldr	r3, [pc, #184]	; (800cf4c <xTaskPriorityDisinherit+0xd0>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	693a      	ldr	r2, [r7, #16]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d00a      	beq.n	800ceb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ce9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea0:	f383 8811 	msr	BASEPRI, r3
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	60fb      	str	r3, [r7, #12]
}
 800ceae:	bf00      	nop
 800ceb0:	e7fe      	b.n	800ceb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d10a      	bne.n	800ced0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ceba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cebe:	f383 8811 	msr	BASEPRI, r3
 800cec2:	f3bf 8f6f 	isb	sy
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	60bb      	str	r3, [r7, #8]
}
 800cecc:	bf00      	nop
 800cece:	e7fe      	b.n	800cece <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ced4:	1e5a      	subs	r2, r3, #1
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d02c      	beq.n	800cf40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d128      	bne.n	800cf40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	3304      	adds	r3, #4
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fe f8e6 	bl	800b0c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf10:	4b0f      	ldr	r3, [pc, #60]	; (800cf50 <xTaskPriorityDisinherit+0xd4>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d903      	bls.n	800cf20 <xTaskPriorityDisinherit+0xa4>
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf1c:	4a0c      	ldr	r2, [pc, #48]	; (800cf50 <xTaskPriorityDisinherit+0xd4>)
 800cf1e:	6013      	str	r3, [r2, #0]
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf24:	4613      	mov	r3, r2
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	4413      	add	r3, r2
 800cf2a:	009b      	lsls	r3, r3, #2
 800cf2c:	4a09      	ldr	r2, [pc, #36]	; (800cf54 <xTaskPriorityDisinherit+0xd8>)
 800cf2e:	441a      	add	r2, r3
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	3304      	adds	r3, #4
 800cf34:	4619      	mov	r1, r3
 800cf36:	4610      	mov	r0, r2
 800cf38:	f7fe f867 	bl	800b00a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cf40:	697b      	ldr	r3, [r7, #20]
	}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3718      	adds	r7, #24
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	20000a28 	.word	0x20000a28
 800cf50:	20000f04 	.word	0x20000f04
 800cf54:	20000a2c 	.word	0x20000a2c

0800cf58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b088      	sub	sp, #32
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cf66:	2301      	movs	r3, #1
 800cf68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d06a      	beq.n	800d046 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cf70:	69bb      	ldr	r3, [r7, #24]
 800cf72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10a      	bne.n	800cf8e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7c:	f383 8811 	msr	BASEPRI, r3
 800cf80:	f3bf 8f6f 	isb	sy
 800cf84:	f3bf 8f4f 	dsb	sy
 800cf88:	60fb      	str	r3, [r7, #12]
}
 800cf8a:	bf00      	nop
 800cf8c:	e7fe      	b.n	800cf8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf92:	683a      	ldr	r2, [r7, #0]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d902      	bls.n	800cf9e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	61fb      	str	r3, [r7, #28]
 800cf9c:	e002      	b.n	800cfa4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfa2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cfa4:	69bb      	ldr	r3, [r7, #24]
 800cfa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa8:	69fa      	ldr	r2, [r7, #28]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d04b      	beq.n	800d046 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfb2:	697a      	ldr	r2, [r7, #20]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d146      	bne.n	800d046 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cfb8:	4b25      	ldr	r3, [pc, #148]	; (800d050 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	69ba      	ldr	r2, [r7, #24]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d10a      	bne.n	800cfd8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc6:	f383 8811 	msr	BASEPRI, r3
 800cfca:	f3bf 8f6f 	isb	sy
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	60bb      	str	r3, [r7, #8]
}
 800cfd4:	bf00      	nop
 800cfd6:	e7fe      	b.n	800cfd6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfdc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	69fa      	ldr	r2, [r7, #28]
 800cfe2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cfe4:	69bb      	ldr	r3, [r7, #24]
 800cfe6:	699b      	ldr	r3, [r3, #24]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	db04      	blt.n	800cff6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cff6:	69bb      	ldr	r3, [r7, #24]
 800cff8:	6959      	ldr	r1, [r3, #20]
 800cffa:	693a      	ldr	r2, [r7, #16]
 800cffc:	4613      	mov	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4413      	add	r3, r2
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	4a13      	ldr	r2, [pc, #76]	; (800d054 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d006:	4413      	add	r3, r2
 800d008:	4299      	cmp	r1, r3
 800d00a:	d11c      	bne.n	800d046 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	3304      	adds	r3, #4
 800d010:	4618      	mov	r0, r3
 800d012:	f7fe f857 	bl	800b0c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d01a:	4b0f      	ldr	r3, [pc, #60]	; (800d058 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d903      	bls.n	800d02a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d026:	4a0c      	ldr	r2, [pc, #48]	; (800d058 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d028:	6013      	str	r3, [r2, #0]
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d02e:	4613      	mov	r3, r2
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	4413      	add	r3, r2
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	4a07      	ldr	r2, [pc, #28]	; (800d054 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d038:	441a      	add	r2, r3
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	3304      	adds	r3, #4
 800d03e:	4619      	mov	r1, r3
 800d040:	4610      	mov	r0, r2
 800d042:	f7fd ffe2 	bl	800b00a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d046:	bf00      	nop
 800d048:	3720      	adds	r7, #32
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	20000a28 	.word	0x20000a28
 800d054:	20000a2c 	.word	0x20000a2c
 800d058:	20000f04 	.word	0x20000f04

0800d05c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d05c:	b480      	push	{r7}
 800d05e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d060:	4b07      	ldr	r3, [pc, #28]	; (800d080 <pvTaskIncrementMutexHeldCount+0x24>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d004      	beq.n	800d072 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d068:	4b05      	ldr	r3, [pc, #20]	; (800d080 <pvTaskIncrementMutexHeldCount+0x24>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d06e:	3201      	adds	r2, #1
 800d070:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d072:	4b03      	ldr	r3, [pc, #12]	; (800d080 <pvTaskIncrementMutexHeldCount+0x24>)
 800d074:	681b      	ldr	r3, [r3, #0]
	}
 800d076:	4618      	mov	r0, r3
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr
 800d080:	20000a28 	.word	0x20000a28

0800d084 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d08e:	f000 fdc9 	bl	800dc24 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d092:	4b1e      	ldr	r3, [pc, #120]	; (800d10c <ulTaskNotifyTake+0x88>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d113      	bne.n	800d0c4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d09c:	4b1b      	ldr	r3, [pc, #108]	; (800d10c <ulTaskNotifyTake+0x88>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d00b      	beq.n	800d0c4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d0ac:	2101      	movs	r1, #1
 800d0ae:	6838      	ldr	r0, [r7, #0]
 800d0b0:	f000 f8e8 	bl	800d284 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d0b4:	4b16      	ldr	r3, [pc, #88]	; (800d110 <ulTaskNotifyTake+0x8c>)
 800d0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0ba:	601a      	str	r2, [r3, #0]
 800d0bc:	f3bf 8f4f 	dsb	sy
 800d0c0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d0c4:	f000 fdde 	bl	800dc84 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d0c8:	f000 fdac 	bl	800dc24 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d0cc:	4b0f      	ldr	r3, [pc, #60]	; (800d10c <ulTaskNotifyTake+0x88>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0d2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00c      	beq.n	800d0f4 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d004      	beq.n	800d0ea <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d0e0:	4b0a      	ldr	r3, [pc, #40]	; (800d10c <ulTaskNotifyTake+0x88>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	655a      	str	r2, [r3, #84]	; 0x54
 800d0e8:	e004      	b.n	800d0f4 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d0ea:	4b08      	ldr	r3, [pc, #32]	; (800d10c <ulTaskNotifyTake+0x88>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	68fa      	ldr	r2, [r7, #12]
 800d0f0:	3a01      	subs	r2, #1
 800d0f2:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d0f4:	4b05      	ldr	r3, [pc, #20]	; (800d10c <ulTaskNotifyTake+0x88>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800d0fe:	f000 fdc1 	bl	800dc84 <vPortExitCritical>

		return ulReturn;
 800d102:	68fb      	ldr	r3, [r7, #12]
	}
 800d104:	4618      	mov	r0, r3
 800d106:	3710      	adds	r7, #16
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	20000a28 	.word	0x20000a28
 800d110:	e000ed04 	.word	0xe000ed04

0800d114 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d114:	b580      	push	{r7, lr}
 800d116:	b08a      	sub	sp, #40	; 0x28
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	603b      	str	r3, [r7, #0]
 800d120:	4613      	mov	r3, r2
 800d122:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d124:	2301      	movs	r3, #1
 800d126:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d10a      	bne.n	800d144 <xTaskGenericNotify+0x30>
	__asm volatile
 800d12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d132:	f383 8811 	msr	BASEPRI, r3
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	61bb      	str	r3, [r7, #24]
}
 800d140:	bf00      	nop
 800d142:	e7fe      	b.n	800d142 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d148:	f000 fd6c 	bl	800dc24 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d003      	beq.n	800d15a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d152:	6a3b      	ldr	r3, [r7, #32]
 800d154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d15a:	6a3b      	ldr	r3, [r7, #32]
 800d15c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d160:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d162:	6a3b      	ldr	r3, [r7, #32]
 800d164:	2202      	movs	r2, #2
 800d166:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800d16a:	79fb      	ldrb	r3, [r7, #7]
 800d16c:	2b04      	cmp	r3, #4
 800d16e:	d828      	bhi.n	800d1c2 <xTaskGenericNotify+0xae>
 800d170:	a201      	add	r2, pc, #4	; (adr r2, 800d178 <xTaskGenericNotify+0x64>)
 800d172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d176:	bf00      	nop
 800d178:	0800d1e3 	.word	0x0800d1e3
 800d17c:	0800d18d 	.word	0x0800d18d
 800d180:	0800d19b 	.word	0x0800d19b
 800d184:	0800d1a7 	.word	0x0800d1a7
 800d188:	0800d1af 	.word	0x0800d1af
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d18c:	6a3b      	ldr	r3, [r7, #32]
 800d18e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	431a      	orrs	r2, r3
 800d194:	6a3b      	ldr	r3, [r7, #32]
 800d196:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d198:	e026      	b.n	800d1e8 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d19a:	6a3b      	ldr	r3, [r7, #32]
 800d19c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d19e:	1c5a      	adds	r2, r3, #1
 800d1a0:	6a3b      	ldr	r3, [r7, #32]
 800d1a2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d1a4:	e020      	b.n	800d1e8 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d1a6:	6a3b      	ldr	r3, [r7, #32]
 800d1a8:	68ba      	ldr	r2, [r7, #8]
 800d1aa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d1ac:	e01c      	b.n	800d1e8 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d1ae:	7ffb      	ldrb	r3, [r7, #31]
 800d1b0:	2b02      	cmp	r3, #2
 800d1b2:	d003      	beq.n	800d1bc <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d1b4:	6a3b      	ldr	r3, [r7, #32]
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d1ba:	e015      	b.n	800d1e8 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800d1c0:	e012      	b.n	800d1e8 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d1c2:	6a3b      	ldr	r3, [r7, #32]
 800d1c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ca:	d00c      	beq.n	800d1e6 <xTaskGenericNotify+0xd2>
	__asm volatile
 800d1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d0:	f383 8811 	msr	BASEPRI, r3
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	f3bf 8f4f 	dsb	sy
 800d1dc:	617b      	str	r3, [r7, #20]
}
 800d1de:	bf00      	nop
 800d1e0:	e7fe      	b.n	800d1e0 <xTaskGenericNotify+0xcc>
					break;
 800d1e2:	bf00      	nop
 800d1e4:	e000      	b.n	800d1e8 <xTaskGenericNotify+0xd4>

					break;
 800d1e6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d1e8:	7ffb      	ldrb	r3, [r7, #31]
 800d1ea:	2b01      	cmp	r3, #1
 800d1ec:	d13a      	bne.n	800d264 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1ee:	6a3b      	ldr	r3, [r7, #32]
 800d1f0:	3304      	adds	r3, #4
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7fd ff66 	bl	800b0c4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d1f8:	6a3b      	ldr	r3, [r7, #32]
 800d1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1fc:	4b1d      	ldr	r3, [pc, #116]	; (800d274 <xTaskGenericNotify+0x160>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	429a      	cmp	r2, r3
 800d202:	d903      	bls.n	800d20c <xTaskGenericNotify+0xf8>
 800d204:	6a3b      	ldr	r3, [r7, #32]
 800d206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d208:	4a1a      	ldr	r2, [pc, #104]	; (800d274 <xTaskGenericNotify+0x160>)
 800d20a:	6013      	str	r3, [r2, #0]
 800d20c:	6a3b      	ldr	r3, [r7, #32]
 800d20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d210:	4613      	mov	r3, r2
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	4413      	add	r3, r2
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	4a17      	ldr	r2, [pc, #92]	; (800d278 <xTaskGenericNotify+0x164>)
 800d21a:	441a      	add	r2, r3
 800d21c:	6a3b      	ldr	r3, [r7, #32]
 800d21e:	3304      	adds	r3, #4
 800d220:	4619      	mov	r1, r3
 800d222:	4610      	mov	r0, r2
 800d224:	f7fd fef1 	bl	800b00a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d228:	6a3b      	ldr	r3, [r7, #32]
 800d22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00a      	beq.n	800d246 <xTaskGenericNotify+0x132>
	__asm volatile
 800d230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d234:	f383 8811 	msr	BASEPRI, r3
 800d238:	f3bf 8f6f 	isb	sy
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	613b      	str	r3, [r7, #16]
}
 800d242:	bf00      	nop
 800d244:	e7fe      	b.n	800d244 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d246:	6a3b      	ldr	r3, [r7, #32]
 800d248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d24a:	4b0c      	ldr	r3, [pc, #48]	; (800d27c <xTaskGenericNotify+0x168>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d250:	429a      	cmp	r2, r3
 800d252:	d907      	bls.n	800d264 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d254:	4b0a      	ldr	r3, [pc, #40]	; (800d280 <xTaskGenericNotify+0x16c>)
 800d256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d25a:	601a      	str	r2, [r3, #0]
 800d25c:	f3bf 8f4f 	dsb	sy
 800d260:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d264:	f000 fd0e 	bl	800dc84 <vPortExitCritical>

		return xReturn;
 800d268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3728      	adds	r7, #40	; 0x28
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	20000f04 	.word	0x20000f04
 800d278:	20000a2c 	.word	0x20000a2c
 800d27c:	20000a28 	.word	0x20000a28
 800d280:	e000ed04 	.word	0xe000ed04

0800d284 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d28e:	4b21      	ldr	r3, [pc, #132]	; (800d314 <prvAddCurrentTaskToDelayedList+0x90>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d294:	4b20      	ldr	r3, [pc, #128]	; (800d318 <prvAddCurrentTaskToDelayedList+0x94>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	3304      	adds	r3, #4
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7fd ff12 	bl	800b0c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a6:	d10a      	bne.n	800d2be <prvAddCurrentTaskToDelayedList+0x3a>
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d007      	beq.n	800d2be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2ae:	4b1a      	ldr	r3, [pc, #104]	; (800d318 <prvAddCurrentTaskToDelayedList+0x94>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	3304      	adds	r3, #4
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	4819      	ldr	r0, [pc, #100]	; (800d31c <prvAddCurrentTaskToDelayedList+0x98>)
 800d2b8:	f7fd fea7 	bl	800b00a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d2bc:	e026      	b.n	800d30c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d2be:	68fa      	ldr	r2, [r7, #12]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d2c6:	4b14      	ldr	r3, [pc, #80]	; (800d318 <prvAddCurrentTaskToDelayedList+0x94>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	68ba      	ldr	r2, [r7, #8]
 800d2cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d209      	bcs.n	800d2ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2d6:	4b12      	ldr	r3, [pc, #72]	; (800d320 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	4b0f      	ldr	r3, [pc, #60]	; (800d318 <prvAddCurrentTaskToDelayedList+0x94>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	3304      	adds	r3, #4
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	4610      	mov	r0, r2
 800d2e4:	f7fd feb5 	bl	800b052 <vListInsert>
}
 800d2e8:	e010      	b.n	800d30c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2ea:	4b0e      	ldr	r3, [pc, #56]	; (800d324 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d2ec:	681a      	ldr	r2, [r3, #0]
 800d2ee:	4b0a      	ldr	r3, [pc, #40]	; (800d318 <prvAddCurrentTaskToDelayedList+0x94>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	3304      	adds	r3, #4
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	4610      	mov	r0, r2
 800d2f8:	f7fd feab 	bl	800b052 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d2fc:	4b0a      	ldr	r3, [pc, #40]	; (800d328 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68ba      	ldr	r2, [r7, #8]
 800d302:	429a      	cmp	r2, r3
 800d304:	d202      	bcs.n	800d30c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d306:	4a08      	ldr	r2, [pc, #32]	; (800d328 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	6013      	str	r3, [r2, #0]
}
 800d30c:	bf00      	nop
 800d30e:	3710      	adds	r7, #16
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	20000f00 	.word	0x20000f00
 800d318:	20000a28 	.word	0x20000a28
 800d31c:	20000ee8 	.word	0x20000ee8
 800d320:	20000eb8 	.word	0x20000eb8
 800d324:	20000eb4 	.word	0x20000eb4
 800d328:	20000f1c 	.word	0x20000f1c

0800d32c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b08a      	sub	sp, #40	; 0x28
 800d330:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d332:	2300      	movs	r3, #0
 800d334:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d336:	f000 fb07 	bl	800d948 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d33a:	4b1c      	ldr	r3, [pc, #112]	; (800d3ac <xTimerCreateTimerTask+0x80>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d021      	beq.n	800d386 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d342:	2300      	movs	r3, #0
 800d344:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d346:	2300      	movs	r3, #0
 800d348:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d34a:	1d3a      	adds	r2, r7, #4
 800d34c:	f107 0108 	add.w	r1, r7, #8
 800d350:	f107 030c 	add.w	r3, r7, #12
 800d354:	4618      	mov	r0, r3
 800d356:	f7fd fe11 	bl	800af7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d35a:	6879      	ldr	r1, [r7, #4]
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	68fa      	ldr	r2, [r7, #12]
 800d360:	9202      	str	r2, [sp, #8]
 800d362:	9301      	str	r3, [sp, #4]
 800d364:	2302      	movs	r3, #2
 800d366:	9300      	str	r3, [sp, #0]
 800d368:	2300      	movs	r3, #0
 800d36a:	460a      	mov	r2, r1
 800d36c:	4910      	ldr	r1, [pc, #64]	; (800d3b0 <xTimerCreateTimerTask+0x84>)
 800d36e:	4811      	ldr	r0, [pc, #68]	; (800d3b4 <xTimerCreateTimerTask+0x88>)
 800d370:	f7fe fee0 	bl	800c134 <xTaskCreateStatic>
 800d374:	4603      	mov	r3, r0
 800d376:	4a10      	ldr	r2, [pc, #64]	; (800d3b8 <xTimerCreateTimerTask+0x8c>)
 800d378:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d37a:	4b0f      	ldr	r3, [pc, #60]	; (800d3b8 <xTimerCreateTimerTask+0x8c>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d001      	beq.n	800d386 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d382:	2301      	movs	r3, #1
 800d384:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d10a      	bne.n	800d3a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d390:	f383 8811 	msr	BASEPRI, r3
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	f3bf 8f4f 	dsb	sy
 800d39c:	613b      	str	r3, [r7, #16]
}
 800d39e:	bf00      	nop
 800d3a0:	e7fe      	b.n	800d3a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d3a2:	697b      	ldr	r3, [r7, #20]
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3718      	adds	r7, #24
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	20000f58 	.word	0x20000f58
 800d3b0:	08012c58 	.word	0x08012c58
 800d3b4:	0800d4f1 	.word	0x0800d4f1
 800d3b8:	20000f5c 	.word	0x20000f5c

0800d3bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b08a      	sub	sp, #40	; 0x28
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	607a      	str	r2, [r7, #4]
 800d3c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d10a      	bne.n	800d3ea <xTimerGenericCommand+0x2e>
	__asm volatile
 800d3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d8:	f383 8811 	msr	BASEPRI, r3
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	623b      	str	r3, [r7, #32]
}
 800d3e6:	bf00      	nop
 800d3e8:	e7fe      	b.n	800d3e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d3ea:	4b1a      	ldr	r3, [pc, #104]	; (800d454 <xTimerGenericCommand+0x98>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d02a      	beq.n	800d448 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	2b05      	cmp	r3, #5
 800d402:	dc18      	bgt.n	800d436 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d404:	f7ff fcb4 	bl	800cd70 <xTaskGetSchedulerState>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	d109      	bne.n	800d422 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d40e:	4b11      	ldr	r3, [pc, #68]	; (800d454 <xTimerGenericCommand+0x98>)
 800d410:	6818      	ldr	r0, [r3, #0]
 800d412:	f107 0110 	add.w	r1, r7, #16
 800d416:	2300      	movs	r3, #0
 800d418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d41a:	f7fe f825 	bl	800b468 <xQueueGenericSend>
 800d41e:	6278      	str	r0, [r7, #36]	; 0x24
 800d420:	e012      	b.n	800d448 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d422:	4b0c      	ldr	r3, [pc, #48]	; (800d454 <xTimerGenericCommand+0x98>)
 800d424:	6818      	ldr	r0, [r3, #0]
 800d426:	f107 0110 	add.w	r1, r7, #16
 800d42a:	2300      	movs	r3, #0
 800d42c:	2200      	movs	r2, #0
 800d42e:	f7fe f81b 	bl	800b468 <xQueueGenericSend>
 800d432:	6278      	str	r0, [r7, #36]	; 0x24
 800d434:	e008      	b.n	800d448 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d436:	4b07      	ldr	r3, [pc, #28]	; (800d454 <xTimerGenericCommand+0x98>)
 800d438:	6818      	ldr	r0, [r3, #0]
 800d43a:	f107 0110 	add.w	r1, r7, #16
 800d43e:	2300      	movs	r3, #0
 800d440:	683a      	ldr	r2, [r7, #0]
 800d442:	f7fe f90f 	bl	800b664 <xQueueGenericSendFromISR>
 800d446:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3728      	adds	r7, #40	; 0x28
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	20000f58 	.word	0x20000f58

0800d458 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b088      	sub	sp, #32
 800d45c:	af02      	add	r7, sp, #8
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d462:	4b22      	ldr	r3, [pc, #136]	; (800d4ec <prvProcessExpiredTimer+0x94>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	68db      	ldr	r3, [r3, #12]
 800d468:	68db      	ldr	r3, [r3, #12]
 800d46a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	3304      	adds	r3, #4
 800d470:	4618      	mov	r0, r3
 800d472:	f7fd fe27 	bl	800b0c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d47c:	f003 0304 	and.w	r3, r3, #4
 800d480:	2b00      	cmp	r3, #0
 800d482:	d022      	beq.n	800d4ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	699a      	ldr	r2, [r3, #24]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	18d1      	adds	r1, r2, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	683a      	ldr	r2, [r7, #0]
 800d490:	6978      	ldr	r0, [r7, #20]
 800d492:	f000 f8d1 	bl	800d638 <prvInsertTimerInActiveList>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d01f      	beq.n	800d4dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d49c:	2300      	movs	r3, #0
 800d49e:	9300      	str	r3, [sp, #0]
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	6978      	ldr	r0, [r7, #20]
 800d4a8:	f7ff ff88 	bl	800d3bc <xTimerGenericCommand>
 800d4ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d113      	bne.n	800d4dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b8:	f383 8811 	msr	BASEPRI, r3
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	60fb      	str	r3, [r7, #12]
}
 800d4c6:	bf00      	nop
 800d4c8:	e7fe      	b.n	800d4c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4d0:	f023 0301 	bic.w	r3, r3, #1
 800d4d4:	b2da      	uxtb	r2, r3
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	6a1b      	ldr	r3, [r3, #32]
 800d4e0:	6978      	ldr	r0, [r7, #20]
 800d4e2:	4798      	blx	r3
}
 800d4e4:	bf00      	nop
 800d4e6:	3718      	adds	r7, #24
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	20000f50 	.word	0x20000f50

0800d4f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d4f8:	f107 0308 	add.w	r3, r7, #8
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f000 f857 	bl	800d5b0 <prvGetNextExpireTime>
 800d502:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	4619      	mov	r1, r3
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	f000 f803 	bl	800d514 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d50e:	f000 f8d5 	bl	800d6bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d512:	e7f1      	b.n	800d4f8 <prvTimerTask+0x8>

0800d514 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d51e:	f7ff f845 	bl	800c5ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d522:	f107 0308 	add.w	r3, r7, #8
 800d526:	4618      	mov	r0, r3
 800d528:	f000 f866 	bl	800d5f8 <prvSampleTimeNow>
 800d52c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d130      	bne.n	800d596 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d10a      	bne.n	800d550 <prvProcessTimerOrBlockTask+0x3c>
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d806      	bhi.n	800d550 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d542:	f7ff f841 	bl	800c5c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d546:	68f9      	ldr	r1, [r7, #12]
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f7ff ff85 	bl	800d458 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d54e:	e024      	b.n	800d59a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d008      	beq.n	800d568 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d556:	4b13      	ldr	r3, [pc, #76]	; (800d5a4 <prvProcessTimerOrBlockTask+0x90>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d101      	bne.n	800d564 <prvProcessTimerOrBlockTask+0x50>
 800d560:	2301      	movs	r3, #1
 800d562:	e000      	b.n	800d566 <prvProcessTimerOrBlockTask+0x52>
 800d564:	2300      	movs	r3, #0
 800d566:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d568:	4b0f      	ldr	r3, [pc, #60]	; (800d5a8 <prvProcessTimerOrBlockTask+0x94>)
 800d56a:	6818      	ldr	r0, [r3, #0]
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	683a      	ldr	r2, [r7, #0]
 800d574:	4619      	mov	r1, r3
 800d576:	f7fe fda9 	bl	800c0cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d57a:	f7ff f825 	bl	800c5c8 <xTaskResumeAll>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d10a      	bne.n	800d59a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d584:	4b09      	ldr	r3, [pc, #36]	; (800d5ac <prvProcessTimerOrBlockTask+0x98>)
 800d586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d58a:	601a      	str	r2, [r3, #0]
 800d58c:	f3bf 8f4f 	dsb	sy
 800d590:	f3bf 8f6f 	isb	sy
}
 800d594:	e001      	b.n	800d59a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d596:	f7ff f817 	bl	800c5c8 <xTaskResumeAll>
}
 800d59a:	bf00      	nop
 800d59c:	3710      	adds	r7, #16
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	20000f54 	.word	0x20000f54
 800d5a8:	20000f58 	.word	0x20000f58
 800d5ac:	e000ed04 	.word	0xe000ed04

0800d5b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b085      	sub	sp, #20
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d5b8:	4b0e      	ldr	r3, [pc, #56]	; (800d5f4 <prvGetNextExpireTime+0x44>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d101      	bne.n	800d5c6 <prvGetNextExpireTime+0x16>
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	e000      	b.n	800d5c8 <prvGetNextExpireTime+0x18>
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d105      	bne.n	800d5e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d5d4:	4b07      	ldr	r3, [pc, #28]	; (800d5f4 <prvGetNextExpireTime+0x44>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	60fb      	str	r3, [r7, #12]
 800d5de:	e001      	b.n	800d5e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop
 800d5f4:	20000f50 	.word	0x20000f50

0800d5f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d600:	f7ff f880 	bl	800c704 <xTaskGetTickCount>
 800d604:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d606:	4b0b      	ldr	r3, [pc, #44]	; (800d634 <prvSampleTimeNow+0x3c>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	68fa      	ldr	r2, [r7, #12]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d205      	bcs.n	800d61c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d610:	f000 f936 	bl	800d880 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	601a      	str	r2, [r3, #0]
 800d61a:	e002      	b.n	800d622 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2200      	movs	r2, #0
 800d620:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d622:	4a04      	ldr	r2, [pc, #16]	; (800d634 <prvSampleTimeNow+0x3c>)
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d628:	68fb      	ldr	r3, [r7, #12]
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	20000f60 	.word	0x20000f60

0800d638 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b086      	sub	sp, #24
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	60b9      	str	r1, [r7, #8]
 800d642:	607a      	str	r2, [r7, #4]
 800d644:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d646:	2300      	movs	r3, #0
 800d648:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	68ba      	ldr	r2, [r7, #8]
 800d64e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	68fa      	ldr	r2, [r7, #12]
 800d654:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d656:	68ba      	ldr	r2, [r7, #8]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d812      	bhi.n	800d684 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	1ad2      	subs	r2, r2, r3
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	699b      	ldr	r3, [r3, #24]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d302      	bcc.n	800d672 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d66c:	2301      	movs	r3, #1
 800d66e:	617b      	str	r3, [r7, #20]
 800d670:	e01b      	b.n	800d6aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d672:	4b10      	ldr	r3, [pc, #64]	; (800d6b4 <prvInsertTimerInActiveList+0x7c>)
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	3304      	adds	r3, #4
 800d67a:	4619      	mov	r1, r3
 800d67c:	4610      	mov	r0, r2
 800d67e:	f7fd fce8 	bl	800b052 <vListInsert>
 800d682:	e012      	b.n	800d6aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d206      	bcs.n	800d69a <prvInsertTimerInActiveList+0x62>
 800d68c:	68ba      	ldr	r2, [r7, #8]
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	429a      	cmp	r2, r3
 800d692:	d302      	bcc.n	800d69a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d694:	2301      	movs	r3, #1
 800d696:	617b      	str	r3, [r7, #20]
 800d698:	e007      	b.n	800d6aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d69a:	4b07      	ldr	r3, [pc, #28]	; (800d6b8 <prvInsertTimerInActiveList+0x80>)
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	3304      	adds	r3, #4
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	4610      	mov	r0, r2
 800d6a6:	f7fd fcd4 	bl	800b052 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d6aa:	697b      	ldr	r3, [r7, #20]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3718      	adds	r7, #24
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	20000f54 	.word	0x20000f54
 800d6b8:	20000f50 	.word	0x20000f50

0800d6bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b08e      	sub	sp, #56	; 0x38
 800d6c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d6c2:	e0ca      	b.n	800d85a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	da18      	bge.n	800d6fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d6ca:	1d3b      	adds	r3, r7, #4
 800d6cc:	3304      	adds	r3, #4
 800d6ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d10a      	bne.n	800d6ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6da:	f383 8811 	msr	BASEPRI, r3
 800d6de:	f3bf 8f6f 	isb	sy
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	61fb      	str	r3, [r7, #28]
}
 800d6e8:	bf00      	nop
 800d6ea:	e7fe      	b.n	800d6ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6f2:	6850      	ldr	r0, [r2, #4]
 800d6f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6f6:	6892      	ldr	r2, [r2, #8]
 800d6f8:	4611      	mov	r1, r2
 800d6fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	f2c0 80aa 	blt.w	800d858 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	695b      	ldr	r3, [r3, #20]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d004      	beq.n	800d71a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d712:	3304      	adds	r3, #4
 800d714:	4618      	mov	r0, r3
 800d716:	f7fd fcd5 	bl	800b0c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d71a:	463b      	mov	r3, r7
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7ff ff6b 	bl	800d5f8 <prvSampleTimeNow>
 800d722:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2b09      	cmp	r3, #9
 800d728:	f200 8097 	bhi.w	800d85a <prvProcessReceivedCommands+0x19e>
 800d72c:	a201      	add	r2, pc, #4	; (adr r2, 800d734 <prvProcessReceivedCommands+0x78>)
 800d72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d732:	bf00      	nop
 800d734:	0800d75d 	.word	0x0800d75d
 800d738:	0800d75d 	.word	0x0800d75d
 800d73c:	0800d75d 	.word	0x0800d75d
 800d740:	0800d7d1 	.word	0x0800d7d1
 800d744:	0800d7e5 	.word	0x0800d7e5
 800d748:	0800d82f 	.word	0x0800d82f
 800d74c:	0800d75d 	.word	0x0800d75d
 800d750:	0800d75d 	.word	0x0800d75d
 800d754:	0800d7d1 	.word	0x0800d7d1
 800d758:	0800d7e5 	.word	0x0800d7e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d762:	f043 0301 	orr.w	r3, r3, #1
 800d766:	b2da      	uxtb	r2, r3
 800d768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d76e:	68ba      	ldr	r2, [r7, #8]
 800d770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d772:	699b      	ldr	r3, [r3, #24]
 800d774:	18d1      	adds	r1, r2, r3
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d77a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d77c:	f7ff ff5c 	bl	800d638 <prvInsertTimerInActiveList>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d069      	beq.n	800d85a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d788:	6a1b      	ldr	r3, [r3, #32]
 800d78a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d78c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d794:	f003 0304 	and.w	r3, r3, #4
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d05e      	beq.n	800d85a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d79c:	68ba      	ldr	r2, [r7, #8]
 800d79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a0:	699b      	ldr	r3, [r3, #24]
 800d7a2:	441a      	add	r2, r3
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	9300      	str	r3, [sp, #0]
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7ae:	f7ff fe05 	bl	800d3bc <xTimerGenericCommand>
 800d7b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d7b4:	6a3b      	ldr	r3, [r7, #32]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d14f      	bne.n	800d85a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7be:	f383 8811 	msr	BASEPRI, r3
 800d7c2:	f3bf 8f6f 	isb	sy
 800d7c6:	f3bf 8f4f 	dsb	sy
 800d7ca:	61bb      	str	r3, [r7, #24]
}
 800d7cc:	bf00      	nop
 800d7ce:	e7fe      	b.n	800d7ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7d6:	f023 0301 	bic.w	r3, r3, #1
 800d7da:	b2da      	uxtb	r2, r3
 800d7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d7e2:	e03a      	b.n	800d85a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7ea:	f043 0301 	orr.w	r3, r3, #1
 800d7ee:	b2da      	uxtb	r2, r3
 800d7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d7f6:	68ba      	ldr	r2, [r7, #8]
 800d7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fe:	699b      	ldr	r3, [r3, #24]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d10a      	bne.n	800d81a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d808:	f383 8811 	msr	BASEPRI, r3
 800d80c:	f3bf 8f6f 	isb	sy
 800d810:	f3bf 8f4f 	dsb	sy
 800d814:	617b      	str	r3, [r7, #20]
}
 800d816:	bf00      	nop
 800d818:	e7fe      	b.n	800d818 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81c:	699a      	ldr	r2, [r3, #24]
 800d81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d820:	18d1      	adds	r1, r2, r3
 800d822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d828:	f7ff ff06 	bl	800d638 <prvInsertTimerInActiveList>
					break;
 800d82c:	e015      	b.n	800d85a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d834:	f003 0302 	and.w	r3, r3, #2
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d103      	bne.n	800d844 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d83c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d83e:	f000 fbdf 	bl	800e000 <vPortFree>
 800d842:	e00a      	b.n	800d85a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d84a:	f023 0301 	bic.w	r3, r3, #1
 800d84e:	b2da      	uxtb	r2, r3
 800d850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d856:	e000      	b.n	800d85a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d858:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d85a:	4b08      	ldr	r3, [pc, #32]	; (800d87c <prvProcessReceivedCommands+0x1c0>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	1d39      	adds	r1, r7, #4
 800d860:	2200      	movs	r2, #0
 800d862:	4618      	mov	r0, r3
 800d864:	f7fe f826 	bl	800b8b4 <xQueueReceive>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f47f af2a 	bne.w	800d6c4 <prvProcessReceivedCommands+0x8>
	}
}
 800d870:	bf00      	nop
 800d872:	bf00      	nop
 800d874:	3730      	adds	r7, #48	; 0x30
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	20000f58 	.word	0x20000f58

0800d880 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b088      	sub	sp, #32
 800d884:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d886:	e048      	b.n	800d91a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d888:	4b2d      	ldr	r3, [pc, #180]	; (800d940 <prvSwitchTimerLists+0xc0>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d892:	4b2b      	ldr	r3, [pc, #172]	; (800d940 <prvSwitchTimerLists+0xc0>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	3304      	adds	r3, #4
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7fd fc0f 	bl	800b0c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	6a1b      	ldr	r3, [r3, #32]
 800d8aa:	68f8      	ldr	r0, [r7, #12]
 800d8ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8b4:	f003 0304 	and.w	r3, r3, #4
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d02e      	beq.n	800d91a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	699b      	ldr	r3, [r3, #24]
 800d8c0:	693a      	ldr	r2, [r7, #16]
 800d8c2:	4413      	add	r3, r2
 800d8c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d8c6:	68ba      	ldr	r2, [r7, #8]
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d90e      	bls.n	800d8ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	68ba      	ldr	r2, [r7, #8]
 800d8d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	68fa      	ldr	r2, [r7, #12]
 800d8d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d8da:	4b19      	ldr	r3, [pc, #100]	; (800d940 <prvSwitchTimerLists+0xc0>)
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	3304      	adds	r3, #4
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	4610      	mov	r0, r2
 800d8e6:	f7fd fbb4 	bl	800b052 <vListInsert>
 800d8ea:	e016      	b.n	800d91a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	693a      	ldr	r2, [r7, #16]
 800d8f4:	2100      	movs	r1, #0
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f7ff fd60 	bl	800d3bc <xTimerGenericCommand>
 800d8fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d10a      	bne.n	800d91a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d908:	f383 8811 	msr	BASEPRI, r3
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	f3bf 8f4f 	dsb	sy
 800d914:	603b      	str	r3, [r7, #0]
}
 800d916:	bf00      	nop
 800d918:	e7fe      	b.n	800d918 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d91a:	4b09      	ldr	r3, [pc, #36]	; (800d940 <prvSwitchTimerLists+0xc0>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d1b1      	bne.n	800d888 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d924:	4b06      	ldr	r3, [pc, #24]	; (800d940 <prvSwitchTimerLists+0xc0>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d92a:	4b06      	ldr	r3, [pc, #24]	; (800d944 <prvSwitchTimerLists+0xc4>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4a04      	ldr	r2, [pc, #16]	; (800d940 <prvSwitchTimerLists+0xc0>)
 800d930:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d932:	4a04      	ldr	r2, [pc, #16]	; (800d944 <prvSwitchTimerLists+0xc4>)
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	6013      	str	r3, [r2, #0]
}
 800d938:	bf00      	nop
 800d93a:	3718      	adds	r7, #24
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	20000f50 	.word	0x20000f50
 800d944:	20000f54 	.word	0x20000f54

0800d948 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d94e:	f000 f969 	bl	800dc24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d952:	4b15      	ldr	r3, [pc, #84]	; (800d9a8 <prvCheckForValidListAndQueue+0x60>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d120      	bne.n	800d99c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d95a:	4814      	ldr	r0, [pc, #80]	; (800d9ac <prvCheckForValidListAndQueue+0x64>)
 800d95c:	f7fd fb28 	bl	800afb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d960:	4813      	ldr	r0, [pc, #76]	; (800d9b0 <prvCheckForValidListAndQueue+0x68>)
 800d962:	f7fd fb25 	bl	800afb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d966:	4b13      	ldr	r3, [pc, #76]	; (800d9b4 <prvCheckForValidListAndQueue+0x6c>)
 800d968:	4a10      	ldr	r2, [pc, #64]	; (800d9ac <prvCheckForValidListAndQueue+0x64>)
 800d96a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d96c:	4b12      	ldr	r3, [pc, #72]	; (800d9b8 <prvCheckForValidListAndQueue+0x70>)
 800d96e:	4a10      	ldr	r2, [pc, #64]	; (800d9b0 <prvCheckForValidListAndQueue+0x68>)
 800d970:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d972:	2300      	movs	r3, #0
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	4b11      	ldr	r3, [pc, #68]	; (800d9bc <prvCheckForValidListAndQueue+0x74>)
 800d978:	4a11      	ldr	r2, [pc, #68]	; (800d9c0 <prvCheckForValidListAndQueue+0x78>)
 800d97a:	2110      	movs	r1, #16
 800d97c:	200a      	movs	r0, #10
 800d97e:	f7fd fc33 	bl	800b1e8 <xQueueGenericCreateStatic>
 800d982:	4603      	mov	r3, r0
 800d984:	4a08      	ldr	r2, [pc, #32]	; (800d9a8 <prvCheckForValidListAndQueue+0x60>)
 800d986:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d988:	4b07      	ldr	r3, [pc, #28]	; (800d9a8 <prvCheckForValidListAndQueue+0x60>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d005      	beq.n	800d99c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d990:	4b05      	ldr	r3, [pc, #20]	; (800d9a8 <prvCheckForValidListAndQueue+0x60>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	490b      	ldr	r1, [pc, #44]	; (800d9c4 <prvCheckForValidListAndQueue+0x7c>)
 800d996:	4618      	mov	r0, r3
 800d998:	f7fe fb44 	bl	800c024 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d99c:	f000 f972 	bl	800dc84 <vPortExitCritical>
}
 800d9a0:	bf00      	nop
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	20000f58 	.word	0x20000f58
 800d9ac:	20000f28 	.word	0x20000f28
 800d9b0:	20000f3c 	.word	0x20000f3c
 800d9b4:	20000f50 	.word	0x20000f50
 800d9b8:	20000f54 	.word	0x20000f54
 800d9bc:	20001004 	.word	0x20001004
 800d9c0:	20000f64 	.word	0x20000f64
 800d9c4:	08012c60 	.word	0x08012c60

0800d9c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60f8      	str	r0, [r7, #12]
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	3b04      	subs	r3, #4
 800d9d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d9e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	3b04      	subs	r3, #4
 800d9e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	f023 0201 	bic.w	r2, r3, #1
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	3b04      	subs	r3, #4
 800d9f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d9f8:	4a0c      	ldr	r2, [pc, #48]	; (800da2c <pxPortInitialiseStack+0x64>)
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	3b14      	subs	r3, #20
 800da02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	3b04      	subs	r3, #4
 800da0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f06f 0202 	mvn.w	r2, #2
 800da16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	3b20      	subs	r3, #32
 800da1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800da1e:	68fb      	ldr	r3, [r7, #12]
}
 800da20:	4618      	mov	r0, r3
 800da22:	3714      	adds	r7, #20
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr
 800da2c:	0800da31 	.word	0x0800da31

0800da30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800da30:	b480      	push	{r7}
 800da32:	b085      	sub	sp, #20
 800da34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800da36:	2300      	movs	r3, #0
 800da38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800da3a:	4b12      	ldr	r3, [pc, #72]	; (800da84 <prvTaskExitError+0x54>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da42:	d00a      	beq.n	800da5a <prvTaskExitError+0x2a>
	__asm volatile
 800da44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da48:	f383 8811 	msr	BASEPRI, r3
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	f3bf 8f4f 	dsb	sy
 800da54:	60fb      	str	r3, [r7, #12]
}
 800da56:	bf00      	nop
 800da58:	e7fe      	b.n	800da58 <prvTaskExitError+0x28>
	__asm volatile
 800da5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da5e:	f383 8811 	msr	BASEPRI, r3
 800da62:	f3bf 8f6f 	isb	sy
 800da66:	f3bf 8f4f 	dsb	sy
 800da6a:	60bb      	str	r3, [r7, #8]
}
 800da6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800da6e:	bf00      	nop
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d0fc      	beq.n	800da70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800da76:	bf00      	nop
 800da78:	bf00      	nop
 800da7a:	3714      	adds	r7, #20
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr
 800da84:	20000024 	.word	0x20000024
	...

0800da90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800da90:	4b07      	ldr	r3, [pc, #28]	; (800dab0 <pxCurrentTCBConst2>)
 800da92:	6819      	ldr	r1, [r3, #0]
 800da94:	6808      	ldr	r0, [r1, #0]
 800da96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da9a:	f380 8809 	msr	PSP, r0
 800da9e:	f3bf 8f6f 	isb	sy
 800daa2:	f04f 0000 	mov.w	r0, #0
 800daa6:	f380 8811 	msr	BASEPRI, r0
 800daaa:	4770      	bx	lr
 800daac:	f3af 8000 	nop.w

0800dab0 <pxCurrentTCBConst2>:
 800dab0:	20000a28 	.word	0x20000a28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dab4:	bf00      	nop
 800dab6:	bf00      	nop

0800dab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dab8:	4808      	ldr	r0, [pc, #32]	; (800dadc <prvPortStartFirstTask+0x24>)
 800daba:	6800      	ldr	r0, [r0, #0]
 800dabc:	6800      	ldr	r0, [r0, #0]
 800dabe:	f380 8808 	msr	MSP, r0
 800dac2:	f04f 0000 	mov.w	r0, #0
 800dac6:	f380 8814 	msr	CONTROL, r0
 800daca:	b662      	cpsie	i
 800dacc:	b661      	cpsie	f
 800dace:	f3bf 8f4f 	dsb	sy
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	df00      	svc	0
 800dad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dada:	bf00      	nop
 800dadc:	e000ed08 	.word	0xe000ed08

0800dae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b086      	sub	sp, #24
 800dae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dae6:	4b46      	ldr	r3, [pc, #280]	; (800dc00 <xPortStartScheduler+0x120>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a46      	ldr	r2, [pc, #280]	; (800dc04 <xPortStartScheduler+0x124>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d10a      	bne.n	800db06 <xPortStartScheduler+0x26>
	__asm volatile
 800daf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf4:	f383 8811 	msr	BASEPRI, r3
 800daf8:	f3bf 8f6f 	isb	sy
 800dafc:	f3bf 8f4f 	dsb	sy
 800db00:	613b      	str	r3, [r7, #16]
}
 800db02:	bf00      	nop
 800db04:	e7fe      	b.n	800db04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800db06:	4b3e      	ldr	r3, [pc, #248]	; (800dc00 <xPortStartScheduler+0x120>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a3f      	ldr	r2, [pc, #252]	; (800dc08 <xPortStartScheduler+0x128>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d10a      	bne.n	800db26 <xPortStartScheduler+0x46>
	__asm volatile
 800db10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db14:	f383 8811 	msr	BASEPRI, r3
 800db18:	f3bf 8f6f 	isb	sy
 800db1c:	f3bf 8f4f 	dsb	sy
 800db20:	60fb      	str	r3, [r7, #12]
}
 800db22:	bf00      	nop
 800db24:	e7fe      	b.n	800db24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800db26:	4b39      	ldr	r3, [pc, #228]	; (800dc0c <xPortStartScheduler+0x12c>)
 800db28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	22ff      	movs	r2, #255	; 0xff
 800db36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	781b      	ldrb	r3, [r3, #0]
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800db40:	78fb      	ldrb	r3, [r7, #3]
 800db42:	b2db      	uxtb	r3, r3
 800db44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800db48:	b2da      	uxtb	r2, r3
 800db4a:	4b31      	ldr	r3, [pc, #196]	; (800dc10 <xPortStartScheduler+0x130>)
 800db4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800db4e:	4b31      	ldr	r3, [pc, #196]	; (800dc14 <xPortStartScheduler+0x134>)
 800db50:	2207      	movs	r2, #7
 800db52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db54:	e009      	b.n	800db6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800db56:	4b2f      	ldr	r3, [pc, #188]	; (800dc14 <xPortStartScheduler+0x134>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	3b01      	subs	r3, #1
 800db5c:	4a2d      	ldr	r2, [pc, #180]	; (800dc14 <xPortStartScheduler+0x134>)
 800db5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800db60:	78fb      	ldrb	r3, [r7, #3]
 800db62:	b2db      	uxtb	r3, r3
 800db64:	005b      	lsls	r3, r3, #1
 800db66:	b2db      	uxtb	r3, r3
 800db68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db6a:	78fb      	ldrb	r3, [r7, #3]
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db72:	2b80      	cmp	r3, #128	; 0x80
 800db74:	d0ef      	beq.n	800db56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800db76:	4b27      	ldr	r3, [pc, #156]	; (800dc14 <xPortStartScheduler+0x134>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f1c3 0307 	rsb	r3, r3, #7
 800db7e:	2b04      	cmp	r3, #4
 800db80:	d00a      	beq.n	800db98 <xPortStartScheduler+0xb8>
	__asm volatile
 800db82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db86:	f383 8811 	msr	BASEPRI, r3
 800db8a:	f3bf 8f6f 	isb	sy
 800db8e:	f3bf 8f4f 	dsb	sy
 800db92:	60bb      	str	r3, [r7, #8]
}
 800db94:	bf00      	nop
 800db96:	e7fe      	b.n	800db96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800db98:	4b1e      	ldr	r3, [pc, #120]	; (800dc14 <xPortStartScheduler+0x134>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	021b      	lsls	r3, r3, #8
 800db9e:	4a1d      	ldr	r2, [pc, #116]	; (800dc14 <xPortStartScheduler+0x134>)
 800dba0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dba2:	4b1c      	ldr	r3, [pc, #112]	; (800dc14 <xPortStartScheduler+0x134>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dbaa:	4a1a      	ldr	r2, [pc, #104]	; (800dc14 <xPortStartScheduler+0x134>)
 800dbac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	b2da      	uxtb	r2, r3
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dbb6:	4b18      	ldr	r3, [pc, #96]	; (800dc18 <xPortStartScheduler+0x138>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4a17      	ldr	r2, [pc, #92]	; (800dc18 <xPortStartScheduler+0x138>)
 800dbbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dbc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dbc2:	4b15      	ldr	r3, [pc, #84]	; (800dc18 <xPortStartScheduler+0x138>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	4a14      	ldr	r2, [pc, #80]	; (800dc18 <xPortStartScheduler+0x138>)
 800dbc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dbcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dbce:	f000 f8dd 	bl	800dd8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dbd2:	4b12      	ldr	r3, [pc, #72]	; (800dc1c <xPortStartScheduler+0x13c>)
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dbd8:	f000 f8fc 	bl	800ddd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dbdc:	4b10      	ldr	r3, [pc, #64]	; (800dc20 <xPortStartScheduler+0x140>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4a0f      	ldr	r2, [pc, #60]	; (800dc20 <xPortStartScheduler+0x140>)
 800dbe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dbe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dbe8:	f7ff ff66 	bl	800dab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dbec:	f7fe fe54 	bl	800c898 <vTaskSwitchContext>
	prvTaskExitError();
 800dbf0:	f7ff ff1e 	bl	800da30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dbf4:	2300      	movs	r3, #0
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3718      	adds	r7, #24
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	e000ed00 	.word	0xe000ed00
 800dc04:	410fc271 	.word	0x410fc271
 800dc08:	410fc270 	.word	0x410fc270
 800dc0c:	e000e400 	.word	0xe000e400
 800dc10:	20001054 	.word	0x20001054
 800dc14:	20001058 	.word	0x20001058
 800dc18:	e000ed20 	.word	0xe000ed20
 800dc1c:	20000024 	.word	0x20000024
 800dc20:	e000ef34 	.word	0xe000ef34

0800dc24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
	__asm volatile
 800dc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2e:	f383 8811 	msr	BASEPRI, r3
 800dc32:	f3bf 8f6f 	isb	sy
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	607b      	str	r3, [r7, #4]
}
 800dc3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dc3e:	4b0f      	ldr	r3, [pc, #60]	; (800dc7c <vPortEnterCritical+0x58>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	3301      	adds	r3, #1
 800dc44:	4a0d      	ldr	r2, [pc, #52]	; (800dc7c <vPortEnterCritical+0x58>)
 800dc46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dc48:	4b0c      	ldr	r3, [pc, #48]	; (800dc7c <vPortEnterCritical+0x58>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d10f      	bne.n	800dc70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dc50:	4b0b      	ldr	r3, [pc, #44]	; (800dc80 <vPortEnterCritical+0x5c>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00a      	beq.n	800dc70 <vPortEnterCritical+0x4c>
	__asm volatile
 800dc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5e:	f383 8811 	msr	BASEPRI, r3
 800dc62:	f3bf 8f6f 	isb	sy
 800dc66:	f3bf 8f4f 	dsb	sy
 800dc6a:	603b      	str	r3, [r7, #0]
}
 800dc6c:	bf00      	nop
 800dc6e:	e7fe      	b.n	800dc6e <vPortEnterCritical+0x4a>
	}
}
 800dc70:	bf00      	nop
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr
 800dc7c:	20000024 	.word	0x20000024
 800dc80:	e000ed04 	.word	0xe000ed04

0800dc84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dc8a:	4b12      	ldr	r3, [pc, #72]	; (800dcd4 <vPortExitCritical+0x50>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d10a      	bne.n	800dca8 <vPortExitCritical+0x24>
	__asm volatile
 800dc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc96:	f383 8811 	msr	BASEPRI, r3
 800dc9a:	f3bf 8f6f 	isb	sy
 800dc9e:	f3bf 8f4f 	dsb	sy
 800dca2:	607b      	str	r3, [r7, #4]
}
 800dca4:	bf00      	nop
 800dca6:	e7fe      	b.n	800dca6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dca8:	4b0a      	ldr	r3, [pc, #40]	; (800dcd4 <vPortExitCritical+0x50>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	3b01      	subs	r3, #1
 800dcae:	4a09      	ldr	r2, [pc, #36]	; (800dcd4 <vPortExitCritical+0x50>)
 800dcb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dcb2:	4b08      	ldr	r3, [pc, #32]	; (800dcd4 <vPortExitCritical+0x50>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d105      	bne.n	800dcc6 <vPortExitCritical+0x42>
 800dcba:	2300      	movs	r3, #0
 800dcbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	f383 8811 	msr	BASEPRI, r3
}
 800dcc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dcc6:	bf00      	nop
 800dcc8:	370c      	adds	r7, #12
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr
 800dcd2:	bf00      	nop
 800dcd4:	20000024 	.word	0x20000024
	...

0800dce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dce0:	f3ef 8009 	mrs	r0, PSP
 800dce4:	f3bf 8f6f 	isb	sy
 800dce8:	4b15      	ldr	r3, [pc, #84]	; (800dd40 <pxCurrentTCBConst>)
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	f01e 0f10 	tst.w	lr, #16
 800dcf0:	bf08      	it	eq
 800dcf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dcf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfa:	6010      	str	r0, [r2, #0]
 800dcfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dd00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dd04:	f380 8811 	msr	BASEPRI, r0
 800dd08:	f3bf 8f4f 	dsb	sy
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f7fe fdc2 	bl	800c898 <vTaskSwitchContext>
 800dd14:	f04f 0000 	mov.w	r0, #0
 800dd18:	f380 8811 	msr	BASEPRI, r0
 800dd1c:	bc09      	pop	{r0, r3}
 800dd1e:	6819      	ldr	r1, [r3, #0]
 800dd20:	6808      	ldr	r0, [r1, #0]
 800dd22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd26:	f01e 0f10 	tst.w	lr, #16
 800dd2a:	bf08      	it	eq
 800dd2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dd30:	f380 8809 	msr	PSP, r0
 800dd34:	f3bf 8f6f 	isb	sy
 800dd38:	4770      	bx	lr
 800dd3a:	bf00      	nop
 800dd3c:	f3af 8000 	nop.w

0800dd40 <pxCurrentTCBConst>:
 800dd40:	20000a28 	.word	0x20000a28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dd44:	bf00      	nop
 800dd46:	bf00      	nop

0800dd48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
	__asm volatile
 800dd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd52:	f383 8811 	msr	BASEPRI, r3
 800dd56:	f3bf 8f6f 	isb	sy
 800dd5a:	f3bf 8f4f 	dsb	sy
 800dd5e:	607b      	str	r3, [r7, #4]
}
 800dd60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dd62:	f7fe fcdf 	bl	800c724 <xTaskIncrementTick>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d003      	beq.n	800dd74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dd6c:	4b06      	ldr	r3, [pc, #24]	; (800dd88 <xPortSysTickHandler+0x40>)
 800dd6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd72:	601a      	str	r2, [r3, #0]
 800dd74:	2300      	movs	r3, #0
 800dd76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	f383 8811 	msr	BASEPRI, r3
}
 800dd7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dd80:	bf00      	nop
 800dd82:	3708      	adds	r7, #8
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	e000ed04 	.word	0xe000ed04

0800dd8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dd90:	4b0b      	ldr	r3, [pc, #44]	; (800ddc0 <vPortSetupTimerInterrupt+0x34>)
 800dd92:	2200      	movs	r2, #0
 800dd94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dd96:	4b0b      	ldr	r3, [pc, #44]	; (800ddc4 <vPortSetupTimerInterrupt+0x38>)
 800dd98:	2200      	movs	r2, #0
 800dd9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dd9c:	4b0a      	ldr	r3, [pc, #40]	; (800ddc8 <vPortSetupTimerInterrupt+0x3c>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a0a      	ldr	r2, [pc, #40]	; (800ddcc <vPortSetupTimerInterrupt+0x40>)
 800dda2:	fba2 2303 	umull	r2, r3, r2, r3
 800dda6:	099b      	lsrs	r3, r3, #6
 800dda8:	4a09      	ldr	r2, [pc, #36]	; (800ddd0 <vPortSetupTimerInterrupt+0x44>)
 800ddaa:	3b01      	subs	r3, #1
 800ddac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ddae:	4b04      	ldr	r3, [pc, #16]	; (800ddc0 <vPortSetupTimerInterrupt+0x34>)
 800ddb0:	2207      	movs	r2, #7
 800ddb2:	601a      	str	r2, [r3, #0]
}
 800ddb4:	bf00      	nop
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop
 800ddc0:	e000e010 	.word	0xe000e010
 800ddc4:	e000e018 	.word	0xe000e018
 800ddc8:	20000004 	.word	0x20000004
 800ddcc:	10624dd3 	.word	0x10624dd3
 800ddd0:	e000e014 	.word	0xe000e014

0800ddd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ddd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dde4 <vPortEnableVFP+0x10>
 800ddd8:	6801      	ldr	r1, [r0, #0]
 800ddda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ddde:	6001      	str	r1, [r0, #0]
 800dde0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dde2:	bf00      	nop
 800dde4:	e000ed88 	.word	0xe000ed88

0800dde8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dde8:	b480      	push	{r7}
 800ddea:	b085      	sub	sp, #20
 800ddec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ddee:	f3ef 8305 	mrs	r3, IPSR
 800ddf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2b0f      	cmp	r3, #15
 800ddf8:	d914      	bls.n	800de24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ddfa:	4a17      	ldr	r2, [pc, #92]	; (800de58 <vPortValidateInterruptPriority+0x70>)
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	4413      	add	r3, r2
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800de04:	4b15      	ldr	r3, [pc, #84]	; (800de5c <vPortValidateInterruptPriority+0x74>)
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	7afa      	ldrb	r2, [r7, #11]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d20a      	bcs.n	800de24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800de0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de12:	f383 8811 	msr	BASEPRI, r3
 800de16:	f3bf 8f6f 	isb	sy
 800de1a:	f3bf 8f4f 	dsb	sy
 800de1e:	607b      	str	r3, [r7, #4]
}
 800de20:	bf00      	nop
 800de22:	e7fe      	b.n	800de22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800de24:	4b0e      	ldr	r3, [pc, #56]	; (800de60 <vPortValidateInterruptPriority+0x78>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800de2c:	4b0d      	ldr	r3, [pc, #52]	; (800de64 <vPortValidateInterruptPriority+0x7c>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	429a      	cmp	r2, r3
 800de32:	d90a      	bls.n	800de4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800de34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de38:	f383 8811 	msr	BASEPRI, r3
 800de3c:	f3bf 8f6f 	isb	sy
 800de40:	f3bf 8f4f 	dsb	sy
 800de44:	603b      	str	r3, [r7, #0]
}
 800de46:	bf00      	nop
 800de48:	e7fe      	b.n	800de48 <vPortValidateInterruptPriority+0x60>
	}
 800de4a:	bf00      	nop
 800de4c:	3714      	adds	r7, #20
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr
 800de56:	bf00      	nop
 800de58:	e000e3f0 	.word	0xe000e3f0
 800de5c:	20001054 	.word	0x20001054
 800de60:	e000ed0c 	.word	0xe000ed0c
 800de64:	20001058 	.word	0x20001058

0800de68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b08a      	sub	sp, #40	; 0x28
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800de70:	2300      	movs	r3, #0
 800de72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800de74:	f7fe fb9a 	bl	800c5ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800de78:	4b5b      	ldr	r3, [pc, #364]	; (800dfe8 <pvPortMalloc+0x180>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d101      	bne.n	800de84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800de80:	f000 f920 	bl	800e0c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800de84:	4b59      	ldr	r3, [pc, #356]	; (800dfec <pvPortMalloc+0x184>)
 800de86:	681a      	ldr	r2, [r3, #0]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	4013      	ands	r3, r2
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	f040 8093 	bne.w	800dfb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d01d      	beq.n	800ded4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800de98:	2208      	movs	r2, #8
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	4413      	add	r3, r2
 800de9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f003 0307 	and.w	r3, r3, #7
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d014      	beq.n	800ded4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f023 0307 	bic.w	r3, r3, #7
 800deb0:	3308      	adds	r3, #8
 800deb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f003 0307 	and.w	r3, r3, #7
 800deba:	2b00      	cmp	r3, #0
 800debc:	d00a      	beq.n	800ded4 <pvPortMalloc+0x6c>
	__asm volatile
 800debe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec2:	f383 8811 	msr	BASEPRI, r3
 800dec6:	f3bf 8f6f 	isb	sy
 800deca:	f3bf 8f4f 	dsb	sy
 800dece:	617b      	str	r3, [r7, #20]
}
 800ded0:	bf00      	nop
 800ded2:	e7fe      	b.n	800ded2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d06e      	beq.n	800dfb8 <pvPortMalloc+0x150>
 800deda:	4b45      	ldr	r3, [pc, #276]	; (800dff0 <pvPortMalloc+0x188>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d869      	bhi.n	800dfb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dee4:	4b43      	ldr	r3, [pc, #268]	; (800dff4 <pvPortMalloc+0x18c>)
 800dee6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dee8:	4b42      	ldr	r3, [pc, #264]	; (800dff4 <pvPortMalloc+0x18c>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800deee:	e004      	b.n	800defa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800def0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800def4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800defa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	429a      	cmp	r2, r3
 800df02:	d903      	bls.n	800df0c <pvPortMalloc+0xa4>
 800df04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d1f1      	bne.n	800def0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800df0c:	4b36      	ldr	r3, [pc, #216]	; (800dfe8 <pvPortMalloc+0x180>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df12:	429a      	cmp	r2, r3
 800df14:	d050      	beq.n	800dfb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800df16:	6a3b      	ldr	r3, [r7, #32]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2208      	movs	r2, #8
 800df1c:	4413      	add	r3, r2
 800df1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800df20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df22:	681a      	ldr	r2, [r3, #0]
 800df24:	6a3b      	ldr	r3, [r7, #32]
 800df26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800df28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2a:	685a      	ldr	r2, [r3, #4]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	1ad2      	subs	r2, r2, r3
 800df30:	2308      	movs	r3, #8
 800df32:	005b      	lsls	r3, r3, #1
 800df34:	429a      	cmp	r2, r3
 800df36:	d91f      	bls.n	800df78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800df38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	4413      	add	r3, r2
 800df3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	f003 0307 	and.w	r3, r3, #7
 800df46:	2b00      	cmp	r3, #0
 800df48:	d00a      	beq.n	800df60 <pvPortMalloc+0xf8>
	__asm volatile
 800df4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4e:	f383 8811 	msr	BASEPRI, r3
 800df52:	f3bf 8f6f 	isb	sy
 800df56:	f3bf 8f4f 	dsb	sy
 800df5a:	613b      	str	r3, [r7, #16]
}
 800df5c:	bf00      	nop
 800df5e:	e7fe      	b.n	800df5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800df60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df62:	685a      	ldr	r2, [r3, #4]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	1ad2      	subs	r2, r2, r3
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800df6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800df72:	69b8      	ldr	r0, [r7, #24]
 800df74:	f000 f908 	bl	800e188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800df78:	4b1d      	ldr	r3, [pc, #116]	; (800dff0 <pvPortMalloc+0x188>)
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	4a1b      	ldr	r2, [pc, #108]	; (800dff0 <pvPortMalloc+0x188>)
 800df84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800df86:	4b1a      	ldr	r3, [pc, #104]	; (800dff0 <pvPortMalloc+0x188>)
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	4b1b      	ldr	r3, [pc, #108]	; (800dff8 <pvPortMalloc+0x190>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d203      	bcs.n	800df9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800df92:	4b17      	ldr	r3, [pc, #92]	; (800dff0 <pvPortMalloc+0x188>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4a18      	ldr	r2, [pc, #96]	; (800dff8 <pvPortMalloc+0x190>)
 800df98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800df9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9c:	685a      	ldr	r2, [r3, #4]
 800df9e:	4b13      	ldr	r3, [pc, #76]	; (800dfec <pvPortMalloc+0x184>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	431a      	orrs	r2, r3
 800dfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfaa:	2200      	movs	r2, #0
 800dfac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dfae:	4b13      	ldr	r3, [pc, #76]	; (800dffc <pvPortMalloc+0x194>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	4a11      	ldr	r2, [pc, #68]	; (800dffc <pvPortMalloc+0x194>)
 800dfb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dfb8:	f7fe fb06 	bl	800c5c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	f003 0307 	and.w	r3, r3, #7
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d00a      	beq.n	800dfdc <pvPortMalloc+0x174>
	__asm volatile
 800dfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfca:	f383 8811 	msr	BASEPRI, r3
 800dfce:	f3bf 8f6f 	isb	sy
 800dfd2:	f3bf 8f4f 	dsb	sy
 800dfd6:	60fb      	str	r3, [r7, #12]
}
 800dfd8:	bf00      	nop
 800dfda:	e7fe      	b.n	800dfda <pvPortMalloc+0x172>
	return pvReturn;
 800dfdc:	69fb      	ldr	r3, [r7, #28]
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3728      	adds	r7, #40	; 0x28
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	20004c64 	.word	0x20004c64
 800dfec:	20004c78 	.word	0x20004c78
 800dff0:	20004c68 	.word	0x20004c68
 800dff4:	20004c5c 	.word	0x20004c5c
 800dff8:	20004c6c 	.word	0x20004c6c
 800dffc:	20004c70 	.word	0x20004c70

0800e000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b086      	sub	sp, #24
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d04d      	beq.n	800e0ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e012:	2308      	movs	r3, #8
 800e014:	425b      	negs	r3, r3
 800e016:	697a      	ldr	r2, [r7, #20]
 800e018:	4413      	add	r3, r2
 800e01a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	685a      	ldr	r2, [r3, #4]
 800e024:	4b24      	ldr	r3, [pc, #144]	; (800e0b8 <vPortFree+0xb8>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4013      	ands	r3, r2
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d10a      	bne.n	800e044 <vPortFree+0x44>
	__asm volatile
 800e02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e032:	f383 8811 	msr	BASEPRI, r3
 800e036:	f3bf 8f6f 	isb	sy
 800e03a:	f3bf 8f4f 	dsb	sy
 800e03e:	60fb      	str	r3, [r7, #12]
}
 800e040:	bf00      	nop
 800e042:	e7fe      	b.n	800e042 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00a      	beq.n	800e062 <vPortFree+0x62>
	__asm volatile
 800e04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e050:	f383 8811 	msr	BASEPRI, r3
 800e054:	f3bf 8f6f 	isb	sy
 800e058:	f3bf 8f4f 	dsb	sy
 800e05c:	60bb      	str	r3, [r7, #8]
}
 800e05e:	bf00      	nop
 800e060:	e7fe      	b.n	800e060 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	685a      	ldr	r2, [r3, #4]
 800e066:	4b14      	ldr	r3, [pc, #80]	; (800e0b8 <vPortFree+0xb8>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4013      	ands	r3, r2
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d01e      	beq.n	800e0ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d11a      	bne.n	800e0ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	685a      	ldr	r2, [r3, #4]
 800e07c:	4b0e      	ldr	r3, [pc, #56]	; (800e0b8 <vPortFree+0xb8>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	43db      	mvns	r3, r3
 800e082:	401a      	ands	r2, r3
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e088:	f7fe fa90 	bl	800c5ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	685a      	ldr	r2, [r3, #4]
 800e090:	4b0a      	ldr	r3, [pc, #40]	; (800e0bc <vPortFree+0xbc>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4413      	add	r3, r2
 800e096:	4a09      	ldr	r2, [pc, #36]	; (800e0bc <vPortFree+0xbc>)
 800e098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e09a:	6938      	ldr	r0, [r7, #16]
 800e09c:	f000 f874 	bl	800e188 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e0a0:	4b07      	ldr	r3, [pc, #28]	; (800e0c0 <vPortFree+0xc0>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	4a06      	ldr	r2, [pc, #24]	; (800e0c0 <vPortFree+0xc0>)
 800e0a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e0aa:	f7fe fa8d 	bl	800c5c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e0ae:	bf00      	nop
 800e0b0:	3718      	adds	r7, #24
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	20004c78 	.word	0x20004c78
 800e0bc:	20004c68 	.word	0x20004c68
 800e0c0:	20004c74 	.word	0x20004c74

0800e0c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b085      	sub	sp, #20
 800e0c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e0ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e0ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e0d0:	4b27      	ldr	r3, [pc, #156]	; (800e170 <prvHeapInit+0xac>)
 800e0d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f003 0307 	and.w	r3, r3, #7
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d00c      	beq.n	800e0f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	3307      	adds	r3, #7
 800e0e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f023 0307 	bic.w	r3, r3, #7
 800e0ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e0ec:	68ba      	ldr	r2, [r7, #8]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	1ad3      	subs	r3, r2, r3
 800e0f2:	4a1f      	ldr	r2, [pc, #124]	; (800e170 <prvHeapInit+0xac>)
 800e0f4:	4413      	add	r3, r2
 800e0f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e0fc:	4a1d      	ldr	r2, [pc, #116]	; (800e174 <prvHeapInit+0xb0>)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e102:	4b1c      	ldr	r3, [pc, #112]	; (800e174 <prvHeapInit+0xb0>)
 800e104:	2200      	movs	r2, #0
 800e106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	68ba      	ldr	r2, [r7, #8]
 800e10c:	4413      	add	r3, r2
 800e10e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e110:	2208      	movs	r2, #8
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	1a9b      	subs	r3, r3, r2
 800e116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f023 0307 	bic.w	r3, r3, #7
 800e11e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	4a15      	ldr	r2, [pc, #84]	; (800e178 <prvHeapInit+0xb4>)
 800e124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e126:	4b14      	ldr	r3, [pc, #80]	; (800e178 <prvHeapInit+0xb4>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	2200      	movs	r2, #0
 800e12c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e12e:	4b12      	ldr	r3, [pc, #72]	; (800e178 <prvHeapInit+0xb4>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2200      	movs	r2, #0
 800e134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	68fa      	ldr	r2, [r7, #12]
 800e13e:	1ad2      	subs	r2, r2, r3
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e144:	4b0c      	ldr	r3, [pc, #48]	; (800e178 <prvHeapInit+0xb4>)
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	4a0a      	ldr	r2, [pc, #40]	; (800e17c <prvHeapInit+0xb8>)
 800e152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	4a09      	ldr	r2, [pc, #36]	; (800e180 <prvHeapInit+0xbc>)
 800e15a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e15c:	4b09      	ldr	r3, [pc, #36]	; (800e184 <prvHeapInit+0xc0>)
 800e15e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e162:	601a      	str	r2, [r3, #0]
}
 800e164:	bf00      	nop
 800e166:	3714      	adds	r7, #20
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr
 800e170:	2000105c 	.word	0x2000105c
 800e174:	20004c5c 	.word	0x20004c5c
 800e178:	20004c64 	.word	0x20004c64
 800e17c:	20004c6c 	.word	0x20004c6c
 800e180:	20004c68 	.word	0x20004c68
 800e184:	20004c78 	.word	0x20004c78

0800e188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e188:	b480      	push	{r7}
 800e18a:	b085      	sub	sp, #20
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e190:	4b28      	ldr	r3, [pc, #160]	; (800e234 <prvInsertBlockIntoFreeList+0xac>)
 800e192:	60fb      	str	r3, [r7, #12]
 800e194:	e002      	b.n	800e19c <prvInsertBlockIntoFreeList+0x14>
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	60fb      	str	r3, [r7, #12]
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d8f7      	bhi.n	800e196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	68ba      	ldr	r2, [r7, #8]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d108      	bne.n	800e1ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	685a      	ldr	r2, [r3, #4]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	441a      	add	r2, r3
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	68ba      	ldr	r2, [r7, #8]
 800e1d4:	441a      	add	r2, r3
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d118      	bne.n	800e210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	4b15      	ldr	r3, [pc, #84]	; (800e238 <prvInsertBlockIntoFreeList+0xb0>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d00d      	beq.n	800e206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	685a      	ldr	r2, [r3, #4]
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	441a      	add	r2, r3
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	601a      	str	r2, [r3, #0]
 800e204:	e008      	b.n	800e218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e206:	4b0c      	ldr	r3, [pc, #48]	; (800e238 <prvInsertBlockIntoFreeList+0xb0>)
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	601a      	str	r2, [r3, #0]
 800e20e:	e003      	b.n	800e218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e218:	68fa      	ldr	r2, [r7, #12]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d002      	beq.n	800e226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e226:	bf00      	nop
 800e228:	3714      	adds	r7, #20
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr
 800e232:	bf00      	nop
 800e234:	20004c5c 	.word	0x20004c5c
 800e238:	20004c64 	.word	0x20004c64

0800e23c <atof>:
 800e23c:	2100      	movs	r1, #0
 800e23e:	f001 bb61 	b.w	800f904 <strtod>
	...

0800e244 <__errno>:
 800e244:	4b01      	ldr	r3, [pc, #4]	; (800e24c <__errno+0x8>)
 800e246:	6818      	ldr	r0, [r3, #0]
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop
 800e24c:	20000028 	.word	0x20000028

0800e250 <__libc_init_array>:
 800e250:	b570      	push	{r4, r5, r6, lr}
 800e252:	4d0d      	ldr	r5, [pc, #52]	; (800e288 <__libc_init_array+0x38>)
 800e254:	4c0d      	ldr	r4, [pc, #52]	; (800e28c <__libc_init_array+0x3c>)
 800e256:	1b64      	subs	r4, r4, r5
 800e258:	10a4      	asrs	r4, r4, #2
 800e25a:	2600      	movs	r6, #0
 800e25c:	42a6      	cmp	r6, r4
 800e25e:	d109      	bne.n	800e274 <__libc_init_array+0x24>
 800e260:	4d0b      	ldr	r5, [pc, #44]	; (800e290 <__libc_init_array+0x40>)
 800e262:	4c0c      	ldr	r4, [pc, #48]	; (800e294 <__libc_init_array+0x44>)
 800e264:	f004 fae8 	bl	8012838 <_init>
 800e268:	1b64      	subs	r4, r4, r5
 800e26a:	10a4      	asrs	r4, r4, #2
 800e26c:	2600      	movs	r6, #0
 800e26e:	42a6      	cmp	r6, r4
 800e270:	d105      	bne.n	800e27e <__libc_init_array+0x2e>
 800e272:	bd70      	pop	{r4, r5, r6, pc}
 800e274:	f855 3b04 	ldr.w	r3, [r5], #4
 800e278:	4798      	blx	r3
 800e27a:	3601      	adds	r6, #1
 800e27c:	e7ee      	b.n	800e25c <__libc_init_array+0xc>
 800e27e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e282:	4798      	blx	r3
 800e284:	3601      	adds	r6, #1
 800e286:	e7f2      	b.n	800e26e <__libc_init_array+0x1e>
 800e288:	080132f0 	.word	0x080132f0
 800e28c:	080132f0 	.word	0x080132f0
 800e290:	080132f0 	.word	0x080132f0
 800e294:	080132f4 	.word	0x080132f4

0800e298 <memcpy>:
 800e298:	440a      	add	r2, r1
 800e29a:	4291      	cmp	r1, r2
 800e29c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2a0:	d100      	bne.n	800e2a4 <memcpy+0xc>
 800e2a2:	4770      	bx	lr
 800e2a4:	b510      	push	{r4, lr}
 800e2a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2ae:	4291      	cmp	r1, r2
 800e2b0:	d1f9      	bne.n	800e2a6 <memcpy+0xe>
 800e2b2:	bd10      	pop	{r4, pc}

0800e2b4 <memset>:
 800e2b4:	4402      	add	r2, r0
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d100      	bne.n	800e2be <memset+0xa>
 800e2bc:	4770      	bx	lr
 800e2be:	f803 1b01 	strb.w	r1, [r3], #1
 800e2c2:	e7f9      	b.n	800e2b8 <memset+0x4>

0800e2c4 <__cvt>:
 800e2c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c8:	ec55 4b10 	vmov	r4, r5, d0
 800e2cc:	2d00      	cmp	r5, #0
 800e2ce:	460e      	mov	r6, r1
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	462b      	mov	r3, r5
 800e2d4:	bfbb      	ittet	lt
 800e2d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e2da:	461d      	movlt	r5, r3
 800e2dc:	2300      	movge	r3, #0
 800e2de:	232d      	movlt	r3, #45	; 0x2d
 800e2e0:	700b      	strb	r3, [r1, #0]
 800e2e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e2e8:	4691      	mov	r9, r2
 800e2ea:	f023 0820 	bic.w	r8, r3, #32
 800e2ee:	bfbc      	itt	lt
 800e2f0:	4622      	movlt	r2, r4
 800e2f2:	4614      	movlt	r4, r2
 800e2f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e2f8:	d005      	beq.n	800e306 <__cvt+0x42>
 800e2fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e2fe:	d100      	bne.n	800e302 <__cvt+0x3e>
 800e300:	3601      	adds	r6, #1
 800e302:	2102      	movs	r1, #2
 800e304:	e000      	b.n	800e308 <__cvt+0x44>
 800e306:	2103      	movs	r1, #3
 800e308:	ab03      	add	r3, sp, #12
 800e30a:	9301      	str	r3, [sp, #4]
 800e30c:	ab02      	add	r3, sp, #8
 800e30e:	9300      	str	r3, [sp, #0]
 800e310:	ec45 4b10 	vmov	d0, r4, r5
 800e314:	4653      	mov	r3, sl
 800e316:	4632      	mov	r2, r6
 800e318:	f001 fc42 	bl	800fba0 <_dtoa_r>
 800e31c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e320:	4607      	mov	r7, r0
 800e322:	d102      	bne.n	800e32a <__cvt+0x66>
 800e324:	f019 0f01 	tst.w	r9, #1
 800e328:	d022      	beq.n	800e370 <__cvt+0xac>
 800e32a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e32e:	eb07 0906 	add.w	r9, r7, r6
 800e332:	d110      	bne.n	800e356 <__cvt+0x92>
 800e334:	783b      	ldrb	r3, [r7, #0]
 800e336:	2b30      	cmp	r3, #48	; 0x30
 800e338:	d10a      	bne.n	800e350 <__cvt+0x8c>
 800e33a:	2200      	movs	r2, #0
 800e33c:	2300      	movs	r3, #0
 800e33e:	4620      	mov	r0, r4
 800e340:	4629      	mov	r1, r5
 800e342:	f7f2 fbc9 	bl	8000ad8 <__aeabi_dcmpeq>
 800e346:	b918      	cbnz	r0, 800e350 <__cvt+0x8c>
 800e348:	f1c6 0601 	rsb	r6, r6, #1
 800e34c:	f8ca 6000 	str.w	r6, [sl]
 800e350:	f8da 3000 	ldr.w	r3, [sl]
 800e354:	4499      	add	r9, r3
 800e356:	2200      	movs	r2, #0
 800e358:	2300      	movs	r3, #0
 800e35a:	4620      	mov	r0, r4
 800e35c:	4629      	mov	r1, r5
 800e35e:	f7f2 fbbb 	bl	8000ad8 <__aeabi_dcmpeq>
 800e362:	b108      	cbz	r0, 800e368 <__cvt+0xa4>
 800e364:	f8cd 900c 	str.w	r9, [sp, #12]
 800e368:	2230      	movs	r2, #48	; 0x30
 800e36a:	9b03      	ldr	r3, [sp, #12]
 800e36c:	454b      	cmp	r3, r9
 800e36e:	d307      	bcc.n	800e380 <__cvt+0xbc>
 800e370:	9b03      	ldr	r3, [sp, #12]
 800e372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e374:	1bdb      	subs	r3, r3, r7
 800e376:	4638      	mov	r0, r7
 800e378:	6013      	str	r3, [r2, #0]
 800e37a:	b004      	add	sp, #16
 800e37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e380:	1c59      	adds	r1, r3, #1
 800e382:	9103      	str	r1, [sp, #12]
 800e384:	701a      	strb	r2, [r3, #0]
 800e386:	e7f0      	b.n	800e36a <__cvt+0xa6>

0800e388 <__exponent>:
 800e388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e38a:	4603      	mov	r3, r0
 800e38c:	2900      	cmp	r1, #0
 800e38e:	bfb8      	it	lt
 800e390:	4249      	neglt	r1, r1
 800e392:	f803 2b02 	strb.w	r2, [r3], #2
 800e396:	bfb4      	ite	lt
 800e398:	222d      	movlt	r2, #45	; 0x2d
 800e39a:	222b      	movge	r2, #43	; 0x2b
 800e39c:	2909      	cmp	r1, #9
 800e39e:	7042      	strb	r2, [r0, #1]
 800e3a0:	dd2a      	ble.n	800e3f8 <__exponent+0x70>
 800e3a2:	f10d 0407 	add.w	r4, sp, #7
 800e3a6:	46a4      	mov	ip, r4
 800e3a8:	270a      	movs	r7, #10
 800e3aa:	46a6      	mov	lr, r4
 800e3ac:	460a      	mov	r2, r1
 800e3ae:	fb91 f6f7 	sdiv	r6, r1, r7
 800e3b2:	fb07 1516 	mls	r5, r7, r6, r1
 800e3b6:	3530      	adds	r5, #48	; 0x30
 800e3b8:	2a63      	cmp	r2, #99	; 0x63
 800e3ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800e3be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	dcf1      	bgt.n	800e3aa <__exponent+0x22>
 800e3c6:	3130      	adds	r1, #48	; 0x30
 800e3c8:	f1ae 0502 	sub.w	r5, lr, #2
 800e3cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e3d0:	1c44      	adds	r4, r0, #1
 800e3d2:	4629      	mov	r1, r5
 800e3d4:	4561      	cmp	r1, ip
 800e3d6:	d30a      	bcc.n	800e3ee <__exponent+0x66>
 800e3d8:	f10d 0209 	add.w	r2, sp, #9
 800e3dc:	eba2 020e 	sub.w	r2, r2, lr
 800e3e0:	4565      	cmp	r5, ip
 800e3e2:	bf88      	it	hi
 800e3e4:	2200      	movhi	r2, #0
 800e3e6:	4413      	add	r3, r2
 800e3e8:	1a18      	subs	r0, r3, r0
 800e3ea:	b003      	add	sp, #12
 800e3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e3f6:	e7ed      	b.n	800e3d4 <__exponent+0x4c>
 800e3f8:	2330      	movs	r3, #48	; 0x30
 800e3fa:	3130      	adds	r1, #48	; 0x30
 800e3fc:	7083      	strb	r3, [r0, #2]
 800e3fe:	70c1      	strb	r1, [r0, #3]
 800e400:	1d03      	adds	r3, r0, #4
 800e402:	e7f1      	b.n	800e3e8 <__exponent+0x60>

0800e404 <_printf_float>:
 800e404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e408:	ed2d 8b02 	vpush	{d8}
 800e40c:	b08d      	sub	sp, #52	; 0x34
 800e40e:	460c      	mov	r4, r1
 800e410:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e414:	4616      	mov	r6, r2
 800e416:	461f      	mov	r7, r3
 800e418:	4605      	mov	r5, r0
 800e41a:	f002 fd2f 	bl	8010e7c <_localeconv_r>
 800e41e:	f8d0 a000 	ldr.w	sl, [r0]
 800e422:	4650      	mov	r0, sl
 800e424:	f7f1 fedc 	bl	80001e0 <strlen>
 800e428:	2300      	movs	r3, #0
 800e42a:	930a      	str	r3, [sp, #40]	; 0x28
 800e42c:	6823      	ldr	r3, [r4, #0]
 800e42e:	9305      	str	r3, [sp, #20]
 800e430:	f8d8 3000 	ldr.w	r3, [r8]
 800e434:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e438:	3307      	adds	r3, #7
 800e43a:	f023 0307 	bic.w	r3, r3, #7
 800e43e:	f103 0208 	add.w	r2, r3, #8
 800e442:	f8c8 2000 	str.w	r2, [r8]
 800e446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e44a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e44e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e452:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e456:	9307      	str	r3, [sp, #28]
 800e458:	f8cd 8018 	str.w	r8, [sp, #24]
 800e45c:	ee08 0a10 	vmov	s16, r0
 800e460:	4b9f      	ldr	r3, [pc, #636]	; (800e6e0 <_printf_float+0x2dc>)
 800e462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e466:	f04f 32ff 	mov.w	r2, #4294967295
 800e46a:	f7f2 fb67 	bl	8000b3c <__aeabi_dcmpun>
 800e46e:	bb88      	cbnz	r0, 800e4d4 <_printf_float+0xd0>
 800e470:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e474:	4b9a      	ldr	r3, [pc, #616]	; (800e6e0 <_printf_float+0x2dc>)
 800e476:	f04f 32ff 	mov.w	r2, #4294967295
 800e47a:	f7f2 fb41 	bl	8000b00 <__aeabi_dcmple>
 800e47e:	bb48      	cbnz	r0, 800e4d4 <_printf_float+0xd0>
 800e480:	2200      	movs	r2, #0
 800e482:	2300      	movs	r3, #0
 800e484:	4640      	mov	r0, r8
 800e486:	4649      	mov	r1, r9
 800e488:	f7f2 fb30 	bl	8000aec <__aeabi_dcmplt>
 800e48c:	b110      	cbz	r0, 800e494 <_printf_float+0x90>
 800e48e:	232d      	movs	r3, #45	; 0x2d
 800e490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e494:	4b93      	ldr	r3, [pc, #588]	; (800e6e4 <_printf_float+0x2e0>)
 800e496:	4894      	ldr	r0, [pc, #592]	; (800e6e8 <_printf_float+0x2e4>)
 800e498:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e49c:	bf94      	ite	ls
 800e49e:	4698      	movls	r8, r3
 800e4a0:	4680      	movhi	r8, r0
 800e4a2:	2303      	movs	r3, #3
 800e4a4:	6123      	str	r3, [r4, #16]
 800e4a6:	9b05      	ldr	r3, [sp, #20]
 800e4a8:	f023 0204 	bic.w	r2, r3, #4
 800e4ac:	6022      	str	r2, [r4, #0]
 800e4ae:	f04f 0900 	mov.w	r9, #0
 800e4b2:	9700      	str	r7, [sp, #0]
 800e4b4:	4633      	mov	r3, r6
 800e4b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800e4b8:	4621      	mov	r1, r4
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	f000 f9d8 	bl	800e870 <_printf_common>
 800e4c0:	3001      	adds	r0, #1
 800e4c2:	f040 8090 	bne.w	800e5e6 <_printf_float+0x1e2>
 800e4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ca:	b00d      	add	sp, #52	; 0x34
 800e4cc:	ecbd 8b02 	vpop	{d8}
 800e4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d4:	4642      	mov	r2, r8
 800e4d6:	464b      	mov	r3, r9
 800e4d8:	4640      	mov	r0, r8
 800e4da:	4649      	mov	r1, r9
 800e4dc:	f7f2 fb2e 	bl	8000b3c <__aeabi_dcmpun>
 800e4e0:	b140      	cbz	r0, 800e4f4 <_printf_float+0xf0>
 800e4e2:	464b      	mov	r3, r9
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	bfbc      	itt	lt
 800e4e8:	232d      	movlt	r3, #45	; 0x2d
 800e4ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e4ee:	487f      	ldr	r0, [pc, #508]	; (800e6ec <_printf_float+0x2e8>)
 800e4f0:	4b7f      	ldr	r3, [pc, #508]	; (800e6f0 <_printf_float+0x2ec>)
 800e4f2:	e7d1      	b.n	800e498 <_printf_float+0x94>
 800e4f4:	6863      	ldr	r3, [r4, #4]
 800e4f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e4fa:	9206      	str	r2, [sp, #24]
 800e4fc:	1c5a      	adds	r2, r3, #1
 800e4fe:	d13f      	bne.n	800e580 <_printf_float+0x17c>
 800e500:	2306      	movs	r3, #6
 800e502:	6063      	str	r3, [r4, #4]
 800e504:	9b05      	ldr	r3, [sp, #20]
 800e506:	6861      	ldr	r1, [r4, #4]
 800e508:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e50c:	2300      	movs	r3, #0
 800e50e:	9303      	str	r3, [sp, #12]
 800e510:	ab0a      	add	r3, sp, #40	; 0x28
 800e512:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e516:	ab09      	add	r3, sp, #36	; 0x24
 800e518:	ec49 8b10 	vmov	d0, r8, r9
 800e51c:	9300      	str	r3, [sp, #0]
 800e51e:	6022      	str	r2, [r4, #0]
 800e520:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e524:	4628      	mov	r0, r5
 800e526:	f7ff fecd 	bl	800e2c4 <__cvt>
 800e52a:	9b06      	ldr	r3, [sp, #24]
 800e52c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e52e:	2b47      	cmp	r3, #71	; 0x47
 800e530:	4680      	mov	r8, r0
 800e532:	d108      	bne.n	800e546 <_printf_float+0x142>
 800e534:	1cc8      	adds	r0, r1, #3
 800e536:	db02      	blt.n	800e53e <_printf_float+0x13a>
 800e538:	6863      	ldr	r3, [r4, #4]
 800e53a:	4299      	cmp	r1, r3
 800e53c:	dd41      	ble.n	800e5c2 <_printf_float+0x1be>
 800e53e:	f1ab 0b02 	sub.w	fp, fp, #2
 800e542:	fa5f fb8b 	uxtb.w	fp, fp
 800e546:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e54a:	d820      	bhi.n	800e58e <_printf_float+0x18a>
 800e54c:	3901      	subs	r1, #1
 800e54e:	465a      	mov	r2, fp
 800e550:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e554:	9109      	str	r1, [sp, #36]	; 0x24
 800e556:	f7ff ff17 	bl	800e388 <__exponent>
 800e55a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e55c:	1813      	adds	r3, r2, r0
 800e55e:	2a01      	cmp	r2, #1
 800e560:	4681      	mov	r9, r0
 800e562:	6123      	str	r3, [r4, #16]
 800e564:	dc02      	bgt.n	800e56c <_printf_float+0x168>
 800e566:	6822      	ldr	r2, [r4, #0]
 800e568:	07d2      	lsls	r2, r2, #31
 800e56a:	d501      	bpl.n	800e570 <_printf_float+0x16c>
 800e56c:	3301      	adds	r3, #1
 800e56e:	6123      	str	r3, [r4, #16]
 800e570:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e574:	2b00      	cmp	r3, #0
 800e576:	d09c      	beq.n	800e4b2 <_printf_float+0xae>
 800e578:	232d      	movs	r3, #45	; 0x2d
 800e57a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e57e:	e798      	b.n	800e4b2 <_printf_float+0xae>
 800e580:	9a06      	ldr	r2, [sp, #24]
 800e582:	2a47      	cmp	r2, #71	; 0x47
 800e584:	d1be      	bne.n	800e504 <_printf_float+0x100>
 800e586:	2b00      	cmp	r3, #0
 800e588:	d1bc      	bne.n	800e504 <_printf_float+0x100>
 800e58a:	2301      	movs	r3, #1
 800e58c:	e7b9      	b.n	800e502 <_printf_float+0xfe>
 800e58e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e592:	d118      	bne.n	800e5c6 <_printf_float+0x1c2>
 800e594:	2900      	cmp	r1, #0
 800e596:	6863      	ldr	r3, [r4, #4]
 800e598:	dd0b      	ble.n	800e5b2 <_printf_float+0x1ae>
 800e59a:	6121      	str	r1, [r4, #16]
 800e59c:	b913      	cbnz	r3, 800e5a4 <_printf_float+0x1a0>
 800e59e:	6822      	ldr	r2, [r4, #0]
 800e5a0:	07d0      	lsls	r0, r2, #31
 800e5a2:	d502      	bpl.n	800e5aa <_printf_float+0x1a6>
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	440b      	add	r3, r1
 800e5a8:	6123      	str	r3, [r4, #16]
 800e5aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800e5ac:	f04f 0900 	mov.w	r9, #0
 800e5b0:	e7de      	b.n	800e570 <_printf_float+0x16c>
 800e5b2:	b913      	cbnz	r3, 800e5ba <_printf_float+0x1b6>
 800e5b4:	6822      	ldr	r2, [r4, #0]
 800e5b6:	07d2      	lsls	r2, r2, #31
 800e5b8:	d501      	bpl.n	800e5be <_printf_float+0x1ba>
 800e5ba:	3302      	adds	r3, #2
 800e5bc:	e7f4      	b.n	800e5a8 <_printf_float+0x1a4>
 800e5be:	2301      	movs	r3, #1
 800e5c0:	e7f2      	b.n	800e5a8 <_printf_float+0x1a4>
 800e5c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e5c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5c8:	4299      	cmp	r1, r3
 800e5ca:	db05      	blt.n	800e5d8 <_printf_float+0x1d4>
 800e5cc:	6823      	ldr	r3, [r4, #0]
 800e5ce:	6121      	str	r1, [r4, #16]
 800e5d0:	07d8      	lsls	r0, r3, #31
 800e5d2:	d5ea      	bpl.n	800e5aa <_printf_float+0x1a6>
 800e5d4:	1c4b      	adds	r3, r1, #1
 800e5d6:	e7e7      	b.n	800e5a8 <_printf_float+0x1a4>
 800e5d8:	2900      	cmp	r1, #0
 800e5da:	bfd4      	ite	le
 800e5dc:	f1c1 0202 	rsble	r2, r1, #2
 800e5e0:	2201      	movgt	r2, #1
 800e5e2:	4413      	add	r3, r2
 800e5e4:	e7e0      	b.n	800e5a8 <_printf_float+0x1a4>
 800e5e6:	6823      	ldr	r3, [r4, #0]
 800e5e8:	055a      	lsls	r2, r3, #21
 800e5ea:	d407      	bmi.n	800e5fc <_printf_float+0x1f8>
 800e5ec:	6923      	ldr	r3, [r4, #16]
 800e5ee:	4642      	mov	r2, r8
 800e5f0:	4631      	mov	r1, r6
 800e5f2:	4628      	mov	r0, r5
 800e5f4:	47b8      	blx	r7
 800e5f6:	3001      	adds	r0, #1
 800e5f8:	d12c      	bne.n	800e654 <_printf_float+0x250>
 800e5fa:	e764      	b.n	800e4c6 <_printf_float+0xc2>
 800e5fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e600:	f240 80e0 	bls.w	800e7c4 <_printf_float+0x3c0>
 800e604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e608:	2200      	movs	r2, #0
 800e60a:	2300      	movs	r3, #0
 800e60c:	f7f2 fa64 	bl	8000ad8 <__aeabi_dcmpeq>
 800e610:	2800      	cmp	r0, #0
 800e612:	d034      	beq.n	800e67e <_printf_float+0x27a>
 800e614:	4a37      	ldr	r2, [pc, #220]	; (800e6f4 <_printf_float+0x2f0>)
 800e616:	2301      	movs	r3, #1
 800e618:	4631      	mov	r1, r6
 800e61a:	4628      	mov	r0, r5
 800e61c:	47b8      	blx	r7
 800e61e:	3001      	adds	r0, #1
 800e620:	f43f af51 	beq.w	800e4c6 <_printf_float+0xc2>
 800e624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e628:	429a      	cmp	r2, r3
 800e62a:	db02      	blt.n	800e632 <_printf_float+0x22e>
 800e62c:	6823      	ldr	r3, [r4, #0]
 800e62e:	07d8      	lsls	r0, r3, #31
 800e630:	d510      	bpl.n	800e654 <_printf_float+0x250>
 800e632:	ee18 3a10 	vmov	r3, s16
 800e636:	4652      	mov	r2, sl
 800e638:	4631      	mov	r1, r6
 800e63a:	4628      	mov	r0, r5
 800e63c:	47b8      	blx	r7
 800e63e:	3001      	adds	r0, #1
 800e640:	f43f af41 	beq.w	800e4c6 <_printf_float+0xc2>
 800e644:	f04f 0800 	mov.w	r8, #0
 800e648:	f104 091a 	add.w	r9, r4, #26
 800e64c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e64e:	3b01      	subs	r3, #1
 800e650:	4543      	cmp	r3, r8
 800e652:	dc09      	bgt.n	800e668 <_printf_float+0x264>
 800e654:	6823      	ldr	r3, [r4, #0]
 800e656:	079b      	lsls	r3, r3, #30
 800e658:	f100 8105 	bmi.w	800e866 <_printf_float+0x462>
 800e65c:	68e0      	ldr	r0, [r4, #12]
 800e65e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e660:	4298      	cmp	r0, r3
 800e662:	bfb8      	it	lt
 800e664:	4618      	movlt	r0, r3
 800e666:	e730      	b.n	800e4ca <_printf_float+0xc6>
 800e668:	2301      	movs	r3, #1
 800e66a:	464a      	mov	r2, r9
 800e66c:	4631      	mov	r1, r6
 800e66e:	4628      	mov	r0, r5
 800e670:	47b8      	blx	r7
 800e672:	3001      	adds	r0, #1
 800e674:	f43f af27 	beq.w	800e4c6 <_printf_float+0xc2>
 800e678:	f108 0801 	add.w	r8, r8, #1
 800e67c:	e7e6      	b.n	800e64c <_printf_float+0x248>
 800e67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e680:	2b00      	cmp	r3, #0
 800e682:	dc39      	bgt.n	800e6f8 <_printf_float+0x2f4>
 800e684:	4a1b      	ldr	r2, [pc, #108]	; (800e6f4 <_printf_float+0x2f0>)
 800e686:	2301      	movs	r3, #1
 800e688:	4631      	mov	r1, r6
 800e68a:	4628      	mov	r0, r5
 800e68c:	47b8      	blx	r7
 800e68e:	3001      	adds	r0, #1
 800e690:	f43f af19 	beq.w	800e4c6 <_printf_float+0xc2>
 800e694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e698:	4313      	orrs	r3, r2
 800e69a:	d102      	bne.n	800e6a2 <_printf_float+0x29e>
 800e69c:	6823      	ldr	r3, [r4, #0]
 800e69e:	07d9      	lsls	r1, r3, #31
 800e6a0:	d5d8      	bpl.n	800e654 <_printf_float+0x250>
 800e6a2:	ee18 3a10 	vmov	r3, s16
 800e6a6:	4652      	mov	r2, sl
 800e6a8:	4631      	mov	r1, r6
 800e6aa:	4628      	mov	r0, r5
 800e6ac:	47b8      	blx	r7
 800e6ae:	3001      	adds	r0, #1
 800e6b0:	f43f af09 	beq.w	800e4c6 <_printf_float+0xc2>
 800e6b4:	f04f 0900 	mov.w	r9, #0
 800e6b8:	f104 0a1a 	add.w	sl, r4, #26
 800e6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6be:	425b      	negs	r3, r3
 800e6c0:	454b      	cmp	r3, r9
 800e6c2:	dc01      	bgt.n	800e6c8 <_printf_float+0x2c4>
 800e6c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6c6:	e792      	b.n	800e5ee <_printf_float+0x1ea>
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	4652      	mov	r2, sl
 800e6cc:	4631      	mov	r1, r6
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	47b8      	blx	r7
 800e6d2:	3001      	adds	r0, #1
 800e6d4:	f43f aef7 	beq.w	800e4c6 <_printf_float+0xc2>
 800e6d8:	f109 0901 	add.w	r9, r9, #1
 800e6dc:	e7ee      	b.n	800e6bc <_printf_float+0x2b8>
 800e6de:	bf00      	nop
 800e6e0:	7fefffff 	.word	0x7fefffff
 800e6e4:	08012de4 	.word	0x08012de4
 800e6e8:	08012de8 	.word	0x08012de8
 800e6ec:	08012df0 	.word	0x08012df0
 800e6f0:	08012dec 	.word	0x08012dec
 800e6f4:	08012df4 	.word	0x08012df4
 800e6f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	bfa8      	it	ge
 800e700:	461a      	movge	r2, r3
 800e702:	2a00      	cmp	r2, #0
 800e704:	4691      	mov	r9, r2
 800e706:	dc37      	bgt.n	800e778 <_printf_float+0x374>
 800e708:	f04f 0b00 	mov.w	fp, #0
 800e70c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e710:	f104 021a 	add.w	r2, r4, #26
 800e714:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e716:	9305      	str	r3, [sp, #20]
 800e718:	eba3 0309 	sub.w	r3, r3, r9
 800e71c:	455b      	cmp	r3, fp
 800e71e:	dc33      	bgt.n	800e788 <_printf_float+0x384>
 800e720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e724:	429a      	cmp	r2, r3
 800e726:	db3b      	blt.n	800e7a0 <_printf_float+0x39c>
 800e728:	6823      	ldr	r3, [r4, #0]
 800e72a:	07da      	lsls	r2, r3, #31
 800e72c:	d438      	bmi.n	800e7a0 <_printf_float+0x39c>
 800e72e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e730:	9b05      	ldr	r3, [sp, #20]
 800e732:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e734:	1ad3      	subs	r3, r2, r3
 800e736:	eba2 0901 	sub.w	r9, r2, r1
 800e73a:	4599      	cmp	r9, r3
 800e73c:	bfa8      	it	ge
 800e73e:	4699      	movge	r9, r3
 800e740:	f1b9 0f00 	cmp.w	r9, #0
 800e744:	dc35      	bgt.n	800e7b2 <_printf_float+0x3ae>
 800e746:	f04f 0800 	mov.w	r8, #0
 800e74a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e74e:	f104 0a1a 	add.w	sl, r4, #26
 800e752:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e756:	1a9b      	subs	r3, r3, r2
 800e758:	eba3 0309 	sub.w	r3, r3, r9
 800e75c:	4543      	cmp	r3, r8
 800e75e:	f77f af79 	ble.w	800e654 <_printf_float+0x250>
 800e762:	2301      	movs	r3, #1
 800e764:	4652      	mov	r2, sl
 800e766:	4631      	mov	r1, r6
 800e768:	4628      	mov	r0, r5
 800e76a:	47b8      	blx	r7
 800e76c:	3001      	adds	r0, #1
 800e76e:	f43f aeaa 	beq.w	800e4c6 <_printf_float+0xc2>
 800e772:	f108 0801 	add.w	r8, r8, #1
 800e776:	e7ec      	b.n	800e752 <_printf_float+0x34e>
 800e778:	4613      	mov	r3, r2
 800e77a:	4631      	mov	r1, r6
 800e77c:	4642      	mov	r2, r8
 800e77e:	4628      	mov	r0, r5
 800e780:	47b8      	blx	r7
 800e782:	3001      	adds	r0, #1
 800e784:	d1c0      	bne.n	800e708 <_printf_float+0x304>
 800e786:	e69e      	b.n	800e4c6 <_printf_float+0xc2>
 800e788:	2301      	movs	r3, #1
 800e78a:	4631      	mov	r1, r6
 800e78c:	4628      	mov	r0, r5
 800e78e:	9205      	str	r2, [sp, #20]
 800e790:	47b8      	blx	r7
 800e792:	3001      	adds	r0, #1
 800e794:	f43f ae97 	beq.w	800e4c6 <_printf_float+0xc2>
 800e798:	9a05      	ldr	r2, [sp, #20]
 800e79a:	f10b 0b01 	add.w	fp, fp, #1
 800e79e:	e7b9      	b.n	800e714 <_printf_float+0x310>
 800e7a0:	ee18 3a10 	vmov	r3, s16
 800e7a4:	4652      	mov	r2, sl
 800e7a6:	4631      	mov	r1, r6
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	47b8      	blx	r7
 800e7ac:	3001      	adds	r0, #1
 800e7ae:	d1be      	bne.n	800e72e <_printf_float+0x32a>
 800e7b0:	e689      	b.n	800e4c6 <_printf_float+0xc2>
 800e7b2:	9a05      	ldr	r2, [sp, #20]
 800e7b4:	464b      	mov	r3, r9
 800e7b6:	4442      	add	r2, r8
 800e7b8:	4631      	mov	r1, r6
 800e7ba:	4628      	mov	r0, r5
 800e7bc:	47b8      	blx	r7
 800e7be:	3001      	adds	r0, #1
 800e7c0:	d1c1      	bne.n	800e746 <_printf_float+0x342>
 800e7c2:	e680      	b.n	800e4c6 <_printf_float+0xc2>
 800e7c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7c6:	2a01      	cmp	r2, #1
 800e7c8:	dc01      	bgt.n	800e7ce <_printf_float+0x3ca>
 800e7ca:	07db      	lsls	r3, r3, #31
 800e7cc:	d538      	bpl.n	800e840 <_printf_float+0x43c>
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	4642      	mov	r2, r8
 800e7d2:	4631      	mov	r1, r6
 800e7d4:	4628      	mov	r0, r5
 800e7d6:	47b8      	blx	r7
 800e7d8:	3001      	adds	r0, #1
 800e7da:	f43f ae74 	beq.w	800e4c6 <_printf_float+0xc2>
 800e7de:	ee18 3a10 	vmov	r3, s16
 800e7e2:	4652      	mov	r2, sl
 800e7e4:	4631      	mov	r1, r6
 800e7e6:	4628      	mov	r0, r5
 800e7e8:	47b8      	blx	r7
 800e7ea:	3001      	adds	r0, #1
 800e7ec:	f43f ae6b 	beq.w	800e4c6 <_printf_float+0xc2>
 800e7f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	f7f2 f96e 	bl	8000ad8 <__aeabi_dcmpeq>
 800e7fc:	b9d8      	cbnz	r0, 800e836 <_printf_float+0x432>
 800e7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e800:	f108 0201 	add.w	r2, r8, #1
 800e804:	3b01      	subs	r3, #1
 800e806:	4631      	mov	r1, r6
 800e808:	4628      	mov	r0, r5
 800e80a:	47b8      	blx	r7
 800e80c:	3001      	adds	r0, #1
 800e80e:	d10e      	bne.n	800e82e <_printf_float+0x42a>
 800e810:	e659      	b.n	800e4c6 <_printf_float+0xc2>
 800e812:	2301      	movs	r3, #1
 800e814:	4652      	mov	r2, sl
 800e816:	4631      	mov	r1, r6
 800e818:	4628      	mov	r0, r5
 800e81a:	47b8      	blx	r7
 800e81c:	3001      	adds	r0, #1
 800e81e:	f43f ae52 	beq.w	800e4c6 <_printf_float+0xc2>
 800e822:	f108 0801 	add.w	r8, r8, #1
 800e826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e828:	3b01      	subs	r3, #1
 800e82a:	4543      	cmp	r3, r8
 800e82c:	dcf1      	bgt.n	800e812 <_printf_float+0x40e>
 800e82e:	464b      	mov	r3, r9
 800e830:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e834:	e6dc      	b.n	800e5f0 <_printf_float+0x1ec>
 800e836:	f04f 0800 	mov.w	r8, #0
 800e83a:	f104 0a1a 	add.w	sl, r4, #26
 800e83e:	e7f2      	b.n	800e826 <_printf_float+0x422>
 800e840:	2301      	movs	r3, #1
 800e842:	4642      	mov	r2, r8
 800e844:	e7df      	b.n	800e806 <_printf_float+0x402>
 800e846:	2301      	movs	r3, #1
 800e848:	464a      	mov	r2, r9
 800e84a:	4631      	mov	r1, r6
 800e84c:	4628      	mov	r0, r5
 800e84e:	47b8      	blx	r7
 800e850:	3001      	adds	r0, #1
 800e852:	f43f ae38 	beq.w	800e4c6 <_printf_float+0xc2>
 800e856:	f108 0801 	add.w	r8, r8, #1
 800e85a:	68e3      	ldr	r3, [r4, #12]
 800e85c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e85e:	1a5b      	subs	r3, r3, r1
 800e860:	4543      	cmp	r3, r8
 800e862:	dcf0      	bgt.n	800e846 <_printf_float+0x442>
 800e864:	e6fa      	b.n	800e65c <_printf_float+0x258>
 800e866:	f04f 0800 	mov.w	r8, #0
 800e86a:	f104 0919 	add.w	r9, r4, #25
 800e86e:	e7f4      	b.n	800e85a <_printf_float+0x456>

0800e870 <_printf_common>:
 800e870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e874:	4616      	mov	r6, r2
 800e876:	4699      	mov	r9, r3
 800e878:	688a      	ldr	r2, [r1, #8]
 800e87a:	690b      	ldr	r3, [r1, #16]
 800e87c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e880:	4293      	cmp	r3, r2
 800e882:	bfb8      	it	lt
 800e884:	4613      	movlt	r3, r2
 800e886:	6033      	str	r3, [r6, #0]
 800e888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e88c:	4607      	mov	r7, r0
 800e88e:	460c      	mov	r4, r1
 800e890:	b10a      	cbz	r2, 800e896 <_printf_common+0x26>
 800e892:	3301      	adds	r3, #1
 800e894:	6033      	str	r3, [r6, #0]
 800e896:	6823      	ldr	r3, [r4, #0]
 800e898:	0699      	lsls	r1, r3, #26
 800e89a:	bf42      	ittt	mi
 800e89c:	6833      	ldrmi	r3, [r6, #0]
 800e89e:	3302      	addmi	r3, #2
 800e8a0:	6033      	strmi	r3, [r6, #0]
 800e8a2:	6825      	ldr	r5, [r4, #0]
 800e8a4:	f015 0506 	ands.w	r5, r5, #6
 800e8a8:	d106      	bne.n	800e8b8 <_printf_common+0x48>
 800e8aa:	f104 0a19 	add.w	sl, r4, #25
 800e8ae:	68e3      	ldr	r3, [r4, #12]
 800e8b0:	6832      	ldr	r2, [r6, #0]
 800e8b2:	1a9b      	subs	r3, r3, r2
 800e8b4:	42ab      	cmp	r3, r5
 800e8b6:	dc26      	bgt.n	800e906 <_printf_common+0x96>
 800e8b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e8bc:	1e13      	subs	r3, r2, #0
 800e8be:	6822      	ldr	r2, [r4, #0]
 800e8c0:	bf18      	it	ne
 800e8c2:	2301      	movne	r3, #1
 800e8c4:	0692      	lsls	r2, r2, #26
 800e8c6:	d42b      	bmi.n	800e920 <_printf_common+0xb0>
 800e8c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e8cc:	4649      	mov	r1, r9
 800e8ce:	4638      	mov	r0, r7
 800e8d0:	47c0      	blx	r8
 800e8d2:	3001      	adds	r0, #1
 800e8d4:	d01e      	beq.n	800e914 <_printf_common+0xa4>
 800e8d6:	6823      	ldr	r3, [r4, #0]
 800e8d8:	68e5      	ldr	r5, [r4, #12]
 800e8da:	6832      	ldr	r2, [r6, #0]
 800e8dc:	f003 0306 	and.w	r3, r3, #6
 800e8e0:	2b04      	cmp	r3, #4
 800e8e2:	bf08      	it	eq
 800e8e4:	1aad      	subeq	r5, r5, r2
 800e8e6:	68a3      	ldr	r3, [r4, #8]
 800e8e8:	6922      	ldr	r2, [r4, #16]
 800e8ea:	bf0c      	ite	eq
 800e8ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8f0:	2500      	movne	r5, #0
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	bfc4      	itt	gt
 800e8f6:	1a9b      	subgt	r3, r3, r2
 800e8f8:	18ed      	addgt	r5, r5, r3
 800e8fa:	2600      	movs	r6, #0
 800e8fc:	341a      	adds	r4, #26
 800e8fe:	42b5      	cmp	r5, r6
 800e900:	d11a      	bne.n	800e938 <_printf_common+0xc8>
 800e902:	2000      	movs	r0, #0
 800e904:	e008      	b.n	800e918 <_printf_common+0xa8>
 800e906:	2301      	movs	r3, #1
 800e908:	4652      	mov	r2, sl
 800e90a:	4649      	mov	r1, r9
 800e90c:	4638      	mov	r0, r7
 800e90e:	47c0      	blx	r8
 800e910:	3001      	adds	r0, #1
 800e912:	d103      	bne.n	800e91c <_printf_common+0xac>
 800e914:	f04f 30ff 	mov.w	r0, #4294967295
 800e918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e91c:	3501      	adds	r5, #1
 800e91e:	e7c6      	b.n	800e8ae <_printf_common+0x3e>
 800e920:	18e1      	adds	r1, r4, r3
 800e922:	1c5a      	adds	r2, r3, #1
 800e924:	2030      	movs	r0, #48	; 0x30
 800e926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e92a:	4422      	add	r2, r4
 800e92c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e934:	3302      	adds	r3, #2
 800e936:	e7c7      	b.n	800e8c8 <_printf_common+0x58>
 800e938:	2301      	movs	r3, #1
 800e93a:	4622      	mov	r2, r4
 800e93c:	4649      	mov	r1, r9
 800e93e:	4638      	mov	r0, r7
 800e940:	47c0      	blx	r8
 800e942:	3001      	adds	r0, #1
 800e944:	d0e6      	beq.n	800e914 <_printf_common+0xa4>
 800e946:	3601      	adds	r6, #1
 800e948:	e7d9      	b.n	800e8fe <_printf_common+0x8e>
	...

0800e94c <_printf_i>:
 800e94c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e950:	460c      	mov	r4, r1
 800e952:	4691      	mov	r9, r2
 800e954:	7e27      	ldrb	r7, [r4, #24]
 800e956:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e958:	2f78      	cmp	r7, #120	; 0x78
 800e95a:	4680      	mov	r8, r0
 800e95c:	469a      	mov	sl, r3
 800e95e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e962:	d807      	bhi.n	800e974 <_printf_i+0x28>
 800e964:	2f62      	cmp	r7, #98	; 0x62
 800e966:	d80a      	bhi.n	800e97e <_printf_i+0x32>
 800e968:	2f00      	cmp	r7, #0
 800e96a:	f000 80d8 	beq.w	800eb1e <_printf_i+0x1d2>
 800e96e:	2f58      	cmp	r7, #88	; 0x58
 800e970:	f000 80a3 	beq.w	800eaba <_printf_i+0x16e>
 800e974:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e97c:	e03a      	b.n	800e9f4 <_printf_i+0xa8>
 800e97e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e982:	2b15      	cmp	r3, #21
 800e984:	d8f6      	bhi.n	800e974 <_printf_i+0x28>
 800e986:	a001      	add	r0, pc, #4	; (adr r0, 800e98c <_printf_i+0x40>)
 800e988:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e98c:	0800e9e5 	.word	0x0800e9e5
 800e990:	0800e9f9 	.word	0x0800e9f9
 800e994:	0800e975 	.word	0x0800e975
 800e998:	0800e975 	.word	0x0800e975
 800e99c:	0800e975 	.word	0x0800e975
 800e9a0:	0800e975 	.word	0x0800e975
 800e9a4:	0800e9f9 	.word	0x0800e9f9
 800e9a8:	0800e975 	.word	0x0800e975
 800e9ac:	0800e975 	.word	0x0800e975
 800e9b0:	0800e975 	.word	0x0800e975
 800e9b4:	0800e975 	.word	0x0800e975
 800e9b8:	0800eb05 	.word	0x0800eb05
 800e9bc:	0800ea29 	.word	0x0800ea29
 800e9c0:	0800eae7 	.word	0x0800eae7
 800e9c4:	0800e975 	.word	0x0800e975
 800e9c8:	0800e975 	.word	0x0800e975
 800e9cc:	0800eb27 	.word	0x0800eb27
 800e9d0:	0800e975 	.word	0x0800e975
 800e9d4:	0800ea29 	.word	0x0800ea29
 800e9d8:	0800e975 	.word	0x0800e975
 800e9dc:	0800e975 	.word	0x0800e975
 800e9e0:	0800eaef 	.word	0x0800eaef
 800e9e4:	680b      	ldr	r3, [r1, #0]
 800e9e6:	1d1a      	adds	r2, r3, #4
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	600a      	str	r2, [r1, #0]
 800e9ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e9f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	e0a3      	b.n	800eb40 <_printf_i+0x1f4>
 800e9f8:	6825      	ldr	r5, [r4, #0]
 800e9fa:	6808      	ldr	r0, [r1, #0]
 800e9fc:	062e      	lsls	r6, r5, #24
 800e9fe:	f100 0304 	add.w	r3, r0, #4
 800ea02:	d50a      	bpl.n	800ea1a <_printf_i+0xce>
 800ea04:	6805      	ldr	r5, [r0, #0]
 800ea06:	600b      	str	r3, [r1, #0]
 800ea08:	2d00      	cmp	r5, #0
 800ea0a:	da03      	bge.n	800ea14 <_printf_i+0xc8>
 800ea0c:	232d      	movs	r3, #45	; 0x2d
 800ea0e:	426d      	negs	r5, r5
 800ea10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea14:	485e      	ldr	r0, [pc, #376]	; (800eb90 <_printf_i+0x244>)
 800ea16:	230a      	movs	r3, #10
 800ea18:	e019      	b.n	800ea4e <_printf_i+0x102>
 800ea1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ea1e:	6805      	ldr	r5, [r0, #0]
 800ea20:	600b      	str	r3, [r1, #0]
 800ea22:	bf18      	it	ne
 800ea24:	b22d      	sxthne	r5, r5
 800ea26:	e7ef      	b.n	800ea08 <_printf_i+0xbc>
 800ea28:	680b      	ldr	r3, [r1, #0]
 800ea2a:	6825      	ldr	r5, [r4, #0]
 800ea2c:	1d18      	adds	r0, r3, #4
 800ea2e:	6008      	str	r0, [r1, #0]
 800ea30:	0628      	lsls	r0, r5, #24
 800ea32:	d501      	bpl.n	800ea38 <_printf_i+0xec>
 800ea34:	681d      	ldr	r5, [r3, #0]
 800ea36:	e002      	b.n	800ea3e <_printf_i+0xf2>
 800ea38:	0669      	lsls	r1, r5, #25
 800ea3a:	d5fb      	bpl.n	800ea34 <_printf_i+0xe8>
 800ea3c:	881d      	ldrh	r5, [r3, #0]
 800ea3e:	4854      	ldr	r0, [pc, #336]	; (800eb90 <_printf_i+0x244>)
 800ea40:	2f6f      	cmp	r7, #111	; 0x6f
 800ea42:	bf0c      	ite	eq
 800ea44:	2308      	moveq	r3, #8
 800ea46:	230a      	movne	r3, #10
 800ea48:	2100      	movs	r1, #0
 800ea4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea4e:	6866      	ldr	r6, [r4, #4]
 800ea50:	60a6      	str	r6, [r4, #8]
 800ea52:	2e00      	cmp	r6, #0
 800ea54:	bfa2      	ittt	ge
 800ea56:	6821      	ldrge	r1, [r4, #0]
 800ea58:	f021 0104 	bicge.w	r1, r1, #4
 800ea5c:	6021      	strge	r1, [r4, #0]
 800ea5e:	b90d      	cbnz	r5, 800ea64 <_printf_i+0x118>
 800ea60:	2e00      	cmp	r6, #0
 800ea62:	d04d      	beq.n	800eb00 <_printf_i+0x1b4>
 800ea64:	4616      	mov	r6, r2
 800ea66:	fbb5 f1f3 	udiv	r1, r5, r3
 800ea6a:	fb03 5711 	mls	r7, r3, r1, r5
 800ea6e:	5dc7      	ldrb	r7, [r0, r7]
 800ea70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ea74:	462f      	mov	r7, r5
 800ea76:	42bb      	cmp	r3, r7
 800ea78:	460d      	mov	r5, r1
 800ea7a:	d9f4      	bls.n	800ea66 <_printf_i+0x11a>
 800ea7c:	2b08      	cmp	r3, #8
 800ea7e:	d10b      	bne.n	800ea98 <_printf_i+0x14c>
 800ea80:	6823      	ldr	r3, [r4, #0]
 800ea82:	07df      	lsls	r7, r3, #31
 800ea84:	d508      	bpl.n	800ea98 <_printf_i+0x14c>
 800ea86:	6923      	ldr	r3, [r4, #16]
 800ea88:	6861      	ldr	r1, [r4, #4]
 800ea8a:	4299      	cmp	r1, r3
 800ea8c:	bfde      	ittt	le
 800ea8e:	2330      	movle	r3, #48	; 0x30
 800ea90:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ea94:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ea98:	1b92      	subs	r2, r2, r6
 800ea9a:	6122      	str	r2, [r4, #16]
 800ea9c:	f8cd a000 	str.w	sl, [sp]
 800eaa0:	464b      	mov	r3, r9
 800eaa2:	aa03      	add	r2, sp, #12
 800eaa4:	4621      	mov	r1, r4
 800eaa6:	4640      	mov	r0, r8
 800eaa8:	f7ff fee2 	bl	800e870 <_printf_common>
 800eaac:	3001      	adds	r0, #1
 800eaae:	d14c      	bne.n	800eb4a <_printf_i+0x1fe>
 800eab0:	f04f 30ff 	mov.w	r0, #4294967295
 800eab4:	b004      	add	sp, #16
 800eab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaba:	4835      	ldr	r0, [pc, #212]	; (800eb90 <_printf_i+0x244>)
 800eabc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eac0:	6823      	ldr	r3, [r4, #0]
 800eac2:	680e      	ldr	r6, [r1, #0]
 800eac4:	061f      	lsls	r7, r3, #24
 800eac6:	f856 5b04 	ldr.w	r5, [r6], #4
 800eaca:	600e      	str	r6, [r1, #0]
 800eacc:	d514      	bpl.n	800eaf8 <_printf_i+0x1ac>
 800eace:	07d9      	lsls	r1, r3, #31
 800ead0:	bf44      	itt	mi
 800ead2:	f043 0320 	orrmi.w	r3, r3, #32
 800ead6:	6023      	strmi	r3, [r4, #0]
 800ead8:	b91d      	cbnz	r5, 800eae2 <_printf_i+0x196>
 800eada:	6823      	ldr	r3, [r4, #0]
 800eadc:	f023 0320 	bic.w	r3, r3, #32
 800eae0:	6023      	str	r3, [r4, #0]
 800eae2:	2310      	movs	r3, #16
 800eae4:	e7b0      	b.n	800ea48 <_printf_i+0xfc>
 800eae6:	6823      	ldr	r3, [r4, #0]
 800eae8:	f043 0320 	orr.w	r3, r3, #32
 800eaec:	6023      	str	r3, [r4, #0]
 800eaee:	2378      	movs	r3, #120	; 0x78
 800eaf0:	4828      	ldr	r0, [pc, #160]	; (800eb94 <_printf_i+0x248>)
 800eaf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eaf6:	e7e3      	b.n	800eac0 <_printf_i+0x174>
 800eaf8:	065e      	lsls	r6, r3, #25
 800eafa:	bf48      	it	mi
 800eafc:	b2ad      	uxthmi	r5, r5
 800eafe:	e7e6      	b.n	800eace <_printf_i+0x182>
 800eb00:	4616      	mov	r6, r2
 800eb02:	e7bb      	b.n	800ea7c <_printf_i+0x130>
 800eb04:	680b      	ldr	r3, [r1, #0]
 800eb06:	6826      	ldr	r6, [r4, #0]
 800eb08:	6960      	ldr	r0, [r4, #20]
 800eb0a:	1d1d      	adds	r5, r3, #4
 800eb0c:	600d      	str	r5, [r1, #0]
 800eb0e:	0635      	lsls	r5, r6, #24
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	d501      	bpl.n	800eb18 <_printf_i+0x1cc>
 800eb14:	6018      	str	r0, [r3, #0]
 800eb16:	e002      	b.n	800eb1e <_printf_i+0x1d2>
 800eb18:	0671      	lsls	r1, r6, #25
 800eb1a:	d5fb      	bpl.n	800eb14 <_printf_i+0x1c8>
 800eb1c:	8018      	strh	r0, [r3, #0]
 800eb1e:	2300      	movs	r3, #0
 800eb20:	6123      	str	r3, [r4, #16]
 800eb22:	4616      	mov	r6, r2
 800eb24:	e7ba      	b.n	800ea9c <_printf_i+0x150>
 800eb26:	680b      	ldr	r3, [r1, #0]
 800eb28:	1d1a      	adds	r2, r3, #4
 800eb2a:	600a      	str	r2, [r1, #0]
 800eb2c:	681e      	ldr	r6, [r3, #0]
 800eb2e:	6862      	ldr	r2, [r4, #4]
 800eb30:	2100      	movs	r1, #0
 800eb32:	4630      	mov	r0, r6
 800eb34:	f7f1 fb5c 	bl	80001f0 <memchr>
 800eb38:	b108      	cbz	r0, 800eb3e <_printf_i+0x1f2>
 800eb3a:	1b80      	subs	r0, r0, r6
 800eb3c:	6060      	str	r0, [r4, #4]
 800eb3e:	6863      	ldr	r3, [r4, #4]
 800eb40:	6123      	str	r3, [r4, #16]
 800eb42:	2300      	movs	r3, #0
 800eb44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb48:	e7a8      	b.n	800ea9c <_printf_i+0x150>
 800eb4a:	6923      	ldr	r3, [r4, #16]
 800eb4c:	4632      	mov	r2, r6
 800eb4e:	4649      	mov	r1, r9
 800eb50:	4640      	mov	r0, r8
 800eb52:	47d0      	blx	sl
 800eb54:	3001      	adds	r0, #1
 800eb56:	d0ab      	beq.n	800eab0 <_printf_i+0x164>
 800eb58:	6823      	ldr	r3, [r4, #0]
 800eb5a:	079b      	lsls	r3, r3, #30
 800eb5c:	d413      	bmi.n	800eb86 <_printf_i+0x23a>
 800eb5e:	68e0      	ldr	r0, [r4, #12]
 800eb60:	9b03      	ldr	r3, [sp, #12]
 800eb62:	4298      	cmp	r0, r3
 800eb64:	bfb8      	it	lt
 800eb66:	4618      	movlt	r0, r3
 800eb68:	e7a4      	b.n	800eab4 <_printf_i+0x168>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	4632      	mov	r2, r6
 800eb6e:	4649      	mov	r1, r9
 800eb70:	4640      	mov	r0, r8
 800eb72:	47d0      	blx	sl
 800eb74:	3001      	adds	r0, #1
 800eb76:	d09b      	beq.n	800eab0 <_printf_i+0x164>
 800eb78:	3501      	adds	r5, #1
 800eb7a:	68e3      	ldr	r3, [r4, #12]
 800eb7c:	9903      	ldr	r1, [sp, #12]
 800eb7e:	1a5b      	subs	r3, r3, r1
 800eb80:	42ab      	cmp	r3, r5
 800eb82:	dcf2      	bgt.n	800eb6a <_printf_i+0x21e>
 800eb84:	e7eb      	b.n	800eb5e <_printf_i+0x212>
 800eb86:	2500      	movs	r5, #0
 800eb88:	f104 0619 	add.w	r6, r4, #25
 800eb8c:	e7f5      	b.n	800eb7a <_printf_i+0x22e>
 800eb8e:	bf00      	nop
 800eb90:	08012df6 	.word	0x08012df6
 800eb94:	08012e07 	.word	0x08012e07

0800eb98 <siprintf>:
 800eb98:	b40e      	push	{r1, r2, r3}
 800eb9a:	b500      	push	{lr}
 800eb9c:	b09c      	sub	sp, #112	; 0x70
 800eb9e:	ab1d      	add	r3, sp, #116	; 0x74
 800eba0:	9002      	str	r0, [sp, #8]
 800eba2:	9006      	str	r0, [sp, #24]
 800eba4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eba8:	4809      	ldr	r0, [pc, #36]	; (800ebd0 <siprintf+0x38>)
 800ebaa:	9107      	str	r1, [sp, #28]
 800ebac:	9104      	str	r1, [sp, #16]
 800ebae:	4909      	ldr	r1, [pc, #36]	; (800ebd4 <siprintf+0x3c>)
 800ebb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebb4:	9105      	str	r1, [sp, #20]
 800ebb6:	6800      	ldr	r0, [r0, #0]
 800ebb8:	9301      	str	r3, [sp, #4]
 800ebba:	a902      	add	r1, sp, #8
 800ebbc:	f002 ff4c 	bl	8011a58 <_svfiprintf_r>
 800ebc0:	9b02      	ldr	r3, [sp, #8]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	701a      	strb	r2, [r3, #0]
 800ebc6:	b01c      	add	sp, #112	; 0x70
 800ebc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebcc:	b003      	add	sp, #12
 800ebce:	4770      	bx	lr
 800ebd0:	20000028 	.word	0x20000028
 800ebd4:	ffff0208 	.word	0xffff0208

0800ebd8 <strcat>:
 800ebd8:	b510      	push	{r4, lr}
 800ebda:	4602      	mov	r2, r0
 800ebdc:	7814      	ldrb	r4, [r2, #0]
 800ebde:	4613      	mov	r3, r2
 800ebe0:	3201      	adds	r2, #1
 800ebe2:	2c00      	cmp	r4, #0
 800ebe4:	d1fa      	bne.n	800ebdc <strcat+0x4>
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebf0:	2a00      	cmp	r2, #0
 800ebf2:	d1f9      	bne.n	800ebe8 <strcat+0x10>
 800ebf4:	bd10      	pop	{r4, pc}

0800ebf6 <strchr>:
 800ebf6:	b2c9      	uxtb	r1, r1
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebfe:	b11a      	cbz	r2, 800ec08 <strchr+0x12>
 800ec00:	428a      	cmp	r2, r1
 800ec02:	d1f9      	bne.n	800ebf8 <strchr+0x2>
 800ec04:	4618      	mov	r0, r3
 800ec06:	4770      	bx	lr
 800ec08:	2900      	cmp	r1, #0
 800ec0a:	bf18      	it	ne
 800ec0c:	2300      	movne	r3, #0
 800ec0e:	e7f9      	b.n	800ec04 <strchr+0xe>

0800ec10 <strcpy>:
 800ec10:	4603      	mov	r3, r0
 800ec12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec16:	f803 2b01 	strb.w	r2, [r3], #1
 800ec1a:	2a00      	cmp	r2, #0
 800ec1c:	d1f9      	bne.n	800ec12 <strcpy+0x2>
 800ec1e:	4770      	bx	lr

0800ec20 <strdup>:
 800ec20:	4b02      	ldr	r3, [pc, #8]	; (800ec2c <strdup+0xc>)
 800ec22:	4601      	mov	r1, r0
 800ec24:	6818      	ldr	r0, [r3, #0]
 800ec26:	f000 b803 	b.w	800ec30 <_strdup_r>
 800ec2a:	bf00      	nop
 800ec2c:	20000028 	.word	0x20000028

0800ec30 <_strdup_r>:
 800ec30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec32:	4604      	mov	r4, r0
 800ec34:	4608      	mov	r0, r1
 800ec36:	460d      	mov	r5, r1
 800ec38:	f7f1 fad2 	bl	80001e0 <strlen>
 800ec3c:	1c42      	adds	r2, r0, #1
 800ec3e:	4611      	mov	r1, r2
 800ec40:	4620      	mov	r0, r4
 800ec42:	9201      	str	r2, [sp, #4]
 800ec44:	f002 fe52 	bl	80118ec <_malloc_r>
 800ec48:	4604      	mov	r4, r0
 800ec4a:	b118      	cbz	r0, 800ec54 <_strdup_r+0x24>
 800ec4c:	9a01      	ldr	r2, [sp, #4]
 800ec4e:	4629      	mov	r1, r5
 800ec50:	f7ff fb22 	bl	800e298 <memcpy>
 800ec54:	4620      	mov	r0, r4
 800ec56:	b003      	add	sp, #12
 800ec58:	bd30      	pop	{r4, r5, pc}

0800ec5a <strncpy>:
 800ec5a:	b510      	push	{r4, lr}
 800ec5c:	3901      	subs	r1, #1
 800ec5e:	4603      	mov	r3, r0
 800ec60:	b132      	cbz	r2, 800ec70 <strncpy+0x16>
 800ec62:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ec66:	f803 4b01 	strb.w	r4, [r3], #1
 800ec6a:	3a01      	subs	r2, #1
 800ec6c:	2c00      	cmp	r4, #0
 800ec6e:	d1f7      	bne.n	800ec60 <strncpy+0x6>
 800ec70:	441a      	add	r2, r3
 800ec72:	2100      	movs	r1, #0
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d100      	bne.n	800ec7a <strncpy+0x20>
 800ec78:	bd10      	pop	{r4, pc}
 800ec7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ec7e:	e7f9      	b.n	800ec74 <strncpy+0x1a>

0800ec80 <strsep>:
 800ec80:	4602      	mov	r2, r0
 800ec82:	2300      	movs	r3, #0
 800ec84:	6800      	ldr	r0, [r0, #0]
 800ec86:	f000 be7d 	b.w	800f984 <__strtok_r>

0800ec8a <strstr>:
 800ec8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec8c:	780c      	ldrb	r4, [r1, #0]
 800ec8e:	b164      	cbz	r4, 800ecaa <strstr+0x20>
 800ec90:	4603      	mov	r3, r0
 800ec92:	781a      	ldrb	r2, [r3, #0]
 800ec94:	4618      	mov	r0, r3
 800ec96:	1c5e      	adds	r6, r3, #1
 800ec98:	b90a      	cbnz	r2, 800ec9e <strstr+0x14>
 800ec9a:	4610      	mov	r0, r2
 800ec9c:	e005      	b.n	800ecaa <strstr+0x20>
 800ec9e:	4294      	cmp	r4, r2
 800eca0:	d108      	bne.n	800ecb4 <strstr+0x2a>
 800eca2:	460d      	mov	r5, r1
 800eca4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800eca8:	b902      	cbnz	r2, 800ecac <strstr+0x22>
 800ecaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecac:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800ecb0:	4297      	cmp	r7, r2
 800ecb2:	d0f7      	beq.n	800eca4 <strstr+0x1a>
 800ecb4:	4633      	mov	r3, r6
 800ecb6:	e7ec      	b.n	800ec92 <strstr+0x8>

0800ecb8 <sulp>:
 800ecb8:	b570      	push	{r4, r5, r6, lr}
 800ecba:	4604      	mov	r4, r0
 800ecbc:	460d      	mov	r5, r1
 800ecbe:	ec45 4b10 	vmov	d0, r4, r5
 800ecc2:	4616      	mov	r6, r2
 800ecc4:	f002 fc64 	bl	8011590 <__ulp>
 800ecc8:	ec51 0b10 	vmov	r0, r1, d0
 800eccc:	b17e      	cbz	r6, 800ecee <sulp+0x36>
 800ecce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ecd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	dd09      	ble.n	800ecee <sulp+0x36>
 800ecda:	051b      	lsls	r3, r3, #20
 800ecdc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ece0:	2400      	movs	r4, #0
 800ece2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ece6:	4622      	mov	r2, r4
 800ece8:	462b      	mov	r3, r5
 800ecea:	f7f1 fc8d 	bl	8000608 <__aeabi_dmul>
 800ecee:	bd70      	pop	{r4, r5, r6, pc}

0800ecf0 <_strtod_l>:
 800ecf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf4:	b0a3      	sub	sp, #140	; 0x8c
 800ecf6:	461f      	mov	r7, r3
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	931e      	str	r3, [sp, #120]	; 0x78
 800ecfc:	4ba4      	ldr	r3, [pc, #656]	; (800ef90 <_strtod_l+0x2a0>)
 800ecfe:	9219      	str	r2, [sp, #100]	; 0x64
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	9307      	str	r3, [sp, #28]
 800ed04:	4604      	mov	r4, r0
 800ed06:	4618      	mov	r0, r3
 800ed08:	4688      	mov	r8, r1
 800ed0a:	f7f1 fa69 	bl	80001e0 <strlen>
 800ed0e:	f04f 0a00 	mov.w	sl, #0
 800ed12:	4605      	mov	r5, r0
 800ed14:	f04f 0b00 	mov.w	fp, #0
 800ed18:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ed1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ed1e:	781a      	ldrb	r2, [r3, #0]
 800ed20:	2a2b      	cmp	r2, #43	; 0x2b
 800ed22:	d04c      	beq.n	800edbe <_strtod_l+0xce>
 800ed24:	d839      	bhi.n	800ed9a <_strtod_l+0xaa>
 800ed26:	2a0d      	cmp	r2, #13
 800ed28:	d832      	bhi.n	800ed90 <_strtod_l+0xa0>
 800ed2a:	2a08      	cmp	r2, #8
 800ed2c:	d832      	bhi.n	800ed94 <_strtod_l+0xa4>
 800ed2e:	2a00      	cmp	r2, #0
 800ed30:	d03c      	beq.n	800edac <_strtod_l+0xbc>
 800ed32:	2300      	movs	r3, #0
 800ed34:	930e      	str	r3, [sp, #56]	; 0x38
 800ed36:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ed38:	7833      	ldrb	r3, [r6, #0]
 800ed3a:	2b30      	cmp	r3, #48	; 0x30
 800ed3c:	f040 80b4 	bne.w	800eea8 <_strtod_l+0x1b8>
 800ed40:	7873      	ldrb	r3, [r6, #1]
 800ed42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ed46:	2b58      	cmp	r3, #88	; 0x58
 800ed48:	d16c      	bne.n	800ee24 <_strtod_l+0x134>
 800ed4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed4c:	9301      	str	r3, [sp, #4]
 800ed4e:	ab1e      	add	r3, sp, #120	; 0x78
 800ed50:	9702      	str	r7, [sp, #8]
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	4a8f      	ldr	r2, [pc, #572]	; (800ef94 <_strtod_l+0x2a4>)
 800ed56:	ab1f      	add	r3, sp, #124	; 0x7c
 800ed58:	a91d      	add	r1, sp, #116	; 0x74
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	f001 fd86 	bl	801086c <__gethex>
 800ed60:	f010 0707 	ands.w	r7, r0, #7
 800ed64:	4605      	mov	r5, r0
 800ed66:	d005      	beq.n	800ed74 <_strtod_l+0x84>
 800ed68:	2f06      	cmp	r7, #6
 800ed6a:	d12a      	bne.n	800edc2 <_strtod_l+0xd2>
 800ed6c:	3601      	adds	r6, #1
 800ed6e:	2300      	movs	r3, #0
 800ed70:	961d      	str	r6, [sp, #116]	; 0x74
 800ed72:	930e      	str	r3, [sp, #56]	; 0x38
 800ed74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	f040 8596 	bne.w	800f8a8 <_strtod_l+0xbb8>
 800ed7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed7e:	b1db      	cbz	r3, 800edb8 <_strtod_l+0xc8>
 800ed80:	4652      	mov	r2, sl
 800ed82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ed86:	ec43 2b10 	vmov	d0, r2, r3
 800ed8a:	b023      	add	sp, #140	; 0x8c
 800ed8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed90:	2a20      	cmp	r2, #32
 800ed92:	d1ce      	bne.n	800ed32 <_strtod_l+0x42>
 800ed94:	3301      	adds	r3, #1
 800ed96:	931d      	str	r3, [sp, #116]	; 0x74
 800ed98:	e7c0      	b.n	800ed1c <_strtod_l+0x2c>
 800ed9a:	2a2d      	cmp	r2, #45	; 0x2d
 800ed9c:	d1c9      	bne.n	800ed32 <_strtod_l+0x42>
 800ed9e:	2201      	movs	r2, #1
 800eda0:	920e      	str	r2, [sp, #56]	; 0x38
 800eda2:	1c5a      	adds	r2, r3, #1
 800eda4:	921d      	str	r2, [sp, #116]	; 0x74
 800eda6:	785b      	ldrb	r3, [r3, #1]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d1c4      	bne.n	800ed36 <_strtod_l+0x46>
 800edac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800edae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	f040 8576 	bne.w	800f8a4 <_strtod_l+0xbb4>
 800edb8:	4652      	mov	r2, sl
 800edba:	465b      	mov	r3, fp
 800edbc:	e7e3      	b.n	800ed86 <_strtod_l+0x96>
 800edbe:	2200      	movs	r2, #0
 800edc0:	e7ee      	b.n	800eda0 <_strtod_l+0xb0>
 800edc2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800edc4:	b13a      	cbz	r2, 800edd6 <_strtod_l+0xe6>
 800edc6:	2135      	movs	r1, #53	; 0x35
 800edc8:	a820      	add	r0, sp, #128	; 0x80
 800edca:	f002 fcec 	bl	80117a6 <__copybits>
 800edce:	991e      	ldr	r1, [sp, #120]	; 0x78
 800edd0:	4620      	mov	r0, r4
 800edd2:	f002 f8b1 	bl	8010f38 <_Bfree>
 800edd6:	3f01      	subs	r7, #1
 800edd8:	2f05      	cmp	r7, #5
 800edda:	d807      	bhi.n	800edec <_strtod_l+0xfc>
 800eddc:	e8df f007 	tbb	[pc, r7]
 800ede0:	1d180b0e 	.word	0x1d180b0e
 800ede4:	030e      	.short	0x030e
 800ede6:	f04f 0b00 	mov.w	fp, #0
 800edea:	46da      	mov	sl, fp
 800edec:	0728      	lsls	r0, r5, #28
 800edee:	d5c1      	bpl.n	800ed74 <_strtod_l+0x84>
 800edf0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800edf4:	e7be      	b.n	800ed74 <_strtod_l+0x84>
 800edf6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800edfa:	e7f7      	b.n	800edec <_strtod_l+0xfc>
 800edfc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800ee00:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ee02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ee06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ee0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ee0e:	e7ed      	b.n	800edec <_strtod_l+0xfc>
 800ee10:	f8df b184 	ldr.w	fp, [pc, #388]	; 800ef98 <_strtod_l+0x2a8>
 800ee14:	f04f 0a00 	mov.w	sl, #0
 800ee18:	e7e8      	b.n	800edec <_strtod_l+0xfc>
 800ee1a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ee1e:	f04f 3aff 	mov.w	sl, #4294967295
 800ee22:	e7e3      	b.n	800edec <_strtod_l+0xfc>
 800ee24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ee26:	1c5a      	adds	r2, r3, #1
 800ee28:	921d      	str	r2, [sp, #116]	; 0x74
 800ee2a:	785b      	ldrb	r3, [r3, #1]
 800ee2c:	2b30      	cmp	r3, #48	; 0x30
 800ee2e:	d0f9      	beq.n	800ee24 <_strtod_l+0x134>
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d09f      	beq.n	800ed74 <_strtod_l+0x84>
 800ee34:	2301      	movs	r3, #1
 800ee36:	f04f 0900 	mov.w	r9, #0
 800ee3a:	9304      	str	r3, [sp, #16]
 800ee3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ee3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ee40:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ee44:	464f      	mov	r7, r9
 800ee46:	220a      	movs	r2, #10
 800ee48:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ee4a:	7806      	ldrb	r6, [r0, #0]
 800ee4c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ee50:	b2d9      	uxtb	r1, r3
 800ee52:	2909      	cmp	r1, #9
 800ee54:	d92a      	bls.n	800eeac <_strtod_l+0x1bc>
 800ee56:	9907      	ldr	r1, [sp, #28]
 800ee58:	462a      	mov	r2, r5
 800ee5a:	f003 f871 	bl	8011f40 <strncmp>
 800ee5e:	b398      	cbz	r0, 800eec8 <_strtod_l+0x1d8>
 800ee60:	2000      	movs	r0, #0
 800ee62:	4633      	mov	r3, r6
 800ee64:	463d      	mov	r5, r7
 800ee66:	9007      	str	r0, [sp, #28]
 800ee68:	4602      	mov	r2, r0
 800ee6a:	2b65      	cmp	r3, #101	; 0x65
 800ee6c:	d001      	beq.n	800ee72 <_strtod_l+0x182>
 800ee6e:	2b45      	cmp	r3, #69	; 0x45
 800ee70:	d118      	bne.n	800eea4 <_strtod_l+0x1b4>
 800ee72:	b91d      	cbnz	r5, 800ee7c <_strtod_l+0x18c>
 800ee74:	9b04      	ldr	r3, [sp, #16]
 800ee76:	4303      	orrs	r3, r0
 800ee78:	d098      	beq.n	800edac <_strtod_l+0xbc>
 800ee7a:	2500      	movs	r5, #0
 800ee7c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800ee80:	f108 0301 	add.w	r3, r8, #1
 800ee84:	931d      	str	r3, [sp, #116]	; 0x74
 800ee86:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ee8a:	2b2b      	cmp	r3, #43	; 0x2b
 800ee8c:	d075      	beq.n	800ef7a <_strtod_l+0x28a>
 800ee8e:	2b2d      	cmp	r3, #45	; 0x2d
 800ee90:	d07b      	beq.n	800ef8a <_strtod_l+0x29a>
 800ee92:	f04f 0c00 	mov.w	ip, #0
 800ee96:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ee9a:	2909      	cmp	r1, #9
 800ee9c:	f240 8082 	bls.w	800efa4 <_strtod_l+0x2b4>
 800eea0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800eea4:	2600      	movs	r6, #0
 800eea6:	e09d      	b.n	800efe4 <_strtod_l+0x2f4>
 800eea8:	2300      	movs	r3, #0
 800eeaa:	e7c4      	b.n	800ee36 <_strtod_l+0x146>
 800eeac:	2f08      	cmp	r7, #8
 800eeae:	bfd8      	it	le
 800eeb0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800eeb2:	f100 0001 	add.w	r0, r0, #1
 800eeb6:	bfda      	itte	le
 800eeb8:	fb02 3301 	mlale	r3, r2, r1, r3
 800eebc:	9309      	strle	r3, [sp, #36]	; 0x24
 800eebe:	fb02 3909 	mlagt	r9, r2, r9, r3
 800eec2:	3701      	adds	r7, #1
 800eec4:	901d      	str	r0, [sp, #116]	; 0x74
 800eec6:	e7bf      	b.n	800ee48 <_strtod_l+0x158>
 800eec8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eeca:	195a      	adds	r2, r3, r5
 800eecc:	921d      	str	r2, [sp, #116]	; 0x74
 800eece:	5d5b      	ldrb	r3, [r3, r5]
 800eed0:	2f00      	cmp	r7, #0
 800eed2:	d037      	beq.n	800ef44 <_strtod_l+0x254>
 800eed4:	9007      	str	r0, [sp, #28]
 800eed6:	463d      	mov	r5, r7
 800eed8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800eedc:	2a09      	cmp	r2, #9
 800eede:	d912      	bls.n	800ef06 <_strtod_l+0x216>
 800eee0:	2201      	movs	r2, #1
 800eee2:	e7c2      	b.n	800ee6a <_strtod_l+0x17a>
 800eee4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eee6:	1c5a      	adds	r2, r3, #1
 800eee8:	921d      	str	r2, [sp, #116]	; 0x74
 800eeea:	785b      	ldrb	r3, [r3, #1]
 800eeec:	3001      	adds	r0, #1
 800eeee:	2b30      	cmp	r3, #48	; 0x30
 800eef0:	d0f8      	beq.n	800eee4 <_strtod_l+0x1f4>
 800eef2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800eef6:	2a08      	cmp	r2, #8
 800eef8:	f200 84db 	bhi.w	800f8b2 <_strtod_l+0xbc2>
 800eefc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800eefe:	9007      	str	r0, [sp, #28]
 800ef00:	2000      	movs	r0, #0
 800ef02:	920a      	str	r2, [sp, #40]	; 0x28
 800ef04:	4605      	mov	r5, r0
 800ef06:	3b30      	subs	r3, #48	; 0x30
 800ef08:	f100 0201 	add.w	r2, r0, #1
 800ef0c:	d014      	beq.n	800ef38 <_strtod_l+0x248>
 800ef0e:	9907      	ldr	r1, [sp, #28]
 800ef10:	4411      	add	r1, r2
 800ef12:	9107      	str	r1, [sp, #28]
 800ef14:	462a      	mov	r2, r5
 800ef16:	eb00 0e05 	add.w	lr, r0, r5
 800ef1a:	210a      	movs	r1, #10
 800ef1c:	4572      	cmp	r2, lr
 800ef1e:	d113      	bne.n	800ef48 <_strtod_l+0x258>
 800ef20:	182a      	adds	r2, r5, r0
 800ef22:	2a08      	cmp	r2, #8
 800ef24:	f105 0501 	add.w	r5, r5, #1
 800ef28:	4405      	add	r5, r0
 800ef2a:	dc1c      	bgt.n	800ef66 <_strtod_l+0x276>
 800ef2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef2e:	220a      	movs	r2, #10
 800ef30:	fb02 3301 	mla	r3, r2, r1, r3
 800ef34:	9309      	str	r3, [sp, #36]	; 0x24
 800ef36:	2200      	movs	r2, #0
 800ef38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ef3a:	1c59      	adds	r1, r3, #1
 800ef3c:	911d      	str	r1, [sp, #116]	; 0x74
 800ef3e:	785b      	ldrb	r3, [r3, #1]
 800ef40:	4610      	mov	r0, r2
 800ef42:	e7c9      	b.n	800eed8 <_strtod_l+0x1e8>
 800ef44:	4638      	mov	r0, r7
 800ef46:	e7d2      	b.n	800eeee <_strtod_l+0x1fe>
 800ef48:	2a08      	cmp	r2, #8
 800ef4a:	dc04      	bgt.n	800ef56 <_strtod_l+0x266>
 800ef4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ef4e:	434e      	muls	r6, r1
 800ef50:	9609      	str	r6, [sp, #36]	; 0x24
 800ef52:	3201      	adds	r2, #1
 800ef54:	e7e2      	b.n	800ef1c <_strtod_l+0x22c>
 800ef56:	f102 0c01 	add.w	ip, r2, #1
 800ef5a:	f1bc 0f10 	cmp.w	ip, #16
 800ef5e:	bfd8      	it	le
 800ef60:	fb01 f909 	mulle.w	r9, r1, r9
 800ef64:	e7f5      	b.n	800ef52 <_strtod_l+0x262>
 800ef66:	2d10      	cmp	r5, #16
 800ef68:	bfdc      	itt	le
 800ef6a:	220a      	movle	r2, #10
 800ef6c:	fb02 3909 	mlale	r9, r2, r9, r3
 800ef70:	e7e1      	b.n	800ef36 <_strtod_l+0x246>
 800ef72:	2300      	movs	r3, #0
 800ef74:	9307      	str	r3, [sp, #28]
 800ef76:	2201      	movs	r2, #1
 800ef78:	e77c      	b.n	800ee74 <_strtod_l+0x184>
 800ef7a:	f04f 0c00 	mov.w	ip, #0
 800ef7e:	f108 0302 	add.w	r3, r8, #2
 800ef82:	931d      	str	r3, [sp, #116]	; 0x74
 800ef84:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ef88:	e785      	b.n	800ee96 <_strtod_l+0x1a6>
 800ef8a:	f04f 0c01 	mov.w	ip, #1
 800ef8e:	e7f6      	b.n	800ef7e <_strtod_l+0x28e>
 800ef90:	08013004 	.word	0x08013004
 800ef94:	08012e18 	.word	0x08012e18
 800ef98:	7ff00000 	.word	0x7ff00000
 800ef9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ef9e:	1c59      	adds	r1, r3, #1
 800efa0:	911d      	str	r1, [sp, #116]	; 0x74
 800efa2:	785b      	ldrb	r3, [r3, #1]
 800efa4:	2b30      	cmp	r3, #48	; 0x30
 800efa6:	d0f9      	beq.n	800ef9c <_strtod_l+0x2ac>
 800efa8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800efac:	2908      	cmp	r1, #8
 800efae:	f63f af79 	bhi.w	800eea4 <_strtod_l+0x1b4>
 800efb2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800efb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800efb8:	9308      	str	r3, [sp, #32]
 800efba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800efbc:	1c59      	adds	r1, r3, #1
 800efbe:	911d      	str	r1, [sp, #116]	; 0x74
 800efc0:	785b      	ldrb	r3, [r3, #1]
 800efc2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800efc6:	2e09      	cmp	r6, #9
 800efc8:	d937      	bls.n	800f03a <_strtod_l+0x34a>
 800efca:	9e08      	ldr	r6, [sp, #32]
 800efcc:	1b89      	subs	r1, r1, r6
 800efce:	2908      	cmp	r1, #8
 800efd0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800efd4:	dc02      	bgt.n	800efdc <_strtod_l+0x2ec>
 800efd6:	4576      	cmp	r6, lr
 800efd8:	bfa8      	it	ge
 800efda:	4676      	movge	r6, lr
 800efdc:	f1bc 0f00 	cmp.w	ip, #0
 800efe0:	d000      	beq.n	800efe4 <_strtod_l+0x2f4>
 800efe2:	4276      	negs	r6, r6
 800efe4:	2d00      	cmp	r5, #0
 800efe6:	d14f      	bne.n	800f088 <_strtod_l+0x398>
 800efe8:	9904      	ldr	r1, [sp, #16]
 800efea:	4301      	orrs	r1, r0
 800efec:	f47f aec2 	bne.w	800ed74 <_strtod_l+0x84>
 800eff0:	2a00      	cmp	r2, #0
 800eff2:	f47f aedb 	bne.w	800edac <_strtod_l+0xbc>
 800eff6:	2b69      	cmp	r3, #105	; 0x69
 800eff8:	d027      	beq.n	800f04a <_strtod_l+0x35a>
 800effa:	dc24      	bgt.n	800f046 <_strtod_l+0x356>
 800effc:	2b49      	cmp	r3, #73	; 0x49
 800effe:	d024      	beq.n	800f04a <_strtod_l+0x35a>
 800f000:	2b4e      	cmp	r3, #78	; 0x4e
 800f002:	f47f aed3 	bne.w	800edac <_strtod_l+0xbc>
 800f006:	499e      	ldr	r1, [pc, #632]	; (800f280 <_strtod_l+0x590>)
 800f008:	a81d      	add	r0, sp, #116	; 0x74
 800f00a:	f001 fe87 	bl	8010d1c <__match>
 800f00e:	2800      	cmp	r0, #0
 800f010:	f43f aecc 	beq.w	800edac <_strtod_l+0xbc>
 800f014:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	2b28      	cmp	r3, #40	; 0x28
 800f01a:	d12d      	bne.n	800f078 <_strtod_l+0x388>
 800f01c:	4999      	ldr	r1, [pc, #612]	; (800f284 <_strtod_l+0x594>)
 800f01e:	aa20      	add	r2, sp, #128	; 0x80
 800f020:	a81d      	add	r0, sp, #116	; 0x74
 800f022:	f001 fe8f 	bl	8010d44 <__hexnan>
 800f026:	2805      	cmp	r0, #5
 800f028:	d126      	bne.n	800f078 <_strtod_l+0x388>
 800f02a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f02c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800f030:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f034:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f038:	e69c      	b.n	800ed74 <_strtod_l+0x84>
 800f03a:	210a      	movs	r1, #10
 800f03c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800f040:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f044:	e7b9      	b.n	800efba <_strtod_l+0x2ca>
 800f046:	2b6e      	cmp	r3, #110	; 0x6e
 800f048:	e7db      	b.n	800f002 <_strtod_l+0x312>
 800f04a:	498f      	ldr	r1, [pc, #572]	; (800f288 <_strtod_l+0x598>)
 800f04c:	a81d      	add	r0, sp, #116	; 0x74
 800f04e:	f001 fe65 	bl	8010d1c <__match>
 800f052:	2800      	cmp	r0, #0
 800f054:	f43f aeaa 	beq.w	800edac <_strtod_l+0xbc>
 800f058:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f05a:	498c      	ldr	r1, [pc, #560]	; (800f28c <_strtod_l+0x59c>)
 800f05c:	3b01      	subs	r3, #1
 800f05e:	a81d      	add	r0, sp, #116	; 0x74
 800f060:	931d      	str	r3, [sp, #116]	; 0x74
 800f062:	f001 fe5b 	bl	8010d1c <__match>
 800f066:	b910      	cbnz	r0, 800f06e <_strtod_l+0x37e>
 800f068:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f06a:	3301      	adds	r3, #1
 800f06c:	931d      	str	r3, [sp, #116]	; 0x74
 800f06e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800f29c <_strtod_l+0x5ac>
 800f072:	f04f 0a00 	mov.w	sl, #0
 800f076:	e67d      	b.n	800ed74 <_strtod_l+0x84>
 800f078:	4885      	ldr	r0, [pc, #532]	; (800f290 <_strtod_l+0x5a0>)
 800f07a:	f002 ff49 	bl	8011f10 <nan>
 800f07e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f082:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f086:	e675      	b.n	800ed74 <_strtod_l+0x84>
 800f088:	9b07      	ldr	r3, [sp, #28]
 800f08a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f08c:	1af3      	subs	r3, r6, r3
 800f08e:	2f00      	cmp	r7, #0
 800f090:	bf08      	it	eq
 800f092:	462f      	moveq	r7, r5
 800f094:	2d10      	cmp	r5, #16
 800f096:	9308      	str	r3, [sp, #32]
 800f098:	46a8      	mov	r8, r5
 800f09a:	bfa8      	it	ge
 800f09c:	f04f 0810 	movge.w	r8, #16
 800f0a0:	f7f1 fa38 	bl	8000514 <__aeabi_ui2d>
 800f0a4:	2d09      	cmp	r5, #9
 800f0a6:	4682      	mov	sl, r0
 800f0a8:	468b      	mov	fp, r1
 800f0aa:	dd13      	ble.n	800f0d4 <_strtod_l+0x3e4>
 800f0ac:	4b79      	ldr	r3, [pc, #484]	; (800f294 <_strtod_l+0x5a4>)
 800f0ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f0b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f0b6:	f7f1 faa7 	bl	8000608 <__aeabi_dmul>
 800f0ba:	4682      	mov	sl, r0
 800f0bc:	4648      	mov	r0, r9
 800f0be:	468b      	mov	fp, r1
 800f0c0:	f7f1 fa28 	bl	8000514 <__aeabi_ui2d>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	4650      	mov	r0, sl
 800f0ca:	4659      	mov	r1, fp
 800f0cc:	f7f1 f8e6 	bl	800029c <__adddf3>
 800f0d0:	4682      	mov	sl, r0
 800f0d2:	468b      	mov	fp, r1
 800f0d4:	2d0f      	cmp	r5, #15
 800f0d6:	dc38      	bgt.n	800f14a <_strtod_l+0x45a>
 800f0d8:	9b08      	ldr	r3, [sp, #32]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	f43f ae4a 	beq.w	800ed74 <_strtod_l+0x84>
 800f0e0:	dd24      	ble.n	800f12c <_strtod_l+0x43c>
 800f0e2:	2b16      	cmp	r3, #22
 800f0e4:	dc0b      	bgt.n	800f0fe <_strtod_l+0x40e>
 800f0e6:	4d6b      	ldr	r5, [pc, #428]	; (800f294 <_strtod_l+0x5a4>)
 800f0e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800f0ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f0f0:	4652      	mov	r2, sl
 800f0f2:	465b      	mov	r3, fp
 800f0f4:	f7f1 fa88 	bl	8000608 <__aeabi_dmul>
 800f0f8:	4682      	mov	sl, r0
 800f0fa:	468b      	mov	fp, r1
 800f0fc:	e63a      	b.n	800ed74 <_strtod_l+0x84>
 800f0fe:	9a08      	ldr	r2, [sp, #32]
 800f100:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f104:	4293      	cmp	r3, r2
 800f106:	db20      	blt.n	800f14a <_strtod_l+0x45a>
 800f108:	4c62      	ldr	r4, [pc, #392]	; (800f294 <_strtod_l+0x5a4>)
 800f10a:	f1c5 050f 	rsb	r5, r5, #15
 800f10e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f112:	4652      	mov	r2, sl
 800f114:	465b      	mov	r3, fp
 800f116:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f11a:	f7f1 fa75 	bl	8000608 <__aeabi_dmul>
 800f11e:	9b08      	ldr	r3, [sp, #32]
 800f120:	1b5d      	subs	r5, r3, r5
 800f122:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f126:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f12a:	e7e3      	b.n	800f0f4 <_strtod_l+0x404>
 800f12c:	9b08      	ldr	r3, [sp, #32]
 800f12e:	3316      	adds	r3, #22
 800f130:	db0b      	blt.n	800f14a <_strtod_l+0x45a>
 800f132:	9b07      	ldr	r3, [sp, #28]
 800f134:	4a57      	ldr	r2, [pc, #348]	; (800f294 <_strtod_l+0x5a4>)
 800f136:	1b9e      	subs	r6, r3, r6
 800f138:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f13c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f140:	4650      	mov	r0, sl
 800f142:	4659      	mov	r1, fp
 800f144:	f7f1 fb8a 	bl	800085c <__aeabi_ddiv>
 800f148:	e7d6      	b.n	800f0f8 <_strtod_l+0x408>
 800f14a:	9b08      	ldr	r3, [sp, #32]
 800f14c:	eba5 0808 	sub.w	r8, r5, r8
 800f150:	4498      	add	r8, r3
 800f152:	f1b8 0f00 	cmp.w	r8, #0
 800f156:	dd71      	ble.n	800f23c <_strtod_l+0x54c>
 800f158:	f018 030f 	ands.w	r3, r8, #15
 800f15c:	d00a      	beq.n	800f174 <_strtod_l+0x484>
 800f15e:	494d      	ldr	r1, [pc, #308]	; (800f294 <_strtod_l+0x5a4>)
 800f160:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f164:	4652      	mov	r2, sl
 800f166:	465b      	mov	r3, fp
 800f168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f16c:	f7f1 fa4c 	bl	8000608 <__aeabi_dmul>
 800f170:	4682      	mov	sl, r0
 800f172:	468b      	mov	fp, r1
 800f174:	f038 080f 	bics.w	r8, r8, #15
 800f178:	d04d      	beq.n	800f216 <_strtod_l+0x526>
 800f17a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f17e:	dd22      	ble.n	800f1c6 <_strtod_l+0x4d6>
 800f180:	2500      	movs	r5, #0
 800f182:	462e      	mov	r6, r5
 800f184:	9509      	str	r5, [sp, #36]	; 0x24
 800f186:	9507      	str	r5, [sp, #28]
 800f188:	2322      	movs	r3, #34	; 0x22
 800f18a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800f29c <_strtod_l+0x5ac>
 800f18e:	6023      	str	r3, [r4, #0]
 800f190:	f04f 0a00 	mov.w	sl, #0
 800f194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f196:	2b00      	cmp	r3, #0
 800f198:	f43f adec 	beq.w	800ed74 <_strtod_l+0x84>
 800f19c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f19e:	4620      	mov	r0, r4
 800f1a0:	f001 feca 	bl	8010f38 <_Bfree>
 800f1a4:	9907      	ldr	r1, [sp, #28]
 800f1a6:	4620      	mov	r0, r4
 800f1a8:	f001 fec6 	bl	8010f38 <_Bfree>
 800f1ac:	4631      	mov	r1, r6
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f001 fec2 	bl	8010f38 <_Bfree>
 800f1b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	f001 febe 	bl	8010f38 <_Bfree>
 800f1bc:	4629      	mov	r1, r5
 800f1be:	4620      	mov	r0, r4
 800f1c0:	f001 feba 	bl	8010f38 <_Bfree>
 800f1c4:	e5d6      	b.n	800ed74 <_strtod_l+0x84>
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f1cc:	4650      	mov	r0, sl
 800f1ce:	4659      	mov	r1, fp
 800f1d0:	4699      	mov	r9, r3
 800f1d2:	f1b8 0f01 	cmp.w	r8, #1
 800f1d6:	dc21      	bgt.n	800f21c <_strtod_l+0x52c>
 800f1d8:	b10b      	cbz	r3, 800f1de <_strtod_l+0x4ee>
 800f1da:	4682      	mov	sl, r0
 800f1dc:	468b      	mov	fp, r1
 800f1de:	4b2e      	ldr	r3, [pc, #184]	; (800f298 <_strtod_l+0x5a8>)
 800f1e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f1e4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f1e8:	4652      	mov	r2, sl
 800f1ea:	465b      	mov	r3, fp
 800f1ec:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f1f0:	f7f1 fa0a 	bl	8000608 <__aeabi_dmul>
 800f1f4:	4b29      	ldr	r3, [pc, #164]	; (800f29c <_strtod_l+0x5ac>)
 800f1f6:	460a      	mov	r2, r1
 800f1f8:	400b      	ands	r3, r1
 800f1fa:	4929      	ldr	r1, [pc, #164]	; (800f2a0 <_strtod_l+0x5b0>)
 800f1fc:	428b      	cmp	r3, r1
 800f1fe:	4682      	mov	sl, r0
 800f200:	d8be      	bhi.n	800f180 <_strtod_l+0x490>
 800f202:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f206:	428b      	cmp	r3, r1
 800f208:	bf86      	itte	hi
 800f20a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f2a4 <_strtod_l+0x5b4>
 800f20e:	f04f 3aff 	movhi.w	sl, #4294967295
 800f212:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f216:	2300      	movs	r3, #0
 800f218:	9304      	str	r3, [sp, #16]
 800f21a:	e081      	b.n	800f320 <_strtod_l+0x630>
 800f21c:	f018 0f01 	tst.w	r8, #1
 800f220:	d007      	beq.n	800f232 <_strtod_l+0x542>
 800f222:	4b1d      	ldr	r3, [pc, #116]	; (800f298 <_strtod_l+0x5a8>)
 800f224:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800f228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22c:	f7f1 f9ec 	bl	8000608 <__aeabi_dmul>
 800f230:	2301      	movs	r3, #1
 800f232:	f109 0901 	add.w	r9, r9, #1
 800f236:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f23a:	e7ca      	b.n	800f1d2 <_strtod_l+0x4e2>
 800f23c:	d0eb      	beq.n	800f216 <_strtod_l+0x526>
 800f23e:	f1c8 0800 	rsb	r8, r8, #0
 800f242:	f018 020f 	ands.w	r2, r8, #15
 800f246:	d00a      	beq.n	800f25e <_strtod_l+0x56e>
 800f248:	4b12      	ldr	r3, [pc, #72]	; (800f294 <_strtod_l+0x5a4>)
 800f24a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f24e:	4650      	mov	r0, sl
 800f250:	4659      	mov	r1, fp
 800f252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f256:	f7f1 fb01 	bl	800085c <__aeabi_ddiv>
 800f25a:	4682      	mov	sl, r0
 800f25c:	468b      	mov	fp, r1
 800f25e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f262:	d0d8      	beq.n	800f216 <_strtod_l+0x526>
 800f264:	f1b8 0f1f 	cmp.w	r8, #31
 800f268:	dd1e      	ble.n	800f2a8 <_strtod_l+0x5b8>
 800f26a:	2500      	movs	r5, #0
 800f26c:	462e      	mov	r6, r5
 800f26e:	9509      	str	r5, [sp, #36]	; 0x24
 800f270:	9507      	str	r5, [sp, #28]
 800f272:	2322      	movs	r3, #34	; 0x22
 800f274:	f04f 0a00 	mov.w	sl, #0
 800f278:	f04f 0b00 	mov.w	fp, #0
 800f27c:	6023      	str	r3, [r4, #0]
 800f27e:	e789      	b.n	800f194 <_strtod_l+0x4a4>
 800f280:	08012df1 	.word	0x08012df1
 800f284:	08012e2c 	.word	0x08012e2c
 800f288:	08012de9 	.word	0x08012de9
 800f28c:	08012f1f 	.word	0x08012f1f
 800f290:	08012f1b 	.word	0x08012f1b
 800f294:	080130a0 	.word	0x080130a0
 800f298:	08013078 	.word	0x08013078
 800f29c:	7ff00000 	.word	0x7ff00000
 800f2a0:	7ca00000 	.word	0x7ca00000
 800f2a4:	7fefffff 	.word	0x7fefffff
 800f2a8:	f018 0310 	ands.w	r3, r8, #16
 800f2ac:	bf18      	it	ne
 800f2ae:	236a      	movne	r3, #106	; 0x6a
 800f2b0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800f668 <_strtod_l+0x978>
 800f2b4:	9304      	str	r3, [sp, #16]
 800f2b6:	4650      	mov	r0, sl
 800f2b8:	4659      	mov	r1, fp
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	f018 0f01 	tst.w	r8, #1
 800f2c0:	d004      	beq.n	800f2cc <_strtod_l+0x5dc>
 800f2c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f2c6:	f7f1 f99f 	bl	8000608 <__aeabi_dmul>
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f2d0:	f109 0908 	add.w	r9, r9, #8
 800f2d4:	d1f2      	bne.n	800f2bc <_strtod_l+0x5cc>
 800f2d6:	b10b      	cbz	r3, 800f2dc <_strtod_l+0x5ec>
 800f2d8:	4682      	mov	sl, r0
 800f2da:	468b      	mov	fp, r1
 800f2dc:	9b04      	ldr	r3, [sp, #16]
 800f2de:	b1bb      	cbz	r3, 800f310 <_strtod_l+0x620>
 800f2e0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f2e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	4659      	mov	r1, fp
 800f2ec:	dd10      	ble.n	800f310 <_strtod_l+0x620>
 800f2ee:	2b1f      	cmp	r3, #31
 800f2f0:	f340 8128 	ble.w	800f544 <_strtod_l+0x854>
 800f2f4:	2b34      	cmp	r3, #52	; 0x34
 800f2f6:	bfde      	ittt	le
 800f2f8:	3b20      	suble	r3, #32
 800f2fa:	f04f 32ff 	movle.w	r2, #4294967295
 800f2fe:	fa02 f303 	lslle.w	r3, r2, r3
 800f302:	f04f 0a00 	mov.w	sl, #0
 800f306:	bfcc      	ite	gt
 800f308:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f30c:	ea03 0b01 	andle.w	fp, r3, r1
 800f310:	2200      	movs	r2, #0
 800f312:	2300      	movs	r3, #0
 800f314:	4650      	mov	r0, sl
 800f316:	4659      	mov	r1, fp
 800f318:	f7f1 fbde 	bl	8000ad8 <__aeabi_dcmpeq>
 800f31c:	2800      	cmp	r0, #0
 800f31e:	d1a4      	bne.n	800f26a <_strtod_l+0x57a>
 800f320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f322:	9300      	str	r3, [sp, #0]
 800f324:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f326:	462b      	mov	r3, r5
 800f328:	463a      	mov	r2, r7
 800f32a:	4620      	mov	r0, r4
 800f32c:	f001 fe70 	bl	8011010 <__s2b>
 800f330:	9009      	str	r0, [sp, #36]	; 0x24
 800f332:	2800      	cmp	r0, #0
 800f334:	f43f af24 	beq.w	800f180 <_strtod_l+0x490>
 800f338:	9b07      	ldr	r3, [sp, #28]
 800f33a:	1b9e      	subs	r6, r3, r6
 800f33c:	9b08      	ldr	r3, [sp, #32]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	bfb4      	ite	lt
 800f342:	4633      	movlt	r3, r6
 800f344:	2300      	movge	r3, #0
 800f346:	9310      	str	r3, [sp, #64]	; 0x40
 800f348:	9b08      	ldr	r3, [sp, #32]
 800f34a:	2500      	movs	r5, #0
 800f34c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f350:	9318      	str	r3, [sp, #96]	; 0x60
 800f352:	462e      	mov	r6, r5
 800f354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f356:	4620      	mov	r0, r4
 800f358:	6859      	ldr	r1, [r3, #4]
 800f35a:	f001 fdad 	bl	8010eb8 <_Balloc>
 800f35e:	9007      	str	r0, [sp, #28]
 800f360:	2800      	cmp	r0, #0
 800f362:	f43f af11 	beq.w	800f188 <_strtod_l+0x498>
 800f366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f368:	691a      	ldr	r2, [r3, #16]
 800f36a:	3202      	adds	r2, #2
 800f36c:	f103 010c 	add.w	r1, r3, #12
 800f370:	0092      	lsls	r2, r2, #2
 800f372:	300c      	adds	r0, #12
 800f374:	f7fe ff90 	bl	800e298 <memcpy>
 800f378:	ec4b ab10 	vmov	d0, sl, fp
 800f37c:	aa20      	add	r2, sp, #128	; 0x80
 800f37e:	a91f      	add	r1, sp, #124	; 0x7c
 800f380:	4620      	mov	r0, r4
 800f382:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800f386:	f002 f97f 	bl	8011688 <__d2b>
 800f38a:	901e      	str	r0, [sp, #120]	; 0x78
 800f38c:	2800      	cmp	r0, #0
 800f38e:	f43f aefb 	beq.w	800f188 <_strtod_l+0x498>
 800f392:	2101      	movs	r1, #1
 800f394:	4620      	mov	r0, r4
 800f396:	f001 fed5 	bl	8011144 <__i2b>
 800f39a:	4606      	mov	r6, r0
 800f39c:	2800      	cmp	r0, #0
 800f39e:	f43f aef3 	beq.w	800f188 <_strtod_l+0x498>
 800f3a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f3a4:	9904      	ldr	r1, [sp, #16]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	bfab      	itete	ge
 800f3aa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800f3ac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800f3ae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800f3b0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800f3b4:	bfac      	ite	ge
 800f3b6:	eb03 0902 	addge.w	r9, r3, r2
 800f3ba:	1ad7      	sublt	r7, r2, r3
 800f3bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f3be:	eba3 0801 	sub.w	r8, r3, r1
 800f3c2:	4490      	add	r8, r2
 800f3c4:	4ba3      	ldr	r3, [pc, #652]	; (800f654 <_strtod_l+0x964>)
 800f3c6:	f108 38ff 	add.w	r8, r8, #4294967295
 800f3ca:	4598      	cmp	r8, r3
 800f3cc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f3d0:	f280 80cc 	bge.w	800f56c <_strtod_l+0x87c>
 800f3d4:	eba3 0308 	sub.w	r3, r3, r8
 800f3d8:	2b1f      	cmp	r3, #31
 800f3da:	eba2 0203 	sub.w	r2, r2, r3
 800f3de:	f04f 0101 	mov.w	r1, #1
 800f3e2:	f300 80b6 	bgt.w	800f552 <_strtod_l+0x862>
 800f3e6:	fa01 f303 	lsl.w	r3, r1, r3
 800f3ea:	9311      	str	r3, [sp, #68]	; 0x44
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	930c      	str	r3, [sp, #48]	; 0x30
 800f3f0:	eb09 0802 	add.w	r8, r9, r2
 800f3f4:	9b04      	ldr	r3, [sp, #16]
 800f3f6:	45c1      	cmp	r9, r8
 800f3f8:	4417      	add	r7, r2
 800f3fa:	441f      	add	r7, r3
 800f3fc:	464b      	mov	r3, r9
 800f3fe:	bfa8      	it	ge
 800f400:	4643      	movge	r3, r8
 800f402:	42bb      	cmp	r3, r7
 800f404:	bfa8      	it	ge
 800f406:	463b      	movge	r3, r7
 800f408:	2b00      	cmp	r3, #0
 800f40a:	bfc2      	ittt	gt
 800f40c:	eba8 0803 	subgt.w	r8, r8, r3
 800f410:	1aff      	subgt	r7, r7, r3
 800f412:	eba9 0903 	subgt.w	r9, r9, r3
 800f416:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f418:	2b00      	cmp	r3, #0
 800f41a:	dd17      	ble.n	800f44c <_strtod_l+0x75c>
 800f41c:	4631      	mov	r1, r6
 800f41e:	461a      	mov	r2, r3
 800f420:	4620      	mov	r0, r4
 800f422:	f001 ff4b 	bl	80112bc <__pow5mult>
 800f426:	4606      	mov	r6, r0
 800f428:	2800      	cmp	r0, #0
 800f42a:	f43f aead 	beq.w	800f188 <_strtod_l+0x498>
 800f42e:	4601      	mov	r1, r0
 800f430:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f432:	4620      	mov	r0, r4
 800f434:	f001 fe9c 	bl	8011170 <__multiply>
 800f438:	900f      	str	r0, [sp, #60]	; 0x3c
 800f43a:	2800      	cmp	r0, #0
 800f43c:	f43f aea4 	beq.w	800f188 <_strtod_l+0x498>
 800f440:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f442:	4620      	mov	r0, r4
 800f444:	f001 fd78 	bl	8010f38 <_Bfree>
 800f448:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f44a:	931e      	str	r3, [sp, #120]	; 0x78
 800f44c:	f1b8 0f00 	cmp.w	r8, #0
 800f450:	f300 8091 	bgt.w	800f576 <_strtod_l+0x886>
 800f454:	9b08      	ldr	r3, [sp, #32]
 800f456:	2b00      	cmp	r3, #0
 800f458:	dd08      	ble.n	800f46c <_strtod_l+0x77c>
 800f45a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f45c:	9907      	ldr	r1, [sp, #28]
 800f45e:	4620      	mov	r0, r4
 800f460:	f001 ff2c 	bl	80112bc <__pow5mult>
 800f464:	9007      	str	r0, [sp, #28]
 800f466:	2800      	cmp	r0, #0
 800f468:	f43f ae8e 	beq.w	800f188 <_strtod_l+0x498>
 800f46c:	2f00      	cmp	r7, #0
 800f46e:	dd08      	ble.n	800f482 <_strtod_l+0x792>
 800f470:	9907      	ldr	r1, [sp, #28]
 800f472:	463a      	mov	r2, r7
 800f474:	4620      	mov	r0, r4
 800f476:	f001 ff7b 	bl	8011370 <__lshift>
 800f47a:	9007      	str	r0, [sp, #28]
 800f47c:	2800      	cmp	r0, #0
 800f47e:	f43f ae83 	beq.w	800f188 <_strtod_l+0x498>
 800f482:	f1b9 0f00 	cmp.w	r9, #0
 800f486:	dd08      	ble.n	800f49a <_strtod_l+0x7aa>
 800f488:	4631      	mov	r1, r6
 800f48a:	464a      	mov	r2, r9
 800f48c:	4620      	mov	r0, r4
 800f48e:	f001 ff6f 	bl	8011370 <__lshift>
 800f492:	4606      	mov	r6, r0
 800f494:	2800      	cmp	r0, #0
 800f496:	f43f ae77 	beq.w	800f188 <_strtod_l+0x498>
 800f49a:	9a07      	ldr	r2, [sp, #28]
 800f49c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f001 ffee 	bl	8011480 <__mdiff>
 800f4a4:	4605      	mov	r5, r0
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	f43f ae6e 	beq.w	800f188 <_strtod_l+0x498>
 800f4ac:	68c3      	ldr	r3, [r0, #12]
 800f4ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	60c3      	str	r3, [r0, #12]
 800f4b4:	4631      	mov	r1, r6
 800f4b6:	f001 ffc7 	bl	8011448 <__mcmp>
 800f4ba:	2800      	cmp	r0, #0
 800f4bc:	da65      	bge.n	800f58a <_strtod_l+0x89a>
 800f4be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f4c0:	ea53 030a 	orrs.w	r3, r3, sl
 800f4c4:	f040 8087 	bne.w	800f5d6 <_strtod_l+0x8e6>
 800f4c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f040 8082 	bne.w	800f5d6 <_strtod_l+0x8e6>
 800f4d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f4d6:	0d1b      	lsrs	r3, r3, #20
 800f4d8:	051b      	lsls	r3, r3, #20
 800f4da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f4de:	d97a      	bls.n	800f5d6 <_strtod_l+0x8e6>
 800f4e0:	696b      	ldr	r3, [r5, #20]
 800f4e2:	b913      	cbnz	r3, 800f4ea <_strtod_l+0x7fa>
 800f4e4:	692b      	ldr	r3, [r5, #16]
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	dd75      	ble.n	800f5d6 <_strtod_l+0x8e6>
 800f4ea:	4629      	mov	r1, r5
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	f001 ff3e 	bl	8011370 <__lshift>
 800f4f4:	4631      	mov	r1, r6
 800f4f6:	4605      	mov	r5, r0
 800f4f8:	f001 ffa6 	bl	8011448 <__mcmp>
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	dd6a      	ble.n	800f5d6 <_strtod_l+0x8e6>
 800f500:	9904      	ldr	r1, [sp, #16]
 800f502:	4a55      	ldr	r2, [pc, #340]	; (800f658 <_strtod_l+0x968>)
 800f504:	465b      	mov	r3, fp
 800f506:	2900      	cmp	r1, #0
 800f508:	f000 8085 	beq.w	800f616 <_strtod_l+0x926>
 800f50c:	ea02 010b 	and.w	r1, r2, fp
 800f510:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f514:	dc7f      	bgt.n	800f616 <_strtod_l+0x926>
 800f516:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f51a:	f77f aeaa 	ble.w	800f272 <_strtod_l+0x582>
 800f51e:	4a4f      	ldr	r2, [pc, #316]	; (800f65c <_strtod_l+0x96c>)
 800f520:	2300      	movs	r3, #0
 800f522:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800f526:	4650      	mov	r0, sl
 800f528:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800f52c:	4659      	mov	r1, fp
 800f52e:	f7f1 f86b 	bl	8000608 <__aeabi_dmul>
 800f532:	460b      	mov	r3, r1
 800f534:	4303      	orrs	r3, r0
 800f536:	bf08      	it	eq
 800f538:	2322      	moveq	r3, #34	; 0x22
 800f53a:	4682      	mov	sl, r0
 800f53c:	468b      	mov	fp, r1
 800f53e:	bf08      	it	eq
 800f540:	6023      	streq	r3, [r4, #0]
 800f542:	e62b      	b.n	800f19c <_strtod_l+0x4ac>
 800f544:	f04f 32ff 	mov.w	r2, #4294967295
 800f548:	fa02 f303 	lsl.w	r3, r2, r3
 800f54c:	ea03 0a0a 	and.w	sl, r3, sl
 800f550:	e6de      	b.n	800f310 <_strtod_l+0x620>
 800f552:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f556:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f55a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f55e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f562:	fa01 f308 	lsl.w	r3, r1, r8
 800f566:	930c      	str	r3, [sp, #48]	; 0x30
 800f568:	9111      	str	r1, [sp, #68]	; 0x44
 800f56a:	e741      	b.n	800f3f0 <_strtod_l+0x700>
 800f56c:	2300      	movs	r3, #0
 800f56e:	930c      	str	r3, [sp, #48]	; 0x30
 800f570:	2301      	movs	r3, #1
 800f572:	9311      	str	r3, [sp, #68]	; 0x44
 800f574:	e73c      	b.n	800f3f0 <_strtod_l+0x700>
 800f576:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f578:	4642      	mov	r2, r8
 800f57a:	4620      	mov	r0, r4
 800f57c:	f001 fef8 	bl	8011370 <__lshift>
 800f580:	901e      	str	r0, [sp, #120]	; 0x78
 800f582:	2800      	cmp	r0, #0
 800f584:	f47f af66 	bne.w	800f454 <_strtod_l+0x764>
 800f588:	e5fe      	b.n	800f188 <_strtod_l+0x498>
 800f58a:	465f      	mov	r7, fp
 800f58c:	d16e      	bne.n	800f66c <_strtod_l+0x97c>
 800f58e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f590:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f594:	b342      	cbz	r2, 800f5e8 <_strtod_l+0x8f8>
 800f596:	4a32      	ldr	r2, [pc, #200]	; (800f660 <_strtod_l+0x970>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d128      	bne.n	800f5ee <_strtod_l+0x8fe>
 800f59c:	9b04      	ldr	r3, [sp, #16]
 800f59e:	4650      	mov	r0, sl
 800f5a0:	b1eb      	cbz	r3, 800f5de <_strtod_l+0x8ee>
 800f5a2:	4a2d      	ldr	r2, [pc, #180]	; (800f658 <_strtod_l+0x968>)
 800f5a4:	403a      	ands	r2, r7
 800f5a6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f5aa:	f04f 31ff 	mov.w	r1, #4294967295
 800f5ae:	d819      	bhi.n	800f5e4 <_strtod_l+0x8f4>
 800f5b0:	0d12      	lsrs	r2, r2, #20
 800f5b2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f5b6:	fa01 f303 	lsl.w	r3, r1, r3
 800f5ba:	4298      	cmp	r0, r3
 800f5bc:	d117      	bne.n	800f5ee <_strtod_l+0x8fe>
 800f5be:	4b29      	ldr	r3, [pc, #164]	; (800f664 <_strtod_l+0x974>)
 800f5c0:	429f      	cmp	r7, r3
 800f5c2:	d102      	bne.n	800f5ca <_strtod_l+0x8da>
 800f5c4:	3001      	adds	r0, #1
 800f5c6:	f43f addf 	beq.w	800f188 <_strtod_l+0x498>
 800f5ca:	4b23      	ldr	r3, [pc, #140]	; (800f658 <_strtod_l+0x968>)
 800f5cc:	403b      	ands	r3, r7
 800f5ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f5d2:	f04f 0a00 	mov.w	sl, #0
 800f5d6:	9b04      	ldr	r3, [sp, #16]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d1a0      	bne.n	800f51e <_strtod_l+0x82e>
 800f5dc:	e5de      	b.n	800f19c <_strtod_l+0x4ac>
 800f5de:	f04f 33ff 	mov.w	r3, #4294967295
 800f5e2:	e7ea      	b.n	800f5ba <_strtod_l+0x8ca>
 800f5e4:	460b      	mov	r3, r1
 800f5e6:	e7e8      	b.n	800f5ba <_strtod_l+0x8ca>
 800f5e8:	ea53 030a 	orrs.w	r3, r3, sl
 800f5ec:	d088      	beq.n	800f500 <_strtod_l+0x810>
 800f5ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5f0:	b1db      	cbz	r3, 800f62a <_strtod_l+0x93a>
 800f5f2:	423b      	tst	r3, r7
 800f5f4:	d0ef      	beq.n	800f5d6 <_strtod_l+0x8e6>
 800f5f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5f8:	9a04      	ldr	r2, [sp, #16]
 800f5fa:	4650      	mov	r0, sl
 800f5fc:	4659      	mov	r1, fp
 800f5fe:	b1c3      	cbz	r3, 800f632 <_strtod_l+0x942>
 800f600:	f7ff fb5a 	bl	800ecb8 <sulp>
 800f604:	4602      	mov	r2, r0
 800f606:	460b      	mov	r3, r1
 800f608:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f60c:	f7f0 fe46 	bl	800029c <__adddf3>
 800f610:	4682      	mov	sl, r0
 800f612:	468b      	mov	fp, r1
 800f614:	e7df      	b.n	800f5d6 <_strtod_l+0x8e6>
 800f616:	4013      	ands	r3, r2
 800f618:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f61c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f620:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f624:	f04f 3aff 	mov.w	sl, #4294967295
 800f628:	e7d5      	b.n	800f5d6 <_strtod_l+0x8e6>
 800f62a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f62c:	ea13 0f0a 	tst.w	r3, sl
 800f630:	e7e0      	b.n	800f5f4 <_strtod_l+0x904>
 800f632:	f7ff fb41 	bl	800ecb8 <sulp>
 800f636:	4602      	mov	r2, r0
 800f638:	460b      	mov	r3, r1
 800f63a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f63e:	f7f0 fe2b 	bl	8000298 <__aeabi_dsub>
 800f642:	2200      	movs	r2, #0
 800f644:	2300      	movs	r3, #0
 800f646:	4682      	mov	sl, r0
 800f648:	468b      	mov	fp, r1
 800f64a:	f7f1 fa45 	bl	8000ad8 <__aeabi_dcmpeq>
 800f64e:	2800      	cmp	r0, #0
 800f650:	d0c1      	beq.n	800f5d6 <_strtod_l+0x8e6>
 800f652:	e60e      	b.n	800f272 <_strtod_l+0x582>
 800f654:	fffffc02 	.word	0xfffffc02
 800f658:	7ff00000 	.word	0x7ff00000
 800f65c:	39500000 	.word	0x39500000
 800f660:	000fffff 	.word	0x000fffff
 800f664:	7fefffff 	.word	0x7fefffff
 800f668:	08012e40 	.word	0x08012e40
 800f66c:	4631      	mov	r1, r6
 800f66e:	4628      	mov	r0, r5
 800f670:	f002 f866 	bl	8011740 <__ratio>
 800f674:	ec59 8b10 	vmov	r8, r9, d0
 800f678:	ee10 0a10 	vmov	r0, s0
 800f67c:	2200      	movs	r2, #0
 800f67e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f682:	4649      	mov	r1, r9
 800f684:	f7f1 fa3c 	bl	8000b00 <__aeabi_dcmple>
 800f688:	2800      	cmp	r0, #0
 800f68a:	d07c      	beq.n	800f786 <_strtod_l+0xa96>
 800f68c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d04c      	beq.n	800f72c <_strtod_l+0xa3c>
 800f692:	4b95      	ldr	r3, [pc, #596]	; (800f8e8 <_strtod_l+0xbf8>)
 800f694:	2200      	movs	r2, #0
 800f696:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f69a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f8e8 <_strtod_l+0xbf8>
 800f69e:	f04f 0800 	mov.w	r8, #0
 800f6a2:	4b92      	ldr	r3, [pc, #584]	; (800f8ec <_strtod_l+0xbfc>)
 800f6a4:	403b      	ands	r3, r7
 800f6a6:	9311      	str	r3, [sp, #68]	; 0x44
 800f6a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f6aa:	4b91      	ldr	r3, [pc, #580]	; (800f8f0 <_strtod_l+0xc00>)
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	f040 80b2 	bne.w	800f816 <_strtod_l+0xb26>
 800f6b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f6b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f6ba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f6be:	ec4b ab10 	vmov	d0, sl, fp
 800f6c2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800f6c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f6ca:	f001 ff61 	bl	8011590 <__ulp>
 800f6ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f6d2:	ec53 2b10 	vmov	r2, r3, d0
 800f6d6:	f7f0 ff97 	bl	8000608 <__aeabi_dmul>
 800f6da:	4652      	mov	r2, sl
 800f6dc:	465b      	mov	r3, fp
 800f6de:	f7f0 fddd 	bl	800029c <__adddf3>
 800f6e2:	460b      	mov	r3, r1
 800f6e4:	4981      	ldr	r1, [pc, #516]	; (800f8ec <_strtod_l+0xbfc>)
 800f6e6:	4a83      	ldr	r2, [pc, #524]	; (800f8f4 <_strtod_l+0xc04>)
 800f6e8:	4019      	ands	r1, r3
 800f6ea:	4291      	cmp	r1, r2
 800f6ec:	4682      	mov	sl, r0
 800f6ee:	d95e      	bls.n	800f7ae <_strtod_l+0xabe>
 800f6f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6f2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d103      	bne.n	800f702 <_strtod_l+0xa12>
 800f6fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6fc:	3301      	adds	r3, #1
 800f6fe:	f43f ad43 	beq.w	800f188 <_strtod_l+0x498>
 800f702:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f900 <_strtod_l+0xc10>
 800f706:	f04f 3aff 	mov.w	sl, #4294967295
 800f70a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f70c:	4620      	mov	r0, r4
 800f70e:	f001 fc13 	bl	8010f38 <_Bfree>
 800f712:	9907      	ldr	r1, [sp, #28]
 800f714:	4620      	mov	r0, r4
 800f716:	f001 fc0f 	bl	8010f38 <_Bfree>
 800f71a:	4631      	mov	r1, r6
 800f71c:	4620      	mov	r0, r4
 800f71e:	f001 fc0b 	bl	8010f38 <_Bfree>
 800f722:	4629      	mov	r1, r5
 800f724:	4620      	mov	r0, r4
 800f726:	f001 fc07 	bl	8010f38 <_Bfree>
 800f72a:	e613      	b.n	800f354 <_strtod_l+0x664>
 800f72c:	f1ba 0f00 	cmp.w	sl, #0
 800f730:	d11b      	bne.n	800f76a <_strtod_l+0xa7a>
 800f732:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f736:	b9f3      	cbnz	r3, 800f776 <_strtod_l+0xa86>
 800f738:	4b6b      	ldr	r3, [pc, #428]	; (800f8e8 <_strtod_l+0xbf8>)
 800f73a:	2200      	movs	r2, #0
 800f73c:	4640      	mov	r0, r8
 800f73e:	4649      	mov	r1, r9
 800f740:	f7f1 f9d4 	bl	8000aec <__aeabi_dcmplt>
 800f744:	b9d0      	cbnz	r0, 800f77c <_strtod_l+0xa8c>
 800f746:	4640      	mov	r0, r8
 800f748:	4649      	mov	r1, r9
 800f74a:	4b6b      	ldr	r3, [pc, #428]	; (800f8f8 <_strtod_l+0xc08>)
 800f74c:	2200      	movs	r2, #0
 800f74e:	f7f0 ff5b 	bl	8000608 <__aeabi_dmul>
 800f752:	4680      	mov	r8, r0
 800f754:	4689      	mov	r9, r1
 800f756:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f75a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800f75e:	931b      	str	r3, [sp, #108]	; 0x6c
 800f760:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800f764:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f768:	e79b      	b.n	800f6a2 <_strtod_l+0x9b2>
 800f76a:	f1ba 0f01 	cmp.w	sl, #1
 800f76e:	d102      	bne.n	800f776 <_strtod_l+0xa86>
 800f770:	2f00      	cmp	r7, #0
 800f772:	f43f ad7e 	beq.w	800f272 <_strtod_l+0x582>
 800f776:	4b61      	ldr	r3, [pc, #388]	; (800f8fc <_strtod_l+0xc0c>)
 800f778:	2200      	movs	r2, #0
 800f77a:	e78c      	b.n	800f696 <_strtod_l+0x9a6>
 800f77c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f8f8 <_strtod_l+0xc08>
 800f780:	f04f 0800 	mov.w	r8, #0
 800f784:	e7e7      	b.n	800f756 <_strtod_l+0xa66>
 800f786:	4b5c      	ldr	r3, [pc, #368]	; (800f8f8 <_strtod_l+0xc08>)
 800f788:	4640      	mov	r0, r8
 800f78a:	4649      	mov	r1, r9
 800f78c:	2200      	movs	r2, #0
 800f78e:	f7f0 ff3b 	bl	8000608 <__aeabi_dmul>
 800f792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f794:	4680      	mov	r8, r0
 800f796:	4689      	mov	r9, r1
 800f798:	b933      	cbnz	r3, 800f7a8 <_strtod_l+0xab8>
 800f79a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f79e:	9012      	str	r0, [sp, #72]	; 0x48
 800f7a0:	9313      	str	r3, [sp, #76]	; 0x4c
 800f7a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f7a6:	e7dd      	b.n	800f764 <_strtod_l+0xa74>
 800f7a8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800f7ac:	e7f9      	b.n	800f7a2 <_strtod_l+0xab2>
 800f7ae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f7b2:	9b04      	ldr	r3, [sp, #16]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d1a8      	bne.n	800f70a <_strtod_l+0xa1a>
 800f7b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f7bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f7be:	0d1b      	lsrs	r3, r3, #20
 800f7c0:	051b      	lsls	r3, r3, #20
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d1a1      	bne.n	800f70a <_strtod_l+0xa1a>
 800f7c6:	4640      	mov	r0, r8
 800f7c8:	4649      	mov	r1, r9
 800f7ca:	f7f1 fa7d 	bl	8000cc8 <__aeabi_d2lz>
 800f7ce:	f7f0 feed 	bl	80005ac <__aeabi_l2d>
 800f7d2:	4602      	mov	r2, r0
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	4640      	mov	r0, r8
 800f7d8:	4649      	mov	r1, r9
 800f7da:	f7f0 fd5d 	bl	8000298 <__aeabi_dsub>
 800f7de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f7e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f7e4:	ea43 030a 	orr.w	r3, r3, sl
 800f7e8:	4313      	orrs	r3, r2
 800f7ea:	4680      	mov	r8, r0
 800f7ec:	4689      	mov	r9, r1
 800f7ee:	d053      	beq.n	800f898 <_strtod_l+0xba8>
 800f7f0:	a335      	add	r3, pc, #212	; (adr r3, 800f8c8 <_strtod_l+0xbd8>)
 800f7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f6:	f7f1 f979 	bl	8000aec <__aeabi_dcmplt>
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	f47f acce 	bne.w	800f19c <_strtod_l+0x4ac>
 800f800:	a333      	add	r3, pc, #204	; (adr r3, 800f8d0 <_strtod_l+0xbe0>)
 800f802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f806:	4640      	mov	r0, r8
 800f808:	4649      	mov	r1, r9
 800f80a:	f7f1 f98d 	bl	8000b28 <__aeabi_dcmpgt>
 800f80e:	2800      	cmp	r0, #0
 800f810:	f43f af7b 	beq.w	800f70a <_strtod_l+0xa1a>
 800f814:	e4c2      	b.n	800f19c <_strtod_l+0x4ac>
 800f816:	9b04      	ldr	r3, [sp, #16]
 800f818:	b333      	cbz	r3, 800f868 <_strtod_l+0xb78>
 800f81a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f81c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f820:	d822      	bhi.n	800f868 <_strtod_l+0xb78>
 800f822:	a32d      	add	r3, pc, #180	; (adr r3, 800f8d8 <_strtod_l+0xbe8>)
 800f824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f828:	4640      	mov	r0, r8
 800f82a:	4649      	mov	r1, r9
 800f82c:	f7f1 f968 	bl	8000b00 <__aeabi_dcmple>
 800f830:	b1a0      	cbz	r0, 800f85c <_strtod_l+0xb6c>
 800f832:	4649      	mov	r1, r9
 800f834:	4640      	mov	r0, r8
 800f836:	f7f1 f9bf 	bl	8000bb8 <__aeabi_d2uiz>
 800f83a:	2801      	cmp	r0, #1
 800f83c:	bf38      	it	cc
 800f83e:	2001      	movcc	r0, #1
 800f840:	f7f0 fe68 	bl	8000514 <__aeabi_ui2d>
 800f844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f846:	4680      	mov	r8, r0
 800f848:	4689      	mov	r9, r1
 800f84a:	bb13      	cbnz	r3, 800f892 <_strtod_l+0xba2>
 800f84c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f850:	9014      	str	r0, [sp, #80]	; 0x50
 800f852:	9315      	str	r3, [sp, #84]	; 0x54
 800f854:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f858:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f85c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f85e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f860:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f864:	1a9b      	subs	r3, r3, r2
 800f866:	930d      	str	r3, [sp, #52]	; 0x34
 800f868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f86c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f870:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f874:	f001 fe8c 	bl	8011590 <__ulp>
 800f878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f87c:	ec53 2b10 	vmov	r2, r3, d0
 800f880:	f7f0 fec2 	bl	8000608 <__aeabi_dmul>
 800f884:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f888:	f7f0 fd08 	bl	800029c <__adddf3>
 800f88c:	4682      	mov	sl, r0
 800f88e:	468b      	mov	fp, r1
 800f890:	e78f      	b.n	800f7b2 <_strtod_l+0xac2>
 800f892:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f896:	e7dd      	b.n	800f854 <_strtod_l+0xb64>
 800f898:	a311      	add	r3, pc, #68	; (adr r3, 800f8e0 <_strtod_l+0xbf0>)
 800f89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89e:	f7f1 f925 	bl	8000aec <__aeabi_dcmplt>
 800f8a2:	e7b4      	b.n	800f80e <_strtod_l+0xb1e>
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	930e      	str	r3, [sp, #56]	; 0x38
 800f8a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f8aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f8ac:	6013      	str	r3, [r2, #0]
 800f8ae:	f7ff ba65 	b.w	800ed7c <_strtod_l+0x8c>
 800f8b2:	2b65      	cmp	r3, #101	; 0x65
 800f8b4:	f43f ab5d 	beq.w	800ef72 <_strtod_l+0x282>
 800f8b8:	2b45      	cmp	r3, #69	; 0x45
 800f8ba:	f43f ab5a 	beq.w	800ef72 <_strtod_l+0x282>
 800f8be:	2201      	movs	r2, #1
 800f8c0:	f7ff bb92 	b.w	800efe8 <_strtod_l+0x2f8>
 800f8c4:	f3af 8000 	nop.w
 800f8c8:	94a03595 	.word	0x94a03595
 800f8cc:	3fdfffff 	.word	0x3fdfffff
 800f8d0:	35afe535 	.word	0x35afe535
 800f8d4:	3fe00000 	.word	0x3fe00000
 800f8d8:	ffc00000 	.word	0xffc00000
 800f8dc:	41dfffff 	.word	0x41dfffff
 800f8e0:	94a03595 	.word	0x94a03595
 800f8e4:	3fcfffff 	.word	0x3fcfffff
 800f8e8:	3ff00000 	.word	0x3ff00000
 800f8ec:	7ff00000 	.word	0x7ff00000
 800f8f0:	7fe00000 	.word	0x7fe00000
 800f8f4:	7c9fffff 	.word	0x7c9fffff
 800f8f8:	3fe00000 	.word	0x3fe00000
 800f8fc:	bff00000 	.word	0xbff00000
 800f900:	7fefffff 	.word	0x7fefffff

0800f904 <strtod>:
 800f904:	460a      	mov	r2, r1
 800f906:	4601      	mov	r1, r0
 800f908:	4802      	ldr	r0, [pc, #8]	; (800f914 <strtod+0x10>)
 800f90a:	4b03      	ldr	r3, [pc, #12]	; (800f918 <strtod+0x14>)
 800f90c:	6800      	ldr	r0, [r0, #0]
 800f90e:	f7ff b9ef 	b.w	800ecf0 <_strtod_l>
 800f912:	bf00      	nop
 800f914:	20000028 	.word	0x20000028
 800f918:	20000090 	.word	0x20000090

0800f91c <strtok>:
 800f91c:	4b16      	ldr	r3, [pc, #88]	; (800f978 <strtok+0x5c>)
 800f91e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f920:	681e      	ldr	r6, [r3, #0]
 800f922:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800f924:	4605      	mov	r5, r0
 800f926:	b9fc      	cbnz	r4, 800f968 <strtok+0x4c>
 800f928:	2050      	movs	r0, #80	; 0x50
 800f92a:	9101      	str	r1, [sp, #4]
 800f92c:	f001 faaa 	bl	8010e84 <malloc>
 800f930:	9901      	ldr	r1, [sp, #4]
 800f932:	65b0      	str	r0, [r6, #88]	; 0x58
 800f934:	4602      	mov	r2, r0
 800f936:	b920      	cbnz	r0, 800f942 <strtok+0x26>
 800f938:	4b10      	ldr	r3, [pc, #64]	; (800f97c <strtok+0x60>)
 800f93a:	4811      	ldr	r0, [pc, #68]	; (800f980 <strtok+0x64>)
 800f93c:	2157      	movs	r1, #87	; 0x57
 800f93e:	f000 f883 	bl	800fa48 <__assert_func>
 800f942:	e9c0 4400 	strd	r4, r4, [r0]
 800f946:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f94a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f94e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f952:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f956:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f95a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f95e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f962:	6184      	str	r4, [r0, #24]
 800f964:	7704      	strb	r4, [r0, #28]
 800f966:	6244      	str	r4, [r0, #36]	; 0x24
 800f968:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800f96a:	2301      	movs	r3, #1
 800f96c:	4628      	mov	r0, r5
 800f96e:	b002      	add	sp, #8
 800f970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f974:	f000 b806 	b.w	800f984 <__strtok_r>
 800f978:	20000028 	.word	0x20000028
 800f97c:	08012e68 	.word	0x08012e68
 800f980:	08012e7f 	.word	0x08012e7f

0800f984 <__strtok_r>:
 800f984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f986:	b908      	cbnz	r0, 800f98c <__strtok_r+0x8>
 800f988:	6810      	ldr	r0, [r2, #0]
 800f98a:	b188      	cbz	r0, 800f9b0 <__strtok_r+0x2c>
 800f98c:	4604      	mov	r4, r0
 800f98e:	4620      	mov	r0, r4
 800f990:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f994:	460f      	mov	r7, r1
 800f996:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f99a:	b91e      	cbnz	r6, 800f9a4 <__strtok_r+0x20>
 800f99c:	b965      	cbnz	r5, 800f9b8 <__strtok_r+0x34>
 800f99e:	6015      	str	r5, [r2, #0]
 800f9a0:	4628      	mov	r0, r5
 800f9a2:	e005      	b.n	800f9b0 <__strtok_r+0x2c>
 800f9a4:	42b5      	cmp	r5, r6
 800f9a6:	d1f6      	bne.n	800f996 <__strtok_r+0x12>
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d1f0      	bne.n	800f98e <__strtok_r+0xa>
 800f9ac:	6014      	str	r4, [r2, #0]
 800f9ae:	7003      	strb	r3, [r0, #0]
 800f9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9b2:	461c      	mov	r4, r3
 800f9b4:	e00c      	b.n	800f9d0 <__strtok_r+0x4c>
 800f9b6:	b915      	cbnz	r5, 800f9be <__strtok_r+0x3a>
 800f9b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f9bc:	460e      	mov	r6, r1
 800f9be:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f9c2:	42ab      	cmp	r3, r5
 800f9c4:	d1f7      	bne.n	800f9b6 <__strtok_r+0x32>
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d0f3      	beq.n	800f9b2 <__strtok_r+0x2e>
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f9d0:	6014      	str	r4, [r2, #0]
 800f9d2:	e7ed      	b.n	800f9b0 <__strtok_r+0x2c>

0800f9d4 <_vsniprintf_r>:
 800f9d4:	b530      	push	{r4, r5, lr}
 800f9d6:	1e14      	subs	r4, r2, #0
 800f9d8:	4605      	mov	r5, r0
 800f9da:	b09b      	sub	sp, #108	; 0x6c
 800f9dc:	4618      	mov	r0, r3
 800f9de:	da05      	bge.n	800f9ec <_vsniprintf_r+0x18>
 800f9e0:	238b      	movs	r3, #139	; 0x8b
 800f9e2:	602b      	str	r3, [r5, #0]
 800f9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9e8:	b01b      	add	sp, #108	; 0x6c
 800f9ea:	bd30      	pop	{r4, r5, pc}
 800f9ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f9f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f9f4:	bf14      	ite	ne
 800f9f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f9fa:	4623      	moveq	r3, r4
 800f9fc:	9302      	str	r3, [sp, #8]
 800f9fe:	9305      	str	r3, [sp, #20]
 800fa00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa04:	9100      	str	r1, [sp, #0]
 800fa06:	9104      	str	r1, [sp, #16]
 800fa08:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fa10:	4669      	mov	r1, sp
 800fa12:	4628      	mov	r0, r5
 800fa14:	f002 f820 	bl	8011a58 <_svfiprintf_r>
 800fa18:	1c43      	adds	r3, r0, #1
 800fa1a:	bfbc      	itt	lt
 800fa1c:	238b      	movlt	r3, #139	; 0x8b
 800fa1e:	602b      	strlt	r3, [r5, #0]
 800fa20:	2c00      	cmp	r4, #0
 800fa22:	d0e1      	beq.n	800f9e8 <_vsniprintf_r+0x14>
 800fa24:	9b00      	ldr	r3, [sp, #0]
 800fa26:	2200      	movs	r2, #0
 800fa28:	701a      	strb	r2, [r3, #0]
 800fa2a:	e7dd      	b.n	800f9e8 <_vsniprintf_r+0x14>

0800fa2c <vsniprintf>:
 800fa2c:	b507      	push	{r0, r1, r2, lr}
 800fa2e:	9300      	str	r3, [sp, #0]
 800fa30:	4613      	mov	r3, r2
 800fa32:	460a      	mov	r2, r1
 800fa34:	4601      	mov	r1, r0
 800fa36:	4803      	ldr	r0, [pc, #12]	; (800fa44 <vsniprintf+0x18>)
 800fa38:	6800      	ldr	r0, [r0, #0]
 800fa3a:	f7ff ffcb 	bl	800f9d4 <_vsniprintf_r>
 800fa3e:	b003      	add	sp, #12
 800fa40:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa44:	20000028 	.word	0x20000028

0800fa48 <__assert_func>:
 800fa48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa4a:	4614      	mov	r4, r2
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	4b09      	ldr	r3, [pc, #36]	; (800fa74 <__assert_func+0x2c>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	4605      	mov	r5, r0
 800fa54:	68d8      	ldr	r0, [r3, #12]
 800fa56:	b14c      	cbz	r4, 800fa6c <__assert_func+0x24>
 800fa58:	4b07      	ldr	r3, [pc, #28]	; (800fa78 <__assert_func+0x30>)
 800fa5a:	9100      	str	r1, [sp, #0]
 800fa5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa60:	4906      	ldr	r1, [pc, #24]	; (800fa7c <__assert_func+0x34>)
 800fa62:	462b      	mov	r3, r5
 800fa64:	f000 fe88 	bl	8010778 <fiprintf>
 800fa68:	f002 fb4a 	bl	8012100 <abort>
 800fa6c:	4b04      	ldr	r3, [pc, #16]	; (800fa80 <__assert_func+0x38>)
 800fa6e:	461c      	mov	r4, r3
 800fa70:	e7f3      	b.n	800fa5a <__assert_func+0x12>
 800fa72:	bf00      	nop
 800fa74:	20000028 	.word	0x20000028
 800fa78:	08012ee0 	.word	0x08012ee0
 800fa7c:	08012eed 	.word	0x08012eed
 800fa80:	08012f1b 	.word	0x08012f1b

0800fa84 <quorem>:
 800fa84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa88:	6903      	ldr	r3, [r0, #16]
 800fa8a:	690c      	ldr	r4, [r1, #16]
 800fa8c:	42a3      	cmp	r3, r4
 800fa8e:	4607      	mov	r7, r0
 800fa90:	f2c0 8081 	blt.w	800fb96 <quorem+0x112>
 800fa94:	3c01      	subs	r4, #1
 800fa96:	f101 0814 	add.w	r8, r1, #20
 800fa9a:	f100 0514 	add.w	r5, r0, #20
 800fa9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800faa2:	9301      	str	r3, [sp, #4]
 800faa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800faa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800faac:	3301      	adds	r3, #1
 800faae:	429a      	cmp	r2, r3
 800fab0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fab4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fab8:	fbb2 f6f3 	udiv	r6, r2, r3
 800fabc:	d331      	bcc.n	800fb22 <quorem+0x9e>
 800fabe:	f04f 0e00 	mov.w	lr, #0
 800fac2:	4640      	mov	r0, r8
 800fac4:	46ac      	mov	ip, r5
 800fac6:	46f2      	mov	sl, lr
 800fac8:	f850 2b04 	ldr.w	r2, [r0], #4
 800facc:	b293      	uxth	r3, r2
 800face:	fb06 e303 	mla	r3, r6, r3, lr
 800fad2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	ebaa 0303 	sub.w	r3, sl, r3
 800fadc:	0c12      	lsrs	r2, r2, #16
 800fade:	f8dc a000 	ldr.w	sl, [ip]
 800fae2:	fb06 e202 	mla	r2, r6, r2, lr
 800fae6:	fa13 f38a 	uxtah	r3, r3, sl
 800faea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800faee:	fa1f fa82 	uxth.w	sl, r2
 800faf2:	f8dc 2000 	ldr.w	r2, [ip]
 800faf6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fafa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fafe:	b29b      	uxth	r3, r3
 800fb00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb04:	4581      	cmp	r9, r0
 800fb06:	f84c 3b04 	str.w	r3, [ip], #4
 800fb0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fb0e:	d2db      	bcs.n	800fac8 <quorem+0x44>
 800fb10:	f855 300b 	ldr.w	r3, [r5, fp]
 800fb14:	b92b      	cbnz	r3, 800fb22 <quorem+0x9e>
 800fb16:	9b01      	ldr	r3, [sp, #4]
 800fb18:	3b04      	subs	r3, #4
 800fb1a:	429d      	cmp	r5, r3
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	d32e      	bcc.n	800fb7e <quorem+0xfa>
 800fb20:	613c      	str	r4, [r7, #16]
 800fb22:	4638      	mov	r0, r7
 800fb24:	f001 fc90 	bl	8011448 <__mcmp>
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	db24      	blt.n	800fb76 <quorem+0xf2>
 800fb2c:	3601      	adds	r6, #1
 800fb2e:	4628      	mov	r0, r5
 800fb30:	f04f 0c00 	mov.w	ip, #0
 800fb34:	f858 2b04 	ldr.w	r2, [r8], #4
 800fb38:	f8d0 e000 	ldr.w	lr, [r0]
 800fb3c:	b293      	uxth	r3, r2
 800fb3e:	ebac 0303 	sub.w	r3, ip, r3
 800fb42:	0c12      	lsrs	r2, r2, #16
 800fb44:	fa13 f38e 	uxtah	r3, r3, lr
 800fb48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fb4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb56:	45c1      	cmp	r9, r8
 800fb58:	f840 3b04 	str.w	r3, [r0], #4
 800fb5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fb60:	d2e8      	bcs.n	800fb34 <quorem+0xb0>
 800fb62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb6a:	b922      	cbnz	r2, 800fb76 <quorem+0xf2>
 800fb6c:	3b04      	subs	r3, #4
 800fb6e:	429d      	cmp	r5, r3
 800fb70:	461a      	mov	r2, r3
 800fb72:	d30a      	bcc.n	800fb8a <quorem+0x106>
 800fb74:	613c      	str	r4, [r7, #16]
 800fb76:	4630      	mov	r0, r6
 800fb78:	b003      	add	sp, #12
 800fb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb7e:	6812      	ldr	r2, [r2, #0]
 800fb80:	3b04      	subs	r3, #4
 800fb82:	2a00      	cmp	r2, #0
 800fb84:	d1cc      	bne.n	800fb20 <quorem+0x9c>
 800fb86:	3c01      	subs	r4, #1
 800fb88:	e7c7      	b.n	800fb1a <quorem+0x96>
 800fb8a:	6812      	ldr	r2, [r2, #0]
 800fb8c:	3b04      	subs	r3, #4
 800fb8e:	2a00      	cmp	r2, #0
 800fb90:	d1f0      	bne.n	800fb74 <quorem+0xf0>
 800fb92:	3c01      	subs	r4, #1
 800fb94:	e7eb      	b.n	800fb6e <quorem+0xea>
 800fb96:	2000      	movs	r0, #0
 800fb98:	e7ee      	b.n	800fb78 <quorem+0xf4>
 800fb9a:	0000      	movs	r0, r0
 800fb9c:	0000      	movs	r0, r0
	...

0800fba0 <_dtoa_r>:
 800fba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fba4:	ed2d 8b02 	vpush	{d8}
 800fba8:	ec57 6b10 	vmov	r6, r7, d0
 800fbac:	b095      	sub	sp, #84	; 0x54
 800fbae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fbb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fbb4:	9105      	str	r1, [sp, #20]
 800fbb6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800fbba:	4604      	mov	r4, r0
 800fbbc:	9209      	str	r2, [sp, #36]	; 0x24
 800fbbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbc0:	b975      	cbnz	r5, 800fbe0 <_dtoa_r+0x40>
 800fbc2:	2010      	movs	r0, #16
 800fbc4:	f001 f95e 	bl	8010e84 <malloc>
 800fbc8:	4602      	mov	r2, r0
 800fbca:	6260      	str	r0, [r4, #36]	; 0x24
 800fbcc:	b920      	cbnz	r0, 800fbd8 <_dtoa_r+0x38>
 800fbce:	4bb2      	ldr	r3, [pc, #712]	; (800fe98 <_dtoa_r+0x2f8>)
 800fbd0:	21ea      	movs	r1, #234	; 0xea
 800fbd2:	48b2      	ldr	r0, [pc, #712]	; (800fe9c <_dtoa_r+0x2fc>)
 800fbd4:	f7ff ff38 	bl	800fa48 <__assert_func>
 800fbd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fbdc:	6005      	str	r5, [r0, #0]
 800fbde:	60c5      	str	r5, [r0, #12]
 800fbe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbe2:	6819      	ldr	r1, [r3, #0]
 800fbe4:	b151      	cbz	r1, 800fbfc <_dtoa_r+0x5c>
 800fbe6:	685a      	ldr	r2, [r3, #4]
 800fbe8:	604a      	str	r2, [r1, #4]
 800fbea:	2301      	movs	r3, #1
 800fbec:	4093      	lsls	r3, r2
 800fbee:	608b      	str	r3, [r1, #8]
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f001 f9a1 	bl	8010f38 <_Bfree>
 800fbf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	601a      	str	r2, [r3, #0]
 800fbfc:	1e3b      	subs	r3, r7, #0
 800fbfe:	bfb9      	ittee	lt
 800fc00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fc04:	9303      	strlt	r3, [sp, #12]
 800fc06:	2300      	movge	r3, #0
 800fc08:	f8c8 3000 	strge.w	r3, [r8]
 800fc0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fc10:	4ba3      	ldr	r3, [pc, #652]	; (800fea0 <_dtoa_r+0x300>)
 800fc12:	bfbc      	itt	lt
 800fc14:	2201      	movlt	r2, #1
 800fc16:	f8c8 2000 	strlt.w	r2, [r8]
 800fc1a:	ea33 0309 	bics.w	r3, r3, r9
 800fc1e:	d11b      	bne.n	800fc58 <_dtoa_r+0xb8>
 800fc20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fc22:	f242 730f 	movw	r3, #9999	; 0x270f
 800fc26:	6013      	str	r3, [r2, #0]
 800fc28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fc2c:	4333      	orrs	r3, r6
 800fc2e:	f000 857a 	beq.w	8010726 <_dtoa_r+0xb86>
 800fc32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc34:	b963      	cbnz	r3, 800fc50 <_dtoa_r+0xb0>
 800fc36:	4b9b      	ldr	r3, [pc, #620]	; (800fea4 <_dtoa_r+0x304>)
 800fc38:	e024      	b.n	800fc84 <_dtoa_r+0xe4>
 800fc3a:	4b9b      	ldr	r3, [pc, #620]	; (800fea8 <_dtoa_r+0x308>)
 800fc3c:	9300      	str	r3, [sp, #0]
 800fc3e:	3308      	adds	r3, #8
 800fc40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fc42:	6013      	str	r3, [r2, #0]
 800fc44:	9800      	ldr	r0, [sp, #0]
 800fc46:	b015      	add	sp, #84	; 0x54
 800fc48:	ecbd 8b02 	vpop	{d8}
 800fc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc50:	4b94      	ldr	r3, [pc, #592]	; (800fea4 <_dtoa_r+0x304>)
 800fc52:	9300      	str	r3, [sp, #0]
 800fc54:	3303      	adds	r3, #3
 800fc56:	e7f3      	b.n	800fc40 <_dtoa_r+0xa0>
 800fc58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	ec51 0b17 	vmov	r0, r1, d7
 800fc62:	2300      	movs	r3, #0
 800fc64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800fc68:	f7f0 ff36 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc6c:	4680      	mov	r8, r0
 800fc6e:	b158      	cbz	r0, 800fc88 <_dtoa_r+0xe8>
 800fc70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fc72:	2301      	movs	r3, #1
 800fc74:	6013      	str	r3, [r2, #0]
 800fc76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f000 8551 	beq.w	8010720 <_dtoa_r+0xb80>
 800fc7e:	488b      	ldr	r0, [pc, #556]	; (800feac <_dtoa_r+0x30c>)
 800fc80:	6018      	str	r0, [r3, #0]
 800fc82:	1e43      	subs	r3, r0, #1
 800fc84:	9300      	str	r3, [sp, #0]
 800fc86:	e7dd      	b.n	800fc44 <_dtoa_r+0xa4>
 800fc88:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fc8c:	aa12      	add	r2, sp, #72	; 0x48
 800fc8e:	a913      	add	r1, sp, #76	; 0x4c
 800fc90:	4620      	mov	r0, r4
 800fc92:	f001 fcf9 	bl	8011688 <__d2b>
 800fc96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fc9a:	4683      	mov	fp, r0
 800fc9c:	2d00      	cmp	r5, #0
 800fc9e:	d07c      	beq.n	800fd9a <_dtoa_r+0x1fa>
 800fca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fca2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800fca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fcaa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800fcae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fcb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fcb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fcba:	4b7d      	ldr	r3, [pc, #500]	; (800feb0 <_dtoa_r+0x310>)
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	4630      	mov	r0, r6
 800fcc0:	4639      	mov	r1, r7
 800fcc2:	f7f0 fae9 	bl	8000298 <__aeabi_dsub>
 800fcc6:	a36e      	add	r3, pc, #440	; (adr r3, 800fe80 <_dtoa_r+0x2e0>)
 800fcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fccc:	f7f0 fc9c 	bl	8000608 <__aeabi_dmul>
 800fcd0:	a36d      	add	r3, pc, #436	; (adr r3, 800fe88 <_dtoa_r+0x2e8>)
 800fcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd6:	f7f0 fae1 	bl	800029c <__adddf3>
 800fcda:	4606      	mov	r6, r0
 800fcdc:	4628      	mov	r0, r5
 800fcde:	460f      	mov	r7, r1
 800fce0:	f7f0 fc28 	bl	8000534 <__aeabi_i2d>
 800fce4:	a36a      	add	r3, pc, #424	; (adr r3, 800fe90 <_dtoa_r+0x2f0>)
 800fce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcea:	f7f0 fc8d 	bl	8000608 <__aeabi_dmul>
 800fcee:	4602      	mov	r2, r0
 800fcf0:	460b      	mov	r3, r1
 800fcf2:	4630      	mov	r0, r6
 800fcf4:	4639      	mov	r1, r7
 800fcf6:	f7f0 fad1 	bl	800029c <__adddf3>
 800fcfa:	4606      	mov	r6, r0
 800fcfc:	460f      	mov	r7, r1
 800fcfe:	f7f0 ff33 	bl	8000b68 <__aeabi_d2iz>
 800fd02:	2200      	movs	r2, #0
 800fd04:	4682      	mov	sl, r0
 800fd06:	2300      	movs	r3, #0
 800fd08:	4630      	mov	r0, r6
 800fd0a:	4639      	mov	r1, r7
 800fd0c:	f7f0 feee 	bl	8000aec <__aeabi_dcmplt>
 800fd10:	b148      	cbz	r0, 800fd26 <_dtoa_r+0x186>
 800fd12:	4650      	mov	r0, sl
 800fd14:	f7f0 fc0e 	bl	8000534 <__aeabi_i2d>
 800fd18:	4632      	mov	r2, r6
 800fd1a:	463b      	mov	r3, r7
 800fd1c:	f7f0 fedc 	bl	8000ad8 <__aeabi_dcmpeq>
 800fd20:	b908      	cbnz	r0, 800fd26 <_dtoa_r+0x186>
 800fd22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd26:	f1ba 0f16 	cmp.w	sl, #22
 800fd2a:	d854      	bhi.n	800fdd6 <_dtoa_r+0x236>
 800fd2c:	4b61      	ldr	r3, [pc, #388]	; (800feb4 <_dtoa_r+0x314>)
 800fd2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fd3a:	f7f0 fed7 	bl	8000aec <__aeabi_dcmplt>
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	d04b      	beq.n	800fdda <_dtoa_r+0x23a>
 800fd42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd46:	2300      	movs	r3, #0
 800fd48:	930e      	str	r3, [sp, #56]	; 0x38
 800fd4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fd4c:	1b5d      	subs	r5, r3, r5
 800fd4e:	1e6b      	subs	r3, r5, #1
 800fd50:	9304      	str	r3, [sp, #16]
 800fd52:	bf43      	ittte	mi
 800fd54:	2300      	movmi	r3, #0
 800fd56:	f1c5 0801 	rsbmi	r8, r5, #1
 800fd5a:	9304      	strmi	r3, [sp, #16]
 800fd5c:	f04f 0800 	movpl.w	r8, #0
 800fd60:	f1ba 0f00 	cmp.w	sl, #0
 800fd64:	db3b      	blt.n	800fdde <_dtoa_r+0x23e>
 800fd66:	9b04      	ldr	r3, [sp, #16]
 800fd68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800fd6c:	4453      	add	r3, sl
 800fd6e:	9304      	str	r3, [sp, #16]
 800fd70:	2300      	movs	r3, #0
 800fd72:	9306      	str	r3, [sp, #24]
 800fd74:	9b05      	ldr	r3, [sp, #20]
 800fd76:	2b09      	cmp	r3, #9
 800fd78:	d869      	bhi.n	800fe4e <_dtoa_r+0x2ae>
 800fd7a:	2b05      	cmp	r3, #5
 800fd7c:	bfc4      	itt	gt
 800fd7e:	3b04      	subgt	r3, #4
 800fd80:	9305      	strgt	r3, [sp, #20]
 800fd82:	9b05      	ldr	r3, [sp, #20]
 800fd84:	f1a3 0302 	sub.w	r3, r3, #2
 800fd88:	bfcc      	ite	gt
 800fd8a:	2500      	movgt	r5, #0
 800fd8c:	2501      	movle	r5, #1
 800fd8e:	2b03      	cmp	r3, #3
 800fd90:	d869      	bhi.n	800fe66 <_dtoa_r+0x2c6>
 800fd92:	e8df f003 	tbb	[pc, r3]
 800fd96:	4e2c      	.short	0x4e2c
 800fd98:	5a4c      	.short	0x5a4c
 800fd9a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800fd9e:	441d      	add	r5, r3
 800fda0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fda4:	2b20      	cmp	r3, #32
 800fda6:	bfc1      	itttt	gt
 800fda8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fdac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fdb0:	fa09 f303 	lslgt.w	r3, r9, r3
 800fdb4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fdb8:	bfda      	itte	le
 800fdba:	f1c3 0320 	rsble	r3, r3, #32
 800fdbe:	fa06 f003 	lslle.w	r0, r6, r3
 800fdc2:	4318      	orrgt	r0, r3
 800fdc4:	f7f0 fba6 	bl	8000514 <__aeabi_ui2d>
 800fdc8:	2301      	movs	r3, #1
 800fdca:	4606      	mov	r6, r0
 800fdcc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fdd0:	3d01      	subs	r5, #1
 800fdd2:	9310      	str	r3, [sp, #64]	; 0x40
 800fdd4:	e771      	b.n	800fcba <_dtoa_r+0x11a>
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	e7b6      	b.n	800fd48 <_dtoa_r+0x1a8>
 800fdda:	900e      	str	r0, [sp, #56]	; 0x38
 800fddc:	e7b5      	b.n	800fd4a <_dtoa_r+0x1aa>
 800fdde:	f1ca 0300 	rsb	r3, sl, #0
 800fde2:	9306      	str	r3, [sp, #24]
 800fde4:	2300      	movs	r3, #0
 800fde6:	eba8 080a 	sub.w	r8, r8, sl
 800fdea:	930d      	str	r3, [sp, #52]	; 0x34
 800fdec:	e7c2      	b.n	800fd74 <_dtoa_r+0x1d4>
 800fdee:	2300      	movs	r3, #0
 800fdf0:	9308      	str	r3, [sp, #32]
 800fdf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	dc39      	bgt.n	800fe6c <_dtoa_r+0x2cc>
 800fdf8:	f04f 0901 	mov.w	r9, #1
 800fdfc:	f8cd 9004 	str.w	r9, [sp, #4]
 800fe00:	464b      	mov	r3, r9
 800fe02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fe06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fe08:	2200      	movs	r2, #0
 800fe0a:	6042      	str	r2, [r0, #4]
 800fe0c:	2204      	movs	r2, #4
 800fe0e:	f102 0614 	add.w	r6, r2, #20
 800fe12:	429e      	cmp	r6, r3
 800fe14:	6841      	ldr	r1, [r0, #4]
 800fe16:	d92f      	bls.n	800fe78 <_dtoa_r+0x2d8>
 800fe18:	4620      	mov	r0, r4
 800fe1a:	f001 f84d 	bl	8010eb8 <_Balloc>
 800fe1e:	9000      	str	r0, [sp, #0]
 800fe20:	2800      	cmp	r0, #0
 800fe22:	d14b      	bne.n	800febc <_dtoa_r+0x31c>
 800fe24:	4b24      	ldr	r3, [pc, #144]	; (800feb8 <_dtoa_r+0x318>)
 800fe26:	4602      	mov	r2, r0
 800fe28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fe2c:	e6d1      	b.n	800fbd2 <_dtoa_r+0x32>
 800fe2e:	2301      	movs	r3, #1
 800fe30:	e7de      	b.n	800fdf0 <_dtoa_r+0x250>
 800fe32:	2300      	movs	r3, #0
 800fe34:	9308      	str	r3, [sp, #32]
 800fe36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe38:	eb0a 0903 	add.w	r9, sl, r3
 800fe3c:	f109 0301 	add.w	r3, r9, #1
 800fe40:	2b01      	cmp	r3, #1
 800fe42:	9301      	str	r3, [sp, #4]
 800fe44:	bfb8      	it	lt
 800fe46:	2301      	movlt	r3, #1
 800fe48:	e7dd      	b.n	800fe06 <_dtoa_r+0x266>
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	e7f2      	b.n	800fe34 <_dtoa_r+0x294>
 800fe4e:	2501      	movs	r5, #1
 800fe50:	2300      	movs	r3, #0
 800fe52:	9305      	str	r3, [sp, #20]
 800fe54:	9508      	str	r5, [sp, #32]
 800fe56:	f04f 39ff 	mov.w	r9, #4294967295
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	f8cd 9004 	str.w	r9, [sp, #4]
 800fe60:	2312      	movs	r3, #18
 800fe62:	9209      	str	r2, [sp, #36]	; 0x24
 800fe64:	e7cf      	b.n	800fe06 <_dtoa_r+0x266>
 800fe66:	2301      	movs	r3, #1
 800fe68:	9308      	str	r3, [sp, #32]
 800fe6a:	e7f4      	b.n	800fe56 <_dtoa_r+0x2b6>
 800fe6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800fe70:	f8cd 9004 	str.w	r9, [sp, #4]
 800fe74:	464b      	mov	r3, r9
 800fe76:	e7c6      	b.n	800fe06 <_dtoa_r+0x266>
 800fe78:	3101      	adds	r1, #1
 800fe7a:	6041      	str	r1, [r0, #4]
 800fe7c:	0052      	lsls	r2, r2, #1
 800fe7e:	e7c6      	b.n	800fe0e <_dtoa_r+0x26e>
 800fe80:	636f4361 	.word	0x636f4361
 800fe84:	3fd287a7 	.word	0x3fd287a7
 800fe88:	8b60c8b3 	.word	0x8b60c8b3
 800fe8c:	3fc68a28 	.word	0x3fc68a28
 800fe90:	509f79fb 	.word	0x509f79fb
 800fe94:	3fd34413 	.word	0x3fd34413
 800fe98:	08012e68 	.word	0x08012e68
 800fe9c:	08012f29 	.word	0x08012f29
 800fea0:	7ff00000 	.word	0x7ff00000
 800fea4:	08012f25 	.word	0x08012f25
 800fea8:	08012f1c 	.word	0x08012f1c
 800feac:	08012df5 	.word	0x08012df5
 800feb0:	3ff80000 	.word	0x3ff80000
 800feb4:	080130a0 	.word	0x080130a0
 800feb8:	08012f88 	.word	0x08012f88
 800febc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800febe:	9a00      	ldr	r2, [sp, #0]
 800fec0:	601a      	str	r2, [r3, #0]
 800fec2:	9b01      	ldr	r3, [sp, #4]
 800fec4:	2b0e      	cmp	r3, #14
 800fec6:	f200 80ad 	bhi.w	8010024 <_dtoa_r+0x484>
 800feca:	2d00      	cmp	r5, #0
 800fecc:	f000 80aa 	beq.w	8010024 <_dtoa_r+0x484>
 800fed0:	f1ba 0f00 	cmp.w	sl, #0
 800fed4:	dd36      	ble.n	800ff44 <_dtoa_r+0x3a4>
 800fed6:	4ac3      	ldr	r2, [pc, #780]	; (80101e4 <_dtoa_r+0x644>)
 800fed8:	f00a 030f 	and.w	r3, sl, #15
 800fedc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fee0:	ed93 7b00 	vldr	d7, [r3]
 800fee4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800fee8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800feec:	eeb0 8a47 	vmov.f32	s16, s14
 800fef0:	eef0 8a67 	vmov.f32	s17, s15
 800fef4:	d016      	beq.n	800ff24 <_dtoa_r+0x384>
 800fef6:	4bbc      	ldr	r3, [pc, #752]	; (80101e8 <_dtoa_r+0x648>)
 800fef8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fefc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ff00:	f7f0 fcac 	bl	800085c <__aeabi_ddiv>
 800ff04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff08:	f007 070f 	and.w	r7, r7, #15
 800ff0c:	2503      	movs	r5, #3
 800ff0e:	4eb6      	ldr	r6, [pc, #728]	; (80101e8 <_dtoa_r+0x648>)
 800ff10:	b957      	cbnz	r7, 800ff28 <_dtoa_r+0x388>
 800ff12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff16:	ec53 2b18 	vmov	r2, r3, d8
 800ff1a:	f7f0 fc9f 	bl	800085c <__aeabi_ddiv>
 800ff1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff22:	e029      	b.n	800ff78 <_dtoa_r+0x3d8>
 800ff24:	2502      	movs	r5, #2
 800ff26:	e7f2      	b.n	800ff0e <_dtoa_r+0x36e>
 800ff28:	07f9      	lsls	r1, r7, #31
 800ff2a:	d508      	bpl.n	800ff3e <_dtoa_r+0x39e>
 800ff2c:	ec51 0b18 	vmov	r0, r1, d8
 800ff30:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ff34:	f7f0 fb68 	bl	8000608 <__aeabi_dmul>
 800ff38:	ec41 0b18 	vmov	d8, r0, r1
 800ff3c:	3501      	adds	r5, #1
 800ff3e:	107f      	asrs	r7, r7, #1
 800ff40:	3608      	adds	r6, #8
 800ff42:	e7e5      	b.n	800ff10 <_dtoa_r+0x370>
 800ff44:	f000 80a6 	beq.w	8010094 <_dtoa_r+0x4f4>
 800ff48:	f1ca 0600 	rsb	r6, sl, #0
 800ff4c:	4ba5      	ldr	r3, [pc, #660]	; (80101e4 <_dtoa_r+0x644>)
 800ff4e:	4fa6      	ldr	r7, [pc, #664]	; (80101e8 <_dtoa_r+0x648>)
 800ff50:	f006 020f 	and.w	r2, r6, #15
 800ff54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ff60:	f7f0 fb52 	bl	8000608 <__aeabi_dmul>
 800ff64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff68:	1136      	asrs	r6, r6, #4
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	2502      	movs	r5, #2
 800ff6e:	2e00      	cmp	r6, #0
 800ff70:	f040 8085 	bne.w	801007e <_dtoa_r+0x4de>
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d1d2      	bne.n	800ff1e <_dtoa_r+0x37e>
 800ff78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	f000 808c 	beq.w	8010098 <_dtoa_r+0x4f8>
 800ff80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ff84:	4b99      	ldr	r3, [pc, #612]	; (80101ec <_dtoa_r+0x64c>)
 800ff86:	2200      	movs	r2, #0
 800ff88:	4630      	mov	r0, r6
 800ff8a:	4639      	mov	r1, r7
 800ff8c:	f7f0 fdae 	bl	8000aec <__aeabi_dcmplt>
 800ff90:	2800      	cmp	r0, #0
 800ff92:	f000 8081 	beq.w	8010098 <_dtoa_r+0x4f8>
 800ff96:	9b01      	ldr	r3, [sp, #4]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d07d      	beq.n	8010098 <_dtoa_r+0x4f8>
 800ff9c:	f1b9 0f00 	cmp.w	r9, #0
 800ffa0:	dd3c      	ble.n	801001c <_dtoa_r+0x47c>
 800ffa2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ffa6:	9307      	str	r3, [sp, #28]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	4b91      	ldr	r3, [pc, #580]	; (80101f0 <_dtoa_r+0x650>)
 800ffac:	4630      	mov	r0, r6
 800ffae:	4639      	mov	r1, r7
 800ffb0:	f7f0 fb2a 	bl	8000608 <__aeabi_dmul>
 800ffb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffb8:	3501      	adds	r5, #1
 800ffba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ffbe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	f7f0 fab6 	bl	8000534 <__aeabi_i2d>
 800ffc8:	4632      	mov	r2, r6
 800ffca:	463b      	mov	r3, r7
 800ffcc:	f7f0 fb1c 	bl	8000608 <__aeabi_dmul>
 800ffd0:	4b88      	ldr	r3, [pc, #544]	; (80101f4 <_dtoa_r+0x654>)
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	f7f0 f962 	bl	800029c <__adddf3>
 800ffd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ffdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffe0:	9303      	str	r3, [sp, #12]
 800ffe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d15c      	bne.n	80100a2 <_dtoa_r+0x502>
 800ffe8:	4b83      	ldr	r3, [pc, #524]	; (80101f8 <_dtoa_r+0x658>)
 800ffea:	2200      	movs	r2, #0
 800ffec:	4630      	mov	r0, r6
 800ffee:	4639      	mov	r1, r7
 800fff0:	f7f0 f952 	bl	8000298 <__aeabi_dsub>
 800fff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fff8:	4606      	mov	r6, r0
 800fffa:	460f      	mov	r7, r1
 800fffc:	f7f0 fd94 	bl	8000b28 <__aeabi_dcmpgt>
 8010000:	2800      	cmp	r0, #0
 8010002:	f040 8296 	bne.w	8010532 <_dtoa_r+0x992>
 8010006:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801000a:	4630      	mov	r0, r6
 801000c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010010:	4639      	mov	r1, r7
 8010012:	f7f0 fd6b 	bl	8000aec <__aeabi_dcmplt>
 8010016:	2800      	cmp	r0, #0
 8010018:	f040 8288 	bne.w	801052c <_dtoa_r+0x98c>
 801001c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010020:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010024:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010026:	2b00      	cmp	r3, #0
 8010028:	f2c0 8158 	blt.w	80102dc <_dtoa_r+0x73c>
 801002c:	f1ba 0f0e 	cmp.w	sl, #14
 8010030:	f300 8154 	bgt.w	80102dc <_dtoa_r+0x73c>
 8010034:	4b6b      	ldr	r3, [pc, #428]	; (80101e4 <_dtoa_r+0x644>)
 8010036:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801003a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801003e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010040:	2b00      	cmp	r3, #0
 8010042:	f280 80e3 	bge.w	801020c <_dtoa_r+0x66c>
 8010046:	9b01      	ldr	r3, [sp, #4]
 8010048:	2b00      	cmp	r3, #0
 801004a:	f300 80df 	bgt.w	801020c <_dtoa_r+0x66c>
 801004e:	f040 826d 	bne.w	801052c <_dtoa_r+0x98c>
 8010052:	4b69      	ldr	r3, [pc, #420]	; (80101f8 <_dtoa_r+0x658>)
 8010054:	2200      	movs	r2, #0
 8010056:	4640      	mov	r0, r8
 8010058:	4649      	mov	r1, r9
 801005a:	f7f0 fad5 	bl	8000608 <__aeabi_dmul>
 801005e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010062:	f7f0 fd57 	bl	8000b14 <__aeabi_dcmpge>
 8010066:	9e01      	ldr	r6, [sp, #4]
 8010068:	4637      	mov	r7, r6
 801006a:	2800      	cmp	r0, #0
 801006c:	f040 8243 	bne.w	80104f6 <_dtoa_r+0x956>
 8010070:	9d00      	ldr	r5, [sp, #0]
 8010072:	2331      	movs	r3, #49	; 0x31
 8010074:	f805 3b01 	strb.w	r3, [r5], #1
 8010078:	f10a 0a01 	add.w	sl, sl, #1
 801007c:	e23f      	b.n	80104fe <_dtoa_r+0x95e>
 801007e:	07f2      	lsls	r2, r6, #31
 8010080:	d505      	bpl.n	801008e <_dtoa_r+0x4ee>
 8010082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010086:	f7f0 fabf 	bl	8000608 <__aeabi_dmul>
 801008a:	3501      	adds	r5, #1
 801008c:	2301      	movs	r3, #1
 801008e:	1076      	asrs	r6, r6, #1
 8010090:	3708      	adds	r7, #8
 8010092:	e76c      	b.n	800ff6e <_dtoa_r+0x3ce>
 8010094:	2502      	movs	r5, #2
 8010096:	e76f      	b.n	800ff78 <_dtoa_r+0x3d8>
 8010098:	9b01      	ldr	r3, [sp, #4]
 801009a:	f8cd a01c 	str.w	sl, [sp, #28]
 801009e:	930c      	str	r3, [sp, #48]	; 0x30
 80100a0:	e78d      	b.n	800ffbe <_dtoa_r+0x41e>
 80100a2:	9900      	ldr	r1, [sp, #0]
 80100a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80100a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80100a8:	4b4e      	ldr	r3, [pc, #312]	; (80101e4 <_dtoa_r+0x644>)
 80100aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80100ae:	4401      	add	r1, r0
 80100b0:	9102      	str	r1, [sp, #8]
 80100b2:	9908      	ldr	r1, [sp, #32]
 80100b4:	eeb0 8a47 	vmov.f32	s16, s14
 80100b8:	eef0 8a67 	vmov.f32	s17, s15
 80100bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80100c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80100c4:	2900      	cmp	r1, #0
 80100c6:	d045      	beq.n	8010154 <_dtoa_r+0x5b4>
 80100c8:	494c      	ldr	r1, [pc, #304]	; (80101fc <_dtoa_r+0x65c>)
 80100ca:	2000      	movs	r0, #0
 80100cc:	f7f0 fbc6 	bl	800085c <__aeabi_ddiv>
 80100d0:	ec53 2b18 	vmov	r2, r3, d8
 80100d4:	f7f0 f8e0 	bl	8000298 <__aeabi_dsub>
 80100d8:	9d00      	ldr	r5, [sp, #0]
 80100da:	ec41 0b18 	vmov	d8, r0, r1
 80100de:	4639      	mov	r1, r7
 80100e0:	4630      	mov	r0, r6
 80100e2:	f7f0 fd41 	bl	8000b68 <__aeabi_d2iz>
 80100e6:	900c      	str	r0, [sp, #48]	; 0x30
 80100e8:	f7f0 fa24 	bl	8000534 <__aeabi_i2d>
 80100ec:	4602      	mov	r2, r0
 80100ee:	460b      	mov	r3, r1
 80100f0:	4630      	mov	r0, r6
 80100f2:	4639      	mov	r1, r7
 80100f4:	f7f0 f8d0 	bl	8000298 <__aeabi_dsub>
 80100f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80100fa:	3330      	adds	r3, #48	; 0x30
 80100fc:	f805 3b01 	strb.w	r3, [r5], #1
 8010100:	ec53 2b18 	vmov	r2, r3, d8
 8010104:	4606      	mov	r6, r0
 8010106:	460f      	mov	r7, r1
 8010108:	f7f0 fcf0 	bl	8000aec <__aeabi_dcmplt>
 801010c:	2800      	cmp	r0, #0
 801010e:	d165      	bne.n	80101dc <_dtoa_r+0x63c>
 8010110:	4632      	mov	r2, r6
 8010112:	463b      	mov	r3, r7
 8010114:	4935      	ldr	r1, [pc, #212]	; (80101ec <_dtoa_r+0x64c>)
 8010116:	2000      	movs	r0, #0
 8010118:	f7f0 f8be 	bl	8000298 <__aeabi_dsub>
 801011c:	ec53 2b18 	vmov	r2, r3, d8
 8010120:	f7f0 fce4 	bl	8000aec <__aeabi_dcmplt>
 8010124:	2800      	cmp	r0, #0
 8010126:	f040 80b9 	bne.w	801029c <_dtoa_r+0x6fc>
 801012a:	9b02      	ldr	r3, [sp, #8]
 801012c:	429d      	cmp	r5, r3
 801012e:	f43f af75 	beq.w	801001c <_dtoa_r+0x47c>
 8010132:	4b2f      	ldr	r3, [pc, #188]	; (80101f0 <_dtoa_r+0x650>)
 8010134:	ec51 0b18 	vmov	r0, r1, d8
 8010138:	2200      	movs	r2, #0
 801013a:	f7f0 fa65 	bl	8000608 <__aeabi_dmul>
 801013e:	4b2c      	ldr	r3, [pc, #176]	; (80101f0 <_dtoa_r+0x650>)
 8010140:	ec41 0b18 	vmov	d8, r0, r1
 8010144:	2200      	movs	r2, #0
 8010146:	4630      	mov	r0, r6
 8010148:	4639      	mov	r1, r7
 801014a:	f7f0 fa5d 	bl	8000608 <__aeabi_dmul>
 801014e:	4606      	mov	r6, r0
 8010150:	460f      	mov	r7, r1
 8010152:	e7c4      	b.n	80100de <_dtoa_r+0x53e>
 8010154:	ec51 0b17 	vmov	r0, r1, d7
 8010158:	f7f0 fa56 	bl	8000608 <__aeabi_dmul>
 801015c:	9b02      	ldr	r3, [sp, #8]
 801015e:	9d00      	ldr	r5, [sp, #0]
 8010160:	930c      	str	r3, [sp, #48]	; 0x30
 8010162:	ec41 0b18 	vmov	d8, r0, r1
 8010166:	4639      	mov	r1, r7
 8010168:	4630      	mov	r0, r6
 801016a:	f7f0 fcfd 	bl	8000b68 <__aeabi_d2iz>
 801016e:	9011      	str	r0, [sp, #68]	; 0x44
 8010170:	f7f0 f9e0 	bl	8000534 <__aeabi_i2d>
 8010174:	4602      	mov	r2, r0
 8010176:	460b      	mov	r3, r1
 8010178:	4630      	mov	r0, r6
 801017a:	4639      	mov	r1, r7
 801017c:	f7f0 f88c 	bl	8000298 <__aeabi_dsub>
 8010180:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010182:	3330      	adds	r3, #48	; 0x30
 8010184:	f805 3b01 	strb.w	r3, [r5], #1
 8010188:	9b02      	ldr	r3, [sp, #8]
 801018a:	429d      	cmp	r5, r3
 801018c:	4606      	mov	r6, r0
 801018e:	460f      	mov	r7, r1
 8010190:	f04f 0200 	mov.w	r2, #0
 8010194:	d134      	bne.n	8010200 <_dtoa_r+0x660>
 8010196:	4b19      	ldr	r3, [pc, #100]	; (80101fc <_dtoa_r+0x65c>)
 8010198:	ec51 0b18 	vmov	r0, r1, d8
 801019c:	f7f0 f87e 	bl	800029c <__adddf3>
 80101a0:	4602      	mov	r2, r0
 80101a2:	460b      	mov	r3, r1
 80101a4:	4630      	mov	r0, r6
 80101a6:	4639      	mov	r1, r7
 80101a8:	f7f0 fcbe 	bl	8000b28 <__aeabi_dcmpgt>
 80101ac:	2800      	cmp	r0, #0
 80101ae:	d175      	bne.n	801029c <_dtoa_r+0x6fc>
 80101b0:	ec53 2b18 	vmov	r2, r3, d8
 80101b4:	4911      	ldr	r1, [pc, #68]	; (80101fc <_dtoa_r+0x65c>)
 80101b6:	2000      	movs	r0, #0
 80101b8:	f7f0 f86e 	bl	8000298 <__aeabi_dsub>
 80101bc:	4602      	mov	r2, r0
 80101be:	460b      	mov	r3, r1
 80101c0:	4630      	mov	r0, r6
 80101c2:	4639      	mov	r1, r7
 80101c4:	f7f0 fc92 	bl	8000aec <__aeabi_dcmplt>
 80101c8:	2800      	cmp	r0, #0
 80101ca:	f43f af27 	beq.w	801001c <_dtoa_r+0x47c>
 80101ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80101d0:	1e6b      	subs	r3, r5, #1
 80101d2:	930c      	str	r3, [sp, #48]	; 0x30
 80101d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80101d8:	2b30      	cmp	r3, #48	; 0x30
 80101da:	d0f8      	beq.n	80101ce <_dtoa_r+0x62e>
 80101dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80101e0:	e04a      	b.n	8010278 <_dtoa_r+0x6d8>
 80101e2:	bf00      	nop
 80101e4:	080130a0 	.word	0x080130a0
 80101e8:	08013078 	.word	0x08013078
 80101ec:	3ff00000 	.word	0x3ff00000
 80101f0:	40240000 	.word	0x40240000
 80101f4:	401c0000 	.word	0x401c0000
 80101f8:	40140000 	.word	0x40140000
 80101fc:	3fe00000 	.word	0x3fe00000
 8010200:	4baf      	ldr	r3, [pc, #700]	; (80104c0 <_dtoa_r+0x920>)
 8010202:	f7f0 fa01 	bl	8000608 <__aeabi_dmul>
 8010206:	4606      	mov	r6, r0
 8010208:	460f      	mov	r7, r1
 801020a:	e7ac      	b.n	8010166 <_dtoa_r+0x5c6>
 801020c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010210:	9d00      	ldr	r5, [sp, #0]
 8010212:	4642      	mov	r2, r8
 8010214:	464b      	mov	r3, r9
 8010216:	4630      	mov	r0, r6
 8010218:	4639      	mov	r1, r7
 801021a:	f7f0 fb1f 	bl	800085c <__aeabi_ddiv>
 801021e:	f7f0 fca3 	bl	8000b68 <__aeabi_d2iz>
 8010222:	9002      	str	r0, [sp, #8]
 8010224:	f7f0 f986 	bl	8000534 <__aeabi_i2d>
 8010228:	4642      	mov	r2, r8
 801022a:	464b      	mov	r3, r9
 801022c:	f7f0 f9ec 	bl	8000608 <__aeabi_dmul>
 8010230:	4602      	mov	r2, r0
 8010232:	460b      	mov	r3, r1
 8010234:	4630      	mov	r0, r6
 8010236:	4639      	mov	r1, r7
 8010238:	f7f0 f82e 	bl	8000298 <__aeabi_dsub>
 801023c:	9e02      	ldr	r6, [sp, #8]
 801023e:	9f01      	ldr	r7, [sp, #4]
 8010240:	3630      	adds	r6, #48	; 0x30
 8010242:	f805 6b01 	strb.w	r6, [r5], #1
 8010246:	9e00      	ldr	r6, [sp, #0]
 8010248:	1bae      	subs	r6, r5, r6
 801024a:	42b7      	cmp	r7, r6
 801024c:	4602      	mov	r2, r0
 801024e:	460b      	mov	r3, r1
 8010250:	d137      	bne.n	80102c2 <_dtoa_r+0x722>
 8010252:	f7f0 f823 	bl	800029c <__adddf3>
 8010256:	4642      	mov	r2, r8
 8010258:	464b      	mov	r3, r9
 801025a:	4606      	mov	r6, r0
 801025c:	460f      	mov	r7, r1
 801025e:	f7f0 fc63 	bl	8000b28 <__aeabi_dcmpgt>
 8010262:	b9c8      	cbnz	r0, 8010298 <_dtoa_r+0x6f8>
 8010264:	4642      	mov	r2, r8
 8010266:	464b      	mov	r3, r9
 8010268:	4630      	mov	r0, r6
 801026a:	4639      	mov	r1, r7
 801026c:	f7f0 fc34 	bl	8000ad8 <__aeabi_dcmpeq>
 8010270:	b110      	cbz	r0, 8010278 <_dtoa_r+0x6d8>
 8010272:	9b02      	ldr	r3, [sp, #8]
 8010274:	07d9      	lsls	r1, r3, #31
 8010276:	d40f      	bmi.n	8010298 <_dtoa_r+0x6f8>
 8010278:	4620      	mov	r0, r4
 801027a:	4659      	mov	r1, fp
 801027c:	f000 fe5c 	bl	8010f38 <_Bfree>
 8010280:	2300      	movs	r3, #0
 8010282:	702b      	strb	r3, [r5, #0]
 8010284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010286:	f10a 0001 	add.w	r0, sl, #1
 801028a:	6018      	str	r0, [r3, #0]
 801028c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801028e:	2b00      	cmp	r3, #0
 8010290:	f43f acd8 	beq.w	800fc44 <_dtoa_r+0xa4>
 8010294:	601d      	str	r5, [r3, #0]
 8010296:	e4d5      	b.n	800fc44 <_dtoa_r+0xa4>
 8010298:	f8cd a01c 	str.w	sl, [sp, #28]
 801029c:	462b      	mov	r3, r5
 801029e:	461d      	mov	r5, r3
 80102a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102a4:	2a39      	cmp	r2, #57	; 0x39
 80102a6:	d108      	bne.n	80102ba <_dtoa_r+0x71a>
 80102a8:	9a00      	ldr	r2, [sp, #0]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d1f7      	bne.n	801029e <_dtoa_r+0x6fe>
 80102ae:	9a07      	ldr	r2, [sp, #28]
 80102b0:	9900      	ldr	r1, [sp, #0]
 80102b2:	3201      	adds	r2, #1
 80102b4:	9207      	str	r2, [sp, #28]
 80102b6:	2230      	movs	r2, #48	; 0x30
 80102b8:	700a      	strb	r2, [r1, #0]
 80102ba:	781a      	ldrb	r2, [r3, #0]
 80102bc:	3201      	adds	r2, #1
 80102be:	701a      	strb	r2, [r3, #0]
 80102c0:	e78c      	b.n	80101dc <_dtoa_r+0x63c>
 80102c2:	4b7f      	ldr	r3, [pc, #508]	; (80104c0 <_dtoa_r+0x920>)
 80102c4:	2200      	movs	r2, #0
 80102c6:	f7f0 f99f 	bl	8000608 <__aeabi_dmul>
 80102ca:	2200      	movs	r2, #0
 80102cc:	2300      	movs	r3, #0
 80102ce:	4606      	mov	r6, r0
 80102d0:	460f      	mov	r7, r1
 80102d2:	f7f0 fc01 	bl	8000ad8 <__aeabi_dcmpeq>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d09b      	beq.n	8010212 <_dtoa_r+0x672>
 80102da:	e7cd      	b.n	8010278 <_dtoa_r+0x6d8>
 80102dc:	9a08      	ldr	r2, [sp, #32]
 80102de:	2a00      	cmp	r2, #0
 80102e0:	f000 80c4 	beq.w	801046c <_dtoa_r+0x8cc>
 80102e4:	9a05      	ldr	r2, [sp, #20]
 80102e6:	2a01      	cmp	r2, #1
 80102e8:	f300 80a8 	bgt.w	801043c <_dtoa_r+0x89c>
 80102ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80102ee:	2a00      	cmp	r2, #0
 80102f0:	f000 80a0 	beq.w	8010434 <_dtoa_r+0x894>
 80102f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80102f8:	9e06      	ldr	r6, [sp, #24]
 80102fa:	4645      	mov	r5, r8
 80102fc:	9a04      	ldr	r2, [sp, #16]
 80102fe:	2101      	movs	r1, #1
 8010300:	441a      	add	r2, r3
 8010302:	4620      	mov	r0, r4
 8010304:	4498      	add	r8, r3
 8010306:	9204      	str	r2, [sp, #16]
 8010308:	f000 ff1c 	bl	8011144 <__i2b>
 801030c:	4607      	mov	r7, r0
 801030e:	2d00      	cmp	r5, #0
 8010310:	dd0b      	ble.n	801032a <_dtoa_r+0x78a>
 8010312:	9b04      	ldr	r3, [sp, #16]
 8010314:	2b00      	cmp	r3, #0
 8010316:	dd08      	ble.n	801032a <_dtoa_r+0x78a>
 8010318:	42ab      	cmp	r3, r5
 801031a:	9a04      	ldr	r2, [sp, #16]
 801031c:	bfa8      	it	ge
 801031e:	462b      	movge	r3, r5
 8010320:	eba8 0803 	sub.w	r8, r8, r3
 8010324:	1aed      	subs	r5, r5, r3
 8010326:	1ad3      	subs	r3, r2, r3
 8010328:	9304      	str	r3, [sp, #16]
 801032a:	9b06      	ldr	r3, [sp, #24]
 801032c:	b1fb      	cbz	r3, 801036e <_dtoa_r+0x7ce>
 801032e:	9b08      	ldr	r3, [sp, #32]
 8010330:	2b00      	cmp	r3, #0
 8010332:	f000 809f 	beq.w	8010474 <_dtoa_r+0x8d4>
 8010336:	2e00      	cmp	r6, #0
 8010338:	dd11      	ble.n	801035e <_dtoa_r+0x7be>
 801033a:	4639      	mov	r1, r7
 801033c:	4632      	mov	r2, r6
 801033e:	4620      	mov	r0, r4
 8010340:	f000 ffbc 	bl	80112bc <__pow5mult>
 8010344:	465a      	mov	r2, fp
 8010346:	4601      	mov	r1, r0
 8010348:	4607      	mov	r7, r0
 801034a:	4620      	mov	r0, r4
 801034c:	f000 ff10 	bl	8011170 <__multiply>
 8010350:	4659      	mov	r1, fp
 8010352:	9007      	str	r0, [sp, #28]
 8010354:	4620      	mov	r0, r4
 8010356:	f000 fdef 	bl	8010f38 <_Bfree>
 801035a:	9b07      	ldr	r3, [sp, #28]
 801035c:	469b      	mov	fp, r3
 801035e:	9b06      	ldr	r3, [sp, #24]
 8010360:	1b9a      	subs	r2, r3, r6
 8010362:	d004      	beq.n	801036e <_dtoa_r+0x7ce>
 8010364:	4659      	mov	r1, fp
 8010366:	4620      	mov	r0, r4
 8010368:	f000 ffa8 	bl	80112bc <__pow5mult>
 801036c:	4683      	mov	fp, r0
 801036e:	2101      	movs	r1, #1
 8010370:	4620      	mov	r0, r4
 8010372:	f000 fee7 	bl	8011144 <__i2b>
 8010376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010378:	2b00      	cmp	r3, #0
 801037a:	4606      	mov	r6, r0
 801037c:	dd7c      	ble.n	8010478 <_dtoa_r+0x8d8>
 801037e:	461a      	mov	r2, r3
 8010380:	4601      	mov	r1, r0
 8010382:	4620      	mov	r0, r4
 8010384:	f000 ff9a 	bl	80112bc <__pow5mult>
 8010388:	9b05      	ldr	r3, [sp, #20]
 801038a:	2b01      	cmp	r3, #1
 801038c:	4606      	mov	r6, r0
 801038e:	dd76      	ble.n	801047e <_dtoa_r+0x8de>
 8010390:	2300      	movs	r3, #0
 8010392:	9306      	str	r3, [sp, #24]
 8010394:	6933      	ldr	r3, [r6, #16]
 8010396:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801039a:	6918      	ldr	r0, [r3, #16]
 801039c:	f000 fe82 	bl	80110a4 <__hi0bits>
 80103a0:	f1c0 0020 	rsb	r0, r0, #32
 80103a4:	9b04      	ldr	r3, [sp, #16]
 80103a6:	4418      	add	r0, r3
 80103a8:	f010 001f 	ands.w	r0, r0, #31
 80103ac:	f000 8086 	beq.w	80104bc <_dtoa_r+0x91c>
 80103b0:	f1c0 0320 	rsb	r3, r0, #32
 80103b4:	2b04      	cmp	r3, #4
 80103b6:	dd7f      	ble.n	80104b8 <_dtoa_r+0x918>
 80103b8:	f1c0 001c 	rsb	r0, r0, #28
 80103bc:	9b04      	ldr	r3, [sp, #16]
 80103be:	4403      	add	r3, r0
 80103c0:	4480      	add	r8, r0
 80103c2:	4405      	add	r5, r0
 80103c4:	9304      	str	r3, [sp, #16]
 80103c6:	f1b8 0f00 	cmp.w	r8, #0
 80103ca:	dd05      	ble.n	80103d8 <_dtoa_r+0x838>
 80103cc:	4659      	mov	r1, fp
 80103ce:	4642      	mov	r2, r8
 80103d0:	4620      	mov	r0, r4
 80103d2:	f000 ffcd 	bl	8011370 <__lshift>
 80103d6:	4683      	mov	fp, r0
 80103d8:	9b04      	ldr	r3, [sp, #16]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	dd05      	ble.n	80103ea <_dtoa_r+0x84a>
 80103de:	4631      	mov	r1, r6
 80103e0:	461a      	mov	r2, r3
 80103e2:	4620      	mov	r0, r4
 80103e4:	f000 ffc4 	bl	8011370 <__lshift>
 80103e8:	4606      	mov	r6, r0
 80103ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d069      	beq.n	80104c4 <_dtoa_r+0x924>
 80103f0:	4631      	mov	r1, r6
 80103f2:	4658      	mov	r0, fp
 80103f4:	f001 f828 	bl	8011448 <__mcmp>
 80103f8:	2800      	cmp	r0, #0
 80103fa:	da63      	bge.n	80104c4 <_dtoa_r+0x924>
 80103fc:	2300      	movs	r3, #0
 80103fe:	4659      	mov	r1, fp
 8010400:	220a      	movs	r2, #10
 8010402:	4620      	mov	r0, r4
 8010404:	f000 fdba 	bl	8010f7c <__multadd>
 8010408:	9b08      	ldr	r3, [sp, #32]
 801040a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801040e:	4683      	mov	fp, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	f000 818f 	beq.w	8010734 <_dtoa_r+0xb94>
 8010416:	4639      	mov	r1, r7
 8010418:	2300      	movs	r3, #0
 801041a:	220a      	movs	r2, #10
 801041c:	4620      	mov	r0, r4
 801041e:	f000 fdad 	bl	8010f7c <__multadd>
 8010422:	f1b9 0f00 	cmp.w	r9, #0
 8010426:	4607      	mov	r7, r0
 8010428:	f300 808e 	bgt.w	8010548 <_dtoa_r+0x9a8>
 801042c:	9b05      	ldr	r3, [sp, #20]
 801042e:	2b02      	cmp	r3, #2
 8010430:	dc50      	bgt.n	80104d4 <_dtoa_r+0x934>
 8010432:	e089      	b.n	8010548 <_dtoa_r+0x9a8>
 8010434:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010436:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801043a:	e75d      	b.n	80102f8 <_dtoa_r+0x758>
 801043c:	9b01      	ldr	r3, [sp, #4]
 801043e:	1e5e      	subs	r6, r3, #1
 8010440:	9b06      	ldr	r3, [sp, #24]
 8010442:	42b3      	cmp	r3, r6
 8010444:	bfbf      	itttt	lt
 8010446:	9b06      	ldrlt	r3, [sp, #24]
 8010448:	9606      	strlt	r6, [sp, #24]
 801044a:	1af2      	sublt	r2, r6, r3
 801044c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801044e:	bfb6      	itet	lt
 8010450:	189b      	addlt	r3, r3, r2
 8010452:	1b9e      	subge	r6, r3, r6
 8010454:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010456:	9b01      	ldr	r3, [sp, #4]
 8010458:	bfb8      	it	lt
 801045a:	2600      	movlt	r6, #0
 801045c:	2b00      	cmp	r3, #0
 801045e:	bfb5      	itete	lt
 8010460:	eba8 0503 	sublt.w	r5, r8, r3
 8010464:	9b01      	ldrge	r3, [sp, #4]
 8010466:	2300      	movlt	r3, #0
 8010468:	4645      	movge	r5, r8
 801046a:	e747      	b.n	80102fc <_dtoa_r+0x75c>
 801046c:	9e06      	ldr	r6, [sp, #24]
 801046e:	9f08      	ldr	r7, [sp, #32]
 8010470:	4645      	mov	r5, r8
 8010472:	e74c      	b.n	801030e <_dtoa_r+0x76e>
 8010474:	9a06      	ldr	r2, [sp, #24]
 8010476:	e775      	b.n	8010364 <_dtoa_r+0x7c4>
 8010478:	9b05      	ldr	r3, [sp, #20]
 801047a:	2b01      	cmp	r3, #1
 801047c:	dc18      	bgt.n	80104b0 <_dtoa_r+0x910>
 801047e:	9b02      	ldr	r3, [sp, #8]
 8010480:	b9b3      	cbnz	r3, 80104b0 <_dtoa_r+0x910>
 8010482:	9b03      	ldr	r3, [sp, #12]
 8010484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010488:	b9a3      	cbnz	r3, 80104b4 <_dtoa_r+0x914>
 801048a:	9b03      	ldr	r3, [sp, #12]
 801048c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010490:	0d1b      	lsrs	r3, r3, #20
 8010492:	051b      	lsls	r3, r3, #20
 8010494:	b12b      	cbz	r3, 80104a2 <_dtoa_r+0x902>
 8010496:	9b04      	ldr	r3, [sp, #16]
 8010498:	3301      	adds	r3, #1
 801049a:	9304      	str	r3, [sp, #16]
 801049c:	f108 0801 	add.w	r8, r8, #1
 80104a0:	2301      	movs	r3, #1
 80104a2:	9306      	str	r3, [sp, #24]
 80104a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	f47f af74 	bne.w	8010394 <_dtoa_r+0x7f4>
 80104ac:	2001      	movs	r0, #1
 80104ae:	e779      	b.n	80103a4 <_dtoa_r+0x804>
 80104b0:	2300      	movs	r3, #0
 80104b2:	e7f6      	b.n	80104a2 <_dtoa_r+0x902>
 80104b4:	9b02      	ldr	r3, [sp, #8]
 80104b6:	e7f4      	b.n	80104a2 <_dtoa_r+0x902>
 80104b8:	d085      	beq.n	80103c6 <_dtoa_r+0x826>
 80104ba:	4618      	mov	r0, r3
 80104bc:	301c      	adds	r0, #28
 80104be:	e77d      	b.n	80103bc <_dtoa_r+0x81c>
 80104c0:	40240000 	.word	0x40240000
 80104c4:	9b01      	ldr	r3, [sp, #4]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	dc38      	bgt.n	801053c <_dtoa_r+0x99c>
 80104ca:	9b05      	ldr	r3, [sp, #20]
 80104cc:	2b02      	cmp	r3, #2
 80104ce:	dd35      	ble.n	801053c <_dtoa_r+0x99c>
 80104d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80104d4:	f1b9 0f00 	cmp.w	r9, #0
 80104d8:	d10d      	bne.n	80104f6 <_dtoa_r+0x956>
 80104da:	4631      	mov	r1, r6
 80104dc:	464b      	mov	r3, r9
 80104de:	2205      	movs	r2, #5
 80104e0:	4620      	mov	r0, r4
 80104e2:	f000 fd4b 	bl	8010f7c <__multadd>
 80104e6:	4601      	mov	r1, r0
 80104e8:	4606      	mov	r6, r0
 80104ea:	4658      	mov	r0, fp
 80104ec:	f000 ffac 	bl	8011448 <__mcmp>
 80104f0:	2800      	cmp	r0, #0
 80104f2:	f73f adbd 	bgt.w	8010070 <_dtoa_r+0x4d0>
 80104f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104f8:	9d00      	ldr	r5, [sp, #0]
 80104fa:	ea6f 0a03 	mvn.w	sl, r3
 80104fe:	f04f 0800 	mov.w	r8, #0
 8010502:	4631      	mov	r1, r6
 8010504:	4620      	mov	r0, r4
 8010506:	f000 fd17 	bl	8010f38 <_Bfree>
 801050a:	2f00      	cmp	r7, #0
 801050c:	f43f aeb4 	beq.w	8010278 <_dtoa_r+0x6d8>
 8010510:	f1b8 0f00 	cmp.w	r8, #0
 8010514:	d005      	beq.n	8010522 <_dtoa_r+0x982>
 8010516:	45b8      	cmp	r8, r7
 8010518:	d003      	beq.n	8010522 <_dtoa_r+0x982>
 801051a:	4641      	mov	r1, r8
 801051c:	4620      	mov	r0, r4
 801051e:	f000 fd0b 	bl	8010f38 <_Bfree>
 8010522:	4639      	mov	r1, r7
 8010524:	4620      	mov	r0, r4
 8010526:	f000 fd07 	bl	8010f38 <_Bfree>
 801052a:	e6a5      	b.n	8010278 <_dtoa_r+0x6d8>
 801052c:	2600      	movs	r6, #0
 801052e:	4637      	mov	r7, r6
 8010530:	e7e1      	b.n	80104f6 <_dtoa_r+0x956>
 8010532:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010534:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010538:	4637      	mov	r7, r6
 801053a:	e599      	b.n	8010070 <_dtoa_r+0x4d0>
 801053c:	9b08      	ldr	r3, [sp, #32]
 801053e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010542:	2b00      	cmp	r3, #0
 8010544:	f000 80fd 	beq.w	8010742 <_dtoa_r+0xba2>
 8010548:	2d00      	cmp	r5, #0
 801054a:	dd05      	ble.n	8010558 <_dtoa_r+0x9b8>
 801054c:	4639      	mov	r1, r7
 801054e:	462a      	mov	r2, r5
 8010550:	4620      	mov	r0, r4
 8010552:	f000 ff0d 	bl	8011370 <__lshift>
 8010556:	4607      	mov	r7, r0
 8010558:	9b06      	ldr	r3, [sp, #24]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d05c      	beq.n	8010618 <_dtoa_r+0xa78>
 801055e:	6879      	ldr	r1, [r7, #4]
 8010560:	4620      	mov	r0, r4
 8010562:	f000 fca9 	bl	8010eb8 <_Balloc>
 8010566:	4605      	mov	r5, r0
 8010568:	b928      	cbnz	r0, 8010576 <_dtoa_r+0x9d6>
 801056a:	4b80      	ldr	r3, [pc, #512]	; (801076c <_dtoa_r+0xbcc>)
 801056c:	4602      	mov	r2, r0
 801056e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010572:	f7ff bb2e 	b.w	800fbd2 <_dtoa_r+0x32>
 8010576:	693a      	ldr	r2, [r7, #16]
 8010578:	3202      	adds	r2, #2
 801057a:	0092      	lsls	r2, r2, #2
 801057c:	f107 010c 	add.w	r1, r7, #12
 8010580:	300c      	adds	r0, #12
 8010582:	f7fd fe89 	bl	800e298 <memcpy>
 8010586:	2201      	movs	r2, #1
 8010588:	4629      	mov	r1, r5
 801058a:	4620      	mov	r0, r4
 801058c:	f000 fef0 	bl	8011370 <__lshift>
 8010590:	9b00      	ldr	r3, [sp, #0]
 8010592:	3301      	adds	r3, #1
 8010594:	9301      	str	r3, [sp, #4]
 8010596:	9b00      	ldr	r3, [sp, #0]
 8010598:	444b      	add	r3, r9
 801059a:	9307      	str	r3, [sp, #28]
 801059c:	9b02      	ldr	r3, [sp, #8]
 801059e:	f003 0301 	and.w	r3, r3, #1
 80105a2:	46b8      	mov	r8, r7
 80105a4:	9306      	str	r3, [sp, #24]
 80105a6:	4607      	mov	r7, r0
 80105a8:	9b01      	ldr	r3, [sp, #4]
 80105aa:	4631      	mov	r1, r6
 80105ac:	3b01      	subs	r3, #1
 80105ae:	4658      	mov	r0, fp
 80105b0:	9302      	str	r3, [sp, #8]
 80105b2:	f7ff fa67 	bl	800fa84 <quorem>
 80105b6:	4603      	mov	r3, r0
 80105b8:	3330      	adds	r3, #48	; 0x30
 80105ba:	9004      	str	r0, [sp, #16]
 80105bc:	4641      	mov	r1, r8
 80105be:	4658      	mov	r0, fp
 80105c0:	9308      	str	r3, [sp, #32]
 80105c2:	f000 ff41 	bl	8011448 <__mcmp>
 80105c6:	463a      	mov	r2, r7
 80105c8:	4681      	mov	r9, r0
 80105ca:	4631      	mov	r1, r6
 80105cc:	4620      	mov	r0, r4
 80105ce:	f000 ff57 	bl	8011480 <__mdiff>
 80105d2:	68c2      	ldr	r2, [r0, #12]
 80105d4:	9b08      	ldr	r3, [sp, #32]
 80105d6:	4605      	mov	r5, r0
 80105d8:	bb02      	cbnz	r2, 801061c <_dtoa_r+0xa7c>
 80105da:	4601      	mov	r1, r0
 80105dc:	4658      	mov	r0, fp
 80105de:	f000 ff33 	bl	8011448 <__mcmp>
 80105e2:	9b08      	ldr	r3, [sp, #32]
 80105e4:	4602      	mov	r2, r0
 80105e6:	4629      	mov	r1, r5
 80105e8:	4620      	mov	r0, r4
 80105ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80105ee:	f000 fca3 	bl	8010f38 <_Bfree>
 80105f2:	9b05      	ldr	r3, [sp, #20]
 80105f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105f6:	9d01      	ldr	r5, [sp, #4]
 80105f8:	ea43 0102 	orr.w	r1, r3, r2
 80105fc:	9b06      	ldr	r3, [sp, #24]
 80105fe:	430b      	orrs	r3, r1
 8010600:	9b08      	ldr	r3, [sp, #32]
 8010602:	d10d      	bne.n	8010620 <_dtoa_r+0xa80>
 8010604:	2b39      	cmp	r3, #57	; 0x39
 8010606:	d029      	beq.n	801065c <_dtoa_r+0xabc>
 8010608:	f1b9 0f00 	cmp.w	r9, #0
 801060c:	dd01      	ble.n	8010612 <_dtoa_r+0xa72>
 801060e:	9b04      	ldr	r3, [sp, #16]
 8010610:	3331      	adds	r3, #49	; 0x31
 8010612:	9a02      	ldr	r2, [sp, #8]
 8010614:	7013      	strb	r3, [r2, #0]
 8010616:	e774      	b.n	8010502 <_dtoa_r+0x962>
 8010618:	4638      	mov	r0, r7
 801061a:	e7b9      	b.n	8010590 <_dtoa_r+0x9f0>
 801061c:	2201      	movs	r2, #1
 801061e:	e7e2      	b.n	80105e6 <_dtoa_r+0xa46>
 8010620:	f1b9 0f00 	cmp.w	r9, #0
 8010624:	db06      	blt.n	8010634 <_dtoa_r+0xa94>
 8010626:	9905      	ldr	r1, [sp, #20]
 8010628:	ea41 0909 	orr.w	r9, r1, r9
 801062c:	9906      	ldr	r1, [sp, #24]
 801062e:	ea59 0101 	orrs.w	r1, r9, r1
 8010632:	d120      	bne.n	8010676 <_dtoa_r+0xad6>
 8010634:	2a00      	cmp	r2, #0
 8010636:	ddec      	ble.n	8010612 <_dtoa_r+0xa72>
 8010638:	4659      	mov	r1, fp
 801063a:	2201      	movs	r2, #1
 801063c:	4620      	mov	r0, r4
 801063e:	9301      	str	r3, [sp, #4]
 8010640:	f000 fe96 	bl	8011370 <__lshift>
 8010644:	4631      	mov	r1, r6
 8010646:	4683      	mov	fp, r0
 8010648:	f000 fefe 	bl	8011448 <__mcmp>
 801064c:	2800      	cmp	r0, #0
 801064e:	9b01      	ldr	r3, [sp, #4]
 8010650:	dc02      	bgt.n	8010658 <_dtoa_r+0xab8>
 8010652:	d1de      	bne.n	8010612 <_dtoa_r+0xa72>
 8010654:	07da      	lsls	r2, r3, #31
 8010656:	d5dc      	bpl.n	8010612 <_dtoa_r+0xa72>
 8010658:	2b39      	cmp	r3, #57	; 0x39
 801065a:	d1d8      	bne.n	801060e <_dtoa_r+0xa6e>
 801065c:	9a02      	ldr	r2, [sp, #8]
 801065e:	2339      	movs	r3, #57	; 0x39
 8010660:	7013      	strb	r3, [r2, #0]
 8010662:	462b      	mov	r3, r5
 8010664:	461d      	mov	r5, r3
 8010666:	3b01      	subs	r3, #1
 8010668:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801066c:	2a39      	cmp	r2, #57	; 0x39
 801066e:	d050      	beq.n	8010712 <_dtoa_r+0xb72>
 8010670:	3201      	adds	r2, #1
 8010672:	701a      	strb	r2, [r3, #0]
 8010674:	e745      	b.n	8010502 <_dtoa_r+0x962>
 8010676:	2a00      	cmp	r2, #0
 8010678:	dd03      	ble.n	8010682 <_dtoa_r+0xae2>
 801067a:	2b39      	cmp	r3, #57	; 0x39
 801067c:	d0ee      	beq.n	801065c <_dtoa_r+0xabc>
 801067e:	3301      	adds	r3, #1
 8010680:	e7c7      	b.n	8010612 <_dtoa_r+0xa72>
 8010682:	9a01      	ldr	r2, [sp, #4]
 8010684:	9907      	ldr	r1, [sp, #28]
 8010686:	f802 3c01 	strb.w	r3, [r2, #-1]
 801068a:	428a      	cmp	r2, r1
 801068c:	d02a      	beq.n	80106e4 <_dtoa_r+0xb44>
 801068e:	4659      	mov	r1, fp
 8010690:	2300      	movs	r3, #0
 8010692:	220a      	movs	r2, #10
 8010694:	4620      	mov	r0, r4
 8010696:	f000 fc71 	bl	8010f7c <__multadd>
 801069a:	45b8      	cmp	r8, r7
 801069c:	4683      	mov	fp, r0
 801069e:	f04f 0300 	mov.w	r3, #0
 80106a2:	f04f 020a 	mov.w	r2, #10
 80106a6:	4641      	mov	r1, r8
 80106a8:	4620      	mov	r0, r4
 80106aa:	d107      	bne.n	80106bc <_dtoa_r+0xb1c>
 80106ac:	f000 fc66 	bl	8010f7c <__multadd>
 80106b0:	4680      	mov	r8, r0
 80106b2:	4607      	mov	r7, r0
 80106b4:	9b01      	ldr	r3, [sp, #4]
 80106b6:	3301      	adds	r3, #1
 80106b8:	9301      	str	r3, [sp, #4]
 80106ba:	e775      	b.n	80105a8 <_dtoa_r+0xa08>
 80106bc:	f000 fc5e 	bl	8010f7c <__multadd>
 80106c0:	4639      	mov	r1, r7
 80106c2:	4680      	mov	r8, r0
 80106c4:	2300      	movs	r3, #0
 80106c6:	220a      	movs	r2, #10
 80106c8:	4620      	mov	r0, r4
 80106ca:	f000 fc57 	bl	8010f7c <__multadd>
 80106ce:	4607      	mov	r7, r0
 80106d0:	e7f0      	b.n	80106b4 <_dtoa_r+0xb14>
 80106d2:	f1b9 0f00 	cmp.w	r9, #0
 80106d6:	9a00      	ldr	r2, [sp, #0]
 80106d8:	bfcc      	ite	gt
 80106da:	464d      	movgt	r5, r9
 80106dc:	2501      	movle	r5, #1
 80106de:	4415      	add	r5, r2
 80106e0:	f04f 0800 	mov.w	r8, #0
 80106e4:	4659      	mov	r1, fp
 80106e6:	2201      	movs	r2, #1
 80106e8:	4620      	mov	r0, r4
 80106ea:	9301      	str	r3, [sp, #4]
 80106ec:	f000 fe40 	bl	8011370 <__lshift>
 80106f0:	4631      	mov	r1, r6
 80106f2:	4683      	mov	fp, r0
 80106f4:	f000 fea8 	bl	8011448 <__mcmp>
 80106f8:	2800      	cmp	r0, #0
 80106fa:	dcb2      	bgt.n	8010662 <_dtoa_r+0xac2>
 80106fc:	d102      	bne.n	8010704 <_dtoa_r+0xb64>
 80106fe:	9b01      	ldr	r3, [sp, #4]
 8010700:	07db      	lsls	r3, r3, #31
 8010702:	d4ae      	bmi.n	8010662 <_dtoa_r+0xac2>
 8010704:	462b      	mov	r3, r5
 8010706:	461d      	mov	r5, r3
 8010708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801070c:	2a30      	cmp	r2, #48	; 0x30
 801070e:	d0fa      	beq.n	8010706 <_dtoa_r+0xb66>
 8010710:	e6f7      	b.n	8010502 <_dtoa_r+0x962>
 8010712:	9a00      	ldr	r2, [sp, #0]
 8010714:	429a      	cmp	r2, r3
 8010716:	d1a5      	bne.n	8010664 <_dtoa_r+0xac4>
 8010718:	f10a 0a01 	add.w	sl, sl, #1
 801071c:	2331      	movs	r3, #49	; 0x31
 801071e:	e779      	b.n	8010614 <_dtoa_r+0xa74>
 8010720:	4b13      	ldr	r3, [pc, #76]	; (8010770 <_dtoa_r+0xbd0>)
 8010722:	f7ff baaf 	b.w	800fc84 <_dtoa_r+0xe4>
 8010726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010728:	2b00      	cmp	r3, #0
 801072a:	f47f aa86 	bne.w	800fc3a <_dtoa_r+0x9a>
 801072e:	4b11      	ldr	r3, [pc, #68]	; (8010774 <_dtoa_r+0xbd4>)
 8010730:	f7ff baa8 	b.w	800fc84 <_dtoa_r+0xe4>
 8010734:	f1b9 0f00 	cmp.w	r9, #0
 8010738:	dc03      	bgt.n	8010742 <_dtoa_r+0xba2>
 801073a:	9b05      	ldr	r3, [sp, #20]
 801073c:	2b02      	cmp	r3, #2
 801073e:	f73f aec9 	bgt.w	80104d4 <_dtoa_r+0x934>
 8010742:	9d00      	ldr	r5, [sp, #0]
 8010744:	4631      	mov	r1, r6
 8010746:	4658      	mov	r0, fp
 8010748:	f7ff f99c 	bl	800fa84 <quorem>
 801074c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010750:	f805 3b01 	strb.w	r3, [r5], #1
 8010754:	9a00      	ldr	r2, [sp, #0]
 8010756:	1aaa      	subs	r2, r5, r2
 8010758:	4591      	cmp	r9, r2
 801075a:	ddba      	ble.n	80106d2 <_dtoa_r+0xb32>
 801075c:	4659      	mov	r1, fp
 801075e:	2300      	movs	r3, #0
 8010760:	220a      	movs	r2, #10
 8010762:	4620      	mov	r0, r4
 8010764:	f000 fc0a 	bl	8010f7c <__multadd>
 8010768:	4683      	mov	fp, r0
 801076a:	e7eb      	b.n	8010744 <_dtoa_r+0xba4>
 801076c:	08012f88 	.word	0x08012f88
 8010770:	08012df4 	.word	0x08012df4
 8010774:	08012f1c 	.word	0x08012f1c

08010778 <fiprintf>:
 8010778:	b40e      	push	{r1, r2, r3}
 801077a:	b503      	push	{r0, r1, lr}
 801077c:	4601      	mov	r1, r0
 801077e:	ab03      	add	r3, sp, #12
 8010780:	4805      	ldr	r0, [pc, #20]	; (8010798 <fiprintf+0x20>)
 8010782:	f853 2b04 	ldr.w	r2, [r3], #4
 8010786:	6800      	ldr	r0, [r0, #0]
 8010788:	9301      	str	r3, [sp, #4]
 801078a:	f001 fa8f 	bl	8011cac <_vfiprintf_r>
 801078e:	b002      	add	sp, #8
 8010790:	f85d eb04 	ldr.w	lr, [sp], #4
 8010794:	b003      	add	sp, #12
 8010796:	4770      	bx	lr
 8010798:	20000028 	.word	0x20000028

0801079c <rshift>:
 801079c:	6903      	ldr	r3, [r0, #16]
 801079e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80107a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80107aa:	f100 0414 	add.w	r4, r0, #20
 80107ae:	dd45      	ble.n	801083c <rshift+0xa0>
 80107b0:	f011 011f 	ands.w	r1, r1, #31
 80107b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80107b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80107bc:	d10c      	bne.n	80107d8 <rshift+0x3c>
 80107be:	f100 0710 	add.w	r7, r0, #16
 80107c2:	4629      	mov	r1, r5
 80107c4:	42b1      	cmp	r1, r6
 80107c6:	d334      	bcc.n	8010832 <rshift+0x96>
 80107c8:	1a9b      	subs	r3, r3, r2
 80107ca:	009b      	lsls	r3, r3, #2
 80107cc:	1eea      	subs	r2, r5, #3
 80107ce:	4296      	cmp	r6, r2
 80107d0:	bf38      	it	cc
 80107d2:	2300      	movcc	r3, #0
 80107d4:	4423      	add	r3, r4
 80107d6:	e015      	b.n	8010804 <rshift+0x68>
 80107d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80107dc:	f1c1 0820 	rsb	r8, r1, #32
 80107e0:	40cf      	lsrs	r7, r1
 80107e2:	f105 0e04 	add.w	lr, r5, #4
 80107e6:	46a1      	mov	r9, r4
 80107e8:	4576      	cmp	r6, lr
 80107ea:	46f4      	mov	ip, lr
 80107ec:	d815      	bhi.n	801081a <rshift+0x7e>
 80107ee:	1a9b      	subs	r3, r3, r2
 80107f0:	009a      	lsls	r2, r3, #2
 80107f2:	3a04      	subs	r2, #4
 80107f4:	3501      	adds	r5, #1
 80107f6:	42ae      	cmp	r6, r5
 80107f8:	bf38      	it	cc
 80107fa:	2200      	movcc	r2, #0
 80107fc:	18a3      	adds	r3, r4, r2
 80107fe:	50a7      	str	r7, [r4, r2]
 8010800:	b107      	cbz	r7, 8010804 <rshift+0x68>
 8010802:	3304      	adds	r3, #4
 8010804:	1b1a      	subs	r2, r3, r4
 8010806:	42a3      	cmp	r3, r4
 8010808:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801080c:	bf08      	it	eq
 801080e:	2300      	moveq	r3, #0
 8010810:	6102      	str	r2, [r0, #16]
 8010812:	bf08      	it	eq
 8010814:	6143      	streq	r3, [r0, #20]
 8010816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801081a:	f8dc c000 	ldr.w	ip, [ip]
 801081e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010822:	ea4c 0707 	orr.w	r7, ip, r7
 8010826:	f849 7b04 	str.w	r7, [r9], #4
 801082a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801082e:	40cf      	lsrs	r7, r1
 8010830:	e7da      	b.n	80107e8 <rshift+0x4c>
 8010832:	f851 cb04 	ldr.w	ip, [r1], #4
 8010836:	f847 cf04 	str.w	ip, [r7, #4]!
 801083a:	e7c3      	b.n	80107c4 <rshift+0x28>
 801083c:	4623      	mov	r3, r4
 801083e:	e7e1      	b.n	8010804 <rshift+0x68>

08010840 <__hexdig_fun>:
 8010840:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010844:	2b09      	cmp	r3, #9
 8010846:	d802      	bhi.n	801084e <__hexdig_fun+0xe>
 8010848:	3820      	subs	r0, #32
 801084a:	b2c0      	uxtb	r0, r0
 801084c:	4770      	bx	lr
 801084e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010852:	2b05      	cmp	r3, #5
 8010854:	d801      	bhi.n	801085a <__hexdig_fun+0x1a>
 8010856:	3847      	subs	r0, #71	; 0x47
 8010858:	e7f7      	b.n	801084a <__hexdig_fun+0xa>
 801085a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801085e:	2b05      	cmp	r3, #5
 8010860:	d801      	bhi.n	8010866 <__hexdig_fun+0x26>
 8010862:	3827      	subs	r0, #39	; 0x27
 8010864:	e7f1      	b.n	801084a <__hexdig_fun+0xa>
 8010866:	2000      	movs	r0, #0
 8010868:	4770      	bx	lr
	...

0801086c <__gethex>:
 801086c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010870:	ed2d 8b02 	vpush	{d8}
 8010874:	b089      	sub	sp, #36	; 0x24
 8010876:	ee08 0a10 	vmov	s16, r0
 801087a:	9304      	str	r3, [sp, #16]
 801087c:	4bbc      	ldr	r3, [pc, #752]	; (8010b70 <__gethex+0x304>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	9301      	str	r3, [sp, #4]
 8010882:	4618      	mov	r0, r3
 8010884:	468b      	mov	fp, r1
 8010886:	4690      	mov	r8, r2
 8010888:	f7ef fcaa 	bl	80001e0 <strlen>
 801088c:	9b01      	ldr	r3, [sp, #4]
 801088e:	f8db 2000 	ldr.w	r2, [fp]
 8010892:	4403      	add	r3, r0
 8010894:	4682      	mov	sl, r0
 8010896:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801089a:	9305      	str	r3, [sp, #20]
 801089c:	1c93      	adds	r3, r2, #2
 801089e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80108a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80108a6:	32fe      	adds	r2, #254	; 0xfe
 80108a8:	18d1      	adds	r1, r2, r3
 80108aa:	461f      	mov	r7, r3
 80108ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80108b0:	9100      	str	r1, [sp, #0]
 80108b2:	2830      	cmp	r0, #48	; 0x30
 80108b4:	d0f8      	beq.n	80108a8 <__gethex+0x3c>
 80108b6:	f7ff ffc3 	bl	8010840 <__hexdig_fun>
 80108ba:	4604      	mov	r4, r0
 80108bc:	2800      	cmp	r0, #0
 80108be:	d13a      	bne.n	8010936 <__gethex+0xca>
 80108c0:	9901      	ldr	r1, [sp, #4]
 80108c2:	4652      	mov	r2, sl
 80108c4:	4638      	mov	r0, r7
 80108c6:	f001 fb3b 	bl	8011f40 <strncmp>
 80108ca:	4605      	mov	r5, r0
 80108cc:	2800      	cmp	r0, #0
 80108ce:	d168      	bne.n	80109a2 <__gethex+0x136>
 80108d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80108d4:	eb07 060a 	add.w	r6, r7, sl
 80108d8:	f7ff ffb2 	bl	8010840 <__hexdig_fun>
 80108dc:	2800      	cmp	r0, #0
 80108de:	d062      	beq.n	80109a6 <__gethex+0x13a>
 80108e0:	4633      	mov	r3, r6
 80108e2:	7818      	ldrb	r0, [r3, #0]
 80108e4:	2830      	cmp	r0, #48	; 0x30
 80108e6:	461f      	mov	r7, r3
 80108e8:	f103 0301 	add.w	r3, r3, #1
 80108ec:	d0f9      	beq.n	80108e2 <__gethex+0x76>
 80108ee:	f7ff ffa7 	bl	8010840 <__hexdig_fun>
 80108f2:	2301      	movs	r3, #1
 80108f4:	fab0 f480 	clz	r4, r0
 80108f8:	0964      	lsrs	r4, r4, #5
 80108fa:	4635      	mov	r5, r6
 80108fc:	9300      	str	r3, [sp, #0]
 80108fe:	463a      	mov	r2, r7
 8010900:	4616      	mov	r6, r2
 8010902:	3201      	adds	r2, #1
 8010904:	7830      	ldrb	r0, [r6, #0]
 8010906:	f7ff ff9b 	bl	8010840 <__hexdig_fun>
 801090a:	2800      	cmp	r0, #0
 801090c:	d1f8      	bne.n	8010900 <__gethex+0x94>
 801090e:	9901      	ldr	r1, [sp, #4]
 8010910:	4652      	mov	r2, sl
 8010912:	4630      	mov	r0, r6
 8010914:	f001 fb14 	bl	8011f40 <strncmp>
 8010918:	b980      	cbnz	r0, 801093c <__gethex+0xd0>
 801091a:	b94d      	cbnz	r5, 8010930 <__gethex+0xc4>
 801091c:	eb06 050a 	add.w	r5, r6, sl
 8010920:	462a      	mov	r2, r5
 8010922:	4616      	mov	r6, r2
 8010924:	3201      	adds	r2, #1
 8010926:	7830      	ldrb	r0, [r6, #0]
 8010928:	f7ff ff8a 	bl	8010840 <__hexdig_fun>
 801092c:	2800      	cmp	r0, #0
 801092e:	d1f8      	bne.n	8010922 <__gethex+0xb6>
 8010930:	1bad      	subs	r5, r5, r6
 8010932:	00ad      	lsls	r5, r5, #2
 8010934:	e004      	b.n	8010940 <__gethex+0xd4>
 8010936:	2400      	movs	r4, #0
 8010938:	4625      	mov	r5, r4
 801093a:	e7e0      	b.n	80108fe <__gethex+0x92>
 801093c:	2d00      	cmp	r5, #0
 801093e:	d1f7      	bne.n	8010930 <__gethex+0xc4>
 8010940:	7833      	ldrb	r3, [r6, #0]
 8010942:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010946:	2b50      	cmp	r3, #80	; 0x50
 8010948:	d13b      	bne.n	80109c2 <__gethex+0x156>
 801094a:	7873      	ldrb	r3, [r6, #1]
 801094c:	2b2b      	cmp	r3, #43	; 0x2b
 801094e:	d02c      	beq.n	80109aa <__gethex+0x13e>
 8010950:	2b2d      	cmp	r3, #45	; 0x2d
 8010952:	d02e      	beq.n	80109b2 <__gethex+0x146>
 8010954:	1c71      	adds	r1, r6, #1
 8010956:	f04f 0900 	mov.w	r9, #0
 801095a:	7808      	ldrb	r0, [r1, #0]
 801095c:	f7ff ff70 	bl	8010840 <__hexdig_fun>
 8010960:	1e43      	subs	r3, r0, #1
 8010962:	b2db      	uxtb	r3, r3
 8010964:	2b18      	cmp	r3, #24
 8010966:	d82c      	bhi.n	80109c2 <__gethex+0x156>
 8010968:	f1a0 0210 	sub.w	r2, r0, #16
 801096c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010970:	f7ff ff66 	bl	8010840 <__hexdig_fun>
 8010974:	1e43      	subs	r3, r0, #1
 8010976:	b2db      	uxtb	r3, r3
 8010978:	2b18      	cmp	r3, #24
 801097a:	d91d      	bls.n	80109b8 <__gethex+0x14c>
 801097c:	f1b9 0f00 	cmp.w	r9, #0
 8010980:	d000      	beq.n	8010984 <__gethex+0x118>
 8010982:	4252      	negs	r2, r2
 8010984:	4415      	add	r5, r2
 8010986:	f8cb 1000 	str.w	r1, [fp]
 801098a:	b1e4      	cbz	r4, 80109c6 <__gethex+0x15a>
 801098c:	9b00      	ldr	r3, [sp, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	bf14      	ite	ne
 8010992:	2700      	movne	r7, #0
 8010994:	2706      	moveq	r7, #6
 8010996:	4638      	mov	r0, r7
 8010998:	b009      	add	sp, #36	; 0x24
 801099a:	ecbd 8b02 	vpop	{d8}
 801099e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a2:	463e      	mov	r6, r7
 80109a4:	4625      	mov	r5, r4
 80109a6:	2401      	movs	r4, #1
 80109a8:	e7ca      	b.n	8010940 <__gethex+0xd4>
 80109aa:	f04f 0900 	mov.w	r9, #0
 80109ae:	1cb1      	adds	r1, r6, #2
 80109b0:	e7d3      	b.n	801095a <__gethex+0xee>
 80109b2:	f04f 0901 	mov.w	r9, #1
 80109b6:	e7fa      	b.n	80109ae <__gethex+0x142>
 80109b8:	230a      	movs	r3, #10
 80109ba:	fb03 0202 	mla	r2, r3, r2, r0
 80109be:	3a10      	subs	r2, #16
 80109c0:	e7d4      	b.n	801096c <__gethex+0x100>
 80109c2:	4631      	mov	r1, r6
 80109c4:	e7df      	b.n	8010986 <__gethex+0x11a>
 80109c6:	1bf3      	subs	r3, r6, r7
 80109c8:	3b01      	subs	r3, #1
 80109ca:	4621      	mov	r1, r4
 80109cc:	2b07      	cmp	r3, #7
 80109ce:	dc0b      	bgt.n	80109e8 <__gethex+0x17c>
 80109d0:	ee18 0a10 	vmov	r0, s16
 80109d4:	f000 fa70 	bl	8010eb8 <_Balloc>
 80109d8:	4604      	mov	r4, r0
 80109da:	b940      	cbnz	r0, 80109ee <__gethex+0x182>
 80109dc:	4b65      	ldr	r3, [pc, #404]	; (8010b74 <__gethex+0x308>)
 80109de:	4602      	mov	r2, r0
 80109e0:	21de      	movs	r1, #222	; 0xde
 80109e2:	4865      	ldr	r0, [pc, #404]	; (8010b78 <__gethex+0x30c>)
 80109e4:	f7ff f830 	bl	800fa48 <__assert_func>
 80109e8:	3101      	adds	r1, #1
 80109ea:	105b      	asrs	r3, r3, #1
 80109ec:	e7ee      	b.n	80109cc <__gethex+0x160>
 80109ee:	f100 0914 	add.w	r9, r0, #20
 80109f2:	f04f 0b00 	mov.w	fp, #0
 80109f6:	f1ca 0301 	rsb	r3, sl, #1
 80109fa:	f8cd 9008 	str.w	r9, [sp, #8]
 80109fe:	f8cd b000 	str.w	fp, [sp]
 8010a02:	9306      	str	r3, [sp, #24]
 8010a04:	42b7      	cmp	r7, r6
 8010a06:	d340      	bcc.n	8010a8a <__gethex+0x21e>
 8010a08:	9802      	ldr	r0, [sp, #8]
 8010a0a:	9b00      	ldr	r3, [sp, #0]
 8010a0c:	f840 3b04 	str.w	r3, [r0], #4
 8010a10:	eba0 0009 	sub.w	r0, r0, r9
 8010a14:	1080      	asrs	r0, r0, #2
 8010a16:	0146      	lsls	r6, r0, #5
 8010a18:	6120      	str	r0, [r4, #16]
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f000 fb42 	bl	80110a4 <__hi0bits>
 8010a20:	1a30      	subs	r0, r6, r0
 8010a22:	f8d8 6000 	ldr.w	r6, [r8]
 8010a26:	42b0      	cmp	r0, r6
 8010a28:	dd63      	ble.n	8010af2 <__gethex+0x286>
 8010a2a:	1b87      	subs	r7, r0, r6
 8010a2c:	4639      	mov	r1, r7
 8010a2e:	4620      	mov	r0, r4
 8010a30:	f000 fedc 	bl	80117ec <__any_on>
 8010a34:	4682      	mov	sl, r0
 8010a36:	b1a8      	cbz	r0, 8010a64 <__gethex+0x1f8>
 8010a38:	1e7b      	subs	r3, r7, #1
 8010a3a:	1159      	asrs	r1, r3, #5
 8010a3c:	f003 021f 	and.w	r2, r3, #31
 8010a40:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010a44:	f04f 0a01 	mov.w	sl, #1
 8010a48:	fa0a f202 	lsl.w	r2, sl, r2
 8010a4c:	420a      	tst	r2, r1
 8010a4e:	d009      	beq.n	8010a64 <__gethex+0x1f8>
 8010a50:	4553      	cmp	r3, sl
 8010a52:	dd05      	ble.n	8010a60 <__gethex+0x1f4>
 8010a54:	1eb9      	subs	r1, r7, #2
 8010a56:	4620      	mov	r0, r4
 8010a58:	f000 fec8 	bl	80117ec <__any_on>
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	d145      	bne.n	8010aec <__gethex+0x280>
 8010a60:	f04f 0a02 	mov.w	sl, #2
 8010a64:	4639      	mov	r1, r7
 8010a66:	4620      	mov	r0, r4
 8010a68:	f7ff fe98 	bl	801079c <rshift>
 8010a6c:	443d      	add	r5, r7
 8010a6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a72:	42ab      	cmp	r3, r5
 8010a74:	da4c      	bge.n	8010b10 <__gethex+0x2a4>
 8010a76:	ee18 0a10 	vmov	r0, s16
 8010a7a:	4621      	mov	r1, r4
 8010a7c:	f000 fa5c 	bl	8010f38 <_Bfree>
 8010a80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010a82:	2300      	movs	r3, #0
 8010a84:	6013      	str	r3, [r2, #0]
 8010a86:	27a3      	movs	r7, #163	; 0xa3
 8010a88:	e785      	b.n	8010996 <__gethex+0x12a>
 8010a8a:	1e73      	subs	r3, r6, #1
 8010a8c:	9a05      	ldr	r2, [sp, #20]
 8010a8e:	9303      	str	r3, [sp, #12]
 8010a90:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010a94:	4293      	cmp	r3, r2
 8010a96:	d019      	beq.n	8010acc <__gethex+0x260>
 8010a98:	f1bb 0f20 	cmp.w	fp, #32
 8010a9c:	d107      	bne.n	8010aae <__gethex+0x242>
 8010a9e:	9b02      	ldr	r3, [sp, #8]
 8010aa0:	9a00      	ldr	r2, [sp, #0]
 8010aa2:	f843 2b04 	str.w	r2, [r3], #4
 8010aa6:	9302      	str	r3, [sp, #8]
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	9300      	str	r3, [sp, #0]
 8010aac:	469b      	mov	fp, r3
 8010aae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010ab2:	f7ff fec5 	bl	8010840 <__hexdig_fun>
 8010ab6:	9b00      	ldr	r3, [sp, #0]
 8010ab8:	f000 000f 	and.w	r0, r0, #15
 8010abc:	fa00 f00b 	lsl.w	r0, r0, fp
 8010ac0:	4303      	orrs	r3, r0
 8010ac2:	9300      	str	r3, [sp, #0]
 8010ac4:	f10b 0b04 	add.w	fp, fp, #4
 8010ac8:	9b03      	ldr	r3, [sp, #12]
 8010aca:	e00d      	b.n	8010ae8 <__gethex+0x27c>
 8010acc:	9b03      	ldr	r3, [sp, #12]
 8010ace:	9a06      	ldr	r2, [sp, #24]
 8010ad0:	4413      	add	r3, r2
 8010ad2:	42bb      	cmp	r3, r7
 8010ad4:	d3e0      	bcc.n	8010a98 <__gethex+0x22c>
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	9901      	ldr	r1, [sp, #4]
 8010ada:	9307      	str	r3, [sp, #28]
 8010adc:	4652      	mov	r2, sl
 8010ade:	f001 fa2f 	bl	8011f40 <strncmp>
 8010ae2:	9b07      	ldr	r3, [sp, #28]
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	d1d7      	bne.n	8010a98 <__gethex+0x22c>
 8010ae8:	461e      	mov	r6, r3
 8010aea:	e78b      	b.n	8010a04 <__gethex+0x198>
 8010aec:	f04f 0a03 	mov.w	sl, #3
 8010af0:	e7b8      	b.n	8010a64 <__gethex+0x1f8>
 8010af2:	da0a      	bge.n	8010b0a <__gethex+0x29e>
 8010af4:	1a37      	subs	r7, r6, r0
 8010af6:	4621      	mov	r1, r4
 8010af8:	ee18 0a10 	vmov	r0, s16
 8010afc:	463a      	mov	r2, r7
 8010afe:	f000 fc37 	bl	8011370 <__lshift>
 8010b02:	1bed      	subs	r5, r5, r7
 8010b04:	4604      	mov	r4, r0
 8010b06:	f100 0914 	add.w	r9, r0, #20
 8010b0a:	f04f 0a00 	mov.w	sl, #0
 8010b0e:	e7ae      	b.n	8010a6e <__gethex+0x202>
 8010b10:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010b14:	42a8      	cmp	r0, r5
 8010b16:	dd72      	ble.n	8010bfe <__gethex+0x392>
 8010b18:	1b45      	subs	r5, r0, r5
 8010b1a:	42ae      	cmp	r6, r5
 8010b1c:	dc36      	bgt.n	8010b8c <__gethex+0x320>
 8010b1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b22:	2b02      	cmp	r3, #2
 8010b24:	d02a      	beq.n	8010b7c <__gethex+0x310>
 8010b26:	2b03      	cmp	r3, #3
 8010b28:	d02c      	beq.n	8010b84 <__gethex+0x318>
 8010b2a:	2b01      	cmp	r3, #1
 8010b2c:	d115      	bne.n	8010b5a <__gethex+0x2ee>
 8010b2e:	42ae      	cmp	r6, r5
 8010b30:	d113      	bne.n	8010b5a <__gethex+0x2ee>
 8010b32:	2e01      	cmp	r6, #1
 8010b34:	d10b      	bne.n	8010b4e <__gethex+0x2e2>
 8010b36:	9a04      	ldr	r2, [sp, #16]
 8010b38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010b3c:	6013      	str	r3, [r2, #0]
 8010b3e:	2301      	movs	r3, #1
 8010b40:	6123      	str	r3, [r4, #16]
 8010b42:	f8c9 3000 	str.w	r3, [r9]
 8010b46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010b48:	2762      	movs	r7, #98	; 0x62
 8010b4a:	601c      	str	r4, [r3, #0]
 8010b4c:	e723      	b.n	8010996 <__gethex+0x12a>
 8010b4e:	1e71      	subs	r1, r6, #1
 8010b50:	4620      	mov	r0, r4
 8010b52:	f000 fe4b 	bl	80117ec <__any_on>
 8010b56:	2800      	cmp	r0, #0
 8010b58:	d1ed      	bne.n	8010b36 <__gethex+0x2ca>
 8010b5a:	ee18 0a10 	vmov	r0, s16
 8010b5e:	4621      	mov	r1, r4
 8010b60:	f000 f9ea 	bl	8010f38 <_Bfree>
 8010b64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010b66:	2300      	movs	r3, #0
 8010b68:	6013      	str	r3, [r2, #0]
 8010b6a:	2750      	movs	r7, #80	; 0x50
 8010b6c:	e713      	b.n	8010996 <__gethex+0x12a>
 8010b6e:	bf00      	nop
 8010b70:	08013004 	.word	0x08013004
 8010b74:	08012f88 	.word	0x08012f88
 8010b78:	08012f99 	.word	0x08012f99
 8010b7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d1eb      	bne.n	8010b5a <__gethex+0x2ee>
 8010b82:	e7d8      	b.n	8010b36 <__gethex+0x2ca>
 8010b84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d1d5      	bne.n	8010b36 <__gethex+0x2ca>
 8010b8a:	e7e6      	b.n	8010b5a <__gethex+0x2ee>
 8010b8c:	1e6f      	subs	r7, r5, #1
 8010b8e:	f1ba 0f00 	cmp.w	sl, #0
 8010b92:	d131      	bne.n	8010bf8 <__gethex+0x38c>
 8010b94:	b127      	cbz	r7, 8010ba0 <__gethex+0x334>
 8010b96:	4639      	mov	r1, r7
 8010b98:	4620      	mov	r0, r4
 8010b9a:	f000 fe27 	bl	80117ec <__any_on>
 8010b9e:	4682      	mov	sl, r0
 8010ba0:	117b      	asrs	r3, r7, #5
 8010ba2:	2101      	movs	r1, #1
 8010ba4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010ba8:	f007 071f 	and.w	r7, r7, #31
 8010bac:	fa01 f707 	lsl.w	r7, r1, r7
 8010bb0:	421f      	tst	r7, r3
 8010bb2:	4629      	mov	r1, r5
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	bf18      	it	ne
 8010bb8:	f04a 0a02 	orrne.w	sl, sl, #2
 8010bbc:	1b76      	subs	r6, r6, r5
 8010bbe:	f7ff fded 	bl	801079c <rshift>
 8010bc2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010bc6:	2702      	movs	r7, #2
 8010bc8:	f1ba 0f00 	cmp.w	sl, #0
 8010bcc:	d048      	beq.n	8010c60 <__gethex+0x3f4>
 8010bce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010bd2:	2b02      	cmp	r3, #2
 8010bd4:	d015      	beq.n	8010c02 <__gethex+0x396>
 8010bd6:	2b03      	cmp	r3, #3
 8010bd8:	d017      	beq.n	8010c0a <__gethex+0x39e>
 8010bda:	2b01      	cmp	r3, #1
 8010bdc:	d109      	bne.n	8010bf2 <__gethex+0x386>
 8010bde:	f01a 0f02 	tst.w	sl, #2
 8010be2:	d006      	beq.n	8010bf2 <__gethex+0x386>
 8010be4:	f8d9 0000 	ldr.w	r0, [r9]
 8010be8:	ea4a 0a00 	orr.w	sl, sl, r0
 8010bec:	f01a 0f01 	tst.w	sl, #1
 8010bf0:	d10e      	bne.n	8010c10 <__gethex+0x3a4>
 8010bf2:	f047 0710 	orr.w	r7, r7, #16
 8010bf6:	e033      	b.n	8010c60 <__gethex+0x3f4>
 8010bf8:	f04f 0a01 	mov.w	sl, #1
 8010bfc:	e7d0      	b.n	8010ba0 <__gethex+0x334>
 8010bfe:	2701      	movs	r7, #1
 8010c00:	e7e2      	b.n	8010bc8 <__gethex+0x35c>
 8010c02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c04:	f1c3 0301 	rsb	r3, r3, #1
 8010c08:	9315      	str	r3, [sp, #84]	; 0x54
 8010c0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d0f0      	beq.n	8010bf2 <__gethex+0x386>
 8010c10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010c14:	f104 0314 	add.w	r3, r4, #20
 8010c18:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010c1c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010c20:	f04f 0c00 	mov.w	ip, #0
 8010c24:	4618      	mov	r0, r3
 8010c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c2a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010c2e:	d01c      	beq.n	8010c6a <__gethex+0x3fe>
 8010c30:	3201      	adds	r2, #1
 8010c32:	6002      	str	r2, [r0, #0]
 8010c34:	2f02      	cmp	r7, #2
 8010c36:	f104 0314 	add.w	r3, r4, #20
 8010c3a:	d13f      	bne.n	8010cbc <__gethex+0x450>
 8010c3c:	f8d8 2000 	ldr.w	r2, [r8]
 8010c40:	3a01      	subs	r2, #1
 8010c42:	42b2      	cmp	r2, r6
 8010c44:	d10a      	bne.n	8010c5c <__gethex+0x3f0>
 8010c46:	1171      	asrs	r1, r6, #5
 8010c48:	2201      	movs	r2, #1
 8010c4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010c4e:	f006 061f 	and.w	r6, r6, #31
 8010c52:	fa02 f606 	lsl.w	r6, r2, r6
 8010c56:	421e      	tst	r6, r3
 8010c58:	bf18      	it	ne
 8010c5a:	4617      	movne	r7, r2
 8010c5c:	f047 0720 	orr.w	r7, r7, #32
 8010c60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010c62:	601c      	str	r4, [r3, #0]
 8010c64:	9b04      	ldr	r3, [sp, #16]
 8010c66:	601d      	str	r5, [r3, #0]
 8010c68:	e695      	b.n	8010996 <__gethex+0x12a>
 8010c6a:	4299      	cmp	r1, r3
 8010c6c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010c70:	d8d8      	bhi.n	8010c24 <__gethex+0x3b8>
 8010c72:	68a3      	ldr	r3, [r4, #8]
 8010c74:	459b      	cmp	fp, r3
 8010c76:	db19      	blt.n	8010cac <__gethex+0x440>
 8010c78:	6861      	ldr	r1, [r4, #4]
 8010c7a:	ee18 0a10 	vmov	r0, s16
 8010c7e:	3101      	adds	r1, #1
 8010c80:	f000 f91a 	bl	8010eb8 <_Balloc>
 8010c84:	4681      	mov	r9, r0
 8010c86:	b918      	cbnz	r0, 8010c90 <__gethex+0x424>
 8010c88:	4b1a      	ldr	r3, [pc, #104]	; (8010cf4 <__gethex+0x488>)
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	2184      	movs	r1, #132	; 0x84
 8010c8e:	e6a8      	b.n	80109e2 <__gethex+0x176>
 8010c90:	6922      	ldr	r2, [r4, #16]
 8010c92:	3202      	adds	r2, #2
 8010c94:	f104 010c 	add.w	r1, r4, #12
 8010c98:	0092      	lsls	r2, r2, #2
 8010c9a:	300c      	adds	r0, #12
 8010c9c:	f7fd fafc 	bl	800e298 <memcpy>
 8010ca0:	4621      	mov	r1, r4
 8010ca2:	ee18 0a10 	vmov	r0, s16
 8010ca6:	f000 f947 	bl	8010f38 <_Bfree>
 8010caa:	464c      	mov	r4, r9
 8010cac:	6923      	ldr	r3, [r4, #16]
 8010cae:	1c5a      	adds	r2, r3, #1
 8010cb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010cb4:	6122      	str	r2, [r4, #16]
 8010cb6:	2201      	movs	r2, #1
 8010cb8:	615a      	str	r2, [r3, #20]
 8010cba:	e7bb      	b.n	8010c34 <__gethex+0x3c8>
 8010cbc:	6922      	ldr	r2, [r4, #16]
 8010cbe:	455a      	cmp	r2, fp
 8010cc0:	dd0b      	ble.n	8010cda <__gethex+0x46e>
 8010cc2:	2101      	movs	r1, #1
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f7ff fd69 	bl	801079c <rshift>
 8010cca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010cce:	3501      	adds	r5, #1
 8010cd0:	42ab      	cmp	r3, r5
 8010cd2:	f6ff aed0 	blt.w	8010a76 <__gethex+0x20a>
 8010cd6:	2701      	movs	r7, #1
 8010cd8:	e7c0      	b.n	8010c5c <__gethex+0x3f0>
 8010cda:	f016 061f 	ands.w	r6, r6, #31
 8010cde:	d0fa      	beq.n	8010cd6 <__gethex+0x46a>
 8010ce0:	449a      	add	sl, r3
 8010ce2:	f1c6 0620 	rsb	r6, r6, #32
 8010ce6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010cea:	f000 f9db 	bl	80110a4 <__hi0bits>
 8010cee:	42b0      	cmp	r0, r6
 8010cf0:	dbe7      	blt.n	8010cc2 <__gethex+0x456>
 8010cf2:	e7f0      	b.n	8010cd6 <__gethex+0x46a>
 8010cf4:	08012f88 	.word	0x08012f88

08010cf8 <L_shift>:
 8010cf8:	f1c2 0208 	rsb	r2, r2, #8
 8010cfc:	0092      	lsls	r2, r2, #2
 8010cfe:	b570      	push	{r4, r5, r6, lr}
 8010d00:	f1c2 0620 	rsb	r6, r2, #32
 8010d04:	6843      	ldr	r3, [r0, #4]
 8010d06:	6804      	ldr	r4, [r0, #0]
 8010d08:	fa03 f506 	lsl.w	r5, r3, r6
 8010d0c:	432c      	orrs	r4, r5
 8010d0e:	40d3      	lsrs	r3, r2
 8010d10:	6004      	str	r4, [r0, #0]
 8010d12:	f840 3f04 	str.w	r3, [r0, #4]!
 8010d16:	4288      	cmp	r0, r1
 8010d18:	d3f4      	bcc.n	8010d04 <L_shift+0xc>
 8010d1a:	bd70      	pop	{r4, r5, r6, pc}

08010d1c <__match>:
 8010d1c:	b530      	push	{r4, r5, lr}
 8010d1e:	6803      	ldr	r3, [r0, #0]
 8010d20:	3301      	adds	r3, #1
 8010d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d26:	b914      	cbnz	r4, 8010d2e <__match+0x12>
 8010d28:	6003      	str	r3, [r0, #0]
 8010d2a:	2001      	movs	r0, #1
 8010d2c:	bd30      	pop	{r4, r5, pc}
 8010d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010d36:	2d19      	cmp	r5, #25
 8010d38:	bf98      	it	ls
 8010d3a:	3220      	addls	r2, #32
 8010d3c:	42a2      	cmp	r2, r4
 8010d3e:	d0f0      	beq.n	8010d22 <__match+0x6>
 8010d40:	2000      	movs	r0, #0
 8010d42:	e7f3      	b.n	8010d2c <__match+0x10>

08010d44 <__hexnan>:
 8010d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d48:	680b      	ldr	r3, [r1, #0]
 8010d4a:	6801      	ldr	r1, [r0, #0]
 8010d4c:	115e      	asrs	r6, r3, #5
 8010d4e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010d52:	f013 031f 	ands.w	r3, r3, #31
 8010d56:	b087      	sub	sp, #28
 8010d58:	bf18      	it	ne
 8010d5a:	3604      	addne	r6, #4
 8010d5c:	2500      	movs	r5, #0
 8010d5e:	1f37      	subs	r7, r6, #4
 8010d60:	4682      	mov	sl, r0
 8010d62:	4690      	mov	r8, r2
 8010d64:	9301      	str	r3, [sp, #4]
 8010d66:	f846 5c04 	str.w	r5, [r6, #-4]
 8010d6a:	46b9      	mov	r9, r7
 8010d6c:	463c      	mov	r4, r7
 8010d6e:	9502      	str	r5, [sp, #8]
 8010d70:	46ab      	mov	fp, r5
 8010d72:	784a      	ldrb	r2, [r1, #1]
 8010d74:	1c4b      	adds	r3, r1, #1
 8010d76:	9303      	str	r3, [sp, #12]
 8010d78:	b342      	cbz	r2, 8010dcc <__hexnan+0x88>
 8010d7a:	4610      	mov	r0, r2
 8010d7c:	9105      	str	r1, [sp, #20]
 8010d7e:	9204      	str	r2, [sp, #16]
 8010d80:	f7ff fd5e 	bl	8010840 <__hexdig_fun>
 8010d84:	2800      	cmp	r0, #0
 8010d86:	d14f      	bne.n	8010e28 <__hexnan+0xe4>
 8010d88:	9a04      	ldr	r2, [sp, #16]
 8010d8a:	9905      	ldr	r1, [sp, #20]
 8010d8c:	2a20      	cmp	r2, #32
 8010d8e:	d818      	bhi.n	8010dc2 <__hexnan+0x7e>
 8010d90:	9b02      	ldr	r3, [sp, #8]
 8010d92:	459b      	cmp	fp, r3
 8010d94:	dd13      	ble.n	8010dbe <__hexnan+0x7a>
 8010d96:	454c      	cmp	r4, r9
 8010d98:	d206      	bcs.n	8010da8 <__hexnan+0x64>
 8010d9a:	2d07      	cmp	r5, #7
 8010d9c:	dc04      	bgt.n	8010da8 <__hexnan+0x64>
 8010d9e:	462a      	mov	r2, r5
 8010da0:	4649      	mov	r1, r9
 8010da2:	4620      	mov	r0, r4
 8010da4:	f7ff ffa8 	bl	8010cf8 <L_shift>
 8010da8:	4544      	cmp	r4, r8
 8010daa:	d950      	bls.n	8010e4e <__hexnan+0x10a>
 8010dac:	2300      	movs	r3, #0
 8010dae:	f1a4 0904 	sub.w	r9, r4, #4
 8010db2:	f844 3c04 	str.w	r3, [r4, #-4]
 8010db6:	f8cd b008 	str.w	fp, [sp, #8]
 8010dba:	464c      	mov	r4, r9
 8010dbc:	461d      	mov	r5, r3
 8010dbe:	9903      	ldr	r1, [sp, #12]
 8010dc0:	e7d7      	b.n	8010d72 <__hexnan+0x2e>
 8010dc2:	2a29      	cmp	r2, #41	; 0x29
 8010dc4:	d156      	bne.n	8010e74 <__hexnan+0x130>
 8010dc6:	3102      	adds	r1, #2
 8010dc8:	f8ca 1000 	str.w	r1, [sl]
 8010dcc:	f1bb 0f00 	cmp.w	fp, #0
 8010dd0:	d050      	beq.n	8010e74 <__hexnan+0x130>
 8010dd2:	454c      	cmp	r4, r9
 8010dd4:	d206      	bcs.n	8010de4 <__hexnan+0xa0>
 8010dd6:	2d07      	cmp	r5, #7
 8010dd8:	dc04      	bgt.n	8010de4 <__hexnan+0xa0>
 8010dda:	462a      	mov	r2, r5
 8010ddc:	4649      	mov	r1, r9
 8010dde:	4620      	mov	r0, r4
 8010de0:	f7ff ff8a 	bl	8010cf8 <L_shift>
 8010de4:	4544      	cmp	r4, r8
 8010de6:	d934      	bls.n	8010e52 <__hexnan+0x10e>
 8010de8:	f1a8 0204 	sub.w	r2, r8, #4
 8010dec:	4623      	mov	r3, r4
 8010dee:	f853 1b04 	ldr.w	r1, [r3], #4
 8010df2:	f842 1f04 	str.w	r1, [r2, #4]!
 8010df6:	429f      	cmp	r7, r3
 8010df8:	d2f9      	bcs.n	8010dee <__hexnan+0xaa>
 8010dfa:	1b3b      	subs	r3, r7, r4
 8010dfc:	f023 0303 	bic.w	r3, r3, #3
 8010e00:	3304      	adds	r3, #4
 8010e02:	3401      	adds	r4, #1
 8010e04:	3e03      	subs	r6, #3
 8010e06:	42b4      	cmp	r4, r6
 8010e08:	bf88      	it	hi
 8010e0a:	2304      	movhi	r3, #4
 8010e0c:	4443      	add	r3, r8
 8010e0e:	2200      	movs	r2, #0
 8010e10:	f843 2b04 	str.w	r2, [r3], #4
 8010e14:	429f      	cmp	r7, r3
 8010e16:	d2fb      	bcs.n	8010e10 <__hexnan+0xcc>
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	b91b      	cbnz	r3, 8010e24 <__hexnan+0xe0>
 8010e1c:	4547      	cmp	r7, r8
 8010e1e:	d127      	bne.n	8010e70 <__hexnan+0x12c>
 8010e20:	2301      	movs	r3, #1
 8010e22:	603b      	str	r3, [r7, #0]
 8010e24:	2005      	movs	r0, #5
 8010e26:	e026      	b.n	8010e76 <__hexnan+0x132>
 8010e28:	3501      	adds	r5, #1
 8010e2a:	2d08      	cmp	r5, #8
 8010e2c:	f10b 0b01 	add.w	fp, fp, #1
 8010e30:	dd06      	ble.n	8010e40 <__hexnan+0xfc>
 8010e32:	4544      	cmp	r4, r8
 8010e34:	d9c3      	bls.n	8010dbe <__hexnan+0x7a>
 8010e36:	2300      	movs	r3, #0
 8010e38:	f844 3c04 	str.w	r3, [r4, #-4]
 8010e3c:	2501      	movs	r5, #1
 8010e3e:	3c04      	subs	r4, #4
 8010e40:	6822      	ldr	r2, [r4, #0]
 8010e42:	f000 000f 	and.w	r0, r0, #15
 8010e46:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010e4a:	6022      	str	r2, [r4, #0]
 8010e4c:	e7b7      	b.n	8010dbe <__hexnan+0x7a>
 8010e4e:	2508      	movs	r5, #8
 8010e50:	e7b5      	b.n	8010dbe <__hexnan+0x7a>
 8010e52:	9b01      	ldr	r3, [sp, #4]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d0df      	beq.n	8010e18 <__hexnan+0xd4>
 8010e58:	f04f 32ff 	mov.w	r2, #4294967295
 8010e5c:	f1c3 0320 	rsb	r3, r3, #32
 8010e60:	fa22 f303 	lsr.w	r3, r2, r3
 8010e64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010e68:	401a      	ands	r2, r3
 8010e6a:	f846 2c04 	str.w	r2, [r6, #-4]
 8010e6e:	e7d3      	b.n	8010e18 <__hexnan+0xd4>
 8010e70:	3f04      	subs	r7, #4
 8010e72:	e7d1      	b.n	8010e18 <__hexnan+0xd4>
 8010e74:	2004      	movs	r0, #4
 8010e76:	b007      	add	sp, #28
 8010e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e7c <_localeconv_r>:
 8010e7c:	4800      	ldr	r0, [pc, #0]	; (8010e80 <_localeconv_r+0x4>)
 8010e7e:	4770      	bx	lr
 8010e80:	20000180 	.word	0x20000180

08010e84 <malloc>:
 8010e84:	4b02      	ldr	r3, [pc, #8]	; (8010e90 <malloc+0xc>)
 8010e86:	4601      	mov	r1, r0
 8010e88:	6818      	ldr	r0, [r3, #0]
 8010e8a:	f000 bd2f 	b.w	80118ec <_malloc_r>
 8010e8e:	bf00      	nop
 8010e90:	20000028 	.word	0x20000028

08010e94 <__ascii_mbtowc>:
 8010e94:	b082      	sub	sp, #8
 8010e96:	b901      	cbnz	r1, 8010e9a <__ascii_mbtowc+0x6>
 8010e98:	a901      	add	r1, sp, #4
 8010e9a:	b142      	cbz	r2, 8010eae <__ascii_mbtowc+0x1a>
 8010e9c:	b14b      	cbz	r3, 8010eb2 <__ascii_mbtowc+0x1e>
 8010e9e:	7813      	ldrb	r3, [r2, #0]
 8010ea0:	600b      	str	r3, [r1, #0]
 8010ea2:	7812      	ldrb	r2, [r2, #0]
 8010ea4:	1e10      	subs	r0, r2, #0
 8010ea6:	bf18      	it	ne
 8010ea8:	2001      	movne	r0, #1
 8010eaa:	b002      	add	sp, #8
 8010eac:	4770      	bx	lr
 8010eae:	4610      	mov	r0, r2
 8010eb0:	e7fb      	b.n	8010eaa <__ascii_mbtowc+0x16>
 8010eb2:	f06f 0001 	mvn.w	r0, #1
 8010eb6:	e7f8      	b.n	8010eaa <__ascii_mbtowc+0x16>

08010eb8 <_Balloc>:
 8010eb8:	b570      	push	{r4, r5, r6, lr}
 8010eba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010ebc:	4604      	mov	r4, r0
 8010ebe:	460d      	mov	r5, r1
 8010ec0:	b976      	cbnz	r6, 8010ee0 <_Balloc+0x28>
 8010ec2:	2010      	movs	r0, #16
 8010ec4:	f7ff ffde 	bl	8010e84 <malloc>
 8010ec8:	4602      	mov	r2, r0
 8010eca:	6260      	str	r0, [r4, #36]	; 0x24
 8010ecc:	b920      	cbnz	r0, 8010ed8 <_Balloc+0x20>
 8010ece:	4b18      	ldr	r3, [pc, #96]	; (8010f30 <_Balloc+0x78>)
 8010ed0:	4818      	ldr	r0, [pc, #96]	; (8010f34 <_Balloc+0x7c>)
 8010ed2:	2166      	movs	r1, #102	; 0x66
 8010ed4:	f7fe fdb8 	bl	800fa48 <__assert_func>
 8010ed8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010edc:	6006      	str	r6, [r0, #0]
 8010ede:	60c6      	str	r6, [r0, #12]
 8010ee0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010ee2:	68f3      	ldr	r3, [r6, #12]
 8010ee4:	b183      	cbz	r3, 8010f08 <_Balloc+0x50>
 8010ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ee8:	68db      	ldr	r3, [r3, #12]
 8010eea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010eee:	b9b8      	cbnz	r0, 8010f20 <_Balloc+0x68>
 8010ef0:	2101      	movs	r1, #1
 8010ef2:	fa01 f605 	lsl.w	r6, r1, r5
 8010ef6:	1d72      	adds	r2, r6, #5
 8010ef8:	0092      	lsls	r2, r2, #2
 8010efa:	4620      	mov	r0, r4
 8010efc:	f000 fc97 	bl	801182e <_calloc_r>
 8010f00:	b160      	cbz	r0, 8010f1c <_Balloc+0x64>
 8010f02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010f06:	e00e      	b.n	8010f26 <_Balloc+0x6e>
 8010f08:	2221      	movs	r2, #33	; 0x21
 8010f0a:	2104      	movs	r1, #4
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	f000 fc8e 	bl	801182e <_calloc_r>
 8010f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f14:	60f0      	str	r0, [r6, #12]
 8010f16:	68db      	ldr	r3, [r3, #12]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d1e4      	bne.n	8010ee6 <_Balloc+0x2e>
 8010f1c:	2000      	movs	r0, #0
 8010f1e:	bd70      	pop	{r4, r5, r6, pc}
 8010f20:	6802      	ldr	r2, [r0, #0]
 8010f22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010f26:	2300      	movs	r3, #0
 8010f28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010f2c:	e7f7      	b.n	8010f1e <_Balloc+0x66>
 8010f2e:	bf00      	nop
 8010f30:	08012e68 	.word	0x08012e68
 8010f34:	08013018 	.word	0x08013018

08010f38 <_Bfree>:
 8010f38:	b570      	push	{r4, r5, r6, lr}
 8010f3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010f3c:	4605      	mov	r5, r0
 8010f3e:	460c      	mov	r4, r1
 8010f40:	b976      	cbnz	r6, 8010f60 <_Bfree+0x28>
 8010f42:	2010      	movs	r0, #16
 8010f44:	f7ff ff9e 	bl	8010e84 <malloc>
 8010f48:	4602      	mov	r2, r0
 8010f4a:	6268      	str	r0, [r5, #36]	; 0x24
 8010f4c:	b920      	cbnz	r0, 8010f58 <_Bfree+0x20>
 8010f4e:	4b09      	ldr	r3, [pc, #36]	; (8010f74 <_Bfree+0x3c>)
 8010f50:	4809      	ldr	r0, [pc, #36]	; (8010f78 <_Bfree+0x40>)
 8010f52:	218a      	movs	r1, #138	; 0x8a
 8010f54:	f7fe fd78 	bl	800fa48 <__assert_func>
 8010f58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f5c:	6006      	str	r6, [r0, #0]
 8010f5e:	60c6      	str	r6, [r0, #12]
 8010f60:	b13c      	cbz	r4, 8010f72 <_Bfree+0x3a>
 8010f62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010f64:	6862      	ldr	r2, [r4, #4]
 8010f66:	68db      	ldr	r3, [r3, #12]
 8010f68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010f6c:	6021      	str	r1, [r4, #0]
 8010f6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010f72:	bd70      	pop	{r4, r5, r6, pc}
 8010f74:	08012e68 	.word	0x08012e68
 8010f78:	08013018 	.word	0x08013018

08010f7c <__multadd>:
 8010f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f80:	690e      	ldr	r6, [r1, #16]
 8010f82:	4607      	mov	r7, r0
 8010f84:	4698      	mov	r8, r3
 8010f86:	460c      	mov	r4, r1
 8010f88:	f101 0014 	add.w	r0, r1, #20
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	6805      	ldr	r5, [r0, #0]
 8010f90:	b2a9      	uxth	r1, r5
 8010f92:	fb02 8101 	mla	r1, r2, r1, r8
 8010f96:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010f9a:	0c2d      	lsrs	r5, r5, #16
 8010f9c:	fb02 c505 	mla	r5, r2, r5, ip
 8010fa0:	b289      	uxth	r1, r1
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010fa8:	429e      	cmp	r6, r3
 8010faa:	f840 1b04 	str.w	r1, [r0], #4
 8010fae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010fb2:	dcec      	bgt.n	8010f8e <__multadd+0x12>
 8010fb4:	f1b8 0f00 	cmp.w	r8, #0
 8010fb8:	d022      	beq.n	8011000 <__multadd+0x84>
 8010fba:	68a3      	ldr	r3, [r4, #8]
 8010fbc:	42b3      	cmp	r3, r6
 8010fbe:	dc19      	bgt.n	8010ff4 <__multadd+0x78>
 8010fc0:	6861      	ldr	r1, [r4, #4]
 8010fc2:	4638      	mov	r0, r7
 8010fc4:	3101      	adds	r1, #1
 8010fc6:	f7ff ff77 	bl	8010eb8 <_Balloc>
 8010fca:	4605      	mov	r5, r0
 8010fcc:	b928      	cbnz	r0, 8010fda <__multadd+0x5e>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	4b0d      	ldr	r3, [pc, #52]	; (8011008 <__multadd+0x8c>)
 8010fd2:	480e      	ldr	r0, [pc, #56]	; (801100c <__multadd+0x90>)
 8010fd4:	21b5      	movs	r1, #181	; 0xb5
 8010fd6:	f7fe fd37 	bl	800fa48 <__assert_func>
 8010fda:	6922      	ldr	r2, [r4, #16]
 8010fdc:	3202      	adds	r2, #2
 8010fde:	f104 010c 	add.w	r1, r4, #12
 8010fe2:	0092      	lsls	r2, r2, #2
 8010fe4:	300c      	adds	r0, #12
 8010fe6:	f7fd f957 	bl	800e298 <memcpy>
 8010fea:	4621      	mov	r1, r4
 8010fec:	4638      	mov	r0, r7
 8010fee:	f7ff ffa3 	bl	8010f38 <_Bfree>
 8010ff2:	462c      	mov	r4, r5
 8010ff4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010ff8:	3601      	adds	r6, #1
 8010ffa:	f8c3 8014 	str.w	r8, [r3, #20]
 8010ffe:	6126      	str	r6, [r4, #16]
 8011000:	4620      	mov	r0, r4
 8011002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011006:	bf00      	nop
 8011008:	08012f88 	.word	0x08012f88
 801100c:	08013018 	.word	0x08013018

08011010 <__s2b>:
 8011010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011014:	460c      	mov	r4, r1
 8011016:	4615      	mov	r5, r2
 8011018:	461f      	mov	r7, r3
 801101a:	2209      	movs	r2, #9
 801101c:	3308      	adds	r3, #8
 801101e:	4606      	mov	r6, r0
 8011020:	fb93 f3f2 	sdiv	r3, r3, r2
 8011024:	2100      	movs	r1, #0
 8011026:	2201      	movs	r2, #1
 8011028:	429a      	cmp	r2, r3
 801102a:	db09      	blt.n	8011040 <__s2b+0x30>
 801102c:	4630      	mov	r0, r6
 801102e:	f7ff ff43 	bl	8010eb8 <_Balloc>
 8011032:	b940      	cbnz	r0, 8011046 <__s2b+0x36>
 8011034:	4602      	mov	r2, r0
 8011036:	4b19      	ldr	r3, [pc, #100]	; (801109c <__s2b+0x8c>)
 8011038:	4819      	ldr	r0, [pc, #100]	; (80110a0 <__s2b+0x90>)
 801103a:	21ce      	movs	r1, #206	; 0xce
 801103c:	f7fe fd04 	bl	800fa48 <__assert_func>
 8011040:	0052      	lsls	r2, r2, #1
 8011042:	3101      	adds	r1, #1
 8011044:	e7f0      	b.n	8011028 <__s2b+0x18>
 8011046:	9b08      	ldr	r3, [sp, #32]
 8011048:	6143      	str	r3, [r0, #20]
 801104a:	2d09      	cmp	r5, #9
 801104c:	f04f 0301 	mov.w	r3, #1
 8011050:	6103      	str	r3, [r0, #16]
 8011052:	dd16      	ble.n	8011082 <__s2b+0x72>
 8011054:	f104 0909 	add.w	r9, r4, #9
 8011058:	46c8      	mov	r8, r9
 801105a:	442c      	add	r4, r5
 801105c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011060:	4601      	mov	r1, r0
 8011062:	3b30      	subs	r3, #48	; 0x30
 8011064:	220a      	movs	r2, #10
 8011066:	4630      	mov	r0, r6
 8011068:	f7ff ff88 	bl	8010f7c <__multadd>
 801106c:	45a0      	cmp	r8, r4
 801106e:	d1f5      	bne.n	801105c <__s2b+0x4c>
 8011070:	f1a5 0408 	sub.w	r4, r5, #8
 8011074:	444c      	add	r4, r9
 8011076:	1b2d      	subs	r5, r5, r4
 8011078:	1963      	adds	r3, r4, r5
 801107a:	42bb      	cmp	r3, r7
 801107c:	db04      	blt.n	8011088 <__s2b+0x78>
 801107e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011082:	340a      	adds	r4, #10
 8011084:	2509      	movs	r5, #9
 8011086:	e7f6      	b.n	8011076 <__s2b+0x66>
 8011088:	f814 3b01 	ldrb.w	r3, [r4], #1
 801108c:	4601      	mov	r1, r0
 801108e:	3b30      	subs	r3, #48	; 0x30
 8011090:	220a      	movs	r2, #10
 8011092:	4630      	mov	r0, r6
 8011094:	f7ff ff72 	bl	8010f7c <__multadd>
 8011098:	e7ee      	b.n	8011078 <__s2b+0x68>
 801109a:	bf00      	nop
 801109c:	08012f88 	.word	0x08012f88
 80110a0:	08013018 	.word	0x08013018

080110a4 <__hi0bits>:
 80110a4:	0c03      	lsrs	r3, r0, #16
 80110a6:	041b      	lsls	r3, r3, #16
 80110a8:	b9d3      	cbnz	r3, 80110e0 <__hi0bits+0x3c>
 80110aa:	0400      	lsls	r0, r0, #16
 80110ac:	2310      	movs	r3, #16
 80110ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80110b2:	bf04      	itt	eq
 80110b4:	0200      	lsleq	r0, r0, #8
 80110b6:	3308      	addeq	r3, #8
 80110b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80110bc:	bf04      	itt	eq
 80110be:	0100      	lsleq	r0, r0, #4
 80110c0:	3304      	addeq	r3, #4
 80110c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80110c6:	bf04      	itt	eq
 80110c8:	0080      	lsleq	r0, r0, #2
 80110ca:	3302      	addeq	r3, #2
 80110cc:	2800      	cmp	r0, #0
 80110ce:	db05      	blt.n	80110dc <__hi0bits+0x38>
 80110d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80110d4:	f103 0301 	add.w	r3, r3, #1
 80110d8:	bf08      	it	eq
 80110da:	2320      	moveq	r3, #32
 80110dc:	4618      	mov	r0, r3
 80110de:	4770      	bx	lr
 80110e0:	2300      	movs	r3, #0
 80110e2:	e7e4      	b.n	80110ae <__hi0bits+0xa>

080110e4 <__lo0bits>:
 80110e4:	6803      	ldr	r3, [r0, #0]
 80110e6:	f013 0207 	ands.w	r2, r3, #7
 80110ea:	4601      	mov	r1, r0
 80110ec:	d00b      	beq.n	8011106 <__lo0bits+0x22>
 80110ee:	07da      	lsls	r2, r3, #31
 80110f0:	d424      	bmi.n	801113c <__lo0bits+0x58>
 80110f2:	0798      	lsls	r0, r3, #30
 80110f4:	bf49      	itett	mi
 80110f6:	085b      	lsrmi	r3, r3, #1
 80110f8:	089b      	lsrpl	r3, r3, #2
 80110fa:	2001      	movmi	r0, #1
 80110fc:	600b      	strmi	r3, [r1, #0]
 80110fe:	bf5c      	itt	pl
 8011100:	600b      	strpl	r3, [r1, #0]
 8011102:	2002      	movpl	r0, #2
 8011104:	4770      	bx	lr
 8011106:	b298      	uxth	r0, r3
 8011108:	b9b0      	cbnz	r0, 8011138 <__lo0bits+0x54>
 801110a:	0c1b      	lsrs	r3, r3, #16
 801110c:	2010      	movs	r0, #16
 801110e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011112:	bf04      	itt	eq
 8011114:	0a1b      	lsreq	r3, r3, #8
 8011116:	3008      	addeq	r0, #8
 8011118:	071a      	lsls	r2, r3, #28
 801111a:	bf04      	itt	eq
 801111c:	091b      	lsreq	r3, r3, #4
 801111e:	3004      	addeq	r0, #4
 8011120:	079a      	lsls	r2, r3, #30
 8011122:	bf04      	itt	eq
 8011124:	089b      	lsreq	r3, r3, #2
 8011126:	3002      	addeq	r0, #2
 8011128:	07da      	lsls	r2, r3, #31
 801112a:	d403      	bmi.n	8011134 <__lo0bits+0x50>
 801112c:	085b      	lsrs	r3, r3, #1
 801112e:	f100 0001 	add.w	r0, r0, #1
 8011132:	d005      	beq.n	8011140 <__lo0bits+0x5c>
 8011134:	600b      	str	r3, [r1, #0]
 8011136:	4770      	bx	lr
 8011138:	4610      	mov	r0, r2
 801113a:	e7e8      	b.n	801110e <__lo0bits+0x2a>
 801113c:	2000      	movs	r0, #0
 801113e:	4770      	bx	lr
 8011140:	2020      	movs	r0, #32
 8011142:	4770      	bx	lr

08011144 <__i2b>:
 8011144:	b510      	push	{r4, lr}
 8011146:	460c      	mov	r4, r1
 8011148:	2101      	movs	r1, #1
 801114a:	f7ff feb5 	bl	8010eb8 <_Balloc>
 801114e:	4602      	mov	r2, r0
 8011150:	b928      	cbnz	r0, 801115e <__i2b+0x1a>
 8011152:	4b05      	ldr	r3, [pc, #20]	; (8011168 <__i2b+0x24>)
 8011154:	4805      	ldr	r0, [pc, #20]	; (801116c <__i2b+0x28>)
 8011156:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801115a:	f7fe fc75 	bl	800fa48 <__assert_func>
 801115e:	2301      	movs	r3, #1
 8011160:	6144      	str	r4, [r0, #20]
 8011162:	6103      	str	r3, [r0, #16]
 8011164:	bd10      	pop	{r4, pc}
 8011166:	bf00      	nop
 8011168:	08012f88 	.word	0x08012f88
 801116c:	08013018 	.word	0x08013018

08011170 <__multiply>:
 8011170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011174:	4614      	mov	r4, r2
 8011176:	690a      	ldr	r2, [r1, #16]
 8011178:	6923      	ldr	r3, [r4, #16]
 801117a:	429a      	cmp	r2, r3
 801117c:	bfb8      	it	lt
 801117e:	460b      	movlt	r3, r1
 8011180:	460d      	mov	r5, r1
 8011182:	bfbc      	itt	lt
 8011184:	4625      	movlt	r5, r4
 8011186:	461c      	movlt	r4, r3
 8011188:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801118c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011190:	68ab      	ldr	r3, [r5, #8]
 8011192:	6869      	ldr	r1, [r5, #4]
 8011194:	eb0a 0709 	add.w	r7, sl, r9
 8011198:	42bb      	cmp	r3, r7
 801119a:	b085      	sub	sp, #20
 801119c:	bfb8      	it	lt
 801119e:	3101      	addlt	r1, #1
 80111a0:	f7ff fe8a 	bl	8010eb8 <_Balloc>
 80111a4:	b930      	cbnz	r0, 80111b4 <__multiply+0x44>
 80111a6:	4602      	mov	r2, r0
 80111a8:	4b42      	ldr	r3, [pc, #264]	; (80112b4 <__multiply+0x144>)
 80111aa:	4843      	ldr	r0, [pc, #268]	; (80112b8 <__multiply+0x148>)
 80111ac:	f240 115d 	movw	r1, #349	; 0x15d
 80111b0:	f7fe fc4a 	bl	800fa48 <__assert_func>
 80111b4:	f100 0614 	add.w	r6, r0, #20
 80111b8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80111bc:	4633      	mov	r3, r6
 80111be:	2200      	movs	r2, #0
 80111c0:	4543      	cmp	r3, r8
 80111c2:	d31e      	bcc.n	8011202 <__multiply+0x92>
 80111c4:	f105 0c14 	add.w	ip, r5, #20
 80111c8:	f104 0314 	add.w	r3, r4, #20
 80111cc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80111d0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80111d4:	9202      	str	r2, [sp, #8]
 80111d6:	ebac 0205 	sub.w	r2, ip, r5
 80111da:	3a15      	subs	r2, #21
 80111dc:	f022 0203 	bic.w	r2, r2, #3
 80111e0:	3204      	adds	r2, #4
 80111e2:	f105 0115 	add.w	r1, r5, #21
 80111e6:	458c      	cmp	ip, r1
 80111e8:	bf38      	it	cc
 80111ea:	2204      	movcc	r2, #4
 80111ec:	9201      	str	r2, [sp, #4]
 80111ee:	9a02      	ldr	r2, [sp, #8]
 80111f0:	9303      	str	r3, [sp, #12]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d808      	bhi.n	8011208 <__multiply+0x98>
 80111f6:	2f00      	cmp	r7, #0
 80111f8:	dc55      	bgt.n	80112a6 <__multiply+0x136>
 80111fa:	6107      	str	r7, [r0, #16]
 80111fc:	b005      	add	sp, #20
 80111fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011202:	f843 2b04 	str.w	r2, [r3], #4
 8011206:	e7db      	b.n	80111c0 <__multiply+0x50>
 8011208:	f8b3 a000 	ldrh.w	sl, [r3]
 801120c:	f1ba 0f00 	cmp.w	sl, #0
 8011210:	d020      	beq.n	8011254 <__multiply+0xe4>
 8011212:	f105 0e14 	add.w	lr, r5, #20
 8011216:	46b1      	mov	r9, r6
 8011218:	2200      	movs	r2, #0
 801121a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801121e:	f8d9 b000 	ldr.w	fp, [r9]
 8011222:	b2a1      	uxth	r1, r4
 8011224:	fa1f fb8b 	uxth.w	fp, fp
 8011228:	fb0a b101 	mla	r1, sl, r1, fp
 801122c:	4411      	add	r1, r2
 801122e:	f8d9 2000 	ldr.w	r2, [r9]
 8011232:	0c24      	lsrs	r4, r4, #16
 8011234:	0c12      	lsrs	r2, r2, #16
 8011236:	fb0a 2404 	mla	r4, sl, r4, r2
 801123a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801123e:	b289      	uxth	r1, r1
 8011240:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011244:	45f4      	cmp	ip, lr
 8011246:	f849 1b04 	str.w	r1, [r9], #4
 801124a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801124e:	d8e4      	bhi.n	801121a <__multiply+0xaa>
 8011250:	9901      	ldr	r1, [sp, #4]
 8011252:	5072      	str	r2, [r6, r1]
 8011254:	9a03      	ldr	r2, [sp, #12]
 8011256:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801125a:	3304      	adds	r3, #4
 801125c:	f1b9 0f00 	cmp.w	r9, #0
 8011260:	d01f      	beq.n	80112a2 <__multiply+0x132>
 8011262:	6834      	ldr	r4, [r6, #0]
 8011264:	f105 0114 	add.w	r1, r5, #20
 8011268:	46b6      	mov	lr, r6
 801126a:	f04f 0a00 	mov.w	sl, #0
 801126e:	880a      	ldrh	r2, [r1, #0]
 8011270:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011274:	fb09 b202 	mla	r2, r9, r2, fp
 8011278:	4492      	add	sl, r2
 801127a:	b2a4      	uxth	r4, r4
 801127c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011280:	f84e 4b04 	str.w	r4, [lr], #4
 8011284:	f851 4b04 	ldr.w	r4, [r1], #4
 8011288:	f8be 2000 	ldrh.w	r2, [lr]
 801128c:	0c24      	lsrs	r4, r4, #16
 801128e:	fb09 2404 	mla	r4, r9, r4, r2
 8011292:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011296:	458c      	cmp	ip, r1
 8011298:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801129c:	d8e7      	bhi.n	801126e <__multiply+0xfe>
 801129e:	9a01      	ldr	r2, [sp, #4]
 80112a0:	50b4      	str	r4, [r6, r2]
 80112a2:	3604      	adds	r6, #4
 80112a4:	e7a3      	b.n	80111ee <__multiply+0x7e>
 80112a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d1a5      	bne.n	80111fa <__multiply+0x8a>
 80112ae:	3f01      	subs	r7, #1
 80112b0:	e7a1      	b.n	80111f6 <__multiply+0x86>
 80112b2:	bf00      	nop
 80112b4:	08012f88 	.word	0x08012f88
 80112b8:	08013018 	.word	0x08013018

080112bc <__pow5mult>:
 80112bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112c0:	4615      	mov	r5, r2
 80112c2:	f012 0203 	ands.w	r2, r2, #3
 80112c6:	4606      	mov	r6, r0
 80112c8:	460f      	mov	r7, r1
 80112ca:	d007      	beq.n	80112dc <__pow5mult+0x20>
 80112cc:	4c25      	ldr	r4, [pc, #148]	; (8011364 <__pow5mult+0xa8>)
 80112ce:	3a01      	subs	r2, #1
 80112d0:	2300      	movs	r3, #0
 80112d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80112d6:	f7ff fe51 	bl	8010f7c <__multadd>
 80112da:	4607      	mov	r7, r0
 80112dc:	10ad      	asrs	r5, r5, #2
 80112de:	d03d      	beq.n	801135c <__pow5mult+0xa0>
 80112e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80112e2:	b97c      	cbnz	r4, 8011304 <__pow5mult+0x48>
 80112e4:	2010      	movs	r0, #16
 80112e6:	f7ff fdcd 	bl	8010e84 <malloc>
 80112ea:	4602      	mov	r2, r0
 80112ec:	6270      	str	r0, [r6, #36]	; 0x24
 80112ee:	b928      	cbnz	r0, 80112fc <__pow5mult+0x40>
 80112f0:	4b1d      	ldr	r3, [pc, #116]	; (8011368 <__pow5mult+0xac>)
 80112f2:	481e      	ldr	r0, [pc, #120]	; (801136c <__pow5mult+0xb0>)
 80112f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80112f8:	f7fe fba6 	bl	800fa48 <__assert_func>
 80112fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011300:	6004      	str	r4, [r0, #0]
 8011302:	60c4      	str	r4, [r0, #12]
 8011304:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011308:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801130c:	b94c      	cbnz	r4, 8011322 <__pow5mult+0x66>
 801130e:	f240 2171 	movw	r1, #625	; 0x271
 8011312:	4630      	mov	r0, r6
 8011314:	f7ff ff16 	bl	8011144 <__i2b>
 8011318:	2300      	movs	r3, #0
 801131a:	f8c8 0008 	str.w	r0, [r8, #8]
 801131e:	4604      	mov	r4, r0
 8011320:	6003      	str	r3, [r0, #0]
 8011322:	f04f 0900 	mov.w	r9, #0
 8011326:	07eb      	lsls	r3, r5, #31
 8011328:	d50a      	bpl.n	8011340 <__pow5mult+0x84>
 801132a:	4639      	mov	r1, r7
 801132c:	4622      	mov	r2, r4
 801132e:	4630      	mov	r0, r6
 8011330:	f7ff ff1e 	bl	8011170 <__multiply>
 8011334:	4639      	mov	r1, r7
 8011336:	4680      	mov	r8, r0
 8011338:	4630      	mov	r0, r6
 801133a:	f7ff fdfd 	bl	8010f38 <_Bfree>
 801133e:	4647      	mov	r7, r8
 8011340:	106d      	asrs	r5, r5, #1
 8011342:	d00b      	beq.n	801135c <__pow5mult+0xa0>
 8011344:	6820      	ldr	r0, [r4, #0]
 8011346:	b938      	cbnz	r0, 8011358 <__pow5mult+0x9c>
 8011348:	4622      	mov	r2, r4
 801134a:	4621      	mov	r1, r4
 801134c:	4630      	mov	r0, r6
 801134e:	f7ff ff0f 	bl	8011170 <__multiply>
 8011352:	6020      	str	r0, [r4, #0]
 8011354:	f8c0 9000 	str.w	r9, [r0]
 8011358:	4604      	mov	r4, r0
 801135a:	e7e4      	b.n	8011326 <__pow5mult+0x6a>
 801135c:	4638      	mov	r0, r7
 801135e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011362:	bf00      	nop
 8011364:	08013168 	.word	0x08013168
 8011368:	08012e68 	.word	0x08012e68
 801136c:	08013018 	.word	0x08013018

08011370 <__lshift>:
 8011370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011374:	460c      	mov	r4, r1
 8011376:	6849      	ldr	r1, [r1, #4]
 8011378:	6923      	ldr	r3, [r4, #16]
 801137a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801137e:	68a3      	ldr	r3, [r4, #8]
 8011380:	4607      	mov	r7, r0
 8011382:	4691      	mov	r9, r2
 8011384:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011388:	f108 0601 	add.w	r6, r8, #1
 801138c:	42b3      	cmp	r3, r6
 801138e:	db0b      	blt.n	80113a8 <__lshift+0x38>
 8011390:	4638      	mov	r0, r7
 8011392:	f7ff fd91 	bl	8010eb8 <_Balloc>
 8011396:	4605      	mov	r5, r0
 8011398:	b948      	cbnz	r0, 80113ae <__lshift+0x3e>
 801139a:	4602      	mov	r2, r0
 801139c:	4b28      	ldr	r3, [pc, #160]	; (8011440 <__lshift+0xd0>)
 801139e:	4829      	ldr	r0, [pc, #164]	; (8011444 <__lshift+0xd4>)
 80113a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80113a4:	f7fe fb50 	bl	800fa48 <__assert_func>
 80113a8:	3101      	adds	r1, #1
 80113aa:	005b      	lsls	r3, r3, #1
 80113ac:	e7ee      	b.n	801138c <__lshift+0x1c>
 80113ae:	2300      	movs	r3, #0
 80113b0:	f100 0114 	add.w	r1, r0, #20
 80113b4:	f100 0210 	add.w	r2, r0, #16
 80113b8:	4618      	mov	r0, r3
 80113ba:	4553      	cmp	r3, sl
 80113bc:	db33      	blt.n	8011426 <__lshift+0xb6>
 80113be:	6920      	ldr	r0, [r4, #16]
 80113c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80113c4:	f104 0314 	add.w	r3, r4, #20
 80113c8:	f019 091f 	ands.w	r9, r9, #31
 80113cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80113d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80113d4:	d02b      	beq.n	801142e <__lshift+0xbe>
 80113d6:	f1c9 0e20 	rsb	lr, r9, #32
 80113da:	468a      	mov	sl, r1
 80113dc:	2200      	movs	r2, #0
 80113de:	6818      	ldr	r0, [r3, #0]
 80113e0:	fa00 f009 	lsl.w	r0, r0, r9
 80113e4:	4302      	orrs	r2, r0
 80113e6:	f84a 2b04 	str.w	r2, [sl], #4
 80113ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80113ee:	459c      	cmp	ip, r3
 80113f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80113f4:	d8f3      	bhi.n	80113de <__lshift+0x6e>
 80113f6:	ebac 0304 	sub.w	r3, ip, r4
 80113fa:	3b15      	subs	r3, #21
 80113fc:	f023 0303 	bic.w	r3, r3, #3
 8011400:	3304      	adds	r3, #4
 8011402:	f104 0015 	add.w	r0, r4, #21
 8011406:	4584      	cmp	ip, r0
 8011408:	bf38      	it	cc
 801140a:	2304      	movcc	r3, #4
 801140c:	50ca      	str	r2, [r1, r3]
 801140e:	b10a      	cbz	r2, 8011414 <__lshift+0xa4>
 8011410:	f108 0602 	add.w	r6, r8, #2
 8011414:	3e01      	subs	r6, #1
 8011416:	4638      	mov	r0, r7
 8011418:	612e      	str	r6, [r5, #16]
 801141a:	4621      	mov	r1, r4
 801141c:	f7ff fd8c 	bl	8010f38 <_Bfree>
 8011420:	4628      	mov	r0, r5
 8011422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011426:	f842 0f04 	str.w	r0, [r2, #4]!
 801142a:	3301      	adds	r3, #1
 801142c:	e7c5      	b.n	80113ba <__lshift+0x4a>
 801142e:	3904      	subs	r1, #4
 8011430:	f853 2b04 	ldr.w	r2, [r3], #4
 8011434:	f841 2f04 	str.w	r2, [r1, #4]!
 8011438:	459c      	cmp	ip, r3
 801143a:	d8f9      	bhi.n	8011430 <__lshift+0xc0>
 801143c:	e7ea      	b.n	8011414 <__lshift+0xa4>
 801143e:	bf00      	nop
 8011440:	08012f88 	.word	0x08012f88
 8011444:	08013018 	.word	0x08013018

08011448 <__mcmp>:
 8011448:	b530      	push	{r4, r5, lr}
 801144a:	6902      	ldr	r2, [r0, #16]
 801144c:	690c      	ldr	r4, [r1, #16]
 801144e:	1b12      	subs	r2, r2, r4
 8011450:	d10e      	bne.n	8011470 <__mcmp+0x28>
 8011452:	f100 0314 	add.w	r3, r0, #20
 8011456:	3114      	adds	r1, #20
 8011458:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801145c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011460:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011464:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011468:	42a5      	cmp	r5, r4
 801146a:	d003      	beq.n	8011474 <__mcmp+0x2c>
 801146c:	d305      	bcc.n	801147a <__mcmp+0x32>
 801146e:	2201      	movs	r2, #1
 8011470:	4610      	mov	r0, r2
 8011472:	bd30      	pop	{r4, r5, pc}
 8011474:	4283      	cmp	r3, r0
 8011476:	d3f3      	bcc.n	8011460 <__mcmp+0x18>
 8011478:	e7fa      	b.n	8011470 <__mcmp+0x28>
 801147a:	f04f 32ff 	mov.w	r2, #4294967295
 801147e:	e7f7      	b.n	8011470 <__mcmp+0x28>

08011480 <__mdiff>:
 8011480:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011484:	460c      	mov	r4, r1
 8011486:	4606      	mov	r6, r0
 8011488:	4611      	mov	r1, r2
 801148a:	4620      	mov	r0, r4
 801148c:	4617      	mov	r7, r2
 801148e:	f7ff ffdb 	bl	8011448 <__mcmp>
 8011492:	1e05      	subs	r5, r0, #0
 8011494:	d110      	bne.n	80114b8 <__mdiff+0x38>
 8011496:	4629      	mov	r1, r5
 8011498:	4630      	mov	r0, r6
 801149a:	f7ff fd0d 	bl	8010eb8 <_Balloc>
 801149e:	b930      	cbnz	r0, 80114ae <__mdiff+0x2e>
 80114a0:	4b39      	ldr	r3, [pc, #228]	; (8011588 <__mdiff+0x108>)
 80114a2:	4602      	mov	r2, r0
 80114a4:	f240 2132 	movw	r1, #562	; 0x232
 80114a8:	4838      	ldr	r0, [pc, #224]	; (801158c <__mdiff+0x10c>)
 80114aa:	f7fe facd 	bl	800fa48 <__assert_func>
 80114ae:	2301      	movs	r3, #1
 80114b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80114b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b8:	bfa4      	itt	ge
 80114ba:	463b      	movge	r3, r7
 80114bc:	4627      	movge	r7, r4
 80114be:	4630      	mov	r0, r6
 80114c0:	6879      	ldr	r1, [r7, #4]
 80114c2:	bfa6      	itte	ge
 80114c4:	461c      	movge	r4, r3
 80114c6:	2500      	movge	r5, #0
 80114c8:	2501      	movlt	r5, #1
 80114ca:	f7ff fcf5 	bl	8010eb8 <_Balloc>
 80114ce:	b920      	cbnz	r0, 80114da <__mdiff+0x5a>
 80114d0:	4b2d      	ldr	r3, [pc, #180]	; (8011588 <__mdiff+0x108>)
 80114d2:	4602      	mov	r2, r0
 80114d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80114d8:	e7e6      	b.n	80114a8 <__mdiff+0x28>
 80114da:	693e      	ldr	r6, [r7, #16]
 80114dc:	60c5      	str	r5, [r0, #12]
 80114de:	6925      	ldr	r5, [r4, #16]
 80114e0:	f107 0114 	add.w	r1, r7, #20
 80114e4:	f104 0914 	add.w	r9, r4, #20
 80114e8:	f100 0e14 	add.w	lr, r0, #20
 80114ec:	f107 0210 	add.w	r2, r7, #16
 80114f0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80114f4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80114f8:	46f2      	mov	sl, lr
 80114fa:	2700      	movs	r7, #0
 80114fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8011500:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011504:	fa1f f883 	uxth.w	r8, r3
 8011508:	fa17 f78b 	uxtah	r7, r7, fp
 801150c:	0c1b      	lsrs	r3, r3, #16
 801150e:	eba7 0808 	sub.w	r8, r7, r8
 8011512:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011516:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801151a:	fa1f f888 	uxth.w	r8, r8
 801151e:	141f      	asrs	r7, r3, #16
 8011520:	454d      	cmp	r5, r9
 8011522:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011526:	f84a 3b04 	str.w	r3, [sl], #4
 801152a:	d8e7      	bhi.n	80114fc <__mdiff+0x7c>
 801152c:	1b2b      	subs	r3, r5, r4
 801152e:	3b15      	subs	r3, #21
 8011530:	f023 0303 	bic.w	r3, r3, #3
 8011534:	3304      	adds	r3, #4
 8011536:	3415      	adds	r4, #21
 8011538:	42a5      	cmp	r5, r4
 801153a:	bf38      	it	cc
 801153c:	2304      	movcc	r3, #4
 801153e:	4419      	add	r1, r3
 8011540:	4473      	add	r3, lr
 8011542:	469e      	mov	lr, r3
 8011544:	460d      	mov	r5, r1
 8011546:	4565      	cmp	r5, ip
 8011548:	d30e      	bcc.n	8011568 <__mdiff+0xe8>
 801154a:	f10c 0203 	add.w	r2, ip, #3
 801154e:	1a52      	subs	r2, r2, r1
 8011550:	f022 0203 	bic.w	r2, r2, #3
 8011554:	3903      	subs	r1, #3
 8011556:	458c      	cmp	ip, r1
 8011558:	bf38      	it	cc
 801155a:	2200      	movcc	r2, #0
 801155c:	441a      	add	r2, r3
 801155e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011562:	b17b      	cbz	r3, 8011584 <__mdiff+0x104>
 8011564:	6106      	str	r6, [r0, #16]
 8011566:	e7a5      	b.n	80114b4 <__mdiff+0x34>
 8011568:	f855 8b04 	ldr.w	r8, [r5], #4
 801156c:	fa17 f488 	uxtah	r4, r7, r8
 8011570:	1422      	asrs	r2, r4, #16
 8011572:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011576:	b2a4      	uxth	r4, r4
 8011578:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801157c:	f84e 4b04 	str.w	r4, [lr], #4
 8011580:	1417      	asrs	r7, r2, #16
 8011582:	e7e0      	b.n	8011546 <__mdiff+0xc6>
 8011584:	3e01      	subs	r6, #1
 8011586:	e7ea      	b.n	801155e <__mdiff+0xde>
 8011588:	08012f88 	.word	0x08012f88
 801158c:	08013018 	.word	0x08013018

08011590 <__ulp>:
 8011590:	b082      	sub	sp, #8
 8011592:	ed8d 0b00 	vstr	d0, [sp]
 8011596:	9b01      	ldr	r3, [sp, #4]
 8011598:	4912      	ldr	r1, [pc, #72]	; (80115e4 <__ulp+0x54>)
 801159a:	4019      	ands	r1, r3
 801159c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80115a0:	2900      	cmp	r1, #0
 80115a2:	dd05      	ble.n	80115b0 <__ulp+0x20>
 80115a4:	2200      	movs	r2, #0
 80115a6:	460b      	mov	r3, r1
 80115a8:	ec43 2b10 	vmov	d0, r2, r3
 80115ac:	b002      	add	sp, #8
 80115ae:	4770      	bx	lr
 80115b0:	4249      	negs	r1, r1
 80115b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80115b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80115ba:	f04f 0200 	mov.w	r2, #0
 80115be:	f04f 0300 	mov.w	r3, #0
 80115c2:	da04      	bge.n	80115ce <__ulp+0x3e>
 80115c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80115c8:	fa41 f300 	asr.w	r3, r1, r0
 80115cc:	e7ec      	b.n	80115a8 <__ulp+0x18>
 80115ce:	f1a0 0114 	sub.w	r1, r0, #20
 80115d2:	291e      	cmp	r1, #30
 80115d4:	bfda      	itte	le
 80115d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80115da:	fa20 f101 	lsrle.w	r1, r0, r1
 80115de:	2101      	movgt	r1, #1
 80115e0:	460a      	mov	r2, r1
 80115e2:	e7e1      	b.n	80115a8 <__ulp+0x18>
 80115e4:	7ff00000 	.word	0x7ff00000

080115e8 <__b2d>:
 80115e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ea:	6905      	ldr	r5, [r0, #16]
 80115ec:	f100 0714 	add.w	r7, r0, #20
 80115f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80115f4:	1f2e      	subs	r6, r5, #4
 80115f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80115fa:	4620      	mov	r0, r4
 80115fc:	f7ff fd52 	bl	80110a4 <__hi0bits>
 8011600:	f1c0 0320 	rsb	r3, r0, #32
 8011604:	280a      	cmp	r0, #10
 8011606:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011684 <__b2d+0x9c>
 801160a:	600b      	str	r3, [r1, #0]
 801160c:	dc14      	bgt.n	8011638 <__b2d+0x50>
 801160e:	f1c0 0e0b 	rsb	lr, r0, #11
 8011612:	fa24 f10e 	lsr.w	r1, r4, lr
 8011616:	42b7      	cmp	r7, r6
 8011618:	ea41 030c 	orr.w	r3, r1, ip
 801161c:	bf34      	ite	cc
 801161e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011622:	2100      	movcs	r1, #0
 8011624:	3015      	adds	r0, #21
 8011626:	fa04 f000 	lsl.w	r0, r4, r0
 801162a:	fa21 f10e 	lsr.w	r1, r1, lr
 801162e:	ea40 0201 	orr.w	r2, r0, r1
 8011632:	ec43 2b10 	vmov	d0, r2, r3
 8011636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011638:	42b7      	cmp	r7, r6
 801163a:	bf3a      	itte	cc
 801163c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011640:	f1a5 0608 	subcc.w	r6, r5, #8
 8011644:	2100      	movcs	r1, #0
 8011646:	380b      	subs	r0, #11
 8011648:	d017      	beq.n	801167a <__b2d+0x92>
 801164a:	f1c0 0c20 	rsb	ip, r0, #32
 801164e:	fa04 f500 	lsl.w	r5, r4, r0
 8011652:	42be      	cmp	r6, r7
 8011654:	fa21 f40c 	lsr.w	r4, r1, ip
 8011658:	ea45 0504 	orr.w	r5, r5, r4
 801165c:	bf8c      	ite	hi
 801165e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011662:	2400      	movls	r4, #0
 8011664:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011668:	fa01 f000 	lsl.w	r0, r1, r0
 801166c:	fa24 f40c 	lsr.w	r4, r4, ip
 8011670:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011674:	ea40 0204 	orr.w	r2, r0, r4
 8011678:	e7db      	b.n	8011632 <__b2d+0x4a>
 801167a:	ea44 030c 	orr.w	r3, r4, ip
 801167e:	460a      	mov	r2, r1
 8011680:	e7d7      	b.n	8011632 <__b2d+0x4a>
 8011682:	bf00      	nop
 8011684:	3ff00000 	.word	0x3ff00000

08011688 <__d2b>:
 8011688:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801168c:	4689      	mov	r9, r1
 801168e:	2101      	movs	r1, #1
 8011690:	ec57 6b10 	vmov	r6, r7, d0
 8011694:	4690      	mov	r8, r2
 8011696:	f7ff fc0f 	bl	8010eb8 <_Balloc>
 801169a:	4604      	mov	r4, r0
 801169c:	b930      	cbnz	r0, 80116ac <__d2b+0x24>
 801169e:	4602      	mov	r2, r0
 80116a0:	4b25      	ldr	r3, [pc, #148]	; (8011738 <__d2b+0xb0>)
 80116a2:	4826      	ldr	r0, [pc, #152]	; (801173c <__d2b+0xb4>)
 80116a4:	f240 310a 	movw	r1, #778	; 0x30a
 80116a8:	f7fe f9ce 	bl	800fa48 <__assert_func>
 80116ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80116b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80116b4:	bb35      	cbnz	r5, 8011704 <__d2b+0x7c>
 80116b6:	2e00      	cmp	r6, #0
 80116b8:	9301      	str	r3, [sp, #4]
 80116ba:	d028      	beq.n	801170e <__d2b+0x86>
 80116bc:	4668      	mov	r0, sp
 80116be:	9600      	str	r6, [sp, #0]
 80116c0:	f7ff fd10 	bl	80110e4 <__lo0bits>
 80116c4:	9900      	ldr	r1, [sp, #0]
 80116c6:	b300      	cbz	r0, 801170a <__d2b+0x82>
 80116c8:	9a01      	ldr	r2, [sp, #4]
 80116ca:	f1c0 0320 	rsb	r3, r0, #32
 80116ce:	fa02 f303 	lsl.w	r3, r2, r3
 80116d2:	430b      	orrs	r3, r1
 80116d4:	40c2      	lsrs	r2, r0
 80116d6:	6163      	str	r3, [r4, #20]
 80116d8:	9201      	str	r2, [sp, #4]
 80116da:	9b01      	ldr	r3, [sp, #4]
 80116dc:	61a3      	str	r3, [r4, #24]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	bf14      	ite	ne
 80116e2:	2202      	movne	r2, #2
 80116e4:	2201      	moveq	r2, #1
 80116e6:	6122      	str	r2, [r4, #16]
 80116e8:	b1d5      	cbz	r5, 8011720 <__d2b+0x98>
 80116ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80116ee:	4405      	add	r5, r0
 80116f0:	f8c9 5000 	str.w	r5, [r9]
 80116f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80116f8:	f8c8 0000 	str.w	r0, [r8]
 80116fc:	4620      	mov	r0, r4
 80116fe:	b003      	add	sp, #12
 8011700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011708:	e7d5      	b.n	80116b6 <__d2b+0x2e>
 801170a:	6161      	str	r1, [r4, #20]
 801170c:	e7e5      	b.n	80116da <__d2b+0x52>
 801170e:	a801      	add	r0, sp, #4
 8011710:	f7ff fce8 	bl	80110e4 <__lo0bits>
 8011714:	9b01      	ldr	r3, [sp, #4]
 8011716:	6163      	str	r3, [r4, #20]
 8011718:	2201      	movs	r2, #1
 801171a:	6122      	str	r2, [r4, #16]
 801171c:	3020      	adds	r0, #32
 801171e:	e7e3      	b.n	80116e8 <__d2b+0x60>
 8011720:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011724:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011728:	f8c9 0000 	str.w	r0, [r9]
 801172c:	6918      	ldr	r0, [r3, #16]
 801172e:	f7ff fcb9 	bl	80110a4 <__hi0bits>
 8011732:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011736:	e7df      	b.n	80116f8 <__d2b+0x70>
 8011738:	08012f88 	.word	0x08012f88
 801173c:	08013018 	.word	0x08013018

08011740 <__ratio>:
 8011740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011744:	4688      	mov	r8, r1
 8011746:	4669      	mov	r1, sp
 8011748:	4681      	mov	r9, r0
 801174a:	f7ff ff4d 	bl	80115e8 <__b2d>
 801174e:	a901      	add	r1, sp, #4
 8011750:	4640      	mov	r0, r8
 8011752:	ec55 4b10 	vmov	r4, r5, d0
 8011756:	f7ff ff47 	bl	80115e8 <__b2d>
 801175a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801175e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011762:	eba3 0c02 	sub.w	ip, r3, r2
 8011766:	e9dd 3200 	ldrd	r3, r2, [sp]
 801176a:	1a9b      	subs	r3, r3, r2
 801176c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011770:	ec51 0b10 	vmov	r0, r1, d0
 8011774:	2b00      	cmp	r3, #0
 8011776:	bfd6      	itet	le
 8011778:	460a      	movle	r2, r1
 801177a:	462a      	movgt	r2, r5
 801177c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011780:	468b      	mov	fp, r1
 8011782:	462f      	mov	r7, r5
 8011784:	bfd4      	ite	le
 8011786:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801178a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801178e:	4620      	mov	r0, r4
 8011790:	ee10 2a10 	vmov	r2, s0
 8011794:	465b      	mov	r3, fp
 8011796:	4639      	mov	r1, r7
 8011798:	f7ef f860 	bl	800085c <__aeabi_ddiv>
 801179c:	ec41 0b10 	vmov	d0, r0, r1
 80117a0:	b003      	add	sp, #12
 80117a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080117a6 <__copybits>:
 80117a6:	3901      	subs	r1, #1
 80117a8:	b570      	push	{r4, r5, r6, lr}
 80117aa:	1149      	asrs	r1, r1, #5
 80117ac:	6914      	ldr	r4, [r2, #16]
 80117ae:	3101      	adds	r1, #1
 80117b0:	f102 0314 	add.w	r3, r2, #20
 80117b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80117b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80117bc:	1f05      	subs	r5, r0, #4
 80117be:	42a3      	cmp	r3, r4
 80117c0:	d30c      	bcc.n	80117dc <__copybits+0x36>
 80117c2:	1aa3      	subs	r3, r4, r2
 80117c4:	3b11      	subs	r3, #17
 80117c6:	f023 0303 	bic.w	r3, r3, #3
 80117ca:	3211      	adds	r2, #17
 80117cc:	42a2      	cmp	r2, r4
 80117ce:	bf88      	it	hi
 80117d0:	2300      	movhi	r3, #0
 80117d2:	4418      	add	r0, r3
 80117d4:	2300      	movs	r3, #0
 80117d6:	4288      	cmp	r0, r1
 80117d8:	d305      	bcc.n	80117e6 <__copybits+0x40>
 80117da:	bd70      	pop	{r4, r5, r6, pc}
 80117dc:	f853 6b04 	ldr.w	r6, [r3], #4
 80117e0:	f845 6f04 	str.w	r6, [r5, #4]!
 80117e4:	e7eb      	b.n	80117be <__copybits+0x18>
 80117e6:	f840 3b04 	str.w	r3, [r0], #4
 80117ea:	e7f4      	b.n	80117d6 <__copybits+0x30>

080117ec <__any_on>:
 80117ec:	f100 0214 	add.w	r2, r0, #20
 80117f0:	6900      	ldr	r0, [r0, #16]
 80117f2:	114b      	asrs	r3, r1, #5
 80117f4:	4298      	cmp	r0, r3
 80117f6:	b510      	push	{r4, lr}
 80117f8:	db11      	blt.n	801181e <__any_on+0x32>
 80117fa:	dd0a      	ble.n	8011812 <__any_on+0x26>
 80117fc:	f011 011f 	ands.w	r1, r1, #31
 8011800:	d007      	beq.n	8011812 <__any_on+0x26>
 8011802:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011806:	fa24 f001 	lsr.w	r0, r4, r1
 801180a:	fa00 f101 	lsl.w	r1, r0, r1
 801180e:	428c      	cmp	r4, r1
 8011810:	d10b      	bne.n	801182a <__any_on+0x3e>
 8011812:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011816:	4293      	cmp	r3, r2
 8011818:	d803      	bhi.n	8011822 <__any_on+0x36>
 801181a:	2000      	movs	r0, #0
 801181c:	bd10      	pop	{r4, pc}
 801181e:	4603      	mov	r3, r0
 8011820:	e7f7      	b.n	8011812 <__any_on+0x26>
 8011822:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011826:	2900      	cmp	r1, #0
 8011828:	d0f5      	beq.n	8011816 <__any_on+0x2a>
 801182a:	2001      	movs	r0, #1
 801182c:	e7f6      	b.n	801181c <__any_on+0x30>

0801182e <_calloc_r>:
 801182e:	b513      	push	{r0, r1, r4, lr}
 8011830:	434a      	muls	r2, r1
 8011832:	4611      	mov	r1, r2
 8011834:	9201      	str	r2, [sp, #4]
 8011836:	f000 f859 	bl	80118ec <_malloc_r>
 801183a:	4604      	mov	r4, r0
 801183c:	b118      	cbz	r0, 8011846 <_calloc_r+0x18>
 801183e:	9a01      	ldr	r2, [sp, #4]
 8011840:	2100      	movs	r1, #0
 8011842:	f7fc fd37 	bl	800e2b4 <memset>
 8011846:	4620      	mov	r0, r4
 8011848:	b002      	add	sp, #8
 801184a:	bd10      	pop	{r4, pc}

0801184c <_free_r>:
 801184c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801184e:	2900      	cmp	r1, #0
 8011850:	d048      	beq.n	80118e4 <_free_r+0x98>
 8011852:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011856:	9001      	str	r0, [sp, #4]
 8011858:	2b00      	cmp	r3, #0
 801185a:	f1a1 0404 	sub.w	r4, r1, #4
 801185e:	bfb8      	it	lt
 8011860:	18e4      	addlt	r4, r4, r3
 8011862:	f000 fe8d 	bl	8012580 <__malloc_lock>
 8011866:	4a20      	ldr	r2, [pc, #128]	; (80118e8 <_free_r+0x9c>)
 8011868:	9801      	ldr	r0, [sp, #4]
 801186a:	6813      	ldr	r3, [r2, #0]
 801186c:	4615      	mov	r5, r2
 801186e:	b933      	cbnz	r3, 801187e <_free_r+0x32>
 8011870:	6063      	str	r3, [r4, #4]
 8011872:	6014      	str	r4, [r2, #0]
 8011874:	b003      	add	sp, #12
 8011876:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801187a:	f000 be87 	b.w	801258c <__malloc_unlock>
 801187e:	42a3      	cmp	r3, r4
 8011880:	d90b      	bls.n	801189a <_free_r+0x4e>
 8011882:	6821      	ldr	r1, [r4, #0]
 8011884:	1862      	adds	r2, r4, r1
 8011886:	4293      	cmp	r3, r2
 8011888:	bf04      	itt	eq
 801188a:	681a      	ldreq	r2, [r3, #0]
 801188c:	685b      	ldreq	r3, [r3, #4]
 801188e:	6063      	str	r3, [r4, #4]
 8011890:	bf04      	itt	eq
 8011892:	1852      	addeq	r2, r2, r1
 8011894:	6022      	streq	r2, [r4, #0]
 8011896:	602c      	str	r4, [r5, #0]
 8011898:	e7ec      	b.n	8011874 <_free_r+0x28>
 801189a:	461a      	mov	r2, r3
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	b10b      	cbz	r3, 80118a4 <_free_r+0x58>
 80118a0:	42a3      	cmp	r3, r4
 80118a2:	d9fa      	bls.n	801189a <_free_r+0x4e>
 80118a4:	6811      	ldr	r1, [r2, #0]
 80118a6:	1855      	adds	r5, r2, r1
 80118a8:	42a5      	cmp	r5, r4
 80118aa:	d10b      	bne.n	80118c4 <_free_r+0x78>
 80118ac:	6824      	ldr	r4, [r4, #0]
 80118ae:	4421      	add	r1, r4
 80118b0:	1854      	adds	r4, r2, r1
 80118b2:	42a3      	cmp	r3, r4
 80118b4:	6011      	str	r1, [r2, #0]
 80118b6:	d1dd      	bne.n	8011874 <_free_r+0x28>
 80118b8:	681c      	ldr	r4, [r3, #0]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	6053      	str	r3, [r2, #4]
 80118be:	4421      	add	r1, r4
 80118c0:	6011      	str	r1, [r2, #0]
 80118c2:	e7d7      	b.n	8011874 <_free_r+0x28>
 80118c4:	d902      	bls.n	80118cc <_free_r+0x80>
 80118c6:	230c      	movs	r3, #12
 80118c8:	6003      	str	r3, [r0, #0]
 80118ca:	e7d3      	b.n	8011874 <_free_r+0x28>
 80118cc:	6825      	ldr	r5, [r4, #0]
 80118ce:	1961      	adds	r1, r4, r5
 80118d0:	428b      	cmp	r3, r1
 80118d2:	bf04      	itt	eq
 80118d4:	6819      	ldreq	r1, [r3, #0]
 80118d6:	685b      	ldreq	r3, [r3, #4]
 80118d8:	6063      	str	r3, [r4, #4]
 80118da:	bf04      	itt	eq
 80118dc:	1949      	addeq	r1, r1, r5
 80118de:	6021      	streq	r1, [r4, #0]
 80118e0:	6054      	str	r4, [r2, #4]
 80118e2:	e7c7      	b.n	8011874 <_free_r+0x28>
 80118e4:	b003      	add	sp, #12
 80118e6:	bd30      	pop	{r4, r5, pc}
 80118e8:	20004c7c 	.word	0x20004c7c

080118ec <_malloc_r>:
 80118ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ee:	1ccd      	adds	r5, r1, #3
 80118f0:	f025 0503 	bic.w	r5, r5, #3
 80118f4:	3508      	adds	r5, #8
 80118f6:	2d0c      	cmp	r5, #12
 80118f8:	bf38      	it	cc
 80118fa:	250c      	movcc	r5, #12
 80118fc:	2d00      	cmp	r5, #0
 80118fe:	4606      	mov	r6, r0
 8011900:	db01      	blt.n	8011906 <_malloc_r+0x1a>
 8011902:	42a9      	cmp	r1, r5
 8011904:	d903      	bls.n	801190e <_malloc_r+0x22>
 8011906:	230c      	movs	r3, #12
 8011908:	6033      	str	r3, [r6, #0]
 801190a:	2000      	movs	r0, #0
 801190c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801190e:	f000 fe37 	bl	8012580 <__malloc_lock>
 8011912:	4921      	ldr	r1, [pc, #132]	; (8011998 <_malloc_r+0xac>)
 8011914:	680a      	ldr	r2, [r1, #0]
 8011916:	4614      	mov	r4, r2
 8011918:	b99c      	cbnz	r4, 8011942 <_malloc_r+0x56>
 801191a:	4f20      	ldr	r7, [pc, #128]	; (801199c <_malloc_r+0xb0>)
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	b923      	cbnz	r3, 801192a <_malloc_r+0x3e>
 8011920:	4621      	mov	r1, r4
 8011922:	4630      	mov	r0, r6
 8011924:	f000 fafc 	bl	8011f20 <_sbrk_r>
 8011928:	6038      	str	r0, [r7, #0]
 801192a:	4629      	mov	r1, r5
 801192c:	4630      	mov	r0, r6
 801192e:	f000 faf7 	bl	8011f20 <_sbrk_r>
 8011932:	1c43      	adds	r3, r0, #1
 8011934:	d123      	bne.n	801197e <_malloc_r+0x92>
 8011936:	230c      	movs	r3, #12
 8011938:	6033      	str	r3, [r6, #0]
 801193a:	4630      	mov	r0, r6
 801193c:	f000 fe26 	bl	801258c <__malloc_unlock>
 8011940:	e7e3      	b.n	801190a <_malloc_r+0x1e>
 8011942:	6823      	ldr	r3, [r4, #0]
 8011944:	1b5b      	subs	r3, r3, r5
 8011946:	d417      	bmi.n	8011978 <_malloc_r+0x8c>
 8011948:	2b0b      	cmp	r3, #11
 801194a:	d903      	bls.n	8011954 <_malloc_r+0x68>
 801194c:	6023      	str	r3, [r4, #0]
 801194e:	441c      	add	r4, r3
 8011950:	6025      	str	r5, [r4, #0]
 8011952:	e004      	b.n	801195e <_malloc_r+0x72>
 8011954:	6863      	ldr	r3, [r4, #4]
 8011956:	42a2      	cmp	r2, r4
 8011958:	bf0c      	ite	eq
 801195a:	600b      	streq	r3, [r1, #0]
 801195c:	6053      	strne	r3, [r2, #4]
 801195e:	4630      	mov	r0, r6
 8011960:	f000 fe14 	bl	801258c <__malloc_unlock>
 8011964:	f104 000b 	add.w	r0, r4, #11
 8011968:	1d23      	adds	r3, r4, #4
 801196a:	f020 0007 	bic.w	r0, r0, #7
 801196e:	1ac2      	subs	r2, r0, r3
 8011970:	d0cc      	beq.n	801190c <_malloc_r+0x20>
 8011972:	1a1b      	subs	r3, r3, r0
 8011974:	50a3      	str	r3, [r4, r2]
 8011976:	e7c9      	b.n	801190c <_malloc_r+0x20>
 8011978:	4622      	mov	r2, r4
 801197a:	6864      	ldr	r4, [r4, #4]
 801197c:	e7cc      	b.n	8011918 <_malloc_r+0x2c>
 801197e:	1cc4      	adds	r4, r0, #3
 8011980:	f024 0403 	bic.w	r4, r4, #3
 8011984:	42a0      	cmp	r0, r4
 8011986:	d0e3      	beq.n	8011950 <_malloc_r+0x64>
 8011988:	1a21      	subs	r1, r4, r0
 801198a:	4630      	mov	r0, r6
 801198c:	f000 fac8 	bl	8011f20 <_sbrk_r>
 8011990:	3001      	adds	r0, #1
 8011992:	d1dd      	bne.n	8011950 <_malloc_r+0x64>
 8011994:	e7cf      	b.n	8011936 <_malloc_r+0x4a>
 8011996:	bf00      	nop
 8011998:	20004c7c 	.word	0x20004c7c
 801199c:	20004c80 	.word	0x20004c80

080119a0 <__ssputs_r>:
 80119a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119a4:	688e      	ldr	r6, [r1, #8]
 80119a6:	429e      	cmp	r6, r3
 80119a8:	4682      	mov	sl, r0
 80119aa:	460c      	mov	r4, r1
 80119ac:	4690      	mov	r8, r2
 80119ae:	461f      	mov	r7, r3
 80119b0:	d838      	bhi.n	8011a24 <__ssputs_r+0x84>
 80119b2:	898a      	ldrh	r2, [r1, #12]
 80119b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80119b8:	d032      	beq.n	8011a20 <__ssputs_r+0x80>
 80119ba:	6825      	ldr	r5, [r4, #0]
 80119bc:	6909      	ldr	r1, [r1, #16]
 80119be:	eba5 0901 	sub.w	r9, r5, r1
 80119c2:	6965      	ldr	r5, [r4, #20]
 80119c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80119c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80119cc:	3301      	adds	r3, #1
 80119ce:	444b      	add	r3, r9
 80119d0:	106d      	asrs	r5, r5, #1
 80119d2:	429d      	cmp	r5, r3
 80119d4:	bf38      	it	cc
 80119d6:	461d      	movcc	r5, r3
 80119d8:	0553      	lsls	r3, r2, #21
 80119da:	d531      	bpl.n	8011a40 <__ssputs_r+0xa0>
 80119dc:	4629      	mov	r1, r5
 80119de:	f7ff ff85 	bl	80118ec <_malloc_r>
 80119e2:	4606      	mov	r6, r0
 80119e4:	b950      	cbnz	r0, 80119fc <__ssputs_r+0x5c>
 80119e6:	230c      	movs	r3, #12
 80119e8:	f8ca 3000 	str.w	r3, [sl]
 80119ec:	89a3      	ldrh	r3, [r4, #12]
 80119ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119f2:	81a3      	strh	r3, [r4, #12]
 80119f4:	f04f 30ff 	mov.w	r0, #4294967295
 80119f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119fc:	6921      	ldr	r1, [r4, #16]
 80119fe:	464a      	mov	r2, r9
 8011a00:	f7fc fc4a 	bl	800e298 <memcpy>
 8011a04:	89a3      	ldrh	r3, [r4, #12]
 8011a06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a0e:	81a3      	strh	r3, [r4, #12]
 8011a10:	6126      	str	r6, [r4, #16]
 8011a12:	6165      	str	r5, [r4, #20]
 8011a14:	444e      	add	r6, r9
 8011a16:	eba5 0509 	sub.w	r5, r5, r9
 8011a1a:	6026      	str	r6, [r4, #0]
 8011a1c:	60a5      	str	r5, [r4, #8]
 8011a1e:	463e      	mov	r6, r7
 8011a20:	42be      	cmp	r6, r7
 8011a22:	d900      	bls.n	8011a26 <__ssputs_r+0x86>
 8011a24:	463e      	mov	r6, r7
 8011a26:	4632      	mov	r2, r6
 8011a28:	6820      	ldr	r0, [r4, #0]
 8011a2a:	4641      	mov	r1, r8
 8011a2c:	f000 fd8e 	bl	801254c <memmove>
 8011a30:	68a3      	ldr	r3, [r4, #8]
 8011a32:	6822      	ldr	r2, [r4, #0]
 8011a34:	1b9b      	subs	r3, r3, r6
 8011a36:	4432      	add	r2, r6
 8011a38:	60a3      	str	r3, [r4, #8]
 8011a3a:	6022      	str	r2, [r4, #0]
 8011a3c:	2000      	movs	r0, #0
 8011a3e:	e7db      	b.n	80119f8 <__ssputs_r+0x58>
 8011a40:	462a      	mov	r2, r5
 8011a42:	f000 fda9 	bl	8012598 <_realloc_r>
 8011a46:	4606      	mov	r6, r0
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	d1e1      	bne.n	8011a10 <__ssputs_r+0x70>
 8011a4c:	6921      	ldr	r1, [r4, #16]
 8011a4e:	4650      	mov	r0, sl
 8011a50:	f7ff fefc 	bl	801184c <_free_r>
 8011a54:	e7c7      	b.n	80119e6 <__ssputs_r+0x46>
	...

08011a58 <_svfiprintf_r>:
 8011a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a5c:	4698      	mov	r8, r3
 8011a5e:	898b      	ldrh	r3, [r1, #12]
 8011a60:	061b      	lsls	r3, r3, #24
 8011a62:	b09d      	sub	sp, #116	; 0x74
 8011a64:	4607      	mov	r7, r0
 8011a66:	460d      	mov	r5, r1
 8011a68:	4614      	mov	r4, r2
 8011a6a:	d50e      	bpl.n	8011a8a <_svfiprintf_r+0x32>
 8011a6c:	690b      	ldr	r3, [r1, #16]
 8011a6e:	b963      	cbnz	r3, 8011a8a <_svfiprintf_r+0x32>
 8011a70:	2140      	movs	r1, #64	; 0x40
 8011a72:	f7ff ff3b 	bl	80118ec <_malloc_r>
 8011a76:	6028      	str	r0, [r5, #0]
 8011a78:	6128      	str	r0, [r5, #16]
 8011a7a:	b920      	cbnz	r0, 8011a86 <_svfiprintf_r+0x2e>
 8011a7c:	230c      	movs	r3, #12
 8011a7e:	603b      	str	r3, [r7, #0]
 8011a80:	f04f 30ff 	mov.w	r0, #4294967295
 8011a84:	e0d1      	b.n	8011c2a <_svfiprintf_r+0x1d2>
 8011a86:	2340      	movs	r3, #64	; 0x40
 8011a88:	616b      	str	r3, [r5, #20]
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8011a8e:	2320      	movs	r3, #32
 8011a90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a98:	2330      	movs	r3, #48	; 0x30
 8011a9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011c44 <_svfiprintf_r+0x1ec>
 8011a9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011aa2:	f04f 0901 	mov.w	r9, #1
 8011aa6:	4623      	mov	r3, r4
 8011aa8:	469a      	mov	sl, r3
 8011aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011aae:	b10a      	cbz	r2, 8011ab4 <_svfiprintf_r+0x5c>
 8011ab0:	2a25      	cmp	r2, #37	; 0x25
 8011ab2:	d1f9      	bne.n	8011aa8 <_svfiprintf_r+0x50>
 8011ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8011ab8:	d00b      	beq.n	8011ad2 <_svfiprintf_r+0x7a>
 8011aba:	465b      	mov	r3, fp
 8011abc:	4622      	mov	r2, r4
 8011abe:	4629      	mov	r1, r5
 8011ac0:	4638      	mov	r0, r7
 8011ac2:	f7ff ff6d 	bl	80119a0 <__ssputs_r>
 8011ac6:	3001      	adds	r0, #1
 8011ac8:	f000 80aa 	beq.w	8011c20 <_svfiprintf_r+0x1c8>
 8011acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ace:	445a      	add	r2, fp
 8011ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8011ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	f000 80a2 	beq.w	8011c20 <_svfiprintf_r+0x1c8>
 8011adc:	2300      	movs	r3, #0
 8011ade:	f04f 32ff 	mov.w	r2, #4294967295
 8011ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ae6:	f10a 0a01 	add.w	sl, sl, #1
 8011aea:	9304      	str	r3, [sp, #16]
 8011aec:	9307      	str	r3, [sp, #28]
 8011aee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011af2:	931a      	str	r3, [sp, #104]	; 0x68
 8011af4:	4654      	mov	r4, sl
 8011af6:	2205      	movs	r2, #5
 8011af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011afc:	4851      	ldr	r0, [pc, #324]	; (8011c44 <_svfiprintf_r+0x1ec>)
 8011afe:	f7ee fb77 	bl	80001f0 <memchr>
 8011b02:	9a04      	ldr	r2, [sp, #16]
 8011b04:	b9d8      	cbnz	r0, 8011b3e <_svfiprintf_r+0xe6>
 8011b06:	06d0      	lsls	r0, r2, #27
 8011b08:	bf44      	itt	mi
 8011b0a:	2320      	movmi	r3, #32
 8011b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b10:	0711      	lsls	r1, r2, #28
 8011b12:	bf44      	itt	mi
 8011b14:	232b      	movmi	r3, #43	; 0x2b
 8011b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8011b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8011b20:	d015      	beq.n	8011b4e <_svfiprintf_r+0xf6>
 8011b22:	9a07      	ldr	r2, [sp, #28]
 8011b24:	4654      	mov	r4, sl
 8011b26:	2000      	movs	r0, #0
 8011b28:	f04f 0c0a 	mov.w	ip, #10
 8011b2c:	4621      	mov	r1, r4
 8011b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b32:	3b30      	subs	r3, #48	; 0x30
 8011b34:	2b09      	cmp	r3, #9
 8011b36:	d94e      	bls.n	8011bd6 <_svfiprintf_r+0x17e>
 8011b38:	b1b0      	cbz	r0, 8011b68 <_svfiprintf_r+0x110>
 8011b3a:	9207      	str	r2, [sp, #28]
 8011b3c:	e014      	b.n	8011b68 <_svfiprintf_r+0x110>
 8011b3e:	eba0 0308 	sub.w	r3, r0, r8
 8011b42:	fa09 f303 	lsl.w	r3, r9, r3
 8011b46:	4313      	orrs	r3, r2
 8011b48:	9304      	str	r3, [sp, #16]
 8011b4a:	46a2      	mov	sl, r4
 8011b4c:	e7d2      	b.n	8011af4 <_svfiprintf_r+0x9c>
 8011b4e:	9b03      	ldr	r3, [sp, #12]
 8011b50:	1d19      	adds	r1, r3, #4
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	9103      	str	r1, [sp, #12]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	bfbb      	ittet	lt
 8011b5a:	425b      	neglt	r3, r3
 8011b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8011b60:	9307      	strge	r3, [sp, #28]
 8011b62:	9307      	strlt	r3, [sp, #28]
 8011b64:	bfb8      	it	lt
 8011b66:	9204      	strlt	r2, [sp, #16]
 8011b68:	7823      	ldrb	r3, [r4, #0]
 8011b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8011b6c:	d10c      	bne.n	8011b88 <_svfiprintf_r+0x130>
 8011b6e:	7863      	ldrb	r3, [r4, #1]
 8011b70:	2b2a      	cmp	r3, #42	; 0x2a
 8011b72:	d135      	bne.n	8011be0 <_svfiprintf_r+0x188>
 8011b74:	9b03      	ldr	r3, [sp, #12]
 8011b76:	1d1a      	adds	r2, r3, #4
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	9203      	str	r2, [sp, #12]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	bfb8      	it	lt
 8011b80:	f04f 33ff 	movlt.w	r3, #4294967295
 8011b84:	3402      	adds	r4, #2
 8011b86:	9305      	str	r3, [sp, #20]
 8011b88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011c54 <_svfiprintf_r+0x1fc>
 8011b8c:	7821      	ldrb	r1, [r4, #0]
 8011b8e:	2203      	movs	r2, #3
 8011b90:	4650      	mov	r0, sl
 8011b92:	f7ee fb2d 	bl	80001f0 <memchr>
 8011b96:	b140      	cbz	r0, 8011baa <_svfiprintf_r+0x152>
 8011b98:	2340      	movs	r3, #64	; 0x40
 8011b9a:	eba0 000a 	sub.w	r0, r0, sl
 8011b9e:	fa03 f000 	lsl.w	r0, r3, r0
 8011ba2:	9b04      	ldr	r3, [sp, #16]
 8011ba4:	4303      	orrs	r3, r0
 8011ba6:	3401      	adds	r4, #1
 8011ba8:	9304      	str	r3, [sp, #16]
 8011baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bae:	4826      	ldr	r0, [pc, #152]	; (8011c48 <_svfiprintf_r+0x1f0>)
 8011bb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011bb4:	2206      	movs	r2, #6
 8011bb6:	f7ee fb1b 	bl	80001f0 <memchr>
 8011bba:	2800      	cmp	r0, #0
 8011bbc:	d038      	beq.n	8011c30 <_svfiprintf_r+0x1d8>
 8011bbe:	4b23      	ldr	r3, [pc, #140]	; (8011c4c <_svfiprintf_r+0x1f4>)
 8011bc0:	bb1b      	cbnz	r3, 8011c0a <_svfiprintf_r+0x1b2>
 8011bc2:	9b03      	ldr	r3, [sp, #12]
 8011bc4:	3307      	adds	r3, #7
 8011bc6:	f023 0307 	bic.w	r3, r3, #7
 8011bca:	3308      	adds	r3, #8
 8011bcc:	9303      	str	r3, [sp, #12]
 8011bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bd0:	4433      	add	r3, r6
 8011bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8011bd4:	e767      	b.n	8011aa6 <_svfiprintf_r+0x4e>
 8011bd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8011bda:	460c      	mov	r4, r1
 8011bdc:	2001      	movs	r0, #1
 8011bde:	e7a5      	b.n	8011b2c <_svfiprintf_r+0xd4>
 8011be0:	2300      	movs	r3, #0
 8011be2:	3401      	adds	r4, #1
 8011be4:	9305      	str	r3, [sp, #20]
 8011be6:	4619      	mov	r1, r3
 8011be8:	f04f 0c0a 	mov.w	ip, #10
 8011bec:	4620      	mov	r0, r4
 8011bee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011bf2:	3a30      	subs	r2, #48	; 0x30
 8011bf4:	2a09      	cmp	r2, #9
 8011bf6:	d903      	bls.n	8011c00 <_svfiprintf_r+0x1a8>
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d0c5      	beq.n	8011b88 <_svfiprintf_r+0x130>
 8011bfc:	9105      	str	r1, [sp, #20]
 8011bfe:	e7c3      	b.n	8011b88 <_svfiprintf_r+0x130>
 8011c00:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c04:	4604      	mov	r4, r0
 8011c06:	2301      	movs	r3, #1
 8011c08:	e7f0      	b.n	8011bec <_svfiprintf_r+0x194>
 8011c0a:	ab03      	add	r3, sp, #12
 8011c0c:	9300      	str	r3, [sp, #0]
 8011c0e:	462a      	mov	r2, r5
 8011c10:	4b0f      	ldr	r3, [pc, #60]	; (8011c50 <_svfiprintf_r+0x1f8>)
 8011c12:	a904      	add	r1, sp, #16
 8011c14:	4638      	mov	r0, r7
 8011c16:	f7fc fbf5 	bl	800e404 <_printf_float>
 8011c1a:	1c42      	adds	r2, r0, #1
 8011c1c:	4606      	mov	r6, r0
 8011c1e:	d1d6      	bne.n	8011bce <_svfiprintf_r+0x176>
 8011c20:	89ab      	ldrh	r3, [r5, #12]
 8011c22:	065b      	lsls	r3, r3, #25
 8011c24:	f53f af2c 	bmi.w	8011a80 <_svfiprintf_r+0x28>
 8011c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c2a:	b01d      	add	sp, #116	; 0x74
 8011c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c30:	ab03      	add	r3, sp, #12
 8011c32:	9300      	str	r3, [sp, #0]
 8011c34:	462a      	mov	r2, r5
 8011c36:	4b06      	ldr	r3, [pc, #24]	; (8011c50 <_svfiprintf_r+0x1f8>)
 8011c38:	a904      	add	r1, sp, #16
 8011c3a:	4638      	mov	r0, r7
 8011c3c:	f7fc fe86 	bl	800e94c <_printf_i>
 8011c40:	e7eb      	b.n	8011c1a <_svfiprintf_r+0x1c2>
 8011c42:	bf00      	nop
 8011c44:	08013174 	.word	0x08013174
 8011c48:	0801317e 	.word	0x0801317e
 8011c4c:	0800e405 	.word	0x0800e405
 8011c50:	080119a1 	.word	0x080119a1
 8011c54:	0801317a 	.word	0x0801317a

08011c58 <__sfputc_r>:
 8011c58:	6893      	ldr	r3, [r2, #8]
 8011c5a:	3b01      	subs	r3, #1
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	b410      	push	{r4}
 8011c60:	6093      	str	r3, [r2, #8]
 8011c62:	da08      	bge.n	8011c76 <__sfputc_r+0x1e>
 8011c64:	6994      	ldr	r4, [r2, #24]
 8011c66:	42a3      	cmp	r3, r4
 8011c68:	db01      	blt.n	8011c6e <__sfputc_r+0x16>
 8011c6a:	290a      	cmp	r1, #10
 8011c6c:	d103      	bne.n	8011c76 <__sfputc_r+0x1e>
 8011c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c72:	f000 b977 	b.w	8011f64 <__swbuf_r>
 8011c76:	6813      	ldr	r3, [r2, #0]
 8011c78:	1c58      	adds	r0, r3, #1
 8011c7a:	6010      	str	r0, [r2, #0]
 8011c7c:	7019      	strb	r1, [r3, #0]
 8011c7e:	4608      	mov	r0, r1
 8011c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c84:	4770      	bx	lr

08011c86 <__sfputs_r>:
 8011c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c88:	4606      	mov	r6, r0
 8011c8a:	460f      	mov	r7, r1
 8011c8c:	4614      	mov	r4, r2
 8011c8e:	18d5      	adds	r5, r2, r3
 8011c90:	42ac      	cmp	r4, r5
 8011c92:	d101      	bne.n	8011c98 <__sfputs_r+0x12>
 8011c94:	2000      	movs	r0, #0
 8011c96:	e007      	b.n	8011ca8 <__sfputs_r+0x22>
 8011c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c9c:	463a      	mov	r2, r7
 8011c9e:	4630      	mov	r0, r6
 8011ca0:	f7ff ffda 	bl	8011c58 <__sfputc_r>
 8011ca4:	1c43      	adds	r3, r0, #1
 8011ca6:	d1f3      	bne.n	8011c90 <__sfputs_r+0xa>
 8011ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011cac <_vfiprintf_r>:
 8011cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cb0:	460d      	mov	r5, r1
 8011cb2:	b09d      	sub	sp, #116	; 0x74
 8011cb4:	4614      	mov	r4, r2
 8011cb6:	4698      	mov	r8, r3
 8011cb8:	4606      	mov	r6, r0
 8011cba:	b118      	cbz	r0, 8011cc4 <_vfiprintf_r+0x18>
 8011cbc:	6983      	ldr	r3, [r0, #24]
 8011cbe:	b90b      	cbnz	r3, 8011cc4 <_vfiprintf_r+0x18>
 8011cc0:	f000 fb40 	bl	8012344 <__sinit>
 8011cc4:	4b89      	ldr	r3, [pc, #548]	; (8011eec <_vfiprintf_r+0x240>)
 8011cc6:	429d      	cmp	r5, r3
 8011cc8:	d11b      	bne.n	8011d02 <_vfiprintf_r+0x56>
 8011cca:	6875      	ldr	r5, [r6, #4]
 8011ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011cce:	07d9      	lsls	r1, r3, #31
 8011cd0:	d405      	bmi.n	8011cde <_vfiprintf_r+0x32>
 8011cd2:	89ab      	ldrh	r3, [r5, #12]
 8011cd4:	059a      	lsls	r2, r3, #22
 8011cd6:	d402      	bmi.n	8011cde <_vfiprintf_r+0x32>
 8011cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011cda:	f000 fbd1 	bl	8012480 <__retarget_lock_acquire_recursive>
 8011cde:	89ab      	ldrh	r3, [r5, #12]
 8011ce0:	071b      	lsls	r3, r3, #28
 8011ce2:	d501      	bpl.n	8011ce8 <_vfiprintf_r+0x3c>
 8011ce4:	692b      	ldr	r3, [r5, #16]
 8011ce6:	b9eb      	cbnz	r3, 8011d24 <_vfiprintf_r+0x78>
 8011ce8:	4629      	mov	r1, r5
 8011cea:	4630      	mov	r0, r6
 8011cec:	f000 f99a 	bl	8012024 <__swsetup_r>
 8011cf0:	b1c0      	cbz	r0, 8011d24 <_vfiprintf_r+0x78>
 8011cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011cf4:	07dc      	lsls	r4, r3, #31
 8011cf6:	d50e      	bpl.n	8011d16 <_vfiprintf_r+0x6a>
 8011cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8011cfc:	b01d      	add	sp, #116	; 0x74
 8011cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d02:	4b7b      	ldr	r3, [pc, #492]	; (8011ef0 <_vfiprintf_r+0x244>)
 8011d04:	429d      	cmp	r5, r3
 8011d06:	d101      	bne.n	8011d0c <_vfiprintf_r+0x60>
 8011d08:	68b5      	ldr	r5, [r6, #8]
 8011d0a:	e7df      	b.n	8011ccc <_vfiprintf_r+0x20>
 8011d0c:	4b79      	ldr	r3, [pc, #484]	; (8011ef4 <_vfiprintf_r+0x248>)
 8011d0e:	429d      	cmp	r5, r3
 8011d10:	bf08      	it	eq
 8011d12:	68f5      	ldreq	r5, [r6, #12]
 8011d14:	e7da      	b.n	8011ccc <_vfiprintf_r+0x20>
 8011d16:	89ab      	ldrh	r3, [r5, #12]
 8011d18:	0598      	lsls	r0, r3, #22
 8011d1a:	d4ed      	bmi.n	8011cf8 <_vfiprintf_r+0x4c>
 8011d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d1e:	f000 fbb0 	bl	8012482 <__retarget_lock_release_recursive>
 8011d22:	e7e9      	b.n	8011cf8 <_vfiprintf_r+0x4c>
 8011d24:	2300      	movs	r3, #0
 8011d26:	9309      	str	r3, [sp, #36]	; 0x24
 8011d28:	2320      	movs	r3, #32
 8011d2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d32:	2330      	movs	r3, #48	; 0x30
 8011d34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011ef8 <_vfiprintf_r+0x24c>
 8011d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d3c:	f04f 0901 	mov.w	r9, #1
 8011d40:	4623      	mov	r3, r4
 8011d42:	469a      	mov	sl, r3
 8011d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d48:	b10a      	cbz	r2, 8011d4e <_vfiprintf_r+0xa2>
 8011d4a:	2a25      	cmp	r2, #37	; 0x25
 8011d4c:	d1f9      	bne.n	8011d42 <_vfiprintf_r+0x96>
 8011d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8011d52:	d00b      	beq.n	8011d6c <_vfiprintf_r+0xc0>
 8011d54:	465b      	mov	r3, fp
 8011d56:	4622      	mov	r2, r4
 8011d58:	4629      	mov	r1, r5
 8011d5a:	4630      	mov	r0, r6
 8011d5c:	f7ff ff93 	bl	8011c86 <__sfputs_r>
 8011d60:	3001      	adds	r0, #1
 8011d62:	f000 80aa 	beq.w	8011eba <_vfiprintf_r+0x20e>
 8011d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d68:	445a      	add	r2, fp
 8011d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8011d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	f000 80a2 	beq.w	8011eba <_vfiprintf_r+0x20e>
 8011d76:	2300      	movs	r3, #0
 8011d78:	f04f 32ff 	mov.w	r2, #4294967295
 8011d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d80:	f10a 0a01 	add.w	sl, sl, #1
 8011d84:	9304      	str	r3, [sp, #16]
 8011d86:	9307      	str	r3, [sp, #28]
 8011d88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d8c:	931a      	str	r3, [sp, #104]	; 0x68
 8011d8e:	4654      	mov	r4, sl
 8011d90:	2205      	movs	r2, #5
 8011d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d96:	4858      	ldr	r0, [pc, #352]	; (8011ef8 <_vfiprintf_r+0x24c>)
 8011d98:	f7ee fa2a 	bl	80001f0 <memchr>
 8011d9c:	9a04      	ldr	r2, [sp, #16]
 8011d9e:	b9d8      	cbnz	r0, 8011dd8 <_vfiprintf_r+0x12c>
 8011da0:	06d1      	lsls	r1, r2, #27
 8011da2:	bf44      	itt	mi
 8011da4:	2320      	movmi	r3, #32
 8011da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011daa:	0713      	lsls	r3, r2, #28
 8011dac:	bf44      	itt	mi
 8011dae:	232b      	movmi	r3, #43	; 0x2b
 8011db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011db4:	f89a 3000 	ldrb.w	r3, [sl]
 8011db8:	2b2a      	cmp	r3, #42	; 0x2a
 8011dba:	d015      	beq.n	8011de8 <_vfiprintf_r+0x13c>
 8011dbc:	9a07      	ldr	r2, [sp, #28]
 8011dbe:	4654      	mov	r4, sl
 8011dc0:	2000      	movs	r0, #0
 8011dc2:	f04f 0c0a 	mov.w	ip, #10
 8011dc6:	4621      	mov	r1, r4
 8011dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011dcc:	3b30      	subs	r3, #48	; 0x30
 8011dce:	2b09      	cmp	r3, #9
 8011dd0:	d94e      	bls.n	8011e70 <_vfiprintf_r+0x1c4>
 8011dd2:	b1b0      	cbz	r0, 8011e02 <_vfiprintf_r+0x156>
 8011dd4:	9207      	str	r2, [sp, #28]
 8011dd6:	e014      	b.n	8011e02 <_vfiprintf_r+0x156>
 8011dd8:	eba0 0308 	sub.w	r3, r0, r8
 8011ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8011de0:	4313      	orrs	r3, r2
 8011de2:	9304      	str	r3, [sp, #16]
 8011de4:	46a2      	mov	sl, r4
 8011de6:	e7d2      	b.n	8011d8e <_vfiprintf_r+0xe2>
 8011de8:	9b03      	ldr	r3, [sp, #12]
 8011dea:	1d19      	adds	r1, r3, #4
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	9103      	str	r1, [sp, #12]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	bfbb      	ittet	lt
 8011df4:	425b      	neglt	r3, r3
 8011df6:	f042 0202 	orrlt.w	r2, r2, #2
 8011dfa:	9307      	strge	r3, [sp, #28]
 8011dfc:	9307      	strlt	r3, [sp, #28]
 8011dfe:	bfb8      	it	lt
 8011e00:	9204      	strlt	r2, [sp, #16]
 8011e02:	7823      	ldrb	r3, [r4, #0]
 8011e04:	2b2e      	cmp	r3, #46	; 0x2e
 8011e06:	d10c      	bne.n	8011e22 <_vfiprintf_r+0x176>
 8011e08:	7863      	ldrb	r3, [r4, #1]
 8011e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8011e0c:	d135      	bne.n	8011e7a <_vfiprintf_r+0x1ce>
 8011e0e:	9b03      	ldr	r3, [sp, #12]
 8011e10:	1d1a      	adds	r2, r3, #4
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	9203      	str	r2, [sp, #12]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	bfb8      	it	lt
 8011e1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e1e:	3402      	adds	r4, #2
 8011e20:	9305      	str	r3, [sp, #20]
 8011e22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011f08 <_vfiprintf_r+0x25c>
 8011e26:	7821      	ldrb	r1, [r4, #0]
 8011e28:	2203      	movs	r2, #3
 8011e2a:	4650      	mov	r0, sl
 8011e2c:	f7ee f9e0 	bl	80001f0 <memchr>
 8011e30:	b140      	cbz	r0, 8011e44 <_vfiprintf_r+0x198>
 8011e32:	2340      	movs	r3, #64	; 0x40
 8011e34:	eba0 000a 	sub.w	r0, r0, sl
 8011e38:	fa03 f000 	lsl.w	r0, r3, r0
 8011e3c:	9b04      	ldr	r3, [sp, #16]
 8011e3e:	4303      	orrs	r3, r0
 8011e40:	3401      	adds	r4, #1
 8011e42:	9304      	str	r3, [sp, #16]
 8011e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e48:	482c      	ldr	r0, [pc, #176]	; (8011efc <_vfiprintf_r+0x250>)
 8011e4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e4e:	2206      	movs	r2, #6
 8011e50:	f7ee f9ce 	bl	80001f0 <memchr>
 8011e54:	2800      	cmp	r0, #0
 8011e56:	d03f      	beq.n	8011ed8 <_vfiprintf_r+0x22c>
 8011e58:	4b29      	ldr	r3, [pc, #164]	; (8011f00 <_vfiprintf_r+0x254>)
 8011e5a:	bb1b      	cbnz	r3, 8011ea4 <_vfiprintf_r+0x1f8>
 8011e5c:	9b03      	ldr	r3, [sp, #12]
 8011e5e:	3307      	adds	r3, #7
 8011e60:	f023 0307 	bic.w	r3, r3, #7
 8011e64:	3308      	adds	r3, #8
 8011e66:	9303      	str	r3, [sp, #12]
 8011e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e6a:	443b      	add	r3, r7
 8011e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8011e6e:	e767      	b.n	8011d40 <_vfiprintf_r+0x94>
 8011e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e74:	460c      	mov	r4, r1
 8011e76:	2001      	movs	r0, #1
 8011e78:	e7a5      	b.n	8011dc6 <_vfiprintf_r+0x11a>
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	3401      	adds	r4, #1
 8011e7e:	9305      	str	r3, [sp, #20]
 8011e80:	4619      	mov	r1, r3
 8011e82:	f04f 0c0a 	mov.w	ip, #10
 8011e86:	4620      	mov	r0, r4
 8011e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e8c:	3a30      	subs	r2, #48	; 0x30
 8011e8e:	2a09      	cmp	r2, #9
 8011e90:	d903      	bls.n	8011e9a <_vfiprintf_r+0x1ee>
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d0c5      	beq.n	8011e22 <_vfiprintf_r+0x176>
 8011e96:	9105      	str	r1, [sp, #20]
 8011e98:	e7c3      	b.n	8011e22 <_vfiprintf_r+0x176>
 8011e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e9e:	4604      	mov	r4, r0
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	e7f0      	b.n	8011e86 <_vfiprintf_r+0x1da>
 8011ea4:	ab03      	add	r3, sp, #12
 8011ea6:	9300      	str	r3, [sp, #0]
 8011ea8:	462a      	mov	r2, r5
 8011eaa:	4b16      	ldr	r3, [pc, #88]	; (8011f04 <_vfiprintf_r+0x258>)
 8011eac:	a904      	add	r1, sp, #16
 8011eae:	4630      	mov	r0, r6
 8011eb0:	f7fc faa8 	bl	800e404 <_printf_float>
 8011eb4:	4607      	mov	r7, r0
 8011eb6:	1c78      	adds	r0, r7, #1
 8011eb8:	d1d6      	bne.n	8011e68 <_vfiprintf_r+0x1bc>
 8011eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ebc:	07d9      	lsls	r1, r3, #31
 8011ebe:	d405      	bmi.n	8011ecc <_vfiprintf_r+0x220>
 8011ec0:	89ab      	ldrh	r3, [r5, #12]
 8011ec2:	059a      	lsls	r2, r3, #22
 8011ec4:	d402      	bmi.n	8011ecc <_vfiprintf_r+0x220>
 8011ec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ec8:	f000 fadb 	bl	8012482 <__retarget_lock_release_recursive>
 8011ecc:	89ab      	ldrh	r3, [r5, #12]
 8011ece:	065b      	lsls	r3, r3, #25
 8011ed0:	f53f af12 	bmi.w	8011cf8 <_vfiprintf_r+0x4c>
 8011ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ed6:	e711      	b.n	8011cfc <_vfiprintf_r+0x50>
 8011ed8:	ab03      	add	r3, sp, #12
 8011eda:	9300      	str	r3, [sp, #0]
 8011edc:	462a      	mov	r2, r5
 8011ede:	4b09      	ldr	r3, [pc, #36]	; (8011f04 <_vfiprintf_r+0x258>)
 8011ee0:	a904      	add	r1, sp, #16
 8011ee2:	4630      	mov	r0, r6
 8011ee4:	f7fc fd32 	bl	800e94c <_printf_i>
 8011ee8:	e7e4      	b.n	8011eb4 <_vfiprintf_r+0x208>
 8011eea:	bf00      	nop
 8011eec:	080132a8 	.word	0x080132a8
 8011ef0:	080132c8 	.word	0x080132c8
 8011ef4:	08013288 	.word	0x08013288
 8011ef8:	08013174 	.word	0x08013174
 8011efc:	0801317e 	.word	0x0801317e
 8011f00:	0800e405 	.word	0x0800e405
 8011f04:	08011c87 	.word	0x08011c87
 8011f08:	0801317a 	.word	0x0801317a
 8011f0c:	00000000 	.word	0x00000000

08011f10 <nan>:
 8011f10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011f18 <nan+0x8>
 8011f14:	4770      	bx	lr
 8011f16:	bf00      	nop
 8011f18:	00000000 	.word	0x00000000
 8011f1c:	7ff80000 	.word	0x7ff80000

08011f20 <_sbrk_r>:
 8011f20:	b538      	push	{r3, r4, r5, lr}
 8011f22:	4d06      	ldr	r5, [pc, #24]	; (8011f3c <_sbrk_r+0x1c>)
 8011f24:	2300      	movs	r3, #0
 8011f26:	4604      	mov	r4, r0
 8011f28:	4608      	mov	r0, r1
 8011f2a:	602b      	str	r3, [r5, #0]
 8011f2c:	f7f1 f8c8 	bl	80030c0 <_sbrk>
 8011f30:	1c43      	adds	r3, r0, #1
 8011f32:	d102      	bne.n	8011f3a <_sbrk_r+0x1a>
 8011f34:	682b      	ldr	r3, [r5, #0]
 8011f36:	b103      	cbz	r3, 8011f3a <_sbrk_r+0x1a>
 8011f38:	6023      	str	r3, [r4, #0]
 8011f3a:	bd38      	pop	{r3, r4, r5, pc}
 8011f3c:	200059b4 	.word	0x200059b4

08011f40 <strncmp>:
 8011f40:	b510      	push	{r4, lr}
 8011f42:	b16a      	cbz	r2, 8011f60 <strncmp+0x20>
 8011f44:	3901      	subs	r1, #1
 8011f46:	1884      	adds	r4, r0, r2
 8011f48:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011f4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011f50:	4293      	cmp	r3, r2
 8011f52:	d103      	bne.n	8011f5c <strncmp+0x1c>
 8011f54:	42a0      	cmp	r0, r4
 8011f56:	d001      	beq.n	8011f5c <strncmp+0x1c>
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d1f5      	bne.n	8011f48 <strncmp+0x8>
 8011f5c:	1a98      	subs	r0, r3, r2
 8011f5e:	bd10      	pop	{r4, pc}
 8011f60:	4610      	mov	r0, r2
 8011f62:	e7fc      	b.n	8011f5e <strncmp+0x1e>

08011f64 <__swbuf_r>:
 8011f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f66:	460e      	mov	r6, r1
 8011f68:	4614      	mov	r4, r2
 8011f6a:	4605      	mov	r5, r0
 8011f6c:	b118      	cbz	r0, 8011f76 <__swbuf_r+0x12>
 8011f6e:	6983      	ldr	r3, [r0, #24]
 8011f70:	b90b      	cbnz	r3, 8011f76 <__swbuf_r+0x12>
 8011f72:	f000 f9e7 	bl	8012344 <__sinit>
 8011f76:	4b21      	ldr	r3, [pc, #132]	; (8011ffc <__swbuf_r+0x98>)
 8011f78:	429c      	cmp	r4, r3
 8011f7a:	d12b      	bne.n	8011fd4 <__swbuf_r+0x70>
 8011f7c:	686c      	ldr	r4, [r5, #4]
 8011f7e:	69a3      	ldr	r3, [r4, #24]
 8011f80:	60a3      	str	r3, [r4, #8]
 8011f82:	89a3      	ldrh	r3, [r4, #12]
 8011f84:	071a      	lsls	r2, r3, #28
 8011f86:	d52f      	bpl.n	8011fe8 <__swbuf_r+0x84>
 8011f88:	6923      	ldr	r3, [r4, #16]
 8011f8a:	b36b      	cbz	r3, 8011fe8 <__swbuf_r+0x84>
 8011f8c:	6923      	ldr	r3, [r4, #16]
 8011f8e:	6820      	ldr	r0, [r4, #0]
 8011f90:	1ac0      	subs	r0, r0, r3
 8011f92:	6963      	ldr	r3, [r4, #20]
 8011f94:	b2f6      	uxtb	r6, r6
 8011f96:	4283      	cmp	r3, r0
 8011f98:	4637      	mov	r7, r6
 8011f9a:	dc04      	bgt.n	8011fa6 <__swbuf_r+0x42>
 8011f9c:	4621      	mov	r1, r4
 8011f9e:	4628      	mov	r0, r5
 8011fa0:	f000 f93c 	bl	801221c <_fflush_r>
 8011fa4:	bb30      	cbnz	r0, 8011ff4 <__swbuf_r+0x90>
 8011fa6:	68a3      	ldr	r3, [r4, #8]
 8011fa8:	3b01      	subs	r3, #1
 8011faa:	60a3      	str	r3, [r4, #8]
 8011fac:	6823      	ldr	r3, [r4, #0]
 8011fae:	1c5a      	adds	r2, r3, #1
 8011fb0:	6022      	str	r2, [r4, #0]
 8011fb2:	701e      	strb	r6, [r3, #0]
 8011fb4:	6963      	ldr	r3, [r4, #20]
 8011fb6:	3001      	adds	r0, #1
 8011fb8:	4283      	cmp	r3, r0
 8011fba:	d004      	beq.n	8011fc6 <__swbuf_r+0x62>
 8011fbc:	89a3      	ldrh	r3, [r4, #12]
 8011fbe:	07db      	lsls	r3, r3, #31
 8011fc0:	d506      	bpl.n	8011fd0 <__swbuf_r+0x6c>
 8011fc2:	2e0a      	cmp	r6, #10
 8011fc4:	d104      	bne.n	8011fd0 <__swbuf_r+0x6c>
 8011fc6:	4621      	mov	r1, r4
 8011fc8:	4628      	mov	r0, r5
 8011fca:	f000 f927 	bl	801221c <_fflush_r>
 8011fce:	b988      	cbnz	r0, 8011ff4 <__swbuf_r+0x90>
 8011fd0:	4638      	mov	r0, r7
 8011fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fd4:	4b0a      	ldr	r3, [pc, #40]	; (8012000 <__swbuf_r+0x9c>)
 8011fd6:	429c      	cmp	r4, r3
 8011fd8:	d101      	bne.n	8011fde <__swbuf_r+0x7a>
 8011fda:	68ac      	ldr	r4, [r5, #8]
 8011fdc:	e7cf      	b.n	8011f7e <__swbuf_r+0x1a>
 8011fde:	4b09      	ldr	r3, [pc, #36]	; (8012004 <__swbuf_r+0xa0>)
 8011fe0:	429c      	cmp	r4, r3
 8011fe2:	bf08      	it	eq
 8011fe4:	68ec      	ldreq	r4, [r5, #12]
 8011fe6:	e7ca      	b.n	8011f7e <__swbuf_r+0x1a>
 8011fe8:	4621      	mov	r1, r4
 8011fea:	4628      	mov	r0, r5
 8011fec:	f000 f81a 	bl	8012024 <__swsetup_r>
 8011ff0:	2800      	cmp	r0, #0
 8011ff2:	d0cb      	beq.n	8011f8c <__swbuf_r+0x28>
 8011ff4:	f04f 37ff 	mov.w	r7, #4294967295
 8011ff8:	e7ea      	b.n	8011fd0 <__swbuf_r+0x6c>
 8011ffa:	bf00      	nop
 8011ffc:	080132a8 	.word	0x080132a8
 8012000:	080132c8 	.word	0x080132c8
 8012004:	08013288 	.word	0x08013288

08012008 <__ascii_wctomb>:
 8012008:	b149      	cbz	r1, 801201e <__ascii_wctomb+0x16>
 801200a:	2aff      	cmp	r2, #255	; 0xff
 801200c:	bf85      	ittet	hi
 801200e:	238a      	movhi	r3, #138	; 0x8a
 8012010:	6003      	strhi	r3, [r0, #0]
 8012012:	700a      	strbls	r2, [r1, #0]
 8012014:	f04f 30ff 	movhi.w	r0, #4294967295
 8012018:	bf98      	it	ls
 801201a:	2001      	movls	r0, #1
 801201c:	4770      	bx	lr
 801201e:	4608      	mov	r0, r1
 8012020:	4770      	bx	lr
	...

08012024 <__swsetup_r>:
 8012024:	4b32      	ldr	r3, [pc, #200]	; (80120f0 <__swsetup_r+0xcc>)
 8012026:	b570      	push	{r4, r5, r6, lr}
 8012028:	681d      	ldr	r5, [r3, #0]
 801202a:	4606      	mov	r6, r0
 801202c:	460c      	mov	r4, r1
 801202e:	b125      	cbz	r5, 801203a <__swsetup_r+0x16>
 8012030:	69ab      	ldr	r3, [r5, #24]
 8012032:	b913      	cbnz	r3, 801203a <__swsetup_r+0x16>
 8012034:	4628      	mov	r0, r5
 8012036:	f000 f985 	bl	8012344 <__sinit>
 801203a:	4b2e      	ldr	r3, [pc, #184]	; (80120f4 <__swsetup_r+0xd0>)
 801203c:	429c      	cmp	r4, r3
 801203e:	d10f      	bne.n	8012060 <__swsetup_r+0x3c>
 8012040:	686c      	ldr	r4, [r5, #4]
 8012042:	89a3      	ldrh	r3, [r4, #12]
 8012044:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012048:	0719      	lsls	r1, r3, #28
 801204a:	d42c      	bmi.n	80120a6 <__swsetup_r+0x82>
 801204c:	06dd      	lsls	r5, r3, #27
 801204e:	d411      	bmi.n	8012074 <__swsetup_r+0x50>
 8012050:	2309      	movs	r3, #9
 8012052:	6033      	str	r3, [r6, #0]
 8012054:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012058:	81a3      	strh	r3, [r4, #12]
 801205a:	f04f 30ff 	mov.w	r0, #4294967295
 801205e:	e03e      	b.n	80120de <__swsetup_r+0xba>
 8012060:	4b25      	ldr	r3, [pc, #148]	; (80120f8 <__swsetup_r+0xd4>)
 8012062:	429c      	cmp	r4, r3
 8012064:	d101      	bne.n	801206a <__swsetup_r+0x46>
 8012066:	68ac      	ldr	r4, [r5, #8]
 8012068:	e7eb      	b.n	8012042 <__swsetup_r+0x1e>
 801206a:	4b24      	ldr	r3, [pc, #144]	; (80120fc <__swsetup_r+0xd8>)
 801206c:	429c      	cmp	r4, r3
 801206e:	bf08      	it	eq
 8012070:	68ec      	ldreq	r4, [r5, #12]
 8012072:	e7e6      	b.n	8012042 <__swsetup_r+0x1e>
 8012074:	0758      	lsls	r0, r3, #29
 8012076:	d512      	bpl.n	801209e <__swsetup_r+0x7a>
 8012078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801207a:	b141      	cbz	r1, 801208e <__swsetup_r+0x6a>
 801207c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012080:	4299      	cmp	r1, r3
 8012082:	d002      	beq.n	801208a <__swsetup_r+0x66>
 8012084:	4630      	mov	r0, r6
 8012086:	f7ff fbe1 	bl	801184c <_free_r>
 801208a:	2300      	movs	r3, #0
 801208c:	6363      	str	r3, [r4, #52]	; 0x34
 801208e:	89a3      	ldrh	r3, [r4, #12]
 8012090:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012094:	81a3      	strh	r3, [r4, #12]
 8012096:	2300      	movs	r3, #0
 8012098:	6063      	str	r3, [r4, #4]
 801209a:	6923      	ldr	r3, [r4, #16]
 801209c:	6023      	str	r3, [r4, #0]
 801209e:	89a3      	ldrh	r3, [r4, #12]
 80120a0:	f043 0308 	orr.w	r3, r3, #8
 80120a4:	81a3      	strh	r3, [r4, #12]
 80120a6:	6923      	ldr	r3, [r4, #16]
 80120a8:	b94b      	cbnz	r3, 80120be <__swsetup_r+0x9a>
 80120aa:	89a3      	ldrh	r3, [r4, #12]
 80120ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80120b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120b4:	d003      	beq.n	80120be <__swsetup_r+0x9a>
 80120b6:	4621      	mov	r1, r4
 80120b8:	4630      	mov	r0, r6
 80120ba:	f000 fa07 	bl	80124cc <__smakebuf_r>
 80120be:	89a0      	ldrh	r0, [r4, #12]
 80120c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80120c4:	f010 0301 	ands.w	r3, r0, #1
 80120c8:	d00a      	beq.n	80120e0 <__swsetup_r+0xbc>
 80120ca:	2300      	movs	r3, #0
 80120cc:	60a3      	str	r3, [r4, #8]
 80120ce:	6963      	ldr	r3, [r4, #20]
 80120d0:	425b      	negs	r3, r3
 80120d2:	61a3      	str	r3, [r4, #24]
 80120d4:	6923      	ldr	r3, [r4, #16]
 80120d6:	b943      	cbnz	r3, 80120ea <__swsetup_r+0xc6>
 80120d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80120dc:	d1ba      	bne.n	8012054 <__swsetup_r+0x30>
 80120de:	bd70      	pop	{r4, r5, r6, pc}
 80120e0:	0781      	lsls	r1, r0, #30
 80120e2:	bf58      	it	pl
 80120e4:	6963      	ldrpl	r3, [r4, #20]
 80120e6:	60a3      	str	r3, [r4, #8]
 80120e8:	e7f4      	b.n	80120d4 <__swsetup_r+0xb0>
 80120ea:	2000      	movs	r0, #0
 80120ec:	e7f7      	b.n	80120de <__swsetup_r+0xba>
 80120ee:	bf00      	nop
 80120f0:	20000028 	.word	0x20000028
 80120f4:	080132a8 	.word	0x080132a8
 80120f8:	080132c8 	.word	0x080132c8
 80120fc:	08013288 	.word	0x08013288

08012100 <abort>:
 8012100:	b508      	push	{r3, lr}
 8012102:	2006      	movs	r0, #6
 8012104:	f000 fa96 	bl	8012634 <raise>
 8012108:	2001      	movs	r0, #1
 801210a:	f7f0 ff61 	bl	8002fd0 <_exit>
	...

08012110 <__sflush_r>:
 8012110:	898a      	ldrh	r2, [r1, #12]
 8012112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012116:	4605      	mov	r5, r0
 8012118:	0710      	lsls	r0, r2, #28
 801211a:	460c      	mov	r4, r1
 801211c:	d458      	bmi.n	80121d0 <__sflush_r+0xc0>
 801211e:	684b      	ldr	r3, [r1, #4]
 8012120:	2b00      	cmp	r3, #0
 8012122:	dc05      	bgt.n	8012130 <__sflush_r+0x20>
 8012124:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012126:	2b00      	cmp	r3, #0
 8012128:	dc02      	bgt.n	8012130 <__sflush_r+0x20>
 801212a:	2000      	movs	r0, #0
 801212c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012130:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012132:	2e00      	cmp	r6, #0
 8012134:	d0f9      	beq.n	801212a <__sflush_r+0x1a>
 8012136:	2300      	movs	r3, #0
 8012138:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801213c:	682f      	ldr	r7, [r5, #0]
 801213e:	602b      	str	r3, [r5, #0]
 8012140:	d032      	beq.n	80121a8 <__sflush_r+0x98>
 8012142:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012144:	89a3      	ldrh	r3, [r4, #12]
 8012146:	075a      	lsls	r2, r3, #29
 8012148:	d505      	bpl.n	8012156 <__sflush_r+0x46>
 801214a:	6863      	ldr	r3, [r4, #4]
 801214c:	1ac0      	subs	r0, r0, r3
 801214e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012150:	b10b      	cbz	r3, 8012156 <__sflush_r+0x46>
 8012152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012154:	1ac0      	subs	r0, r0, r3
 8012156:	2300      	movs	r3, #0
 8012158:	4602      	mov	r2, r0
 801215a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801215c:	6a21      	ldr	r1, [r4, #32]
 801215e:	4628      	mov	r0, r5
 8012160:	47b0      	blx	r6
 8012162:	1c43      	adds	r3, r0, #1
 8012164:	89a3      	ldrh	r3, [r4, #12]
 8012166:	d106      	bne.n	8012176 <__sflush_r+0x66>
 8012168:	6829      	ldr	r1, [r5, #0]
 801216a:	291d      	cmp	r1, #29
 801216c:	d82c      	bhi.n	80121c8 <__sflush_r+0xb8>
 801216e:	4a2a      	ldr	r2, [pc, #168]	; (8012218 <__sflush_r+0x108>)
 8012170:	40ca      	lsrs	r2, r1
 8012172:	07d6      	lsls	r6, r2, #31
 8012174:	d528      	bpl.n	80121c8 <__sflush_r+0xb8>
 8012176:	2200      	movs	r2, #0
 8012178:	6062      	str	r2, [r4, #4]
 801217a:	04d9      	lsls	r1, r3, #19
 801217c:	6922      	ldr	r2, [r4, #16]
 801217e:	6022      	str	r2, [r4, #0]
 8012180:	d504      	bpl.n	801218c <__sflush_r+0x7c>
 8012182:	1c42      	adds	r2, r0, #1
 8012184:	d101      	bne.n	801218a <__sflush_r+0x7a>
 8012186:	682b      	ldr	r3, [r5, #0]
 8012188:	b903      	cbnz	r3, 801218c <__sflush_r+0x7c>
 801218a:	6560      	str	r0, [r4, #84]	; 0x54
 801218c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801218e:	602f      	str	r7, [r5, #0]
 8012190:	2900      	cmp	r1, #0
 8012192:	d0ca      	beq.n	801212a <__sflush_r+0x1a>
 8012194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012198:	4299      	cmp	r1, r3
 801219a:	d002      	beq.n	80121a2 <__sflush_r+0x92>
 801219c:	4628      	mov	r0, r5
 801219e:	f7ff fb55 	bl	801184c <_free_r>
 80121a2:	2000      	movs	r0, #0
 80121a4:	6360      	str	r0, [r4, #52]	; 0x34
 80121a6:	e7c1      	b.n	801212c <__sflush_r+0x1c>
 80121a8:	6a21      	ldr	r1, [r4, #32]
 80121aa:	2301      	movs	r3, #1
 80121ac:	4628      	mov	r0, r5
 80121ae:	47b0      	blx	r6
 80121b0:	1c41      	adds	r1, r0, #1
 80121b2:	d1c7      	bne.n	8012144 <__sflush_r+0x34>
 80121b4:	682b      	ldr	r3, [r5, #0]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d0c4      	beq.n	8012144 <__sflush_r+0x34>
 80121ba:	2b1d      	cmp	r3, #29
 80121bc:	d001      	beq.n	80121c2 <__sflush_r+0xb2>
 80121be:	2b16      	cmp	r3, #22
 80121c0:	d101      	bne.n	80121c6 <__sflush_r+0xb6>
 80121c2:	602f      	str	r7, [r5, #0]
 80121c4:	e7b1      	b.n	801212a <__sflush_r+0x1a>
 80121c6:	89a3      	ldrh	r3, [r4, #12]
 80121c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121cc:	81a3      	strh	r3, [r4, #12]
 80121ce:	e7ad      	b.n	801212c <__sflush_r+0x1c>
 80121d0:	690f      	ldr	r7, [r1, #16]
 80121d2:	2f00      	cmp	r7, #0
 80121d4:	d0a9      	beq.n	801212a <__sflush_r+0x1a>
 80121d6:	0793      	lsls	r3, r2, #30
 80121d8:	680e      	ldr	r6, [r1, #0]
 80121da:	bf08      	it	eq
 80121dc:	694b      	ldreq	r3, [r1, #20]
 80121de:	600f      	str	r7, [r1, #0]
 80121e0:	bf18      	it	ne
 80121e2:	2300      	movne	r3, #0
 80121e4:	eba6 0807 	sub.w	r8, r6, r7
 80121e8:	608b      	str	r3, [r1, #8]
 80121ea:	f1b8 0f00 	cmp.w	r8, #0
 80121ee:	dd9c      	ble.n	801212a <__sflush_r+0x1a>
 80121f0:	6a21      	ldr	r1, [r4, #32]
 80121f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80121f4:	4643      	mov	r3, r8
 80121f6:	463a      	mov	r2, r7
 80121f8:	4628      	mov	r0, r5
 80121fa:	47b0      	blx	r6
 80121fc:	2800      	cmp	r0, #0
 80121fe:	dc06      	bgt.n	801220e <__sflush_r+0xfe>
 8012200:	89a3      	ldrh	r3, [r4, #12]
 8012202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012206:	81a3      	strh	r3, [r4, #12]
 8012208:	f04f 30ff 	mov.w	r0, #4294967295
 801220c:	e78e      	b.n	801212c <__sflush_r+0x1c>
 801220e:	4407      	add	r7, r0
 8012210:	eba8 0800 	sub.w	r8, r8, r0
 8012214:	e7e9      	b.n	80121ea <__sflush_r+0xda>
 8012216:	bf00      	nop
 8012218:	20400001 	.word	0x20400001

0801221c <_fflush_r>:
 801221c:	b538      	push	{r3, r4, r5, lr}
 801221e:	690b      	ldr	r3, [r1, #16]
 8012220:	4605      	mov	r5, r0
 8012222:	460c      	mov	r4, r1
 8012224:	b913      	cbnz	r3, 801222c <_fflush_r+0x10>
 8012226:	2500      	movs	r5, #0
 8012228:	4628      	mov	r0, r5
 801222a:	bd38      	pop	{r3, r4, r5, pc}
 801222c:	b118      	cbz	r0, 8012236 <_fflush_r+0x1a>
 801222e:	6983      	ldr	r3, [r0, #24]
 8012230:	b90b      	cbnz	r3, 8012236 <_fflush_r+0x1a>
 8012232:	f000 f887 	bl	8012344 <__sinit>
 8012236:	4b14      	ldr	r3, [pc, #80]	; (8012288 <_fflush_r+0x6c>)
 8012238:	429c      	cmp	r4, r3
 801223a:	d11b      	bne.n	8012274 <_fflush_r+0x58>
 801223c:	686c      	ldr	r4, [r5, #4]
 801223e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d0ef      	beq.n	8012226 <_fflush_r+0xa>
 8012246:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012248:	07d0      	lsls	r0, r2, #31
 801224a:	d404      	bmi.n	8012256 <_fflush_r+0x3a>
 801224c:	0599      	lsls	r1, r3, #22
 801224e:	d402      	bmi.n	8012256 <_fflush_r+0x3a>
 8012250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012252:	f000 f915 	bl	8012480 <__retarget_lock_acquire_recursive>
 8012256:	4628      	mov	r0, r5
 8012258:	4621      	mov	r1, r4
 801225a:	f7ff ff59 	bl	8012110 <__sflush_r>
 801225e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012260:	07da      	lsls	r2, r3, #31
 8012262:	4605      	mov	r5, r0
 8012264:	d4e0      	bmi.n	8012228 <_fflush_r+0xc>
 8012266:	89a3      	ldrh	r3, [r4, #12]
 8012268:	059b      	lsls	r3, r3, #22
 801226a:	d4dd      	bmi.n	8012228 <_fflush_r+0xc>
 801226c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801226e:	f000 f908 	bl	8012482 <__retarget_lock_release_recursive>
 8012272:	e7d9      	b.n	8012228 <_fflush_r+0xc>
 8012274:	4b05      	ldr	r3, [pc, #20]	; (801228c <_fflush_r+0x70>)
 8012276:	429c      	cmp	r4, r3
 8012278:	d101      	bne.n	801227e <_fflush_r+0x62>
 801227a:	68ac      	ldr	r4, [r5, #8]
 801227c:	e7df      	b.n	801223e <_fflush_r+0x22>
 801227e:	4b04      	ldr	r3, [pc, #16]	; (8012290 <_fflush_r+0x74>)
 8012280:	429c      	cmp	r4, r3
 8012282:	bf08      	it	eq
 8012284:	68ec      	ldreq	r4, [r5, #12]
 8012286:	e7da      	b.n	801223e <_fflush_r+0x22>
 8012288:	080132a8 	.word	0x080132a8
 801228c:	080132c8 	.word	0x080132c8
 8012290:	08013288 	.word	0x08013288

08012294 <std>:
 8012294:	2300      	movs	r3, #0
 8012296:	b510      	push	{r4, lr}
 8012298:	4604      	mov	r4, r0
 801229a:	e9c0 3300 	strd	r3, r3, [r0]
 801229e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80122a2:	6083      	str	r3, [r0, #8]
 80122a4:	8181      	strh	r1, [r0, #12]
 80122a6:	6643      	str	r3, [r0, #100]	; 0x64
 80122a8:	81c2      	strh	r2, [r0, #14]
 80122aa:	6183      	str	r3, [r0, #24]
 80122ac:	4619      	mov	r1, r3
 80122ae:	2208      	movs	r2, #8
 80122b0:	305c      	adds	r0, #92	; 0x5c
 80122b2:	f7fb ffff 	bl	800e2b4 <memset>
 80122b6:	4b05      	ldr	r3, [pc, #20]	; (80122cc <std+0x38>)
 80122b8:	6263      	str	r3, [r4, #36]	; 0x24
 80122ba:	4b05      	ldr	r3, [pc, #20]	; (80122d0 <std+0x3c>)
 80122bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80122be:	4b05      	ldr	r3, [pc, #20]	; (80122d4 <std+0x40>)
 80122c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80122c2:	4b05      	ldr	r3, [pc, #20]	; (80122d8 <std+0x44>)
 80122c4:	6224      	str	r4, [r4, #32]
 80122c6:	6323      	str	r3, [r4, #48]	; 0x30
 80122c8:	bd10      	pop	{r4, pc}
 80122ca:	bf00      	nop
 80122cc:	0801266d 	.word	0x0801266d
 80122d0:	0801268f 	.word	0x0801268f
 80122d4:	080126c7 	.word	0x080126c7
 80122d8:	080126eb 	.word	0x080126eb

080122dc <_cleanup_r>:
 80122dc:	4901      	ldr	r1, [pc, #4]	; (80122e4 <_cleanup_r+0x8>)
 80122de:	f000 b8af 	b.w	8012440 <_fwalk_reent>
 80122e2:	bf00      	nop
 80122e4:	0801221d 	.word	0x0801221d

080122e8 <__sfmoreglue>:
 80122e8:	b570      	push	{r4, r5, r6, lr}
 80122ea:	1e4a      	subs	r2, r1, #1
 80122ec:	2568      	movs	r5, #104	; 0x68
 80122ee:	4355      	muls	r5, r2
 80122f0:	460e      	mov	r6, r1
 80122f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80122f6:	f7ff faf9 	bl	80118ec <_malloc_r>
 80122fa:	4604      	mov	r4, r0
 80122fc:	b140      	cbz	r0, 8012310 <__sfmoreglue+0x28>
 80122fe:	2100      	movs	r1, #0
 8012300:	e9c0 1600 	strd	r1, r6, [r0]
 8012304:	300c      	adds	r0, #12
 8012306:	60a0      	str	r0, [r4, #8]
 8012308:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801230c:	f7fb ffd2 	bl	800e2b4 <memset>
 8012310:	4620      	mov	r0, r4
 8012312:	bd70      	pop	{r4, r5, r6, pc}

08012314 <__sfp_lock_acquire>:
 8012314:	4801      	ldr	r0, [pc, #4]	; (801231c <__sfp_lock_acquire+0x8>)
 8012316:	f000 b8b3 	b.w	8012480 <__retarget_lock_acquire_recursive>
 801231a:	bf00      	nop
 801231c:	200059b0 	.word	0x200059b0

08012320 <__sfp_lock_release>:
 8012320:	4801      	ldr	r0, [pc, #4]	; (8012328 <__sfp_lock_release+0x8>)
 8012322:	f000 b8ae 	b.w	8012482 <__retarget_lock_release_recursive>
 8012326:	bf00      	nop
 8012328:	200059b0 	.word	0x200059b0

0801232c <__sinit_lock_acquire>:
 801232c:	4801      	ldr	r0, [pc, #4]	; (8012334 <__sinit_lock_acquire+0x8>)
 801232e:	f000 b8a7 	b.w	8012480 <__retarget_lock_acquire_recursive>
 8012332:	bf00      	nop
 8012334:	200059ab 	.word	0x200059ab

08012338 <__sinit_lock_release>:
 8012338:	4801      	ldr	r0, [pc, #4]	; (8012340 <__sinit_lock_release+0x8>)
 801233a:	f000 b8a2 	b.w	8012482 <__retarget_lock_release_recursive>
 801233e:	bf00      	nop
 8012340:	200059ab 	.word	0x200059ab

08012344 <__sinit>:
 8012344:	b510      	push	{r4, lr}
 8012346:	4604      	mov	r4, r0
 8012348:	f7ff fff0 	bl	801232c <__sinit_lock_acquire>
 801234c:	69a3      	ldr	r3, [r4, #24]
 801234e:	b11b      	cbz	r3, 8012358 <__sinit+0x14>
 8012350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012354:	f7ff bff0 	b.w	8012338 <__sinit_lock_release>
 8012358:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801235c:	6523      	str	r3, [r4, #80]	; 0x50
 801235e:	4b13      	ldr	r3, [pc, #76]	; (80123ac <__sinit+0x68>)
 8012360:	4a13      	ldr	r2, [pc, #76]	; (80123b0 <__sinit+0x6c>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	62a2      	str	r2, [r4, #40]	; 0x28
 8012366:	42a3      	cmp	r3, r4
 8012368:	bf04      	itt	eq
 801236a:	2301      	moveq	r3, #1
 801236c:	61a3      	streq	r3, [r4, #24]
 801236e:	4620      	mov	r0, r4
 8012370:	f000 f820 	bl	80123b4 <__sfp>
 8012374:	6060      	str	r0, [r4, #4]
 8012376:	4620      	mov	r0, r4
 8012378:	f000 f81c 	bl	80123b4 <__sfp>
 801237c:	60a0      	str	r0, [r4, #8]
 801237e:	4620      	mov	r0, r4
 8012380:	f000 f818 	bl	80123b4 <__sfp>
 8012384:	2200      	movs	r2, #0
 8012386:	60e0      	str	r0, [r4, #12]
 8012388:	2104      	movs	r1, #4
 801238a:	6860      	ldr	r0, [r4, #4]
 801238c:	f7ff ff82 	bl	8012294 <std>
 8012390:	68a0      	ldr	r0, [r4, #8]
 8012392:	2201      	movs	r2, #1
 8012394:	2109      	movs	r1, #9
 8012396:	f7ff ff7d 	bl	8012294 <std>
 801239a:	68e0      	ldr	r0, [r4, #12]
 801239c:	2202      	movs	r2, #2
 801239e:	2112      	movs	r1, #18
 80123a0:	f7ff ff78 	bl	8012294 <std>
 80123a4:	2301      	movs	r3, #1
 80123a6:	61a3      	str	r3, [r4, #24]
 80123a8:	e7d2      	b.n	8012350 <__sinit+0xc>
 80123aa:	bf00      	nop
 80123ac:	08012de0 	.word	0x08012de0
 80123b0:	080122dd 	.word	0x080122dd

080123b4 <__sfp>:
 80123b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123b6:	4607      	mov	r7, r0
 80123b8:	f7ff ffac 	bl	8012314 <__sfp_lock_acquire>
 80123bc:	4b1e      	ldr	r3, [pc, #120]	; (8012438 <__sfp+0x84>)
 80123be:	681e      	ldr	r6, [r3, #0]
 80123c0:	69b3      	ldr	r3, [r6, #24]
 80123c2:	b913      	cbnz	r3, 80123ca <__sfp+0x16>
 80123c4:	4630      	mov	r0, r6
 80123c6:	f7ff ffbd 	bl	8012344 <__sinit>
 80123ca:	3648      	adds	r6, #72	; 0x48
 80123cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80123d0:	3b01      	subs	r3, #1
 80123d2:	d503      	bpl.n	80123dc <__sfp+0x28>
 80123d4:	6833      	ldr	r3, [r6, #0]
 80123d6:	b30b      	cbz	r3, 801241c <__sfp+0x68>
 80123d8:	6836      	ldr	r6, [r6, #0]
 80123da:	e7f7      	b.n	80123cc <__sfp+0x18>
 80123dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80123e0:	b9d5      	cbnz	r5, 8012418 <__sfp+0x64>
 80123e2:	4b16      	ldr	r3, [pc, #88]	; (801243c <__sfp+0x88>)
 80123e4:	60e3      	str	r3, [r4, #12]
 80123e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80123ea:	6665      	str	r5, [r4, #100]	; 0x64
 80123ec:	f000 f847 	bl	801247e <__retarget_lock_init_recursive>
 80123f0:	f7ff ff96 	bl	8012320 <__sfp_lock_release>
 80123f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80123f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80123fc:	6025      	str	r5, [r4, #0]
 80123fe:	61a5      	str	r5, [r4, #24]
 8012400:	2208      	movs	r2, #8
 8012402:	4629      	mov	r1, r5
 8012404:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012408:	f7fb ff54 	bl	800e2b4 <memset>
 801240c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012410:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012414:	4620      	mov	r0, r4
 8012416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012418:	3468      	adds	r4, #104	; 0x68
 801241a:	e7d9      	b.n	80123d0 <__sfp+0x1c>
 801241c:	2104      	movs	r1, #4
 801241e:	4638      	mov	r0, r7
 8012420:	f7ff ff62 	bl	80122e8 <__sfmoreglue>
 8012424:	4604      	mov	r4, r0
 8012426:	6030      	str	r0, [r6, #0]
 8012428:	2800      	cmp	r0, #0
 801242a:	d1d5      	bne.n	80123d8 <__sfp+0x24>
 801242c:	f7ff ff78 	bl	8012320 <__sfp_lock_release>
 8012430:	230c      	movs	r3, #12
 8012432:	603b      	str	r3, [r7, #0]
 8012434:	e7ee      	b.n	8012414 <__sfp+0x60>
 8012436:	bf00      	nop
 8012438:	08012de0 	.word	0x08012de0
 801243c:	ffff0001 	.word	0xffff0001

08012440 <_fwalk_reent>:
 8012440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012444:	4606      	mov	r6, r0
 8012446:	4688      	mov	r8, r1
 8012448:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801244c:	2700      	movs	r7, #0
 801244e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012452:	f1b9 0901 	subs.w	r9, r9, #1
 8012456:	d505      	bpl.n	8012464 <_fwalk_reent+0x24>
 8012458:	6824      	ldr	r4, [r4, #0]
 801245a:	2c00      	cmp	r4, #0
 801245c:	d1f7      	bne.n	801244e <_fwalk_reent+0xe>
 801245e:	4638      	mov	r0, r7
 8012460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012464:	89ab      	ldrh	r3, [r5, #12]
 8012466:	2b01      	cmp	r3, #1
 8012468:	d907      	bls.n	801247a <_fwalk_reent+0x3a>
 801246a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801246e:	3301      	adds	r3, #1
 8012470:	d003      	beq.n	801247a <_fwalk_reent+0x3a>
 8012472:	4629      	mov	r1, r5
 8012474:	4630      	mov	r0, r6
 8012476:	47c0      	blx	r8
 8012478:	4307      	orrs	r7, r0
 801247a:	3568      	adds	r5, #104	; 0x68
 801247c:	e7e9      	b.n	8012452 <_fwalk_reent+0x12>

0801247e <__retarget_lock_init_recursive>:
 801247e:	4770      	bx	lr

08012480 <__retarget_lock_acquire_recursive>:
 8012480:	4770      	bx	lr

08012482 <__retarget_lock_release_recursive>:
 8012482:	4770      	bx	lr

08012484 <__swhatbuf_r>:
 8012484:	b570      	push	{r4, r5, r6, lr}
 8012486:	460e      	mov	r6, r1
 8012488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801248c:	2900      	cmp	r1, #0
 801248e:	b096      	sub	sp, #88	; 0x58
 8012490:	4614      	mov	r4, r2
 8012492:	461d      	mov	r5, r3
 8012494:	da07      	bge.n	80124a6 <__swhatbuf_r+0x22>
 8012496:	2300      	movs	r3, #0
 8012498:	602b      	str	r3, [r5, #0]
 801249a:	89b3      	ldrh	r3, [r6, #12]
 801249c:	061a      	lsls	r2, r3, #24
 801249e:	d410      	bmi.n	80124c2 <__swhatbuf_r+0x3e>
 80124a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124a4:	e00e      	b.n	80124c4 <__swhatbuf_r+0x40>
 80124a6:	466a      	mov	r2, sp
 80124a8:	f000 f946 	bl	8012738 <_fstat_r>
 80124ac:	2800      	cmp	r0, #0
 80124ae:	dbf2      	blt.n	8012496 <__swhatbuf_r+0x12>
 80124b0:	9a01      	ldr	r2, [sp, #4]
 80124b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80124b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80124ba:	425a      	negs	r2, r3
 80124bc:	415a      	adcs	r2, r3
 80124be:	602a      	str	r2, [r5, #0]
 80124c0:	e7ee      	b.n	80124a0 <__swhatbuf_r+0x1c>
 80124c2:	2340      	movs	r3, #64	; 0x40
 80124c4:	2000      	movs	r0, #0
 80124c6:	6023      	str	r3, [r4, #0]
 80124c8:	b016      	add	sp, #88	; 0x58
 80124ca:	bd70      	pop	{r4, r5, r6, pc}

080124cc <__smakebuf_r>:
 80124cc:	898b      	ldrh	r3, [r1, #12]
 80124ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80124d0:	079d      	lsls	r5, r3, #30
 80124d2:	4606      	mov	r6, r0
 80124d4:	460c      	mov	r4, r1
 80124d6:	d507      	bpl.n	80124e8 <__smakebuf_r+0x1c>
 80124d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80124dc:	6023      	str	r3, [r4, #0]
 80124de:	6123      	str	r3, [r4, #16]
 80124e0:	2301      	movs	r3, #1
 80124e2:	6163      	str	r3, [r4, #20]
 80124e4:	b002      	add	sp, #8
 80124e6:	bd70      	pop	{r4, r5, r6, pc}
 80124e8:	ab01      	add	r3, sp, #4
 80124ea:	466a      	mov	r2, sp
 80124ec:	f7ff ffca 	bl	8012484 <__swhatbuf_r>
 80124f0:	9900      	ldr	r1, [sp, #0]
 80124f2:	4605      	mov	r5, r0
 80124f4:	4630      	mov	r0, r6
 80124f6:	f7ff f9f9 	bl	80118ec <_malloc_r>
 80124fa:	b948      	cbnz	r0, 8012510 <__smakebuf_r+0x44>
 80124fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012500:	059a      	lsls	r2, r3, #22
 8012502:	d4ef      	bmi.n	80124e4 <__smakebuf_r+0x18>
 8012504:	f023 0303 	bic.w	r3, r3, #3
 8012508:	f043 0302 	orr.w	r3, r3, #2
 801250c:	81a3      	strh	r3, [r4, #12]
 801250e:	e7e3      	b.n	80124d8 <__smakebuf_r+0xc>
 8012510:	4b0d      	ldr	r3, [pc, #52]	; (8012548 <__smakebuf_r+0x7c>)
 8012512:	62b3      	str	r3, [r6, #40]	; 0x28
 8012514:	89a3      	ldrh	r3, [r4, #12]
 8012516:	6020      	str	r0, [r4, #0]
 8012518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801251c:	81a3      	strh	r3, [r4, #12]
 801251e:	9b00      	ldr	r3, [sp, #0]
 8012520:	6163      	str	r3, [r4, #20]
 8012522:	9b01      	ldr	r3, [sp, #4]
 8012524:	6120      	str	r0, [r4, #16]
 8012526:	b15b      	cbz	r3, 8012540 <__smakebuf_r+0x74>
 8012528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801252c:	4630      	mov	r0, r6
 801252e:	f000 f915 	bl	801275c <_isatty_r>
 8012532:	b128      	cbz	r0, 8012540 <__smakebuf_r+0x74>
 8012534:	89a3      	ldrh	r3, [r4, #12]
 8012536:	f023 0303 	bic.w	r3, r3, #3
 801253a:	f043 0301 	orr.w	r3, r3, #1
 801253e:	81a3      	strh	r3, [r4, #12]
 8012540:	89a0      	ldrh	r0, [r4, #12]
 8012542:	4305      	orrs	r5, r0
 8012544:	81a5      	strh	r5, [r4, #12]
 8012546:	e7cd      	b.n	80124e4 <__smakebuf_r+0x18>
 8012548:	080122dd 	.word	0x080122dd

0801254c <memmove>:
 801254c:	4288      	cmp	r0, r1
 801254e:	b510      	push	{r4, lr}
 8012550:	eb01 0402 	add.w	r4, r1, r2
 8012554:	d902      	bls.n	801255c <memmove+0x10>
 8012556:	4284      	cmp	r4, r0
 8012558:	4623      	mov	r3, r4
 801255a:	d807      	bhi.n	801256c <memmove+0x20>
 801255c:	1e43      	subs	r3, r0, #1
 801255e:	42a1      	cmp	r1, r4
 8012560:	d008      	beq.n	8012574 <memmove+0x28>
 8012562:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012566:	f803 2f01 	strb.w	r2, [r3, #1]!
 801256a:	e7f8      	b.n	801255e <memmove+0x12>
 801256c:	4402      	add	r2, r0
 801256e:	4601      	mov	r1, r0
 8012570:	428a      	cmp	r2, r1
 8012572:	d100      	bne.n	8012576 <memmove+0x2a>
 8012574:	bd10      	pop	{r4, pc}
 8012576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801257a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801257e:	e7f7      	b.n	8012570 <memmove+0x24>

08012580 <__malloc_lock>:
 8012580:	4801      	ldr	r0, [pc, #4]	; (8012588 <__malloc_lock+0x8>)
 8012582:	f7ff bf7d 	b.w	8012480 <__retarget_lock_acquire_recursive>
 8012586:	bf00      	nop
 8012588:	200059ac 	.word	0x200059ac

0801258c <__malloc_unlock>:
 801258c:	4801      	ldr	r0, [pc, #4]	; (8012594 <__malloc_unlock+0x8>)
 801258e:	f7ff bf78 	b.w	8012482 <__retarget_lock_release_recursive>
 8012592:	bf00      	nop
 8012594:	200059ac 	.word	0x200059ac

08012598 <_realloc_r>:
 8012598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801259a:	4607      	mov	r7, r0
 801259c:	4614      	mov	r4, r2
 801259e:	460e      	mov	r6, r1
 80125a0:	b921      	cbnz	r1, 80125ac <_realloc_r+0x14>
 80125a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80125a6:	4611      	mov	r1, r2
 80125a8:	f7ff b9a0 	b.w	80118ec <_malloc_r>
 80125ac:	b922      	cbnz	r2, 80125b8 <_realloc_r+0x20>
 80125ae:	f7ff f94d 	bl	801184c <_free_r>
 80125b2:	4625      	mov	r5, r4
 80125b4:	4628      	mov	r0, r5
 80125b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125b8:	f000 f8f2 	bl	80127a0 <_malloc_usable_size_r>
 80125bc:	42a0      	cmp	r0, r4
 80125be:	d20f      	bcs.n	80125e0 <_realloc_r+0x48>
 80125c0:	4621      	mov	r1, r4
 80125c2:	4638      	mov	r0, r7
 80125c4:	f7ff f992 	bl	80118ec <_malloc_r>
 80125c8:	4605      	mov	r5, r0
 80125ca:	2800      	cmp	r0, #0
 80125cc:	d0f2      	beq.n	80125b4 <_realloc_r+0x1c>
 80125ce:	4631      	mov	r1, r6
 80125d0:	4622      	mov	r2, r4
 80125d2:	f7fb fe61 	bl	800e298 <memcpy>
 80125d6:	4631      	mov	r1, r6
 80125d8:	4638      	mov	r0, r7
 80125da:	f7ff f937 	bl	801184c <_free_r>
 80125de:	e7e9      	b.n	80125b4 <_realloc_r+0x1c>
 80125e0:	4635      	mov	r5, r6
 80125e2:	e7e7      	b.n	80125b4 <_realloc_r+0x1c>

080125e4 <_raise_r>:
 80125e4:	291f      	cmp	r1, #31
 80125e6:	b538      	push	{r3, r4, r5, lr}
 80125e8:	4604      	mov	r4, r0
 80125ea:	460d      	mov	r5, r1
 80125ec:	d904      	bls.n	80125f8 <_raise_r+0x14>
 80125ee:	2316      	movs	r3, #22
 80125f0:	6003      	str	r3, [r0, #0]
 80125f2:	f04f 30ff 	mov.w	r0, #4294967295
 80125f6:	bd38      	pop	{r3, r4, r5, pc}
 80125f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80125fa:	b112      	cbz	r2, 8012602 <_raise_r+0x1e>
 80125fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012600:	b94b      	cbnz	r3, 8012616 <_raise_r+0x32>
 8012602:	4620      	mov	r0, r4
 8012604:	f000 f830 	bl	8012668 <_getpid_r>
 8012608:	462a      	mov	r2, r5
 801260a:	4601      	mov	r1, r0
 801260c:	4620      	mov	r0, r4
 801260e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012612:	f000 b817 	b.w	8012644 <_kill_r>
 8012616:	2b01      	cmp	r3, #1
 8012618:	d00a      	beq.n	8012630 <_raise_r+0x4c>
 801261a:	1c59      	adds	r1, r3, #1
 801261c:	d103      	bne.n	8012626 <_raise_r+0x42>
 801261e:	2316      	movs	r3, #22
 8012620:	6003      	str	r3, [r0, #0]
 8012622:	2001      	movs	r0, #1
 8012624:	e7e7      	b.n	80125f6 <_raise_r+0x12>
 8012626:	2400      	movs	r4, #0
 8012628:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801262c:	4628      	mov	r0, r5
 801262e:	4798      	blx	r3
 8012630:	2000      	movs	r0, #0
 8012632:	e7e0      	b.n	80125f6 <_raise_r+0x12>

08012634 <raise>:
 8012634:	4b02      	ldr	r3, [pc, #8]	; (8012640 <raise+0xc>)
 8012636:	4601      	mov	r1, r0
 8012638:	6818      	ldr	r0, [r3, #0]
 801263a:	f7ff bfd3 	b.w	80125e4 <_raise_r>
 801263e:	bf00      	nop
 8012640:	20000028 	.word	0x20000028

08012644 <_kill_r>:
 8012644:	b538      	push	{r3, r4, r5, lr}
 8012646:	4d07      	ldr	r5, [pc, #28]	; (8012664 <_kill_r+0x20>)
 8012648:	2300      	movs	r3, #0
 801264a:	4604      	mov	r4, r0
 801264c:	4608      	mov	r0, r1
 801264e:	4611      	mov	r1, r2
 8012650:	602b      	str	r3, [r5, #0]
 8012652:	f7f0 fcad 	bl	8002fb0 <_kill>
 8012656:	1c43      	adds	r3, r0, #1
 8012658:	d102      	bne.n	8012660 <_kill_r+0x1c>
 801265a:	682b      	ldr	r3, [r5, #0]
 801265c:	b103      	cbz	r3, 8012660 <_kill_r+0x1c>
 801265e:	6023      	str	r3, [r4, #0]
 8012660:	bd38      	pop	{r3, r4, r5, pc}
 8012662:	bf00      	nop
 8012664:	200059b4 	.word	0x200059b4

08012668 <_getpid_r>:
 8012668:	f7f0 bc9a 	b.w	8002fa0 <_getpid>

0801266c <__sread>:
 801266c:	b510      	push	{r4, lr}
 801266e:	460c      	mov	r4, r1
 8012670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012674:	f000 f89c 	bl	80127b0 <_read_r>
 8012678:	2800      	cmp	r0, #0
 801267a:	bfab      	itete	ge
 801267c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801267e:	89a3      	ldrhlt	r3, [r4, #12]
 8012680:	181b      	addge	r3, r3, r0
 8012682:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012686:	bfac      	ite	ge
 8012688:	6563      	strge	r3, [r4, #84]	; 0x54
 801268a:	81a3      	strhlt	r3, [r4, #12]
 801268c:	bd10      	pop	{r4, pc}

0801268e <__swrite>:
 801268e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012692:	461f      	mov	r7, r3
 8012694:	898b      	ldrh	r3, [r1, #12]
 8012696:	05db      	lsls	r3, r3, #23
 8012698:	4605      	mov	r5, r0
 801269a:	460c      	mov	r4, r1
 801269c:	4616      	mov	r6, r2
 801269e:	d505      	bpl.n	80126ac <__swrite+0x1e>
 80126a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126a4:	2302      	movs	r3, #2
 80126a6:	2200      	movs	r2, #0
 80126a8:	f000 f868 	bl	801277c <_lseek_r>
 80126ac:	89a3      	ldrh	r3, [r4, #12]
 80126ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80126b6:	81a3      	strh	r3, [r4, #12]
 80126b8:	4632      	mov	r2, r6
 80126ba:	463b      	mov	r3, r7
 80126bc:	4628      	mov	r0, r5
 80126be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126c2:	f000 b817 	b.w	80126f4 <_write_r>

080126c6 <__sseek>:
 80126c6:	b510      	push	{r4, lr}
 80126c8:	460c      	mov	r4, r1
 80126ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126ce:	f000 f855 	bl	801277c <_lseek_r>
 80126d2:	1c43      	adds	r3, r0, #1
 80126d4:	89a3      	ldrh	r3, [r4, #12]
 80126d6:	bf15      	itete	ne
 80126d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80126da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80126de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80126e2:	81a3      	strheq	r3, [r4, #12]
 80126e4:	bf18      	it	ne
 80126e6:	81a3      	strhne	r3, [r4, #12]
 80126e8:	bd10      	pop	{r4, pc}

080126ea <__sclose>:
 80126ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126ee:	f000 b813 	b.w	8012718 <_close_r>
	...

080126f4 <_write_r>:
 80126f4:	b538      	push	{r3, r4, r5, lr}
 80126f6:	4d07      	ldr	r5, [pc, #28]	; (8012714 <_write_r+0x20>)
 80126f8:	4604      	mov	r4, r0
 80126fa:	4608      	mov	r0, r1
 80126fc:	4611      	mov	r1, r2
 80126fe:	2200      	movs	r2, #0
 8012700:	602a      	str	r2, [r5, #0]
 8012702:	461a      	mov	r2, r3
 8012704:	f7f0 fc8b 	bl	800301e <_write>
 8012708:	1c43      	adds	r3, r0, #1
 801270a:	d102      	bne.n	8012712 <_write_r+0x1e>
 801270c:	682b      	ldr	r3, [r5, #0]
 801270e:	b103      	cbz	r3, 8012712 <_write_r+0x1e>
 8012710:	6023      	str	r3, [r4, #0]
 8012712:	bd38      	pop	{r3, r4, r5, pc}
 8012714:	200059b4 	.word	0x200059b4

08012718 <_close_r>:
 8012718:	b538      	push	{r3, r4, r5, lr}
 801271a:	4d06      	ldr	r5, [pc, #24]	; (8012734 <_close_r+0x1c>)
 801271c:	2300      	movs	r3, #0
 801271e:	4604      	mov	r4, r0
 8012720:	4608      	mov	r0, r1
 8012722:	602b      	str	r3, [r5, #0]
 8012724:	f7f0 fc97 	bl	8003056 <_close>
 8012728:	1c43      	adds	r3, r0, #1
 801272a:	d102      	bne.n	8012732 <_close_r+0x1a>
 801272c:	682b      	ldr	r3, [r5, #0]
 801272e:	b103      	cbz	r3, 8012732 <_close_r+0x1a>
 8012730:	6023      	str	r3, [r4, #0]
 8012732:	bd38      	pop	{r3, r4, r5, pc}
 8012734:	200059b4 	.word	0x200059b4

08012738 <_fstat_r>:
 8012738:	b538      	push	{r3, r4, r5, lr}
 801273a:	4d07      	ldr	r5, [pc, #28]	; (8012758 <_fstat_r+0x20>)
 801273c:	2300      	movs	r3, #0
 801273e:	4604      	mov	r4, r0
 8012740:	4608      	mov	r0, r1
 8012742:	4611      	mov	r1, r2
 8012744:	602b      	str	r3, [r5, #0]
 8012746:	f7f0 fc92 	bl	800306e <_fstat>
 801274a:	1c43      	adds	r3, r0, #1
 801274c:	d102      	bne.n	8012754 <_fstat_r+0x1c>
 801274e:	682b      	ldr	r3, [r5, #0]
 8012750:	b103      	cbz	r3, 8012754 <_fstat_r+0x1c>
 8012752:	6023      	str	r3, [r4, #0]
 8012754:	bd38      	pop	{r3, r4, r5, pc}
 8012756:	bf00      	nop
 8012758:	200059b4 	.word	0x200059b4

0801275c <_isatty_r>:
 801275c:	b538      	push	{r3, r4, r5, lr}
 801275e:	4d06      	ldr	r5, [pc, #24]	; (8012778 <_isatty_r+0x1c>)
 8012760:	2300      	movs	r3, #0
 8012762:	4604      	mov	r4, r0
 8012764:	4608      	mov	r0, r1
 8012766:	602b      	str	r3, [r5, #0]
 8012768:	f7f0 fc91 	bl	800308e <_isatty>
 801276c:	1c43      	adds	r3, r0, #1
 801276e:	d102      	bne.n	8012776 <_isatty_r+0x1a>
 8012770:	682b      	ldr	r3, [r5, #0]
 8012772:	b103      	cbz	r3, 8012776 <_isatty_r+0x1a>
 8012774:	6023      	str	r3, [r4, #0]
 8012776:	bd38      	pop	{r3, r4, r5, pc}
 8012778:	200059b4 	.word	0x200059b4

0801277c <_lseek_r>:
 801277c:	b538      	push	{r3, r4, r5, lr}
 801277e:	4d07      	ldr	r5, [pc, #28]	; (801279c <_lseek_r+0x20>)
 8012780:	4604      	mov	r4, r0
 8012782:	4608      	mov	r0, r1
 8012784:	4611      	mov	r1, r2
 8012786:	2200      	movs	r2, #0
 8012788:	602a      	str	r2, [r5, #0]
 801278a:	461a      	mov	r2, r3
 801278c:	f7f0 fc8a 	bl	80030a4 <_lseek>
 8012790:	1c43      	adds	r3, r0, #1
 8012792:	d102      	bne.n	801279a <_lseek_r+0x1e>
 8012794:	682b      	ldr	r3, [r5, #0]
 8012796:	b103      	cbz	r3, 801279a <_lseek_r+0x1e>
 8012798:	6023      	str	r3, [r4, #0]
 801279a:	bd38      	pop	{r3, r4, r5, pc}
 801279c:	200059b4 	.word	0x200059b4

080127a0 <_malloc_usable_size_r>:
 80127a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127a4:	1f18      	subs	r0, r3, #4
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	bfbc      	itt	lt
 80127aa:	580b      	ldrlt	r3, [r1, r0]
 80127ac:	18c0      	addlt	r0, r0, r3
 80127ae:	4770      	bx	lr

080127b0 <_read_r>:
 80127b0:	b538      	push	{r3, r4, r5, lr}
 80127b2:	4d07      	ldr	r5, [pc, #28]	; (80127d0 <_read_r+0x20>)
 80127b4:	4604      	mov	r4, r0
 80127b6:	4608      	mov	r0, r1
 80127b8:	4611      	mov	r1, r2
 80127ba:	2200      	movs	r2, #0
 80127bc:	602a      	str	r2, [r5, #0]
 80127be:	461a      	mov	r2, r3
 80127c0:	f7f0 fc10 	bl	8002fe4 <_read>
 80127c4:	1c43      	adds	r3, r0, #1
 80127c6:	d102      	bne.n	80127ce <_read_r+0x1e>
 80127c8:	682b      	ldr	r3, [r5, #0]
 80127ca:	b103      	cbz	r3, 80127ce <_read_r+0x1e>
 80127cc:	6023      	str	r3, [r4, #0]
 80127ce:	bd38      	pop	{r3, r4, r5, pc}
 80127d0:	200059b4 	.word	0x200059b4

080127d4 <trunc>:
 80127d4:	ec51 0b10 	vmov	r0, r1, d0
 80127d8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80127dc:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80127e0:	2b13      	cmp	r3, #19
 80127e2:	b5d0      	push	{r4, r6, r7, lr}
 80127e4:	460c      	mov	r4, r1
 80127e6:	dc10      	bgt.n	801280a <trunc+0x36>
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	bfa5      	ittet	ge
 80127ec:	4a11      	ldrge	r2, [pc, #68]	; (8012834 <trunc+0x60>)
 80127ee:	fa42 f303 	asrge.w	r3, r2, r3
 80127f2:	2100      	movlt	r1, #0
 80127f4:	2100      	movge	r1, #0
 80127f6:	bfb9      	ittee	lt
 80127f8:	2000      	movlt	r0, #0
 80127fa:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 80127fe:	2000      	movge	r0, #0
 8012800:	ea24 0103 	bicge.w	r1, r4, r3
 8012804:	ec41 0b10 	vmov	d0, r0, r1
 8012808:	bdd0      	pop	{r4, r6, r7, pc}
 801280a:	2b33      	cmp	r3, #51	; 0x33
 801280c:	dd08      	ble.n	8012820 <trunc+0x4c>
 801280e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012812:	d1f7      	bne.n	8012804 <trunc+0x30>
 8012814:	ee10 2a10 	vmov	r2, s0
 8012818:	460b      	mov	r3, r1
 801281a:	f7ed fd3f 	bl	800029c <__adddf3>
 801281e:	e7f1      	b.n	8012804 <trunc+0x30>
 8012820:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8012824:	f04f 33ff 	mov.w	r3, #4294967295
 8012828:	fa23 f202 	lsr.w	r2, r3, r2
 801282c:	ea20 0602 	bic.w	r6, r0, r2
 8012830:	4630      	mov	r0, r6
 8012832:	e7e7      	b.n	8012804 <trunc+0x30>
 8012834:	000fffff 	.word	0x000fffff

08012838 <_init>:
 8012838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801283a:	bf00      	nop
 801283c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801283e:	bc08      	pop	{r3}
 8012840:	469e      	mov	lr, r3
 8012842:	4770      	bx	lr

08012844 <_fini>:
 8012844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012846:	bf00      	nop
 8012848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801284a:	bc08      	pop	{r3}
 801284c:	469e      	mov	lr, r3
 801284e:	4770      	bx	lr
